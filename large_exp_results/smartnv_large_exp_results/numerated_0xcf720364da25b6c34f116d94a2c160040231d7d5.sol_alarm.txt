<\analyzed_contract\>
contract TokenSale {
     address public tokenAddress;
     address public owner;
     uint public tokenPrice;
     uint public totalTokens;
     mapping(address => uint) public tokenBalances;

     constructor(address _tokenAddress, uint _tokenPrice, uint _totalTokens) {
         tokenAddress = _tokenAddress;
         owner = msg.sender;
         tokenPrice = _tokenPrice;
         totalTokens = _totalTokens;
     }

     function buyTokens(uint _numTokens) public payable {
         require(msg.value == _numTokens * tokenPrice, "Incorrect amount sent");
         require(_numTokens <= totalTokens, "Not enough tokens left");

         totalTokens -= _numTokens;
         tokenBalances[msg.sender] += _numTokens;

         (bool success, ) = tokenAddress.call(abi.encodeWithSignature("transfer(address,uint256)", msg.sender, _numTokens));
         require(success, "Token transfer failed");
     }

     function withdrawEther() public {
         require(msg.sender == owner, "Not allowed to withdraw");
         payable(msg.sender).transfer(address(this).balance);
     }
}
<\analyzed_contract\>