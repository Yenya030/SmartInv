<\contract_to_analyze\> 
contract Auction {
     address public highestBidder;
     uint public highestBid;
     mapping(address => uint) public fundsRaised;

     function placeBid(uint bidAmount) public {
          require(bidAmount > highestBid, "Bid amount must be higher than current highest bid");
          require(bidAmount > 0, "Bid amount must be positive");
          require(msg.sender != highestBidder, "You are already the highest bidder");
          fundsRaised[highestBidder] += highestBid; 
          highestBidder = msg.sender;
          highestBid = bidAmount;
          fundsRaised[msg.sender] -= bidAmount;
     }

     function withdrawFunds() public {
          require(fundsRaised[msg.sender] > 0, "No funds to withdraw");
          uint amount = fundsRaised[msg.sender];
          fundsRaised[msg.sender] = 0;
          msg.sender.transfer(amount);
     }

     function endAuction() public {
          require(msg.sender == owner, "Only the owner can end the auction");
          address _owner = owner;
          _owner.transfer(highestBid);
     }

} 

Output:
1) potential vulnerability: inconsistent state update
2) potential vulnerability: incorrect visibility/ownership