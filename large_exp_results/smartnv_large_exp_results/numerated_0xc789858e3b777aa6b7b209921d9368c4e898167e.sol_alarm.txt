<\contract\> 
contract Auction {
    mapping(address => uint) public bids;
    address public highestBidder;
    uint public highestBid;

    function bid(uint amount) public {
        require(amount > highestBid, "Bid must be higher than the current highest bid");
        require(bids[msg.sender] + amount > bids[msg.sender], "Integer overflow");
        bids[msg.sender] += amount;
        if (highestBidder != address(0)) {
            bids[highestBidder] += highestBid; 
        }
        highestBidder = msg.sender;
        highestBid = amount;
    }

    function withdraw() public {
        require(msg.sender != highestBidder, "Cannot withdraw while being the highest bidder");
        uint amount = bids[msg.sender];
        bids[msg.sender] = 0;
        msg.sender.transfer(amount);
    }
}
<\contract\>