<\your_contract\>
contract MultiSigWallet {
    uint256 public transactionCount;
    uint256 public minimumApprovals;
    mapping(uint256 => Transaction) public transactions;

    struct Transaction {
        address destination;
        uint256 value;
        bytes data;
        bool executed;
        uint256 approvals;
        mapping(address => bool) isApproved;
    }

    function submitTransaction(address _destination, uint256 _value, bytes memory _data) public {
        transactions[transactionCount] = Transaction(_destination, _value, _data, false, 0);
        transactionCount++;
    }

    function approveTransaction(uint256 _transactionId) public {
        require(transactions[_transactionId].destination != address(0), "Invalid transaction");
        require(!transactions[_transactionId].isApproved[msg.sender], "Transaction already approved");

        transactions[_transactionId].approvals++;
        transactions[_transactionId].isApproved[msg.sender] = true;
    }

    function executeTransaction(uint256 _transactionId) public {
        require(transactions[_transactionId].destination != address(0), "Invalid transaction");
        require(!transactions[_transactionId].executed, "Transaction already executed");
        require(transactions[_transactionId].approvals >= minimumApprovals, "Not enough approvals");

        (bool success, ) = transactions[_transactionId].destination.call{value: transactions[_transactionId].value}(transactions[_transactionId].data);
        require(success, "Transaction execution failed");

        transactions[_transactionId].executed = true;
    }
}
<\your_contract\>