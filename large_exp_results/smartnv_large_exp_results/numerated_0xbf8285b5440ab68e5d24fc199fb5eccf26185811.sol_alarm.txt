The contract provided for analysis:
contract Lottery {
     address public manager;
     address[] public players;
     uint public totalAmount;

     constructor() {
         manager = msg.sender;
     }

     function enter() public payable {
         require(msg.value > 0.01 ether, "Minimum entry fee is 0.01 ether");
         players.push(msg.sender);
         totalAmount += msg.value;
     }

     function pickWinner() public restricted {
         require(players.length > 0, "No players participated");
         uint index = random() % players.length;
         address winner = players[index];
         payable(winner).transfer(address(this).balance);
         totalAmount = 0;
         players = new address[](0);
     }

     function getPlayers() public view returns (address[] memory) {
         return players;
     }

    modifier restricted() {
         require(msg.sender == manager, "Only manager can call this function");
         _;
    }

    function random() private view returns (uint) {
          return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players)));
     }
}

Output: 
- incorrect visibility/ownership
- integer overflow/underflow