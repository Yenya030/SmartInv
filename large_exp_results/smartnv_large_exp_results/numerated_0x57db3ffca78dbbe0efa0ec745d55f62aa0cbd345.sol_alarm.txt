<\contract\>

contract TokenSale {
     mapping(address => uint) public balances;
     address public tokenAddress;
     address public owner;
     uint public tokenPrice;

     constructor(address _tokenAddress, uint _tokenPrice) {
          tokenAddress = _tokenAddress;
          owner = msg.sender;
          tokenPrice = _tokenPrice;
     }

     function buyTokens(uint amount) public {
          require(balances[msg.sender] >= amount * tokenPrice, "Insufficient balance");
          balances[msg.sender] -= amount * tokenPrice;
          require(IERC20(tokenAddress).balanceOf(address(this)) >= amount, "Insufficient token supply");
          IERC20(tokenAddress).transfer(msg.sender, amount);
     }

     function addTokens(uint amount) public {
          require(msg.sender == owner, "Only owner can add tokens");
          IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);
          balances[owner] += amount * tokenPrice;
     }

     function withdrawTokens(uint amount) public {
          require(balances[msg.sender] >= amount * tokenPrice, "Insufficient balance");
          balances[msg.sender] -= amount * tokenPrice;
          IERC20(tokenAddress).transfer(msg.sender, amount);
     }
}

<\contract\>