contract Crowdsale {
    address public owner;
    address public tokenAddress;
    uint public tokenPrice;
    uint public totalTokensSold;
    
    mapping(address => uint) public tokenBalance;
    
    constructor(address _tokenAddress, uint _tokenPrice) {
        owner = msg.sender;
        tokenAddress = _tokenAddress;
        tokenPrice = _tokenPrice;
        totalTokensSold = 0;
    }
    
    function buyTokens(uint _numTokens) external payable {
        require(msg.value == _numTokens * tokenPrice, "Incorrect amount sent");
        
        totalTokensSold += _numTokens;
        tokenBalance[msg.sender] += _numTokens;
        
        payable(owner).transfer(msg.value);
    }
    
    function refundTokens(uint _numTokens) external {
        require(tokenBalance[msg.sender] >= _numTokens, "Insufficient tokens");
        
        totalTokensSold -= _numTokens;
        tokenBalance[msg.sender] -= _numTokens;
        
        payable(msg.sender).transfer(_numTokens * tokenPrice);
    }
    
    function endCrowdsale() external {
        require(msg.sender == owner, "Only owner can end the crowdsale");
        // some code to handle ending the crowdsale
    }
}