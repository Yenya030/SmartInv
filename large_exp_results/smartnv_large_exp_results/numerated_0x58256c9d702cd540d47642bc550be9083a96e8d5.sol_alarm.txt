<\analyzed_contract\>
contract TokenSale {
         IERC20 public token;
         address public owner;
         uint public price;
         mapping(address => uint) public balances;
         
         constructor(IERC20 _token, uint _price) {
             token = _token;
             owner = msg.sender;
             price = _price;
         }
         
         function buyTokens(uint amount) public {
             require(token.balanceOf(msg.sender) >= amount * price, "Insufficient balance");
             token.transferFrom(msg.sender, address(this), amount * price);
             balances[msg.sender] += amount;
         }
         
         function withdrawTokens(address recipient, uint amount) public {
             require(msg.sender == owner, "Unauthorized");
             require(balances[recipient] >= amount, "Insufficient balance");
             token.transfer(recipient, amount);
             balances[recipient] -= amount;
         }
     }
<\analyzed_contract\>