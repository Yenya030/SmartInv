<\contract\>
contract Marketplace {
    address public owner;
    mapping(uint256 => address) public tokenIdToOwner;
    mapping(address => uint256) public tokenOwnershipCount;

    constructor() {
        owner = msg.sender;
    }

    function buyToken(uint256 tokenId) external payable {
        require(tokenIdToOwner[tokenId] != msg.sender, "You already own this token");
        require(msg.value >= 1 ether, "Insufficient funds to buy token");

        tokenIdToOwner[tokenId] = msg.sender;
        tokenOwnershipCount[msg.sender]++;
        tokenOwnershipCount[owner]--;

        address payable ownerAddress = payable(owner);
        ownerAddress.transfer(msg.value);
    }

    function transferToken(uint256 tokenId, address to) external {
        require(tokenIdToOwner[tokenId] == msg.sender, "You don't own this token");

        tokenIdToOwner[tokenId] = to;
        tokenOwnershipCount[to]++;
        tokenOwnershipCount[msg.sender]--;
    }
}
<\contract\>