Contract:
```solidity
contract TokenSale {
    mapping(address => uint256) public balances;
    IERC20 public token;
    address public owner;
    
    constructor(address _token) {
        owner = msg.sender;
        token = IERC20(_token);
    }

    function buyTokens(uint256 amount) public {
        require(token.balanceOf(address(this)) >= amount, "Not enough tokens in sale");
        
        token.transfer(msg.sender, amount);
        balances[msg.sender] += amount;
    }

    function withdrawTokens() public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        
        uint256 balance = balances[msg.sender];
        balances[msg.sender] = 0;
        token.transfer(msg.sender, balance);
    }
}
```

Potential vulnerabilities:
1) Incorrect visibility/ownership - The function `withdrawTokens()` allows anyone to call it, not just the owner, potentially leading to unauthorized withdrawals.
2) Inconsistent state update - The balances of tokens are updated but not checked before transferring, which might result in inconsistent state if the transfer fails.