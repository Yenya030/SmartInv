contract VotingSystem {
     struct Voter {
         uint256 weight;
         bool voted;
         address delegate;
         uint256 vote;
     }

     mapping(address => Voter) public voters;
     uint256[] public proposals;

     function delegate(address to) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You have already voted");
         require(to != msg.sender, "Self-delegation is not allowed");

         while (voters[to].delegate != address(0)) {
             to = voters[to].delegate;
             require(to != msg.sender, "Cyclic delegation is not allowed");
         }

         sender.voted = true;
         sender.delegate = to;
         Voter storage delegate_ = voters[to];

         if (delegate_.voted) {
             proposals[delegate_.vote] += sender.weight;
         } else {
             delegate_.weight += sender.weight;
         }
     }

     function vote(uint256 proposal) public {
         Voter storage sender = voters[msg.sender];
         require(sender.weight > 0, "You don't have the right to vote");
         require(!sender.voted, "You have already voted");

         sender.voted = true;
         sender.vote = proposal;

         proposals[proposal] += sender.weight;
     }
}