<\contract\>
contract Crowdsale {
     address public owner;
     IERC20 public token;
     uint public tokenPrice;
     uint public availableTokens;
     mapping(address => uint) public balances;

     constructor(IERC20 _token, uint _tokenPrice, uint _availableTokens) public {
         owner = msg.sender;
         token = _token;
         tokenPrice = _tokenPrice;
         availableTokens = _availableTokens;
     }

     function buyTokens(uint _numTokens) public payable {
         require(msg.value == _numTokens * tokenPrice, "Incorrect payment amount");
         require(_numTokens <= availableTokens, "Not enough tokens available");
         balances[msg.sender] += _numTokens;
         availableTokens -= _numTokens;
     }

     function withdraw() public {
         require(msg.sender == owner, "Caller is not the owner");
         msg.sender.transfer(address(this).balance);
     }

     function endCrowdsale() public {
         require(availableTokens == 0, "Not all tokens have been sold");
         owner.transfer(address(this).balance);
         token.transfer(owner, token.balanceOf(address(this)));
     }
}
<\contract\>