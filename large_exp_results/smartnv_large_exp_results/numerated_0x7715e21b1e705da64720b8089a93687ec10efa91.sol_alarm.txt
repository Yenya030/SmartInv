The contract:<\example_3\>
contract MultiSigWallet {
    
    mapping(address => bool) public owners;
    uint public transactionCount;
    uint public required;
    
    struct Transaction {
        address destination;
        uint value;
        bytes data;
        bool executed;
    }
    
    mapping(uint => Transaction) public transactions;
    
    function submitTransaction(address _destination, uint _value, bytes memory _data) public {
        transactions[transactionCount] = Transaction(_destination, _value, _data, false);
        transactionCount += 1;
    }
    
    function executeTransaction(uint _transactionId) public {
        Transaction storage txn = transactions[_transactionId];
        require(owners[msg.sender], "Sender is not an owner");
        require(!txn.executed, "Transaction already executed");
        
        // Execute transaction
        (bool success,) = txn.destination.call{value: txn.value} (txn.data);
        require(success, "Transaction execution failed");
        
        txn.executed = true;
    }
}