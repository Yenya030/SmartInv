<\contract\>
contract VotingSystem {
    struct Voter {
        uint256 weight;
        bool voted;
        address delegate;
        uint256 vote;
    }

    mapping(address => Voter) public voters;
    uint256 public totalVotes;

    function delegate(address to) public {
        require(!voters[msg.sender].voted, "Already voted.");
        require(to != msg.sender, "Self-delegation is not allowed.");

        voters[msg.sender].delegate = to;
    }

    function vote(uint256 option) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "Already voted.");
        sender.voted = true;
        sender.vote = option;
        sender.weight = 1;

        totalVotes++;
    }

    function getWinner(uint256 option1, uint256 option2) public view returns (uint256) {
        require(option1 != option2, "Options must be different.");
        require(totalVotes > 0, "No votes have been cast yet.");

        uint256 votesOption1;
        uint256 votesOption2;

        for (uint256 i = 0; i < totalVotes; i++) {
            address voterAddress = getAddressByIndex(i);
            if (voters[voterAddress].vote == option1) {
                votesOption1 += voters[voterAddress].weight;
            } else if (voters[voterAddress].vote == option2) {
                votesOption2 += voters[voterAddress].weight;
            }
        }

        return (votesOption1 > votesOption2) ? option1 : option2;
    }

    function getAddressByIndex(uint256 index) public view returns (address) {
        require(index < totalVotes, "Index out of bounds.");

        address voterAddress;
        uint256 count = 0;
        for (uint256 i = 0; i < totalVotes; i++) {
            if (voters[msg.sender].voted) {
                if (count == index) {
                    voterAddress = msg.sender;
                    break;
                }
                count++;
            }
        }

        return voterAddress;
    }
}
<\contract\>