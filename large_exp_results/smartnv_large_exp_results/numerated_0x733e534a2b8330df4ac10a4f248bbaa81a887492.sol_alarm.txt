The contract provided for analysis:
contract TokenSale {
    address public admin;
    IERC20 public token;
    mapping(address => uint256) public balances;
    
    constructor(address _token) {
        admin = msg.sender;
        token = IERC20(_token);
    }
    
    function buyTokens(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        token.transferFrom(msg.sender, address(this), amount);
        balances[msg.sender] += amount;
    }
    
    function withdrawTokens() public {
        uint256 balance = balances[msg.sender];
        require(balance > 0, "Insufficient balance");
        token.transfer(msg.sender, balance);
        balances[msg.sender] = 0;
    }
    
    function updateAdmin(address newAdmin) public {
        require(msg.sender == admin, "Only admin can update admin");
        admin = newAdmin;
    }
}
Output: 
1) privilege escalation
2) inconsistent state update
3) incorrect visibility/ownership