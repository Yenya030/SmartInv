The contract to analyze:

contract TokenSale {
    address public admin;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;
    mapping(address => uint) public tokensPurchased;

    constructor(address _token, uint _tokenPrice) {
        admin = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(msg.value == _amount * tokenPrice, "Incorrect payment amount");

        token.transfer(msg.sender, _amount);
        totalTokensSold += _amount;
        tokensPurchased[msg.sender] += _amount;
    }
}


Output: 
- Business logic flaw: The buyTokens function does not consider the availability of tokens in the contract before transferring tokens to the buyer, which may lead to inconsistency in state updates.
- Inconsistent state update: The totalTokensSold and tokensPurchased mapping are updated after the transfer of tokens to the buyer, which may lead to inconsistent state if the transfer fails.
- Incorrect visibility/ownership: The admin variable is public, potentially exposing sensitive information about the contract admin.