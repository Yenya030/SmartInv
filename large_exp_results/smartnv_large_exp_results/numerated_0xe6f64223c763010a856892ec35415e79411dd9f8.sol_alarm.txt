<\contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;
    bool public saleActive;

    mapping(address => uint) public balances;

    constructor(address _token, uint _tokenPrice) {
        owner = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
        saleActive = true;
    }

    function buyTokens(uint _amount) public {
        require(saleActive, "Sale is not active");
        require(token.balanceOf(msg.sender) >= _amount * tokenPrice, "Insufficient token balance");
        token.transferFrom(owner, msg.sender, _amount);
        tokensSold += _amount;
        balances[msg.sender] += _amount;
    }

    function endSale() public {
        require(msg.sender == owner, "Only the owner can end the sale");
        saleActive = false;
    }
}
<\contract\>