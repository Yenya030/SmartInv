Contract:
```solidity
contract MultiSigWallet {
    address[] public owners;
    uint public numConfirmationsRequired;

    struct Transaction {
        address to;
        uint value;
        bytes data;
        bool executed;
        uint numConfirmations;
    }

    Transaction[] public transactions;

    mapping(address => mapping(uint => bool)) public isConfirmed;

    function submitTransaction(address to, uint value, bytes memory data) public {
        Transaction memory newTransaction = Transaction({
            to: to,
            value: value,
            data: data,
            executed: false,
            numConfirmations: 0
        });

        transactions.push(newTransaction);
    }

    function confirmTransaction(uint transactionId) public {
        require(isConfirmed[msg.sender][transactionId] == false, "Transaction already confirmed");
        
        Transaction storage transaction = transactions[transactionId];
        transaction.numConfirmations += 1;
        isConfirmed[msg.sender][transactionId] = true;
    }

    function executeTransaction(uint transactionId) public {
        Transaction storage transaction = transactions[transactionId];
        require(transaction.executed == false, "Transaction already executed");
        require(transaction.numConfirmations >= numConfirmationsRequired, "Not enough confirmations");

        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);
        require(success, "Transaction execution failed");

        transaction.executed = true;
    }
}
```

Output:
- Potential vulnerability: Incorrect visibility/ownership