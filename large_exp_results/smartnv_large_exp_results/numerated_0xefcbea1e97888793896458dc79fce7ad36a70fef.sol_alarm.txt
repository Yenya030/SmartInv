Contract to analyze:

contract TokenSale {
    address public admin;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;
    
    constructor(address _token, uint _tokenPrice) {
        admin = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }
    
    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance");
        uint cost = _amount * tokenPrice;
        require(token.allowance(msg.sender, address(this)) >= cost, "Allowance not enough");
        
        token.transferFrom(msg.sender, address(this), _amount);
        tokensSold += _amount;
        
        payable(admin).transfer(cost);
    }
}
Output: 
1) atomicity violation
2) inconsistent state update
3) permission escalation