<\contract\>
contract MultiSigWallet {
    mapping(address => bool) public owners;
    mapping(uint => Transaction) public transactions;

    struct Transaction {
        address to;
        uint amount;
        bool executed;
    }

    function addOwner(address _owner) public {
        require(msg.sender == owners[0], "Only the first owner can add new owners");
        owners[_owner] = true;
    }

    function removeOwner(address _owner) public {
        require(msg.sender == owners[0] && _owner != owners[0], "Only the first owner can remove other owners");
        owners[_owner] = false;
    }

    function submitTransaction(address _to, uint _amount) public {
        require(owners[msg.sender], "Only owners can submit transactions");
        uint transactionId = uint(keccak256(abi.encodePacked(_to, _amount, block.timestamp)));
        transactions[transactionId] = Transaction(_to, _amount, false);
    }

    function executeTransaction(uint _transactionId) public {
        require(owners[msg.sender], "Only owners can execute transactions");
        require(transactions[_transactionId].executed == false, "Transaction already executed");
        
        transactions[_transactionId].executed = true;
    }
}
<\contract\>