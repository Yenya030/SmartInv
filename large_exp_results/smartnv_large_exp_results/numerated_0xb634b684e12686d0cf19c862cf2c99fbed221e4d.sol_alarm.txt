<\contract_to_analyze\>
contract VotingSystem {
     struct Voter {
          uint256 weight; 
          bool voted; 
          address delegate; 
          uint256 vote; 
          }
     mapping(address => Voter) public voters;
     address public chairperson;

    function delegate(address to) public {
              Voter storage sender = voters[msg.sender]; 
              require(!sender.voted, "You have already voted.");
              require(to != msg.sender, "Self-delegation is not allowed.");
              require(voters[to].delegate != msg.sender, "Delegation loop detected.");

              sender.voted = true;
              sender.delegate = to;
              Voter storage delegate_ = voters[to];

              if (delegate_.voted) {
                  voters[delegate_.vote].weight += sender.weight;
              } else {
                  delegate_.weight += sender.weight;
              }
        }

    function vote(uint256 option) public {
              Voter storage sender = voters[msg.sender];
              require(!sender.voted, "You have already voted.");
              sender.voted = true;
              sender.vote = option;
              voters[option].weight += sender.weight;
        }

    function endVoting() public {
              require(msg.sender == chairperson, "Only chairperson can call this.");
              // Logic to count votes and declare the winner
        }
}
<\contract_to_analyze\>