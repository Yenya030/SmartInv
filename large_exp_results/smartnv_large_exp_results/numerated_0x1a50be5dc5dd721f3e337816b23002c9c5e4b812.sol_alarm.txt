<\contract\> 
contract VotingSystem {
   struct Voter {
       uint256 weight; 
       bool voted; 
       address delegate; 
       uint256 vote; 
   }

   struct Proposal {
       bytes32 name; 
       uint256 voteCount; 
   }

   address public chairperson;

   mapping(address => Voter) public voters;
   Proposal[] public proposals;

   constructor(bytes32[] memory proposalNames) {
       chairperson = msg.sender;
       voters[chairperson].weight = 1;

       for (uint i = 0; i < proposalNames.length; i++) {
           proposals.push(Proposal({
               name: proposalNames[i],
               voteCount: 0
           }));
       }
   }

   function vote(uint proposalIndex) public {
       Voter storage sender = voters[msg.sender]; 
       require(sender.weight != 0, "Has no right to vote");

       require(!sender.voted, "Already voted.");

       sender.voted = true;
       sender.vote = proposalIndex;

       proposals[proposalIndex].voteCount += sender.weight;
   }

   function delegate(address to) public {
       Voter storage sender = voters[msg.sender];
       require(!sender.voted, "Already voted.");

       require(to != msg.sender, "Self-delegation is disallowed.");

       while (voters[to].delegate != address(0)) {
           to = voters[to].delegate;
           require(to != msg.sender, "Found loop in delegation.");
       }

       sender.voted = true;
       sender.delegate = to;
       Voter storage delegate_ = voters[to];
       
       if (delegate_.voted) {
           proposals[delegate_.vote].voteCount += sender.weight;
       } else {
           delegate_.weight += sender.weight;
       }
   }

   function winningProposal() public view returns (uint winningProposal_) {
       uint winningVoteCount = 0;
       for (uint p = 0; p < proposals.length; p++) {
           if (proposals[p].voteCount > winningVoteCount) {
               winningVoteCount = proposals[p].voteCount;
               winningProposal_ = p;
           }
       }
   }
} 

<\contract\>