<\contract_to_analyze\> 
contract VotingSystem {
         struct Voter {
            bool voted;
            uint vote;
            address delegate;
            uint weight;
         }
         struct Proposal {
            uint voteCount;
         }
         address public chairperson;
         mapping(address => Voter) public voters;
         Proposal[] public proposals;

         function delegate(address to) public {
             Voters storage sender = voters[msg.sender];
             require(!sender.voted, "You already voted.");
             require(to != msg.sender, "Self-delegation is disallowed.");
             while (voters[to].delegate != address(0)) {
                 to = voters[to].delegate;
                 require(to != msg.sender, "Found cycle in delegation.");
             }
             sender.voted = true;
             sender.delegate = to;
             Voter storage delegate_ = voters[to];
             if (delegate_.voted) {
                 proposals[delegate_.vote].voteCount += sender.weight;
             } else {
                 delegate_.weight += sender.weight;
             }
         }
         function vote(uint proposal) public {
             Voter storage sender = voters[msg.sender];
             require(sender.weight != 0, "Has no right to vote.");
             require(!sender.voted, "Already voted.");
             sender.voted = true;
             sender.vote = proposal;
             proposals[proposal].voteCount += sender.weight;
         }
}
<\contract_to_analyze\>  