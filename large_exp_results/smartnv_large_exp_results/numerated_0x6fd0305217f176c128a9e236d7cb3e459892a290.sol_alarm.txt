<\contract_to_analyze\> 
contract MultiSigWallet {
    address[] public owners;
    uint public transactionCount;
    mapping (address => uint) public ownerIndex;

    constructor(address[] _owners) public {
        owners = _owners;
        for (uint i=0; i < owners.length; i++) {
            ownerIndex[owners[i]] = i;
        }
    }

    function submitTransaction(address destination, uint value, bytes data) public {
        // submit transaction logic
    }

    function confirmTransaction(uint transactionId) public {
        // confirm transaction logic
    }

    function executeTransaction(uint transactionId) public {
        // execute transaction logic
    }

    function revokeConfirmation(uint transactionId) public {
        // revoke confirmation logic
    }

    function isConfirmed(uint transactionId) public view returns (bool) {
        // check if transaction is confirmed logic
    }
}
<\contract_to_analyze\>