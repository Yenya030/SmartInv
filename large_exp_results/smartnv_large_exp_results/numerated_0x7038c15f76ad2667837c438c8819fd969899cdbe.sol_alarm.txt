<\analyzed_contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;
    mapping(address => uint) public balances;

    constructor(address _token, uint _tokenPrice) {
        owner = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance"); 
        require(token.allowance(msg.sender, address(this)) >= _amount, "Allowance not set");
        
        uint cost = _amount * tokenPrice;
        require(token.balanceOf(address(this)) >= cost, "Not enough tokens available");

        token.transferFrom(msg.sender, address(this), _amount);
        balances[msg.sender] += _amount;
        totalTokensSold += _amount;
    }

    function withdrawTokens(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");

        token.transfer(msg.sender, _amount);
        balances[msg.sender] -= _amount;
    }
}
<\analyzed_contract\>