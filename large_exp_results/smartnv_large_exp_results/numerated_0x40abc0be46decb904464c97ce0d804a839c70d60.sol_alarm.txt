<\your_contract\>
contract TokenSale {
    uint public startTime;
    uint public endTime;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    mapping(address => uint) public balance;

    constructor(uint _startTime, uint _endTime, address _owner, uint _tokenPrice, uint _totalTokens) {
        startTime = _startTime;
        endTime = _endTime;
        owner = _owner;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint amount) public payable {
        require(block.timestamp >= startTime && block.timestamp <= endTime, "Token sale is not active");
        require(msg.value == amount * tokenPrice, "Incorrect payment amount");
        require(totalTokens >= amount, "Not enough tokens available");
        
        balance[msg.sender] += amount;
        totalTokens -= amount;
    }

    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        
        uint balanceToWithdraw = address(this).balance;
        owner.transfer(balanceToWithdraw);
    }
}
<\your_contract\>