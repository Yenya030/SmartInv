<\Contract\>
contract VotingSystem {
    struct Voter {
        bool hasVoted;
        address delegate;
        uint vote;
        uint weight;
    }
    
    mapping(address => Voter) public voters;
    address public admin;
    uint public totalVotes;
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    function delegate(address to) public {
        require(voters[msg.sender].hasVoted == false, "You have already voted");
        require(to != msg.sender, "Cannot delegate to yourself");
        require(voters[to].hasVoted == false, "Delegatee has already voted");
        
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].delegate = to;
        
        if (voters[to].hasVoted == true) {
            voters[to].weight += voters[msg.sender].weight;
        }
    }
    
    function vote(uint option) public {
        require(voters[msg.sender].hasVoted == false, "You have already voted");
        require(option >= 0 && option < 5, "Invalid option");
        
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].vote = option;
        
        totalVotes += voters[msg.sender].weight;
    }
    
    function endVoting() public onlyAdmin {
        // Calculate winning option based on votes
    }
}
<\Contract\>