<\contract\> 
contract Crowdsale {
     address public owner;
     IERC20 public token;
     uint public tokenPrice;
     uint public totalTokensSold;
     mapping(address => uint) public balances;

     constructor(address _tokenAddress, uint _price) {
         owner = msg.sender;
         token = IERC20(_tokenAddress);
         tokenPrice = _price;
     }

     function buyTokens(uint _amount) public {
         require(_amount * tokenPrice <= balances[msg.sender], "Insufficient balance");
         uint cost = _amount * tokenPrice;
         balances[msg.sender] -= cost;
         balances[owner] += cost;
         token.transferFrom(owner, msg.sender, _amount);
         totalTokensSold += _amount;
     }

     function depositTokens() public payable {
         balances[msg.sender] += msg.value / tokenPrice;
     }

     function withdrawTokens(uint _amount) public {
         require(_amount <= balances[msg.sender], "Insufficient balance");
         uint value = _amount * tokenPrice;
         balances[msg.sender] -= _amount;
         balances[owner] += _amount;
         msg.sender.transfer(value);
     }
}
<\contract\> 

The potential vulnerabilities in the contract are:
1) Privilege escalation
2) Inconsistent state update