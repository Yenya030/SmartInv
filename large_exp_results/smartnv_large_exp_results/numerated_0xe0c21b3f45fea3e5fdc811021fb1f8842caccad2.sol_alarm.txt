<\contract\> 
contract PaymentSplitter {
    address[] public payees;
    uint256[] public shares;
    address public owner;

    constructor(address[] memory _payees, uint256[] memory _shares) {
        require(_payees.length == _shares.length, "Payees and shares length mismatch");
        owner = msg.sender;
        payees = _payees;
        shares = _shares;
    }

    function release() public {
        require(msg.sender == owner, "Only owner can release funds");
        for (uint i = 0; i < payees.length; i++) {
            payable(payees[i]).transfer(shares[i]);
        }
    }

    function updatePayees(address[] memory newPayees, uint256[] memory newShares) public {
        require(msg.sender == owner, "Only owner can update payees");
        require(newPayees.length == newShares.length, "New payees and shares length mismatch");
        
        payees = newPayees;
        shares = newShares;
    }
}
<\contract\>