<\contract_to_analyze\> 
contract VotingSystem {
     struct Proposal {
          uint256 startTime; 
          uint256 votedAmount; 
          address proposer; 
     }
     
     address public owner;
     IERC20 public votingToken;
     mapping(address => uint256) public startingBalanceList;
     Proposal public currentProposal;
     
     function createProposal() external {
          require(currentProposal.startTime == 0,"there is an ongoing proposal");
          currentProposal = Proposal(block.timestamp, 0, msg.sender);
          startingBalanceList[msg.sender] = getStartingBalance(msg.sender); 
     }
     
     function vote(uint256 amount) external {
          require(currentProposal.startTime + 24 > block.timestamp, "voting has ended");
          require(currentProposal.votedAmount == 0, "voting has been done"); 
          votingToken.transferFrom(msg.sender, address(this), amount);
          currentProposal.votedAmount += amount; 
     }
     
     function endVoting() external {
          require(currentProposal.startTime != 0, "no ongoing proposal");
          require(currentProposal.startTime + 24 < block.timestamp, "voting has not ended");
          require(votingToken.balanceOf(address(this)) * 2 > votingToken.totalSupply(), "voting failed");
     }
}
<\contract_to_analyze\>