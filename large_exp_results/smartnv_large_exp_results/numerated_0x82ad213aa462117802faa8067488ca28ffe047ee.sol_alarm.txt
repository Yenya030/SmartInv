contract Exchange {
         address public tokenA;
         address public tokenB;
     
         mapping(address => uint) public balances;

         function trade(address _tokenA, address _tokenB, uint _amount) public {
             require(balances[msg.sender] >= _amount, "Insufficient balance");
             balances[msg.sender] -= _amount;
             // code for trading tokens
         }

         function deposit(address _token, uint _amount) public {
             // deposit tokens into the exchange
             balances[msg.sender] += _amount;
             // code for depositing tokens
         }

         function withdraw(address _token, uint _amount) public {
             require(balances[msg.sender] >= _amount, "Insufficient balance");
             balances[msg.sender] -= _amount;
             // code for withdrawing tokens
         }
     } 

Output:
- atomicity violation
- inconsistent state update