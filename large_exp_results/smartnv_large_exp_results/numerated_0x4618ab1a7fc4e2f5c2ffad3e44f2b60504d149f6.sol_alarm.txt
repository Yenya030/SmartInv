<\contract\>
contract VotingSystem {
     struct Voter {
         uint256 weight; 
         bool voted; 
         address delegate; 
         uint256 vote;
         }
     address public chairperson;
     mapping(address => Voter) public voters;

     function delegate(address to) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You have already voted.");
         require(to != msg.sender, "Self-delegation is not allowed.");
         sender.voted = true;
         sender.delegate = to;
         Voter storage delegate = voters[to];
         if (delegate.voted) {
             voters[delegate.vote].weight += sender.weight;
         } else {
             delegate.weight += sender.weight;
         }
     }

     function vote(uint256 proposal) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You have already voted.");
         sender.voted = true;
         sender.vote = proposal;
     }

     function winningProposal() public view returns (uint256 winningProposal_) {
         uint256 winningCount = 0;
         for (uint256 p = 0; p < proposals.length; p++) {
             if (proposals[p].voteCount > winningCount) {
                 winningCount = proposals[p].voteCount;
                 winningProposal_ = p;
             }
         }
     }
}
<\contract\>