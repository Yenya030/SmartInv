Contract to analyze:
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    mapping(address => uint) public purchasedTokens;

    constructor(address _tokenAddress, uint _price) {
        owner = msg.sender;
        token = IERC20(_tokenAddress);
        tokenPrice = _price;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount * tokenPrice, "Insufficient balance");
        token.transferFrom(msg.sender, address(this), _amount * tokenPrice);
        purchasedTokens[msg.sender] += _amount;
    }

    function withdrawTokens(address _recipient, uint _amount) public {
        require(msg.sender == owner, "Unauthorized"); 
        token.transfer(_recipient, _amount);
    }
}
Potential vulnerabilities in the TokenSale contract:
1) None