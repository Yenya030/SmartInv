<\contract_to_analyze\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public price;
    
    constructor(IERC20 _token, uint _price) {
        owner = msg.sender;
        token = _token;
        price = _price;
    }
    
    function buyTokens(uint _amount) external {
        require(token.balanceOf(msg.sender) >= _amount * price, "Insufficient balance");
        token.transferFrom(owner, msg.sender, _amount * price);
    }
}
<\contract_to_analyze\> 

Potential vulnerabilities:
1) price manipulation - The price of tokens is set by the owner at the time of contract deployment, making it susceptible to price manipulation.
2) insufficient gas - The buyTokens function may require more gas than available, potentially causing the transaction to fail.
3) incorrect visibility/ownership - The owner variable is public, which may expose sensitive information about the contract owner.