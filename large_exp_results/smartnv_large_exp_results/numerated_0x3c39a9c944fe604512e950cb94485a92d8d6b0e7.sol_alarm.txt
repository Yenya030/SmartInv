<\contract\> 
contract PaymentProcessor {
         address public admin;
         mapping(address => uint) public balances;
         event PaymentMade(address from, address to, uint amount);

         constructor() {
             admin = msg.sender;
         }

         function makePayment(address _to, uint _amount) public {
             require(balances[msg.sender] >= _amount, "Insufficient balance");
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             emit PaymentMade(msg.sender, _to, _amount);
         }

         function updateAdmin(address _newAdmin) public {
             require(msg.sender == admin, "Only admin can update admin");
             admin = _newAdmin;
         }
}
<\contract\>