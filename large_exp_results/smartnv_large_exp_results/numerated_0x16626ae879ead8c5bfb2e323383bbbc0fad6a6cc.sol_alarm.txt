<\Contract\>
contract PaymentProcessor {
     address public owner;
     mapping(address => uint) public balances;
     
     constructor() {
          owner = msg.sender;
     }
     
     function deposit() public payable {
          balances[msg.sender] += msg.value;
     }
     
     function withdraw(uint amount) public {
          require(balances[msg.sender] >= amount, "Insufficient balance");
          (bool success, ) = msg.sender.call{value: amount}("");
          require(success, "Transfer failed");
          balances[msg.sender] -= amount;
     }
}
<\Contract\>

The potential vulnerabilities in the contract are:
1) insufficient gas
2) incorrect visibility/ownership.