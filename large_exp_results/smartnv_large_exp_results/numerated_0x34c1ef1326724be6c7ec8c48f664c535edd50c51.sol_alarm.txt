<\contract_to_analyze\> 
contract Marketplace {
     IERC20 public token;
     mapping(address => uint) public balances;
     mapping(address => bool) public isAdmin;

     constructor(address _token) {
          token = IERC20(_token);
          isAdmin[msg.sender] = true;
     }

     function deposit(uint amount) public {
          token.transferFrom(msg.sender, address(this), amount);
          balances[msg.sender] += amount;
     }

     function withdraw(uint amount) public {
          require(balances[msg.sender] >= amount, "Insufficient balance");
          balances[msg.sender] -= amount;
          token.transfer(msg.sender, amount);
     }

     function addAdmin(address newAdmin) public {
          require(isAdmin[msg.sender], "Only admins can add new admins");
          isAdmin[newAdmin] = true;
     }

     function removeAdmin(address admin) public {
          require(isAdmin[msg.sender], "Only admins can remove other admins");
          isAdmin[admin] = false;
     }
}
<\contract_to_analyze\>