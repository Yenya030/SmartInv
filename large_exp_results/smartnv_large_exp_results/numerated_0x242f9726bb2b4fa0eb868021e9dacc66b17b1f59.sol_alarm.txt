<\contract\>
contract VotingSystem {
     struct Voter {
         uint weight;
         bool voted;
         address delegate;
         uint vote;
     }
     struct Proposal {
         uint voteCount;
     }

     address public chairperson;
     mapping(address => Voter) public voters;
     Proposal[] public proposals;

     function giveRightToVote(address to) public {
         require(msg.sender == chairperson, "Only chairperson can give right to vote.");
         require(!voters[to].voted, "The voter already voted.");
         require(voters[to].weight == 0, "The voter already has voting rights.");

         voters[to].weight = 1;
     }

     function delegate(address to) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You already voted.");

         while (voters[to].delegate != address(0)) {
             to = voters[to].delegate;
             require(to != msg.sender, "Found loop in delegation.");
         }

         sender.voted = true;
         sender.delegate = to;
         Voter storage delegateTo = voters[to];
         if (delegateTo.voted) {
             proposals[delegateTo.vote].voteCount += sender.weight;
         } else {
             delegateTo.weight += sender.weight;
         }
     }

     function vote(uint proposal) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You already voted.");
         sender.voted = true;
         sender.vote = proposal;
         proposals[proposal].voteCount += sender.weight;
     }
}
<\contract\>