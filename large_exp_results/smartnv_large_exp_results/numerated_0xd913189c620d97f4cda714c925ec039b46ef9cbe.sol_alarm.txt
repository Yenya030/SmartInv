The contract provided for analysis:

contract StakingRewards {
    IERC20 public stakingToken;
    IERC20 public rewardsToken;
    uint public totalStaked;
    mapping(address => uint) public stakedBalance;

    function stake(uint amount) external {
        stakingToken.transferFrom(msg.sender, address(this), amount);
        stakedBalance[msg.sender] += amount;
        totalStaked += amount;
    }

    function unstake(uint amount) external {
        require(stakedBalance[msg.sender] >= amount, "Insufficient balance");
        stakedBalance[msg.sender] -= amount;
        totalStaked -= amount;
        stakingToken.transfer(msg.sender, amount);
    }

    function distributeRewards(uint amount) external {
        rewardsToken.transferFrom(msg.sender, address(this), amount);
        // Distribution logic based on totalStaked, pending implementation
    }
}

Output:
1) business logic flaw
2) inconsistent state update
3) atomicity violation