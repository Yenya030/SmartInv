<\Contract_to_analyze\>
contract Marketplace {
      address public owner;
      uint public totalItems;
      mapping(uint => Item) public items;

      struct Item {
            uint itemId;
            string name;
            uint price;
            address seller;
            bool isSold;
      }

      constructor() {
            owner = msg.sender;
            totalItems = 0;
      }

      function addItem(string memory _name, uint _price) public {
            totalItems++;
            items[totalItems] = Item(totalItems, _name, _price, msg.sender, false);
      }

      function buyItem(uint _itemId) public payable {
            require(items[_itemId].itemId != 0, "Item does not exist");
            require(items[_itemId].isSold == false, "Item already sold");
            require(msg.value == items[_itemId].price, "Incorrect payment amount");

            address payable seller = payable(items[_itemId].seller);
            seller.transfer(msg.value);

            items[_itemId].isSold = true;
      }

      modifier onlyOwner() {
            require(msg.sender == owner, "Only owner can call this function");
            _;
      }
}