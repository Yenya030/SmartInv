contract PaymentProcessor {
    address public owner;
    uint public totalPayments;
    
    mapping(address => uint) public balances;
    
    constructor() {
        owner = msg.sender;
        totalPayments = 0;
    }
    
    function makePayment(address _recipient, uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        balances[msg.sender] -= _amount;
        balances[_recipient] += _amount;
        totalPayments += _amount;
    }
    
    function withdraw(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
    }
}