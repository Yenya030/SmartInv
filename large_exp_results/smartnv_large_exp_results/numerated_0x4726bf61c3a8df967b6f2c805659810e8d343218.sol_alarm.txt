<\contract\>
contract TokenSale {
     address public owner;
     IERC20 public token;
     uint public tokenPrice;
     mapping(address => uint) public purchasedTokens;

     constructor(address _token, uint _price) public {
         owner = msg.sender;
         token = IERC20(_token);
         tokenPrice = _price;
     }

     function buyTokens(uint _amount) public {
         require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance");
         require(token.allowance(msg.sender, address(this)) >= _amount, "Allowance not set");
         uint cost = _amount * tokenPrice;
         token.transferFrom(msg.sender, owner, cost);
         purchasedTokens[msg.sender] += _amount;
     }

     function withdrawTokens() public {
         require(msg.sender == owner, "Only owner can withdraw tokens");
         token.transfer(owner, token.balanceOf(address(this)));
     }
}
<\contract\>