<\contract_3\>
contract Crowdsale {
     address public beneficiary;
     uint public fundingGoal;
     uint public amountRaised;
     uint public deadline;
     uint public price;
     ERC20 public tokenReward;
     mapping(address => uint256) public balanceOf;
     bool public fundingGoalReached = false;
     bool public crowdsaleClosed = false;

     event FundTransfer(address backer, uint amount, bool isContribution);

     function Crowdsale(
         address ifSuccessfulSendTo,
         uint fundingGoalInEthers,
         uint durationInMinutes,
         uint etherCostOfEachToken,
         ERC20 addressOfTokenUsedAsReward
     ) {
         beneficiary = ifSuccessfulSendTo;
         fundingGoal = fundingGoalInEthers * 1 ether;
         deadline = now + durationInMinutes * 1 minutes;
         price = etherCostOfEachToken * 1 ether;
         tokenReward = ERC20(addressOfTokenUsedAsReward);
     }

     function () payable {
         require(!crowdsaleClosed);
         uint amount = msg.value;
         balanceOf[msg.sender] = amount;
         amountRaised += amount;
         tokenReward.transfer(msg.sender, amount / price);
         FundTransfer(msg.sender, amount, true);
     }

     modifier afterDeadline() { if (now >= deadline) _; }
     function checkGoalReached() afterDeadline {
         if (amountRaised >= fundingGoal){
             fundingGoalReached = true;
         }
         crowdsaleClosed = true;
     }

     function safeWithdrawal() afterDeadline {
         if (fundingGoalReached) {
             if (beneficiary.send(amountRaised)) {
                 FundTransfer(beneficiary, amountRaised, false);
             } else {
                 // handle failed send
             }
         }
     }
} 

Output:
1) incorrect visibility/ownership