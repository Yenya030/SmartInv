<\analyzed_contract\>
contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _tokenPrice) {
        token = _token;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint amount) public {
        uint totalCost = amount * tokenPrice;
        require(token.balanceOf(owner) >= amount, "Not enough tokens available");
        token.transferFrom(owner, msg.sender, amount);
        balances[msg.sender] += amount;
    }

    function withdrawTokens(address to, uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw tokens");
        require(balances[to] >= amount, "Not enough tokens in balance");
        balances[to] -= amount;
        token.transfer(to, amount);
    }

}
<\analyzed_contract\>