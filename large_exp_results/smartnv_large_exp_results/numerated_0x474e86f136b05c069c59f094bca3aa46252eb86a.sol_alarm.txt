<\analyzed_contract\>
contract Escrow {
    address public buyer;
    address payable public seller;
    address public arbiter;

    enum State { AWAITING_PAYMENT, AWAITING_DELIVERY, AWAITING_CONFIRMATION, COMPLETE, REFUNDED }
    State public currentState;

    constructor(address _buyer, address payable _seller, address _arbiter) public {
        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
        currentState = State.AWAITING_PAYMENT;
    }

    function makePayment() public payable {
        require(msg.sender == buyer, "Only buyer can make payment");
        require(currentState == State.AWAITING_PAYMENT, "Payment already made");
        currentState = State.AWAITING_DELIVERY;
    }

    function confirmDelivery() public {
        require(msg.sender == buyer || msg.sender == seller, "Only buyer or seller can confirm delivery");
        require(currentState == State.AWAITING_DELIVERY, "Not awaiting delivery");
        currentState = State.AWAITING_CONFIRMATION;
    }

    function confirmReceipt() public {
        require(msg.sender == buyer || msg.sender == seller || msg.sender == arbiter, "Only buyer, seller, or arbiter can confirm receipt");
        require(currentState == State.AWAITING_CONFIRMATION, "Not awaiting confirmation");
        seller.transfer(address(this).balance);
        currentState = State.COMPLETE;
    }

    function refundPayment() public {
        require(msg.sender == seller || msg.sender == arbiter, "Only seller or arbiter can refund payment");
        require(currentState == State.AWAITING_PAYMENT || currentState == State.AWAITING_DELIVERY, "Cannot refund at this state");
        buyer.transfer(address(this).balance);
        currentState = State.REFUNDED;
    }
}
<\analyzed_contract\>