contract VotingSystem {
     struct Voter {
         uint256 weight;
         bool voted;
         address delegate;
         uint256 vote;
     }
     
     mapping(address => Voter) public voters;
     address public chairperson;
     uint256 public winningProposal;
     uint256 public winningProposalVotes;

     function delegate(address to) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You have already voted.");
         require(to != msg.sender, "Self-delegation is disallowed.");

         while (voters[to].delegate != address(0)) {
             to = voters[to].delegate;
             require(to != msg.sender, "Found loop in delegation.");
         }

         sender.voted = true;
         sender.delegate = to;
         Voter storage delegateTo = voters[to];
         if (delegateTo.voted) {
             voters[delegateTo.vote].weight += sender.weight;
         } else {
             delegateTo.weight += sender.weight;
         }
     }

     function vote(uint256 proposal) public {
         Voter storage sender = voters[msg.sender];
         require(sender.weight != 0, "Has no right to vote.");
         require(!sender.voted, "Already voted.");
         sender.voted = true;
         sender.vote = proposal;
         voters[proposal].weight += sender.weight;
     }

     function winningProposal() public view returns (uint256 _winningProposal) {
         uint256 winningVoteCount = 0;
         for (uint256 p = 0; p < proposals.length; p++) {
             if (proposals[p].voteCount > winningVoteCount) {
                 winningVoteCount = proposals[p].voteCount;
                 _winningProposal = p;
             }
         }
     }
}