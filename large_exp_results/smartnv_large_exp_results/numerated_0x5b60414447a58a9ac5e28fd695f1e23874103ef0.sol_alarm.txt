<\contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyToken(uint amount) public {
        uint cost = amount * tokenPrice;
        require(token.balanceOf(address(this)) >= amount, "Not enough tokens in contract");
        require(msg.value >= cost, "Insufficient payment provided");
        
        token.transfer(msg.sender, amount);
        balances[msg.sender] += cost;
    }

    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        uint balance = address(this).balance;
        owner.transfer(balance);
    }

    function setTokenPrice(uint _tokenPrice) public {
        require(msg.sender == owner, "Only owner can set token price");
        tokenPrice = _tokenPrice;
    }
}
<\contract\>