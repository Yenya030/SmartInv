<b><\contract_to_analyze\></b>
contract TokenSale {
     IERC20 public token;
     address public owner;
     uint public tokenPrice;
     uint public totalTokens;
     uint public tokensSold;

     mapping(address => uint) public balances;

     constructor(IERC20 _token, uint _tokenPrice, uint _totalTokens) public {
         token = _token;
         owner = msg.sender;
         tokenPrice = _tokenPrice;
         totalTokens = _totalTokens;
         tokensSold = 0;
     }

     function buyTokens(uint _amount) public {
         require(_amount > 0, "Amount must be greater than 0");
         require(token.balanceOf(msg.sender) >= _amount * tokenPrice, "Insufficient balance");
         
         uint cost = _amount * tokenPrice;
         token.transferFrom(msg.sender, address(this), cost);
         token.transfer(msg.sender, _amount);
         tokensSold += _amount;
         balances[msg.sender] += _amount;
     }

     function endSale() public {
         require(msg.sender == owner, "Only the owner can end the sale");
         require(totalTokens == tokensSold, "Not all tokens have been sold");

         token.transfer(owner, token.balanceOf(address(this)));
     }
}
<b><\contract_to_analyze\></b>