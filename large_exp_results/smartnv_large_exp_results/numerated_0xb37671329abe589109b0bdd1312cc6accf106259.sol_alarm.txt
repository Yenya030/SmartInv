<\contract\> 
contract TokenSale {
    address public admin;
    IERC20 public token;
    mapping(address => uint) public balances;

    constructor(IERC20 _token) {
        admin = msg.sender;
        token = _token;
    }

    function buyTokens(uint amount) public {
        require(token.balanceOf(address(this)) >= amount, "Not enough tokens in contract");
        token.transfer(msg.sender, amount);
        balances[msg.sender] += amount;
    }

    function withdrawTokens(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        token.transfer(msg.sender, amount);
    }

    function changeAdmin(address _newAdmin) public {
        require(msg.sender == admin, "Only admin can change admin");
        admin = _newAdmin;
    }

    function changeTokenAddress(IERC20 _newToken) public {
        require(msg.sender == admin, "Only admin can change token address");
        token = _newToken;
    }
}
<\contract\>