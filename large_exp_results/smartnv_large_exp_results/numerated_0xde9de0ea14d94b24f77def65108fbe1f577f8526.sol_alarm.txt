<\contract_to_analyze\>
contract MultiSigWallet {
     address[] public owners;
     mapping(address => bool) public isOwner;
     uint public transactionCount;
     mapping(uint => Transaction) public transactions;
     struct Transaction {
          address destination;
          uint value;
          bytes data;
          bool executed;
     }
      
     modifier validOwner(address owner) {
          require(isOwner[owner], "Invalid owner");
          _;
     }
     
     function submitTransaction(address destination, uint value, bytes memory data) public validOwner(msg.sender) {
          uint transactionId = transactionCount;
          transactions[transactionId] = Transaction({
               destination: destination,
               value: value,
               data: data,
               executed: false
          });
          transactionCount++;
     }

     function executeTransaction(uint transactionId) public {
          Transaction storage txn = transactions[transactionId];
          require(txn.executed == false, "Transaction already executed");
          (bool success, ) = txn.destination.call{value: txn.value}(txn.data);
          require(success, "Transaction execution failed");
          txn.executed = true;
     }
}