contract PaymentProcessor {
     address public admin;
     mapping(address => uint256) public balances;

     constructor() {
         admin = msg.sender;
     }

     function deposit() public payable {
         balances[msg.sender] += msg.value;
     }

     function withdraw(uint256 amount) public {
         require(balances[msg.sender] >= amount, "Insufficient balance");
         balances[msg.sender] -= amount;
         payable(msg.sender).transfer(amount);
     }

     function changeAdmin(address newAdmin) public {
         require(msg.sender == admin, "Only admin can change admin");
         admin = newAdmin;
     }
} 

Potential vulnerabilities:
1) privilege escalation
2) inconsistent state update
3) incorrect visibility/ownership