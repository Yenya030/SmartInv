The contract to analyze:

contract PaymentContract {
    address public owner;
    uint public balance;
    
    constructor() {
        owner = msg.sender;
        balance = 0;
    }
    
    function deposit(uint amount) public {
        balance += amount;
    }
    
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only owner can withdraw");
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
    }
    
    function transferOwnership(address newOwner) public {
        require(msg.sender == owner, "Only owner can transfer ownership");
        owner = newOwner;
    }
}

Output:
- Inconsistent state update: The balance is updated directly without considering reentrancy issues.
- Incorrect visibility/ownership: The owner variable is public, which could lead to unauthorized access and potential vulnerabilities.