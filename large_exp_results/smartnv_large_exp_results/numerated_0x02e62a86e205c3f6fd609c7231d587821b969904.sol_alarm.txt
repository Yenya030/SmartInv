<\contract_to_analyze\>
contract VotingSystem {
    struct Voter {
        uint256 weight;
        bool voted;
        address delegate;
        uint256 vote;
    }
    
    mapping(address => Voter) public voters;
    address public admin;
    address public winner;
    
    constructor() {
        admin = msg.sender;
    }
    
    function delegate(address to) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "You have already voted.");
        require(to != msg.sender, "Self-delegation is not allowed.");
        while (voters[to].delegate != address(0)) {
            to = voters[to].delegate;
            require(to != msg.sender, "Loop in delegation detected.");
        }
        sender.voted = true;
        sender.delegate = to;
        Voter storage delegate = voters[to];
        if (delegate.voted) {
            winner = voters[delegate.vote].delegate;
        }
    }
    
    function vote(uint256 option) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "You have already voted.");
        sender.voted = true;
        sender.vote = option;
        sender.weight = 1;
    }
    
    function winningOption() public view returns (uint256) {
        require(msg.sender == admin, "Only admin can view the winning option.");
        return voters[winner].vote;
    }
}
<\contract_to_analyze\>