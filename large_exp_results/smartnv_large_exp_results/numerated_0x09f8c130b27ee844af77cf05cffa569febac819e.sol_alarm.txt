The contract provided for analysis:

contract StakingPool {
         IERC20 public stakingToken;
         uint public totalStaked;
         mapping(address => uint) public stakedBalance;
         mapping(address => uint) public lastStakedTime;

         function stake(uint amount) public {
             require(amount > 0, "amount must be greater than 0");
             stakingToken.transferFrom(msg.sender, address(this), amount);
             totalStaked += amount;
             stakedBalance[msg.sender] += amount;
             lastStakedTime[msg.sender] = block.timestamp;
         }

         function unstake(uint amount) public {
             require(amount > 0, "amount must be greater than 0");
             require(stakedBalance[msg.sender] >= amount, "insufficient balance");
             stakingToken.transfer(msg.sender, amount);
             totalStaked -= amount;
             stakedBalance[msg.sender] -= amount;
             lastStakedTime[msg.sender] = block.timestamp;
         }
}

Output: 
- atomicity violation (lack of atomicity in operations related to updating staked balances and total staked amount)
- inconsistent state update (potential inconsistency in updating staked balances and total staked amount)