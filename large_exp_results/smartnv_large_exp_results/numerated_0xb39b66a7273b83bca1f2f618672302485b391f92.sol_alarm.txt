contract Escrow {
    address public buyer;
    address public seller;
    address public arbiter;
    uint public value;
    enum State { Created, Locked, Inactive }
    State public state;

    modifier onlyBuyer() {
        require(msg.sender == buyer, "Only buyer can call this function");
        _;
    }

    modifier inState(State expectedState) {
        require(state == expectedState, "Invalid state for this operation");
        _;
    }

    constructor(address _seller, address _arbiter) public payable {
        buyer = msg.sender;
        seller = _seller;
        arbiter = _arbiter;
        value = msg.value;
    }

    function confirmPurchase() public onlyBuyer inState(State.Created) {
        state = State.Locked;
    }

    function confirmReceived() public onlyBuyer inState(State.Locked) {
        seller.transfer(value);
        state = State.Inactive;
    }

    function refundBuyer() public onlyBuyer inState(State.Locked) {
        buyer.transfer(value);
        state = State.Inactive;
    }

}