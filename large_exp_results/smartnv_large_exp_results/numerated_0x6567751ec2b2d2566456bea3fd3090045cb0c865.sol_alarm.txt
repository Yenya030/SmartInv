<\contract\>
contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    mapping(address => uint) public tokenBalance;

    constructor(address _token, uint _tokenPrice, uint _totalTokens) {
        token = IERC20(_token);
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _amount) public {
        uint totalCost = _amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= totalCost, "Insufficient balance");
        require(token.balanceOf(owner) >= _amount, "Not enough tokens available");
        
        token.transferFrom(owner, msg.sender, _amount);
        tokenBalance[msg.sender] += _amount;
    }

    function withdrawTokens() public {
        require(tokenBalance[msg.sender] > 0, "No tokens to withdraw");
        
        token.transfer(msg.sender, tokenBalance[msg.sender]);
        tokenBalance[msg.sender] = 0;
    }
}
<\contract\> 