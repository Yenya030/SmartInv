<\contract_to_analyze\>
contract Marketplace {
    address public owner;
    mapping(uint256 => Product) public products;
    uint256 public productCounter;

    struct Product {
        uint256 id;
        string name;
        uint256 price;
        address owner;
    }

    constructor() {
        owner = msg.sender;
    }

    function addProduct(string memory _name, uint256 _price) public {
        require(msg.sender == owner, "Only owner can add products");
        productCounter++;
        products[productCounter] = Product(productCounter, _name, _price, msg.sender);
    }

    function buyProduct(uint256 _id) public payable {
        require(products[_id].id != 0, "Product does not exist");
        require(msg.value >= products[_id].price, "Insufficient funds");
        address payable productOwner = payable(products[_id].owner);
        productOwner.transfer(msg.value);
        delete products[_id];
    }
}
<\contract_to_analyze\>