contract MyContract {
     uint256 public totalSupply;
     mapping(address => uint256) public balanceOf;

     constructor(uint256 _totalSupply) {
          totalSupply = _totalSupply;
          balanceOf[msg.sender] = _totalSupply;
     }

     function transfer(address recipient, uint256 amount) public {
          require(balanceOf[msg.sender] >= amount, "Insufficient balance");
          balanceOf[msg.sender] -= amount;
          balanceOf[recipient] += amount;
     }

     function buyTokens(uint256 amount) public {
          require(msg.value >= amount, "Insufficient funds");
          balanceOf[msg.sender] += amount;
          totalSupply += amount;
     }

     function sellTokens(uint256 amount) public {
          require(balanceOf[msg.sender] >= amount, "Insufficient balance");
          balanceOf[msg.sender] -= amount;
          totalSupply -= amount;
          payable(msg.sender).transfer(amount);
     }

     function getBalance(address account) external view returns(uint256) {
          return balanceOf[account];
     }
} 

The potential vulnerabilities in the contract are:
1) price manipulation
2) integer overflow/underflow