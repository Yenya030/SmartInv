<\contract_to_analyze\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;
    mapping(address => uint) public tokenBalances;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) external {
        uint totalCost = _amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= totalCost, "Insufficient token balance");
        require(token.allowance(msg.sender, address(this)) >= totalCost, "Allowance not set");

        token.transferFrom(msg.sender, owner, totalCost);
        tokenBalances[msg.sender] += _amount;
        totalTokensSold += _amount;
    }

    function withdrawTokens() external {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    function endSale() external {
        require(msg.sender == owner, "Only owner can end sale");
        // Calculate total funds raised
        uint totalFunds = totalTokensSold * tokenPrice;
        // Transfer funds to owner
        token.transferFrom(msg.sender, owner, totalFunds);
    }
}
<\contract_to_analyze\>