<\contract\> 
contract TokenSale {
    address public admin;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;

    constructor(IERC20 _token, uint _tokenPrice) {
        admin = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount * tokenPrice, "Not enough balance to buy tokens");
        token.transferFrom(admin, msg.sender, _amount);
        tokensSold += _amount;
    }

    function withdraw() public {
        require(msg.sender == admin, "Only admin can withdraw funds");
        token.transfer(admin, token.balanceOf(address(this)));
    }

    function endSale() public {
        require(msg.sender == admin, "Only admin can end sale");
        token.transfer(admin, token.balanceOf(address(this)));
    }
}
<\contract\> 

The potential vulnerabilities in the contract are:
1) incorrect visibility/ownership: The functions "withdraw" and "endSale" both lack access control modifiers like "onlyAdmin" to ensure only the admin can call these functions. 
2) integer overflow/underflow: There is no check for potential integer overflow in the function "buyTokens" when calculating the total cost of the tokens being purchased.