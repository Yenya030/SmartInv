<\contract\>
contract VotingSystem {
     struct Voter {
          uint weight;
          bool voted;
          address delegate;
          uint vote;
          }
     struct Proposal {
          uint voteCount;
          string name;
          address proposer;
          }

     mapping(address => Voter) public voters;
     Proposal[] public proposals;
     address public chairperson;

     constructor() {
          chairperson = msg.sender;
          voters[chairperson].weight = 1;
          }

     function delegate(address to) public {
          Voter storage sender = voters[msg.sender];
          require(!sender.voted, "You have already voted");

          while (voters[to].delegate != address(0)) {
               to = voters[to].delegate;
               require(to != msg.sender, "Found loop in delegation");
               }
          sender.voted = true;
          sender.delegate = to;
          Voter storage delegate_ = voters[to];
          if (delegate_.voted) {
               proposals[delegate_.vote].voteCount += sender.weight;
               } else {
               delegate_.weight += sender.weight;
               }
          }

     function vote(uint proposal) public {
          Voter storage sender = voters[msg.sender];
          require(sender.weight != 0, "Has no right to vote");
          require(!sender.voted, "Already voted.");
          sender.voted = true;
          sender.vote = proposal;
          proposals[proposal].voteCount += sender.weight;
          }
 }
<\contract\>