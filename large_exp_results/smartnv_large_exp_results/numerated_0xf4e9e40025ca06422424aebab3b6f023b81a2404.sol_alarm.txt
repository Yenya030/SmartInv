<\contract_to_analyze\> 
contract Crowdsale {
     IERC20 public token;
     address public owner;
     uint public startTime;
     uint public endTime;
     uint public tokenPrice;
     uint public tokensSold;
     mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _startTime, uint _endTime, uint _tokenPrice) {
          token = _token;
          owner = msg.sender;
          startTime = _startTime;
          endTime = _endTime;
          tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) external {
          require(block.timestamp >= startTime && block.timestamp <= endTime, "Crowdsale is not active");
          uint cost = _amount * tokenPrice;
          require(token.balanceOf(msg.sender) >= cost, "Not enough balance to buy tokens");
          token.transferFrom(msg.sender, owner, cost);
          tokensSold += _amount;
          balances[msg.sender] += _amount;
    }

    function withdrawTokens() external {
          require(msg.sender == owner, "Only owner can withdraw tokens");
          token.transfer(owner, token.balanceOf(address(this)));
    }
}
<\contract_to_analyze\>