<\your_contract\>
contract VotingSystem {
    struct Proposal {
        uint256 startTime;
        uint256 endTime;
        uint256 votes;
        address proposer;
    }
    
    mapping(uint256 => Proposal) public proposals;
    uint256 public totalProposals;
    address public admin;
    
    constructor() public {
        admin = msg.sender;
    }
    
    function createProposal(uint256 _startTime, uint256 _endTime) public {
        require(msg.sender != address(0), "Invalid proposer address");
        require(_startTime < _endTime, "Invalid proposal timing");
        
        totalProposals++;
        proposals[totalProposals] = Proposal(_startTime, _endTime, 0, msg.sender);
    }
    
    function vote(uint256 proposalId) public {
        require(proposals[proposalId].startTime < block.timestamp && proposals[proposalId].endTime > block.timestamp, "Voting out of bounds");
        
        proposals[proposalId].votes++;
    }
    
    function endVoting(uint256 proposalId) public {
        require(msg.sender == admin, "Only admin can end voting");
        require(proposals[proposalId].endTime < block.timestamp, "Voting is still ongoing");
        
        if(proposals[proposalId].votes > totalProposals / 2) {
            // Execute proposal
        }
    }
}
<\your_contract\>