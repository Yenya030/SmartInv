<\contract_to_analyze\>
contract VestingContract {
     address internal owner;
     uint public totalTokens;
     mapping(address => uint) public vestedAmount;
     mapping(address => uint) public startTime;
     mapping(address => uint) public cliffPeriod;
     mapping(address => uint) public vestingPeriod;
     
     function grantVesting(address _beneficiary, uint _tokens, uint _startTime, uint _cliffPeriod, uint _vestingPeriod) external {

        require(msg.sender == owner, "only owner can grant vesting");
        require(_tokens > 0, "invalid amount of tokens");
        
        totalTokens += _tokens;
        vestedAmount[_beneficiary] += _tokens;
        startTime[_beneficiary] = _startTime;
        cliffPeriod[_beneficiary] = _cliffPeriod;
        vestingPeriod[_beneficiary] = _vestingPeriod;
    }

    function releaseVestedAmount(address _beneficiary) external {
        require(block.timestamp >= startTime[_beneficiary] + cliffPeriod[_beneficiary], "cliff period has not passed");

        uint unlockedTokens = vestedAmount[_beneficiary] * (block.timestamp - startTime[_beneficiary]) / vestingPeriod[_beneficiary];
        vestedAmount[_beneficiary] -= unlockedTokens;
        totalTokens -= unlockedTokens;

        // transfer unlockedTokens to beneficiary 
        // implementation not shown for brevity
    }
}
<\contract_to_analyze\>