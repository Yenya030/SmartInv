contract TokenSale {
    address public owner;
    address public tokenAddress;
    uint public tokenPrice;
    mapping(address => uint) public tokenBalances;

    constructor(address _tokenAddress, uint _tokenPrice) public {
        owner = msg.sender;
        tokenAddress = _tokenAddress;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public payable {
        require(msg.value == _amount * tokenPrice, "Incorrect token amount");
        require(tokenBalances[msg.sender] + _amount >= tokenBalances[msg.sender], "Integer overflow");
        
        tokenBalances[msg.sender] += _amount;
        tokenBalances[owner] -= _amount;
        
        require(IERC20(tokenAddress).transfer(msg.sender, _amount), "Token transfer failed");
    }

    function withdrawTokens(uint _amount) public {
        require(tokenBalances[msg.sender] >= _amount, "Insufficient balance");
        tokenBalances[msg.sender] -= _amount;
        tokenBalances[owner] += _amount;
        
        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount), "Token transfer failed");
    }
}