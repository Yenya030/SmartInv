<\analyzed_contract\>
contract Marketplace {
     struct Product {
         uint productId;
         string name;
         uint price;
         address owner;
     }
     mapping(uint => Product) public products;
     uint public productCount;
     address public admin;
     
     constructor() public {
         admin = msg.sender;
     }

     function createProduct(string memory _name, uint _price) public {
         require(msg.sender != address(0), "Invalid sender address");
         productCount++;
         products[productCount] = Product(productCount, _name, _price, msg.sender);
     }

     function buyProduct(uint _productId) public payable {
         Product memory product = products[_productId];
         require(product.productId != 0, "Product does not exist");
         require(msg.value >= product.price, "Insufficient funds to buy product");
         address payable productOwner = address(uint160(product.owner));
         productOwner.transfer(product.price);
         product.owner = msg.sender;
     }
}
<\analyzed_contract\>