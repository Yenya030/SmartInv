The contract provided for analysis:

contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokens;

    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _tokenPrice, uint _totalTokens) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _numTokens) public payable {
        require(msg.value == _numTokens * tokenPrice, "Insufficient funds sent");
        require(totalTokens >= _numTokens, "Not enough tokens available");
        balances[msg.sender] += _numTokens;
        totalTokens -= _numTokens;
        token.transfer(msg.sender, _numTokens);
    }

    function withdraw() public {
        require(msg.sender == owner, "Only the contract owner can withdraw");
        uint amount = address(this).balance;
        owner.transfer(amount);
    }
}

The potential vulnerabilities in the contract provided:
1) Insufficient gas
2) Incorrect visibility/ownership