<\analyzed_contract\>
contract TokenSale {
     address public tokenAddress;
     address public owner;
     uint public tokenPrice;
     uint public tokenSupply;
     uint public tokensSold;
     mapping(address => uint) public balances;

     constructor(address _tokenAddress, uint _tokenPrice, uint _tokenSupply) {
          tokenAddress = _tokenAddress;
          owner = msg.sender;
          tokenPrice = _tokenPrice;
          tokenSupply = _tokenSupply;
     }

     function buyTokens(uint _amount) public payable {
          require(msg.value >= _amount * tokenPrice, "Insufficient Ether provided");
          require(tokensSold + _amount <= tokenSupply, "Token supply exceeded");
          balances[msg.sender] += _amount;
          tokensSold += _amount;
          payable(owner).transfer(msg.value);
          IERC20(tokenAddress).transfer(msg.sender, _amount);
     }

     function withdrawTokens(address _recipient, uint _amount) public {
          require(msg.sender == owner, "Only owner can withdraw tokens");
          require(_amount <= IERC20(tokenAddress).balanceOf(address(this)), "Insufficient token balance");
          IERC20(tokenAddress).transfer(_recipient, _amount);
     }
}
<\analyzed_contract\>