Contract:

contract TokenSale {
    IERC20 public token; 
    address public owner; 
    uint public price; 
    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _price) {
        token = _token;
        owner = msg.sender;
        price = _price;
    }

    function buyTokens(uint _amount) public {
        uint totalPrice = _amount * price;
        require(token.balanceOf(msg.sender) >= totalPrice, "Insufficient balance");
        token.transferFrom(msg.sender, owner, totalPrice);
        balances[msg.sender] += _amount;
    }

    function withdrawTokens(address _receiver, uint _amount) public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        require(token.balanceOf(address(this)) >= _amount, "Insufficient token balance");
        token.transfer(_receiver, _amount);
    }

    function setPrice(uint _newPrice) public {
        require(msg.sender == owner, "Only owner can set price");
        price = _newPrice;
    }
}

Potential vulnerabilities:
- Incorrect visibility/ownership: The 'owner' variable is public, allowing anyone to view the contract owner's address. This could potentially lead to unauthorized access.
- Insufficient gas: The functions 'buyTokens' and 'withdrawTokens' may require a significant amount of gas if the token balance or token approval is too large, potentially causing the transaction to fail.
- Atomicity violation: The 'buyTokens' function transfers tokens before updating the user's balance, which could result in a situation where the transfer succeeds but the balance update fails.
- Integer overflow/underflow: Multiplying '_amount' with 'price' in the 'buyTokens' function may result in integer overflow if the values are too large.
- Inconsistent state update: The 'balances' mapping is updated after transferring tokens in the 'buyTokens' function, which could lead to inconsistent state if the transfer fails.
- Privilege escalation: The 'withdrawTokens' function only checks if the caller is the owner and doesn't perform any additional authorization, potentially allowing unauthorized users to withdraw tokens.
- Reentrancy: The 'buyTokens' and 'withdrawTokens' functions involve token transfers which could be susceptible to reentrancy attacks if the called contracts execute malicious code in response to receiving tokens.
- Ether leakage: The contract does not handle any Ether transactions, but if Ether is accidentally sent to this contract, it could get stuck and be irrecoverable.