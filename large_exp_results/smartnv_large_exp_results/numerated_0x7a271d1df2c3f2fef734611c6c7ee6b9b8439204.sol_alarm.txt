Contract: 

contract MyContract {
    address public owner;
    uint public balance = 0;

    function deposit() public payable {
        balance += msg.value;
    }

    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        require(amount <= balance, "Insufficient balance");
        msg.sender.transfer(amount);
        balance -= amount;
    }
}

Potential Vulnerabilities:
1) Incorrect visibility/ownership: The `withdraw` function only checks if `msg.sender` is the owner without verifying if `msg.sender` has the permissions to withdraw the funds. This can lead to unauthorized withdrawals.
2) Inconsistent state update: The balance is only decreased after transferring funds to `msg.sender`. If the transfer fails for any reason, the balance will not be updated accordingly, leading to an inconsistent state.
3) Insufficient gas: If the `withdraw` function is used to transfer funds to a contract that has a fallback function consuming a large amount of gas, the transfer might fail due to insufficient gas provided, leaving the contract in an inconsistent state.