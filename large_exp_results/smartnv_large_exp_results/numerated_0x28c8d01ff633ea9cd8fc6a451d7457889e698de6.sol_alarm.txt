Contract to be analyzed:

contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;

    constructor(address _token, uint _tokenPrice) {
        token = IERC20(_token);
        owner = msg.sender;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint amount) external {
        uint totalCost = amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= amount, "Insufficient balance");
        require(token.allowance(msg.sender, address(this)) >= amount, "Allowance not set");
        
        token.transferFrom(msg.sender, owner, totalCost);
        token.transfer(msg.sender, amount);
    }

    function setTokenPrice(uint newPrice) external {
        require(msg.sender == owner, "Only owner can change the token price");
        tokenPrice = newPrice;
    }
}

Output:
1) price manipulation
2) privilege escalation
3) inconsistent state update
4) atomicity violation
5) ID uniqueness violation
6) incorrect visibility/ownership