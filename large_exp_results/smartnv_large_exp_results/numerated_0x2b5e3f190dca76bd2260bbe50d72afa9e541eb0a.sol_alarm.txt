<\contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;
    mapping(address => uint) public tokenBalances;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _numTokens) public {
        uint cost = _numTokens * tokenPrice;
        
        require(token.balanceOf(msg.sender) >= cost, "Insufficient balance");
        
        tokenBalances[msg.sender] += _numTokens;
        totalTokensSold += _numTokens;
        
        token.transferFrom(msg.sender, address(this), cost);
    }

    function withdrawTokens(uint _numTokens) public {
        require(tokenBalances[msg.sender] >= _numTokens, "Insufficient token balance");
        
        tokenBalances[msg.sender] -= _numTokens;
        totalTokensSold -= _numTokens;
        
        token.transfer(msg.sender, _numTokens * tokenPrice);
    }
}
<\contract\>