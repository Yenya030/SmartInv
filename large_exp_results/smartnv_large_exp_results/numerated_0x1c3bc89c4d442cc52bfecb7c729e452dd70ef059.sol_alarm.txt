<\contract\>
contract Escrow {
    address public buyer;
    address public seller;
    address public arbiter;
    uint public depositAmount;
    mapping(address => uint) public deposits;

    constructor(address _buyer, address _seller, address _arbiter) {
        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
    }

    function deposit() public payable {
        require(msg.sender == buyer || msg.sender == seller, "only buyer or seller can deposit");
        require(msg.value > 0, "deposit amount must be greater than 0");
        deposits[msg.sender] += msg.value;
        depositAmount += msg.value;
    }

    function releaseAmount(uint amount) public {
        require(msg.sender == buyer || msg.sender == seller, "only buyer or seller can release");
        require(amount <= deposits[msg.sender], "not enough funds for release");
        deposits[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        depositAmount -= amount;
    }

    function releaseAmountToArbiter(uint amount) public {
        require(msg.sender == seller, "only seller can release to arbiter");
        require(amount <= deposits[seller], "not enough funds for release");
        deposits[seller] -= amount;
        payable(arbiter).transfer(amount);
        depositAmount -= amount;
    }

    function dispute() public {
        require(msg.sender == arbiter, "only arbiter can resolve dispute");
        uint halfDeposit = depositAmount / 2;
        payable(buyer).transfer(halfDeposit);
        payable(seller).transfer(halfDeposit);
        depositAmount = 0;
    }
}
<\contract\>