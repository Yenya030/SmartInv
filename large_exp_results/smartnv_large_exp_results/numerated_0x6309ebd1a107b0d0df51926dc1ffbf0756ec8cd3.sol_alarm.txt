<\example_3\>
contract TokenSale {
    mapping(address => uint) public balances;
    address public owner;
    IERC20 public token;

    constructor(IERC20 _token) {
        owner = msg.sender;
        token = _token;
    }

    function buyTokens(uint amount) public {
        require(token.balanceOf(address(this)) >= amount, "Not enough tokens available");
        balances[msg.sender] += amount;
        token.transfer(msg.sender, amount);
    }

    function withdrawTokens(uint amount) public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        require(token.balanceOf(address(this)) >= amount, "Not enough tokens available");
        token.transfer(owner, amount);
    }
}
<\example_3\> 

The potential vulnerabilities in the contract TokenSale are:
1) Incorrect visibility/ownership_ACL.
2) Insufficient gas_DoS.
3) Incorrect ownership_prot.
4) Inconsistent state update.