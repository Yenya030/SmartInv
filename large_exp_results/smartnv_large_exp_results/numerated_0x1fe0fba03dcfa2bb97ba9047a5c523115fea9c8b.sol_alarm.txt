<\contract\> 
contract PaymentProcessor {
     mapping(address => uint) public balances;
     address public owner;

     constructor() {
         owner = msg.sender;
     }

     function deposit() public payable {
         balances[msg.sender] += msg.value;
     }

     function withdraw(uint _amount) public {
         require(balances[msg.sender] >= _amount, "Insufficient balance");
         (bool success, ) = msg.sender.call{value: _amount}("");
         require(success, "Transfer failed");
         balances[msg.sender] -= _amount;
     }

     function transfer(address _recipient, uint _amount) public {
         require(balances[msg.sender] >= _amount, "Insufficient balance");
         balances[msg.sender] -= _amount;
         balances[_recipient] += _amount;
     }
}
<\contract\>