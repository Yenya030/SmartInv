Contract to analyze:
contract TokenSwap {
     IERC20 public tokenA;
     IERC20 public tokenB;
     address public owner;

     constructor(address _tokenA, address _tokenB) {
         tokenA = IERC20(_tokenA);
         tokenB = IERC20(_tokenB);
         owner = msg.sender;
     }

     function swap(uint _amount) public {
         require(tokenA.balanceOf(msg.sender) >= _amount, "Insufficient balance of tokenA");
         tokenA.transferFrom(msg.sender, address(this), _amount);
         tokenB.transfer(msg.sender, _amount);
     }

     function updateTokens(address _newTokenA, address _newTokenB) public {
         require(msg.sender == owner, "Only owner can update tokens");
         tokenA = IERC20(_newTokenA);
         tokenB = IERC20(_newTokenB);
     }
}

Output:
- Incorrect visibility/ownership
- Suicidal contract