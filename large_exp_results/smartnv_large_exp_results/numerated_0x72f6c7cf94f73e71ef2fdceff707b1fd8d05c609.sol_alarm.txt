<\contract\> 
contract PaymentSplitter {
    address[] payees;
    uint256[] shares;
    mapping(address => uint) totalReceived;
    mapping(address => uint) totalWithdrawn;

    constructor(address[] memory _payees, uint256[] memory _shares) public payable {
        require(_payees.length > 0, "No payees");
        require(_payees.length == _shares.length, "Length mismatch");

        payees = _payees;
        shares = _shares;
    }

    function release() public {
        for (uint i = 0; i < payees.length; i++) {
            uint256 payment = (address(this).balance * shares[i]) / 100;

            require(payment > 0, "No payment to release");
            require(address(this).balance >= payment, "Insufficient balance");

            totalReceived[payees[i]] += payment;
            totalWithdrawn[payees[i]] += payment;

            (bool success, ) = payees[i].call{value : payment}("");
            require(success, "Payment failed");
        }
    }

    function withdraw() public {
        uint amount = totalReceived[msg.sender] - totalWithdrawn[msg.sender];
        totalWithdrawn[msg.sender] += amount;
        (bool success, ) = msg.sender.call{value : amount}("");
        require(success, "Withdrawal failed");
    }
}
<\contract\> 

1) inconsistency state update
2) arithmetic flaw