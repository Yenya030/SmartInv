<\contract_to_analyze\>
contract TokenSale {
     IERC20 public token;
     address public owner;
     uint public tokenPrice; 
     uint public tokensSold;
     mapping(address => uint) public balances; 

     constructor(IERC20 _token, uint _tokenPrice) {
         token = _token;
         tokenPrice = _tokenPrice;
         owner = msg.sender;
     }

     function buyTokens(uint _numTokens) public {
         uint totalCost = _numTokens * tokenPrice;
         require(token.balanceOf(msg.sender) >= _numTokens, "Insufficient balance");
         require(token.allowance(msg.sender, address(this)) >= totalCost, "Not enough allowance");

         token.transferFrom(msg.sender, owner, totalCost);
         balances[msg.sender] += _numTokens;
         tokensSold += _numTokens;
     }

     function withdrawTokens() public {
         uint userTokens = balances[msg.sender];
         require(userTokens > 0, "No tokens to withdraw");

         token.transfer(msg.sender, userTokens);
         balances[msg.sender] = 0;
         tokensSold -= userTokens;
     }
}
<\contract_to_analyze\>