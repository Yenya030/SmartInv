<\contract_to_analyze\> 
contract VotingSystem {
     struct Voter {
          bool voted;
          uint256 voteIndex;
          uint256 votingPower;
     }
     mapping(address => Voter) public voters;
     mapping(uint256 => uint256) public votes;
     uint256 public totalVotes;
     
     address public admin;
     address[] public proposals;

     constructor() {
          admin = msg.sender;
     }

     function addProposal(address proposal) public {
          require(msg.sender == admin, "only admin can add proposal");
          proposals.push(proposal);
     }

     function vote(uint256 index, uint256 votingPower) public {
          require(voters[msg.sender].voted == false, "you have already voted");
          require(votingPower > 0, "voting power must be greater than 0");
          
          voters[msg.sender].voted = true;
          voters[msg.sender].voteIndex = index;
          voters[msg.sender].votingPower = votingPower;

          votes[index] += votingPower;
          totalVotes += votingPower;
     }

     function calculateResult() public view returns (uint256) {
          uint256 winningIndex;
          uint256 maxVotes = 0;
          for (uint i = 0; i < proposals.length; i++) {
               if (votes[i] > maxVotes) {
                    maxVotes = votes[i];
                    winningIndex = i;
               }
          }
          return winningIndex;
     }
}