The contract provided for analysis:

contract TokenSale {
    address public admin;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;

    constructor(address _tokenAddress, uint _price) public {
        admin = msg.sender;
        token = IERC20(_tokenAddress);
        tokenPrice = _price;
        tokensSold = 0;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance");
        require(token.allowance(msg.sender, address(this)) >= _amount, "Allowance not set");
        
        uint cost = _amount * tokenPrice;
        token.transferFrom(msg.sender, admin, cost);
        token.transfer(msg.sender, _amount);
        tokensSold += _amount;
    }

    function setPrice(uint _price) public {
        require(msg.sender == admin, "Only admin can set price");
        tokenPrice = _price;
    }

    function withdrawTokens() public {
        require(msg.sender == admin, "Only admin can withdraw tokens");
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }
}

Output: 
1) potential vulnerability: incorrect visibility/ownership