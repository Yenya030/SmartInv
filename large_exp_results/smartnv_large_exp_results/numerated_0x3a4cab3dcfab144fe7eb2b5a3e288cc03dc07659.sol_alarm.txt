<\contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public price;
    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _price) {
        owner = msg.sender;
        token = _token;
        price = _price;
    }

    function buyTokens(uint _amount) public {
        uint cost = _amount * price;
        require(token.balanceOf(msg.sender) >= cost, "Insufficient balance");
        token.transferFrom(msg.sender, owner, cost);
        balances[msg.sender] += _amount;
    }

    function withdrawTokens(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        token.transfer(msg.sender, _amount);
        balances[msg.sender] -= _amount;
    }
}
<\contract\>