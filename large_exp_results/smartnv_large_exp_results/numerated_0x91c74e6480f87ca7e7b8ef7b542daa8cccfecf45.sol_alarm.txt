<\analyzed_contract\>
contract PaymentProcessor {
    address public owner;
    mapping(address => uint256) public payments;

    constructor() {
        owner = msg.sender;
    }

    function makePayment(address _recipient, uint256 _amount) public {
        require(msg.sender == owner, "Only owner can make payments");
        payments[_recipient] += _amount;
    }

    function withdrawPayment(address _recipient) public {
        require(msg.sender == owner, "Only owner can withdraw payments");
        uint256 paymentAmount = payments[_recipient];
        require(paymentAmount > 0, "No payment to withdraw");
        
        // Transfer payment
        payments[_recipient] = 0;
        payable(_recipient).transfer(paymentAmount);
    }

    function setOwner(address _newOwner) public {
        require(msg.sender == owner, "Only owner can set new owner");
        owner = _newOwner;
    }
}
<\analyzed_contract\> 

Output:
- privilege escalation
- inconsistent state update