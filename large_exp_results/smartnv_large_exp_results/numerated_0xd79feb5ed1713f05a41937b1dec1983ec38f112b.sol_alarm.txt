<\analyzed_contract\>
contract TokenSale {
     address public admin;
     IERC20 public token;
     uint public tokenPrice;
     uint public tokensSold;

     mapping(address => uint) public tokenBalance;

     constructor(IERC20 _token, uint _tokenPrice) {
          admin = msg.sender;
          token = _token;
          tokenPrice = _tokenPrice;
     }

     function buyTokens(uint _amount) public {
          require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance");
          uint cost = _amount * tokenPrice;
          token.transferFrom(msg.sender, address(this), cost);
          tokenBalance[msg.sender] += _amount;
          tokensSold += _amount;
     }

     function withdrawTokens() public {
          require(msg.sender == admin, "Unauthorized");
          token.transfer(admin, token.balanceOf(address(this)));
     }
}
<\analyzed_contract\>