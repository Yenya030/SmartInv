==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 797
Estimated Gas Usage: 1168 - 1453
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:71

balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb010101010101010101010101000000000000000000000000000000800080808001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hubcoin
Function name: freezeAccount(address,uint256)
PC address: 2206
Estimated Gas Usage: 1167 - 1592
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:309

require(block.timestamp < (owner_freeze_start + owner_freeze_term))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: freezeAccount(address,uint256), txdata: 0x29846afe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 2403
Estimated Gas Usage: 1230 - 1515
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:71

balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ('0x0000000000000000000000000000000000000000', 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2403
Estimated Gas Usage: 13522 - 54757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:114

_allowance.sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000104, decoded_data: ('0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001', 1809251394333065553493296640760748560207343510400633813116524750123642650624), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Hubcoin
Function name: freezeCheck(address,uint256)
PC address: 3032
Estimated Gas Usage: 2489 - 3245
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:317

launch_date - block.timestamp + total_freeze_term

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: freezeCheck(address,uint256), txdata: 0x4d3ceef1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Hubcoin
Function name: transferFrom(address,address,uint256)
PC address: 3032
Estimated Gas Usage: 23424 - 86567
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:317

launch_date - block.timestamp + total_freeze_term

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hubcoin
Function name: freezeCheck(address,uint256)
PC address: 3043
Estimated Gas Usage: 418 - 513
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:318

if (forbiddenPremine < 0) forbiddenPremine = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: freezeCheck(address,uint256), txdata: 0x4d3ceef1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Hubcoin
Function name: burn(uint256)
PC address: 5190
Estimated Gas Usage: 2201 - 2816
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:328

balances[burner].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: burn(uint256), txdata: 0x42966c6801, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Hubcoin
Function name: transferFrom(address,address,uint256)
PC address: 5190
Estimated Gas Usage: 16502 - 58447
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:114

_allowance.sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000002200800200040088000040008000801080004000000000000000000000000000220080020004008800004000800080108000400000000000000000000000000000000000000000000000000000002, decoded_data: ('0x0002200800200040088000040008000801080004', '0x0002200800200040088000040008000801080004', 8589934592), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hubcoin
Function name: freezeCheck(address,uint256)
PC address: 5221
Estimated Gas Usage: 1435 - 1720
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0xff761ce7d92f882c244142f5779475701ea3c393.sol:28

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: freezeCheck(address,uint256), txdata: 0x4d3ceef1, value: 0x0


