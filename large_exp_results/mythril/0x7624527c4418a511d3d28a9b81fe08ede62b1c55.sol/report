==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeSub(uint256,uint256)
PC address: 455
Estimated Gas Usage: 250 - 345
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x7624527c4418a511d3d28a9b81fe08ede62b1c55.sol:17

function safeSub(uint256 a, uint256 b)public pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeSub(uint256,uint256), txdata: 0xa293d1e880010480010200010010800100020240000000000000000000000000000000008001081004021002081108040201080000020004008020204080800120020401, decoded_data: (57897842523687571703878019170839817750585219748768856900264342208964070473728, 57897867111474894737749203663750160811039353279145519822632649939862344041473), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeDiv(uint256,uint256)
PC address: 477
Estimated Gas Usage: 269 - 364
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x7624527c4418a511d3d28a9b81fe08ede62b1c55.sol:10

function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == b * c + a % b);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: _assert(bool)
PC address: 531
Estimated Gas Usage: 264 - 359
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x7624527c4418a511d3d28a9b81fe08ede62b1c55.sol:28

function _assert(bool assertion)public pure {
    assert(!assertion);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: _assert(bool), txdata: 0xcdeda0554001800101080101200102102001010101010110010401080101010820081004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeAdd(uint256,uint256)
PC address: 611
Estimated Gas Usage: 375 - 470
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x7624527c4418a511d3d28a9b81fe08ede62b1c55.sol:22

function safeAdd(uint256 a, uint256 b)public pure returns (uint256) {
    uint256 c = a + b;
    assert(c>=a && c>=b);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeAdd(uint256,uint256), txdata: 0xe6cb9013e9d9be1456b69c3bc823214d4f81b3264a9ea0a7b2b7117521638628c9a42ac84840820d0100b00840000044c850a52a52a420a08690f8c52345422218b8264c, decoded_data: (105773611413094780039081803624686951813967439559285783527891466249376486402760, 32680500887750981170773790609126550668177280614223949628664995077781594842700), value: 0x0


