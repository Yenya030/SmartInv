==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hut34ENTRP
Function name: constructor
PC address: 1477
Estimated Gas Usage: 34719 - 138960
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0x5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3.sol:73

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Hut34ENTRP
Function name: constructor
PC address: 1478
Estimated Gas Usage: 34729 - 138970
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3.sol:328

now.add(VESTING_PERIOD)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hut34ENTRP
Function name: releaseVested()
PC address: 2886
Estimated Gas Usage: 1112 - 1207
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0x5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3.sol:336

require(now > nextReleaseDate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseVested(), txdata: 0x1f800e8e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Hut34ENTRP
Function name: releaseVested()
PC address: 5059
Estimated Gas Usage: 3615 - 4247
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3.sol:338

nextReleaseDate.add(VESTING_PERIOD)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseVested(), txdata: 0x1f800e8e, value: 0x0


