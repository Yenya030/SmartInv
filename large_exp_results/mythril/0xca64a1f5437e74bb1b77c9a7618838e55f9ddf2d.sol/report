==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: constructor
PC address: 174
Estimated Gas Usage: 38792 - 182511
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d.sol:29

now + 2900 * 1 minutes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: checkGoalReached()
PC address: 1105
Estimated Gas Usage: 933 - 1028
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d.sol:48

if (now >= deadline) _

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: checkGoalReached(), txdata: 0x01cb3b20, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: safeWithdrawal()
PC address: 1456
Estimated Gas Usage: 1112 - 1207
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d.sol:48

if (now >= deadline) _

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: safeWithdrawal(), txdata: 0xfd6b7ef8, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: Crowdsale
Function name: safeWithdrawal()
PC address: 1670
Estimated Gas Usage: 10580 - 66628
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: /tmp/0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d.sol:76

msg.sender.send(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x00, decoded_data: , value: 0x1
Caller: [ATTACKER], function: safeWithdrawal(), txdata: 0xfd6b7ef8, value: 0x0


