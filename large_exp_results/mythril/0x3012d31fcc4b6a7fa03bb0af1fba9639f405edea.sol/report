==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Managed
Function name: removeAdmin(address)
PC address: 1315
Estimated Gas Usage: 3730 - 4485
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x3012d31fcc4b6a7fa03bb0af1fba9639f405edea.sol:121

function isAdmin (address _admin) public view returns (bool _isAdmin) {
    if (_admin == addressOfOwner) {
      return true;
    }

    for (uint256 i = 0; i < addressesOfAdmins.length; i++) {
      if (addressesOfAdmins[i] == _admin) {
        return true;
      }
    }

    return false;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeAdmin(address), txdata: 0x1785f53cafafafafafafafafafafafafaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CityToken
Function name: removeAdmin(address)
PC address: 5419
Estimated Gas Usage: 3862 - 4617
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x3012d31fcc4b6a7fa03bb0af1fba9639f405edea.sol:121

function isAdmin (address _admin) public view returns (bool _isAdmin) {
    if (_admin == addressOfOwner) {
      return true;
    }

    for (uint256 i = 0; i < addressesOfAdmins.length; i++) {
      if (addressesOfAdmins[i] == _admin) {
        return true;
      }
    }

    return false;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeAdmin(address), txdata: 0x1785f53c000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CityToken
Function name: calculateCountryCut(uint256)
PC address: 12591
Estimated Gas Usage: 662 - 757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/0x3012d31fcc4b6a7fa03bb0af1fba9639f405edea.sol:236

_price.mul(3)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: calculateCountryCut(uint256), txdata: 0x49f73d3dc2, decoded_data: (87748692625153679344424887076896305170056160254430739936151450380996668555264,), value: 0x0


