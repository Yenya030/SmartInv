1 {{
2   "language": "Solidity",
3   "sources": {
4     "Hibernation.sol": {
5       "content": "// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// Author: @gizmolab_\r\n// Audited by @ViperwareLabs\r\n\r\n\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\n\r\ncontract NFTStaking is Ownable {\r\n\r\n    address[] public VaultContracts;\r\n\r\n    address public caveAddress = 0x6058224af88C344c919325720a7784c69202B815;\r\n\r\n    struct Stake {\r\n        address owner; // 32bits\r\n        uint128 timestamp;  // 32bits\r\n    }\r\n\r\n    bool public stakingEnabled = false;\r\n    uint256 public totalStaked;\r\n\r\n    mapping(address => mapping(uint256 => Stake)) public vault; \r\n    mapping(address => mapping(address => uint256[])) public userStakeTokens;\r\n    mapping(address => uint256[]) public userStakeCaves;\r\n\r\n    event NFTStaked(address owner, address tokenAddress, uint256 tokenId, uint256 value);\r\n    event NFTUnstaked(address owner, address tokenAddress, uint256 tokenId, uint256 value);\r\n    event Claimed(address owner);\r\n\r\n    function setCaveAddress(address _contract) public onlyOwner {\r\n        caveAddress = _contract;\r\n    }\r\n\r\n    function addVault(address _contract) public onlyOwner {\r\n        VaultContracts.push(_contract);\r\n    }\r\n    \r\n    function stakeNfts(uint256 _pid, uint256[] calldata tokenIds) external {\r\n\r\n        require(stakingEnabled == true, \"Staking is not enabled yet.\");\r\n        require(userStakeCaves[msg.sender].length > 0, \"You cannot stake without having a Cave staked.\");\r\n\r\n        IERC721 nftContract = IERC721(VaultContracts[_pid]);\r\n\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            require(nftContract.ownerOf(tokenIds[i]) == msg.sender, \"You do not own this token\");\r\n            nftContract.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n            vault[VaultContracts[_pid]][tokenIds[i]] = Stake({owner: msg.sender, timestamp: uint128(block.timestamp)});\r\n            userStakeTokens[msg.sender][VaultContracts[_pid]].push(tokenIds[i]);\r\n            emit NFTStaked(msg.sender, VaultContracts[_pid], tokenIds[i], block.timestamp);\r\n            totalStaked++;\r\n        }\r\n\r\n    }\r\n\r\n    function stakeCave(uint256[] memory tokenIds) external {\r\n        require(stakingEnabled == true, \"Staking is not enabled yet.\");\r\n\r\n        IERC721 Cave = IERC721(caveAddress);\r\n\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            Cave.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n            userStakeCaves[msg.sender].push(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function unstakeNfts(uint256 _pid, uint256[] calldata tokenIds) external {\r\n        IERC721 nftContract = IERC721(VaultContracts[_pid]);\r\n        \r\n        for (uint i; i < tokenIds.length; i++) {\r\n            // Replaced this function with: require(isTokenOwner == true, \"You do not own this Token\"); \r\n            // require(vault[VaultContracts[_pid]][tokenIds[i]].owner == msg.sender, \"You do not own this NFT\");\r\n\r\n            bool isTokenOwner = false;\r\n            uint tokenIndex = 0;\r\n        \r\n            for (uint j = 0; j < userStakeTokens[msg.sender][VaultContracts[_pid]].length; j++) {\r\n                if (tokenIds[i] == userStakeTokens[msg.sender][VaultContracts[_pid]][j]) {\r\n                    isTokenOwner = true;\r\n                    tokenIndex = j;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            require(isTokenOwner == true, \"You do not own this Token\");\r\n\r\n            nftContract.transferFrom(address(this), msg.sender, tokenIds[i]);\r\n\r\n            delete vault[VaultContracts[_pid]][tokenIds[i]];\r\n            totalStaked--;\r\n\r\n            //delete userStakeTokens[msg.sender][VaultContracts[_pid]][tokenIndex];\r\n            userStakeTokens[msg.sender][VaultContracts[_pid]][tokenIndex] = userStakeTokens[msg.sender][VaultContracts[_pid]][userStakeTokens[msg.sender][VaultContracts[_pid]].length - 1];\r\n            userStakeTokens[msg.sender][VaultContracts[_pid]].pop();\r\n\r\n            emit NFTUnstaked(msg.sender, VaultContracts[_pid], tokenIds[i], block.timestamp);\r\n        }\r\n    } \r\n\r\n    function unstakeCave(uint256[] memory tokenIds) external {\r\n        require(stakingEnabled == true, \"Staking is not enabled yet.\");\r\n        require(getUserStaked(msg.sender) == 0, \"You cannot unstake your Cave until you unstake all your NFTs\");\r\n\r\n        IERC721 Cave = IERC721(caveAddress);\r\n\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            \r\n            bool isCaveOwner = false;\r\n            uint caveIndex = 0;\r\n        \r\n            for (uint j = 0; j < userStakeCaves[msg.sender].length; j++) {\r\n                if (tokenIds[i] == userStakeCaves[msg.sender][j]) {\r\n                    isCaveOwner = true;\r\n                    caveIndex = j;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            require(isCaveOwner == true, \"You do not own this Cave\");\r\n\r\n            Cave.transferFrom(address(this), msg.sender, tokenIds[i]);\r\n            \r\n            //delete userStakeCaves[msg.sender][caveIndex];\r\n            userStakeCaves[msg.sender][caveIndex] = userStakeCaves[msg.sender][userStakeCaves[msg.sender].length - 1];\r\n            userStakeCaves[msg.sender].pop();\r\n\r\n        }\r\n    }\r\n\r\n    function setStakingEnabled(bool _enabled) external  onlyOwner {\r\n        stakingEnabled = _enabled;\r\n    }\r\n\r\n    function getStakedCaves(address _user) external view returns (uint256[] memory) {\r\n        return userStakeCaves[_user];\r\n    } \r\n\r\n    function getStakedTokens(address _user, address _contract) external view returns (uint256[] memory) {\r\n        return userStakeTokens[_user][_contract];\r\n    } \r\n\r\n    function getVaultContracts() external view returns (address[] memory) {\r\n        return VaultContracts;\r\n    }\r\n\r\n    function getStake(address _contract, uint256 _tokenId) external view returns (Stake memory) {\r\n        return vault[_contract][_tokenId];\r\n    }\r\n    \r\n    // get the total staked NFTs\r\n    function getTotalStaked() external view returns (uint256) {\r\n        return totalStaked;\r\n    } \r\n    \r\n    function getUserStaked(address _user) public view returns (uint256) {\r\n        uint256 total;\r\n        for (uint i; i < VaultContracts.length; i++) {\r\n            total += userStakeTokens[_user][VaultContracts[i]].length;\r\n        }\r\n        return total;\r\n    }\r\n\r\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": false,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}