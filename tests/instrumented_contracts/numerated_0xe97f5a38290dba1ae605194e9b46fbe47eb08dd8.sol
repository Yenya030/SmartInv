1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/MethDeposit.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interface/IMasterContract.sol\";\r\n\r\n/// @title Bulls and Apes Project - Deposit to METH Bank\r\n/// @author BAP Dev Team\r\n/// @notice Helper Contract to handle METH deposits to the bank\r\ncontract MethDeposit is Ownable {\r\n    /// @notice BAP Apes contract\r\n    IMasterContract public masterContract;\r\n    /// @notice Address of the signer wallet\r\n    address public secret;\r\n\r\n    /// @notice Event emitted when METH is deposited\r\n    event Deposit(uint256 amount, address recipient, address operator);\r\n    event MethBagBought(uint256 amount, uint256 price, address to);\r\n\r\n    /// @notice Deploys the contract\r\n    /// @param _masterContract BAP Master contract\r\n    constructor(address _masterContract, address _secret) {\r\n        masterContract = IMasterContract(_masterContract);\r\n        secret = _secret;\r\n    }\r\n\r\n    /// @notice Helper function to deposit METH through master contract\r\n    /// @param amount Amount of METH to deposit\r\n    /// @param recipient Address to deposit METH to\r\n    function deposit(uint256 amount, address recipient) external {\r\n        require(msg.sender == tx.origin, \"Only direct calls allowed\");\r\n        masterContract.pay(amount, 0);\r\n\r\n        emit Deposit(amount, recipient, msg.sender);\r\n    }\r\n\r\n    /// @notice Buy METH bags to be deposited to the bank\r\n    /// @param amount Amount of METH to buy\r\n    /// @param to Address to send the METH\r\n    /// @param price Price to be paid for the METH (in ETH)\r\n    /// @param timeOut Timestamp for signature expiration\r\n    /// @param signature Signature to verify above parameters\r\n    /// @dev Mints amount METH to selected address\r\n    function buyMethBag(\r\n        uint256 amount,\r\n        address to,\r\n        uint256 price,\r\n        uint256 timeOut,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        require(\r\n            timeOut > block.timestamp,\r\n            \"buyMethBag: Seed is no longer valid\"\r\n        );\r\n        require(\r\n            _verifyHashSignature(\r\n                keccak256(abi.encode(amount, to, price, timeOut)),\r\n                signature\r\n            ),\r\n            \"buyMethBag: Signature is invalid\"\r\n        );\r\n        require(price > 0, \"buyMethBag: amount is not valid\");\r\n        require(msg.value >= price, \"buyMethBag: not enough ETH to buy\");\r\n\r\n        if (msg.value > price) {\r\n            (bool success, ) = msg.sender.call{value: msg.value - price}(\"\");\r\n            require(success, \"buyMethBag: Unable to send refund eth\");\r\n        }\r\n\r\n        emit Deposit(amount, to, msg.sender);\r\n        emit MethBagBought(amount, price, to);\r\n    }\r\n\r\n    /// @notice Set new contracts addresses for BAP Master contract\r\n    /// @param _masterContract New address for BAP Master contract\r\n    /// @dev Can only be called by the contract owner\r\n    function setContracts(address _masterContract) external onlyOwner {\r\n        masterContract = IMasterContract(_masterContract);\r\n    }\r\n\r\n    /// @notice Change the signer address\r\n    /// @param _secret new signer for encrypted signatures\r\n    /// @dev Can only be called by the contract owner\r\n    function setSecret(address _secret) external onlyOwner {\r\n        secret = _secret;\r\n    }\r\n\r\n    function _verifyHashSignature(\r\n        bytes32 freshHash,\r\n        bytes memory signature\r\n    ) internal view returns (bool) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", freshHash)\r\n        );\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (signature.length != 65) {\r\n            return false;\r\n        }\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        address signer = address(0);\r\n        if (v == 27 || v == 28) {\r\n            // solium-disable-next-line arg-overflow\r\n            signer = ecrecover(hash, v, r, s);\r\n        }\r\n        return secret == signer;\r\n    }\r\n}\r\n"
6     },
7     "/contracts/interface/IMasterContract.sol": {
8       "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IMasterContract {\r\n    // METH functions\r\n\r\n    function claim(address to, uint256 amount) external;\r\n\r\n    function pay(uint256 payment, uint256 fee) external;\r\n\r\n    // Teens functions\r\n\r\n    function airdrop(address to, uint256 amount) external;\r\n\r\n    function burnTeenBull(uint256 tokenId) external;\r\n\r\n    // Utilities functions\r\n\r\n    function burn(uint256 id, uint256 amount) external;\r\n\r\n    function airdrop(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 id\r\n    ) external;\r\n}\r\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "remappings": [],
19     "optimizer": {
20       "enabled": true,
21       "runs": 200
22     },
23     "evmVersion": "london",
24     "libraries": {},
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}