1 /*
2 * Generated by @Thrasher66099
3 * Email thrasher66099@gmail.com for your NFT launch needs
4 */
5 
6 pragma solidity ^0.8.0;
7 
8 interface IByteContract {
9     function burn(address _from, uint256 _amount) external;
10 }
11 
12 /**
13  * @dev Interface of the ERC165 standard, as defined in the
14  * https://eips.ethereum.org/EIPS/eip-165[EIP].
15  *
16  * Implementers can declare support of contract interfaces, which can then be
17  * queried by others ({ERC165Checker}).
18  *
19  * For an implementation, see {ERC165}.
20  */
21 interface IERC165 {
22     /**
23      * @dev Returns true if this contract implements the interface defined by
24      * `interfaceId`. See the corresponding
25      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
26      * to learn more about how these ids are created.
27      *
28      * This function call must use less than 30 000 gas.
29      */
30     function supportsInterface(bytes4 interfaceId) external view returns (bool);
31 }
32 
33 
34 /**
35  * @dev Required interface of an ERC721 compliant contract.
36  */
37 interface IERC721 is IERC165 {
38     /**
39      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
40      */
41     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
42 
43     /**
44      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
45      */
46     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
47 
48     /**
49      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
50      */
51     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
52 
53     /**
54      * @dev Returns the number of tokens in ``owner``'s account.
55      */
56     function balanceOf(address owner) external view returns (uint256 balance);
57 
58     /**
59      * @dev Returns the owner of the `tokenId` token.
60      *
61      * Requirements:
62      *
63      * - `tokenId` must exist.
64      */
65     function ownerOf(uint256 tokenId) external view returns (address owner);
66 
67     /**
68      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
69      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
70      *
71      * Requirements:
72      *
73      * - `from` cannot be the zero address.
74      * - `to` cannot be the zero address.
75      * - `tokenId` token must exist and be owned by `from`.
76      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
77      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
78      *
79      * Emits a {Transfer} event.
80      */
81     function safeTransferFrom(
82         address from,
83         address to,
84         uint256 tokenId
85     ) external;
86 
87     /**
88      * @dev Transfers `tokenId` token from `from` to `to`.
89      *
90      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
91      *
92      * Requirements:
93      *
94      * - `from` cannot be the zero address.
95      * - `to` cannot be the zero address.
96      * - `tokenId` token must be owned by `from`.
97      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
98      *
99      * Emits a {Transfer} event.
100      */
101     function transferFrom(
102         address from,
103         address to,
104         uint256 tokenId
105     ) external;
106 
107     /**
108      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
109      * The approval is cleared when the token is transferred.
110      *
111      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
112      *
113      * Requirements:
114      *
115      * - The caller must own the token or be an approved operator.
116      * - `tokenId` must exist.
117      *
118      * Emits an {Approval} event.
119      */
120     function approve(address to, uint256 tokenId) external;
121 
122     /**
123      * @dev Returns the account approved for `tokenId` token.
124      *
125      * Requirements:
126      *
127      * - `tokenId` must exist.
128      */
129     function getApproved(uint256 tokenId) external view returns (address operator);
130 
131     /**
132      * @dev Approve or remove `operator` as an operator for the caller.
133      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
134      *
135      * Requirements:
136      *
137      * - The `operator` cannot be the caller.
138      *
139      * Emits an {ApprovalForAll} event.
140      */
141     function setApprovalForAll(address operator, bool _approved) external;
142 
143     /**
144      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
145      *
146      * See {setApprovalForAll}
147      */
148     function isApprovedForAll(address owner, address operator) external view returns (bool);
149 
150     /**
151      * @dev Safely transfers `tokenId` token from `from` to `to`.
152      *
153      * Requirements:
154      *
155      * - `from` cannot be the zero address.
156      * - `to` cannot be the zero address.
157      * - `tokenId` token must exist and be owned by `from`.
158      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
159      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
160      *
161      * Emits a {Transfer} event.
162      */
163     function safeTransferFrom(
164         address from,
165         address to,
166         uint256 tokenId,
167         bytes calldata data
168     ) external;
169 }
170 
171 
172 
173 /**
174  * @dev String operations.
175  */
176 library Strings {
177     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
178 
179     /**
180      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
181      */
182     function toString(uint256 value) internal pure returns (string memory) {
183         // Inspired by OraclizeAPI's implementation - MIT licence
184         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
185 
186         if (value == 0) {
187             return "0";
188         }
189         uint256 temp = value;
190         uint256 digits;
191         while (temp != 0) {
192             digits++;
193             temp /= 10;
194         }
195         bytes memory buffer = new bytes(digits);
196         while (value != 0) {
197             digits -= 1;
198             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
199             value /= 10;
200         }
201         return string(buffer);
202     }
203 
204 
205     /**
206      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation. 
207      */
208     function toHexString(uint256 value) internal pure returns (string memory) {
209         if (value == 0) {
210             return "0x00";
211         }
212         uint256 temp = value;
213         uint256 length = 0;
214         while (temp != 0) {
215             length++;
216             temp >>= 8;
217         }
218         return toHexString(value, length);
219     }
220 
221     /**
222      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
223      */
224     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
225         bytes memory buffer = new bytes(2 * length + 2);
226         buffer[0] = "0";
227         buffer[1] = "x";
228         for (uint256 i = 2 * length + 1; i > 1; --i) {
229             buffer[i] = _HEX_SYMBOLS[value & 0xf];
230             value >>= 4;
231         }
232         require(value == 0, "Strings: hex length insufficient");
233         return string(buffer);
234     }
235 }
236 
237 
238 /*
239  * @dev Provides information about the current execution context, including the
240  * sender of the transaction and its data. While these are generally available
241  * via msg.sender and msg.data, they should not be accessed in such a direct
242  * manner, since when dealing with meta-transactions the account sending and
243  * paying for execution may not be the actual sender (as far as an application
244  * is concerned).
245  *
246  * This contract is only required for intermediate, library-like contracts.
247  */
248 abstract contract Context {
249     function _msgSender() internal view virtual returns (address) {
250         return msg.sender;
251     }
252 
253     function _msgData() internal view virtual returns (bytes calldata) {
254         return msg.data;
255     }
256 }
257 
258 
259 /**
260  * @dev Contract module which provides a basic access control mechanism, where
261  * there is an account (an owner) that can be granted exclusive access to
262  * specific functions.
263  *
264  * By default, the owner account will be the one that deploys the contract. This
265  * can later be changed with {transferOwnership}.
266  *
267  * This module is used through inheritance. It will make available the modifier
268  * `onlyOwner`, which can be applied to your functions to restrict their use to
269  * the owner.
270  */
271 abstract contract Ownable is Context {
272     address private _owner;
273 
274     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
275 
276     /**
277      * @dev Initializes the contract setting the deployer as the initial owner.
278      */
279     constructor() {
280         _setOwner(_msgSender());
281     }
282 
283     /**
284      * @dev Returns the address of the current owner.
285      */
286     function owner() public view virtual returns (address) {
287         return _owner;
288     }
289 
290     /**
291      * @dev Throws if called by any account other than the owner.
292      */
293     modifier onlyOwner() {
294         require(owner() == _msgSender(), "Ownable: caller is not the owner");
295         _;
296     }
297 
298     /**
299      * @dev Leaves the contract without owner. It will not be possible to call
300      * `onlyOwner` functions anymore. Can only be called by the current owner.
301      *
302      * NOTE: Renouncing ownership will leave the contract without an owner,
303      * thereby removing any functionality that is only available to the owner.
304      */
305     function renounceOwnership() public virtual onlyOwner {
306         _setOwner(address(0));
307     }
308 
309     /**
310      * @dev Transfers ownership of the contract to a new account (`newOwner`).
311      * Can only be called by the current owner.
312      */
313     function transferOwnership(address newOwner) public virtual onlyOwner {
314         require(newOwner != address(0), "Ownable: new owner is the zero address");
315         _setOwner(newOwner);
316     }
317 
318     function _setOwner(address newOwner) private {
319         address oldOwner = _owner;
320         _owner = newOwner;
321         emit OwnershipTransferred(oldOwner, newOwner);
322     }
323 }
324 
325 
326 /**
327  * @dev Contract module that helps prevent reentrant calls to a function.
328  *
329  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
330  * available, which can be applied to functions to make sure there are no nested
331  * (reentrant) calls to them.
332  *
333  * Note that because there is a single `nonReentrant` guard, functions marked as
334  * `nonReentrant` may not call one another. This can be worked around by making
335  * those functions `private`, and then adding `external` `nonReentrant` entry
336  * points to them.
337  *
338  * TIP: If you would like to learn more about reentrancy and alternative ways
339  * to protect against it, check out our blog post
340  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
341  */
342 abstract contract ReentrancyGuard {
343     // Booleans are more expensive than uint256 or any type that takes up a full
344     // word because each write operation emits an extra SLOAD to first read the
345     // slot's contents, replace the bits taken up by the boolean, and then write
346     // back. This is the compiler's defense against contract upgrades and
347     // pointer aliasing, and it cannot be disabled.
348 
349     // The values being non-zero value makes deployment a bit more expensive,
350     // but in exchange the refund on every call to nonReentrant will be lower in
351     // amount. Since refunds are capped to a percentage of the total
352     // transaction's gas, it is best to keep them low in cases like this one, to
353     // increase the likelihood of the full refund coming into effect.
354     uint256 private constant _NOT_ENTERED = 1;
355     uint256 private constant _ENTERED = 2;
356 
357     uint256 private _status;
358 
359     constructor() {
360         _status = _NOT_ENTERED;
361     }
362 
363     /**
364      * @dev Prevents a contract from calling itself, directly or indirectly.
365      * Calling a `nonReentrant` function from another `nonReentrant`
366      * function is not supported. It is possible to prevent this from happening
367      * by making the `nonReentrant` function external, and make it call a
368      * `private` function that does the actual work.
369      */
370     modifier nonReentrant() {
371         // On the first call to nonReentrant, _notEntered will be true
372         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
373 
374         // Any calls to nonReentrant after this point will fail
375         _status = _ENTERED;
376 
377         _;
378 
379         // By storing the original value once again, a refund is triggered (see
380         // https://eips.ethereum.org/EIPS/eip-2200)
381         _status = _NOT_ENTERED;
382     }
383 }
384 
385 
386 
387 /**
388  * @title ERC721 token receiver interface
389  * @dev Interface for any contract that wants to support safeTransfers
390  * from ERC721 asset contracts.
391  */
392 interface IERC721Receiver {
393     /**
394      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
395      * by `operator` from `from`, this function is called.
396      *
397      * It must return its Solidity selector to confirm the token transfer.
398      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
399      *
400      * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
401      */
402     function onERC721Received(
403         address operator,
404         address from,
405         uint256 tokenId,
406         bytes calldata data
407     ) external returns (bytes4);
408 }
409 
410 
411 /**
412  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
413  * @dev See https://eips.ethereum.org/EIPS/eip-721
414  */
415 interface IERC721Metadata is IERC721 {
416     /**
417      * @dev Returns the token collection name.
418      */
419     function name() external view returns (string memory);
420 
421     /**
422      * @dev Returns the token collection symbol.
423      */
424     function symbol() external view returns (string memory);
425 
426     /**
427      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
428      */
429     function tokenURI(uint256 tokenId) external view returns (string memory);
430 }
431 
432 
433 /**
434  * @dev Collection of functions related to the address type
435  */
436 library Address {
437     /**
438      * @dev Returns true if `account` is a contract.
439      *
440      * [IMPORTANT]
441      * ====
442      * It is unsafe to assume that an address for which this function returns
443      * false is an externally-owned account (EOA) and not a contract.
444      *
445      * Among others, `isContract` will return false for the following
446      * types of addresses:
447      *
448      *  - an externally-owned account
449      *  - a contract in construction
450      *  - an address where a contract will be created
451      *  - an address where a contract lived, but was destroyed
452      * ====
453      */
454     function isContract(address account) internal view returns (bool) {
455         // This method relies on extcodesize, which returns 0 for contracts in
456         // construction, since the code is only stored at the end of the
457         // constructor execution.
458 
459         uint256 size;
460         assembly {
461             size := extcodesize(account)
462         }
463         return size > 0;
464     }
465 
466     /**
467      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
468      * `recipient`, forwarding all available gas and reverting on errors.
469      *
470      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
471      * of certain opcodes, possibly making contracts go over the 2300 gas limit
472      * imposed by `transfer`, making them unable to receive funds via
473      * `transfer`. {sendValue} removes this limitation.
474      *
475      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
476      *
477      * IMPORTANT: because control is transferred to `recipient`, care must be
478      * taken to not create reentrancy vulnerabilities. Consider using
479      * {ReentrancyGuard} or the
480      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
481      */
482     function sendValue(address payable recipient, uint256 amount) internal {
483         require(address(this).balance >= amount, "Address: insufficient balance");
484 
485         (bool success, ) = recipient.call{value: amount}("");
486         require(success, "Address: unable to send value, recipient may have reverted");
487     }
488 
489     /**
490      * @dev Performs a Solidity function call using a low level `call`. A
491      * plain `call` is an unsafe replacement for a function call: use this
492      * function instead.
493      *
494      * If `target` reverts with a revert reason, it is bubbled up by this
495      * function (like regular Solidity function calls).
496      *
497      * Returns the raw returned data. To convert to the expected return value,
498      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
499      *
500      * Requirements:
501      *
502      * - `target` must be a contract.
503      * - calling `target` with `data` must not revert.
504      *
505      * _Available since v3.1._
506      */
507     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
508         return functionCall(target, data, "Address: low-level call failed");
509     }
510 
511     /**
512      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
513      * `errorMessage` as a fallback revert reason when `target` reverts.
514      *
515      * _Available since v3.1._
516      */
517     function functionCall(
518         address target,
519         bytes memory data,
520         string memory errorMessage
521     ) internal returns (bytes memory) {
522         return functionCallWithValue(target, data, 0, errorMessage);
523     }
524 
525     /**
526      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
527      * but also transferring `value` wei to `target`.
528      *
529      * Requirements:
530      *
531      * - the calling contract must have an ETH balance of at least `value`.
532      * - the called Solidity function must be `payable`.
533      *
534      * _Available since v3.1._
535      */
536     function functionCallWithValue(
537         address target,
538         bytes memory data,
539         uint256 value
540     ) internal returns (bytes memory) {
541         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
542     }
543 
544     /**
545      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
546      * with `errorMessage` as a fallback revert reason when `target` reverts.
547      *
548      * _Available since v3.1._
549      */
550     function functionCallWithValue(
551         address target,
552         bytes memory data,
553         uint256 value,
554         string memory errorMessage
555     ) internal returns (bytes memory) {
556         require(address(this).balance >= value, "Address: insufficient balance for call");
557         require(isContract(target), "Address: call to non-contract");
558 
559         (bool success, bytes memory returndata) = target.call{value: value}(data);
560         return _verifyCallResult(success, returndata, errorMessage);
561     }
562 
563     /**
564      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
565      * but performing a static call.
566      *
567      * _Available since v3.3._
568      */
569     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
570         return functionStaticCall(target, data, "Address: low-level static call failed");
571     }
572 
573     /**
574      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
575      * but performing a static call.
576      *
577      * _Available since v3.3._
578      */
579     function functionStaticCall(
580         address target,
581         bytes memory data,
582         string memory errorMessage
583     ) internal view returns (bytes memory) {
584         require(isContract(target), "Address: static call to non-contract");
585 
586         (bool success, bytes memory returndata) = target.staticcall(data);
587         return _verifyCallResult(success, returndata, errorMessage);
588     }
589 
590     /**
591      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
592      * but performing a delegate call.
593      *
594      * _Available since v3.4._
595      */
596     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
597         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
598     }
599 
600     /**
601      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
602      * but performing a delegate call.
603      *
604      * _Available since v3.4._
605      */
606     function functionDelegateCall(
607         address target,
608         bytes memory data,
609         string memory errorMessage
610     ) internal returns (bytes memory) {
611         require(isContract(target), "Address: delegate call to non-contract");
612 
613         (bool success, bytes memory returndata) = target.delegatecall(data);
614         return _verifyCallResult(success, returndata, errorMessage);
615     }
616 
617     function _verifyCallResult(
618         bool success,
619         bytes memory returndata,
620         string memory errorMessage
621     ) private pure returns (bytes memory) {
622         if (success) {
623             return returndata;
624         } else {
625             // Look for revert reason and bubble it up if present
626             if (returndata.length > 0) {
627                 // The easiest way to bubble the revert reason is using memory via assembly
628 
629                 assembly {
630                     let returndata_size := mload(returndata)
631                     revert(add(32, returndata), returndata_size)
632                 }
633             } else {
634                 revert(errorMessage);
635             }
636         }
637     }
638 }
639 
640 
641 
642 
643 /**
644  * @dev Implementation of the {IERC165} interface.
645  *
646  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
647  * for the additional interface id that will be supported. For example:
648  *
649  * ```solidity
650  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
651  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
652  * }
653  * ```
654  *
655  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
656  */
657 abstract contract ERC165 is IERC165 {
658     /**
659      * @dev See {IERC165-supportsInterface}.
660      */
661     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
662         return interfaceId == type(IERC165).interfaceId;
663     }
664 }
665 
666 
667 /**
668  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
669  * the Metadata extension, but not including the Enumerable extension, which is available separately as
670  * {ERC721Enumerable}.
671  */
672 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
673     using Address for address;
674     using Strings for uint256;
675 
676     // Token name
677     string private _name;
678 
679     // Token symbol
680     string private _symbol;
681 
682     // Mapping from token ID to owner address
683     mapping(uint256 => address) private _owners;
684 
685     // Mapping owner address to token count
686     mapping(address => uint256) private _balances;
687 
688     // Mapping from token ID to approved address
689     mapping(uint256 => address) private _tokenApprovals;
690 
691     // Mapping from owner to operator approvals
692     mapping(address => mapping(address => bool)) private _operatorApprovals;
693 
694     /**
695      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
696      */
697     constructor(string memory name_, string memory symbol_) {
698         _name = name_;
699         _symbol = symbol_;
700     }
701 
702     /**
703      * @dev See {IERC165-supportsInterface}.
704      */
705     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
706         return
707             interfaceId == type(IERC721).interfaceId ||
708             interfaceId == type(IERC721Metadata).interfaceId ||
709             super.supportsInterface(interfaceId);
710     }
711 
712     /**
713      * @dev See {IERC721-balanceOf}.
714      */
715     function balanceOf(address owner) public view virtual override returns (uint256) {
716         require(owner != address(0), "ERC721: balance query for the zero address");
717         return _balances[owner];
718     }
719 
720     /**
721      * @dev See {IERC721-ownerOf}.
722      */
723     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
724         address owner = _owners[tokenId];
725         require(owner != address(0), "ERC721: owner query for nonexistent token");
726         return owner;
727     }
728 
729     /**
730      * @dev See {IERC721Metadata-name}.
731      */
732     function name() public view virtual override returns (string memory) {
733         return _name;
734     }
735 
736     /**
737      * @dev See {IERC721Metadata-symbol}.
738      */
739     function symbol() public view virtual override returns (string memory) {
740         return _symbol;
741     }
742 
743     /**
744      * @dev See {IERC721Metadata-tokenURI}.
745      */
746     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
747         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
748 
749         string memory baseURI = _baseURI();
750         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
751     }
752 
753     /**
754      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
755      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
756      * by default, can be overriden in child contracts.
757      */
758     function _baseURI() internal view virtual returns (string memory) {
759         return "";
760     }
761 
762     /**
763      * @dev See {IERC721-approve}.
764      */
765     function approve(address to, uint256 tokenId) public virtual override {
766         address owner = ERC721.ownerOf(tokenId);
767         require(to != owner, "ERC721: approval to current owner");
768 
769         require(
770             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
771             "ERC721: approve caller is not owner nor approved for all"
772         );
773 
774         _approve(to, tokenId);
775     }
776 
777     /**
778      * @dev See {IERC721-getApproved}.
779      */
780     function getApproved(uint256 tokenId) public view virtual override returns (address) {
781         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
782 
783         return _tokenApprovals[tokenId];
784     }
785 
786     /**
787      * @dev See {IERC721-setApprovalForAll}.
788      */
789     function setApprovalForAll(address operator, bool approved) public virtual override {
790         require(operator != _msgSender(), "ERC721: approve to caller");
791 
792         _operatorApprovals[_msgSender()][operator] = approved;
793         emit ApprovalForAll(_msgSender(), operator, approved);
794     }
795 
796     /**
797      * @dev See {IERC721-isApprovedForAll}.
798      */
799     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
800         return _operatorApprovals[owner][operator];
801     }
802 
803     /**
804      * @dev See {IERC721-transferFrom}.
805      */
806     function transferFrom(
807         address from,
808         address to,
809         uint256 tokenId
810     ) public virtual override {
811         //solhint-disable-next-line max-line-length
812         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
813 
814         _transfer(from, to, tokenId);
815     }
816 
817     /**
818      * @dev See {IERC721-safeTransferFrom}.
819      */
820     function safeTransferFrom(
821         address from,
822         address to,
823         uint256 tokenId
824     ) public virtual override {
825         safeTransferFrom(from, to, tokenId, "");
826     }
827 
828     /**
829      * @dev See {IERC721-safeTransferFrom}.
830      */
831     function safeTransferFrom(
832         address from,
833         address to,
834         uint256 tokenId,
835         bytes memory _data
836     ) public virtual override {
837         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
838         _safeTransfer(from, to, tokenId, _data);
839     }
840 
841     /**
842      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
843      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
844      *
845      * `_data` is additional data, it has no specified format and it is sent in call to `to`.
846      *
847      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
848      * implement alternative mechanisms to perform token transfer, such as signature-based.
849      *
850      * Requirements:
851      *
852      * - `from` cannot be the zero address.
853      * - `to` cannot be the zero address.
854      * - `tokenId` token must exist and be owned by `from`.
855      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
856      *
857      * Emits a {Transfer} event.
858      */
859     function _safeTransfer(
860         address from,
861         address to,
862         uint256 tokenId,
863         bytes memory _data
864     ) internal virtual {
865         _transfer(from, to, tokenId);
866         require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
867     }
868 
869     /**
870      * @dev Returns whether `tokenId` exists.
871      *
872      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
873      *
874      * Tokens start existing when they are minted (`_mint`),
875      * and stop existing when they are burned (`_burn`).
876      */
877     function _exists(uint256 tokenId) internal view virtual returns (bool) {
878         return _owners[tokenId] != address(0);
879     }
880 
881     /**
882      * @dev Returns whether `spender` is allowed to manage `tokenId`.
883      *
884      * Requirements:
885      *
886      * - `tokenId` must exist.
887      */
888     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
889         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
890         address owner = ERC721.ownerOf(tokenId);
891         return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
892     }
893 
894     /**
895      * @dev Safely mints `tokenId` and transfers it to `to`.
896      *
897      * Requirements:
898      *
899      * - `tokenId` must not exist.
900      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
901      *
902      * Emits a {Transfer} event.
903      */
904     function _safeMint(address to, uint256 tokenId) internal virtual {
905         _safeMint(to, tokenId, "");
906     }
907 
908     /**
909      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
910      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
911      */
912     function _safeMint(
913         address to,
914         uint256 tokenId,
915         bytes memory _data
916     ) internal virtual {
917         _mint(to, tokenId);
918         require(
919             _checkOnERC721Received(address(0), to, tokenId, _data),
920             "ERC721: transfer to non ERC721Receiver implementer"
921         );
922     }
923 
924     /**
925      * @dev Mints `tokenId` and transfers it to `to`.
926      *
927      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
928      *
929      * Requirements:
930      *
931      * - `tokenId` must not exist.
932      * - `to` cannot be the zero address.
933      *
934      * Emits a {Transfer} event.
935      */
936     function _mint(address to, uint256 tokenId) internal virtual {
937         require(to != address(0), "ERC721: mint to the zero address");
938         require(!_exists(tokenId), "ERC721: token already minted");
939 
940         _beforeTokenTransfer(address(0), to, tokenId);
941 
942         _balances[to] += 1;
943         _owners[tokenId] = to;
944 
945         emit Transfer(address(0), to, tokenId);
946     }
947 
948     /**
949      * @dev Destroys `tokenId`.
950      * The approval is cleared when the token is burned.
951      *
952      * Requirements:
953      *
954      * - `tokenId` must exist.
955      *
956      * Emits a {Transfer} event.
957      */
958     function _burn(uint256 tokenId) internal virtual {
959         address owner = ERC721.ownerOf(tokenId);
960 
961         _beforeTokenTransfer(owner, address(0), tokenId);
962 
963         // Clear approvals
964         _approve(address(0), tokenId);
965 
966         _balances[owner] -= 1;
967         delete _owners[tokenId];
968 
969         emit Transfer(owner, address(0), tokenId);
970     }
971 
972     /**
973      * @dev Transfers `tokenId` from `from` to `to`.
974      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
975      *
976      * Requirements:
977      *
978      * - `to` cannot be the zero address.
979      * - `tokenId` token must be owned by `from`.
980      *
981      * Emits a {Transfer} event.
982      */
983     function _transfer(
984         address from,
985         address to,
986         uint256 tokenId
987     ) internal virtual {
988         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
989         require(to != address(0), "ERC721: transfer to the zero address");
990 
991         _beforeTokenTransfer(from, to, tokenId);
992 
993         // Clear approvals from the previous owner
994         _approve(address(0), tokenId);
995 
996         _balances[from] -= 1;
997         _balances[to] += 1;
998         _owners[tokenId] = to;
999 
1000         emit Transfer(from, to, tokenId);
1001     }
1002 
1003     /**
1004      * @dev Approve `to` to operate on `tokenId`
1005      *
1006      * Emits a {Approval} event.
1007      */
1008     function _approve(address to, uint256 tokenId) internal virtual {
1009         _tokenApprovals[tokenId] = to;
1010         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
1011     }
1012 
1013     /**
1014      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1015      * The call is not executed if the target address is not a contract.
1016      *
1017      * @param from address representing the previous owner of the given token ID
1018      * @param to target address that will receive the tokens
1019      * @param tokenId uint256 ID of the token to be transferred
1020      * @param _data bytes optional data to send along with the call
1021      * @return bool whether the call correctly returned the expected magic value
1022      */
1023     function _checkOnERC721Received(
1024         address from,
1025         address to,
1026         uint256 tokenId,
1027         bytes memory _data
1028     ) private returns (bool) {
1029         if (to.isContract()) {
1030             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
1031                 return retval == IERC721Receiver(to).onERC721Received.selector;
1032             } catch (bytes memory reason) {
1033                 if (reason.length == 0) {
1034                     revert("ERC721: transfer to non ERC721Receiver implementer");
1035                 } else {
1036                     assembly {
1037                         revert(add(32, reason), mload(reason))
1038                     }
1039                 }
1040             }
1041         } else {
1042             return true;
1043         }
1044     }
1045 
1046     /**
1047      * @dev Hook that is called before any token transfer. This includes minting
1048      * and burning.
1049      *
1050      * Calling conditions:
1051      *
1052      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1053      * transferred to `to`.
1054      * - When `from` is zero, `tokenId` will be minted for `to`.
1055      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1056      * - `from` and `to` are never both zero.
1057      *
1058      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1059      */
1060     function _beforeTokenTransfer(
1061         address from,
1062         address to,
1063         uint256 tokenId
1064     ) internal virtual {}
1065 }
1066 
1067 
1068 
1069 /**
1070  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
1071  * @dev See https://eips.ethereum.org/EIPS/eip-721
1072  */
1073 interface IERC721Enumerable is IERC721 {
1074     /**
1075      * @dev Returns the total amount of tokens stored by the contract.
1076      */
1077     function totalSupply() external view returns (uint256);
1078 
1079     /**
1080      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
1081      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
1082      */
1083     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
1084 
1085     /**
1086      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
1087      * Use along with {totalSupply} to enumerate all tokens.
1088      */
1089     function tokenByIndex(uint256 index) external view returns (uint256);
1090 }
1091 
1092 
1093 /**
1094  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
1095  * enumerability of all the token ids in the contract as well as all token ids owned by each
1096  * account.
1097  */
1098 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
1099     // Mapping from owner to list of owned token IDs
1100     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
1101 
1102     // Mapping from token ID to index of the owner tokens list
1103     mapping(uint256 => uint256) private _ownedTokensIndex;
1104 
1105     // Array with all token ids, used for enumeration
1106     uint256[] private _allTokens;
1107 
1108     // Mapping from token id to position in the allTokens array
1109     mapping(uint256 => uint256) private _allTokensIndex;
1110 
1111     /**
1112      * @dev See {IERC165-supportsInterface}.
1113      */
1114     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
1115         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
1116     }
1117 
1118     /**
1119      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1120      */
1121     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
1122         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
1123         return _ownedTokens[owner][index];
1124     }
1125 
1126     /**
1127      * @dev See {IERC721Enumerable-totalSupply}.
1128      */
1129     function totalSupply() public view virtual override returns (uint256) {
1130         return _allTokens.length;
1131     }
1132 
1133     /**
1134      * @dev See {IERC721Enumerable-tokenByIndex}.
1135      */
1136     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
1137         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
1138         return _allTokens[index];
1139     }
1140 
1141     /**
1142      * @dev Hook that is called before any token transfer. This includes minting
1143      * and burning.
1144      *
1145      * Calling conditions:
1146      *
1147      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1148      * transferred to `to`.
1149      * - When `from` is zero, `tokenId` will be minted for `to`.
1150      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1151      * - `from` cannot be the zero address.
1152      * - `to` cannot be the zero address.
1153      *
1154      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1155      */
1156     function _beforeTokenTransfer(
1157         address from,
1158         address to,
1159         uint256 tokenId
1160     ) internal virtual override {
1161         super._beforeTokenTransfer(from, to, tokenId);
1162 
1163         if (from == address(0)) {
1164             _addTokenToAllTokensEnumeration(tokenId);
1165         } else if (from != to) {
1166             _removeTokenFromOwnerEnumeration(from, tokenId);
1167         }
1168         if (to == address(0)) {
1169             _removeTokenFromAllTokensEnumeration(tokenId);
1170         } else if (to != from) {
1171             _addTokenToOwnerEnumeration(to, tokenId);
1172         }
1173     }
1174 
1175     /**
1176      * @dev Private function to add a token to this extension's ownership-tracking data structures.
1177      * @param to address representing the new owner of the given token ID
1178      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
1179      */
1180     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
1181         uint256 length = ERC721.balanceOf(to);
1182         _ownedTokens[to][length] = tokenId;
1183         _ownedTokensIndex[tokenId] = length;
1184     }
1185 
1186     /**
1187      * @dev Private function to add a token to this extension's token tracking data structures.
1188      * @param tokenId uint256 ID of the token to be added to the tokens list
1189      */
1190     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
1191         _allTokensIndex[tokenId] = _allTokens.length;
1192         _allTokens.push(tokenId);
1193     }
1194 
1195     /**
1196      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
1197      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
1198      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
1199      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
1200      * @param from address representing the previous owner of the given token ID
1201      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
1202      */
1203     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
1204         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
1205         // then delete the last slot (swap and pop).
1206 
1207         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
1208         uint256 tokenIndex = _ownedTokensIndex[tokenId];
1209 
1210         // When the token to delete is the last token, the swap operation is unnecessary
1211         if (tokenIndex != lastTokenIndex) {
1212             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
1213 
1214             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1215             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1216         }
1217 
1218         // This also deletes the contents at the last position of the array
1219         delete _ownedTokensIndex[tokenId];
1220         delete _ownedTokens[from][lastTokenIndex];
1221     }
1222 
1223     /**
1224      * @dev Private function to remove a token from this extension's token tracking data structures.
1225      * This has O(1) time complexity, but alters the order of the _allTokens array.
1226      * @param tokenId uint256 ID of the token to be removed from the tokens list
1227      */
1228     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
1229         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
1230         // then delete the last slot (swap and pop).
1231 
1232         uint256 lastTokenIndex = _allTokens.length - 1;
1233         uint256 tokenIndex = _allTokensIndex[tokenId];
1234 
1235         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
1236         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
1237         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
1238         uint256 lastTokenId = _allTokens[lastTokenIndex];
1239 
1240         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1241         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1242 
1243         // This also deletes the contents at the last position of the array
1244         delete _allTokensIndex[tokenId];
1245         _allTokens.pop();
1246     }
1247 }
1248 
1249 
1250 contract NTOuterIdentity is ERC721Enumerable, ReentrancyGuard, Ownable {
1251 
1252     uint256 maxTokens = 4500;
1253     uint256 costToReserve = 1 ether;
1254     uint256 timeToBurn = 60 minutes;
1255     uint256 earlyReservePeriod = 5 minutes;
1256     uint256 maxMints;
1257     uint256 beginBurn;
1258     uint256 beginReserve;
1259     uint256 mostBytesBurned;
1260     uint256 public totalMembersInBytesAuction;
1261     bool public saleActive;
1262     bool public whitelistActive;
1263     bool public burnActive;
1264     address outerIdentityMint;
1265     address bytesContract;
1266     address withdrawalAddress;
1267     address citizenContract;
1268     address identityContract;
1269     bytes32[] _rootHash;
1270     address[] public joinedBytesAuction;
1271 
1272      // Mapping for wallet addresses that have previously minted
1273     mapping(address => uint8) private _previousMinters;
1274 
1275     mapping(address => uint256) public bytesBurned;
1276 
1277     mapping(address => bool) public addressHasReserved;
1278 
1279     function setSaleActive() external onlyOwner
1280     {
1281         require(!saleActive, "Sale is already active");
1282         saleActive = true;
1283         beginReserve = block.timestamp;
1284     }
1285 
1286     function setWhitelistState() external onlyOwner
1287     {
1288         whitelistActive = !whitelistActive;
1289     }
1290 
1291     function setBurnState() external onlyOwner
1292     {
1293         burnActive = !burnActive;
1294     }
1295 
1296     function addRootHash(bytes32 _hash) external onlyOwner
1297     {
1298         _rootHash.push(_hash);
1299     }
1300 
1301     function setMaxMints(uint256 _value) external onlyOwner
1302     {
1303         maxMints = _value;
1304     }
1305 
1306     function setCitizenContract(address _address) external onlyOwner
1307     {
1308         citizenContract = _address;
1309     }
1310 
1311     function setIdentityContract(address _address) external onlyOwner
1312     {
1313         identityContract = _address;
1314     }
1315 
1316     function getMostBytesBurned() public view returns(uint256)
1317     {
1318         return mostBytesBurned;
1319     }
1320 
1321     function startBurn() external onlyOwner
1322     {
1323         require(!burnActive, "Burn already started");
1324         burnActive = true;
1325         beginBurn = block.timestamp;
1326     }
1327 
1328     function changeTimeToBurn(uint256 _time) external onlyOwner
1329     {
1330         require(burnActive, "Burn not active");
1331         timeToBurn = _time;
1332     }
1333     
1334     function getClass(uint256 tokenId) public view returns (string memory) {
1335         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1336         string memory output;
1337         
1338         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1339         output = dataContract.getClass(tokenId);
1340 
1341         return output;
1342     }
1343     
1344     function getRace(uint256 tokenId) public view returns (string memory) {
1345         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1346         string memory output;
1347         
1348         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1349         output = dataContract.getRace(tokenId);
1350 
1351         return output;
1352     }
1353 
1354     function getNose(uint256 tokenId) public view returns (string memory) {
1355         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1356         string memory output;
1357         
1358         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1359         output = dataContract.getNose(tokenId);
1360 
1361         return output;
1362     }
1363 
1364     function getHair(uint256 tokenId) public view returns (string memory) {
1365         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1366         string memory output;
1367         
1368         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1369         output = dataContract.getHair(tokenId);
1370 
1371         return output;
1372     }
1373 
1374     function getExpression(uint256 tokenId) public view returns (string memory) {
1375         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1376         string memory output;
1377         
1378         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1379         output = dataContract.getExpression(tokenId);
1380 
1381         return output;
1382     }
1383     
1384     function getStrength(uint256 tokenId) public view returns (string memory) {
1385         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1386         string memory output;
1387         
1388         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1389         output = dataContract.getStrength(tokenId);
1390 
1391         return output;
1392     }
1393     
1394     function getAttractiveness(uint256 tokenId) public view returns (string memory) {
1395         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1396         string memory output;
1397         
1398         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1399         output = dataContract.getAttractiveness(tokenId);
1400 
1401         return output;
1402     }
1403     
1404     function getTechSkill(uint256 tokenId) public view returns (string memory) {
1405         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1406         string memory output;
1407 
1408         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1409         output = dataContract.getTechSkill(tokenId);
1410 
1411         return output;
1412     }
1413     
1414     function getCool(uint256 tokenId) public view returns (string memory) {
1415         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1416         string memory output;
1417 
1418         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1419         output = dataContract.getCool(tokenId);
1420 
1421         return output;
1422     }
1423 
1424     function getEyes(uint256 tokenId) public view returns (string memory) {
1425         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1426         string memory output;
1427 
1428         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1429         output = dataContract.getEyes(tokenId);
1430 
1431         return output;
1432     }
1433 
1434     function getAbility(uint256 tokenId) public view returns (string memory) {
1435         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1436         string memory output;
1437         
1438         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1439         output = dataContract.getAbility(tokenId);
1440 
1441         return output;
1442     }
1443 
1444     function tokenURI(uint256 tokenId) override public view returns (string memory) {
1445         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1446         
1447         string memory output;
1448 
1449         NTOuterIdentity dataContract = NTOuterIdentity(outerIdentityMint);
1450         output = dataContract.tokenURI(tokenId);
1451 
1452         return output;
1453     }
1454 
1455     function timeUntilBytesAuctionEnds() external view returns(uint256)
1456     {
1457         require(burnActive, "Burning is not active");
1458         require(block.timestamp < (beginBurn + timeToBurn), "Burning has ended");
1459         return (beginBurn + timeToBurn) - block.timestamp;
1460     }
1461 
1462     function timeUntilPublicMint() external view returns(uint256)
1463     {
1464         require(saleActive, "Private minting has not started");
1465         require(block.timestamp < (beginReserve + earlyReservePeriod), "Public minting is open");
1466         return (beginReserve + earlyReservePeriod) - block.timestamp;
1467     }
1468 
1469     function reserveIdentity() public nonReentrant payable {
1470         require(saleActive, "Reserving is currently closed");
1471         require(block.timestamp > (beginReserve + earlyReservePeriod) || validateCitizen(), "You cannot reserve yet");
1472         require(totalMembersInBytesAuction < maxTokens, "All tokens have been reserved");
1473         require(!addressHasReserved[_msgSender()], "This wallet has already reserved");
1474         require(msg.value == costToReserve, "Incorrect reserve payment");
1475 
1476         addressHasReserved[_msgSender()] = true;
1477 
1478         joinedBytesAuction.push(_msgSender());
1479 
1480         totalMembersInBytesAuction++;
1481     }
1482 
1483     function validateCitizen() internal view returns(bool) {
1484         ERC721 citizenData = ERC721(citizenContract);
1485         ERC721 identityData = ERC721(identityContract);
1486         if(citizenData.balanceOf(_msgSender()) > 0 || identityData.balanceOf(_msgSender()) > 0)
1487         {
1488             return true;
1489         }
1490         return false;
1491     }
1492 
1493     function burnBytes(uint256 amount) public nonReentrant
1494     {
1495         require(burnActive, "Burning is not currently active");
1496         require(block.timestamp < (timeToBurn + beginBurn), "Burn auction has ended");
1497         require(addressHasReserved[_msgSender()], "You did not enter the auction");
1498         uint256 burnAmount = amount * 10 ** 18;
1499         IByteContract iBytes = IByteContract(bytesContract);
1500         iBytes.burn(_msgSender(), burnAmount);
1501         uint256 currentBurned = bytesBurned[_msgSender()] + amount;
1502         bytesBurned[_msgSender()] = currentBurned;
1503 
1504         if(currentBurned > mostBytesBurned)
1505         {
1506             mostBytesBurned = currentBurned;
1507         }
1508     }
1509 
1510     function whitelistClaim(uint256 tokenId, uint256 spotInWhitelist, bytes32[] memory proof) public nonReentrant {
1511         require(whitelistActive, "The whitelist is not active yet");
1512         require(!_exists(tokenId), "Token ID already exists");
1513         require(whitelistValidated(_msgSender(), spotInWhitelist, tokenId, proof), "You're not on the whitelist");
1514         require(_previousMinters[_msgSender()] < 1, "You've already minted");
1515 
1516         //Set the previousMinter value to 1 for this address as it will now mint
1517         _previousMinters[_msgSender()] = 1;
1518 
1519         _safeMint(_msgSender(), tokenId);
1520     }
1521     
1522     function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {
1523         require(!_exists(tokenId), "Token ID already exists");
1524         _safeMint(owner(), tokenId);
1525     }
1526 
1527 
1528     function whitelistValidated(address wallet, uint256 index, uint256 spotInLeaderboard, bytes32[] memory proof) internal view returns (bool) {
1529 
1530         // Compute the merkle root
1531         bytes32 node = keccak256(abi.encodePacked(index, wallet, spotInLeaderboard));
1532         uint256 path = index;
1533         for (uint16 i = 0; i < proof.length; i++) {
1534             if ((path & 0x01) == 1) {
1535                 node = keccak256(abi.encodePacked(proof[i], node));
1536             } else {
1537                 node = keccak256(abi.encodePacked(node, proof[i]));
1538             }
1539             path /= 2;
1540         }
1541 
1542          // Check the merkle proof against the root hash array
1543         for(uint i = 0; i < _rootHash.length; i++)
1544         {
1545             if (node == _rootHash[i])
1546             {
1547                 return true;
1548             }
1549         }
1550 
1551         return false;
1552     }
1553 
1554     function setOuterIdentityMintContract(address contractAddress) public onlyOwner {
1555         outerIdentityMint = contractAddress;
1556     }    
1557 
1558     function setWithdrawalAddress(address _address) external onlyOwner
1559     {
1560         withdrawalAddress = _address;
1561     }
1562 
1563     function withdraw() external onlyOwner
1564     {
1565         require(withdrawalAddress != address(0), "Withdrawal address must be set");
1566         payable(withdrawalAddress).transfer(address(this).balance);
1567     }
1568     
1569     function toString(uint256 value) internal pure returns (string memory) {
1570     // Inspired by OraclizeAPI's implementation - MIT license
1571     // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
1572 
1573         if (value == 0) {
1574             return "0";
1575         }
1576         uint256 temp = value;
1577         uint256 digits;
1578         while (temp != 0) {
1579             digits++;
1580             temp /= 10;
1581         }
1582         bytes memory buffer = new bytes(digits);
1583         while (value != 0) {
1584             digits -= 1;
1585             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
1586             value /= 10;
1587         }
1588         return string(buffer);
1589     }
1590     
1591     constructor() ERC721("Neo Tokyo: Outer Identities", "NEOTOI") Ownable() {
1592 
1593         maxMints = 1;
1594         outerIdentityMint = 0xB0605041b92e66E8834675Ff63AEa0253BdCBC3c;
1595         identityContract = 0x86357A19E5537A8Fba9A004E555713BC943a66C0;
1596         citizenContract = 0xb668beB1Fa440F6cF2Da0399f8C28caB993Bdd65;
1597         bytesContract = 0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95;
1598         withdrawalAddress = 0xb616945250CCEF6135006a869D0c7f5b1406854C;
1599     }
1600 }