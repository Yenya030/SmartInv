1 {{
2   "language": "Solidity",
3   "sources": {
4     "StabilityPool.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"SafeERC20.sol\";\nimport \"IERC20.sol\";\nimport \"PrismaOwnable.sol\";\nimport \"SystemStart.sol\";\nimport \"PrismaMath.sol\";\nimport \"IDebtToken.sol\";\nimport \"IVault.sol\";\n\n/**\n    @title Prisma Stability Pool\n    @notice Based on Liquity's `StabilityPool`\n            https://github.com/liquity/dev/blob/main/packages/contracts/contracts/StabilityPool.sol\n\n            Prisma's implementation is modified to support multiple collaterals. Deposits into\n            the stability pool may be used to liquidate any supported collateral type.\n */\ncontract StabilityPool is PrismaOwnable, SystemStart {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant DECIMAL_PRECISION = 1e18;\n    uint128 public constant SUNSET_DURATION = 180 days;\n    uint256 constant REWARD_DURATION = 1 weeks;\n\n    uint256 public constant emissionId = 0;\n\n    IDebtToken public immutable debtToken;\n    IPrismaVault public immutable vault;\n    address public immutable factory;\n    address public immutable liquidationManager;\n\n    uint128 public rewardRate;\n    uint32 public lastUpdate;\n    uint32 public periodFinish;\n\n    mapping(IERC20 collateral => uint256 index) public indexByCollateral;\n    IERC20[] public collateralTokens;\n\n    // Tracker for Debt held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\n    uint256 internal totalDebtTokenDeposits;\n\n    mapping(address => AccountDeposit) public accountDeposits; // depositor address -> initial deposit\n    mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\n\n    // index values are mapped against the values within `collateralTokens`\n    mapping(address => uint256[256]) public depositSums; // depositor address -> sums\n\n    mapping(address depositor => uint80[256] gains) public collateralGainsByDepositor;\n\n    mapping(address depositor => uint256 rewards) private storedPendingReward;\n\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\n     * after a series of liquidations have occurred, each of which cancel some debt with the deposit.\n     *\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\n     */\n    uint256 public P = DECIMAL_PRECISION;\n\n    uint256 public constant SCALE_FACTOR = 1e9;\n\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\n    uint128 public currentScale;\n\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\n    uint128 public currentEpoch;\n\n    /* collateral Gain sum 'S': During its lifetime, each deposit d_t earns a collateral gain of ( d_t * [S - S_t] )/P_t, where S_t\n     * is the depositor's snapshot of S taken at the time t when the deposit was made.\n     *\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\n     *\n     * - The inner mapping records the sum S at different scales\n     * - The outer mapping records the (scale => sum) mappings, for different epochs.\n     */\n\n    // index values are mapped against the values within `collateralTokens`\n    mapping(uint128 => mapping(uint128 => uint256[256])) public epochToScaleToSums;\n\n    /*\n     * Similarly, the sum 'G' is used to calculate Prisma gains. During it's lifetime, each deposit d_t earns a Prisma gain of\n     *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\n     *\n     *  Prisma reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\n     *  In each case, the Prisma reward is issued (i.e. G is updated), before other state changes are made.\n     */\n    mapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToG;\n\n    // Error tracker for the error correction in the Prisma issuance calculation\n    uint256 public lastPrismaError;\n    // Error trackers for the error correction in the offset calculation\n    uint256 public lastCollateralError_Offset;\n    uint256 public lastDebtLossError_Offset;\n\n    mapping(uint16 => SunsetIndex) _sunsetIndexes;\n    Queue queue;\n\n    struct AccountDeposit {\n        uint128 amount;\n        uint128 timestamp; // timestamp of the last deposit\n    }\n\n    struct Snapshots {\n        uint256 P;\n        uint256 G;\n        uint128 scale;\n        uint128 epoch;\n    }\n\n    struct SunsetIndex {\n        uint128 idx;\n        uint128 expiry;\n    }\n    struct Queue {\n        uint16 firstSunsetIndexKey;\n        uint16 nextSunsetIndexKey;\n    }\n\n    event StabilityPoolDebtBalanceUpdated(uint256 _newBalance);\n\n    event P_Updated(uint256 _P);\n    event S_Updated(uint256 idx, uint256 _S, uint128 _epoch, uint128 _scale);\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\n    event EpochUpdated(uint128 _currentEpoch);\n    event ScaleUpdated(uint128 _currentScale);\n\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\n\n    event CollateralGainWithdrawn(address indexed _depositor, uint256[] _collateral);\n    event CollateralOverwritten(IERC20 oldCollateral, IERC20 newCollateral);\n\n    event RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\n\n    constructor(\n        address _prismaCore,\n        IDebtToken _debtTokenAddress,\n        IPrismaVault _vault,\n        address _factory,\n        address _liquidationManager\n    ) PrismaOwnable(_prismaCore) SystemStart(_prismaCore) {\n        debtToken = _debtTokenAddress;\n        vault = _vault;\n        factory = _factory;\n        liquidationManager = _liquidationManager;\n        periodFinish = uint32(block.timestamp - 1);\n    }\n\n    function enableCollateral(IERC20 _collateral) external {\n        require(msg.sender == factory, \"Not factory\");\n        uint256 length = collateralTokens.length;\n        bool collateralEnabled;\n        for (uint256 i = 0; i < length; i++) {\n            if (collateralTokens[i] == _collateral) {\n                collateralEnabled = true;\n                break;\n            }\n        }\n        if (!collateralEnabled) {\n            Queue memory queueCached = queue;\n            if (queueCached.nextSunsetIndexKey > queueCached.firstSunsetIndexKey) {\n                SunsetIndex memory sIdx = _sunsetIndexes[queueCached.firstSunsetIndexKey];\n                if (sIdx.expiry < block.timestamp) {\n                    delete _sunsetIndexes[queue.firstSunsetIndexKey++];\n                    _overwriteCollateral(_collateral, sIdx.idx);\n                    return;\n                }\n            }\n            collateralTokens.push(_collateral);\n            indexByCollateral[_collateral] = collateralTokens.length;\n        } else {\n            // revert if the factory is trying to deploy a new TM with a sunset collateral\n            require(indexByCollateral[_collateral] > 0, \"Collateral is sunsetting\");\n        }\n    }\n\n    function _overwriteCollateral(IERC20 _newCollateral, uint256 idx) internal {\n        require(indexByCollateral[_newCollateral] == 0, \"Collateral must be sunset\");\n        uint256 length = collateralTokens.length;\n        require(idx < length, \"Index too large\");\n        uint256 externalLoopEnd = currentEpoch;\n        uint256 internalLoopEnd = currentScale;\n        for (uint128 i; i <= externalLoopEnd; ) {\n            for (uint128 j; j <= internalLoopEnd; ) {\n                epochToScaleToSums[i][j][idx] = 0;\n                unchecked {\n                    ++j;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        indexByCollateral[_newCollateral] = idx + 1;\n        emit CollateralOverwritten(collateralTokens[idx], _newCollateral);\n        collateralTokens[idx] = _newCollateral;\n    }\n\n    /**\n     * @notice Starts sunsetting a collateral\n     *         During sunsetting liquidated collateral handoff to the SP will revert\n        @dev IMPORTANT: When sunsetting a collateral, `TroveManager.startSunset`\n                        should be called on all TM linked to that collateral\n        @param collateral Collateral to sunset\n\n     */\n    function startCollateralSunset(IERC20 collateral) external onlyOwner {\n        require(indexByCollateral[collateral] > 0, \"Collateral already sunsetting\");\n        _sunsetIndexes[queue.nextSunsetIndexKey++] = SunsetIndex(\n            uint128(indexByCollateral[collateral] - 1),\n            uint128(block.timestamp + SUNSET_DURATION)\n        );\n        delete indexByCollateral[collateral]; //This will prevent calls to the SP in case of liquidations\n    }\n\n    function getTotalDebtTokenDeposits() external view returns (uint256) {\n        return totalDebtTokenDeposits;\n    }\n\n    // --- External Depositor Functions ---\n\n    /*  provideToSP():\n     *\n     * - Triggers a Prisma issuance, based on time passed since the last issuance. The Prisma issuance is shared between *all* depositors and front ends\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\n     * - Sends depositor's accumulated gains (Prisma, collateral) to depositor\n     * - Sends the tagged front end's accumulated Prisma gains to the tagged front end\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\n     */\n    function provideToSP(uint256 _amount) external {\n        require(!PRISMA_CORE.paused(), \"Deposits are paused\");\n        require(_amount > 0, \"StabilityPool: Amount must be non-zero\");\n\n        _triggerRewardIssuance();\n\n        _accrueDepositorCollateralGain(msg.sender);\n\n        uint256 compoundedDebtDeposit = getCompoundedDebtDeposit(msg.sender);\n\n        _accrueRewards(msg.sender);\n\n        debtToken.sendToSP(msg.sender, _amount);\n        uint256 newTotalDebtTokenDeposits = totalDebtTokenDeposits + _amount;\n        totalDebtTokenDeposits = newTotalDebtTokenDeposits;\n        emit StabilityPoolDebtBalanceUpdated(newTotalDebtTokenDeposits);\n\n        uint256 newDeposit = compoundedDebtDeposit + _amount;\n        accountDeposits[msg.sender] = AccountDeposit({\n            amount: uint128(newDeposit),\n            timestamp: uint128(block.timestamp)\n        });\n\n        _updateSnapshots(msg.sender, newDeposit);\n        emit UserDepositChanged(msg.sender, newDeposit);\n    }\n\n    /*  withdrawFromSP():\n     *\n     * - Triggers a Prisma issuance, based on time passed since the last issuance. The Prisma issuance is shared between *all* depositors and front ends\n     * - Removes the deposit's front end tag if it is a full withdrawal\n     * - Sends all depositor's accumulated gains (Prisma, collateral) to depositor\n     * - Sends the tagged front end's accumulated Prisma gains to the tagged front end\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\n     *\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\n     */\n    function withdrawFromSP(uint256 _amount) external {\n        uint256 initialDeposit = accountDeposits[msg.sender].amount;\n        uint128 depositTimestamp = accountDeposits[msg.sender].timestamp;\n        require(initialDeposit > 0, \"StabilityPool: User must have a non-zero deposit\");\n        require(depositTimestamp < block.timestamp, \"!Deposit and withdraw same block\");\n\n        _triggerRewardIssuance();\n\n        _accrueDepositorCollateralGain(msg.sender);\n\n        uint256 compoundedDebtDeposit = getCompoundedDebtDeposit(msg.sender);\n        uint256 debtToWithdraw = PrismaMath._min(_amount, compoundedDebtDeposit);\n\n        _accrueRewards(msg.sender);\n\n        if (debtToWithdraw > 0) {\n            debtToken.returnFromPool(address(this), msg.sender, debtToWithdraw);\n            _decreaseDebt(debtToWithdraw);\n        }\n\n        // Update deposit\n        uint256 newDeposit = compoundedDebtDeposit - debtToWithdraw;\n        accountDeposits[msg.sender] = AccountDeposit({ amount: uint128(newDeposit), timestamp: depositTimestamp });\n\n        _updateSnapshots(msg.sender, newDeposit);\n        emit UserDepositChanged(msg.sender, newDeposit);\n    }\n\n    // --- Prisma issuance functions ---\n\n    function _triggerRewardIssuance() internal {\n        _updateG(_vestedEmissions());\n\n        uint256 _periodFinish = periodFinish;\n        uint256 lastUpdateWeek = (_periodFinish - startTime) / 1 weeks;\n        // If the last claim was a week earlier we reclaim\n        if (getWeek() >= lastUpdateWeek) {\n            uint256 amount = vault.allocateNewEmissions(emissionId);\n            if (amount > 0) {\n                // If the previous period is not finished we combine new and pending old rewards\n                if (block.timestamp < _periodFinish) {\n                    uint256 remaining = _periodFinish - block.timestamp;\n                    amount += remaining * rewardRate;\n                }\n                rewardRate = uint128(amount / REWARD_DURATION);\n                periodFinish = uint32(block.timestamp + REWARD_DURATION);\n            }\n        }\n        lastUpdate = uint32(block.timestamp);\n    }\n\n    function _vestedEmissions() internal view returns (uint256) {\n        uint256 updated = periodFinish;\n        // Period is not ended we max at current timestamp\n        if (updated > block.timestamp) updated = block.timestamp;\n        // if the last update was after the current update time it means all rewards have been vested already\n        uint256 lastUpdateCached = lastUpdate;\n        if (lastUpdateCached >= updated) return 0; //Nothing to claim\n        uint256 duration = updated - lastUpdateCached;\n        return duration * rewardRate;\n    }\n\n    function _updateG(uint256 _prismaIssuance) internal {\n        uint256 totalDebt = totalDebtTokenDeposits; // cached to save an SLOAD\n        /*\n         * When total deposits is 0, G is not updated. In this case, the Prisma issued can not be obtained by later\n         * depositors - it is missed out on, and remains in the balanceof the Treasury contract.\n         *\n         */\n        if (totalDebt == 0 || _prismaIssuance == 0) {\n            return;\n        }\n\n        uint256 prismaPerUnitStaked;\n        prismaPerUnitStaked = _computePrismaPerUnitStaked(_prismaIssuance, totalDebt);\n        uint128 currentEpochCached = currentEpoch;\n        uint128 currentScaleCached = currentScale;\n        uint256 marginalPrismaGain = prismaPerUnitStaked * P;\n        uint256 newG = epochToScaleToG[currentEpochCached][currentScaleCached] + marginalPrismaGain;\n        epochToScaleToG[currentEpochCached][currentScaleCached] = newG;\n\n        emit G_Updated(newG, currentEpochCached, currentScaleCached);\n    }\n\n    function _computePrismaPerUnitStaked(\n        uint256 _prismaIssuance,\n        uint256 _totalDebtTokenDeposits\n    ) internal returns (uint256) {\n        /*\n         * Calculate the Prisma-per-unit staked.  Division uses a \"feedback\" error correction, to keep the\n         * cumulative error low in the running total G:\n         *\n         * 1) Form a numerator which compensates for the floor division error that occurred the last time this\n         * function was called.\n         * 2) Calculate \"per-unit-staked\" ratio.\n         * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\n         * 4) Store this error for use in the next correction when this function is called.\n         * 5) Note: static analysis tools complain about this \"division before multiplication\", however, it is intended.\n         */\n        uint256 prismaNumerator = (_prismaIssuance * DECIMAL_PRECISION) + lastPrismaError;\n\n        uint256 prismaPerUnitStaked = prismaNumerator / _totalDebtTokenDeposits;\n        lastPrismaError = prismaNumerator - (prismaPerUnitStaked * _totalDebtTokenDeposits);\n\n        return prismaPerUnitStaked;\n    }\n\n    // --- Liquidation functions ---\n\n    /*\n     * Cancels out the specified debt against the Debt contained in the Stability Pool (as far as possible)\n     */\n    function offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) external virtual {\n        _offset(collateral, _debtToOffset, _collToAdd);\n    }\n\n    function _offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) internal {\n        require(msg.sender == liquidationManager, \"StabilityPool: Caller is not Liquidation Manager\");\n        uint256 idx = indexByCollateral[collateral];\n        idx -= 1;\n\n        uint256 totalDebt = totalDebtTokenDeposits; // cached to save an SLOAD\n        if (totalDebt == 0 || _debtToOffset == 0) {\n            return;\n        }\n\n        _triggerRewardIssuance();\n\n        (uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) = _computeRewardsPerUnitStaked(\n            _collToAdd,\n            _debtToOffset,\n            totalDebt\n        );\n\n        _updateRewardSumAndProduct(collateralGainPerUnitStaked, debtLossPerUnitStaked, idx); // updates S and P\n\n        // Cancel the liquidated Debt debt with the Debt in the stability pool\n        _decreaseDebt(_debtToOffset);\n    }\n\n    // --- Offset helper functions ---\n\n    function _computeRewardsPerUnitStaked(\n        uint256 _collToAdd,\n        uint256 _debtToOffset,\n        uint256 _totalDebtTokenDeposits\n    ) internal returns (uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) {\n        /*\n         * Compute the Debt and collateral rewards. Uses a \"feedback\" error correction, to keep\n         * the cumulative error in the P and S state variables low:\n         *\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\n         * function was called.\n         * 2) Calculate \"per-unit-staked\" ratios.\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\n         * 4) Store these errors for use in the next correction when this function is called.\n         * 5) Note: static analysis tools complain about this \"division before multiplication\", however, it is intended.\n         */\n        uint256 collateralNumerator = (_collToAdd * DECIMAL_PRECISION) + lastCollateralError_Offset;\n\n        if (_debtToOffset == _totalDebtTokenDeposits) {\n            debtLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\n            lastDebtLossError_Offset = 0;\n        } else {\n            uint256 debtLossNumerator = (_debtToOffset * DECIMAL_PRECISION) - lastDebtLossError_Offset;\n            /*\n             * Add 1 to make error in quotient positive. We want \"slightly too much\" Debt loss,\n             * which ensures the error in any given compoundedDebtDeposit favors the Stability Pool.\n             */\n            debtLossPerUnitStaked = (debtLossNumerator / _totalDebtTokenDeposits) + 1;\n            lastDebtLossError_Offset = (debtLossPerUnitStaked * _totalDebtTokenDeposits) - debtLossNumerator;\n        }\n\n        collateralGainPerUnitStaked = collateralNumerator / _totalDebtTokenDeposits;\n        lastCollateralError_Offset = collateralNumerator - (collateralGainPerUnitStaked * _totalDebtTokenDeposits);\n\n        return (collateralGainPerUnitStaked, debtLossPerUnitStaked);\n    }\n\n    // Update the Stability Pool reward sum S and product P\n    function _updateRewardSumAndProduct(\n        uint256 _collateralGainPerUnitStaked,\n        uint256 _debtLossPerUnitStaked,\n        uint256 idx\n    ) internal {\n        uint256 currentP = P;\n        uint256 newP;\n\n        /*\n         * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool Debt in the liquidation.\n         * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - DebtLossPerUnitStaked)\n         */\n        uint256 newProductFactor = uint256(DECIMAL_PRECISION) - _debtLossPerUnitStaked;\n\n        uint128 currentScaleCached = currentScale;\n        uint128 currentEpochCached = currentEpoch;\n        uint256 currentS = epochToScaleToSums[currentEpochCached][currentScaleCached][idx];\n\n        /*\n         * Calculate the new S first, before we update P.\n         * The collateral gain for any given depositor from a liquidation depends on the value of their deposit\n         * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\n         *\n         * Since S corresponds to collateral gain, and P to deposit loss, we update S first.\n         */\n        uint256 marginalCollateralGain = _collateralGainPerUnitStaked * currentP;\n        uint256 newS = currentS + marginalCollateralGain;\n        epochToScaleToSums[currentEpochCached][currentScaleCached][idx] = newS;\n        emit S_Updated(idx, newS, currentEpochCached, currentScaleCached);\n\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\n        if (newProductFactor == 0) {\n            currentEpoch = currentEpochCached + 1;\n            emit EpochUpdated(currentEpoch);\n            currentScale = 0;\n            emit ScaleUpdated(currentScale);\n            newP = DECIMAL_PRECISION;\n\n            // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\n        } else if ((currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR) {\n            newP = (currentP * newProductFactor * SCALE_FACTOR) / DECIMAL_PRECISION;\n            currentScale = currentScaleCached + 1;\n            emit ScaleUpdated(currentScale);\n        } else {\n            newP = (currentP * newProductFactor) / DECIMAL_PRECISION;\n        }\n\n        require(newP > 0, \"NewP\");\n        P = newP;\n        emit P_Updated(newP);\n    }\n\n    function _decreaseDebt(uint256 _amount) internal {\n        uint256 newTotalDebtTokenDeposits = totalDebtTokenDeposits - _amount;\n        totalDebtTokenDeposits = newTotalDebtTokenDeposits;\n        emit StabilityPoolDebtBalanceUpdated(newTotalDebtTokenDeposits);\n    }\n\n    // --- Reward calculator functions for depositor and front end ---\n\n    /* Calculates the collateral gain earned by the deposit since its last snapshots were taken.\n     * Given by the formula:  E = d0 * (S - S(0))/P(0)\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\n     * d0 is the last recorded deposit value.\n     */\n    function getDepositorCollateralGain(address _depositor) external view returns (uint256[] memory collateralGains) {\n        collateralGains = new uint256[](collateralTokens.length);\n\n        uint256 P_Snapshot = depositSnapshots[_depositor].P;\n        if (P_Snapshot == 0) return collateralGains;\n        uint80[256] storage depositorGains = collateralGainsByDepositor[_depositor];\n        uint256 initialDeposit = accountDeposits[_depositor].amount;\n        uint128 epochSnapshot = depositSnapshots[_depositor].epoch;\n        uint128 scaleSnapshot = depositSnapshots[_depositor].scale;\n        uint256[256] storage sums = epochToScaleToSums[epochSnapshot][scaleSnapshot];\n        uint256[256] storage nextSums = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];\n        uint256[256] storage depSums = depositSums[_depositor];\n\n        for (uint256 i = 0; i < collateralGains.length; i++) {\n            collateralGains[i] = depositorGains[i];\n            if (sums[i] == 0) continue; // Collateral was overwritten or not gains\n            uint256 firstPortion = sums[i] - depSums[i];\n            uint256 secondPortion = nextSums[i] / SCALE_FACTOR;\n            collateralGains[i] += (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\n        }\n        return collateralGains;\n    }\n\n    function _accrueDepositorCollateralGain(address _depositor) private returns (bool hasGains) {\n        uint80[256] storage depositorGains = collateralGainsByDepositor[_depositor];\n        uint256 collaterals = collateralTokens.length;\n        uint256 initialDeposit = accountDeposits[_depositor].amount;\n        hasGains = false;\n        if (initialDeposit == 0) {\n            return hasGains;\n        }\n\n        uint128 epochSnapshot = depositSnapshots[_depositor].epoch;\n        uint128 scaleSnapshot = depositSnapshots[_depositor].scale;\n        uint256 P_Snapshot = depositSnapshots[_depositor].P;\n\n        uint256[256] storage sums = epochToScaleToSums[epochSnapshot][scaleSnapshot];\n        uint256[256] storage nextSums = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];\n        uint256[256] storage depSums = depositSums[_depositor];\n\n        for (uint256 i = 0; i < collaterals; i++) {\n            if (sums[i] == 0) continue; // Collateral was overwritten or not gains\n            hasGains = true;\n            uint256 firstPortion = sums[i] - depSums[i];\n            uint256 secondPortion = nextSums[i] / SCALE_FACTOR;\n            depositorGains[i] += uint80(\n                (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION\n            );\n        }\n        return (hasGains);\n    }\n\n    /*\n     * Calculate the Prisma gain earned by a deposit since its last snapshots were taken.\n     * Given by the formula:  Prisma = d0 * (G - G(0))/P(0)\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\n     * d0 is the last recorded deposit value.\n     */\n    function claimableReward(address _depositor) external view returns (uint256) {\n        uint256 totalDebt = totalDebtTokenDeposits;\n        uint256 initialDeposit = accountDeposits[_depositor].amount;\n\n        if (totalDebt == 0 || initialDeposit == 0) {\n            return 0;\n        }\n        uint256 prismaNumerator = (_vestedEmissions() * DECIMAL_PRECISION) + lastPrismaError;\n        uint256 prismaPerUnitStaked = prismaNumerator / totalDebt;\n        uint256 marginalPrismaGain = prismaPerUnitStaked * P;\n\n        Snapshots memory snapshots = depositSnapshots[_depositor];\n        uint128 epochSnapshot = snapshots.epoch;\n        uint128 scaleSnapshot = snapshots.scale;\n        uint256 firstPortion;\n        uint256 secondPortion;\n        if (scaleSnapshot == currentScale) {\n            firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - snapshots.G + marginalPrismaGain;\n            secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot + 1] / SCALE_FACTOR;\n        } else {\n            firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - snapshots.G;\n            secondPortion = (epochToScaleToG[epochSnapshot][scaleSnapshot + 1] + marginalPrismaGain) / SCALE_FACTOR;\n        }\n\n        return (initialDeposit * (firstPortion + secondPortion)) / snapshots.P / DECIMAL_PRECISION;\n    }\n\n    function _claimableReward(address _depositor) private view returns (uint256) {\n        uint256 initialDeposit = accountDeposits[_depositor].amount;\n        if (initialDeposit == 0) {\n            return 0;\n        }\n\n        Snapshots memory snapshots = depositSnapshots[_depositor];\n\n        return _getPrismaGainFromSnapshots(initialDeposit, snapshots);\n    }\n\n    function _getPrismaGainFromSnapshots(\n        uint256 initialStake,\n        Snapshots memory snapshots\n    ) internal view returns (uint256) {\n        /*\n         * Grab the sum 'G' from the epoch at which the stake was made. The Prisma gain may span up to one scale change.\n         * If it does, the second portion of the Prisma gain is scaled by 1e9.\n         * If the gain spans no scale change, the second portion will be 0.\n         */\n        uint128 epochSnapshot = snapshots.epoch;\n        uint128 scaleSnapshot = snapshots.scale;\n        uint256 G_Snapshot = snapshots.G;\n        uint256 P_Snapshot = snapshots.P;\n\n        uint256 firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - G_Snapshot;\n        uint256 secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot + 1] / SCALE_FACTOR;\n\n        uint256 prismaGain = (initialStake * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\n\n        return prismaGain;\n    }\n\n    // --- Compounded deposit and compounded front end stake ---\n\n    /*\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\n     */\n    function getCompoundedDebtDeposit(address _depositor) public view returns (uint256) {\n        uint256 initialDeposit = accountDeposits[_depositor].amount;\n        if (initialDeposit == 0) {\n            return 0;\n        }\n\n        Snapshots memory snapshots = depositSnapshots[_depositor];\n\n        uint256 compoundedDeposit = _getCompoundedStakeFromSnapshots(initialDeposit, snapshots);\n        return compoundedDeposit;\n    }\n\n    // Internal function, used to calculcate compounded deposits and compounded front end stakes.\n    function _getCompoundedStakeFromSnapshots(\n        uint256 initialStake,\n        Snapshots memory snapshots\n    ) internal view returns (uint256) {\n        uint256 snapshot_P = snapshots.P;\n        uint128 scaleSnapshot = snapshots.scale;\n        uint128 epochSnapshot = snapshots.epoch;\n\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\n        if (epochSnapshot < currentEpoch) {\n            return 0;\n        }\n\n        uint256 compoundedStake;\n        uint128 scaleDiff = currentScale - scaleSnapshot;\n\n        /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\n         * account for it. If more than one scale change was made, then the stake has decreased by a factor of\n         * at least 1e-9 -- so return 0.\n         */\n        if (scaleDiff == 0) {\n            compoundedStake = (initialStake * P) / snapshot_P;\n        } else if (scaleDiff == 1) {\n            compoundedStake = (initialStake * P) / snapshot_P / SCALE_FACTOR;\n        } else {\n            // if scaleDiff >= 2\n            compoundedStake = 0;\n        }\n\n        /*\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\n         *\n         * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\n         * corrections should ensure the error in P \"favors the Pool\", i.e. any given compounded deposit should slightly less\n         * than it's theoretical value.\n         *\n         * Thus it's unclear whether this line is still really needed.\n         */\n        if (compoundedStake < initialStake / 1e9) {\n            return 0;\n        }\n\n        return compoundedStake;\n    }\n\n    // --- Sender functions for Debt deposit, collateral gains and Prisma gains ---\n    function claimCollateralGains(address recipient, uint256[] calldata collateralIndexes) external virtual {\n        _claimCollateralGains(recipient, collateralIndexes);\n    }\n\n    function _claimCollateralGains(address recipient, uint256[] calldata collateralIndexes) internal {\n        uint256 loopEnd = collateralIndexes.length;\n        uint256[] memory collateralGains = new uint256[](collateralTokens.length);\n\n        uint80[256] storage depositorGains = collateralGainsByDepositor[msg.sender];\n        for (uint256 i; i < loopEnd; ) {\n            uint256 collateralIndex = collateralIndexes[i];\n            uint256 gains = depositorGains[collateralIndex];\n            if (gains > 0) {\n                collateralGains[collateralIndex] = gains;\n                depositorGains[collateralIndex] = 0;\n                collateralTokens[collateralIndex].safeTransfer(recipient, gains);\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        emit CollateralGainWithdrawn(msg.sender, collateralGains);\n    }\n\n    // --- Stability Pool Deposit Functionality ---\n\n    function _updateSnapshots(address _depositor, uint256 _newValue) internal {\n        uint256 length;\n        if (_newValue == 0) {\n            delete depositSnapshots[_depositor];\n\n            length = collateralTokens.length;\n            for (uint256 i = 0; i < length; i++) {\n                depositSums[_depositor][i] = 0;\n            }\n            emit DepositSnapshotUpdated(_depositor, 0, 0);\n            return;\n        }\n        uint128 currentScaleCached = currentScale;\n        uint128 currentEpochCached = currentEpoch;\n        uint256 currentP = P;\n\n        // Get S and G for the current epoch and current scale\n        uint256[256] storage currentS = epochToScaleToSums[currentEpochCached][currentScaleCached];\n        uint256 currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\n\n        // Record new snapshots of the latest running product P, sum S, and sum G, for the depositor\n        depositSnapshots[_depositor].P = currentP;\n        depositSnapshots[_depositor].G = currentG;\n        depositSnapshots[_depositor].scale = currentScaleCached;\n        depositSnapshots[_depositor].epoch = currentEpochCached;\n\n        length = collateralTokens.length;\n        for (uint256 i = 0; i < length; i++) {\n            depositSums[_depositor][i] = currentS[i];\n        }\n\n        emit DepositSnapshotUpdated(_depositor, currentP, currentG);\n    }\n\n    //This assumes the snapshot gets updated in the caller\n    function _accrueRewards(address _depositor) internal {\n        uint256 amount = _claimableReward(_depositor);\n        storedPendingReward[_depositor] = storedPendingReward[_depositor] + amount;\n    }\n\n    function claimReward(address recipient) external returns (uint256 amount) {\n        amount = _claimReward(msg.sender);\n        if (amount > 0) {\n            vault.transferAllocatedTokens(msg.sender, recipient, amount);\n        }\n        emit RewardClaimed(msg.sender, recipient, amount);\n        return amount;\n    }\n\n    function vaultClaimReward(address claimant, address) external returns (uint256 amount) {\n        require(msg.sender == address(vault));\n\n        return _claimReward(claimant);\n    }\n\n    function _claimReward(address account) internal returns (uint256 amount) {\n        uint256 initialDeposit = accountDeposits[account].amount;\n\n        if (initialDeposit > 0) {\n            uint128 depositTimestamp = accountDeposits[account].timestamp;\n            _triggerRewardIssuance();\n            bool hasGains = _accrueDepositorCollateralGain(account);\n\n            uint256 compoundedDebtDeposit = getCompoundedDebtDeposit(account);\n            uint256 debtLoss = initialDeposit - compoundedDebtDeposit;\n\n            amount = _claimableReward(account);\n            // we update only if the snapshot has changed\n            if (debtLoss > 0 || hasGains || amount > 0) {\n                // Update deposit\n                uint256 newDeposit = compoundedDebtDeposit;\n                accountDeposits[account] = AccountDeposit({ amount: uint128(newDeposit), timestamp: depositTimestamp });\n                _updateSnapshots(account, newDeposit);\n            }\n        }\n        uint256 pending = storedPendingReward[account];\n        if (pending > 0) {\n            amount += pending;\n            storedPendingReward[account] = 0;\n        }\n        return amount;\n    }\n}\n"
6     },
7     "SafeERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"draft-IERC20Permit.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
9     },
10     "IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "draft-IERC20Permit.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
15     },
16     "Address.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
18     },
19     "PrismaOwnable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma Ownable\n    @notice Contracts inheriting `PrismaOwnable` have the same owner as `PrismaCore`.\n            The ownership cannot be independently modified or renounced.\n */\ncontract PrismaOwnable {\n    IPrismaCore public immutable PRISMA_CORE;\n\n    constructor(address _prismaCore) {\n        PRISMA_CORE = IPrismaCore(_prismaCore);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == PRISMA_CORE.owner(), \"Only owner\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return PRISMA_CORE.owner();\n    }\n\n    function guardian() public view returns (address) {\n        return PRISMA_CORE.guardian();\n    }\n}\n"
21     },
22     "IPrismaCore.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaCore {\n    event FeeReceiverSet(address feeReceiver);\n    event GuardianSet(address guardian);\n    event NewOwnerAccepted(address oldOwner, address owner);\n    event NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\n    event NewOwnerRevoked(address owner, address revokedOwner);\n    event Paused();\n    event PriceFeedSet(address priceFeed);\n    event Unpaused();\n\n    function acceptTransferOwnership() external;\n\n    function commitTransferOwnership(address newOwner) external;\n\n    function revokeTransferOwnership() external;\n\n    function setFeeReceiver(address _feeReceiver) external;\n\n    function setGuardian(address _guardian) external;\n\n    function setPaused(bool _paused) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\n\n    function feeReceiver() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownershipTransferDeadline() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function pendingOwner() external view returns (address);\n\n    function priceFeed() external view returns (address);\n\n    function startTime() external view returns (uint256);\n}\n"
24     },
25     "SystemStart.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma System Start Time\n    @dev Provides a unified `startTime` and `getWeek`, used for emissions.\n */\ncontract SystemStart {\n    uint256 immutable startTime;\n\n    constructor(address prismaCore) {\n        startTime = IPrismaCore(prismaCore).startTime();\n    }\n\n    function getWeek() public view returns (uint256 week) {\n        return (block.timestamp - startTime) / 1 weeks;\n    }\n}\n"
27     },
28     "PrismaMath.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nlibrary PrismaMath {\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\n\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\n     *\n     * - Making it “too high” could lead to overflows.\n     * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Solidity floor division.\n     *\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39,\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\n     *\n     */\n    uint256 internal constant NICR_PRECISION = 1e20;\n\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return (_a < _b) ? _a : _b;\n    }\n\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return (_a >= _b) ? _a : _b;\n    }\n\n    /*\n     * Multiply two decimal numbers and use normal rounding rules:\n     * -round product up if 19'th mantissa digit >= 5\n     * -round product down if 19'th mantissa digit < 5\n     *\n     * Used only inside the exponentiation, _decPow().\n     */\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\n        uint256 prod_xy = x * y;\n\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\n    }\n\n    /*\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\n     *\n     * Uses the efficient \"exponentiation by squaring\" algorithm. O(log(n)) complexity.\n     *\n     * Called by two functions that represent time in units of minutes:\n     * 1) TroveManager._calcDecayedBaseRate\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\n     *\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\n     * \"minutes in 1000 years\": 60 * 24 * 365 * 1000\n     *\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\n     * negligibly different from just passing the cap, since:\n     *\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\n     */\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\n        if (_minutes > 525600000) {\n            _minutes = 525600000;\n        } // cap to avoid overflow\n\n        if (_minutes == 0) {\n            return DECIMAL_PRECISION;\n        }\n\n        uint256 y = DECIMAL_PRECISION;\n        uint256 x = _base;\n        uint256 n = _minutes;\n\n        // Exponentiation-by-squaring\n        while (n > 1) {\n            if (n % 2 == 0) {\n                x = decMul(x, x);\n                n = n / 2;\n            } else {\n                // if (n % 2 != 0)\n                y = decMul(x, y);\n                x = decMul(x, x);\n                n = (n - 1) / 2;\n            }\n        }\n\n        return decMul(x, y);\n    }\n\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return (_a >= _b) ? _a - _b : _b - _a;\n    }\n\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\n        if (_debt > 0) {\n            return (_coll * NICR_PRECISION) / _debt;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return 2 ** 256 - 1;\n        }\n    }\n\n    function _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint256) {\n        if (_debt > 0) {\n            uint256 newCollRatio = (_coll * _price) / _debt;\n\n            return newCollRatio;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return 2 ** 256 - 1;\n        }\n    }\n\n    function _computeCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\n        if (_debt > 0) {\n            uint256 newCollRatio = (_coll) / _debt;\n\n            return newCollRatio;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return 2 ** 256 - 1;\n        }\n    }\n}\n"
30     },
31     "IDebtToken.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDebtToken {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint256 _amount);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint256 _amount);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function burn(address _account, uint256 _amount) external;\n\n    function burnWithGasCompensation(address _account, uint256 _amount) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    function enableTroveManager(address _troveManager) external;\n\n    function flashLoan(address receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n\n    function mint(address _account, uint256 _amount) external;\n\n    function mintWithGasCompensation(address _account, uint256 _amount) external returns (bool);\n\n    function nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function renounceOwnership() external;\n\n    function returnFromPool(address _poolAddress, address _receiver, uint256 _amount) external;\n\n    function sendToSP(address _sender, uint256 _amount) external;\n\n    function setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config) external;\n\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint256 _minGas) external;\n\n    function setPayloadSizeLimit(uint16 _dstChainId, uint256 _size) external;\n\n    function setPrecrime(address _precrime) external;\n\n    function setReceiveVersion(uint16 _version) external;\n\n    function setSendVersion(uint16 _version) external;\n\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external;\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external;\n\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external;\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function transferOwnership(address newOwner) external;\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external payable;\n\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint256 _amount,\n        address _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\n\n    function DEFAULT_PAYLOAD_SIZE_LIMIT() external view returns (uint256);\n\n    function FLASH_LOAN_FEE() external view returns (uint256);\n\n    function NO_EXTRA_GAS() external view returns (uint256);\n\n    function PT_SEND() external view returns (uint16);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function borrowerOperationsAddress() external view returns (address);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function domainSeparator() external view returns (bytes32);\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint256 _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\n\n    function factory() external view returns (address);\n\n    function failedMessages(uint16, bytes calldata, uint64) external view returns (bytes32);\n\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    function gasPool() external view returns (address);\n\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address,\n        uint256 _configType\n    ) external view returns (bytes memory);\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory);\n\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    function lzEndpoint() external view returns (address);\n\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    function minDstGasLookup(uint16, uint16) external view returns (uint256);\n\n    function name() external view returns (string memory);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function payloadSizeLimitLookup(uint16) external view returns (uint256);\n\n    function permitTypeHash() external view returns (bytes32);\n\n    function precrime() external view returns (address);\n\n    function stabilityPoolAddress() external view returns (address);\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    function symbol() external view returns (string memory);\n\n    function token() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function troveManager(address) external view returns (bool);\n\n    function trustedRemoteLookup(uint16) external view returns (bytes memory);\n\n    function useCustomAdapterParams() external view returns (bool);\n\n    function version() external view returns (string memory);\n}\n"
33     },
34     "IVault.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaVault {\n    struct InitialAllowance {\n        address receiver;\n        uint256 amount;\n    }\n\n    event BoostCalculatorSet(address boostCalculator);\n    event BoostDelegationSet(address indexed boostDelegate, bool isEnabled, uint256 feePct, address callback);\n    event EmissionScheduleSet(address emissionScheduler);\n    event IncreasedAllocation(address indexed receiver, uint256 increasedAmount);\n    event NewReceiverRegistered(address receiver, uint256 id);\n    event ReceiverIsActiveStatusModified(uint256 indexed id, bool isActive);\n    event UnallocatedSupplyIncreased(uint256 increasedAmount, uint256 unallocatedTotal);\n    event UnallocatedSupplyReduced(uint256 reducedAmount, uint256 unallocatedTotal);\n\n    function allocateNewEmissions(uint256 id) external returns (uint256);\n\n    function batchClaimRewards(\n        address receiver,\n        address boostDelegate,\n        address[] calldata rewardContracts,\n        uint256 maxFeePct\n    ) external returns (bool);\n\n    function increaseUnallocatedSupply(uint256 amount) external returns (bool);\n\n    function registerReceiver(address receiver, uint256 count) external returns (bool);\n\n    function setBoostCalculator(address _boostCalculator) external returns (bool);\n\n    function setBoostDelegationParams(bool isEnabled, uint256 feePct, address callback) external returns (bool);\n\n    function setEmissionSchedule(address _emissionSchedule) external returns (bool);\n\n    function setInitialParameters(\n        address _emissionSchedule,\n        address _boostCalculator,\n        uint256 totalSupply,\n        uint64 initialLockWeeks,\n        uint128[] calldata _fixedInitialAmounts,\n        InitialAllowance[] calldata initialAllowances\n    ) external;\n\n    function setReceiverIsActive(uint256 id, bool isActive) external returns (bool);\n\n    function transferAllocatedTokens(address claimant, address receiver, uint256 amount) external returns (bool);\n\n    function transferTokens(address token, address receiver, uint256 amount) external returns (bool);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function allocated(address) external view returns (uint256);\n\n    function boostCalculator() external view returns (address);\n\n    function boostDelegation(address) external view returns (bool isEnabled, uint16 feePct, address callback);\n\n    function claimableRewardAfterBoost(\n        address account,\n        address receiver,\n        address boostDelegate,\n        address rewardContract\n    ) external view returns (uint256 adjustedAmount, uint256 feeToDelegate);\n\n    function emissionSchedule() external view returns (address);\n\n    function getClaimableWithBoost(address claimant) external view returns (uint256 maxBoosted, uint256 boosted);\n\n    function getWeek() external view returns (uint256 week);\n\n    function guardian() external view returns (address);\n\n    function idToReceiver(uint256) external view returns (address account, bool isActive);\n\n    function lockWeeks() external view returns (uint64);\n\n    function locker() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function claimableBoostDelegationFees(address claimant) external view returns (uint256 amount);\n\n    function prismaToken() external view returns (address);\n\n    function receiverUpdatedWeek(uint256) external view returns (uint16);\n\n    function totalUpdateWeek() external view returns (uint64);\n\n    function unallocatedTotal() external view returns (uint128);\n\n    function voter() external view returns (address);\n\n    function weeklyEmissions(uint256) external view returns (uint128);\n}\n"
36     }
37   },
38   "settings": {
39     "evmVersion": "paris",
40     "optimizer": {
41       "enabled": true,
42       "runs": 200
43     },
44     "libraries": {
45       "StabilityPool.sol": {}
46     },
47     "outputSelection": {
48       "*": {
49         "*": [
50           "evm.bytecode",
51           "evm.deployedBytecode",
52           "devdoc",
53           "userdoc",
54           "metadata",
55           "abi"
56         ]
57       }
58     }
59   }
60 }}