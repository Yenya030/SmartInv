1 {{
2   "language": "Solidity",
3   "sources": {
4     "Token.sol": {
5       "content": "// Mellivora Finance: Redefining Decentralized Finance through Frictionless Yield Protocol (FYP)\n\n// Website: https://mellivora.finance/\n// Docs: https://docs.mellivora.finance/\n// Twitter: https://twitter.com/MellivoraERC\n// Telegram: https://t.me/MellivoraERC\n\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\npragma solidity 0.8.21;\n\ninterface IPair {\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function token0() external view returns (address);\n\n    function sync() external;\n}\n\ninterface IFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n}\n\ninterface IUniswapRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n}\n\nabstract contract TokenBase is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory _tokenName, string memory _tokenSymbol) {\n        _name = _tokenName;\n        _symbol = _tokenSymbol;\n        _decimals = 9;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract Mellivora is TokenBase, Ownable {\n    address payable public treasuryAddress;\n    address public immutable deadAddress = address(0xDEAD);\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 1000000000 * 10 ** 9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    uint256 public maxAmount = (_tTotal * 2) / 100; // 2%\n    uint256 public maxWallet = (_tTotal * 2) / 100; // 2%\n\n    uint256 private minimumTokensBeforeSwap = _tTotal / 200; // 0.5%\n\n    bool public limitsInEffect = true;\n    bool public tradingEnable = false;\n    uint256 public latestRocketLaunch;\n    uint256 public rocketLaunchCooldown = 2 hours;\n    uint256 public launchETHPercent = 5;\n    uint256 public launchCount;\n    uint256 public totalETHLaunched;\n\n    uint256 private _initTax = 30;\n    uint256 private _reduceTaxAt = 30;\n    Taxes public _tax = Taxes(2, 2, 2);\n\n    uint256 private _buyCount = 0;\n    uint256 private _sellCount = 0;\n\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    struct Taxes {\n        uint256 treasury;\n        uint256 rewards;\n        uint256 launchRocket;\n    }\n\n    IUniswapRouter public immutable router;\n    address public immutable pair;\n\n    bool inSwap;\n\n    event Distribute(uint256 amount);\n    event SwapEnabled();\n    event OffLimits();\n    event LaunchETH(uint256 amount);\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address _treasuryAddress) TokenBase(\"Mellivora\", \"MLVR\") {\n        treasuryAddress = payable(_treasuryAddress);\n        _rOwned[_msgSender()] = _rTotal;\n        router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        pair = IFactory(router.factory()).createPair(\n            address(this),\n            router.WETH()\n        );\n\n        _isExcludedFromFee[_msgSender()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(router)] = true;\n        _isExcludedFromFee[deadAddress] = true;\n\n        excludeFromReward(address(this));\n        excludeFromReward(deadAddress);\n        excludeFromReward(pair);\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        require(\n            _allowances[sender][_msgSender()] >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()] - amount\n        );\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + (addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        require(\n            _allowances[_msgSender()][spender] >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] - subtractedValue\n        );\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(\n        uint256 tAmount\n    ) public view returns (uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        (uint256 rAmount, , , ) = _getValues(tAmount, 0);\n        return rAmount;\n    }\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) public view returns (uint256) {\n        require(\n            rAmount <= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(\n            !_isExcluded[sender],\n            \"Excluded addresses cannot call this function\"\n        );\n        (uint256 rAmount, , , ) = _getValues(tAmount, 0);\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\n        _rTotal = _rTotal - (rAmount);\n        _tFeeTotal = _tFeeTotal + (tAmount);\n    }\n\n    function enableSwap() external onlyOwner {\n        tradingEnable = true;\n        emit SwapEnabled();\n    }\n\n    function offLimits() external onlyOwner {\n        limitsInEffect = false;\n        emit OffLimits();\n    }\n\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\n        require(\n            _treasuryAddress != address(0),\n            \"Cannot set treasury to zero address\"\n        );\n        treasuryAddress = payable(_treasuryAddress);\n    }\n\n    function setLaunchRocketETHPercent(uint256 _launchETHPercent) external onlyOwner {\n        require(\n            _launchETHPercent < 10 && _launchETHPercent > 1,\n            \"Invalid percentage\"\n        );\n        launchETHPercent = _launchETHPercent;\n    }\n\n    function launchRocket() external {\n        require(\n            latestRocketLaunch + rocketLaunchCooldown < block.timestamp,\n            \"Rocket launch cooldown in effect\"\n        );\n        latestRocketLaunch = block.timestamp;\n        uint256 amountETH = address(this).balance;\n        uint256 amountLimit = IERC20(router.WETH()).balanceOf(pair);\n\n        if (amountETH > (amountLimit * launchETHPercent) / 100) {\n            amountETH = (amountLimit * launchETHPercent) / 100;\n        }\n\n        launchRocketAndBurn(amountETH);\n        totalETHLaunched += amountETH;\n        launchCount++;\n        emit LaunchETH(amountETH);\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function calculateTaxFee(\n        uint256 _amount,\n        address sender,\n        address recipient\n    ) private view returns (uint256) {\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\n            return 0;\n        }\n        if (sender != pair && recipient != pair) {\n            return 0;\n        }\n        if (sender == pair && _buyCount < _reduceTaxAt) {\n            return (_amount * _initTax) / 100;\n        }\n        if (recipient == pair && _sellCount < _reduceTaxAt) {\n            return (_amount * _initTax) / 100;\n        }\n        uint256 _totalTax = _tax.treasury + _tax.rewards + _tax.launchRocket;\n        return (_amount * _totalTax) / 100;\n    }\n\n    function setMinimumTokensBeforeSwap(\n        uint256 _minimumTokensBeforeSwap\n    ) external onlyOwner {\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\n    }\n\n    function excludeFromReward(address account) public onlyOwner {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (!inSwap && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n            require(tradingEnable, \"Trading not live\");\n            if (limitsInEffect) {\n                if (from == pair || to == pair) {\n                    require(amount <= maxAmount, \"Max Tx Exceeded\");\n                }\n                if (to != pair) {\n                    require(\n                        balanceOf(to) + amount <= maxWallet,\n                        \"Max Wallet Exceeded\"\n                    );\n                }\n            }\n\n            if (to == pair) {\n                _buyCount++;\n                uint256 contractTokenBalance = balanceOf(address(this));\n                if (contractTokenBalance >= minimumTokensBeforeSwap) {\n                    swapTokens(minimumTokensBeforeSwap);\n                }\n            }\n            if (from == pair) {\n                _sellCount++;\n            }\n        }\n        _tokenTransfer(from, to, amount);\n    }\n\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n        uint256 initialBalance = address(this).balance;\n        swapTokensForEth(contractTokenBalance);\n        uint256 transferredBalance = address(this).balance - initialBalance;\n        uint256 _totalTax = _tax.treasury + _tax.rewards + _tax.launchRocket;\n        transferToAddressETH(\n            treasuryAddress,\n            (transferredBalance / _totalTax) * _tax.treasury\n        );\n    }\n\n    function launchRocketAndBurn(uint256 amount) private lockTheSwap {\n        if (amount > 0) {\n            swapETHForTokens(amount);\n        }\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount\n        ) = _getValues(tAmount, tFee);\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\n        _takeFee(rFee, tFee, sender);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount\n        ) = _getValues(tAmount, tFee);\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\n        _takeFee(rFee, tFee, sender);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\n\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount\n        ) = _getValues(tAmount, tFee);\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\n        _takeFee(rFee, tFee, sender);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount\n        ) = _getValues(tAmount, tFee);\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\n        _takeFee(rFee, tFee, sender);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeFee(\n        uint256 rFeeTotal,\n        uint256 tFeeTotal,\n        address _from\n    ) private {\n        uint256 _totalTax = _tax.treasury + _tax.rewards + _tax.launchRocket;\n        uint256 rFeeReflect = (rFeeTotal * (_tax.rewards)) / (_totalTax);\n        uint256 tFeeReflect = (tFeeTotal * (_tax.rewards)) / (_totalTax);\n\n        // reflect fees\n        _rTotal = _rTotal - (rFeeReflect);\n        _tFeeTotal = _tFeeTotal + (tFeeReflect);\n\n        // treasury + launchRocket fees\n        _rOwned[address(this)] =\n            _rOwned[address(this)] +\n            (rFeeTotal - rFeeReflect);\n\n        if (_isExcluded[address(this)]) {\n            _tOwned[address(this)] =\n                _tOwned[address(this)] +\n                (tFeeTotal - tFeeReflect);\n        }\n        emit Transfer(_from, address(this), tFeeTotal - tFeeReflect);\n        emit Distribute(tFeeReflect);\n    }\n\n    function _getValues(\n        uint256 tAmount,\n        uint256 tFee\n    ) private view returns (uint256, uint256, uint256, uint256) {\n        uint256 tTransferAmount = _getTValues(tAmount, tFee);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\n            tAmount,\n            tFee,\n            _getRate()\n        );\n        return (rAmount, rTransferAmount, rFee, tTransferAmount);\n    }\n\n    function _getTValues(\n        uint256 tAmount,\n        uint256 tFee\n    ) private pure returns (uint256) {\n        uint256 tTransferAmount = tAmount - (tFee);\n        return tTransferAmount;\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 currentRate\n    ) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount * (currentRate);\n        uint256 rFee = tFee * (currentRate);\n        uint256 rTransferAmount = rAmount - (rFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / (tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply = rSupply - (_rOwned[_excluded[i]]);\n            tSupply = tSupply - (_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function transferToAddressETH(\n        address payable recipient,\n        uint256 amount\n    ) private {\n        recipient.transfer(amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        _approve(address(this), address(router), _tTotal / 200);\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this), // The contract\n            block.timestamp\n        );\n    }\n\n    function swapETHForTokens(uint256 amount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = address(this);\n\n        // make the swap\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n            value: amount\n        }(\n            0, // accept any amount of Tokens\n            path,\n            deadAddress, // Burn address\n            block.timestamp\n        );\n    }\n\n    receive() external payable {}\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     }
34   }
35 }}