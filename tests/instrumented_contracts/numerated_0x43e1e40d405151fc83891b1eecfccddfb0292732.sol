1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/Pausable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     },
22     "contracts/DarkSpiritCustodian.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IAdventureApproval.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title DarkSpiritCustodian\n * @author Limit Break, Inc.\n * @notice Holds dark spirit and dark hero spirit tokens that are currently on potion crafting quest.\n */\ncontract DarkSpiritCustodian {\n\n    /// @dev Specify the potion crafting adventure, dark spririt, and dark hero spirit token contract addresses during creation\n    constructor(address potionCraftingAdventure, address darkSpiritsAddress, address darkHeroSpiritsAddress) {\n        IERC721(darkSpiritsAddress).setApprovalForAll(potionCraftingAdventure, true);\n        IERC721(darkHeroSpiritsAddress).setApprovalForAll(potionCraftingAdventure, true);\n        IAdventureApproval(darkSpiritsAddress).setAdventuresApprovedForAll(potionCraftingAdventure, true);\n        IAdventureApproval(darkHeroSpiritsAddress).setAdventuresApprovedForAll(potionCraftingAdventure, true);\n    }\n}"
24     },
25     "contracts/IAdventureApproval.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IAdventureApproval {\n    function setAdventuresApprovedForAll(address operator, bool approved) external;\n    function areAdventuresApprovedForAll(address owner, address operator) external view returns (bool);\n    function isAdventureWhitelisted(address account) external view returns (bool);\n}\n"
27     },
28     "contracts/IMintablePotion.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/**\n * @dev Required interface of mintable potion contracts.\n */\ninterface IMintablePotion {\n\n    /**\n     * @notice Mints multiple potions crafted with the specified dark spirit token ids and dark hero spirit token ids\n     */\n    function mintPotionsBatch(address to, uint256[] calldata darkSpiritTokenIds, uint256[] calldata darkHeroSpiritTokenIds) external;\n}\n"
30     },
31     "contracts/IMinterWhitelist.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/**\n * @dev Required interface to determine if a minter is whitelisted\n */\ninterface IMinterWhitelist {\n    /**\n     * @notice Determines if an address is a whitelisted minter\n     */\n    function whitelistedMinters(address account) external view returns (bool);\n}\n"
33     },
34     "contracts/PotionCraftingAdventure.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IAdventureApproval.sol\";\nimport \"./IMintablePotion.sol\";\nimport \"./IMinterWhitelist.sol\";\nimport \"./DarkSpiritCustodian.sol\";\nimport \"limit-break-contracts/contracts/adventures/IAdventure.sol\";\nimport \"limit-break-contracts/contracts/adventures/IAdventurousERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nerror CallbackNotImplemented();\nerror CallerDidNotCreateClaimId();\nerror CallerNotOwnerOfDarkSpirit();\nerror CallerNotOwnerOfDarkHeroSpirit();\nerror CannotExceedOneThousandQueriesPerCall();\nerror CannotSpecifyZeroAddressForDarkSpiritsContract();\nerror CannotSpecifyZeroAddressForDarkHeroSpiritsContract();\nerror CannotSpecifyZeroAddressForVillainPotionContract();\nerror CannotSpecifyZeroAddressForSuperVillainPotionContract();\nerror ClaimIdOverflow();\nerror CompleteQuestToRedeemPotion();\nerror InputArrayLengthMismatch();\nerror MustIncludeAtLeastOneSpirit();\nerror NoPotionQuestFoundForSpecifiedClaimId();\nerror QuantityMustBeGreaterThanZero();\nerror QuestCompletePotionMustBeRedeemed();\n\n/**\n * @title PotionCraftingAdventure\n * @author Limit Break, Inc.\n * @notice An adventure that burns crafted spirits into potions.\n */\ncontract PotionCraftingAdventure is Ownable, Pausable, ERC165, IAdventure {\n\n    struct PotionQuest {\n        uint64 startTimestamp;\n        uint16 darkSpiritTokenId;\n        uint16 darkHeroSpiritTokenId;\n        address adventurer;\n    }\n\n    /// @dev The amount of time the user must remain in the quest to complete it and receive a hero\n    uint256 public constant CRAFTING_DURATION = 7 days;\n\n    /// @dev An unchangeable reference to the villain potion contract that is rewarded at the conclusion of adventure quest if a single dark spirit was used\n    IMintablePotion immutable public villainPotionContract;\n\n    /// @dev An unchangeable reference to the super villain potion contract that is rewarded at the conclusion of adventure quest if two dark spirits were used\n    IMintablePotion immutable public superVillainPotionContract;\n\n    /// @dev An unchangeable reference to the dark spirit token contract\n    IAdventurousERC721 immutable public darkSpiritsContract;\n\n    /// @dev An unchangeable reference to the dark hero spirit token contract\n    IAdventurousERC721 immutable public darkHeroSpiritsContract;\n\n    /// @dev An unchangeable reference to a custodial holding contract for dark spirits\n    DarkSpiritCustodian immutable public custodian;\n\n    /// @dev A counter for claim ids\n    uint256 public lastClaimId;\n\n    /// @dev Map claim id to potion quest details\n    mapping (uint256 => PotionQuest) public potionQuestLookup;\n\n    /// @dev Emitted when an adventurer abandons/cancels a potion currently being crafted\n    event AbandonedPotion(address indexed adventurer, uint256 indexed claimId);\n\n    /// @dev Emitted when an adventurer starts crafting a potion\n    event CraftingPotion(address indexed adventurer, uint256 indexed claimId, uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId);\n\n    /// @dev Emitted when an adventurer redeems a crafted a potion\n    event CraftedPotion(address indexed adventurer, uint256 indexed claimId);\n\n    /// @dev Specify the potion, dark spririt, and dark hero spirit token contract addresses during creation\n    constructor(address villainPotionAddress, address superVillainPotionAddress, address darkSpiritsAddress, address darkHeroSpiritsAddress) {\n        if(villainPotionAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForVillainPotionContract();\n        }\n\n        if(superVillainPotionAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForSuperVillainPotionContract();\n        }\n\n        if(darkSpiritsAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForDarkSpiritsContract();\n        }\n\n        if(darkHeroSpiritsAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForDarkHeroSpiritsContract();\n        }\n\n        villainPotionContract = IMintablePotion(villainPotionAddress);\n        superVillainPotionContract = IMintablePotion(superVillainPotionAddress);\n        darkSpiritsContract = IAdventurousERC721(darkSpiritsAddress);\n        darkHeroSpiritsContract = IAdventurousERC721(darkHeroSpiritsAddress);\n\n        custodian = new DarkSpiritCustodian(address(this), darkSpiritsAddress, darkHeroSpiritsAddress);\n    }\n\n    /// @dev ERC-165 interface support\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdventure).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n    /// Throws in all cases quest entry for this adventure is fulfilled via adventureTransferFrom instead of enterQuest, and this callback should not be triggered.\n    function onQuestEntered(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/) external override pure {\n        revert CallbackNotImplemented();\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n    /// Throws in all cases quest exit for this adventure is fulfilled via transferFrom or adventureBurn instead of exitQuest, and this callback should not be triggered.\n    function onQuestExited(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/, uint256 /*questStartTimestamp*/) external override pure {\n        revert CallbackNotImplemented();\n    }\n\n    /// @dev Returns false - spirits are transferred into this contract for crafting\n    function questsLockTokens() external override pure returns (bool) {\n        return false;\n    }\n\n    /// @dev Pauses and blocks adventurers from starting new potion crafting quests\n    /// Throws if the adventure is already paused\n    function pauseNewQuestEntries() external onlyOwner {\n        _pause();\n    }\n\n    /// @dev Unpauses and allows adventurers to start new potion crafting quests\n    /// Throws if the adventure is already unpaused\n    function unpauseNewQuestEntries() external onlyOwner {\n        _unpause();\n    }\n\n    /// @notice Enters the potion crafting quests with a batch of specified dark spirits and dark hero spirits.\n    /// Dark spirit token ids may be 0, in which case it means no dark spirit will be included in the potion.\n    /// Dark hero spirit token ids may be 0, in which case it means no dark hero spirit will be included in the potion.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the token id arrays.\n    /// Throws when token id array lengths don't match.\n    /// Throws when the caller does not own a specified dark spirit token.\n    /// Throws when the caller does not own a specified dark hero spirit token.\n    /// Throws when neither a dark spirit or dark hero spirit token are specified (0 values for both ids at the same array index).\n    /// Throws when adventureTransferFrom throws, typically for one of the following reasons:\n    ///   - This adventure contract is not in the adventure whitelist for dark spirit or dark hero spirit contract.\n    ///   - The caller has not set adventure approval for this contract.\n    /// /// Throws when the contract is paused\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The specified dark spirits are now owned by this contract.\n    /// The specified dark hero spirits are now owned by this contract.\n    /// The value of the lastClaimId counter has increased by `quantity`, where `quantity` is the length of the token id arrays.\n    /// The potion quest lookup for the newly created claim ids contains the following information:\n    ///   - The block timestamp of this transaction (the time at which crafting the potion began).\n    ///   - The specified dark spirit token id.\n    ///   - The specified dark hero spirit token id.\n    ///   - The address of the adventurer that is permitted to retrieve their spirits or redeem their potion.\n    /// `quantity` CraftingPotion events have been emitted, where `quantity` is the length of the token id arrays.\n    function startCraftingPotionsBatch(uint256[] calldata darkSpiritTokenIds, uint256[] calldata darkHeroSpiritTokenIds) external whenNotPaused {\n        if(darkSpiritTokenIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        if(darkHeroSpiritTokenIds.length != darkSpiritTokenIds.length) {\n            revert InputArrayLengthMismatch();\n        }\n\n        uint256 claimId;\n        unchecked {\n            claimId = lastClaimId;\n            lastClaimId = claimId + darkSpiritTokenIds.length;\n            ++claimId;\n        }\n\n        for(uint256 i = 0; i < darkSpiritTokenIds.length;) {\n            _startCraftingPotion(claimId + i, darkSpiritTokenIds[i], darkHeroSpiritTokenIds[i]);\n            \n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Abandons multiple potion crafting quests referenced by the specifed claim ids before the required crafting duration has been met.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the claim id arrays.\n    /// Throws when no potion quest is found for one or more of the specified claim ids (start timestamp is zero).\n    /// Throws when the caller did not create one or more of the specified claim id (adventurer not the same as caller).\n    /// Throws when the one or more of the potions are ready to redeem (required crafting duration has been met or exceeded).\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The dark spirit and/or dark hero spirit that were in use to craft the potions have been returned to the adventurer that started crafting with them.\n    /// The potion quest lookup entry for the specified claim ids have been removed.\n    /// `quantity` AbandonedPotion events have been emitted, where `quantity` is the length of the claim id array.\n    function abandonPotionsBatch(uint256[] calldata claimIds) external {\n        if(claimIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        for(uint256 i = 0; i < claimIds.length;) {\n            _abandonPotion(claimIds[i]);\n            \n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Redeems multiple crafted potions referenced by the specifed claim ids after the required crafting duration has been met.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the claim id arrays.\n    /// Throws when no potion quest is found for one or more of the specified claim ids (start timestamp is zero).\n    /// Throws when the caller did not create one or more of the specified claim ids (adventurer not the same as caller).\n    /// Throws when one or more of the potions is not ready to redeem (required crafting duration has not been met).\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The dark spirit and/or dark hero spirit that were in use to craft a potion have been burned.\n    /// The potion quest lookup entry for the specified claim id has been removed.\n    /// A potion has been minted to the adventurer who crafted the potion.\n    /// `quantity` CraftedPotion events have been emitted, where `quantity` is the length of the claim id arrays.\n    function redeemPotionsBatch(uint256[] calldata claimIds) external {\n        if(claimIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        uint256[] memory darkSpiritTokenIds = new uint256[](claimIds.length);\n        uint256[] memory darkHeroSpiritTokenIds = new uint256[](claimIds.length);\n\n        uint256 numVillainPotions = 0;\n        uint256 numSuperVillainPotions = 0;\n\n        for(uint256 i = 0; i < claimIds.length;) {\n            (uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId) = _redeemPotion(claimIds[i]);\n            darkSpiritTokenIds[i] = darkSpiritTokenId;\n            darkHeroSpiritTokenIds[i] = darkHeroSpiritTokenId;\n            \n            unchecked {\n                ++i;\n\n                if(darkSpiritTokenId == 0 || darkHeroSpiritTokenId == 0) {\n                    ++numVillainPotions;\n                } else {\n                    ++numSuperVillainPotions;\n                }\n            }\n        }\n\n        uint256[] memory villainDarkSpiritTokenIds = new uint256[](numVillainPotions);\n        uint256[] memory villainDarkHeroSpiritTokenIds = new uint256[](numVillainPotions);\n\n        uint256[] memory superVillainDarkSpiritTokenIds = new uint256[](numSuperVillainPotions);\n        uint256[] memory superVillainDarkHeroSpiritTokenIds = new uint256[](numSuperVillainPotions);\n\n        uint256 villainPotionCounter = 0;\n        uint256 superVillainPotionCounter = 0;\n\n        unchecked {\n            for(uint256 i = 0; i < claimIds.length; ++i) {\n                uint256 darkSpiritTokenId = darkSpiritTokenIds[i];\n                uint256 darkHeroSpiritTokenId = darkHeroSpiritTokenIds[i];\n    \n                if(darkSpiritTokenId == 0 || darkHeroSpiritTokenId == 0) {\n                    villainDarkSpiritTokenIds[villainPotionCounter] = darkSpiritTokenId;\n                    villainDarkHeroSpiritTokenIds[villainPotionCounter] = darkHeroSpiritTokenId;\n                    ++villainPotionCounter;\n                } else {\n                    superVillainDarkSpiritTokenIds[superVillainPotionCounter] = darkSpiritTokenId;\n                    superVillainDarkHeroSpiritTokenIds[superVillainPotionCounter] = darkHeroSpiritTokenId;\n                    ++superVillainPotionCounter;\n                }\n            }\n        }\n\n        if(numVillainPotions > 0) {\n            villainPotionContract.mintPotionsBatch(_msgSender(), villainDarkSpiritTokenIds, villainDarkHeroSpiritTokenIds);\n        }\n\n        if(numSuperVillainPotions > 0) {\n            superVillainPotionContract.mintPotionsBatch(_msgSender(), superVillainDarkSpiritTokenIds, superVillainDarkHeroSpiritTokenIds);\n        }\n    }\n\n    /// @dev Enumerates all specified claim ids and returns the potion quest details for each.\n    /// Never use this function in a transaction context - it is fine for a read-only query for \n    /// external applications, but will consume a lot of gas when used in a transaction.\n    function getPotionQuestDetailsBatch(uint256[] calldata claimIds) external view returns (PotionQuest[] memory potionQuests) {\n        potionQuests = new PotionQuest[](claimIds.length);\n        unchecked {\n             for(uint256 i = 0; i < claimIds.length; ++i) {\n                 potionQuests[i] = potionQuestLookup[claimIds[i]];\n             }\n        }\n\n        return potionQuests;\n    }\n\n    /// @dev Records details of a potion quests with the specified claim id and transfers \n    /// specified dark spirit and dark hero spirit tokens to the contract.\n    ///\n    /// Throws when the caller does not own the specified dark spirit token.\n    /// Throws when the caller does not own the specified dark hero spirit token.\n    /// Throws when neither a dark spirit or dark hero spirit token are specified (0 values for both ids).\n    /// Throws when adventureTransferFrom throws, typically for one of the following reasons:\n    ///   - This adventure contract is not in the adventure whitelist for dark spirit or dark hero spirit contract.\n    ///   - The caller has not set adventure approval for this contract.\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The specified dark spirit is now owned by this contract.\n    /// The specified dark hero spirit is now owned by this contract.\n    /// The potion quest lookup for the specified created claim id contains the following information:\n    ///   - The block timestamp of this transaction (the time at which crafting the potion began).\n    ///   - The specified dark spirit token id.\n    ///   - The specified dark hero spirit token id.\n    ///   - The address of the adventurer that is permitted to retrieve their spirits or redeem their potion.\n    /// A CraftingPotion event has been emitted.\n    function _startCraftingPotion(uint256 claimId, uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId) private {\n        if(darkSpiritTokenId == 0 && darkHeroSpiritTokenId == 0) {\n            revert MustIncludeAtLeastOneSpirit();\n        }\n\n        address caller = _msgSender();\n\n        potionQuestLookup[claimId].startTimestamp = uint64(block.timestamp);\n        potionQuestLookup[claimId].darkSpiritTokenId = uint16(darkSpiritTokenId);\n        potionQuestLookup[claimId].darkHeroSpiritTokenId = uint16(darkHeroSpiritTokenId);\n        potionQuestLookup[claimId].adventurer = caller;\n\n        emit CraftingPotion(caller, claimId, darkSpiritTokenId, darkHeroSpiritTokenId);\n\n        if(darkSpiritTokenId > 0) {\n            address darkSpiritTokenOwner = darkSpiritsContract.ownerOf(darkSpiritTokenId);\n            if(darkSpiritTokenOwner != caller) {\n                revert CallerNotOwnerOfDarkSpirit();\n            }\n\n            darkSpiritsContract.adventureTransferFrom(darkSpiritTokenOwner, address(custodian), darkSpiritTokenId);\n        }\n\n        if(darkHeroSpiritTokenId > 0) {\n            address darkHeroSpiritTokenOwner = darkHeroSpiritsContract.ownerOf(darkHeroSpiritTokenId);\n            if(darkHeroSpiritTokenOwner != caller) {\n                revert CallerNotOwnerOfDarkHeroSpirit();\n            }\n\n            darkHeroSpiritsContract.adventureTransferFrom(darkHeroSpiritTokenOwner, address(custodian), darkHeroSpiritTokenId);\n        }\n    }\n\n    /// @dev Abandons the potion crafting quest referenced by the claim id before the required crafting duration has been met.\n    ///\n    /// Throws when no potion quest is found for the specified claim id (start timestamp is zero).\n    /// Throws when the caller did not create the specified claim id (adventurer not the same as caller).\n    /// Throws when the potion is ready to redeem (required crafting duration has been met or exceeded).\n    ///  - One exception to this rule is if the potion crafting adventure is removed from the whitelist of either dark spirit contract.\n    ///    In that case, the user can abandon the potion to recover their dark spirits since redemption is not possible.\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The dark spirit and/or dark hero spirit that were in use to craft a potion have been returned to the adventurer that started crafting with them.\n    /// The potion quest lookup entry for the specified claim id has been removed.\n    /// An AbandonedPotion event has been emitted.\n    function _abandonPotion(uint256 claimId) private {\n        (address adventurer, uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId, bool questCompleted) = _getAndClearPotionQuestStatus(claimId);\n\n        bool allowUserToAbandonQuestsAfterQuestCompleted = false;\n        if(!IAdventureApproval(address(darkSpiritsContract)).isAdventureWhitelisted(address(this)) || \n           !IAdventureApproval(address(darkHeroSpiritsContract)).isAdventureWhitelisted(address(this)) ||\n           !IMinterWhitelist(address(villainPotionContract)).whitelistedMinters(address(this)) ||\n           !IMinterWhitelist(address(superVillainPotionContract)).whitelistedMinters(address(this))) {\n          allowUserToAbandonQuestsAfterQuestCompleted = true;\n        }\n\n        if(questCompleted && !allowUserToAbandonQuestsAfterQuestCompleted) {\n            revert QuestCompletePotionMustBeRedeemed();\n        }\n\n        emit AbandonedPotion(adventurer, claimId);\n\n        if(darkSpiritTokenId > 0) {\n            darkSpiritsContract.transferFrom(address(custodian), adventurer, darkSpiritTokenId);\n        }\n\n        if(darkHeroSpiritTokenId > 0) {\n            darkHeroSpiritsContract.transferFrom(address(custodian), adventurer, darkHeroSpiritTokenId);\n        }\n    }\n\n    /// @dev Redeems a crafted potion referenced by the claim id after the required crafting duration has been met.\n    ///\n    /// Throws when no potion quest is found for the specified claim id (start timestamp is zero).\n    /// Throws when the caller did not create the specified claim id (adventurer not the same as caller).\n    /// Throws when the potion is not ready to redeem (required crafting duration has not been met).\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The dark spirit and/or dark hero spirit that were in use to craft a potion have been burned.\n    /// The potion quest lookup entry for the specified claim id has been removed.\n    /// A potion has been minted to the adventurer who crafted the potion.\n    /// A CraftedPotion event has been emitted.\n    function _redeemPotion(uint256 claimId) private returns (uint256, uint256) {\n        (address adventurer, uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId, bool questCompleted) = _getAndClearPotionQuestStatus(claimId);\n\n        if(!questCompleted) {\n            revert CompleteQuestToRedeemPotion();\n        }\n\n        emit CraftedPotion(adventurer, claimId);\n\n        if(darkSpiritTokenId > 0) {\n            darkSpiritsContract.adventureBurn(darkSpiritTokenId);\n        }\n\n        if(darkHeroSpiritTokenId > 0) {\n            darkHeroSpiritsContract.adventureBurn(darkHeroSpiritTokenId);\n        }\n\n        return (darkSpiritTokenId, darkHeroSpiritTokenId);\n    }\n\n    /// @dev Returns potion quest details by claim id and removes the potion quest lookup entry.\n    ///\n    /// Throws when no potion quest is found for the specified claim id (start timestamp is zero).\n    /// Throws when the caller did not create the specified claim id (adventurer not the same as caller).\n    function _getAndClearPotionQuestStatus(uint256 claimId) private returns (address adventurer, uint256 darkSpiritTokenId, uint256 darkHeroSpiritTokenId, bool questCompleted) {\n        PotionQuest memory potionQuest = potionQuestLookup[claimId];\n\n        uint256 startTimestamp = potionQuest.startTimestamp;\n        adventurer = potionQuest.adventurer;\n        darkSpiritTokenId = potionQuest.darkSpiritTokenId;\n        darkHeroSpiritTokenId = potionQuest.darkHeroSpiritTokenId;\n\n        if(startTimestamp == 0) {\n            revert NoPotionQuestFoundForSpecifiedClaimId();\n        }\n\n        if(adventurer != _msgSender()) {\n            revert CallerDidNotCreateClaimId();\n        }\n\n        unchecked {\n            questCompleted = block.timestamp - startTimestamp >= CRAFTING_DURATION;\n        }\n\n        delete potionQuestLookup[claimId];\n\n        return (adventurer, darkSpiritTokenId, darkHeroSpiritTokenId, questCompleted);\n    }\n}"
36     },
37     "limit-break-contracts/contracts/adventures/IAdventure.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventure\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventure` contracts must conform to.\n * @dev All contracts that implement the adventure/quest system and interact with an {IAdventurous} token are required to implement this interface.\n */\ninterface IAdventure is IERC165 {\n\n    /**\n     * @dev Returns whether or not quests on this adventure lock tokens.\n     * Developers of adventure contract should ensure that this is immutable \n     * after deployment of the adventure contract.  Failure to do so\n     * can lead to error that deadlock token transfers.\n     */\n    function questsLockTokens() external view returns (bool);\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestEntered(address adventurer, uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully exited.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestExited(address adventurer, uint256 tokenId, uint256 questId, uint256 questStartTimestamp) external;\n}\n"
39     },
40     "limit-break-contracts/contracts/adventures/IAdventurous.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Quest.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventurous\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventurous` token contracts must conform to in order to support adventures and quests.\n * @dev All contracts that support adventures and quests are required to implement this interface.\n */\ninterface IAdventurous is IERC165 {\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets, for special in-game adventures.\n     */ \n    event AdventureApprovalForAll(address indexed tokenOwner, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when a token enters or exits a quest\n     */\n    event QuestUpdated(uint256 indexed tokenId, address indexed tokenOwner, address indexed adventure, uint256 questId, bool active, bool booted);\n\n    /**\n     * @notice Transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Safe transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureSafeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Burns a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureBurn(uint256 tokenId) external;\n\n    /**\n     * @notice Enters a player's token into a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function enterQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Exits a player's token from a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function exitQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Returns the number of quests a token is actively participating in for a specified adventure\n     */\n    function getQuestCount(uint256 tokenId, address adventure) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of time a token has been participating in the specified quest\n     */\n    function getTimeOnQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a token is currently participating in the specified quest as well as the time it was started and the quest index\n     */\n    function isParticipatingInQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (bool participatingInQuest, uint256 startTimestamp, uint256 index);\n\n    /**\n     * @notice Returns a list of all active quests for the specified token id and adventure\n     */\n    function getActiveQuests(uint256 tokenId, address adventure) external view returns (Quest[] memory activeQuests);\n}\n"
42     },
43     "limit-break-contracts/contracts/adventures/IAdventurousERC721.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IAdventurous.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IAdventurousERC721\n * @author Limit Break, Inc.\n * @notice Combines all {IAdventurous} and all {IERC721} functionality into a single, unified interface.\n * @dev This interface may be used as a convenience to interact with tokens that support both interface standards.\n */\ninterface IAdventurousERC721 is IERC721, IAdventurous {\n\n}"
45     },
46     "limit-break-contracts/contracts/adventures/Quest.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title Quest\n * @author Limit Break, Inc.\n * @notice Quest data structure for {IAdventurous} contracts.\n */\nstruct Quest {\n    bool isActive;\n    uint32 questId;\n    uint64 startTimestamp;\n    uint32 arrayIndex;\n}"
48     }
49   },
50   "settings": {
51     "optimizer": {
52       "enabled": true,
53       "runs": 1500
54     },
55     "outputSelection": {
56       "*": {
57         "*": [
58           "evm.bytecode",
59           "evm.deployedBytecode",
60           "devdoc",
61           "userdoc",
62           "metadata",
63           "abi"
64         ]
65       }
66     },
67     "libraries": {}
68   }
69 }}