1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/WallStreetWolves.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/****************************************\n * @team:   GoldenX                     *\n ****************************************\n *   Blimpie-ERC721 provides low-gas    *\n *           mints + transfers          *\n ***************************************/\n\nimport \"./Delegated.sol\";\nimport \"./PaymentSplitterMod.sol\";\nimport \"./ERC721Staked.sol\";\nimport \"./Verify.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ninterface IWSWFounders {\n  function balanceOf(address _account, uint256 _id)\n    external\n    view\n    returns (uint256);\n}\n\ncontract WallStreetWolves is\n  Delegated,\n  ERC721Staked,\n  Verify,\n  PaymentSplitterMod\n{\n  using Strings for uint256;\n\n  uint256 public MAX_SUPPLY = 10000;\n  uint256 public PRICE = 0.5 ether;\n\n  uint256 public CURRENT_ROUND = 1;\n  uint256 public ROUND_SUPPLY = 2500;\n  uint256 public ROUND_MINTED = 0;\n  uint256 public PRESALE_QUANTITY = 2;\n  uint256 public PUBLIC_QUANTITY = 20;\n\n  mapping(address => uint256) private foundersQuantities;\n  mapping(uint256 => mapping(address => uint256)) private presaleMinters;\n\n  string private tokenURIPrefix;\n  string private tokenURISuffix;\n\n  address private teamAddress = 0x2d2352a56827515FAf6088c4cDf59befb4d0A67a;\n\n  enum SaleState {\n    paused,\n    founders,\n    presale,\n    publicsale\n  }\n\n  SaleState public saleState = SaleState.paused;\n\n  IWSWFounders public WSWFoundersProxy =\n    IWSWFounders(0x48C8eC816F7789C2d4A517fca3D2fa33ac3Cc1c7);\n\n  address[] private splitter = [\n    0xed386149321FBd84f0c4e27a1701Ad05eCA32f8A,\n    0x2d2352a56827515FAf6088c4cDf59befb4d0A67a,\n    0x5B1DC9219786c7929B4684eF8301bdF4F1d67465\n  ];\n  uint256[] private splitterShares = [3, 85, 12];\n\n  constructor(address _signer)\n    ERC721B(\"Wall Street Wolves\", \"WSW\", 0)\n    PaymentSplitterMod(splitter, splitterShares)\n  {\n    setSigner(_signer);\n  }\n\n  //external payable\n  fallback() external payable {}\n\n  function airdrop(address _address, uint256 _quantity) public onlyDelegates {\n    require(\n      totalSupply() + _quantity <= MAX_SUPPLY,\n      \"airdrop: Invalid quantity.\"\n    );\n    for (uint256 i; i < _quantity; ++i) {\n      mint1(_address);\n    }\n  }\n\n  function mint(uint256 _quantity, bytes memory _signature) public payable {\n    require(saleState != SaleState.paused, \"mint: Sale paused\");\n    require(totalSupply() + _quantity <= MAX_SUPPLY, \"mint: Invalid quantity.\");\n\n    if (saleState == SaleState.founders) {\n      uint256 balance = WSWFoundersProxy.balanceOf(msg.sender, 0);\n      require(\n        balance >= _quantity + foundersQuantities[msg.sender],\n        \"mint: Invalid founders quantity\"\n      );\n      foundersQuantities[msg.sender] += _quantity;\n    } else if (saleState == SaleState.presale) {\n      require(msg.value >= _quantity * PRICE, \"mint: Incorrect ETH sent.\");\n      require(\n        ROUND_MINTED + _quantity <= ROUND_SUPPLY,\n        \"mint: Invalid quantity\"\n      );\n      require(\n        _quantity + presaleMinters[CURRENT_ROUND][msg.sender] <=\n          PRESALE_QUANTITY,\n        \"mint: Invalid quantity.\"\n      );\n      require(verify(_quantity, _signature), \"mint: Not on presale list.\");\n      ROUND_MINTED += _quantity;\n      presaleMinters[CURRENT_ROUND][msg.sender] += _quantity;\n    } else if (saleState == SaleState.publicsale) {\n      require(msg.value >= _quantity * PRICE, \"mint: Incorrect ETH sent.\");\n      require(\n        ROUND_MINTED + _quantity <= ROUND_SUPPLY,\n        \"mint: Invalid quantity\"\n      );\n      require(_quantity <= PUBLIC_QUANTITY, \"mint: Invalid quantity.\");\n      ROUND_MINTED += _quantity;\n    }\n\n    for (uint256 i; i < _quantity; ++i) {\n      mint1(msg.sender);\n    }\n  }\n\n  function resetRound(\n    uint256 _roundSupply,\n    uint256 _price,\n    uint256 _airdropQuantity\n  ) external onlyDelegates {\n    ROUND_SUPPLY = _roundSupply;\n    ROUND_MINTED = 0;\n    PRICE = _price;\n    saleState = SaleState.presale;\n    CURRENT_ROUND += 1;\n\n    if (_airdropQuantity > 0) {\n      airdrop(teamAddress, _airdropQuantity);\n    }\n  }\n\n  function setVariables(\n    uint256 _maxSupply,\n    uint256 _price,\n    SaleState _saleState,\n    uint256 _presaleQuantity,\n    uint256 _publicQuantity\n  ) external onlyDelegates {\n    MAX_SUPPLY = _maxSupply;\n    PRICE = _price;\n    saleState = _saleState;\n    PRESALE_QUANTITY = _presaleQuantity;\n    PUBLIC_QUANTITY = _publicQuantity;\n  }\n\n  function setTeamAddress(address _newTeamAddress) external onlyDelegates {\n    require(teamAddress != _newTeamAddress);\n    teamAddress = _newTeamAddress;\n  }\n\n  function setSaleState(SaleState _newSaleState) external onlyDelegates {\n    require(saleState != _newSaleState);\n    saleState = _newSaleState;\n  }\n\n  function setWSWFoundersContract(address _wswFounders) external onlyDelegates {\n    if (address(WSWFoundersProxy) != _wswFounders)\n      WSWFoundersProxy = IWSWFounders(_wswFounders);\n  }\n\n  function setRarity(uint256[] memory _tokensToSet, uint8 rarity)\n    external\n    onlyDelegates\n  {\n    require(totalSupply() > _tokensToSet.length, \"setRarity: invalid length\");\n    for (uint256 i; i < _tokensToSet.length; ++i) {\n      tokens[_tokensToSet[i]].rarity = rarity;\n    }\n  }\n\n  function setTokenURI(\n    string memory _tokenURIPrefix,\n    string memory _tokenURISuffix\n  ) public onlyDelegates {\n    tokenURIPrefix = _tokenURIPrefix;\n    tokenURISuffix = _tokenURISuffix;\n  }\n\n  function tokenURI(uint256 _tokenId)\n    external\n    view\n    override\n    returns (string memory)\n  {\n    require(_exists(_tokenId), \"tokenURI: Query for nonexistent token\");\n    return\n      string(\n        abi.encodePacked(tokenURIPrefix, _tokenId.toString(), tokenURISuffix)\n      );\n  }\n\n  function mint1(address _to) internal {\n    uint256 tokenId = _next();\n    tokens.push(Token(_to, 1, 1));\n\n    _safeMint(_to, tokenId, \"\");\n  }\n\n  function _mint(address _to, uint256 _tokenId) internal override {\n    emit Transfer(address(0), _to, _tokenId);\n  }\n}\n"
6     },
7     "contracts/Delegated.sol": {
8       "content": "\n// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\n/***********************\n* @author: squeebo_nft *\n************************/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable{\n  mapping(address => bool) internal _delegates;\n\n  constructor(){\n    _delegates[owner()] = true;\n  }\n\n  modifier onlyDelegates {\n    require(_delegates[msg.sender], \"Invalid delegate\" );\n    _;\n  }\n\n  //onlyOwner\n  function isDelegate( address addr ) external view onlyOwner returns ( bool ){\n    return _delegates[addr];\n  }\n\n  function setDelegate( address addr, bool isDelegate_ ) external onlyOwner{\n    _delegates[addr] = isDelegate_;\n  }\n\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\n    _delegates[newOwner] = true;\n    super.transferOwnership( newOwner );\n  }\n}"
9     },
10     "contracts/PaymentSplitterMod.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n */\ncontract PaymentSplitterMod is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + _totalReleased;\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] = _released[account] + payment;\n        _totalReleased = _totalReleased + payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    function _addPayee(address account, uint256 shares_) internal {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n\n    function _resetCounters() internal {\n        _totalReleased = 0;\n        for(uint i; i < _payees.length; ++i ){\n            _released[ _payees[i] ] = 0;\n        }\n    }\n\n    function _setPayee( uint index, address account, uint newShares ) internal {\n        _totalShares = _totalShares - _shares[ account ] + newShares;\n        _shares[ account ] = newShares;\n        _payees[ index ] = account;\n    }\n}"
12     },
13     "contracts/ERC721Staked.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./Delegated.sol\";\nimport \"./ERC721Batch.sol\";\nimport \"./IERC20Proxy.sol\";\n\nabstract contract ERC721Staked is Delegated, ERC721Batch {\n  using Strings for uint256;\n\n  struct StakeConfig {\n    address coinContract;\n    uint256 stakePeriod;\n    uint256 stakeReward;\n  }\n\n  StakeConfig public stakeConfig;\n\n  mapping(uint8 => uint256) public rarityMultiplier;\n\n  function setRarityMultiplier(uint8 _rarity, uint256 _multiplier)\n    external\n    onlyDelegates\n  {\n    rarityMultiplier[_rarity] = _multiplier;\n  }\n\n  function claimTokens(uint256[] calldata tokenIds, bool restake) external {\n    uint256 coinQuantity;\n    uint32 time = uint32(block.timestamp);\n    for (uint256 i; i < tokenIds.length; ++i) {\n      require(_exists(tokenIds[i]), \"claim for nonexistent token\");\n\n      Token storage token = tokens[tokenIds[i]];\n      require(token.owner == msg.sender, \"caller is not owner\");\n      require(\n        token.stakeDate > 1,\n        string(\n          abi.encodePacked(\"token \", tokenIds[i].toString(), \" is not staked\")\n        )\n      );\n      uint256 baseQuantity = ((time - token.stakeDate) *\n        stakeConfig.stakeReward) / stakeConfig.stakePeriod;\n\n      coinQuantity += baseQuantity * rarityMultiplier[token.rarity];\n\n      if (restake) token.stakeDate = time;\n      else token.stakeDate = 1;\n    }\n\n    IERC20Proxy(stakeConfig.coinContract).mintTo(msg.sender, coinQuantity);\n  }\n\n  function stakeTokens(uint256[] calldata tokenIds) external {\n    for (uint256 i; i < tokenIds.length; ++i) {\n      require(_exists(tokenIds[i]), \"stake for nonexistent token\");\n\n      Token storage token = tokens[tokenIds[i]];\n      require(token.owner == msg.sender, \"caller is not owner\");\n      require(\n        token.stakeDate < 2,\n        string(\n          abi.encodePacked(\n            \"token \",\n            tokenIds[i].toString(),\n            \" is already staked\"\n          )\n        )\n      );\n      tokens[tokenIds[i]].stakeDate = uint32(block.timestamp);\n    }\n  }\n\n  //delegated\n  function setStakeConfig(StakeConfig calldata stakeConfig_)\n    external\n    onlyDelegates\n  {\n    stakeConfig = stakeConfig_;\n  }\n\n  //internal\n  function _isStaked(uint256 tokenId) internal view virtual returns (bool) {\n    return tokens[tokenId].stakeDate > 1;\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override {\n    require(!_isStaked(tokenId), \"token is staked\");\n    super._transfer(from, to, tokenId);\n  }\n}\n"
15     },
16     "contracts/Verify.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Delegated.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract Verify is Delegated {\n    using Strings for uint;\n    using ECDSA for bytes32;\n\n    address private signer;\n    \n    function verify( uint _quantity,  bytes memory _signature ) internal view returns ( bool ) {\n        address signerCheck = getAddressSigner( _quantity.toString(), _signature );\n        return signerCheck == signer;\n    }\n\n    function getAddressSigner( string memory _quantity, bytes memory _signature ) private view returns ( address ) {\n        bytes32 hash = createHash( _quantity );\n        return hash.toEthSignedMessageHash().recover( _signature );\n    }\n\n    function createHash( string memory _quantity ) private view returns ( bytes32 ) {\n        return keccak256( abi.encodePacked( address(this), msg.sender, _quantity ) );\n    }\n    \n    function setSigner( address _signer ) public onlyOwner{\n        signer = _signer;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Strings.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Address.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
30     },
31     "contracts/ERC721Batch.sol": {
32       "content": "\n// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\n/****************************************\n * @author: squeebo_nft                 *\n ****************************************\n *   Blimpie-FF721 provides low-gas     *\n *       mints + transfers              *\n ****************************************/\n\nimport \"./IERC721Batch.sol\";\nimport \"./ERC721EnumerableB.sol\";\n\nabstract contract ERC721Batch is ERC721EnumerableB, IERC721Batch {\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view override returns( bool ){\n    for(uint i; i < tokenIds.length; ++i ){\n      if( account != tokens[ tokenIds[i] ].owner )\n        return false;\n    }\n\n    return true;\n  }\n\n  function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external override{\n    for(uint i; i < tokenIds.length; ++i ){\n      safeTransferFrom( from, to, tokenIds[i], data );\n    }\n  }\n\n  function walletOfOwner( address account ) external view override returns( uint[] memory wallet ){\n    uint count;\n    uint quantity = balanceOf( account );\n    wallet = new uint[]( quantity );\n    for( uint i; i < tokens.length; ++i ){\n      if( account == tokens[i].owner ){\n        wallet[ count++ ] = i;\n        if( count == quantity )\n          break;\n      }\n    }\n    return wallet;\n  }\n}"
33     },
34     "contracts/IERC20Proxy.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Proxy is IERC20 {\n  function burnFrom( address account, uint256 amount ) external;\n  function mintTo( address account, uint256 amount ) external;\n}"
36     },
37     "contracts/IERC721Batch.sol": {
38       "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\ninterface IERC721Batch {\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool );\n  function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external;\n  function walletOfOwner( address account ) external view returns( uint[] memory );\n}"
39     },
40     "contracts/ERC721EnumerableB.sol": {
41       "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\n/****************************************\n * @author: squeebo_nft                 *\n ****************************************\n *   Blimpie-ERC721 provides low-gas    *\n *       mints + transfers              *\n ****************************************/\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./ERC721B.sol\";\n\nabstract contract ERC721EnumerableB is ERC721B, IERC721Enumerable {\n  function supportsInterface( bytes4 interfaceId ) public view virtual override(IERC165, ERC721B) returns( bool isSupported ){\n    return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  function tokenOfOwnerByIndex( address owner, uint index ) external view override returns( uint tokenId ){\n    uint count;\n    for( uint i; i < tokens.length; ++i ){\n      if( owner == tokens[i].owner ){\n        if( count == index )\n          return i;\n        else\n          ++count;\n      }\n    }\n\n    revert(\"ERC721EnumerableB: owner index out of bounds\");\n  }\n\n  function tokenByIndex( uint index ) external view override returns( uint tokenId ){\n    require( index < totalSupply(), \"ERC721EnumerableB: query for nonexistent token\");\n    return index + _offset;\n  }\n\n  function totalSupply() public view override( ERC721B, IERC721Enumerable ) returns( uint ){\n    return ERC721B.totalSupply();\n  }\n}"
42     },
43     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
45     },
46     "contracts/ERC721B.sol": {
47       "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\n/****************************************\n *   Blimpie-FF721 provides low-gas  *\n *     mints + transfers        *\n ****************************************/\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract ERC721B is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n\n  struct Token {\n    address owner;\n    uint32 stakeDate;\n    uint8 rarity;\n  }\n\n  Token[] public tokens;\n\n  uint256 internal _burned;\n  uint256 internal _offset;\n  string private _name;\n  string private _symbol;\n\n  mapping(uint256 => address) internal _tokenApprovals;\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 offset_\n  ) {\n    _name = name_;\n    _symbol = symbol_;\n\n    _offset = offset_;\n    for (uint256 i; i < _offset; ++i) {\n      tokens.push();\n    }\n  }\n\n  function balanceOf(address owner) public view override returns (uint256) {\n    require(owner != address(0), \"Query for null address\");\n    uint256 balance = 0;\n    for (uint256 i; i < tokens.length; ++i) {\n      if (owner == tokens[i].owner) {\n        ++balance;\n      }\n    }\n    return balance;\n  }\n\n  function name() external view override returns (string memory name_) {\n    return _name;\n  }\n\n  function ownerOf(uint256 tokenId)\n    public\n    view\n    override\n    returns (address owner)\n  {\n    require(_exists(tokenId), \"ERC721B: query for nonexistent token\");\n    return tokens[tokenId].owner;\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool isSupported)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function symbol() external view override returns (string memory symbol_) {\n    return _symbol;\n  }\n\n  function totalSupply() public view virtual returns (uint256) {\n    return tokens.length - (_burned + _offset);\n  }\n\n  //approvals\n  function approve(address to, uint256 tokenId) external override {\n    address owner = ownerOf(tokenId);\n    require(to != owner, \"ERC721B: approval to current owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721B: caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId);\n  }\n\n  function getApproved(uint256 tokenId)\n    public\n    view\n    override\n    returns (address approver)\n  {\n    require(_exists(tokenId), \"ERC721: query for nonexistent token\");\n    return _tokenApprovals[tokenId];\n  }\n\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    override\n    returns (bool isApproved)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  function setApprovalForAll(address operator, bool approved)\n    external\n    override\n  {\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  //transfers\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public override {\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      \"ERC721B: caller is not owner nor approved\"\n    );\n    _safeTransfer(from, to, tokenId, _data);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external override {\n    //solhint-disable-next-line max-line-length\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      \"ERC721B: caller is not owner nor approved\"\n    );\n    _transfer(from, to, tokenId);\n  }\n\n  //internal\n  function _approve(address to, uint256 tokenId) internal {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(ownerOf(tokenId), to, tokenId);\n  }\n\n  function _burn(uint256 tokenId) internal {\n    address owner = ownerOf(tokenId);\n\n    // Clear approvals\n    _approve(address(0), tokenId);\n    tokens[tokenId].owner = address(0);\n\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721B: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return tokenId < tokens.length && tokens[tokenId].owner != address(0);\n  }\n\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\n    internal\n    view\n    returns (bool isApproved)\n  {\n    require(_exists(tokenId), \"ERC721B: query for nonexistent token\");\n    address owner = ownerOf(tokenId);\n    return (spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender));\n  }\n\n  function _mint(address to, uint256 tokenId) internal virtual;\n\n  function _next() internal view virtual returns (uint256) {\n    return tokens.length + _offset;\n  }\n\n  function _safeMint(address to, uint256 tokenId) internal {\n    _safeMint(to, tokenId, \"\");\n  }\n\n  function _safeMint(\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) internal {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, _data),\n      \"ERC721B: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) internal {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, _data),\n      \"ERC721B: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual {\n    require(\n      ownerOf(tokenId) == from,\n      \"ERC721B: transfer of token that is not own\"\n    );\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId);\n    tokens[tokenId].owner = to;\n\n    emit Transfer(from, to, tokenId);\n  }\n}\n"
48     },
49     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
51     },
52     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
57     },
58     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
60     },
61     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
63     },
64     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
66     },
67     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
69     }
70   },
71   "settings": {
72     "optimizer": {
73       "enabled": true,
74       "runs": 200
75     },
76     "outputSelection": {
77       "*": {
78         "*": [
79           "evm.bytecode",
80           "evm.deployedBytecode",
81           "devdoc",
82           "userdoc",
83           "metadata",
84           "abi"
85         ]
86       }
87     },
88     "libraries": {}
89   }
90 }}