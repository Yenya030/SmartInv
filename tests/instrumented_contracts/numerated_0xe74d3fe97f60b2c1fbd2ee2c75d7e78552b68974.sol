1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/Interfaces/IERC1363.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC165.sol\";\n\ninterface IERC1363 is IERC165, IERC20 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/Interfaces/IERC165.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
9     },
10     "lib/openzeppelin-contracts/contracts/Interfaces/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
12     },
13     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
21     },
22     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "lib/openzeppelin-contracts/contracts/utils/Multicall.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
33     },
34     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
39     },
40     "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
42     },
43     "lib/solmate/src/utils/SignedWadMath.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @notice Signed 18 decimal fixed point (wad) arithmetic library.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SignedWadMath.sol)\n/// @author Modified from Remco Bloemen (https://xn--2-umb.com/22/exp-ln/index.html)\n\n/// @dev Will not revert on overflow, only use where overflow is not possible.\nfunction toWadUnsafe(uint256 x) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18.\n        r := mul(x, 1000000000000000000)\n    }\n}\n\n/// @dev Takes an integer amount of seconds and converts it to a wad amount of days.\n/// @dev Will not revert on overflow, only use where overflow is not possible.\n/// @dev Not meant for negative second amounts, it assumes x is positive.\nfunction toDaysWadUnsafe(uint256 x) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18 and then divide it by 86400.\n        r := div(mul(x, 1000000000000000000), 86400)\n    }\n}\n\n/// @dev Takes a wad amount of days and converts it to an integer amount of seconds.\n/// @dev Will not revert on overflow, only use where overflow is not possible.\n/// @dev Not meant for negative day amounts, it assumes x is positive.\nfunction fromDaysWadUnsafe(int256 x) pure returns (uint256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 86400 and then divide it by 1e18.\n        r := div(mul(x, 86400), 1000000000000000000)\n    }\n}\n\n/// @dev Will not revert on overflow, only use where overflow is not possible.\nfunction unsafeWadMul(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by y and divide by 1e18.\n        r := sdiv(mul(x, y), 1000000000000000000)\n    }\n}\n\n/// @dev Will return 0 instead of reverting if y is zero and will\n/// not revert on overflow, only use where overflow is not possible.\nfunction unsafeWadDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Multiply x by 1e18 and divide it by y.\n        r := sdiv(mul(x, 1000000000000000000), y)\n    }\n}\n\nfunction wadMul(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Store x * y in r for now.\n        r := mul(x, y)\n\n        // Equivalent to require(x == 0 || (x * y) / x == y)\n        if iszero(or(iszero(x), eq(sdiv(r, x), y))) {\n            revert(0, 0)\n        }\n\n        // Scale the result down by 1e18.\n        r := sdiv(r, 1000000000000000000)\n    }\n}\n\nfunction wadDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Store x * 1e18 in r for now.\n        r := mul(x, 1000000000000000000)\n\n        // Equivalent to require(y != 0 && ((x * 1e18) / 1e18 == x))\n        if iszero(and(iszero(iszero(y)), eq(sdiv(r, 1000000000000000000), x))) {\n            revert(0, 0)\n        }\n\n        // Divide r by y.\n        r := sdiv(r, y)\n    }\n}\n\n/// @dev Will not work with negative bases, only use when x is positive.\nfunction wadPow(int256 x, int256 y) pure returns (int256) {\n    // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\n    return wadExp((wadLn(x) * y) / 1e18); // Using ln(x) means x must be greater than 0.\n}\n\nfunction wadExp(int256 x) pure returns (int256 r) {\n    unchecked {\n        // When the result is < 0.5 we return zero. This happens when\n        // x <= floor(log(0.5e18) * 1e18) ~ -42e18\n        if (x <= -42139678854452767551) return 0;\n\n        // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\n        // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\n        if (x >= 135305999368893231589) revert(\"EXP_OVERFLOW\");\n\n        // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\n        // for more intermediate precision and a binary basis. This base conversion\n        // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\n        x = (x << 78) / 5**18;\n\n        // Reduce range of x to (-½ ln 2, ½ ln 2) * 2**96 by factoring out powers\n        // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\n        // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\n        int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\n        x = x - k * 54916777467707473351141471128;\n\n        // k is in the range [-61, 195].\n\n        // Evaluate using a (6, 7)-term rational approximation.\n        // p is made monic, we'll multiply by a scale factor later.\n        int256 y = x + 1346386616545796478920950773328;\n        y = ((y * x) >> 96) + 57155421227552351082224309758442;\n        int256 p = y + x - 94201549194550492254356042504812;\n        p = ((p * y) >> 96) + 28719021644029726153956944680412240;\n        p = p * x + (4385272521454847904659076985693276 << 96);\n\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\n        int256 q = x - 2855989394907223263936484059900;\n        q = ((q * x) >> 96) + 50020603652535783019961831881945;\n        q = ((q * x) >> 96) - 533845033583426703283633433725380;\n        q = ((q * x) >> 96) + 3604857256930695427073651918091429;\n        q = ((q * x) >> 96) - 14423608567350463180887372962807573;\n        q = ((q * x) >> 96) + 26449188498355588339934803723976023;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Div in assembly because solidity adds a zero check despite the unchecked.\n            // The q polynomial won't have zeros in the domain as all its roots are complex.\n            // No scaling is necessary because p is already 2**96 too large.\n            r := sdiv(p, q)\n        }\n\n        // r should be in the range (0.09, 0.25) * 2**96.\n\n        // We now need to multiply r by:\n        // * the scale factor s = ~6.031367120.\n        // * the 2**k factor from the range reduction.\n        // * the 1e18 / 2**96 factor for base conversion.\n        // We do this all at once, with an intermediate result in 2**213\n        // basis, so the final right shift is always by a positive amount.\n        r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\n    }\n}\n\nfunction wadLn(int256 x) pure returns (int256 r) {\n    unchecked {\n        require(x > 0, \"UNDEFINED\");\n\n        // We want to convert x from 10**18 fixed point to 2**96 fixed point.\n        // We do this by multiplying by 2**96 / 10**18. But since\n        // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\n        // and add ln(2**96 / 10**18) at the end.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\n            r := or(r, lt(0x1, shr(r, x)))\n        }\n\n        // Reduce range of x to (1, 2) * 2**96\n        // ln(2^k * x) = k * ln(2) + ln(x)\n        int256 k = r - 96;\n        x <<= uint256(159 - k);\n        x = int256(uint256(x) >> 159);\n\n        // Evaluate using a (8, 8)-term rational approximation.\n        // p is made monic, we will multiply by a scale factor later.\n        int256 p = x + 3273285459638523848632254066296;\n        p = ((p * x) >> 96) + 24828157081833163892658089445524;\n        p = ((p * x) >> 96) + 43456485725739037958740375743393;\n        p = ((p * x) >> 96) - 11111509109440967052023855526967;\n        p = ((p * x) >> 96) - 45023709667254063763336534515857;\n        p = ((p * x) >> 96) - 14706773417378608786704636184526;\n        p = p * x - (795164235651350426258249787498 << 96);\n\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\n        // q is monic by convention.\n        int256 q = x + 5573035233440673466300451813936;\n        q = ((q * x) >> 96) + 71694874799317883764090561454958;\n        q = ((q * x) >> 96) + 283447036172924575727196451306956;\n        q = ((q * x) >> 96) + 401686690394027663651624208769553;\n        q = ((q * x) >> 96) + 204048457590392012362485061816622;\n        q = ((q * x) >> 96) + 31853899698501571402653359427138;\n        q = ((q * x) >> 96) + 909429971244387300277376558375;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Div in assembly because solidity adds a zero check despite the unchecked.\n            // The q polynomial is known not to have zeros in the domain.\n            // No scaling required because p is already 2**96 too large.\n            r := sdiv(p, q)\n        }\n\n        // r is in the range (0, 0.125) * 2**96\n\n        // Finalization, we need to:\n        // * multiply by the scale factor s = 5.549…\n        // * add ln(2**96 / 10**18)\n        // * add k * ln(2)\n        // * multiply by 10**18 / 2**96 = 5**18 >> 78\n\n        // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\n        r *= 1677202110996718588342820967067443963516166;\n        // add ln(2) * k * 5e18 * 2**192\n        r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\n        // add ln(2**96 / 10**18) * 5e18 * 2**192\n        r += 600920179829731861736702779321621459595472258049074101567377883020018308;\n        // base conversion: mul 2**18 / 2**192\n        r >>= 174;\n    }\n}\n\n/// @dev Will return 0 instead of reverting if y is zero.\nfunction unsafeDiv(int256 x, int256 y) pure returns (int256 r) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        // Divide x by y.\n        r := sdiv(x, y)\n    }\n}\n"
45     },
46     "src/GenesisGalaxy.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./utils/EntityUtils.sol\";\nimport \"./utils/Sample.sol\";\nimport \"./systems/SpatialSystem.sol\";\nimport \"./systems/MiningSystem.sol\";\nimport \"./IERC20Resource.sol\";\nimport \"./IMiaocraft.sol\";\nimport \"./constants.sol\";\n\nstruct EmissionInfo {\n    uint128 seed;\n    uint128 amount;\n}\n\nstruct AsteroidInfo {\n    address resource;\n    uint256 initialSupply;\n    uint256 rewardPerSecond;\n    int256 x;\n    int256 y;\n}\n\nstruct AsteroidInfoExtended {\n    uint256 id;\n    uint128 emissionId;\n    uint32 index;\n    bool identified;\n    AsteroidInfo asteroidInfo;\n    MineInfo mineInfo;\n}\n\ncontract GenesisGalaxy is\n    SpatialSystem,\n    MiningSystem,\n    Initializable,\n    Ownable,\n    Multicall\n{\n    uint256 public immutable ASTEROIDS_PER_EMISSION;\n    uint256 public immutable MAX_DEPLETION_INTERVAL;\n    uint256 public immutable MAX_RADIUS;\n    uint256 public immutable SPEED; // per second\n\n    IERC20Resource public butter;\n    IMiaocraft public miaocraft;\n    address public sbh;\n\n    EmissionInfo[] public _emissionInfos;\n    mapping(uint256 => uint256) public identifiedBitmaps;\n\n    constructor(\n        uint256 asteroidsPerEmission,\n        uint256 maxDepletionInterval,\n        uint256 maxRadius,\n        uint256 speed\n    ) {\n        ASTEROIDS_PER_EMISSION = asteroidsPerEmission;\n        MAX_DEPLETION_INTERVAL = maxDepletionInterval;\n        MAX_RADIUS = maxRadius;\n        SPEED = speed;\n    }\n\n    function initialize(\n        address butter_,\n        address miaocraft_,\n        address sbh_\n    ) public initializer {\n        butter = IERC20Resource(butter_);\n        miaocraft = IMiaocraft(miaocraft_);\n        sbh = sbh_;\n\n        // initialize the origin\n        _add(getOrigin());\n\n        _transferOwnership(msg.sender);\n    }\n\n    function getEmission(uint256 emissionId)\n        public\n        view\n        returns (EmissionInfo memory emissionInfo)\n    {\n        emissionInfo = _emissionInfos[emissionId];\n    }\n\n    function getEmissionCount() public view returns (uint256) {\n        return _emissionInfos.length;\n    }\n\n    function getAsteroids(uint256 emissionId)\n        public\n        view\n        returns (AsteroidInfo[] memory asteroidInfos)\n    {\n        asteroidInfos = new AsteroidInfo[](ASTEROIDS_PER_EMISSION);\n        for (uint256 i = 0; i < ASTEROIDS_PER_EMISSION; i++) {\n            asteroidInfos[i] = getAsteroid(emissionId, i);\n        }\n    }\n\n    function getAsteroid(uint256 emissionId, uint256 index)\n        public\n        view\n        returns (AsteroidInfo memory asteroidInfo)\n    {\n        uint256 seed = uint256(\n            keccak256(abi.encodePacked(_emissionInfos[emissionId].seed, index))\n        );\n\n        // Although sqrt(1/(1e-18 + x)) is bounded, a manipulated vrf can force\n        // the multiplier to go to 1e9, which destroys the econmomy in an\n        // instant. So use sqrt(1/(1e-15 + x)) to cap the multiplier at 31.6\n        uint256 initialSupply = (sampleInvSqrt(seed++, 1e15) *\n            _emissionInfos[emissionId].amount) /\n            1e18 /\n            ASTEROIDS_PER_EMISSION;\n\n        // min reward rate is 1/2 the supply / depletion interval. Multiply b 2\n        // so that the min reward rate is supply / depletion interval.\n        uint256 rewardPerSecond = (2 *\n            (sampleInvSqrt(seed++, 1e15) * initialSupply)) /\n            1e18 /\n            MAX_DEPLETION_INTERVAL;\n\n        (int256 x, int256 y) = sampleCircle(\n            seed,\n            MAX_RADIUS / ASTEROID_COORD_PRECISION\n        );\n\n        asteroidInfo = AsteroidInfo({\n            resource: address(butter),\n            initialSupply: initialSupply,\n            rewardPerSecond: rewardPerSecond,\n            x: x * int256(ASTEROID_COORD_PRECISION),\n            y: y * int256(ASTEROID_COORD_PRECISION)\n        });\n    }\n\n    function getAsteroidExtended(uint256 emissionId, uint256 index)\n        public\n        view\n        returns (AsteroidInfoExtended memory)\n    {\n        return\n            _getAsteroidExtended(\n                emissionId,\n                index,\n                identifiedBitmaps[emissionId]\n            );\n    }\n\n    function getOrigin() public view returns (AsteroidInfo memory) {\n        uint256 genesisCost = GENESIS_SUPPLY *\n            miaocraft.buildCost(SPINS_PRECISION);\n        return\n            AsteroidInfo({\n                resource: address(butter),\n                initialSupply: 100 * genesisCost,\n                rewardPerSecond: genesisCost / MAX_DEPLETION_INTERVAL,\n                x: 0,\n                y: 0\n            });\n    }\n\n    function getOriginExtended()\n        public\n        view\n        returns (AsteroidInfoExtended memory)\n    {\n        return\n            AsteroidInfoExtended({\n                id: 0,\n                emissionId: 0,\n                index: uint32(ASTEROIDS_PER_EMISSION),\n                identified: true,\n                asteroidInfo: getOrigin(),\n                mineInfo: getMineInfo(tokenToEntity(address(this), 0))\n            });\n    }\n\n    function coordinateToAsteroidId(int256 x, int256 y)\n        public\n        pure\n        returns (uint256)\n    {\n        x /= int256(ASTEROID_COORD_PRECISION);\n        y /= int256(ASTEROID_COORD_PRECISION);\n        return\n            (uint256(x < 0 ? -x + ASTEROID_COORD_NEG_FLAG : x) *\n                uint256(ASTEROID_COORD_NEG_FLAG * 10)) +\n            (uint256(y < 0 ? -y + ASTEROID_COORD_NEG_FLAG : y));\n    }\n\n    function asteroidIdToCoordinate(uint256 asteroidId)\n        public\n        pure\n        returns (int256 x, int256 y)\n    {\n        x = int256(asteroidId) / ASTEROID_COORD_NEG_FLAG / 10;\n        y = int256(asteroidId) - x * ASTEROID_COORD_NEG_FLAG * 10;\n        x =\n            (\n                x / ASTEROID_COORD_NEG_FLAG == 0\n                    ? x\n                    : -(x - ASTEROID_COORD_NEG_FLAG)\n            ) *\n            int256(ASTEROID_COORD_PRECISION);\n        y =\n            (\n                y / ASTEROID_COORD_NEG_FLAG == 0\n                    ? y\n                    : -(y - ASTEROID_COORD_NEG_FLAG)\n            ) *\n            int256(ASTEROID_COORD_PRECISION);\n    }\n\n    function identified(uint256 emissionId, uint256 index)\n        public\n        view\n        returns (bool)\n    {\n        return _mapped(identifiedBitmaps[emissionId], index);\n    }\n\n    function _getAsteroidExtended(\n        uint256 emissionId,\n        uint256 index,\n        uint256 identifiedBitmap\n    ) internal view returns (AsteroidInfoExtended memory info) {\n        AsteroidInfo memory asteroidInfo = getAsteroid(emissionId, index);\n        uint256 asteroidId = coordinateToAsteroidId(\n            asteroidInfo.x,\n            asteroidInfo.y\n        );\n        return\n            AsteroidInfoExtended({\n                id: asteroidId,\n                emissionId: uint128(emissionId),\n                index: uint32(index),\n                identified: _mapped(identifiedBitmap, index),\n                asteroidInfo: asteroidInfo,\n                mineInfo: getMineInfo(tokenToEntity(address(this), asteroidId))\n            });\n    }\n\n    function _getAsteroidId(uint256 emissionId, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        AsteroidInfo memory info = getAsteroid(emissionId, index);\n        return coordinateToAsteroidId(info.x, info.y);\n    }\n\n    function _mapped(uint256 bitmap, uint256 index)\n        private\n        pure\n        returns (bool)\n    {\n        return bitmap & (1 << index) != 0;\n    }\n\n    function _requireDocked(uint256 shipEntityId, uint256 asteroidEntityId)\n        internal\n        view\n    {\n        require(locked(shipEntityId), \"Not docked\");\n        require(collocated(asteroidEntityId, shipEntityId), \"Not docked here\");\n    }\n\n    function addEmission(uint256 seed, uint256 amount) public {\n        require(msg.sender == sbh, \"Only sbh\");\n        _emissionInfos.push(\n            EmissionInfo({seed: uint128(seed), amount: uint128(amount)})\n        );\n    }\n\n    function identifyMultiple(uint256 emissionId, uint256[] memory indices)\n        public\n    {\n        for (uint256 i = 0; i < indices.length; i++) {\n            identify(emissionId, indices[i]);\n        }\n    }\n\n    function identifyAll(uint256 emissionId) public {\n        uint256 bitmap = identifiedBitmaps[emissionId];\n        for (uint256 i = 0; i < ASTEROIDS_PER_EMISSION; i++) {\n            if (!_mapped(bitmap, i)) identify(emissionId, i);\n        }\n    }\n\n    function identify(uint256 emissionId, uint256 index)\n        public\n        returns (uint256 asteroidId)\n    {\n        require(emissionId < _emissionInfos.length, \"Invalid emissionId\");\n        require(index < ASTEROIDS_PER_EMISSION, \"Invalid index\");\n        require(!identified(emissionId, index), \"Already identified\");\n        identifiedBitmaps[emissionId] |= 1 << index;\n\n        asteroidId = _add(getAsteroid(emissionId, index));\n    }\n\n    function dock(uint256 shipId, uint256 asteroidId)\n        public\n        onlyApprovedOrShipOwner(shipId)\n    {\n        uint256 shipEntityId = tokenToEntity(address(miaocraft), shipId);\n        uint256 asteroidEntityId = tokenToEntity(address(this), asteroidId);\n\n        require(!locked(shipEntityId), \"Already docked\");\n\n        _updateLocation(shipEntityId);\n\n        require(collocated(asteroidEntityId, shipEntityId), \"Out of orbit\");\n\n        _lock(shipEntityId);\n        _dock(shipEntityId, asteroidEntityId, miaocraft.spinsOf(shipId));\n    }\n\n    function redock(uint256 shipId, uint256 asteroidId) public {\n        uint256 shipEntityId = tokenToEntity(address(miaocraft), shipId);\n        uint256 asteroidEntityId = tokenToEntity(address(this), asteroidId);\n\n        _requireDocked(shipEntityId, asteroidEntityId);\n\n        uint256 sharesBefore = getExtractorInfo(asteroidEntityId, shipEntityId)\n            .shares;\n        uint256 sharesAfter = miaocraft.spinsOf(shipId);\n        if (sharesBefore > sharesAfter) {\n            _undock(shipEntityId, asteroidEntityId, sharesBefore - sharesAfter);\n        } else {\n            _dock(shipEntityId, asteroidEntityId, sharesAfter - sharesBefore);\n        }\n    }\n\n    function extract(uint256 shipId, uint256 asteroidId) public {\n        _extract(\n            tokenToEntity(address(miaocraft), shipId),\n            tokenToEntity(address(this), asteroidId)\n        );\n    }\n\n    function identifyAndDock(\n        uint256 emissionId,\n        uint256 index,\n        uint256 shipId\n    ) public {\n        uint256 asteroidId;\n        if (!identified(emissionId, index)) {\n            asteroidId = identify(emissionId, index);\n        } else {\n            asteroidId = _getAsteroidId(emissionId, index);\n        }\n        dock(shipId, asteroidId);\n    }\n\n    function undockAndExtract(uint256 shipId, uint256 asteroidId)\n        public\n        onlyApprovedOrShipOwner(shipId)\n    {\n        uint256 shipEntityId = tokenToEntity(address(miaocraft), shipId);\n        uint256 asteroidEntityId = tokenToEntity(address(this), asteroidId);\n\n        _requireDocked(shipEntityId, asteroidEntityId);\n\n        _undockAndExtract(\n            shipEntityId,\n            asteroidEntityId,\n            getExtractorInfo(asteroidEntityId, shipEntityId).shares\n        );\n        _unlock(shipEntityId);\n    }\n\n    function emergencyUndock(uint256 shipId, uint256 asteroidId)\n        public\n        onlyApprovedOrShipOwner(shipId)\n    {\n        uint256 shipEntityId = tokenToEntity(address(miaocraft), shipId);\n        _emergencyUndock(\n            shipEntityId,\n            tokenToEntity(address(this), asteroidId)\n        );\n        _unlock(shipEntityId);\n    }\n\n    function undockExtractAndMove(\n        uint256 shipId,\n        uint256 fromAsteroidId,\n        uint256 toAsteroidId\n    ) public {\n        (int256 x, int256 y) = coordinate(\n            tokenToEntity(address(this), toAsteroidId)\n        );\n        undockExtractAndMove(shipId, fromAsteroidId, x, y);\n    }\n\n    function undockExtractAndMove(\n        uint256 shipId,\n        uint256 asteroidId,\n        int256 xDest,\n        int256 yDest\n    ) public onlyApprovedOrShipOwner(shipId) {\n        uint256 shipEntityId = tokenToEntity(address(miaocraft), shipId);\n        uint256 asteroidEntityId = tokenToEntity(address(this), asteroidId);\n\n        _requireDocked(shipEntityId, asteroidEntityId);\n\n        _undockAndExtract(\n            shipEntityId,\n            asteroidEntityId,\n            getExtractorInfo(asteroidEntityId, shipEntityId).shares\n        );\n        _unlock(shipEntityId);\n        _move(shipEntityId, xDest, yDest, SPEED);\n    }\n\n    function move(uint256 shipId, uint256 asteroidId) public {\n        (int256 x, int256 y) = coordinate(\n            tokenToEntity(address(this), asteroidId)\n        );\n        move(shipId, x, y);\n    }\n\n    function move(\n        uint256 shipId,\n        int256 xDest,\n        int256 yDest\n    ) public onlyApprovedOrShipOwner(shipId) {\n        _move(tokenToEntity(address(miaocraft), shipId), xDest, yDest, SPEED);\n    }\n\n    function remove(uint256 shipId, uint256 asteroidId) public {\n        try miaocraft.ownerOf(shipId) {\n            revert(\"Ship exists\");\n        } catch Error(string memory reason) {\n            require(\n                keccak256(abi.encodePacked(reason)) ==\n                    keccak256(\"ERC721: invalid token ID\"),\n                \"Invalid reason\"\n            );\n            _destroyExtractor(\n                tokenToEntity(address(this), asteroidId),\n                tokenToEntity(address(miaocraft), shipId)\n            );\n        }\n    }\n\n    function _add(AsteroidInfo memory asteroidInfo)\n        internal\n        returns (uint256 asteroidId)\n    {\n        asteroidId = coordinateToAsteroidId(asteroidInfo.x, asteroidInfo.y);\n        uint256 asteroidEntityId = tokenToEntity(address(this), asteroidId);\n\n        IERC20Resource(asteroidInfo.resource).mint(\n            asteroidEntityId,\n            asteroidInfo.initialSupply\n        );\n\n        _setCoordinate(asteroidEntityId, asteroidInfo.x, asteroidInfo.y);\n\n        _add(\n            asteroidEntityId,\n            asteroidInfo.resource,\n            asteroidInfo.rewardPerSecond\n        );\n    }\n\n    modifier onlyApprovedOrShipOwner(uint256 shipId) {\n        require(\n            miaocraft.isApprovedOrOwner(msg.sender, shipId),\n            \"Only approved or owner\"\n        );\n        _;\n    }\n\n    /*\n    DATA QUERY FUNCTIONS\n    */\n\n    function paginateEmissions(uint256 offset, uint256 limit)\n        public\n        view\n        returns (EmissionInfo[] memory emissionInfos_)\n    {\n        limit = Math.min(limit, _emissionInfos.length - offset);\n        emissionInfos_ = new EmissionInfo[](limit);\n        uint256 start = _emissionInfos.length - offset - 1;\n        for (uint256 i = 0; i < limit; i++) {\n            emissionInfos_[i] = _emissionInfos[start - i];\n        }\n    }\n\n    function paginateAsteroids(uint256 offset, uint256 limit)\n        public\n        view\n        returns (AsteroidInfoExtended[] memory asteroidInfos)\n    {\n        limit = Math.min(limit, _emissionInfos.length - offset);\n        asteroidInfos = new AsteroidInfoExtended[](\n            limit * ASTEROIDS_PER_EMISSION\n        );\n        uint256 start = _emissionInfos.length - offset - 1;\n        for (uint256 i = 0; i < limit; i++) {\n            uint256 emissionId = start - i;\n            uint256 bitmap = identifiedBitmaps[i];\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 0\n            ] = _getAsteroidExtended(emissionId, 0, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 1\n            ] = _getAsteroidExtended(emissionId, 1, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 2\n            ] = _getAsteroidExtended(emissionId, 2, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 3\n            ] = _getAsteroidExtended(emissionId, 3, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 4\n            ] = _getAsteroidExtended(emissionId, 4, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 5\n            ] = _getAsteroidExtended(emissionId, 5, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 6\n            ] = _getAsteroidExtended(emissionId, 6, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 7\n            ] = _getAsteroidExtended(emissionId, 7, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 8\n            ] = _getAsteroidExtended(emissionId, 8, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 9\n            ] = _getAsteroidExtended(emissionId, 9, bitmap);\n            asteroidInfos[\n                emissionId * ASTEROIDS_PER_EMISSION + 10\n            ] = _getAsteroidExtended(emissionId, 10, bitmap);\n        }\n    }\n\n    /*\n    OWNER FUNCTIONS\n    */\n\n    function setButter(IERC20Resource butter_) public onlyOwner {\n        butter = butter_;\n    }\n\n    function setMiaocraft(IMiaocraft miaocraft_) public onlyOwner {\n        miaocraft = miaocraft_;\n    }\n\n    function setSbh(address sbh_) public onlyOwner {\n        sbh = sbh_;\n    }\n}\n"
48     },
49     "src/IERC20Resource.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./extensions/IERC20EntityBurnable.sol\";\n\ninterface IERC20Resource is IERC20EntityBurnable {\n    function mint(address to, uint256 amount) external;\n\n    function mint(uint256 to, uint256 amount) external;\n\n    function mintAndCall(address to, uint256 amount) external;\n}\n"
51     },
52     "src/IMiaocraft.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nstruct ShipInfo {\n    uint96 spins;\n    uint96 spinsBurned;\n    uint40 lastServiceTime;\n    string name;\n}\n\ninterface IMiaocraft is IERC721 {\n    event Build(\n        address indexed owner,\n        uint256 indexed id,\n        uint256 spins,\n        string name\n    );\n\n    event Upgrade(address indexed owner, uint256 indexed id, uint256 spins);\n\n    event Merge(\n        address indexed owner,\n        uint256 indexed id1,\n        uint256 indexed id2,\n        uint256 spins\n    );\n\n    event Scrap(\n        address indexed scavengerOwner,\n        uint256 indexed scavengerId,\n        uint256 indexed targetId\n    );\n\n    event Service(\n        address indexed owner,\n        uint256 indexed id,\n        uint256 spins,\n        uint256 cost\n    );\n\n    event Rename(address indexed owner, uint256 indexed id, string name);\n\n    function spinsOf(uint256 id) external view returns (uint256);\n\n    function spinsDecayOf(uint256 id) external view returns (uint256);\n\n    function buildCost(uint256 spins_) external view returns (uint256);\n\n    function serviceCostOf(uint256 id) external view returns (uint256);\n\n    function getShipInfo(uint256 id) external view returns (ShipInfo memory);\n\n    function build(uint256 spins_, string calldata name_) external;\n\n    function upgrade(uint256 id, uint256 spins_) external;\n\n    function merge(uint256 id1, uint256 id2) external;\n\n    function scrap(uint256 scavengerId, uint256 targetId) external;\n\n    function service(uint256 id) external;\n\n    function rename(uint256 id, string calldata name_) external;\n\n    function isApprovedOrOwner(address spender, uint256 id)\n        external\n        view\n        returns (bool);\n}\n"
54     },
55     "src/constants.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nuint16 constant VRF_MIN_BLOCKS = 3;\nuint32 constant VRF_GAS_LIMIT = 300000;\n\nuint256 constant SPINS_PRECISION = 1e18;\nuint256 constant GENESIS_SUPPLY = 2000;\n\nuint256 constant ASTEROID_COORD_PRECISION = 1e3;\nint256 constant ASTEROID_COORD_NEG_FLAG = 1e3;\n"
57     },
58     "src/extensions/IERC20Entity.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/Interfaces/IERC1363.sol\";\n\n/// @title ERC20 with entity-based ownership and allowances.\n/// @author boffee\n/// @author Modified from openzeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol)\ninterface IERC20Entity is IERC1363 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one entity (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event EntityTransfer(\n        uint256 indexed from,\n        uint256 indexed to,\n        uint256 value\n    );\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event EntityApproval(\n        uint256 indexed owner,\n        uint256 indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens owned by `entity`.\n     */\n    function balanceOf(uint256 entity) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's entity to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {EntityTransfer} event.\n     */\n    function transfer(uint256 to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(uint256 owner, uint256 spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(uint256 spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {EntityTransfer} event.\n     */\n    function transferFrom(\n        uint256 from,\n        uint256 to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
60     },
61     "src/extensions/IERC20EntityBurnable.sol": {
62       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./IERC20Entity.sol\";\n\ninterface IERC20EntityBurnable is IERC20Entity {\n    function burn(uint256 amount) external;\n\n    function burnFrom(uint256 entity, uint256 amount) external;\n\n    function burnFrom(address account, uint256 amount) external;\n}\n"
63     },
64     "src/systems/ISpatialSystem.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstruct LocationInfo {\n    int40 xOrigin;\n    int40 yOrigin;\n    int40 xDest;\n    int40 yDest;\n    uint40 speed;\n    uint40 departureTime;\n    bool locked;\n}\n\ninterface ISpatialSystem {\n    event UpdateLocation(\n        uint256 indexed entityId,\n        int256 xOrigin,\n        int256 yOrigin,\n        int256 xDest,\n        int256 yDest,\n        uint256 speed,\n        uint256 departureTime\n    );\n\n    event Move(\n        uint256 indexed entityId,\n        int256 xOrigin,\n        int256 yOrigin,\n        int256 xDest,\n        int256 yDest,\n        uint256 speed,\n        uint256 departureTime\n    );\n\n    event SetLocation(\n        uint256 indexed entityId,\n        int256 xOrigin,\n        int256 yOrigin,\n        int256 xDest,\n        int256 yDest,\n        uint256 speed,\n        uint256 departureTime\n    );\n\n    event SetCoordinate(uint256 indexed entityId, int256 x, int256 y);\n\n    event Locked(uint256 indexed entityId);\n\n    event Unlocked(uint256 indexed entityId);\n\n    function coordinate(uint256 entityId)\n        external\n        view\n        returns (int256 x, int256 y);\n\n    function collocated(uint256 entityId1, uint256 entityId2)\n        external\n        view\n        returns (bool);\n\n    function collocated(\n        uint256 entityId1,\n        uint256 entityId2,\n        uint256 radius\n    ) external view returns (bool);\n\n    function getLocationInfo(uint256 entityId)\n        external\n        view\n        returns (LocationInfo memory);\n\n    function locked(uint256 entityId) external view returns (bool);\n\n    function updateLocation(uint256 entityId) external;\n}\n"
66     },
67     "src/systems/MiningSystem.sol": {
68       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../extensions/IERC20Entity.sol\";\n\nstruct ExtractorInfo {\n    uint128 shares;\n    int128 rewardDebt;\n}\n\nstruct MineInfo {\n    uint128 rewardPerShare;\n    uint64 lastRewardTimestamp;\n    uint64 rewardPerSecond;\n    uint128 totalShares;\n    uint128 totalReward;\n}\n\n/// @title Mining System\n/// @author boffee\n/// @author Modified fro MasterChef V2 (https://github.com/sushiswap/sushiswap/blob/master/protocols/masterchef/contracts/MasterChefV2.sol)\n/// @notice This contract is used to manage mining.\ncontract MiningSystem {\n    event Dock(\n        uint256 indexed extractorId,\n        uint256 indexed mineId,\n        uint256 shares\n    );\n    event Undock(\n        uint256 indexed extractorId,\n        uint256 indexed mineId,\n        uint256 shares\n    );\n    event EmergencyUndock(\n        uint256 indexed extractorId,\n        uint256 indexed mineId,\n        uint256 shares\n    );\n    event Extract(\n        uint256 indexed extractorId,\n        uint256 indexed mineId,\n        uint256 reward\n    );\n    event AddMine(\n        uint256 indexed mineId,\n        address indexed rewardToken,\n        uint256 rewardPerSecond,\n        uint256 rewardPool\n    );\n    event SetMine(\n        uint256 indexed mineId,\n        address indexed rewardToken,\n        uint256 rewardPerSecond,\n        uint256 rewardPool\n    );\n    event UpdateMine(\n        uint256 indexed mineId,\n        uint64 lastRewardTimestamp,\n        uint256 totalShares,\n        uint256 rewardPerShare\n    );\n    event DestroyMine(uint256 indexed mineId);\n\n    uint256 public constant REWARD_PER_SHARE_PRECISION = 1e12;\n\n    /// @notice Info of each mine.\n    mapping(uint256 => MineInfo) private _mineInfos;\n\n    /// @notice Info of each extractor at each mine.\n    mapping(uint256 => mapping(uint256 => ExtractorInfo))\n        private _extractorInfos;\n\n    /// @notice Mine reward token address.\n    mapping(uint256 => IERC20Entity) public rewardTokens;\n\n    function exists(uint256 mineId) public view returns (bool) {\n        return address(rewardTokens[mineId]) != address(0);\n    }\n\n    /// @notice View function to see pending reward on frontend.\n    /// @param extractorId Address of extractor.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @return pending reward for a given extractor.\n    function pendingReward(uint256 extractorId, uint256 mineId)\n        external\n        view\n        returns (uint256 pending)\n    {\n        MineInfo memory mineInfo = _mineInfos[mineId];\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n        uint256 rewardPerShare = mineInfo.rewardPerShare;\n        if (\n            block.timestamp > mineInfo.lastRewardTimestamp &&\n            mineInfo.totalShares != 0\n        ) {\n            uint256 duration = block.timestamp - mineInfo.lastRewardTimestamp;\n            uint256 reward = Math.min(\n                duration * mineInfo.rewardPerSecond,\n                rewardTokens[mineId].balanceOf(mineId) - mineInfo.totalReward\n            );\n            // total reward cannot excceed mine balance\n            rewardPerShare +=\n                (reward * REWARD_PER_SHARE_PRECISION) /\n                mineInfo.totalShares;\n        }\n        pending = uint256(\n            int256(\n                (extractorInfo.shares * rewardPerShare) /\n                    REWARD_PER_SHARE_PRECISION\n            ) - extractorInfo.rewardDebt\n        );\n    }\n\n    /// @notice get mine info\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @return mineInfo\n    function getMineInfo(uint256 mineId) public view returns (MineInfo memory) {\n        return _mineInfos[mineId];\n    }\n\n    /// @notice get extractor info\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @param extractorId id of the extractor. See `_extractorInfos`.\n    /// @return extractorInfo\n    function getExtractorInfo(uint256 mineId, uint256 extractorId)\n        public\n        view\n        returns (ExtractorInfo memory)\n    {\n        return _extractorInfos[mineId][extractorId];\n    }\n\n    /// @notice Update reward variables for all mines.\n    /// @param mineIds Mine IDs of all to be updated.\n    function massUpdateMines(uint256[] calldata mineIds) external {\n        uint256 len = mineIds.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updateMine(mineIds[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given mine.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @return mineInfo Returns the mine that was updated.\n    function updateMine(uint256 mineId)\n        public\n        returns (MineInfo memory mineInfo)\n    {\n        mineInfo = _mineInfos[mineId];\n        if (block.timestamp > mineInfo.lastRewardTimestamp) {\n            if (mineInfo.totalShares > 0) {\n                uint256 duration = block.timestamp -\n                    mineInfo.lastRewardTimestamp;\n                uint256 reward = Math.min(\n                    duration * mineInfo.rewardPerSecond,\n                    rewardTokens[mineId].balanceOf(mineId) -\n                        mineInfo.totalReward\n                );\n                mineInfo.totalReward += uint128(reward);\n                // total reward cannot excceed mine balance\n                mineInfo.rewardPerShare += uint128(\n                    (reward * REWARD_PER_SHARE_PRECISION) / mineInfo.totalShares\n                );\n            }\n            mineInfo.lastRewardTimestamp = uint64(block.timestamp);\n            _mineInfos[mineId] = mineInfo;\n            emit UpdateMine(\n                mineId,\n                mineInfo.lastRewardTimestamp,\n                mineInfo.totalShares,\n                mineInfo.rewardPerShare\n            );\n        }\n    }\n\n    /// @notice Dock extractor to mine for BUTTER allocation.\n    /// @param extractorId The receiver of `shares` dock benefit.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @param shares The amount of shares to be docked.\n    function _dock(\n        uint256 extractorId,\n        uint256 mineId,\n        uint256 shares\n    ) internal {\n        MineInfo memory mineInfo = updateMine(mineId);\n\n        require(\n            (mineInfo.totalShares * uint256(mineInfo.rewardPerShare)) /\n                REWARD_PER_SHARE_PRECISION <\n                rewardTokens[mineId].balanceOf(mineId),\n            \"Mine depleted\"\n        );\n\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n\n        // Effects\n        extractorInfo.shares += uint128(shares);\n        extractorInfo.rewardDebt += int128(\n            uint128(\n                (shares * mineInfo.rewardPerShare) / REWARD_PER_SHARE_PRECISION\n            )\n        );\n        _mineInfos[mineId].totalShares += uint128(shares);\n\n        emit Dock(extractorId, mineId, shares);\n    }\n\n    /// @notice Undock extractor from mine.\n    /// @param extractorId Receiver of the reward.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @param shares Extractor shares to undock.\n    function _undock(\n        uint256 extractorId,\n        uint256 mineId,\n        uint256 shares\n    ) internal {\n        MineInfo memory mineInfo = updateMine(mineId);\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n\n        // Effects\n        extractorInfo.rewardDebt -= int128(\n            uint128(\n                (shares * mineInfo.rewardPerShare) / REWARD_PER_SHARE_PRECISION\n            )\n        );\n        extractorInfo.shares -= uint128(shares);\n        _mineInfos[mineId].totalShares -= uint128(shares);\n\n        _tryDestroy(mineId);\n\n        emit Undock(extractorId, mineId, shares);\n    }\n\n    /// @notice Extract proceeds for extractor.\n    /// @param extractorId Receiver of rewards.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    function _extract(uint256 extractorId, uint256 mineId) internal {\n        MineInfo memory mineInfo = updateMine(mineId);\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n        int256 accumulatedReward = int256(\n            (extractorInfo.shares * uint256(mineInfo.rewardPerShare)) /\n                REWARD_PER_SHARE_PRECISION\n        );\n        uint256 _pendingReward = uint256(\n            accumulatedReward - extractorInfo.rewardDebt\n        );\n\n        // Effects\n        extractorInfo.rewardDebt = int128(accumulatedReward);\n        _mineInfos[mineId].totalReward -= uint128(_pendingReward);\n\n        rewardTokens[mineId].transferFrom(mineId, extractorId, _pendingReward);\n\n        _tryDestroy(mineId);\n\n        emit Extract(extractorId, mineId, _pendingReward);\n    }\n\n    /// @notice Undock extractor from mine and extract proceeds.\n    /// @param extractorId Receiver of the rewards.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    /// @param shares Extractor shares to undock.\n    function _undockAndExtract(\n        uint256 extractorId,\n        uint256 mineId,\n        uint256 shares\n    ) internal {\n        MineInfo memory mineInfo = updateMine(mineId);\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n        int256 accumulatedReward = int256(\n            (extractorInfo.shares * uint256(mineInfo.rewardPerShare)) /\n                REWARD_PER_SHARE_PRECISION\n        );\n        uint256 _pendingReward = uint256(\n            accumulatedReward - extractorInfo.rewardDebt\n        );\n\n        // Effects\n        extractorInfo.rewardDebt = int128(\n            accumulatedReward -\n                int256(\n                    (shares * mineInfo.rewardPerShare) /\n                        REWARD_PER_SHARE_PRECISION\n                )\n        );\n        extractorInfo.shares -= uint128(shares);\n        _mineInfos[mineId].totalShares -= uint128(shares);\n        _mineInfos[mineId].totalReward -= uint128(_pendingReward);\n\n        rewardTokens[mineId].transferFrom(mineId, extractorId, _pendingReward);\n\n        _tryDestroy(mineId);\n\n        emit Undock(extractorId, mineId, shares);\n        emit Extract(extractorId, mineId, _pendingReward);\n    }\n\n    /// @notice Undock without caring about rewards. EMERGENCY ONLY.\n    /// @param extractorId Receiver of the reward.\n    /// @param mineId id of the mine. See `_mineInfos`.\n    function _emergencyUndock(uint256 extractorId, uint256 mineId) internal {\n        ExtractorInfo storage extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n        uint256 shares = extractorInfo.shares;\n        if (_mineInfos[mineId].totalShares >= shares) {\n            _mineInfos[mineId].totalShares -= uint128(shares);\n        }\n\n        delete _extractorInfos[mineId][extractorId];\n\n        emit EmergencyUndock(extractorId, mineId, shares);\n    }\n\n    /// @notice Add a new mine.\n    /// @param mineId The id of the mine.\n    /// @param rewardToken The address of the reward token.\n    /// @param rewardPerSecond reward rate of the new mine.\n    function _add(\n        uint256 mineId,\n        address rewardToken,\n        uint256 rewardPerSecond\n    ) internal {\n        require(\n            _mineInfos[mineId].lastRewardTimestamp == 0,\n            \"Mine already exists\"\n        );\n\n        _mineInfos[mineId] = MineInfo({\n            rewardPerSecond: uint64(rewardPerSecond),\n            lastRewardTimestamp: uint64(block.timestamp),\n            rewardPerShare: 0,\n            totalShares: 0,\n            totalReward: 0\n        });\n        rewardTokens[mineId] = IERC20Entity(rewardToken);\n\n        emit AddMine(\n            mineId,\n            rewardToken,\n            rewardPerSecond,\n            IERC20Entity(rewardToken).balanceOf(mineId)\n        );\n    }\n\n    /// @notice Update the given mine's reward rate.\n    /// @param mineId The entity id of the mine.\n    /// @param rewardPerSecond New reward rate of the mine.\n    function _set(uint256 mineId, uint256 rewardPerSecond) internal {\n        _mineInfos[mineId].rewardPerSecond = uint64(rewardPerSecond);\n        IERC20Entity rewardToken = rewardTokens[mineId];\n\n        emit SetMine(\n            mineId,\n            address(rewardToken),\n            rewardPerSecond,\n            rewardToken.balanceOf(mineId)\n        );\n    }\n\n    /// @notice Destroy the given mine if its depleted and has no shares.\n    /// @param mineId The entity id of the mine.\n    function _tryDestroy(uint256 mineId) internal {\n        if (\n            rewardTokens[mineId].balanceOf(mineId) < 1e15 &&\n            _mineInfos[mineId].totalShares < 1e15\n        ) {\n            _destroy(mineId);\n        }\n    }\n\n    /// @notice Destroy the given mine.\n    /// @param mineId The entity id of the mine.\n    function _destroy(uint256 mineId) internal {\n        delete _mineInfos[mineId];\n        delete rewardTokens[mineId];\n        emit DestroyMine(mineId);\n    }\n\n    function _destroyExtractor(uint256 mineId, uint256 extractorId) internal {\n        ExtractorInfo memory extractorInfo = _extractorInfos[mineId][\n            extractorId\n        ];\n        _mineInfos[mineId].totalShares -= uint128(extractorInfo.shares);\n        _mineInfos[mineId].totalReward -= uint128(\n            uint256(\n                int256(\n                    (extractorInfo.shares *\n                        uint256(_mineInfos[mineId].rewardPerShare)) /\n                        REWARD_PER_SHARE_PRECISION\n                ) - extractorInfo.rewardDebt\n            )\n        );\n        delete _extractorInfos[mineId][extractorId];\n    }\n}\n"
69     },
70     "src/systems/SpatialSystem.sol": {
71       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../utils/VectorWadMath.sol\";\nimport \"../utils/EntityUtils.sol\";\nimport \"./ISpatialSystem.sol\";\n\ncontract SpatialSystem is ISpatialSystem {\n    mapping(uint256 => LocationInfo) private _locationInfos;\n\n    function coordinate(uint256 entityId)\n        public\n        view\n        virtual\n        override\n        returns (int256 x, int256 y)\n    {\n        return _coordinate(entityId);\n    }\n\n    function coordinate(address token, uint256 id)\n        public\n        view \n        virtual\n        returns (int256 x, int256 y)\n    {\n        return _coordinate(tokenToEntity(token, id));\n    }\n\n    function locked(uint256 entityId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _locationInfos[entityId].locked;\n    }\n\n    function collocated(uint256 entityId1, uint256 entityId2)\n        public\n        view \n        virtual\n        override\n        returns (bool)\n    {\n        (int256 x1, int256 y1) = _coordinate(entityId1);\n        (int256 x2, int256 y2) = _coordinate(entityId2);\n        return x1 == x2 && y1 == y2;\n    }\n\n    function collocated(\n        uint256 entityId1,\n        uint256 entityId2,\n        uint256 radius\n    ) public view virtual override returns (bool) {\n        (int256 x1, int256 y1) = _coordinate(entityId1);\n        (int256 x2, int256 y2) = _coordinate(entityId2);\n        return\n            VectorWadMath.distance(x1 * 1e18, y1 * 1e18, x2 * 1e18, y2 * 1e18) <=\n            radius * 1e18;\n    }\n\n    function getLocationInfo(uint256 entityId)\n        public\n        view\n        virtual\n        override\n        returns (LocationInfo memory)\n    {\n        return _locationInfos[entityId];\n    }\n\n    function _coordinate(uint256 entityId)\n        internal\n        view \n        virtual\n        returns (int256 x, int256 y)\n    {\n        LocationInfo memory info = _locationInfos[entityId];\n        // ship is only not moving if it's at its destination\n        if (info.speed == 0) {\n            return (info.xOrigin, info.yOrigin);\n        }\n\n        uint256 distance =\n            VectorWadMath.distance(\n                info.xOrigin,\n                info.yOrigin,\n                info.xDest,\n                info.yDest\n            );\n        uint256 distanceTraveled = (block.timestamp - info.departureTime) *\n            info.speed;\n\n        // reached destination already\n        if (distanceTraveled >= distance) {\n            return (info.xDest, info.yDest);\n        }\n\n        (x, y) = VectorWadMath.scaleVector(\n            info.xOrigin,\n            info.yOrigin,\n            info.xDest,\n            info.yDest,\n            int256((distanceTraveled * 1e18) / distance)\n        );\n    }\n\n    function updateLocation(uint256 entityId) public virtual override {\n        _updateLocation(entityId);\n    }\n\n    function updateLocation(address token, uint256 id) public virtual {\n        _updateLocation(tokenToEntity(token, id));\n    }\n\n    function _move(\n        uint256 entityId,\n        int256 xDest,\n        int256 yDest,\n        uint256 speed\n    ) internal virtual {\n        require(!_locationInfos[entityId].locked, \"Locked\");\n        (int256 x, int256 y) = _coordinate(entityId);\n        _locationInfos[entityId] = LocationInfo({\n            // update origin to current coordinate\n            xOrigin: int40(x),\n            yOrigin: int40(y),\n            // set destination\n            xDest: int40(xDest),\n            yDest: int40(yDest),\n            speed: uint40(speed),\n            departureTime: uint40(block.timestamp),\n            locked: false\n        });\n\n        emit Move(\n            entityId,\n            x,\n            y,\n            xDest,\n            yDest,\n            speed,\n            block.timestamp\n        );\n    }\n\n    function _updateLocation(uint256 entityId) internal virtual {\n        (int256 x, int256 y) = _coordinate(entityId);\n        \n        LocationInfo memory info = _locationInfos[entityId];\n        // arrived, so set speed to 0\n        if (\n            x == info.xDest &&\n            y == info.yDest\n        ) {\n            info.speed = 0;\n        }\n\n        // update origin to current coordinate\n        info.xOrigin = int40(x);\n        info.yOrigin = int40(y);\n        info.departureTime = uint40(block.timestamp);\n\n        _locationInfos[entityId] = info;\n        \n        emit UpdateLocation(\n            entityId,\n            x,\n            y,\n            info.xDest,\n            info.yDest,\n            info.speed,\n            block.timestamp\n        );\n    }\n\n    function _setLocation(\n        uint256 entityId, \n        LocationInfo memory info\n    ) internal virtual {\n        _locationInfos[entityId] = info;\n\n        emit SetLocation(\n            entityId,\n            info.xOrigin,\n            info.yOrigin,\n            info.xDest,\n            info.yDest,\n            info.speed,\n            info.departureTime\n        );\n    }\n\n    function _setCoordinate(\n        uint256 entityId,\n        int256 x,\n        int256 y\n    ) internal virtual {\n        _locationInfos[entityId] = LocationInfo({\n            xOrigin: int40(x),\n            yOrigin: int40(y),\n            xDest: int40(x),\n            yDest: int40(y),\n            speed: 0,\n            departureTime: uint40(block.timestamp),\n            locked: false\n        });\n\n        emit SetCoordinate(entityId, x, y);\n    }\n\n    function _lock(\n        uint256 entityId\n    ) internal virtual {\n        require(_locationInfos[entityId].speed == 0, \"Moving\");\n        _locationInfos[entityId].locked = true;\n\n        emit Locked(entityId);\n    }\n\n    function _unlock(\n        uint256 entityId\n    ) internal virtual {\n        _locationInfos[entityId].locked = false;\n\n        emit Unlocked(entityId);\n    }\n}\n"
72     },
73     "src/utils/EntityUtils.sol": {
74       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nfunction tokenToEntity(address token, uint256 id) pure returns (uint256) {\n    return (uint256(uint160(token)) << 96) | id;\n}\n\nfunction entityToToken(uint256 entity)\n    pure\n    returns (address token, uint256 id)\n{\n    token = address(uint160(entity >> 96));\n    id = entity & 0xffffffffffffffffffffffff;\n}\n\nfunction accountToEntity(address account) pure returns (uint256) {\n    return (uint256(uint160(account)));\n}\n\nfunction entityToAccount(uint256 entity) pure returns (address account) {\n    account = address(uint160(entity));\n}\n\nfunction entityIsAccount(uint256 entity) pure returns (bool) {\n    return entity >> 160 == 0;\n}\n"
75     },
76     "src/utils/Sample.sol": {
77       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"solmate/utils/SignedWadMath.sol\";\n\nfunction wadSigmoid(int256 x) pure returns (uint256) {\n    return uint256(unsafeWadDiv(1e18, 1e18 + wadExp(-x)));\n}\n\nfunction random(uint256 seed, uint256 max) pure returns (uint256) {\n    return uint256(keccak256(abi.encodePacked(seed))) % max;\n}\n\nfunction sampleCircle(uint256 seed, uint256 radius)\n    pure\n    returns (int256 x, int256 y)\n{\n    unchecked {\n        seed = uint256(keccak256(abi.encodePacked(seed)));\n        int256 r = int256(random(seed++, radius)) + 1;\n        int256 xUnit = int256(random(seed++, 2e18)) - 1e18;\n        int256 yUnit = int256(Math.sqrt(1e36 - uint256(xUnit * xUnit)));\n        x = int256((xUnit * r) / 1e18);\n        y = int256((yUnit * r) / 1e18);\n        if (random(seed, 2) == 0) {\n            y = -y;\n        }\n    }\n}\n\nfunction sampleInvSqrt(uint256 seed, uint256 e) pure returns (uint256) {\n    return wadInvSqrt(random(seed, 1e18), e) / 2;\n}\n\nfunction wadInvSqrt(uint256 x, uint256 e) pure returns (uint256) {\n    return Math.sqrt(1e54 / (e + x));\n}\n"
78     },
79     "src/utils/VectorWadMath.sol": {
80       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nlibrary VectorWadMath {\n    using Math for uint256;\n    using SignedMath for int256;\n\n    int256 constant PRECISION = 1e18;\n    int256 constant PRECISION_UINT = 1e18;\n\n    function distance(\n        int256 x1,\n        int256 y1,\n        int256 x2,\n        int256 y2\n    ) internal pure returns (uint256) {\n        return ((x2 - x1).abs()**2 + (y2 - y1).abs()**2).sqrt();\n    }\n\n    function unitVector(\n        int256 x1,\n        int256 y1,\n        int256 x2,\n        int256 y2\n    ) internal pure returns (int256, int256) {\n        int256 dist = int256(distance(x1, y1, x2, y2));\n        return (((x2 - x1) * PRECISION) / dist, ((y2 - y1) * PRECISION) / dist);\n    }\n\n    function scaleVector(\n        int256 x1,\n        int256 y1,\n        int256 x2,\n        int256 y2,\n        int256 scale\n    ) internal pure returns (int256, int256) {\n        return (\n            x1 + ((x2 - x1) * scale) / PRECISION,\n            y1 + ((y2 - y1) * scale) / PRECISION\n        );\n    }\n}\n"
81     }
82   },
83   "settings": {
84     "remappings": [
85       "@chainlink/=lib/chainlink/contracts/src/",
86       "@openzeppelin/=lib/openzeppelin-contracts/",
87       "chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/",
88       "ds-test/=lib/forge-std/lib/ds-test/src/",
89       "forge-std/=lib/forge-std/src/",
90       "miaocraft/=src/",
91       "solmate/=lib/solmate/src/"
92     ],
93     "optimizer": {
94       "enabled": true,
95       "runs": 200
96     },
97     "metadata": {
98       "bytecodeHash": "ipfs"
99     },
100     "outputSelection": {
101       "*": {
102         "*": [
103           "evm.bytecode",
104           "evm.deployedBytecode",
105           "devdoc",
106           "userdoc",
107           "metadata",
108           "abi"
109         ]
110       }
111     },
112     "evmVersion": "london",
113     "libraries": {}
114   }
115 }}