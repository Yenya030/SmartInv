1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/WhiteSandsStaking.sol": {
5       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract WhiteSandsStaking is IERC721Receiver, Ownable {\n    struct TokenInfo {\n        uint32 collectionId;\n        uint32 id;\n        uint32 timestamp;\n        address owner;\n    }\n\n    mapping(IERC721 => bool) public _acceptedCollections;\n    mapping(IERC721 => uint32) public _collectionToId;\n    mapping(IERC721 => mapping(uint256 => mapping(address => uint256)))\n        public _indexOfTokens;\n    mapping(IERC721 => mapping(uint256 => mapping(address => uint256)))\n        public _indexOfTokensByOwners;\n    mapping(IERC721 => mapping(uint256 => mapping(address => bool)))\n        public _isStaked;\n    mapping(address => TokenInfo[]) public _stakedByOwners;\n    TokenInfo[] public _staked;\n    IERC721[] public _collections;\n\n    constructor(address[] memory collections) {\n        for (uint256 i = 0; i < collections.length; i++) {\n            acceptCollection(collections[i]);\n        }\n    }\n\n    function acceptCollection(address collection_) public onlyOwner {\n        IERC721 collection = IERC721(collection_);\n        _collections.push(collection);\n        _collectionToId[collection] = uint32(_collections.length) - 1;\n        _acceptedCollections[collection] = true;\n    }\n\n    function removeCollection(address collection) external onlyOwner {\n        delete _acceptedCollections[IERC721(collection)];\n    }\n\n    function stake(address[] calldata collections, uint256[] calldata ids)\n        external\n    {\n        require(collections.length == ids.length, \"!params\");\n        for (uint256 i = 0; i < collections.length; i++) {\n            IERC721 collection = IERC721(collections[i]);\n            uint256 id = ids[i];\n            require(_acceptedCollections[collection], \"!collection\");\n            _isStaked[collection][id][msg.sender] = true;\n            TokenInfo memory ti = TokenInfo(\n                _collectionToId[collection],\n                uint32(id),\n                // solhint-disable-next-line not-rely-on-time\n                uint32(block.timestamp),\n                msg.sender\n            );\n            _staked.push(ti);\n            _indexOfTokens[collection][id][msg.sender] = _staked.length - 1;\n            _stakedByOwners[msg.sender].push(ti);\n            _indexOfTokensByOwners[collection][id][msg.sender] =\n                _stakedByOwners[msg.sender].length -\n                1;\n            collection.safeTransferFrom(\n                msg.sender,\n                address(this),\n                id,\n                abi.encodePacked(WhiteSandsStaking.stake.selector)\n            );\n        }\n    }\n\n    function unstake(address[] calldata collections, uint256[] calldata ids)\n        external\n    {\n        require(collections.length == ids.length, \"!params\");\n        for (uint256 i = 0; i < collections.length; i++) {\n            IERC721 collection = IERC721(collections[i]);\n            uint256 id = ids[i];\n            require(_isStaked[collection][id][msg.sender], \"!staked\");\n            if (_stakedByOwners[msg.sender].length > 1) {\n                uint256 index = _indexOfTokensByOwners[collection][id][\n                    msg.sender\n                ];\n                TokenInfo memory last = _stakedByOwners[msg.sender][\n                    _stakedByOwners[msg.sender].length - 1\n                ];\n                _stakedByOwners[msg.sender][index] = last;\n                _indexOfTokensByOwners[_collections[last.collectionId]][\n                    last.id\n                ][msg.sender] = index;\n            }\n            _stakedByOwners[msg.sender].pop();\n            if (_staked.length > 1) {\n                uint256 index = _indexOfTokens[collection][id][msg.sender];\n                TokenInfo memory last = _staked[_staked.length - 1];\n                _staked[index] = last;\n                _indexOfTokens[_collections[last.collectionId]][last.id][\n                    last.owner\n                ] = index;\n            }\n            _staked.pop();\n            delete _indexOfTokens[collection][id][msg.sender];\n            delete _indexOfTokensByOwners[collection][id][msg.sender];\n            delete _isStaked[collection][id][msg.sender];\n            collection.safeTransferFrom(address(this), msg.sender, id);\n        }\n    }\n\n    function getStakedByOwner(address owner)\n        external\n        view\n        returns (\n            address[] memory,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        uint256 count = _stakedByOwners[owner].length;\n        address[] memory collections = new address[](count);\n        uint256[] memory ids = new uint256[](count);\n        uint256[] memory timestamps = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            TokenInfo memory ti = _stakedByOwners[owner][i];\n            collections[i] = address(_collections[ti.collectionId]);\n            ids[i] = ti.id;\n            timestamps[i] = ti.timestamp;\n        }\n        return (collections, ids, timestamps);\n    }\n\n    function getStaked()\n        external\n        view\n        returns (\n            address[] memory,\n            uint256[] memory,\n            address[] memory,\n            uint256[] memory\n        )\n    {\n        return getStakedFrom(0, _staked.length);\n    }\n\n    function getStakedFrom(uint256 from, uint256 count)\n        public\n        view\n        returns (\n            address[] memory,\n            uint256[] memory,\n            address[] memory,\n            uint256[] memory\n        )\n    {\n        address[] memory collections = new address[](count);\n        uint256[] memory ids = new uint256[](count);\n        address[] memory owners = new address[](count);\n        uint256[] memory timestamps = new uint256[](count);\n        for (uint256 i = from; i < count; i++) {\n            TokenInfo memory ti = _staked[i];\n            collections[i] = address(_collections[ti.collectionId]);\n            ids[i] = ti.id;\n            owners[i] = ti.owner;\n            timestamps[i] = ti.timestamp;\n        }\n        return (collections, ids, owners, timestamps);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata data\n    ) external pure override returns (bytes4) {\n        require(\n            keccak256(data) ==\n                keccak256(abi.encodePacked(WhiteSandsStaking.stake.selector)),\n            \"!invalid\"\n        );\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 10000
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}