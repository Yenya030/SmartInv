1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/manifold/lazyclaim/ERC721LazyPayableClaim.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// solhint-disable reason-string\npragma solidity ^0.8.0;\n\nimport \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\";\nimport \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\";\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport \"./LazyPayableClaim.sol\";\nimport \"./IERC721LazyPayableClaim.sol\";\n\n/**\n * @title Lazy Payable Claim\n * @author manifold.xyz\n * @notice Lazy payable claim with optional whitelist ERC721 tokens\n */\ncontract ERC721LazyPayableClaim is IERC165, IERC721LazyPayableClaim, ICreatorExtensionTokenURI, LazyPayableClaim {\n    using Strings for uint256;\n\n    // stores mapping from tokenId to the claim it represents\n    // { contractAddress => { tokenId => Claim } }\n    mapping(address => mapping(uint256 => Claim)) private _claims;\n\n    struct TokenClaim {\n        uint224 claimIndex;\n        uint32 mintOrder;\n    }\n\n    // stores which tokenId corresponds to which claimIndex, used to generate token uris\n    // { contractAddress => { tokenId => TokenClaim } }\n    mapping(address => mapping(uint256 => TokenClaim)) private _tokenClaims;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AdminControl, IERC165) returns (bool) {\n        return interfaceId == type(IERC721LazyPayableClaim).interfaceId ||\n            interfaceId == type(ILazyPayableClaim).interfaceId ||\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\n            interfaceId == type(IAdminControl).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n\n    constructor(address delegationRegistry) LazyPayableClaim(delegationRegistry) {}\n\n    /**\n     * See {IERC721LazyClaim-initializeClaim}.\n     */\n    function initializeClaim(\n        address creatorContractAddress,\n        uint256 claimIndex,\n        ClaimParameters calldata claimParameters\n    ) external override creatorAdminRequired(creatorContractAddress) {\n        // Revert if claim at claimIndex already exists\n        require(_claims[creatorContractAddress][claimIndex].storageProtocol == StorageProtocol.INVALID, \"Claim already initialized\");\n\n        // Sanity checks\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\");\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\");\n        require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both walletMax and merkleRoot\");\n\n        // Create the claim\n        _claims[creatorContractAddress][claimIndex] = Claim({\n            total: 0,\n            totalMax: claimParameters.totalMax,\n            walletMax: claimParameters.walletMax,\n            startDate: claimParameters.startDate,\n            endDate: claimParameters.endDate,\n            storageProtocol: claimParameters.storageProtocol,\n            identical: claimParameters.identical,\n            merkleRoot: claimParameters.merkleRoot,\n            location: claimParameters.location,\n            cost: claimParameters.cost,\n            paymentReceiver: claimParameters.paymentReceiver,\n            erc20: claimParameters.erc20\n        });\n\n        emit ClaimInitialized(creatorContractAddress, claimIndex, msg.sender);\n    }\n\n    /**\n     * See {IERC721LazyClaim-udpateClaim}.\n     */\n    function updateClaim(\n        address creatorContractAddress,\n        uint256 claimIndex,\n        ClaimParameters memory claimParameters\n    ) external override creatorAdminRequired(creatorContractAddress) {\n        // Sanity checks\n        Claim memory claim = _claims[creatorContractAddress][claimIndex];\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\");\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\");\n        require(claimParameters.erc20 == claim.erc20, \"Cannot change payment token\");\n        if (claimParameters.totalMax != 0 && claim.total > claimParameters.totalMax) {\n            claimParameters.totalMax = claim.total;\n        }\n\n        // Overwrite the existing claim\n        _claims[creatorContractAddress][claimIndex] = Claim({\n            total: claim.total,\n            totalMax: claimParameters.totalMax,\n            walletMax: claimParameters.walletMax,\n            startDate: claimParameters.startDate,\n            endDate: claimParameters.endDate,\n            storageProtocol: claimParameters.storageProtocol,\n            identical: claimParameters.identical,\n            merkleRoot: claimParameters.merkleRoot,\n            location: claimParameters.location,\n            cost: claimParameters.cost,\n            paymentReceiver: claimParameters.paymentReceiver,\n            erc20: claim.erc20\n        });\n        emit ClaimUpdated(creatorContractAddress, claimIndex);\n    }\n\n    /**\n     * See {IERC721LazyClaim-updateTokenURIParams}.\n     */\n    function updateTokenURIParams(\n        address creatorContractAddress, uint256 claimIndex,\n        StorageProtocol storageProtocol,\n        bool identical,\n        string calldata location\n    ) external override creatorAdminRequired(creatorContractAddress)  {\n        Claim memory claim = _claims[creatorContractAddress][claimIndex];\n        require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        require(storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\");\n\n        // Overwrite the existing claim\n        _claims[creatorContractAddress][claimIndex] = Claim({\n            total: claim.total,\n            totalMax: claim.totalMax,\n            walletMax: claim.walletMax,\n            startDate: claim.startDate,\n            endDate: claim.endDate,\n            storageProtocol: storageProtocol,\n            identical: identical,\n            merkleRoot: claim.merkleRoot,\n            location: location,\n            cost: claim.cost,\n            paymentReceiver: claim.paymentReceiver,\n            erc20: claim.erc20\n        });\n        emit ClaimUpdated(creatorContractAddress, claimIndex);\n    }\n\n    /**\n     * See {ILazyPayableClaim-getClaim}.\n     */\n    function getClaim(address creatorContractAddress, uint256 claimIndex) public override view returns(Claim memory) {\n        return _getClaim(creatorContractAddress, claimIndex);\n    }\n\n    function _getClaim(address creatorContractAddress, uint256 claimIndex) private view returns(Claim storage claim) {\n        claim = _claims[creatorContractAddress][claimIndex];\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n    }\n\n    /**\n     * See {ILazyPayableClaim-checkMintIndex}.\n     */\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) external override view returns(bool) {\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\n        return _checkMintIndex(creatorContractAddress, claimIndex, claim.merkleRoot, mintIndex);\n    }\n\n    /**\n     * See {ILazyPayableClaim-checkMintIndices}.\n     */\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\n        uint256 mintIndicesLength = mintIndices.length;\n        minted = new bool[](mintIndices.length);\n        for (uint256 i; i < mintIndicesLength;) {\n            minted[i] = _checkMintIndex(creatorContractAddress, claimIndex, claim.merkleRoot, mintIndices[i]);\n            unchecked{ ++i; }\n        }\n    }\n\n    /**\n     * See {ILazyPayableClaim-getTotalMints}.\n     */\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\n        return _getTotalMints(claim.walletMax, minter, creatorContractAddress, claimIndex);\n    }\n\n    /**\n     * See {ILazyPayableClaim-mint}.\n     */\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) external payable override {\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\n\n        // Check totalMax\n        require(++claim.total <= claim.totalMax || claim.totalMax == 0, \"Maximum tokens already minted for this claim\");\n\n        // Validate mint\n        _validateMint(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintIndex, merkleProof, mintFor);\n\n        // Transfer funds\n        _transferFunds(claim.erc20, claim.cost, claim.paymentReceiver, 1, claim.merkleRoot != \"\");\n\n        // Do mint\n        uint256 newTokenId = IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender);\n\n        // Insert the new tokenId into _tokenClaims for the current claim address & index\n        _tokenClaims[creatorContractAddress][newTokenId] = TokenClaim(uint224(claimIndex), claim.total);\n\n        emit ClaimMint(creatorContractAddress, claimIndex);\n    }\n\n    /**\n     * See {ILazyPayableClaim-mintBatch}.\n     */\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable override {\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\n\n        // Check totalMax\n        claim.total += mintCount;\n        require(claim.totalMax == 0 || claim.total <= claim.totalMax, \"Too many requested for this claim\");\n\n        // Validate mint\n        _validateMint(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintCount, mintIndices, merkleProofs, mintFor);\n        uint256 newMintIndex = claim.total - mintCount + 1;\n\n        // Transfer funds\n        _transferFunds(claim.erc20, claim.cost, claim.paymentReceiver, mintCount, claim.merkleRoot != \"\");\n\n        uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount);\n        for (uint256 i; i < mintCount;) {\n            _tokenClaims[creatorContractAddress][newTokenIds[i]] = TokenClaim(uint224(claimIndex), uint32(newMintIndex+i));\n            unchecked { ++i; }\n        }\n\n        emit ClaimMintBatch(creatorContractAddress, claimIndex, mintCount);\n    }\n\n    /**\n     * See {ILazyPayableClaim-mintProxy}.\n     */\n    function mintProxy(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable override {\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\n\n        // Check totalMax\n        claim.total += mintCount;\n        require(claim.totalMax == 0 || claim.total <= claim.totalMax, \"Too many requested for this claim\");\n\n        // Validate mint\n        _validateMintProxy(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintCount, mintIndices, merkleProofs, mintFor);\n        uint256 newMintIndex = claim.total - mintCount + 1;\n\n        // Transfer funds\n        _transferFundsProxy(claim.erc20, claim.cost, claim.paymentReceiver, mintCount, claim.merkleRoot != \"\");\n\n        uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(mintFor, mintCount);\n        for (uint256 i; i < mintCount;) {\n            _tokenClaims[creatorContractAddress][newTokenIds[i]] = TokenClaim(uint224(claimIndex), uint32(newMintIndex+i));\n            unchecked { ++i; }\n        }\n\n        emit ClaimMintProxy(creatorContractAddress, claimIndex, mintCount, msg.sender, mintFor);\n    }\n\n    /**\n     * See {IERC721LazyClaim-airdrop}.\n     */\n    function airdrop(address creatorContractAddress, uint256 claimIndex, address[] calldata recipients,\n            uint16[] calldata amounts) external override creatorAdminRequired(creatorContractAddress) {\n        require(recipients.length == amounts.length, \"Unequal number of recipients and amounts provided\");\n\n        // Fetch the claim, create newMintIndex to keep track of token ids created by the airdrop\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\n        uint256 newMintIndex = claim.total+1;\n\n        for (uint256 i; i < recipients.length;) {\n            // Airdrop the tokens\n            uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(recipients[i], amounts[i]);\n\n            // Register the tokenClaims, so that tokenURI will work for airdropped tokens\n            for (uint256 j; j < newTokenIds.length;) {\n                _tokenClaims[creatorContractAddress][newTokenIds[j]] = TokenClaim(uint224(claimIndex), uint32(newMintIndex+j));\n                unchecked { ++j; }\n            }\n\n            // Increment claim.total and newMintIndex for the next airdrop\n            unchecked{ newMintIndex += newTokenIds.length; }\n\n            unchecked{ ++i; }\n        }\n        require(newMintIndex - claim.total - 1 <= MAX_UINT_32, \"Too many requested\");\n        claim.total += uint32(newMintIndex - claim.total - 1);\n        if (claim.totalMax != 0 && claim.total > claim.totalMax) {\n            claim.totalMax = claim.total;\n        }\n    }\n\n    /**\n     * See {ICreatorExtensionTokenURI-tokenURI}.\n     */\n    function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {\n        TokenClaim memory tokenClaim = _tokenClaims[creatorContractAddress][tokenId];\n        require(tokenClaim.claimIndex > 0, \"Token does not exist\");\n        Claim memory claim = _claims[creatorContractAddress][tokenClaim.claimIndex];\n\n        string memory prefix = \"\";\n        if (claim.storageProtocol == StorageProtocol.ARWEAVE) {\n            prefix = ARWEAVE_PREFIX;\n        } else if (claim.storageProtocol == StorageProtocol.IPFS) {\n            prefix = IPFS_PREFIX;\n        }\n        uri = string(abi.encodePacked(prefix, claim.location));\n\n        // Depending on params, we may want to append a suffix to location\n        if (!claim.identical) {\n            uri = string(abi.encodePacked(uri, \"/\", uint256(tokenClaim.mintOrder).toString()));\n        }\n    }\n}\n"
6     },
7     "contracts/manifold/lazyclaim/IERC721LazyPayableClaim.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./ILazyPayableClaim.sol\";\n\n/**\n * Lazy Payable Claim interface\n */\ninterface IERC721LazyPayableClaim is ILazyPayableClaim {\n    struct ClaimParameters {\n        uint32 totalMax;\n        uint32 walletMax;\n        uint48 startDate;\n        uint48 endDate;\n        StorageProtocol storageProtocol;\n        bool identical;\n        bytes32 merkleRoot;\n        string location;\n        uint256 cost;\n        address payable paymentReceiver;\n        address erc20;\n    }\n\n    struct Claim {\n        uint32 total;\n        uint32 totalMax;\n        uint32 walletMax;\n        uint48 startDate;\n        uint48 endDate;\n        StorageProtocol storageProtocol;\n        bool identical;\n        bytes32 merkleRoot;\n        string location;\n        uint256 cost;\n        address payable paymentReceiver;\n        address erc20;\n    }\n\n    /**\n     * @notice initialize a new claim, emit initialize event, and return the newly created index\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\n     */\n    function initializeClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\n\n    /**\n     * @notice update an existing claim at claimIndex\n     * @param creatorContractAddress    the creator contract corresponding to the claim\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\n     */\n    function updateClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\n\n    /**\n     * @notice update tokenURI parameters for an existing claim at claimIndex\n     * @param creatorContractAddress    the creator contract corresponding to the claim\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n     * @param storageProtocol           the new storage protocol\n     * @param identical                 the new value of identical\n     * @param location                  the new location\n     */\n    function updateTokenURIParams(address creatorContractAddress, uint256 claimIndex, StorageProtocol storageProtocol, bool identical, string calldata location) external;\n\n    /**\n     * @notice get a claim corresponding to a creator contract and index\n     * @param creatorContractAddress    the address of the creator contract\n     * @param claimIndex                the index of the claim\n     * @return                          the claim object\n     */\n    function getClaim(address creatorContractAddress, uint256 claimIndex) external view returns(Claim memory);\n\n    /**\n     * @notice allow admin to airdrop arbitrary tokens \n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n     * @param recipients                addresses to airdrop to\n     * @param amounts                   number of tokens to airdrop to each address in addresses\n     */\n    function airdrop(address creatorContractAddress, uint256 claimIndex, address[] calldata recipients, uint16[] calldata amounts) external;\n}\n"
9     },
10     "contracts/manifold/lazyclaim/LazyPayableClaim.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// solhint-disable reason-string\npragma solidity ^0.8.0;\n\nimport \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../../libraries/delegation-registry/IDelegationRegistry.sol\";\nimport \"../../libraries/manifold-membership/IManifoldMembership.sol\";\n\nimport \"./ILazyPayableClaim.sol\";\n\n/**\n * @title Lazy Payable Claim\n * @author manifold.xyz\n * @notice Lazy payable claim with optional whitelist ERC721 tokens\n */\nabstract contract LazyPayableClaim is ILazyPayableClaim, AdminControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string internal constant ARWEAVE_PREFIX = \"https://arweave.net/\";\n    string internal constant IPFS_PREFIX = \"ipfs://\";\n\n    uint256 internal constant MINT_INDEX_BITMASK = 0xFF;\n    // solhint-disable-next-line\n    address public immutable DELEGATION_REGISTRY;\n\n    uint256 public constant MINT_FEE = 500000000000000;\n    uint256 public constant MINT_FEE_MERKLE = 690000000000000;\n    address public MEMBERSHIP_ADDRESS;\n\n    uint256 internal constant MAX_UINT_32 = 0xffffffff;\n    uint256 internal constant MAX_UINT_256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    address private constant ADDRESS_ZERO = 0x0000000000000000000000000000000000000000;\n\n    // ONLY USED FOR NON-MERKLE MINTS: stores the number of tokens minted per wallet per claim, in order to limit maximum\n    // { contractAddress => { claimIndex => { walletAddress => walletMints } } }\n    mapping(address => mapping(uint256 => mapping(address => uint256))) internal _mintsPerWallet;\n\n    // ONLY USED FOR MERKLE MINTS: stores mapping from claim to indices minted\n    // { contractAddress => {claimIndex => { claimIndexOffset => index } } }\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) internal _claimMintIndices;\n\n    EnumerableSet.AddressSet private _proxyAddresses;\n\n    /**\n     * @notice This extension is shared, not single-creator. So we must ensure\n     * that a claim's initializer is an admin on the creator contract\n     * @param creatorContractAddress    the address of the creator contract to check the admin against\n     */\n    modifier creatorAdminRequired(address creatorContractAddress) {\n        AdminControl creatorCoreContract = AdminControl(creatorContractAddress);\n        require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\");\n        _;\n    }\n\n    constructor(address delegationRegistry) {\n        DELEGATION_REGISTRY = delegationRegistry;\n    }\n\n    /**\n     * See {ILazyPayableClaim-withdraw}.\n     */\n    function withdraw(address payable receiver, uint256 amount) external override adminRequired {\n        (bool sent, ) = receiver.call{value: amount}(\"\");\n        require(sent, \"Failed to transfer to receiver\");\n    }\n\n    /**\n     * See {ILazyPayableClaim-setMembershipAddress}.\n     */\n    function setMembershipAddress(address membershipAddress) external override adminRequired {\n        MEMBERSHIP_ADDRESS = membershipAddress;\n    }\n\n    /**\n     * See {ILazyPayableClaim-addMintProxyAddresses}.\n     */\n    function addMintProxyAddresses(address[] calldata proxyAddresses) external override adminRequired {\n        for (uint256 i; i < proxyAddresses.length;) {\n            _proxyAddresses.add(proxyAddresses[i]);\n            unchecked { ++i; }\n        }\n    }\n\n    /**\n     * See {ILazyPayableClaim-removeMintProxyAddresses}.\n     */\n    function removeMintProxyAddresses(address[] calldata proxyAddresses) external override adminRequired {\n        for (uint256 i; i < proxyAddresses.length;) {\n            _proxyAddresses.remove(proxyAddresses[i]);\n            unchecked { ++i; }\n        }\n    }\n\n    function _transferFunds(address erc20, uint256 cost, address payable recipient, uint16 mintCount, bool merkle) internal {\n        uint256 payableCost;\n        if (erc20 != ADDRESS_ZERO) {\n            require(IERC20(erc20).transferFrom(msg.sender, recipient, cost*mintCount), \"Insufficient funds\");\n        } else {\n            payableCost = cost;\n        }\n        if (MEMBERSHIP_ADDRESS != ADDRESS_ZERO) {\n            if (!IManifoldMembership(MEMBERSHIP_ADDRESS).isActiveMember(msg.sender)) {\n                payableCost += merkle ? MINT_FEE_MERKLE : MINT_FEE; \n            }\n        } else {\n            payableCost += merkle ? MINT_FEE_MERKLE : MINT_FEE; \n        }\n        if (mintCount > 1) {\n            payableCost *= mintCount;\n            cost *= mintCount;\n        }\n\n        // Check price\n        require(msg.value >= payableCost, \"Invalid amount\");\n        if (erc20 == ADDRESS_ZERO && cost != 0) {\n            // solhint-disable-next-line\n            (bool sent, ) = recipient.call{value: cost}(\"\");\n            require(sent, \"Failed to transfer to receiver\");\n        }\n    }\n\n    function _transferFundsProxy(address erc20, uint256 cost, address payable recipient, uint16 mintCount, bool merkle) internal {\n        require(erc20 == address(0) && _proxyAddresses.contains(msg.sender), \"Not approved\");\n        uint256 payableCost = cost + (merkle ? MINT_FEE_MERKLE : MINT_FEE);\n        if (mintCount > 1) {\n            payableCost *= mintCount;\n            cost *= mintCount;\n        }\n        // Check price\n        require(msg.value == payableCost, \"Invalid amount\");\n        if (cost != 0) {\n            // solhint-disable-next-line\n            (bool sent, ) = recipient.call{value: cost}(\"\");\n            require(sent, \"Failed to transfer to receiver\");\n        }\n    }\n\n    function _checkMintIndex(address creatorContractAddress, uint256 claimIndex, bytes32 merkleRoot, uint32 mintIndex) internal view returns (bool) {\n        uint256 claimMintIndex = mintIndex >> 8;\n        require(merkleRoot != \"\", \"Can only check merkle claims\");\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\n        return mintBitmask & claimMintTracking != 0;\n    }\n\n    function _validateMint(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) internal {\n        // Check timestamps\n        require(\n            (startDate <= block.timestamp) &&\n            (endDate == 0 || endDate >= block.timestamp),\n            \"Claim inactive\"\n        );\n\n        if (merkleRoot != \"\") {\n            // Merkle mint\n            _checkMerkleAndUpdate(msg.sender, creatorContractAddress, claimIndex, merkleRoot, mintIndex, merkleProof, mintFor);\n        } else {\n            require(mintFor == msg.sender, \"Invalid input\");\n            // Non-merkle mint\n            if (walletMax != 0) {\n                require(++_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] <= walletMax, \"Maximum tokens already minted for this wallet\");\n            }\n        }\n    }\n\n    function _validateMint(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) internal {\n        // Check timestamps\n        require(\n            (startDate <= block.timestamp) &&\n            (endDate == 0 || endDate >= block.timestamp),\n            \"Claim inactive\"\n        );\n\n        if (merkleRoot != \"\") {\n            require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\");\n            // Merkle mint\n            for (uint256 i; i < mintCount;) {\n                _checkMerkleAndUpdate(msg.sender, creatorContractAddress, claimIndex, merkleRoot, mintIndices[i], merkleProofs[i], mintFor);\n                unchecked { ++i; }\n            }\n        } else {\n            require(mintFor == msg.sender, \"Invalid input\");\n            // Non-merkle mint\n            if (walletMax != 0) {\n                _mintsPerWallet[creatorContractAddress][claimIndex][mintFor] += mintCount;\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][mintFor] <= walletMax, \"Too many requested for this wallet\");\n            }\n        }\n    }\n\n    function _validateMintProxy(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) internal {\n        // Check timestamps\n        require(\n            (startDate <= block.timestamp) &&\n            (endDate == 0 || endDate >= block.timestamp),\n            \"Claim inactive\"\n        );\n\n        if (merkleRoot != \"\") {\n            require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\");\n            // Merkle mint\n            for (uint256 i; i < mintCount;) {\n                // Proxy mints treat the mintFor as the transaction sender\n                _checkMerkleAndUpdate(mintFor, creatorContractAddress, claimIndex, merkleRoot, mintIndices[i], merkleProofs[i], mintFor);\n                unchecked { ++i; }\n            }\n        } else {\n            // Non-merkle mint\n            if (walletMax != 0) {\n                _mintsPerWallet[creatorContractAddress][claimIndex][mintFor] += mintCount;\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][mintFor] <= walletMax, \"Too many requested for this wallet\");\n            }\n        }\n    }\n\n    function _checkMerkleAndUpdate(address sender, address creatorContractAddress, uint256 claimIndex, bytes32 merkleRoot, uint32 mintIndex, bytes32[] memory merkleProof, address mintFor) private {\n        // Merkle mint\n        bytes32 leaf;\n        if (mintFor == sender) {\n            leaf = keccak256(abi.encodePacked(sender, mintIndex));\n        } else {\n            // Direct verification failed, try delegate verification\n            IDelegationRegistry dr = IDelegationRegistry(DELEGATION_REGISTRY);\n            require(dr.checkDelegateForContract(sender, mintFor, address(this)), \"Invalid delegate\");\n            leaf = keccak256(abi.encodePacked(mintFor, mintIndex));\n        }\n        require(MerkleProof.verify(merkleProof, merkleRoot, leaf), \"Could not verify merkle proof\");\n\n        // Check if mintIndex has been minted\n        uint256 claimMintIndex = mintIndex >> 8;\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\n        require(mintBitmask & claimMintTracking == 0, \"Already minted\");\n        _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] = claimMintTracking | mintBitmask;\n    }\n\n    function _getTotalMints(uint32 walletMax, address minter, address creatorContractAddress, uint256 claimIndex) internal view returns(uint32) {\n        require(walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\");\n        return uint32(_mintsPerWallet[creatorContractAddress][claimIndex][minter]);\n    }\n\n}"
12     },
13     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
15     },
16     "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Implement this if you want your extension to have overloadable URI's\n */\ninterface ICreatorExtensionTokenURI is IERC165 {\n\n    /**\n     * Get the uri for a given creator/tokenId\n     */\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\n}\n"
18     },
19     "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./ICreatorCore.sol\";\n\n/**\n * @dev Core ERC721 creator interface\n */\ninterface IERC721CreatorCore is ICreatorCore {\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenIds minted\n     */\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev burn a token. Can only be called by token owner or approved address.\n     * On burn, calls back to the registered extension's onBurn method\n     */\n    function burn(uint256 tokenId) external;\n\n}"
21     },
22     "contracts/manifold/lazyclaim/ILazyPayableClaim.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\n/**\n * Lazy Payable Claim interface\n */\ninterface ILazyPayableClaim {\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\n    \n    event ClaimInitialized(address indexed creatorContract, uint256 indexed claimIndex, address initializer);\n    event ClaimUpdated(address indexed creatorContract, uint256 indexed claimIndex);\n    event ClaimMint(address indexed creatorContract, uint256 indexed claimIndex);\n    event ClaimMintBatch(address indexed creatorContract, uint256 indexed claimIndex, uint16 mintCount);\n    event ClaimMintProxy(address indexed creatorContract, uint256 indexed claimIndex, uint16 mintCount, address proxy, address mintFor);\n\n    /**\n     * @notice Withdraw funds\n     */\n    function withdraw(address payable receiver, uint256 amount) external;\n\n    /**\n     * @notice Set the Manifold Membership address\n     */\n    function setMembershipAddress(address membershipAddress) external;\n\n    /**\n     * @notice Add mint proxy addresses\n     */\n    function addMintProxyAddresses(address[] calldata proxyAddresses) external;\n\n    /**\n     * @notice Remove mint proxy addresses\n     */\n    function removeMintProxyAddresses(address[] calldata proxyAddresses) external;\n\n    /**\n     * @notice check if a mint index has been consumed or not (only for merkle claims)\n     *\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @param mintIndex                 the mint index of the claim\n     * @return                          whether or not the mint index was consumed\n     */\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) external view returns(bool);\n\n    /**\n     * @notice check if multiple mint indices has been consumed or not (only for merkle claims)\n     *\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @param mintIndices               the mint index of the claim\n     * @return                          whether or not the mint index was consumed\n     */\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external view returns(bool[] memory);\n\n    /**\n     * @notice get mints made for a wallet (only for non-merkle claims with walletMax)\n     *\n     * @param minter                    the address of the minting address\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @return                          how many mints the minter has made\n     */\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external view returns(uint32);\n\n    /**\n     * @notice allow a wallet to lazily claim a token according to parameters\n     * @param creatorContractAddress    the creator contract address\n     * @param claimIndex                the index of the claim for which we will mint\n     * @param mintIndex                 the mint index (only needed for merkle claims)\n     * @param merkleProof               if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\n     * @param mintFor                   mintFor must be the msg.sender or a delegate wallet address (in the case of merkle based mints)\n     */\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) external payable;\n\n    /**\n     * @notice allow a wallet to lazily claim a token according to parameters\n     * @param creatorContractAddress    the creator contract address\n     * @param claimIndex                the index of the claim for which we will mint\n     * @param mintCount                 the number of claims to mint\n     * @param mintIndices               the mint index (only needed for merkle claims)\n     * @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\n     * @param mintFor                   mintFor must be the msg.sender or a delegate wallet address (in the case of merkle based mints)\n     */\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable;\n\n    /**\n     * @notice allow a proxy to mint a token for another address (non-merkle mints only)\n     * @param creatorContractAddress    the creator contract address\n     * @param claimIndex                the index of the claim for which we will mint\n     * @param mintCount                 the number of claims to mint\n     * @param mintIndices               the mint index (only needed for merkle claims)\n     * @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\n     * @param mintFor                   the address to mint for\n     */\n    function mintProxy(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable;\n\n}"
24     },
25     "contracts/libraries/manifold-membership/IManifoldMembership.sol": {
26       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\n/**\n * Manifold Membership interface\n */\ninterface IManifoldMembership {\n   function isActiveMember(address sender) external view returns (bool);\n}"
27     },
28     "contracts/libraries/delegation-registry/IDelegationRegistry.sol": {
29       "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.9;\n\n/**\n * @title An immutable registry contract to be deployed as a standalone primitive\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\n * from here and integrate those permissions into their flow\n */\ninterface IDelegationRegistry {\n    /// @notice Delegation type\n    enum DelegationType {\n        NONE,\n        ALL,\n        CONTRACT,\n        TOKEN\n    }\n\n    /// @notice Info about a single delegation, used for onchain enumeration\n    struct DelegationInfo {\n        DelegationType type_;\n        address vault;\n        address delegate;\n        address contract_;\n        uint256 tokenId;\n    }\n\n    /// @notice Info about a single contract-level delegation\n    struct ContractDelegation {\n        address contract_;\n        address delegate;\n    }\n\n    /// @notice Info about a single token-level delegation\n    struct TokenDelegation {\n        address contract_;\n        uint256 tokenId;\n        address delegate;\n    }\n\n    /// @notice Emitted when a user delegates their entire wallet\n    event DelegateForAll(address vault, address delegate, bool value);\n\n    /// @notice Emitted when a user delegates a specific contract\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\n\n    /// @notice Emitted when a user delegates a specific token\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\n\n    /// @notice Emitted when a user revokes all delegations\n    event RevokeAllDelegates(address vault);\n\n    /// @notice Emitted when a user revoes all delegations for a given delegate\n    event RevokeDelegate(address vault, address delegate);\n\n    /**\n     * -----------  WRITE -----------\n     */\n\n    /**\n     * @notice Allow the delegate to act on your behalf for all contracts\n     * @param delegate The hotwallet to act on your behalf\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForAll(address delegate, bool value) external;\n\n    /**\n     * @notice Allow the delegate to act on your behalf for a specific contract\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForContract(address delegate, address contract_, bool value) external;\n\n    /**\n     * @notice Allow the delegate to act on your behalf for a specific token\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param tokenId The token id for the token you're delegating\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\n\n    /**\n     * @notice Revoke all delegates\n     */\n    function revokeAllDelegates() external;\n\n    /**\n     * @notice Revoke a specific delegate for all their permissions\n     * @param delegate The hotwallet to revoke\n     */\n    function revokeDelegate(address delegate) external;\n\n    /**\n     * @notice Remove yourself as a delegate for a specific vault\n     * @param vault The vault which delegated to the msg.sender, and should be removed\n     */\n    function revokeSelf(address vault) external;\n\n    /**\n     * -----------  READ -----------\n     */\n\n    /**\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\n     * @param delegate The delegate that you would like to retrieve delegations for\n     * @return info Array of DelegationInfo structs\n     */\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\n\n    /**\n     * @notice Returns an array of wallet-level delegates for a given vault\n     * @param vault The cold wallet who issued the delegation\n     * @return addresses Array of wallet-level delegates for a given vault\n     */\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\n\n    /**\n     * @notice Returns an array of contract-level delegates for a given vault and contract\n     * @param vault The cold wallet who issued the delegation\n     * @param contract_ The address for the contract you're delegating\n     * @return addresses Array of contract-level delegates for a given vault and contract\n     */\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\n\n    /**\n     * @notice Returns an array of contract-level delegates for a given vault's token\n     * @param vault The cold wallet who issued the delegation\n     * @param contract_ The address for the contract holding the token\n     * @param tokenId The token id for the token you're delegating\n     * @return addresses Array of contract-level delegates for a given vault's token\n     */\n    function getDelegatesForToken(address vault, address contract_, uint256 tokenId)\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     * @notice Returns all contract-level delegations for a given vault\n     * @param vault The cold wallet who issued the delegations\n     * @return delegations Array of ContractDelegation structs\n     */\n    function getContractLevelDelegations(address vault)\n        external\n        view\n        returns (ContractDelegation[] memory delegations);\n\n    /**\n     * @notice Returns all token-level delegations for a given vault\n     * @param vault The cold wallet who issued the delegations\n     * @return delegations Array of TokenDelegation structs\n     */\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\n\n    /**\n     * @notice Returns true if the address is delegated to act on the entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\n\n    /**\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForContract(address delegate, address vault, address contract_)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param tokenId The token id for the token you're delegating\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId)\n        external\n        view\n        returns (bool);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Strings.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
42     },
43     "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IAdminControl.sol\";\n\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Track registered admins\n    EnumerableSet.AddressSet private _admins;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdminControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Only allows approved admins to call the specified function\n     */\n    modifier adminRequired() {\n        require(owner() == msg.sender || _admins.contains(msg.sender), \"AdminControl: Must be owner or admin\");\n        _;\n    }   \n\n    /**\n     * @dev See {IAdminControl-getAdmins}.\n     */\n    function getAdmins() external view override returns (address[] memory admins) {\n        admins = new address[](_admins.length());\n        for (uint i = 0; i < _admins.length(); i++) {\n            admins[i] = _admins.at(i);\n        }\n        return admins;\n    }\n\n    /**\n     * @dev See {IAdminControl-approveAdmin}.\n     */\n    function approveAdmin(address admin) external override onlyOwner {\n        if (!_admins.contains(admin)) {\n            emit AdminApproved(admin, msg.sender);\n            _admins.add(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-revokeAdmin}.\n     */\n    function revokeAdmin(address admin) external override onlyOwner {\n        if (_admins.contains(admin)) {\n            emit AdminRevoked(admin, msg.sender);\n            _admins.remove(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-isAdmin}.\n     */\n    function isAdmin(address admin) public override view returns (bool) {\n        return (owner() == admin || _admins.contains(admin));\n    }\n\n}"
45     },
46     "@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Core creator interface\n */\ninterface ICreatorCore is IERC165 {\n\n    event ExtensionRegistered(address indexed extension, address indexed sender);\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\n    event ApproveTransferUpdated(address extension);\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\n\n    /**\n     * @dev gets address of all extensions\n     */\n    function getExtensions() external view returns (address[] memory);\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * Returns True if removed, False if already removed.\n     */\n    function unregisterExtension(address extension) external;\n\n    /**\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\n     * This function will destroy all ability to reference the metadata of any tokens created\n     * by the specified extension. It will also unregister the extension if needed.\n     * Returns True if removed, False if already removed.\n     */\n    function blacklistExtension(address extension) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     */\n    function setBaseTokenURIExtension(string calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\n\n    /**\n     * @dev set the common prefix of an extension.  Can only be called by extension.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURI(string calldata uri) external;\n\n    /**\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefix(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\n\n    /**\n     * @dev set a permissions contract for an extension.  Used to control minting.\n     */\n    function setMintPermissions(address extension, address permissions) external;\n\n    /**\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\n     * from the extension before transferring\n     */\n    function setApproveTransferExtension(bool enabled) external;\n\n    /**\n     * @dev get the extension of a given token\n     */\n    function tokenExtension(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Set default royalties\n     */\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of a token\n     */\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of an extension\n     */\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    \n    // Royalty support for various other standards\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n\n    /**\n     * @dev Set the default approve transfer contract location.\n     */\n    function setApproveTransfer(address extension) external; \n\n    /**\n     * @dev Get the default approve transfer contract location.\n     */\n    function getApproveTransfer() external view returns (address);\n}\n"
48     },
49     "@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for admin control\n */\ninterface IAdminControl is IERC165 {\n\n    event AdminApproved(address indexed account, address indexed sender);\n    event AdminRevoked(address indexed account, address indexed sender);\n\n    /**\n     * @dev gets address of all admins\n     */\n    function getAdmins() external view returns (address[] memory);\n\n    /**\n     * @dev add an admin.  Can only be called by contract owner.\n     */\n    function approveAdmin(address admin) external;\n\n    /**\n     * @dev remove an admin.  Can only be called by contract owner.\n     */\n    function revokeAdmin(address admin) external;\n\n    /**\n     * @dev checks whether or not given address is an admin\n     * Returns True if they are\n     */\n    function isAdmin(address admin) external view returns (bool);\n\n}"
51     },
52     "@openzeppelin/contracts/access/Ownable.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
57     },
58     "@openzeppelin/contracts/utils/Context.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 1000
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     }
79   }
80 }}