1 /*
2 * Generated by @Thrasher66099
3 * Email thrasher66099@gmail.com for your NFT launch needs
4 */
5 
6 pragma solidity ^0.8.0;
7 
8 interface IByteContract {
9     function burn(address _from, uint256 _amount) external;
10     function getReward(address _to) external;
11     function updateRewardOnMint(address _user, uint256 tokenId) external;
12     function updateReward(address _from, address _to, uint256 _tokenId) external;
13 }
14 
15 interface IMintContract {
16     function generateURI(uint256 citizenId) external view returns (string memory);
17     function calculateRewardRate(uint256 identityId, uint256 vaultId) external view returns(uint256);
18 }
19 
20 interface IIdentityContract {  
21     function getClass(uint256 tokenId) external view returns (string memory);
22 }
23 
24 interface IBoughtIdentityContract {
25     function claimIdentity(address _to) external;
26 }
27 
28 /**
29  * @dev Interface of the ERC165 standard, as defined in the
30  * https://eips.ethereum.org/EIPS/eip-165[EIP].
31  *
32  * Implementers can declare support of contract interfaces, which can then be
33  * queried by others ({ERC165Checker}).
34  *
35  * For an implementation, see {ERC165}.
36  */
37 interface IERC165 {
38     /**
39      * @dev Returns true if this contract implements the interface defined by
40      * `interfaceId`. See the corresponding
41      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
42      * to learn more about how these ids are created.
43      *
44      * This function call must use less than 30 000 gas.
45      */
46     function supportsInterface(bytes4 interfaceId) external view returns (bool);
47 }
48 
49 /**
50  * @dev Required interface of an ERC721 compliant contract.
51  */
52 interface IERC721 is IERC165 {
53     /**
54      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
55      */
56     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
57 
58     /**
59      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
60      */
61     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
62 
63     /**
64      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
65      */
66     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
67 
68     /**
69      * @dev Returns the number of tokens in ``owner``'s account.
70      */
71     function balanceOf(address owner) external view returns (uint256 balance);
72 
73     /**
74      * @dev Returns the owner of the `tokenId` token.
75      *
76      * Requirements:
77      *
78      * - `tokenId` must exist.
79      */
80     function ownerOf(uint256 tokenId) external view returns (address owner);
81 
82     /**
83      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
84      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
85      *
86      * Requirements:
87      *
88      * - `from` cannot be the zero address.
89      * - `to` cannot be the zero address.
90      * - `tokenId` token must exist and be owned by `from`.
91      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
92      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
93      *
94      * Emits a {Transfer} event.
95      */
96     function safeTransferFrom(
97         address from,
98         address to,
99         uint256 tokenId
100     ) external;
101 
102     /**
103      * @dev Transfers `tokenId` token from `from` to `to`.
104      *
105      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
106      *
107      * Requirements:
108      *
109      * - `from` cannot be the zero address.
110      * - `to` cannot be the zero address.
111      * - `tokenId` token must be owned by `from`.
112      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
113      *
114      * Emits a {Transfer} event.
115      */
116     function transferFrom(
117         address from,
118         address to,
119         uint256 tokenId
120     ) external;
121 
122     /**
123      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
124      * The approval is cleared when the token is transferred.
125      *
126      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
127      *
128      * Requirements:
129      *
130      * - The caller must own the token or be an approved operator.
131      * - `tokenId` must exist.
132      *
133      * Emits an {Approval} event.
134      */
135     function approve(address to, uint256 tokenId) external;
136 
137     /**
138      * @dev Returns the account approved for `tokenId` token.
139      *
140      * Requirements:
141      *
142      * - `tokenId` must exist.
143      */
144     function getApproved(uint256 tokenId) external view returns (address operator);
145 
146     /**
147      * @dev Approve or remove `operator` as an operator for the caller.
148      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
149      *
150      * Requirements:
151      *
152      * - The `operator` cannot be the caller.
153      *
154      * Emits an {ApprovalForAll} event.
155      */
156     function setApprovalForAll(address operator, bool _approved) external;
157 
158     /**
159      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
160      *
161      * See {setApprovalForAll}
162      */
163     function isApprovedForAll(address owner, address operator) external view returns (bool);
164 
165     /**
166      * @dev Safely transfers `tokenId` token from `from` to `to`.
167      *
168      * Requirements:
169      *
170      * - `from` cannot be the zero address.
171      * - `to` cannot be the zero address.
172      * - `tokenId` token must exist and be owned by `from`.
173      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
174      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
175      *
176      * Emits a {Transfer} event.
177      */
178     function safeTransferFrom(
179         address from,
180         address to,
181         uint256 tokenId,
182         bytes calldata data
183     ) external;
184 }
185 
186 
187 
188 /**
189  * @dev String operations.
190  */
191 library Strings {
192     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
193 
194     /**
195      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
196      */
197     function toString(uint256 value) internal pure returns (string memory) {
198         // Inspired by OraclizeAPI's implementation - MIT licence
199         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
200 
201         if (value == 0) {
202             return "0";
203         }
204         uint256 temp = value;
205         uint256 digits;
206         while (temp != 0) {
207             digits++;
208             temp /= 10;
209         }
210         bytes memory buffer = new bytes(digits);
211         while (value != 0) {
212             digits -= 1;
213             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
214             value /= 10;
215         }
216         return string(buffer);
217     }
218 
219 
220     /**
221      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation. 
222      */
223     function toHexString(uint256 value) internal pure returns (string memory) {
224         if (value == 0) {
225             return "0x00";
226         }
227         uint256 temp = value;
228         uint256 length = 0;
229         while (temp != 0) {
230             length++;
231             temp >>= 8;
232         }
233         return toHexString(value, length);
234     }
235 
236     /**
237      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
238      */
239     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
240         bytes memory buffer = new bytes(2 * length + 2);
241         buffer[0] = "0";
242         buffer[1] = "x";
243         for (uint256 i = 2 * length + 1; i > 1; --i) {
244             buffer[i] = _HEX_SYMBOLS[value & 0xf];
245             value >>= 4;
246         }
247         require(value == 0, "Strings: hex length insufficient");
248         return string(buffer);
249     }
250 }
251 
252 
253 /*
254  * @dev Provides information about the current execution context, including the
255  * sender of the transaction and its data. While these are generally available
256  * via msg.sender and msg.data, they should not be accessed in such a direct
257  * manner, since when dealing with meta-transactions the account sending and
258  * paying for execution may not be the actual sender (as far as an application
259  * is concerned).
260  *
261  * This contract is only required for intermediate, library-like contracts.
262  */
263 abstract contract Context {
264     function _msgSender() internal view virtual returns (address) {
265         return msg.sender;
266     }
267 
268     function _msgData() internal view virtual returns (bytes calldata) {
269         return msg.data;
270     }
271 }
272 
273 
274 /**
275  * @dev Contract module which provides a basic access control mechanism, where
276  * there is an account (an owner) that can be granted exclusive access to
277  * specific functions.
278  *
279  * By default, the owner account will be the one that deploys the contract. This
280  * can later be changed with {transferOwnership}.
281  *
282  * This module is used through inheritance. It will make available the modifier
283  * `onlyOwner`, which can be applied to your functions to restrict their use to
284  * the owner.
285  */
286 abstract contract Ownable is Context {
287     address private _owner;
288 
289     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
290 
291     /**
292      * @dev Initializes the contract setting the deployer as the initial owner.
293      */
294     constructor() {
295         _setOwner(_msgSender());
296     }
297 
298     /**
299      * @dev Returns the address of the current owner.
300      */
301     function owner() public view virtual returns (address) {
302         return _owner;
303     }
304 
305     /**
306      * @dev Throws if called by any account other than the owner.
307      */
308     modifier onlyOwner() {
309         require(owner() == _msgSender(), "Ownable: caller is not the owner");
310         _;
311     }
312 
313     /**
314      * @dev Leaves the contract without owner. It will not be possible to call
315      * `onlyOwner` functions anymore. Can only be called by the current owner.
316      *
317      * NOTE: Renouncing ownership will leave the contract without an owner,
318      * thereby removing any functionality that is only available to the owner.
319      */
320     function renounceOwnership() public virtual onlyOwner {
321         _setOwner(address(0));
322     }
323 
324     /**
325      * @dev Transfers ownership of the contract to a new account (`newOwner`).
326      * Can only be called by the current owner.
327      */
328     function transferOwnership(address newOwner) public virtual onlyOwner {
329         require(newOwner != address(0), "Ownable: new owner is the zero address");
330         _setOwner(newOwner);
331     }
332 
333     function _setOwner(address newOwner) private {
334         address oldOwner = _owner;
335         _owner = newOwner;
336         emit OwnershipTransferred(oldOwner, newOwner);
337     }
338 }
339 
340 
341 /**
342  * @dev Contract module that helps prevent reentrant calls to a function.
343  *
344  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
345  * available, which can be applied to functions to make sure there are no nested
346  * (reentrant) calls to them.
347  *
348  * Note that because there is a single `nonReentrant` guard, functions marked as
349  * `nonReentrant` may not call one another. This can be worked around by making
350  * those functions `private`, and then adding `external` `nonReentrant` entry
351  * points to them.
352  *
353  * TIP: If you would like to learn more about reentrancy and alternative ways
354  * to protect against it, check out our blog post
355  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
356  */
357 abstract contract ReentrancyGuard {
358     // Booleans are more expensive than uint256 or any type that takes up a full
359     // word because each write operation emits an extra SLOAD to first read the
360     // slot's contents, replace the bits taken up by the boolean, and then write
361     // back. This is the compiler's defense against contract upgrades and
362     // pointer aliasing, and it cannot be disabled.
363 
364     // The values being non-zero value makes deployment a bit more expensive,
365     // but in exchange the refund on every call to nonReentrant will be lower in
366     // amount. Since refunds are capped to a percentage of the total
367     // transaction's gas, it is best to keep them low in cases like this one, to
368     // increase the likelihood of the full refund coming into effect.
369     uint256 private constant _NOT_ENTERED = 1;
370     uint256 private constant _ENTERED = 2;
371 
372     uint256 private _status;
373 
374     constructor() {
375         _status = _NOT_ENTERED;
376     }
377 
378     /**
379      * @dev Prevents a contract from calling itself, directly or indirectly.
380      * Calling a `nonReentrant` function from another `nonReentrant`
381      * function is not supported. It is possible to prevent this from happening
382      * by making the `nonReentrant` function external, and make it call a
383      * `private` function that does the actual work.
384      */
385     modifier nonReentrant() {
386         // On the first call to nonReentrant, _notEntered will be true
387         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
388 
389         // Any calls to nonReentrant after this point will fail
390         _status = _ENTERED;
391 
392         _;
393 
394         // By storing the original value once again, a refund is triggered (see
395         // https://eips.ethereum.org/EIPS/eip-2200)
396         _status = _NOT_ENTERED;
397     }
398 }
399 
400 
401 
402 /**
403  * @title ERC721 token receiver interface
404  * @dev Interface for any contract that wants to support safeTransfers
405  * from ERC721 asset contracts.
406  */
407 interface IERC721Receiver {
408     /**
409      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
410      * by `operator` from `from`, this function is called.
411      *
412      * It must return its Solidity selector to confirm the token transfer.
413      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
414      *
415      * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
416      */
417     function onERC721Received(
418         address operator,
419         address from,
420         uint256 tokenId,
421         bytes calldata data
422     ) external returns (bytes4);
423 }
424 
425 
426 /**
427  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
428  * @dev See https://eips.ethereum.org/EIPS/eip-721
429  */
430 interface IERC721Metadata is IERC721 {
431     /**
432      * @dev Returns the token collection name.
433      */
434     function name() external view returns (string memory);
435 
436     /**
437      * @dev Returns the token collection symbol.
438      */
439     function symbol() external view returns (string memory);
440 
441     /**
442      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
443      */
444     function tokenURI(uint256 tokenId) external view returns (string memory);
445 }
446 
447 
448 /**
449  * @dev Collection of functions related to the address type
450  */
451 library Address {
452     /**
453      * @dev Returns true if `account` is a contract.
454      *
455      * [IMPORTANT]
456      * ====
457      * It is unsafe to assume that an address for which this function returns
458      * false is an externally-owned account (EOA) and not a contract.
459      *
460      * Among others, `isContract` will return false for the following
461      * types of addresses:
462      *
463      *  - an externally-owned account
464      *  - a contract in construction
465      *  - an address where a contract will be created
466      *  - an address where a contract lived, but was destroyed
467      * ====
468      */
469     function isContract(address account) internal view returns (bool) {
470         // This method relies on extcodesize, which returns 0 for contracts in
471         // construction, since the code is only stored at the end of the
472         // constructor execution.
473 
474         uint256 size;
475         assembly {
476             size := extcodesize(account)
477         }
478         return size > 0;
479     }
480 
481     /**
482      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
483      * `recipient`, forwarding all available gas and reverting on errors.
484      *
485      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
486      * of certain opcodes, possibly making contracts go over the 2300 gas limit
487      * imposed by `transfer`, making them unable to receive funds via
488      * `transfer`. {sendValue} removes this limitation.
489      *
490      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
491      *
492      * IMPORTANT: because control is transferred to `recipient`, care must be
493      * taken to not create reentrancy vulnerabilities. Consider using
494      * {ReentrancyGuard} or the
495      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
496      */
497     function sendValue(address payable recipient, uint256 amount) internal {
498         require(address(this).balance >= amount, "Address: insufficient balance");
499 
500         (bool success, ) = recipient.call{value: amount}("");
501         require(success, "Address: unable to send value, recipient may have reverted");
502     }
503 
504     /**
505      * @dev Performs a Solidity function call using a low level `call`. A
506      * plain `call` is an unsafe replacement for a function call: use this
507      * function instead.
508      *
509      * If `target` reverts with a revert reason, it is bubbled up by this
510      * function (like regular Solidity function calls).
511      *
512      * Returns the raw returned data. To convert to the expected return value,
513      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
514      *
515      * Requirements:
516      *
517      * - `target` must be a contract.
518      * - calling `target` with `data` must not revert.
519      *
520      * _Available since v3.1._
521      */
522     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
523         return functionCall(target, data, "Address: low-level call failed");
524     }
525 
526     /**
527      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
528      * `errorMessage` as a fallback revert reason when `target` reverts.
529      *
530      * _Available since v3.1._
531      */
532     function functionCall(
533         address target,
534         bytes memory data,
535         string memory errorMessage
536     ) internal returns (bytes memory) {
537         return functionCallWithValue(target, data, 0, errorMessage);
538     }
539 
540     /**
541      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
542      * but also transferring `value` wei to `target`.
543      *
544      * Requirements:
545      *
546      * - the calling contract must have an ETH balance of at least `value`.
547      * - the called Solidity function must be `payable`.
548      *
549      * _Available since v3.1._
550      */
551     function functionCallWithValue(
552         address target,
553         bytes memory data,
554         uint256 value
555     ) internal returns (bytes memory) {
556         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
557     }
558 
559     /**
560      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
561      * with `errorMessage` as a fallback revert reason when `target` reverts.
562      *
563      * _Available since v3.1._
564      */
565     function functionCallWithValue(
566         address target,
567         bytes memory data,
568         uint256 value,
569         string memory errorMessage
570     ) internal returns (bytes memory) {
571         require(address(this).balance >= value, "Address: insufficient balance for call");
572         require(isContract(target), "Address: call to non-contract");
573 
574         (bool success, bytes memory returndata) = target.call{value: value}(data);
575         return _verifyCallResult(success, returndata, errorMessage);
576     }
577 
578     /**
579      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
580      * but performing a static call.
581      *
582      * _Available since v3.3._
583      */
584     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
585         return functionStaticCall(target, data, "Address: low-level static call failed");
586     }
587 
588     /**
589      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
590      * but performing a static call.
591      *
592      * _Available since v3.3._
593      */
594     function functionStaticCall(
595         address target,
596         bytes memory data,
597         string memory errorMessage
598     ) internal view returns (bytes memory) {
599         require(isContract(target), "Address: static call to non-contract");
600 
601         (bool success, bytes memory returndata) = target.staticcall(data);
602         return _verifyCallResult(success, returndata, errorMessage);
603     }
604 
605     /**
606      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
607      * but performing a delegate call.
608      *
609      * _Available since v3.4._
610      */
611     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
612         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
613     }
614 
615     /**
616      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
617      * but performing a delegate call.
618      *
619      * _Available since v3.4._
620      */
621     function functionDelegateCall(
622         address target,
623         bytes memory data,
624         string memory errorMessage
625     ) internal returns (bytes memory) {
626         require(isContract(target), "Address: delegate call to non-contract");
627 
628         (bool success, bytes memory returndata) = target.delegatecall(data);
629         return _verifyCallResult(success, returndata, errorMessage);
630     }
631 
632     function _verifyCallResult(
633         bool success,
634         bytes memory returndata,
635         string memory errorMessage
636     ) private pure returns (bytes memory) {
637         if (success) {
638             return returndata;
639         } else {
640             // Look for revert reason and bubble it up if present
641             if (returndata.length > 0) {
642                 // The easiest way to bubble the revert reason is using memory via assembly
643 
644                 assembly {
645                     let returndata_size := mload(returndata)
646                     revert(add(32, returndata), returndata_size)
647                 }
648             } else {
649                 revert(errorMessage);
650             }
651         }
652     }
653 }
654 
655 
656 
657 
658 /**
659  * @dev Implementation of the {IERC165} interface.
660  *
661  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
662  * for the additional interface id that will be supported. For example:
663  *
664  * ```solidity
665  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
666  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
667  * }
668  * ```
669  *
670  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
671  */
672 abstract contract ERC165 is IERC165 {
673     /**
674      * @dev See {IERC165-supportsInterface}.
675      */
676     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
677         return interfaceId == type(IERC165).interfaceId;
678     }
679 }
680 
681 
682 /**
683  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
684  * the Metadata extension, but not including the Enumerable extension, which is available separately as
685  * {ERC721Enumerable}.
686  */
687 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
688     using Address for address;
689     using Strings for uint256;
690 
691     // Token name
692     string private _name;
693 
694     // Token symbol
695     string private _symbol;
696 
697     // Mapping from token ID to owner address
698     mapping(uint256 => address) private _owners;
699 
700     // Mapping owner address to token count
701     mapping(address => uint256) private _balances;
702 
703     // Mapping from token ID to approved address
704     mapping(uint256 => address) private _tokenApprovals;
705 
706     // Mapping from owner to operator approvals
707     mapping(address => mapping(address => bool)) private _operatorApprovals;
708 
709     /**
710      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
711      */
712     constructor(string memory name_, string memory symbol_) {
713         _name = name_;
714         _symbol = symbol_;
715     }
716 
717     /**
718      * @dev See {IERC165-supportsInterface}.
719      */
720     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
721         return
722             interfaceId == type(IERC721).interfaceId ||
723             interfaceId == type(IERC721Metadata).interfaceId ||
724             super.supportsInterface(interfaceId);
725     }
726 
727     /**
728      * @dev See {IERC721-balanceOf}.
729      */
730     function balanceOf(address owner) public view virtual override returns (uint256) {
731         require(owner != address(0), "ERC721: balance query for the zero address");
732         return _balances[owner];
733     }
734 
735     /**
736      * @dev See {IERC721-ownerOf}.
737      */
738     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
739         address owner = _owners[tokenId];
740         require(owner != address(0), "ERC721: owner query for nonexistent token");
741         return owner;
742     }
743 
744     /**
745      * @dev See {IERC721Metadata-name}.
746      */
747     function name() public view virtual override returns (string memory) {
748         return _name;
749     }
750 
751     /**
752      * @dev See {IERC721Metadata-symbol}.
753      */
754     function symbol() public view virtual override returns (string memory) {
755         return _symbol;
756     }
757 
758     /**
759      * @dev See {IERC721Metadata-tokenURI}.
760      */
761     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
762         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
763 
764         string memory baseURI = _baseURI();
765         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
766     }
767 
768     /**
769      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
770      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
771      * by default, can be overriden in child contracts.
772      */
773     function _baseURI() internal view virtual returns (string memory) {
774         return "";
775     }
776 
777     /**
778      * @dev See {IERC721-approve}.
779      */
780     function approve(address to, uint256 tokenId) public virtual override {
781         address owner = ERC721.ownerOf(tokenId);
782         require(to != owner, "ERC721: approval to current owner");
783 
784         require(
785             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
786             "ERC721: approve caller is not owner nor approved for all"
787         );
788 
789         _approve(to, tokenId);
790     }
791 
792     /**
793      * @dev See {IERC721-getApproved}.
794      */
795     function getApproved(uint256 tokenId) public view virtual override returns (address) {
796         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
797 
798         return _tokenApprovals[tokenId];
799     }
800 
801     /**
802      * @dev See {IERC721-setApprovalForAll}.
803      */
804     function setApprovalForAll(address operator, bool approved) public virtual override {
805         require(operator != _msgSender(), "ERC721: approve to caller");
806 
807         _operatorApprovals[_msgSender()][operator] = approved;
808         emit ApprovalForAll(_msgSender(), operator, approved);
809     }
810 
811     /**
812      * @dev See {IERC721-isApprovedForAll}.
813      */
814     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
815         return _operatorApprovals[owner][operator];
816     }
817 
818     /**
819      * @dev See {IERC721-transferFrom}.
820      */
821     function transferFrom(
822         address from,
823         address to,
824         uint256 tokenId
825     ) public virtual override {
826         //solhint-disable-next-line max-line-length
827         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
828 
829         _transfer(from, to, tokenId);
830     }
831 
832     /**
833      * @dev See {IERC721-safeTransferFrom}.
834      */
835     function safeTransferFrom(
836         address from,
837         address to,
838         uint256 tokenId
839     ) public virtual override {
840         safeTransferFrom(from, to, tokenId, "");
841     }
842 
843     /**
844      * @dev See {IERC721-safeTransferFrom}.
845      */
846     function safeTransferFrom(
847         address from,
848         address to,
849         uint256 tokenId,
850         bytes memory _data
851     ) public virtual override {
852         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
853         _safeTransfer(from, to, tokenId, _data);
854     }
855 
856     /**
857      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
858      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
859      *
860      * `_data` is additional data, it has no specified format and it is sent in call to `to`.
861      *
862      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
863      * implement alternative mechanisms to perform token transfer, such as signature-based.
864      *
865      * Requirements:
866      *
867      * - `from` cannot be the zero address.
868      * - `to` cannot be the zero address.
869      * - `tokenId` token must exist and be owned by `from`.
870      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
871      *
872      * Emits a {Transfer} event.
873      */
874     function _safeTransfer(
875         address from,
876         address to,
877         uint256 tokenId,
878         bytes memory _data
879     ) internal virtual {
880         _transfer(from, to, tokenId);
881         require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
882     }
883 
884     /**
885      * @dev Returns whether `tokenId` exists.
886      *
887      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
888      *
889      * Tokens start existing when they are minted (`_mint`),
890      * and stop existing when they are burned (`_burn`).
891      */
892     function _exists(uint256 tokenId) internal view virtual returns (bool) {
893         return _owners[tokenId] != address(0);
894     }
895 
896     /**
897      * @dev Returns whether `spender` is allowed to manage `tokenId`.
898      *
899      * Requirements:
900      *
901      * - `tokenId` must exist.
902      */
903     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
904         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
905         address owner = ERC721.ownerOf(tokenId);
906         return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
907     }
908 
909     /**
910      * @dev Safely mints `tokenId` and transfers it to `to`.
911      *
912      * Requirements:
913      *
914      * - `tokenId` must not exist.
915      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
916      *
917      * Emits a {Transfer} event.
918      */
919     function _safeMint(address to, uint256 tokenId) internal virtual {
920         _safeMint(to, tokenId, "");
921     }
922 
923     /**
924      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
925      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
926      */
927     function _safeMint(
928         address to,
929         uint256 tokenId,
930         bytes memory _data
931     ) internal virtual {
932         _mint(to, tokenId);
933         require(
934             _checkOnERC721Received(address(0), to, tokenId, _data),
935             "ERC721: transfer to non ERC721Receiver implementer"
936         );
937     }
938 
939     /**
940      * @dev Mints `tokenId` and transfers it to `to`.
941      *
942      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
943      *
944      * Requirements:
945      *
946      * - `tokenId` must not exist.
947      * - `to` cannot be the zero address.
948      *
949      * Emits a {Transfer} event.
950      */
951     function _mint(address to, uint256 tokenId) internal virtual {
952         require(to != address(0), "ERC721: mint to the zero address");
953         require(!_exists(tokenId), "ERC721: token already minted");
954 
955         _beforeTokenTransfer(address(0), to, tokenId);
956 
957         _balances[to] += 1;
958         _owners[tokenId] = to;
959 
960         emit Transfer(address(0), to, tokenId);
961     }
962 
963     /**
964      * @dev Destroys `tokenId`.
965      * The approval is cleared when the token is burned.
966      *
967      * Requirements:
968      *
969      * - `tokenId` must exist.
970      *
971      * Emits a {Transfer} event.
972      */
973     function _burn(uint256 tokenId) internal virtual {
974         address owner = ERC721.ownerOf(tokenId);
975 
976         _beforeTokenTransfer(owner, address(0), tokenId);
977 
978         // Clear approvals
979         _approve(address(0), tokenId);
980 
981         _balances[owner] -= 1;
982         delete _owners[tokenId];
983 
984         emit Transfer(owner, address(0), tokenId);
985     }
986 
987     /**
988      * @dev Transfers `tokenId` from `from` to `to`.
989      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
990      *
991      * Requirements:
992      *
993      * - `to` cannot be the zero address.
994      * - `tokenId` token must be owned by `from`.
995      *
996      * Emits a {Transfer} event.
997      */
998     function _transfer(
999         address from,
1000         address to,
1001         uint256 tokenId
1002     ) internal virtual {
1003         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
1004         require(to != address(0), "ERC721: transfer to the zero address");
1005 
1006         _beforeTokenTransfer(from, to, tokenId);
1007 
1008         // Clear approvals from the previous owner
1009         _approve(address(0), tokenId);
1010 
1011         _balances[from] -= 1;
1012         _balances[to] += 1;
1013         _owners[tokenId] = to;
1014 
1015         emit Transfer(from, to, tokenId);
1016     }
1017 
1018     /**
1019      * @dev Approve `to` to operate on `tokenId`
1020      *
1021      * Emits a {Approval} event.
1022      */
1023     function _approve(address to, uint256 tokenId) internal virtual {
1024         _tokenApprovals[tokenId] = to;
1025         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
1026     }
1027 
1028     /**
1029      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1030      * The call is not executed if the target address is not a contract.
1031      *
1032      * @param from address representing the previous owner of the given token ID
1033      * @param to target address that will receive the tokens
1034      * @param tokenId uint256 ID of the token to be transferred
1035      * @param _data bytes optional data to send along with the call
1036      * @return bool whether the call correctly returned the expected magic value
1037      */
1038     function _checkOnERC721Received(
1039         address from,
1040         address to,
1041         uint256 tokenId,
1042         bytes memory _data
1043     ) private returns (bool) {
1044         if (to.isContract()) {
1045             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
1046                 return retval == IERC721Receiver(to).onERC721Received.selector;
1047             } catch (bytes memory reason) {
1048                 if (reason.length == 0) {
1049                     revert("ERC721: transfer to non ERC721Receiver implementer");
1050                 } else {
1051                     assembly {
1052                         revert(add(32, reason), mload(reason))
1053                     }
1054                 }
1055             }
1056         } else {
1057             return true;
1058         }
1059     }
1060 
1061     /**
1062      * @dev Hook that is called before any token transfer. This includes minting
1063      * and burning.
1064      *
1065      * Calling conditions:
1066      *
1067      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1068      * transferred to `to`.
1069      * - When `from` is zero, `tokenId` will be minted for `to`.
1070      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1071      * - `from` and `to` are never both zero.
1072      *
1073      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1074      */
1075     function _beforeTokenTransfer(
1076         address from,
1077         address to,
1078         uint256 tokenId
1079     ) internal virtual {}
1080 }
1081 
1082 
1083 
1084 /**
1085  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
1086  * @dev See https://eips.ethereum.org/EIPS/eip-721
1087  */
1088 interface IERC721Enumerable is IERC721 {
1089     /**
1090      * @dev Returns the total amount of tokens stored by the contract.
1091      */
1092     function totalSupply() external view returns (uint256);
1093 
1094     /**
1095      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
1096      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
1097      */
1098     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
1099 
1100     /**
1101      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
1102      * Use along with {totalSupply} to enumerate all tokens.
1103      */
1104     function tokenByIndex(uint256 index) external view returns (uint256);
1105 }
1106 
1107 
1108 /**
1109  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
1110  * enumerability of all the token ids in the contract as well as all token ids owned by each
1111  * account.
1112  */
1113 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
1114     // Mapping from owner to list of owned token IDs
1115     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
1116 
1117     // Mapping from token ID to index of the owner tokens list
1118     mapping(uint256 => uint256) private _ownedTokensIndex;
1119 
1120     // Array with all token ids, used for enumeration
1121     uint256[] private _allTokens;
1122 
1123     // Mapping from token id to position in the allTokens array
1124     mapping(uint256 => uint256) private _allTokensIndex;
1125 
1126     /**
1127      * @dev See {IERC165-supportsInterface}.
1128      */
1129     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
1130         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
1131     }
1132 
1133     /**
1134      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1135      */
1136     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
1137         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
1138         return _ownedTokens[owner][index];
1139     }
1140 
1141     /**
1142      * @dev See {IERC721Enumerable-totalSupply}.
1143      */
1144     function totalSupply() public view virtual override returns (uint256) {
1145         return _allTokens.length;
1146     }
1147 
1148     /**
1149      * @dev See {IERC721Enumerable-tokenByIndex}.
1150      */
1151     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
1152         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
1153         return _allTokens[index];
1154     }
1155 
1156     /**
1157      * @dev Hook that is called before any token transfer. This includes minting
1158      * and burning.
1159      *
1160      * Calling conditions:
1161      *
1162      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1163      * transferred to `to`.
1164      * - When `from` is zero, `tokenId` will be minted for `to`.
1165      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1166      * - `from` cannot be the zero address.
1167      * - `to` cannot be the zero address.
1168      *
1169      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1170      */
1171     function _beforeTokenTransfer(
1172         address from,
1173         address to,
1174         uint256 tokenId
1175     ) internal virtual override {
1176         super._beforeTokenTransfer(from, to, tokenId);
1177 
1178         if (from == address(0)) {
1179             _addTokenToAllTokensEnumeration(tokenId);
1180         } else if (from != to) {
1181             _removeTokenFromOwnerEnumeration(from, tokenId);
1182         }
1183         if (to == address(0)) {
1184             _removeTokenFromAllTokensEnumeration(tokenId);
1185         } else if (to != from) {
1186             _addTokenToOwnerEnumeration(to, tokenId);
1187         }
1188     }
1189 
1190     /**
1191      * @dev Private function to add a token to this extension's ownership-tracking data structures.
1192      * @param to address representing the new owner of the given token ID
1193      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
1194      */
1195     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
1196         uint256 length = ERC721.balanceOf(to);
1197         _ownedTokens[to][length] = tokenId;
1198         _ownedTokensIndex[tokenId] = length;
1199     }
1200 
1201     /**
1202      * @dev Private function to add a token to this extension's token tracking data structures.
1203      * @param tokenId uint256 ID of the token to be added to the tokens list
1204      */
1205     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
1206         _allTokensIndex[tokenId] = _allTokens.length;
1207         _allTokens.push(tokenId);
1208     }
1209 
1210     /**
1211      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
1212      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
1213      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
1214      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
1215      * @param from address representing the previous owner of the given token ID
1216      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
1217      */
1218     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
1219         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
1220         // then delete the last slot (swap and pop).
1221 
1222         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
1223         uint256 tokenIndex = _ownedTokensIndex[tokenId];
1224 
1225         // When the token to delete is the last token, the swap operation is unnecessary
1226         if (tokenIndex != lastTokenIndex) {
1227             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
1228 
1229             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1230             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1231         }
1232 
1233         // This also deletes the contents at the last position of the array
1234         delete _ownedTokensIndex[tokenId];
1235         delete _ownedTokens[from][lastTokenIndex];
1236     }
1237 
1238     /**
1239      * @dev Private function to remove a token from this extension's token tracking data structures.
1240      * This has O(1) time complexity, but alters the order of the _allTokens array.
1241      * @param tokenId uint256 ID of the token to be removed from the tokens list
1242      */
1243     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
1244         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
1245         // then delete the last slot (swap and pop).
1246 
1247         uint256 lastTokenIndex = _allTokens.length - 1;
1248         uint256 tokenIndex = _allTokensIndex[tokenId];
1249 
1250         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
1251         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
1252         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
1253         uint256 lastTokenId = _allTokens[lastTokenIndex];
1254 
1255         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1256         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1257 
1258         // This also deletes the contents at the last position of the array
1259         delete _allTokensIndex[tokenId];
1260         _allTokens.pop();
1261     }
1262 }
1263 
1264 contract OwnableDelegateProxy { }
1265 
1266 contract BytProxyRegistry {
1267     mapping(address => OwnableDelegateProxy) public proxies;
1268 }
1269 
1270 contract NTOuterCitizenDeploy is ERC721Enumerable, IERC721Receiver, ReentrancyGuard, Ownable {
1271     
1272     bool citizenMintActive;
1273     bool boughtIdentitiesActive;
1274     bool femaleActive;
1275     address citizenMintContract;
1276     address citizenAlternateMintContract;
1277     address public itemContract;
1278     address public identityContract;
1279     address public boughtIdentityContract;
1280     address public landContract;
1281     address public bytesContract;
1282     uint256 public newestCitizen;
1283     uint256 public mintedIdentityCost = 2000 ether;
1284     uint256 public changeGenderCost = 25 ether;
1285     uint256 public changeSpecialMessageCost = 10 ether;
1286     uint256 creationTime;
1287 
1288     address proxyRegistryAddress;
1289 
1290     // Mapping for identity tokenIds that were used to creat a citizen
1291     mapping(uint256 => uint256) private _identityDataByCitizenId;
1292     // Mapping for item cache tokenIds that were used to creat a citizen
1293     mapping(uint256 => uint256) private _itemCacheDataByCitizenId;
1294     // Mapping for land deed tokenIds that were used to creat a citizen
1295     mapping(uint256 => uint256) private _landDeedDataByCitizenId;
1296     // Mapping for special messages uploaded when a citizen was created
1297     mapping(uint256 => string) private _specialMessageByCitizenId;
1298     // Mapping for citizen creation date
1299     mapping(uint256 => uint256) public _citizenCreationTime;
1300     // Mapping for gender of a citizen
1301     mapping(uint256 => bool ) private _genderFemale;
1302 
1303     function getIdentityIdOfTokenId(uint256 citizenId) public view returns (uint256) {
1304         return _identityDataByCitizenId[citizenId];
1305     }
1306     function getItemCacheIdOfTokenId(uint256 citizenId) public view returns (uint256) {
1307         return _itemCacheDataByCitizenId[citizenId];
1308     }
1309     function getLandDeedIdOfTokenId(uint256 citizenId) public view returns (uint256) {
1310         return _landDeedDataByCitizenId[citizenId];
1311     }
1312     function getSpecialMessageOfTokenId(uint256 citizenId) public view returns (string memory) {
1313         return _specialMessageByCitizenId[citizenId];
1314     }
1315     function getGenderOfTokenId(uint256 citizenId) public view returns (bool) {
1316         return _genderFemale[citizenId];
1317     }
1318 
1319     function onERC721Received(
1320         address operator,
1321         address from,
1322         uint256 tokenId,
1323         bytes calldata data
1324     ) public override pure returns (bytes4) {
1325         return this.onERC721Received.selector ^ 0x23b872dd;
1326     }
1327 
1328     function tokenURI(uint256 tokenId) override public view returns (string memory) {
1329         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1330         
1331         string memory output;
1332         IMintContract dataContract;
1333 
1334         if(_genderFemale[tokenId])
1335         {
1336             dataContract = IMintContract(citizenAlternateMintContract);
1337         }
1338         else
1339         {
1340             dataContract = IMintContract(citizenMintContract);
1341         }
1342         
1343         output = dataContract.generateURI(tokenId);
1344 
1345         return output;
1346     }
1347 
1348     function createCitizen(uint256 identityId, uint256 itemCacheId, uint256 landDeedId, bool genderFemale, string memory specialMessage) public nonReentrant {
1349         require(citizenMintActive, "Uploading is not currently active");
1350         require(identityValidated(identityId), "You are not the owner of that identity");
1351         require(itemCacheValidated(itemCacheId), "You are not the owner of that item cache");
1352         require(landDeedValidated(landDeedId), "You are not the owner of that land deed");
1353 
1354         if(genderFemale)
1355         {
1356            require(femaleActive, "Females cannot be uploaded yet"); 
1357         }
1358 
1359         _safeMint(_msgSender(), newestCitizen + 1);
1360 
1361         newestCitizen++;
1362 
1363         ERC721 _identityContract;
1364 
1365         if(identityId < 4501)
1366         {
1367             _identityContract = ERC721(identityContract);
1368         }
1369         else
1370         {
1371             _identityContract = ERC721(boughtIdentityContract);
1372         }
1373         _identityContract.transferFrom(_msgSender(), address(this), identityId);
1374 
1375         ERC721 _itemContract = ERC721(itemContract);
1376         _itemContract.transferFrom(_msgSender(), address(this), itemCacheId);
1377 
1378         ERC721 _landContract = ERC721(landContract);
1379         _landContract.transferFrom(_msgSender(), address(this), landDeedId);
1380 
1381         // Set the underlying component data mappings
1382         _identityDataByCitizenId[newestCitizen] = identityId;
1383         _itemCacheDataByCitizenId[newestCitizen] = itemCacheId;
1384         _landDeedDataByCitizenId[newestCitizen] = landDeedId;
1385         if(genderFemale)
1386         {
1387             _genderFemale[newestCitizen] = genderFemale;
1388         }
1389         if(bytes(specialMessage).length > 0)
1390         {
1391             _specialMessageByCitizenId[newestCitizen] = specialMessage;
1392         }
1393 
1394         _citizenCreationTime[newestCitizen] = block.timestamp;
1395     }
1396 
1397     function disassembleCitizen(uint256 citizenId)public nonReentrant {
1398         require(ownerOf(citizenId) == _msgSender(), "You do not own that citizen");
1399 
1400         ERC721 _identityContract;
1401 
1402         if(_identityDataByCitizenId[citizenId] < 4501)
1403         {
1404             _identityContract = ERC721(identityContract);
1405         }
1406         else
1407         {
1408             _identityContract = ERC721(boughtIdentityContract);
1409         }
1410         _identityContract.transferFrom(address(this), _msgSender(), _identityDataByCitizenId[citizenId]);
1411 
1412         ERC721 _itemContract = ERC721(itemContract);
1413         _itemContract.transferFrom(address(this), _msgSender(), _itemCacheDataByCitizenId[citizenId]);
1414 
1415         ERC721 _landContract = ERC721(landContract);
1416         _landContract.transferFrom(address(this), _msgSender(), _landDeedDataByCitizenId[citizenId]);
1417 
1418         _burn(citizenId);
1419 
1420         delete _identityDataByCitizenId[citizenId];
1421         delete _itemCacheDataByCitizenId[citizenId];
1422         delete _landDeedDataByCitizenId[citizenId];
1423         delete _genderFemale[citizenId];
1424         delete _specialMessageByCitizenId[citizenId];
1425     }
1426 
1427      function changeGender(uint256 tokenId) public nonReentrant {
1428         require(femaleActive, "Females cannot be uploaded yet"); 
1429         require(ownerOf(tokenId) == _msgSender(), "You do not own that citizen");
1430 
1431         IByteContract iBytes = IByteContract(bytesContract);
1432         iBytes.burn(_msgSender(), changeGenderCost);
1433         _genderFemale[tokenId] = !_genderFemale[tokenId];
1434      }
1435 
1436      function changeSpecialMessage(uint256 tokenId, string memory _message) public nonReentrant {
1437         require(ownerOf(tokenId) == _msgSender(), "You do not own that citizen");
1438 
1439         IByteContract iBytes = IByteContract(bytesContract);
1440         iBytes.burn(_msgSender(), changeSpecialMessageCost);
1441         _specialMessageByCitizenId[tokenId] = _message;
1442      }
1443 
1444      function setChangeGenderCost(uint256 _cost) external onlyOwner {
1445          changeGenderCost = _cost;
1446      }
1447 
1448      function setChangeMessageCost(uint256 _cost) external onlyOwner {
1449          changeSpecialMessageCost = _cost;
1450      }
1451 
1452     function identityValidated(uint256 identityId) internal view returns (bool) {
1453         ERC721Enumerable identityEnumerable;
1454         if(identityId < 4501)
1455         {
1456             identityEnumerable = ERC721Enumerable(identityContract);
1457         }
1458         else
1459         {
1460             identityEnumerable = ERC721Enumerable(boughtIdentityContract);
1461         }
1462         return(identityEnumerable.ownerOf(identityId) == _msgSender());
1463     }
1464 
1465     function itemCacheValidated(uint256 itemCacheId) internal view returns (bool) {
1466         ERC721Enumerable itemCacheEnumerable = ERC721Enumerable(itemContract);
1467         return(itemCacheEnumerable.ownerOf(itemCacheId) == _msgSender());
1468     }
1469 
1470     function landDeedValidated(uint256 landDeedId) internal view returns (bool) {
1471         ERC721Enumerable landDeedEnumerable = ERC721Enumerable(landContract);
1472         return(landDeedEnumerable.ownerOf(landDeedId) == _msgSender());
1473     }
1474 
1475     function setFemaleActive() public onlyOwner {
1476         femaleActive = !femaleActive;
1477     }
1478 
1479     function setCitizenMintActive() public onlyOwner {
1480         citizenMintActive = !citizenMintActive;
1481     }
1482 
1483     function setBoughtIdentitiesActive() public onlyOwner {
1484         boughtIdentitiesActive = !boughtIdentitiesActive;
1485     }
1486 
1487     function setBoughtIdentityContract(address _address) external onlyOwner {
1488         boughtIdentityContract = _address;
1489     }
1490 
1491     function setIdentityAddress(address contractAddress) public onlyOwner {
1492         identityContract = contractAddress;
1493     }
1494 
1495     function setLandContract(address contractAddress) public onlyOwner {
1496         landContract = contractAddress;
1497     }
1498 
1499     function setItemContract(address contractAddress) public onlyOwner {
1500         itemContract = contractAddress;
1501     }
1502 
1503     function setBytesAddress(address contractAddress) public onlyOwner {
1504         bytesContract = contractAddress;
1505     }
1506 
1507     function setCitizenMintContract(address contractAddress) public onlyOwner {
1508         citizenMintContract = contractAddress;
1509     }
1510 
1511     function setCitizenAlternateMintContract(address contractAddress) public onlyOwner {
1512         citizenAlternateMintContract = contractAddress;
1513     }
1514 
1515     function setMintedIdentityCost(uint256 _cost) public onlyOwner {
1516         mintedIdentityCost = _cost;
1517     }
1518 
1519     function mintIdentity() public
1520     {
1521         require(boughtIdentitiesActive, "Identities cannot be bought yet");
1522         require(address(boughtIdentityContract) != address(0), "Identity contract not set");
1523         IByteContract iBytes = IByteContract(bytesContract);
1524         iBytes.burn(_msgSender(), mintedIdentityCost);
1525         IBoughtIdentityContract iBoughtIdentitiesContract = IBoughtIdentityContract(boughtIdentityContract);
1526         iBoughtIdentitiesContract.claimIdentity(_msgSender());
1527     }
1528 
1529     function isApprovedForAll(address _owner, address operator) public view override returns (bool) {
1530         BytProxyRegistry proxyRegistry = BytProxyRegistry(proxyRegistryAddress);
1531         if(address(proxyRegistry.proxies(_owner)) == operator) return true;
1532         return super.isApprovedForAll(_owner, operator);
1533     }
1534 
1535     function toString(uint256 value) internal pure returns (string memory) {
1536     // Inspired by OraclizeAPI's implementation - MIT license
1537     // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
1538 
1539         if (value == 0) {
1540             return "0";
1541         }
1542         uint256 temp = value;
1543         uint256 digits;
1544         while (temp != 0) {
1545             digits++;
1546             temp /= 10;
1547         }
1548         bytes memory buffer = new bytes(digits);
1549         while (value != 0) {
1550             digits -= 1;
1551             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
1552             value /= 10;
1553         }
1554         return string(buffer);
1555     }
1556     
1557     constructor() ERC721("Neo Tokyo Outer Citizen", "NTOCTZN") Ownable() {
1558         creationTime = block.timestamp;
1559         bytesContract = 0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95;
1560         itemContract = 0x7AC66d40d80D2d8D1E45D6b5B10a1C9D1fd69354;
1561         identityContract = 0x698FbAACA64944376e2CDC4CAD86eaa91362cF54;
1562         landContract = 0xf90980AE7A44E2d18B9615396FF5E9252F1DF639;
1563         citizenMintContract = 0xeEb06C3A02B51dc8fCb26c19928844108cA5f857;
1564         proxyRegistryAddress = 0xe850eB266384A133844976aC66B98A44eDBFCb0d;
1565     }
1566 }