1 {{
2   "language": "Solidity",
3   "sources": {
4     "vrhido.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"Ownable.sol\";\nimport \"SafeMath.sol\";\n\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    //function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function burn(uint256 amount) external;\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ninterface USDT {\n    function decimals() external view returns (uint);\n    function transferFrom(address sender, address recipient, uint256 amount) external;\n}\n\nstruct LockedBalance{\n    int128 amount;\n    uint256 end;\n}\n\ninterface VotingEscrow {\n    function create_lock_for(address _for, uint256 _value, uint256 _unlock_time) external;\n    function deposit_for(address _addr, uint256 _value) external;\n    function locked(address arg0) external returns(LockedBalance memory);\n}\n\ncontract VrhIdo is Ownable {\n    using SafeMath for uint256;\n\n\n    event Purchase(address indexed buyer,uint256 indexed round, uint256 paymentAmount, uint256 vrhAmount, uint256 lockedVrhAmount, uint256 lockedEnd, uint256 ratio);\n\n    struct IdoRound{\n        uint256 startTime;\n        uint256 endTime;\n        uint256 idoRoundSupply;\n        uint256 ratio;// for example: usdt 10**6 can buy token 5x(10**18)  then ratio = 5x(10**18)\n        uint256 salesVolume;\n        uint256 burnVolume;\n    }\n\n    IdoRound[] private idoRoundList;\n    uint256 private MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint256 private YEAR = 86400 * 365;\n    uint256 private WEEK = 7 * 86400;\n\n    address public vrhTokenAddress;\n    address public quoteTokenAddress;\n    address public votingEscrowAddress;\n    address public fundAddress;\n\n    uint256 public lockedVrhRatio;\n\n    uint256 public quoteTokenDecimals;\n\n\n    constructor(address _vrhTokenAddress, address _quoteTokenAddress, address _votingEscrowAddress, address _fundAddress, uint256 _lockedVrhRatio) {\n\n        vrhTokenAddress = _vrhTokenAddress;\n        quoteTokenAddress = _quoteTokenAddress;\n        votingEscrowAddress = _votingEscrowAddress;\n        fundAddress = _fundAddress;\n\n        lockedVrhRatio = _lockedVrhRatio;\n\n        if(_quoteTokenAddress == address(0)){\n            quoteTokenDecimals = 18;\n        }else{\n            quoteTokenDecimals = USDT(quoteTokenAddress).decimals();\n        }\n\n        IERC20(vrhTokenAddress).approve(votingEscrowAddress, MAX_INT);\n    }\n\n    function setFundAddress(address _fundAddress) external onlyOwner {\n        require(_fundAddress != address(0));\n        fundAddress = _fundAddress;\n    }\n\n    function addIdoRound(uint256 _startTime, uint256 _endTime, uint256 _idoRoundSupply, uint256 _ratio) external onlyOwner {\n\n        require(_startTime > block.timestamp, \"startTime error\");\n        require(_endTime > _startTime, \"endTime error\");\n        require(_idoRoundSupply > 0, \"idoRoundSupply error\");\n        require(_ratio > 0, \"ratio error\");\n\n        if(idoRoundList.length > 0){\n            IdoRound memory lastIdoRound = idoRoundList[idoRoundList.length - 1];\n            require(_startTime >= lastIdoRound.endTime, \"startTime error\");\n        }\n\n        IdoRound memory idoRound = IdoRound(_startTime, _endTime, _idoRoundSupply, _ratio, 0, 0);\n\n        idoRoundList.push(idoRound);\n\n    }\n\n    function burn(uint256 index) external onlyOwner {\n\n        IdoRound memory idoRound = idoRoundList[index];\n\n        require(idoRound.idoRoundSupply > 0, \"index error\");\n        require(idoRound.burnVolume == 0, \"already burned\");\n        require(idoRound.idoRoundSupply > idoRound.salesVolume, \"nothing to burn\");\n        require(block.timestamp > idoRound.endTime, \"idoRound ongoing\");\n\n        uint256 burnVolume = idoRound.idoRoundSupply.sub(idoRound.salesVolume);\n\n        IERC20(vrhTokenAddress).burn(burnVolume);\n\n        idoRoundList[index].burnVolume = burnVolume;\n\n    }\n\n\n\n    function purchase(uint256 amount, uint256 yearCount) external payable {\n\n        require(amount > 0, \"amount error\");\n        require(idoRoundList.length > 0, \"no idoRound\");\n        require(yearCount > 0 && yearCount <= 4, \"yearCount error\");\n\n        uint256 index = MAX_INT;\n        for(uint256 i=0;i<idoRoundList.length;i++){\n            if(block.timestamp >= idoRoundList[i].startTime && block.timestamp < idoRoundList[i].endTime){\n                index = i;\n                break;\n            }\n        }\n        require(index < MAX_INT, \"no active idoRound\");\n\n        IdoRound memory idoRound = idoRoundList[index];\n\n        uint256 totalVrhAmount ;\n\n        if(quoteTokenAddress == address(0)){\n            require(msg.value == amount, \"amount error\");\n\n            totalVrhAmount = amount.mul(idoRound.ratio).div(10**18);\n\n            payable(fundAddress).transfer(msg.value);\n        }else{\n            //require(msg.value == 0, \"return eth\");\n            USDT(quoteTokenAddress).transferFrom(msg.sender, fundAddress, amount);\n\n            totalVrhAmount = amount.mul(idoRound.ratio).div(10**quoteTokenDecimals);\n        }\n\n        require(idoRound.idoRoundSupply.sub(idoRound.salesVolume) >= totalVrhAmount, \"vrh insufficient\");\n\n        uint256 lockedVrhAmount = totalVrhAmount.mul(lockedVrhRatio).div(10000);\n        uint256 vrhAmount = totalVrhAmount.sub(lockedVrhAmount);\n\n\n        IERC20(vrhTokenAddress).transfer(msg.sender, vrhAmount);\n\n        uint256 end;\n\n        LockedBalance memory lockedBalance = VotingEscrow(votingEscrowAddress).locked(msg.sender);\n\n        if(lockedBalance.amount > 0){\n            end = lockedBalance.end;\n            VotingEscrow(votingEscrowAddress).deposit_for(msg.sender, lockedVrhAmount);\n        }else{\n            end = block.timestamp.add(yearCount.mul(YEAR)).div(WEEK).mul(WEEK);\n            VotingEscrow(votingEscrowAddress).create_lock_for(msg.sender, lockedVrhAmount, end);\n        }\n\n        idoRoundList[index].salesVolume += totalVrhAmount;\n\n        emit Purchase(msg.sender, index, amount, vrhAmount, lockedVrhAmount, end, idoRound.ratio);\n    }\n\n    function withdrawToken(address token, address to) external onlyOwner{\n        IERC20 iERC20 = IERC20(token);\n        uint256 balance = iERC20.balanceOf(address(this));\n        require(balance > 0, \"token insufficient\");\n        iERC20.transfer(to==address(0)?msg.sender:to, balance);\n    }\n\n    function withdraw(address to) external onlyOwner{\n        uint256 balance = address(this).balance;\n        payable(to==address(0)?msg.sender:to).transfer(balance);\n    }\n\n    function getIdoRound(uint256 index) public view returns (IdoRound memory){\n        IdoRound memory idoRound;\n        if(index < idoRoundList.length){\n            return idoRoundList[index];\n        }\n        return idoRound;\n    }\n}\n"
6     },
7     "Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "SafeMath.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "evmVersion": "istanbul",
19     "optimizer": {
20       "enabled": true,
21       "runs": 200
22     },
23     "libraries": {
24       "vrhido.sol": {}
25     },
26     "outputSelection": {
27       "*": {
28         "*": [
29           "evm.bytecode",
30           "evm.deployedBytecode",
31           "devdoc",
32           "userdoc",
33           "metadata",
34           "abi"
35         ]
36       }
37     }
38   }
39 }}