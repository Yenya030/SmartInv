1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CheersUpEmojiFormula.sol": {
5       "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/*\n ____                   _           _         \n|  _ \\                 | |         | |        \n| |_) | __ _ ___  ___  | |     __ _| |__  ___ \n|  _ < / _` / __|/ _ \\ | |    / _` | '_ \\/ __|\n| |_) | (_| \\__ \\  __/ | |___| (_| | |_) \\__ \\\n|____/ \\__,_|___/\\___| |______\\__,_|_.__/|___/\n                                              \n*/\n\npragma solidity ^0.8.7;\n\n/**\n * @title OnChainRandom\n * @author BaseLabs\n */\ncontract OnChainRandom {\n    uint256 private _seed;\n    /**\n     * @notice _unsafeRandom is used to generate a random number by on-chain randomness.\n     * Please note that on-chain random is potentially manipulated by miners,\n     * so VRF is recommended for most security-sensitive scenarios.\n     * @return randomly generated number.\n     */\n    function _unsafeRandom() internal returns (uint256) {\n    unchecked {\n        _seed++;\n        return uint256(keccak256(abi.encodePacked(\n                blockhash(block.number - 1),\n                block.difficulty,\n                block.timestamp,\n                block.coinbase,\n                _seed,\n                tx.origin\n            )));\n    }\n    }\n}\n\n/**\n * @title RandomPairs\n * @author BaseLabs\n */\ncontract RandomPairs is OnChainRandom {\n    struct Uint256Pair {\n        uint256 key;\n        uint256 value;\n    }\n\n    function _getPairsValueSum(Uint256Pair[] memory pairs_) internal pure returns (uint256) {\n        unchecked {\n            uint256 totalSize = 0;\n            for (uint256 i = 0; i < pairs_.length; i++) {\n                totalSize += pairs_[i].value;\n            }\n            return totalSize;\n        }\n    }\n\n    /**\n     * @notice _genRandKeyByPairsWithSize is used to randomly generate a key\n     * according to the probability configuration.\n     * @param pairs_ the probability configuration.\n     * @param totalSize_ the sum probabilities.\n     * @return the key.\n     */\n    function _genRandKeyByPairsWithSize(Uint256Pair[] memory pairs_, uint256 totalSize_) internal returns (uint256) {\n        unchecked {\n            if (pairs_.length == 1) {\n                return pairs_[0].key;\n            }\n            uint256 entropy = _unsafeRandom() % totalSize_;\n            uint256 step = 0;\n            for (uint256 i = 0; i < pairs_.length; i++) {\n                step += pairs_[i].value;\n                if (entropy < step) {\n                    return pairs_[i].key;\n                }\n            }\n            revert(\"unreachable code\");\n        }\n    }\n\n    /**\n     * @notice _genRandKeyByPairs is used to randomly generate a key\n     * according to the probability configuration.\n     * @param pairs_ the probability configuration.\n     * @return the key.\n     */\n    function _genRandKeyByPairs(Uint256Pair[] memory pairs_) internal returns (uint256) {\n        return _genRandKeyByPairsWithSize(pairs_, _getPairsValueSum(pairs_));\n    }\n}\n\n\n\n/**\n * @title IExtendableERC1155\n * @author BaseLabs\n */\nabstract contract IExtendableERC1155 is IERC1155 {\n    /**\n     * @dev Transfers `amount_` tokens of token type `id_` from `from_` to `to`.\n     * Emits a {TransferSingle} event.\n     * Requirements:\n     * - `to_` cannot be the zero address.\n     * - `from_` must have a balance of tokens of type `id_` of at least `amount`.\n     * - If `to_` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function rawSafeTransferFrom(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) external virtual;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     * Emits a {TransferBatch} event.\n     * Requirements:\n     * - If `to_` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function rawSafeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) external virtual;\n\n    /**\n     * @dev Creates `amount_` tokens of token type `id_`, and assigns them to `to_`.\n     * Emits a {TransferSingle} event.\n     * Requirements:\n     * - `to_` cannot be the zero address.\n     * - If `to_` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function rawMint(address to_, uint256 id_, uint256 amount_, bytes memory data_) external virtual;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     * Requirements:\n     * - `ids_` and `amounts_` must have the same length.\n     * - If `to_` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function rawMintBatch(address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) external virtual;\n\n    /**\n     * @dev Destroys `amount_` tokens of token type `id_` from `from_`\n     * Requirements:\n     * - `from_` cannot be the zero address.\n     * - `from_` must have at least `amount` tokens of token type `id`.\n     */\n    function rawBurn(address from_, uint256 id_, uint256 amount_) external virtual;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     * Requirements:\n     * - `ids_` and `amounts_` must have the same length.\n     */\n    function rawBurnBatch(address from_, uint256[] memory ids_, uint256[] memory amounts_) external virtual;\n\n    /**\n     * @dev Approve `operator_` to operate on all of `owner_` tokens\n     * Emits a {ApprovalForAll} event.\n     */\n    function rawSetApprovalForAll(address owner_, address operator_, bool approved_) external virtual;\n}\n\n\n/**\n * @title CheersUpEmojiFormula\n * @author BaseLabs\n */\ncontract CheersUpEmojiFormula is Ownable, RandomPairs, ReentrancyGuard {\n    event FormulaCreated(uint256 indexed formulaId);\n    event Rerolled(address indexed account, uint256 indexed formulaId, uint256 indexed tokenId);\n    struct Formula {\n        uint256 startTime;\n        uint256 endTime;\n        Uint256Pair[] input;\n        Uint256Pair[] output;\n    }\n\n    IExtendableERC1155 private _basic;\n    mapping(uint256 => Formula) private _formulas;\n\n    constructor(address basicAddress_) {\n        _basic = IExtendableERC1155(basicAddress_);\n    }\n\n    /**\n     * @notice use a formula to reroll,\n     * it will generate a new token id according to the input and output of the formula, with some randomness\n     * @param formulaId_ the id of the formula.\n     */\n    function reroll(uint256 formulaId_) external nonReentrant {\n        (Formula memory formula, bool valid) = getFormula(formulaId_);\n        require(valid, \"formula is not valid now\");\n        for (uint256 i = 0; i < formula.input.length; i++) {\n            _basic.rawBurn(msg.sender, formula.input[i].key, formula.input[i].value);\n        }\n        uint256 tokenId = _genRandKeyByPairs(formula.output);\n        _basic.rawMint(msg.sender, tokenId, 1, \"\");\n        emit Rerolled(msg.sender, formulaId_, tokenId);\n    }\n\n    /**\n     * @notice create a new formula.\n     * @param formulaId_ the id of the formula, when the id is already in used and the overwrite_ is true,\n       the original formula will be overwritten.\n     * @param formula_ the config of the formula.\n     * @param overwrite_ whether to overwrite the existing formula.\n     */\n    function setFormula(uint256 formulaId_, Formula calldata formula_, bool overwrite_) external onlyOwner {\n        if (!overwrite_) {\n            require(_formulas[formulaId_].input.length == 0, \"formula id already exists\");\n        }\n        require(formula_.output.length > 0, \"formula output is empty\");\n        require(formula_.input.length > 0, \"formula input is empty\");\n        _formulas[formulaId_] = formula_;\n        emit FormulaCreated(formulaId_);\n    }\n\n    /**\n     * @notice get formula by id.\n     * @param formulaId_ the id of the formula.\n     * @return formula_ the config of the formula.\n     * @return valid_ whether the formula is valid.\n     */\n    function getFormula(uint256 formulaId_) public view returns (Formula memory formula_, bool valid_) {\n        formula_ = _formulas[formulaId_];\n        valid_ = isFormulaValid(formula_);\n    }\n\n    /**\n     * @notice check if the formula is valid.\n     * @param formula_ the config of the formula.\n     * @return valid_ whether the formula is valid.\n     */\n    function isFormulaValid(Formula memory formula_) public view returns (bool) {\n        if (formula_.input.length == 0 || formula_.output.length == 0) {\n            return false;\n        }\n        if (formula_.endTime > 0 && block.timestamp > formula_.endTime) {\n            return false;\n        }\n        return formula_.startTime > 0 && block.timestamp > formula_.startTime;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
12     },
13     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}