1 // File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol
2 
3 
4 pragma solidity ^0.8.0;
5 
6 contract VRFRequestIDBase {
7 
8   /**
9    * @notice returns the seed which is actually input to the VRF coordinator
10    *
11    * @dev To prevent repetition of VRF output due to repetition of the
12    * @dev user-supplied seed, that seed is combined in a hash with the
13    * @dev user-specific nonce, and the address of the consuming contract. The
14    * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
15    * @dev the final seed, but the nonce does protect against repetition in
16    * @dev requests which are included in a single block.
17    *
18    * @param _userSeed VRF seed input provided by user
19    * @param _requester Address of the requesting contract
20    * @param _nonce User-specific nonce at the time of the request
21    */
22   function makeVRFInputSeed(
23     bytes32 _keyHash,
24     uint256 _userSeed,
25     address _requester,
26     uint256 _nonce
27   )
28     internal
29     pure
30     returns (
31       uint256
32     )
33   {
34     return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
35   }
36 
37   /**
38    * @notice Returns the id for this request
39    * @param _keyHash The serviceAgreement ID to be used for this request
40    * @param _vRFInputSeed The seed to be passed directly to the VRF
41    * @return The id for this request
42    *
43    * @dev Note that _vRFInputSeed is not the seed passed by the consuming
44    * @dev contract, but the one generated by makeVRFInputSeed
45    */
46   function makeRequestId(
47     bytes32 _keyHash,
48     uint256 _vRFInputSeed
49   )
50     internal
51     pure
52     returns (
53       bytes32
54     )
55   {
56     return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
57   }
58 }
59 // File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol
60 
61 
62 pragma solidity ^0.8.0;
63 
64 interface LinkTokenInterface {
65 
66   function allowance(
67     address owner,
68     address spender
69   )
70     external
71     view
72     returns (
73       uint256 remaining
74     );
75 
76   function approve(
77     address spender,
78     uint256 value
79   )
80     external
81     returns (
82       bool success
83     );
84 
85   function balanceOf(
86     address owner
87   )
88     external
89     view
90     returns (
91       uint256 balance
92     );
93 
94   function decimals()
95     external
96     view
97     returns (
98       uint8 decimalPlaces
99     );
100 
101   function decreaseApproval(
102     address spender,
103     uint256 addedValue
104   )
105     external
106     returns (
107       bool success
108     );
109 
110   function increaseApproval(
111     address spender,
112     uint256 subtractedValue
113   ) external;
114 
115   function name()
116     external
117     view
118     returns (
119       string memory tokenName
120     );
121 
122   function symbol()
123     external
124     view
125     returns (
126       string memory tokenSymbol
127     );
128 
129   function totalSupply()
130     external
131     view
132     returns (
133       uint256 totalTokensIssued
134     );
135 
136   function transfer(
137     address to,
138     uint256 value
139   )
140     external
141     returns (
142       bool success
143     );
144 
145   function transferAndCall(
146     address to,
147     uint256 value,
148     bytes calldata data
149   )
150     external
151     returns (
152       bool success
153     );
154 
155   function transferFrom(
156     address from,
157     address to,
158     uint256 value
159   )
160     external
161     returns (
162       bool success
163     );
164 
165 }
166 
167 // File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol
168 
169 
170 pragma solidity ^0.8.0;
171 
172 
173 
174 /** ****************************************************************************
175  * @notice Interface for contracts using VRF randomness
176  * *****************************************************************************
177  * @dev PURPOSE
178  *
179  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
180  * @dev to Vera the verifier in such a way that Vera can be sure he's not
181  * @dev making his output up to suit himself. Reggie provides Vera a public key
182  * @dev to which he knows the secret key. Each time Vera provides a seed to
183  * @dev Reggie, he gives back a value which is computed completely
184  * @dev deterministically from the seed and the secret key.
185  *
186  * @dev Reggie provides a proof by which Vera can verify that the output was
187  * @dev correctly computed once Reggie tells it to her, but without that proof,
188  * @dev the output is indistinguishable to her from a uniform random sample
189  * @dev from the output space.
190  *
191  * @dev The purpose of this contract is to make it easy for unrelated contracts
192  * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
193  * @dev simple access to a verifiable source of randomness.
194  * *****************************************************************************
195  * @dev USAGE
196  *
197  * @dev Calling contracts must inherit from VRFConsumerBase, and can
198  * @dev initialize VRFConsumerBase's attributes in their constructor as
199  * @dev shown:
200  *
201  * @dev   contract VRFConsumer {
202  * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
203  * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
204  * @dev         <initialization with other arguments goes here>
205  * @dev       }
206  * @dev   }
207  *
208  * @dev The oracle will have given you an ID for the VRF keypair they have
209  * @dev committed to (let's call it keyHash), and have told you the minimum LINK
210  * @dev price for VRF service. Make sure your contract has sufficient LINK, and
211  * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
212  * @dev want to generate randomness from.
213  *
214  * @dev Once the VRFCoordinator has received and validated the oracle's response
215  * @dev to your request, it will call your contract's fulfillRandomness method.
216  *
217  * @dev The randomness argument to fulfillRandomness is the actual random value
218  * @dev generated from your seed.
219  *
220  * @dev The requestId argument is generated from the keyHash and the seed by
221  * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
222  * @dev requests open, you can use the requestId to track which seed is
223  * @dev associated with which randomness. See VRFRequestIDBase.sol for more
224  * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
225  * @dev if your contract could have multiple requests in flight simultaneously.)
226  *
227  * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
228  * @dev differ. (Which is critical to making unpredictable randomness! See the
229  * @dev next section.)
230  *
231  * *****************************************************************************
232  * @dev SECURITY CONSIDERATIONS
233  *
234  * @dev A method with the ability to call your fulfillRandomness method directly
235  * @dev could spoof a VRF response with any random value, so it's critical that
236  * @dev it cannot be directly called by anything other than this base contract
237  * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
238  *
239  * @dev For your users to trust that your contract's random behavior is free
240  * @dev from malicious interference, it's best if you can write it so that all
241  * @dev behaviors implied by a VRF response are executed *during* your
242  * @dev fulfillRandomness method. If your contract must store the response (or
243  * @dev anything derived from it) and use it later, you must ensure that any
244  * @dev user-significant behavior which depends on that stored value cannot be
245  * @dev manipulated by a subsequent VRF request.
246  *
247  * @dev Similarly, both miners and the VRF oracle itself have some influence
248  * @dev over the order in which VRF responses appear on the blockchain, so if
249  * @dev your contract could have multiple VRF requests in flight simultaneously,
250  * @dev you must ensure that the order in which the VRF responses arrive cannot
251  * @dev be used to manipulate your contract's user-significant behavior.
252  *
253  * @dev Since the ultimate input to the VRF is mixed with the block hash of the
254  * @dev block in which the request is made, user-provided seeds have no impact
255  * @dev on its economic security properties. They are only included for API
256  * @dev compatability with previous versions of this contract.
257  *
258  * @dev Since the block hash of the block which contains the requestRandomness
259  * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
260  * @dev miner could, in principle, fork the blockchain to evict the block
261  * @dev containing the request, forcing the request to be included in a
262  * @dev different block with a different hash, and therefore a different input
263  * @dev to the VRF. However, such an attack would incur a substantial economic
264  * @dev cost. This cost scales with the number of blocks the VRF oracle waits
265  * @dev until it calls responds to a request.
266  */
267 abstract contract VRFConsumerBase is VRFRequestIDBase {
268 
269   /**
270    * @notice fulfillRandomness handles the VRF response. Your contract must
271    * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
272    * @notice principles to keep in mind when implementing your fulfillRandomness
273    * @notice method.
274    *
275    * @dev VRFConsumerBase expects its subcontracts to have a method with this
276    * @dev signature, and will call it once it has verified the proof
277    * @dev associated with the randomness. (It is triggered via a call to
278    * @dev rawFulfillRandomness, below.)
279    *
280    * @param requestId The Id initially returned by requestRandomness
281    * @param randomness the VRF output
282    */
283   function fulfillRandomness(
284     bytes32 requestId,
285     uint256 randomness
286   )
287     internal
288     virtual;
289 
290   /**
291    * @dev In order to keep backwards compatibility we have kept the user
292    * seed field around. We remove the use of it because given that the blockhash
293    * enters later, it overrides whatever randomness the used seed provides.
294    * Given that it adds no security, and can easily lead to misunderstandings,
295    * we have removed it from usage and can now provide a simpler API.
296    */
297   uint256 constant private USER_SEED_PLACEHOLDER = 0;
298 
299   /**
300    * @notice requestRandomness initiates a request for VRF output given _seed
301    *
302    * @dev The fulfillRandomness method receives the output, once it's provided
303    * @dev by the Oracle, and verified by the vrfCoordinator.
304    *
305    * @dev The _keyHash must already be registered with the VRFCoordinator, and
306    * @dev the _fee must exceed the fee specified during registration of the
307    * @dev _keyHash.
308    *
309    * @dev The _seed parameter is vestigial, and is kept only for API
310    * @dev compatibility with older versions. It can't *hurt* to mix in some of
311    * @dev your own randomness, here, but it's not necessary because the VRF
312    * @dev oracle will mix the hash of the block containing your request into the
313    * @dev VRF seed it ultimately uses.
314    *
315    * @param _keyHash ID of public key against which randomness is generated
316    * @param _fee The amount of LINK to send with the request
317    *
318    * @return requestId unique ID for this request
319    *
320    * @dev The returned requestId can be used to distinguish responses to
321    * @dev concurrent requests. It is passed as the first argument to
322    * @dev fulfillRandomness.
323    */
324   function requestRandomness(
325     bytes32 _keyHash,
326     uint256 _fee
327   )
328     internal
329     returns (
330       bytes32 requestId
331     )
332   {
333     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
334     // This is the seed passed to VRFCoordinator. The oracle will mix this with
335     // the hash of the block containing this request to obtain the seed/input
336     // which is finally passed to the VRF cryptographic machinery.
337     uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
338     // nonces[_keyHash] must stay in sync with
339     // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
340     // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
341     // This provides protection against the user repeating their input seed,
342     // which would result in a predictable/duplicate output, if multiple such
343     // requests appeared in the same block.
344     nonces[_keyHash] = nonces[_keyHash] + 1;
345     return makeRequestId(_keyHash, vRFSeed);
346   }
347 
348   LinkTokenInterface immutable internal LINK;
349   address immutable private vrfCoordinator;
350 
351   // Nonces for each VRF key from which randomness has been requested.
352   //
353   // Must stay in sync with VRFCoordinator[_keyHash][this]
354   mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;
355 
356   /**
357    * @param _vrfCoordinator address of VRFCoordinator contract
358    * @param _link address of LINK token contract
359    *
360    * @dev https://docs.chain.link/docs/link-token-contracts
361    */
362   constructor(
363     address _vrfCoordinator,
364     address _link
365   ) {
366     vrfCoordinator = _vrfCoordinator;
367     LINK = LinkTokenInterface(_link);
368   }
369 
370   // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
371   // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
372   // the origin of the call
373   function rawFulfillRandomness(
374     bytes32 requestId,
375     uint256 randomness
376   )
377     external
378   {
379     require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
380     fulfillRandomness(requestId, randomness);
381   }
382 }
383 
384 // File: @openzeppelin/contracts/utils/math/SafeMath.sol
385 
386 
387 
388 pragma solidity ^0.8.0;
389 
390 // CAUTION
391 // This version of SafeMath should only be used with Solidity 0.8 or later,
392 // because it relies on the compiler's built in overflow checks.
393 
394 /**
395  * @dev Wrappers over Solidity's arithmetic operations.
396  *
397  * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
398  * now has built in overflow checking.
399  */
400 library SafeMath {
401     /**
402      * @dev Returns the addition of two unsigned integers, with an overflow flag.
403      *
404      * _Available since v3.4._
405      */
406     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
407         unchecked {
408             uint256 c = a + b;
409             if (c < a) return (false, 0);
410             return (true, c);
411         }
412     }
413 
414     /**
415      * @dev Returns the substraction of two unsigned integers, with an overflow flag.
416      *
417      * _Available since v3.4._
418      */
419     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
420         unchecked {
421             if (b > a) return (false, 0);
422             return (true, a - b);
423         }
424     }
425 
426     /**
427      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
428      *
429      * _Available since v3.4._
430      */
431     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
432         unchecked {
433             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
434             // benefit is lost if 'b' is also tested.
435             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
436             if (a == 0) return (true, 0);
437             uint256 c = a * b;
438             if (c / a != b) return (false, 0);
439             return (true, c);
440         }
441     }
442 
443     /**
444      * @dev Returns the division of two unsigned integers, with a division by zero flag.
445      *
446      * _Available since v3.4._
447      */
448     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
449         unchecked {
450             if (b == 0) return (false, 0);
451             return (true, a / b);
452         }
453     }
454 
455     /**
456      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
457      *
458      * _Available since v3.4._
459      */
460     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
461         unchecked {
462             if (b == 0) return (false, 0);
463             return (true, a % b);
464         }
465     }
466 
467     /**
468      * @dev Returns the addition of two unsigned integers, reverting on
469      * overflow.
470      *
471      * Counterpart to Solidity's `+` operator.
472      *
473      * Requirements:
474      *
475      * - Addition cannot overflow.
476      */
477     function add(uint256 a, uint256 b) internal pure returns (uint256) {
478         return a + b;
479     }
480 
481     /**
482      * @dev Returns the subtraction of two unsigned integers, reverting on
483      * overflow (when the result is negative).
484      *
485      * Counterpart to Solidity's `-` operator.
486      *
487      * Requirements:
488      *
489      * - Subtraction cannot overflow.
490      */
491     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
492         return a - b;
493     }
494 
495     /**
496      * @dev Returns the multiplication of two unsigned integers, reverting on
497      * overflow.
498      *
499      * Counterpart to Solidity's `*` operator.
500      *
501      * Requirements:
502      *
503      * - Multiplication cannot overflow.
504      */
505     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
506         return a * b;
507     }
508 
509     /**
510      * @dev Returns the integer division of two unsigned integers, reverting on
511      * division by zero. The result is rounded towards zero.
512      *
513      * Counterpart to Solidity's `/` operator.
514      *
515      * Requirements:
516      *
517      * - The divisor cannot be zero.
518      */
519     function div(uint256 a, uint256 b) internal pure returns (uint256) {
520         return a / b;
521     }
522 
523     /**
524      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
525      * reverting when dividing by zero.
526      *
527      * Counterpart to Solidity's `%` operator. This function uses a `revert`
528      * opcode (which leaves remaining gas untouched) while Solidity uses an
529      * invalid opcode to revert (consuming all remaining gas).
530      *
531      * Requirements:
532      *
533      * - The divisor cannot be zero.
534      */
535     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
536         return a % b;
537     }
538 
539     /**
540      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
541      * overflow (when the result is negative).
542      *
543      * CAUTION: This function is deprecated because it requires allocating memory for the error
544      * message unnecessarily. For custom revert reasons use {trySub}.
545      *
546      * Counterpart to Solidity's `-` operator.
547      *
548      * Requirements:
549      *
550      * - Subtraction cannot overflow.
551      */
552     function sub(
553         uint256 a,
554         uint256 b,
555         string memory errorMessage
556     ) internal pure returns (uint256) {
557         unchecked {
558             require(b <= a, errorMessage);
559             return a - b;
560         }
561     }
562 
563     /**
564      * @dev Returns the integer division of two unsigned integers, reverting with custom message on
565      * division by zero. The result is rounded towards zero.
566      *
567      * Counterpart to Solidity's `/` operator. Note: this function uses a
568      * `revert` opcode (which leaves remaining gas untouched) while Solidity
569      * uses an invalid opcode to revert (consuming all remaining gas).
570      *
571      * Requirements:
572      *
573      * - The divisor cannot be zero.
574      */
575     function div(
576         uint256 a,
577         uint256 b,
578         string memory errorMessage
579     ) internal pure returns (uint256) {
580         unchecked {
581             require(b > 0, errorMessage);
582             return a / b;
583         }
584     }
585 
586     /**
587      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
588      * reverting with custom message when dividing by zero.
589      *
590      * CAUTION: This function is deprecated because it requires allocating memory for the error
591      * message unnecessarily. For custom revert reasons use {tryMod}.
592      *
593      * Counterpart to Solidity's `%` operator. This function uses a `revert`
594      * opcode (which leaves remaining gas untouched) while Solidity uses an
595      * invalid opcode to revert (consuming all remaining gas).
596      *
597      * Requirements:
598      *
599      * - The divisor cannot be zero.
600      */
601     function mod(
602         uint256 a,
603         uint256 b,
604         string memory errorMessage
605     ) internal pure returns (uint256) {
606         unchecked {
607             require(b > 0, errorMessage);
608             return a % b;
609         }
610     }
611 }
612 
613 // File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol
614 
615 
616 
617 pragma solidity ^0.8.0;
618 
619 /**
620  * @dev These functions deal with verification of Merkle Trees proofs.
621  *
622  * The proofs can be generated using the JavaScript library
623  * https://github.com/miguelmota/merkletreejs[merkletreejs].
624  * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
625  *
626  * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
627  */
628 library MerkleProof {
629     /**
630      * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
631      * defined by `root`. For this, a `proof` must be provided, containing
632      * sibling hashes on the branch from the leaf to the root of the tree. Each
633      * pair of leaves and each pair of pre-images are assumed to be sorted.
634      */
635     function verify(
636         bytes32[] memory proof,
637         bytes32 root,
638         bytes32 leaf
639     ) internal pure returns (bool) {
640         bytes32 computedHash = leaf;
641 
642         for (uint256 i = 0; i < proof.length; i++) {
643             bytes32 proofElement = proof[i];
644 
645             if (computedHash <= proofElement) {
646                 // Hash(current computed hash + current element of the proof)
647                 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
648             } else {
649                 // Hash(current element of the proof + current computed hash)
650                 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
651             }
652         }
653 
654         // Check if the computed hash (root) is equal to the provided root
655         return computedHash == root;
656     }
657 }
658 
659 // File: @openzeppelin/contracts/utils/Counters.sol
660 
661 
662 
663 pragma solidity ^0.8.0;
664 
665 /**
666  * @title Counters
667  * @author Matt Condon (@shrugs)
668  * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
669  * of elements in a mapping, issuing ERC721 ids, or counting request ids.
670  *
671  * Include with `using Counters for Counters.Counter;`
672  */
673 library Counters {
674     struct Counter {
675         // This variable should never be directly accessed by users of the library: interactions must be restricted to
676         // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
677         // this feature: see https://github.com/ethereum/solidity/issues/4637
678         uint256 _value; // default: 0
679     }
680 
681     function current(Counter storage counter) internal view returns (uint256) {
682         return counter._value;
683     }
684 
685     function increment(Counter storage counter) internal {
686         unchecked {
687             counter._value += 1;
688         }
689     }
690 
691     function decrement(Counter storage counter) internal {
692         uint256 value = counter._value;
693         require(value > 0, "Counter: decrement overflow");
694         unchecked {
695             counter._value = value - 1;
696         }
697     }
698 
699     function reset(Counter storage counter) internal {
700         counter._value = 0;
701     }
702 }
703 
704 // File: @openzeppelin/contracts/utils/Strings.sol
705 
706 
707 
708 pragma solidity ^0.8.0;
709 
710 /**
711  * @dev String operations.
712  */
713 library Strings {
714     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
715 
716     /**
717      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
718      */
719     function toString(uint256 value) internal pure returns (string memory) {
720         // Inspired by OraclizeAPI's implementation - MIT licence
721         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
722 
723         if (value == 0) {
724             return "0";
725         }
726         uint256 temp = value;
727         uint256 digits;
728         while (temp != 0) {
729             digits++;
730             temp /= 10;
731         }
732         bytes memory buffer = new bytes(digits);
733         while (value != 0) {
734             digits -= 1;
735             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
736             value /= 10;
737         }
738         return string(buffer);
739     }
740 
741     /**
742      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
743      */
744     function toHexString(uint256 value) internal pure returns (string memory) {
745         if (value == 0) {
746             return "0x00";
747         }
748         uint256 temp = value;
749         uint256 length = 0;
750         while (temp != 0) {
751             length++;
752             temp >>= 8;
753         }
754         return toHexString(value, length);
755     }
756 
757     /**
758      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
759      */
760     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
761         bytes memory buffer = new bytes(2 * length + 2);
762         buffer[0] = "0";
763         buffer[1] = "x";
764         for (uint256 i = 2 * length + 1; i > 1; --i) {
765             buffer[i] = _HEX_SYMBOLS[value & 0xf];
766             value >>= 4;
767         }
768         require(value == 0, "Strings: hex length insufficient");
769         return string(buffer);
770     }
771 }
772 
773 // File: @openzeppelin/contracts/utils/Context.sol
774 
775 
776 
777 pragma solidity ^0.8.0;
778 
779 /**
780  * @dev Provides information about the current execution context, including the
781  * sender of the transaction and its data. While these are generally available
782  * via msg.sender and msg.data, they should not be accessed in such a direct
783  * manner, since when dealing with meta-transactions the account sending and
784  * paying for execution may not be the actual sender (as far as an application
785  * is concerned).
786  *
787  * This contract is only required for intermediate, library-like contracts.
788  */
789 abstract contract Context {
790     function _msgSender() internal view virtual returns (address) {
791         return msg.sender;
792     }
793 
794     function _msgData() internal view virtual returns (bytes calldata) {
795         return msg.data;
796     }
797 }
798 
799 // File: @openzeppelin/contracts/security/Pausable.sol
800 
801 
802 
803 pragma solidity ^0.8.0;
804 
805 
806 /**
807  * @dev Contract module which allows children to implement an emergency stop
808  * mechanism that can be triggered by an authorized account.
809  *
810  * This module is used through inheritance. It will make available the
811  * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
812  * the functions of your contract. Note that they will not be pausable by
813  * simply including this module, only once the modifiers are put in place.
814  */
815 abstract contract Pausable is Context {
816     /**
817      * @dev Emitted when the pause is triggered by `account`.
818      */
819     event Paused(address account);
820 
821     /**
822      * @dev Emitted when the pause is lifted by `account`.
823      */
824     event Unpaused(address account);
825 
826     bool private _paused;
827 
828     /**
829      * @dev Initializes the contract in unpaused state.
830      */
831     constructor() {
832         _paused = false;
833     }
834 
835     /**
836      * @dev Returns true if the contract is paused, and false otherwise.
837      */
838     function paused() public view virtual returns (bool) {
839         return _paused;
840     }
841 
842     /**
843      * @dev Modifier to make a function callable only when the contract is not paused.
844      *
845      * Requirements:
846      *
847      * - The contract must not be paused.
848      */
849     modifier whenNotPaused() {
850         require(!paused(), "Pausable: paused");
851         _;
852     }
853 
854     /**
855      * @dev Modifier to make a function callable only when the contract is paused.
856      *
857      * Requirements:
858      *
859      * - The contract must be paused.
860      */
861     modifier whenPaused() {
862         require(paused(), "Pausable: not paused");
863         _;
864     }
865 
866     /**
867      * @dev Triggers stopped state.
868      *
869      * Requirements:
870      *
871      * - The contract must not be paused.
872      */
873     function _pause() internal virtual whenNotPaused {
874         _paused = true;
875         emit Paused(_msgSender());
876     }
877 
878     /**
879      * @dev Returns to normal state.
880      *
881      * Requirements:
882      *
883      * - The contract must be paused.
884      */
885     function _unpause() internal virtual whenPaused {
886         _paused = false;
887         emit Unpaused(_msgSender());
888     }
889 }
890 
891 // File: @openzeppelin/contracts/access/Ownable.sol
892 
893 
894 
895 pragma solidity ^0.8.0;
896 
897 
898 /**
899  * @dev Contract module which provides a basic access control mechanism, where
900  * there is an account (an owner) that can be granted exclusive access to
901  * specific functions.
902  *
903  * By default, the owner account will be the one that deploys the contract. This
904  * can later be changed with {transferOwnership}.
905  *
906  * This module is used through inheritance. It will make available the modifier
907  * `onlyOwner`, which can be applied to your functions to restrict their use to
908  * the owner.
909  */
910 abstract contract Ownable is Context {
911     address private _owner;
912 
913     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
914 
915     /**
916      * @dev Initializes the contract setting the deployer as the initial owner.
917      */
918     constructor() {
919         _setOwner(_msgSender());
920     }
921 
922     /**
923      * @dev Returns the address of the current owner.
924      */
925     function owner() public view virtual returns (address) {
926         return _owner;
927     }
928 
929     /**
930      * @dev Throws if called by any account other than the owner.
931      */
932     modifier onlyOwner() {
933         require(owner() == _msgSender(), "Ownable: caller is not the owner");
934         _;
935     }
936 
937     /**
938      * @dev Leaves the contract without owner. It will not be possible to call
939      * `onlyOwner` functions anymore. Can only be called by the current owner.
940      *
941      * NOTE: Renouncing ownership will leave the contract without an owner,
942      * thereby removing any functionality that is only available to the owner.
943      */
944     function renounceOwnership() public virtual onlyOwner {
945         _setOwner(address(0));
946     }
947 
948     /**
949      * @dev Transfers ownership of the contract to a new account (`newOwner`).
950      * Can only be called by the current owner.
951      */
952     function transferOwnership(address newOwner) public virtual onlyOwner {
953         require(newOwner != address(0), "Ownable: new owner is the zero address");
954         _setOwner(newOwner);
955     }
956 
957     function _setOwner(address newOwner) private {
958         address oldOwner = _owner;
959         _owner = newOwner;
960         emit OwnershipTransferred(oldOwner, newOwner);
961     }
962 }
963 
964 // File: @openzeppelin/contracts/utils/Address.sol
965 
966 
967 
968 pragma solidity ^0.8.0;
969 
970 /**
971  * @dev Collection of functions related to the address type
972  */
973 library Address {
974     /**
975      * @dev Returns true if `account` is a contract.
976      *
977      * [IMPORTANT]
978      * ====
979      * It is unsafe to assume that an address for which this function returns
980      * false is an externally-owned account (EOA) and not a contract.
981      *
982      * Among others, `isContract` will return false for the following
983      * types of addresses:
984      *
985      *  - an externally-owned account
986      *  - a contract in construction
987      *  - an address where a contract will be created
988      *  - an address where a contract lived, but was destroyed
989      * ====
990      */
991     function isContract(address account) internal view returns (bool) {
992         // This method relies on extcodesize, which returns 0 for contracts in
993         // construction, since the code is only stored at the end of the
994         // constructor execution.
995 
996         uint256 size;
997         assembly {
998             size := extcodesize(account)
999         }
1000         return size > 0;
1001     }
1002 
1003     /**
1004      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
1005      * `recipient`, forwarding all available gas and reverting on errors.
1006      *
1007      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
1008      * of certain opcodes, possibly making contracts go over the 2300 gas limit
1009      * imposed by `transfer`, making them unable to receive funds via
1010      * `transfer`. {sendValue} removes this limitation.
1011      *
1012      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
1013      *
1014      * IMPORTANT: because control is transferred to `recipient`, care must be
1015      * taken to not create reentrancy vulnerabilities. Consider using
1016      * {ReentrancyGuard} or the
1017      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
1018      */
1019     function sendValue(address payable recipient, uint256 amount) internal {
1020         require(address(this).balance >= amount, "Address: insufficient balance");
1021 
1022         (bool success, ) = recipient.call{value: amount}("");
1023         require(success, "Address: unable to send value, recipient may have reverted");
1024     }
1025 
1026     /**
1027      * @dev Performs a Solidity function call using a low level `call`. A
1028      * plain `call` is an unsafe replacement for a function call: use this
1029      * function instead.
1030      *
1031      * If `target` reverts with a revert reason, it is bubbled up by this
1032      * function (like regular Solidity function calls).
1033      *
1034      * Returns the raw returned data. To convert to the expected return value,
1035      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
1036      *
1037      * Requirements:
1038      *
1039      * - `target` must be a contract.
1040      * - calling `target` with `data` must not revert.
1041      *
1042      * _Available since v3.1._
1043      */
1044     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
1045         return functionCall(target, data, "Address: low-level call failed");
1046     }
1047 
1048     /**
1049      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
1050      * `errorMessage` as a fallback revert reason when `target` reverts.
1051      *
1052      * _Available since v3.1._
1053      */
1054     function functionCall(
1055         address target,
1056         bytes memory data,
1057         string memory errorMessage
1058     ) internal returns (bytes memory) {
1059         return functionCallWithValue(target, data, 0, errorMessage);
1060     }
1061 
1062     /**
1063      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
1064      * but also transferring `value` wei to `target`.
1065      *
1066      * Requirements:
1067      *
1068      * - the calling contract must have an ETH balance of at least `value`.
1069      * - the called Solidity function must be `payable`.
1070      *
1071      * _Available since v3.1._
1072      */
1073     function functionCallWithValue(
1074         address target,
1075         bytes memory data,
1076         uint256 value
1077     ) internal returns (bytes memory) {
1078         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
1079     }
1080 
1081     /**
1082      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
1083      * with `errorMessage` as a fallback revert reason when `target` reverts.
1084      *
1085      * _Available since v3.1._
1086      */
1087     function functionCallWithValue(
1088         address target,
1089         bytes memory data,
1090         uint256 value,
1091         string memory errorMessage
1092     ) internal returns (bytes memory) {
1093         require(address(this).balance >= value, "Address: insufficient balance for call");
1094         require(isContract(target), "Address: call to non-contract");
1095 
1096         (bool success, bytes memory returndata) = target.call{value: value}(data);
1097         return verifyCallResult(success, returndata, errorMessage);
1098     }
1099 
1100     /**
1101      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
1102      * but performing a static call.
1103      *
1104      * _Available since v3.3._
1105      */
1106     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
1107         return functionStaticCall(target, data, "Address: low-level static call failed");
1108     }
1109 
1110     /**
1111      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
1112      * but performing a static call.
1113      *
1114      * _Available since v3.3._
1115      */
1116     function functionStaticCall(
1117         address target,
1118         bytes memory data,
1119         string memory errorMessage
1120     ) internal view returns (bytes memory) {
1121         require(isContract(target), "Address: static call to non-contract");
1122 
1123         (bool success, bytes memory returndata) = target.staticcall(data);
1124         return verifyCallResult(success, returndata, errorMessage);
1125     }
1126 
1127     /**
1128      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
1129      * but performing a delegate call.
1130      *
1131      * _Available since v3.4._
1132      */
1133     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
1134         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
1135     }
1136 
1137     /**
1138      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
1139      * but performing a delegate call.
1140      *
1141      * _Available since v3.4._
1142      */
1143     function functionDelegateCall(
1144         address target,
1145         bytes memory data,
1146         string memory errorMessage
1147     ) internal returns (bytes memory) {
1148         require(isContract(target), "Address: delegate call to non-contract");
1149 
1150         (bool success, bytes memory returndata) = target.delegatecall(data);
1151         return verifyCallResult(success, returndata, errorMessage);
1152     }
1153 
1154     /**
1155      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
1156      * revert reason using the provided one.
1157      *
1158      * _Available since v4.3._
1159      */
1160     function verifyCallResult(
1161         bool success,
1162         bytes memory returndata,
1163         string memory errorMessage
1164     ) internal pure returns (bytes memory) {
1165         if (success) {
1166             return returndata;
1167         } else {
1168             // Look for revert reason and bubble it up if present
1169             if (returndata.length > 0) {
1170                 // The easiest way to bubble the revert reason is using memory via assembly
1171 
1172                 assembly {
1173                     let returndata_size := mload(returndata)
1174                     revert(add(32, returndata), returndata_size)
1175                 }
1176             } else {
1177                 revert(errorMessage);
1178             }
1179         }
1180     }
1181 }
1182 
1183 // File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
1184 
1185 
1186 
1187 pragma solidity ^0.8.0;
1188 
1189 /**
1190  * @title ERC721 token receiver interface
1191  * @dev Interface for any contract that wants to support safeTransfers
1192  * from ERC721 asset contracts.
1193  */
1194 interface IERC721Receiver {
1195     /**
1196      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
1197      * by `operator` from `from`, this function is called.
1198      *
1199      * It must return its Solidity selector to confirm the token transfer.
1200      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
1201      *
1202      * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
1203      */
1204     function onERC721Received(
1205         address operator,
1206         address from,
1207         uint256 tokenId,
1208         bytes calldata data
1209     ) external returns (bytes4);
1210 }
1211 
1212 // File: @openzeppelin/contracts/utils/introspection/IERC165.sol
1213 
1214 
1215 
1216 pragma solidity ^0.8.0;
1217 
1218 /**
1219  * @dev Interface of the ERC165 standard, as defined in the
1220  * https://eips.ethereum.org/EIPS/eip-165[EIP].
1221  *
1222  * Implementers can declare support of contract interfaces, which can then be
1223  * queried by others ({ERC165Checker}).
1224  *
1225  * For an implementation, see {ERC165}.
1226  */
1227 interface IERC165 {
1228     /**
1229      * @dev Returns true if this contract implements the interface defined by
1230      * `interfaceId`. See the corresponding
1231      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
1232      * to learn more about how these ids are created.
1233      *
1234      * This function call must use less than 30 000 gas.
1235      */
1236     function supportsInterface(bytes4 interfaceId) external view returns (bool);
1237 }
1238 
1239 // File: @openzeppelin/contracts/utils/introspection/ERC165.sol
1240 
1241 
1242 
1243 pragma solidity ^0.8.0;
1244 
1245 
1246 /**
1247  * @dev Implementation of the {IERC165} interface.
1248  *
1249  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
1250  * for the additional interface id that will be supported. For example:
1251  *
1252  * ```solidity
1253  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
1254  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
1255  * }
1256  * ```
1257  *
1258  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
1259  */
1260 abstract contract ERC165 is IERC165 {
1261     /**
1262      * @dev See {IERC165-supportsInterface}.
1263      */
1264     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
1265         return interfaceId == type(IERC165).interfaceId;
1266     }
1267 }
1268 
1269 // File: @openzeppelin/contracts/token/ERC721/IERC721.sol
1270 
1271 
1272 
1273 pragma solidity ^0.8.0;
1274 
1275 
1276 /**
1277  * @dev Required interface of an ERC721 compliant contract.
1278  */
1279 interface IERC721 is IERC165 {
1280     /**
1281      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
1282      */
1283     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
1284 
1285     /**
1286      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
1287      */
1288     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
1289 
1290     /**
1291      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
1292      */
1293     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
1294 
1295     /**
1296      * @dev Returns the number of tokens in ``owner``'s account.
1297      */
1298     function balanceOf(address owner) external view returns (uint256 balance);
1299 
1300     /**
1301      * @dev Returns the owner of the `tokenId` token.
1302      *
1303      * Requirements:
1304      *
1305      * - `tokenId` must exist.
1306      */
1307     function ownerOf(uint256 tokenId) external view returns (address owner);
1308 
1309     /**
1310      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
1311      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
1312      *
1313      * Requirements:
1314      *
1315      * - `from` cannot be the zero address.
1316      * - `to` cannot be the zero address.
1317      * - `tokenId` token must exist and be owned by `from`.
1318      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
1319      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1320      *
1321      * Emits a {Transfer} event.
1322      */
1323     function safeTransferFrom(
1324         address from,
1325         address to,
1326         uint256 tokenId
1327     ) external;
1328 
1329     /**
1330      * @dev Transfers `tokenId` token from `from` to `to`.
1331      *
1332      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
1333      *
1334      * Requirements:
1335      *
1336      * - `from` cannot be the zero address.
1337      * - `to` cannot be the zero address.
1338      * - `tokenId` token must be owned by `from`.
1339      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
1340      *
1341      * Emits a {Transfer} event.
1342      */
1343     function transferFrom(
1344         address from,
1345         address to,
1346         uint256 tokenId
1347     ) external;
1348 
1349     /**
1350      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
1351      * The approval is cleared when the token is transferred.
1352      *
1353      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
1354      *
1355      * Requirements:
1356      *
1357      * - The caller must own the token or be an approved operator.
1358      * - `tokenId` must exist.
1359      *
1360      * Emits an {Approval} event.
1361      */
1362     function approve(address to, uint256 tokenId) external;
1363 
1364     /**
1365      * @dev Returns the account approved for `tokenId` token.
1366      *
1367      * Requirements:
1368      *
1369      * - `tokenId` must exist.
1370      */
1371     function getApproved(uint256 tokenId) external view returns (address operator);
1372 
1373     /**
1374      * @dev Approve or remove `operator` as an operator for the caller.
1375      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
1376      *
1377      * Requirements:
1378      *
1379      * - The `operator` cannot be the caller.
1380      *
1381      * Emits an {ApprovalForAll} event.
1382      */
1383     function setApprovalForAll(address operator, bool _approved) external;
1384 
1385     /**
1386      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
1387      *
1388      * See {setApprovalForAll}
1389      */
1390     function isApprovedForAll(address owner, address operator) external view returns (bool);
1391 
1392     /**
1393      * @dev Safely transfers `tokenId` token from `from` to `to`.
1394      *
1395      * Requirements:
1396      *
1397      * - `from` cannot be the zero address.
1398      * - `to` cannot be the zero address.
1399      * - `tokenId` token must exist and be owned by `from`.
1400      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
1401      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1402      *
1403      * Emits a {Transfer} event.
1404      */
1405     function safeTransferFrom(
1406         address from,
1407         address to,
1408         uint256 tokenId,
1409         bytes calldata data
1410     ) external;
1411 }
1412 
1413 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
1414 
1415 
1416 
1417 pragma solidity ^0.8.0;
1418 
1419 
1420 /**
1421  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
1422  * @dev See https://eips.ethereum.org/EIPS/eip-721
1423  */
1424 interface IERC721Enumerable is IERC721 {
1425     /**
1426      * @dev Returns the total amount of tokens stored by the contract.
1427      */
1428     function totalSupply() external view returns (uint256);
1429 
1430     /**
1431      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
1432      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
1433      */
1434     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
1435 
1436     /**
1437      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
1438      * Use along with {totalSupply} to enumerate all tokens.
1439      */
1440     function tokenByIndex(uint256 index) external view returns (uint256);
1441 }
1442 
1443 // File: IWavelength.sol
1444 
1445 
1446 pragma solidity ^0.8.4;
1447 
1448 
1449 
1450 interface IWavelength is IERC721Enumerable {
1451     function mint(uint8 windowIndex, uint8 amount, bytes32[] calldata merkleProof) payable external;
1452     function unpause() external;
1453     function pause() external;
1454     function setBaseURI(string memory _baseTokenURI) external;
1455     function editRedemptionWindow(uint8 _windowID, bytes32 _merkleRoot, bool _open, uint8 _maxPerWallet,uint256 _pricePerToken) external;
1456 }
1457 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
1458 
1459 
1460 
1461 pragma solidity ^0.8.0;
1462 
1463 
1464 /**
1465  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
1466  * @dev See https://eips.ethereum.org/EIPS/eip-721
1467  */
1468 interface IERC721Metadata is IERC721 {
1469     /**
1470      * @dev Returns the token collection name.
1471      */
1472     function name() external view returns (string memory);
1473 
1474     /**
1475      * @dev Returns the token collection symbol.
1476      */
1477     function symbol() external view returns (string memory);
1478 
1479     /**
1480      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
1481      */
1482     function tokenURI(uint256 tokenId) external view returns (string memory);
1483 }
1484 
1485 // File: @openzeppelin/contracts/token/ERC721/ERC721.sol
1486 
1487 
1488 
1489 pragma solidity ^0.8.0;
1490 
1491 
1492 
1493 
1494 
1495 
1496 
1497 
1498 /**
1499  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
1500  * the Metadata extension, but not including the Enumerable extension, which is available separately as
1501  * {ERC721Enumerable}.
1502  */
1503 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
1504     using Address for address;
1505     using Strings for uint256;
1506 
1507     // Token name
1508     string private _name;
1509 
1510     // Token symbol
1511     string private _symbol;
1512 
1513     // Mapping from token ID to owner address
1514     mapping(uint256 => address) private _owners;
1515 
1516     // Mapping owner address to token count
1517     mapping(address => uint256) private _balances;
1518 
1519     // Mapping from token ID to approved address
1520     mapping(uint256 => address) private _tokenApprovals;
1521 
1522     // Mapping from owner to operator approvals
1523     mapping(address => mapping(address => bool)) private _operatorApprovals;
1524 
1525     /**
1526      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
1527      */
1528     constructor(string memory name_, string memory symbol_) {
1529         _name = name_;
1530         _symbol = symbol_;
1531     }
1532 
1533     /**
1534      * @dev See {IERC165-supportsInterface}.
1535      */
1536     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
1537         return
1538             interfaceId == type(IERC721).interfaceId ||
1539             interfaceId == type(IERC721Metadata).interfaceId ||
1540             super.supportsInterface(interfaceId);
1541     }
1542 
1543     /**
1544      * @dev See {IERC721-balanceOf}.
1545      */
1546     function balanceOf(address owner) public view virtual override returns (uint256) {
1547         require(owner != address(0), "ERC721: balance query for the zero address");
1548         return _balances[owner];
1549     }
1550 
1551     /**
1552      * @dev See {IERC721-ownerOf}.
1553      */
1554     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
1555         address owner = _owners[tokenId];
1556         require(owner != address(0), "ERC721: owner query for nonexistent token");
1557         return owner;
1558     }
1559 
1560     /**
1561      * @dev See {IERC721Metadata-name}.
1562      */
1563     function name() public view virtual override returns (string memory) {
1564         return _name;
1565     }
1566 
1567     /**
1568      * @dev See {IERC721Metadata-symbol}.
1569      */
1570     function symbol() public view virtual override returns (string memory) {
1571         return _symbol;
1572     }
1573 
1574     /**
1575      * @dev See {IERC721Metadata-tokenURI}.
1576      */
1577     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
1578         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1579 
1580         string memory baseURI = _baseURI();
1581         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
1582     }
1583 
1584     /**
1585      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
1586      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
1587      * by default, can be overriden in child contracts.
1588      */
1589     function _baseURI() internal view virtual returns (string memory) {
1590         return "";
1591     }
1592 
1593     /**
1594      * @dev See {IERC721-approve}.
1595      */
1596     function approve(address to, uint256 tokenId) public virtual override {
1597         address owner = ERC721.ownerOf(tokenId);
1598         require(to != owner, "ERC721: approval to current owner");
1599 
1600         require(
1601             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
1602             "ERC721: approve caller is not owner nor approved for all"
1603         );
1604 
1605         _approve(to, tokenId);
1606     }
1607 
1608     /**
1609      * @dev See {IERC721-getApproved}.
1610      */
1611     function getApproved(uint256 tokenId) public view virtual override returns (address) {
1612         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
1613 
1614         return _tokenApprovals[tokenId];
1615     }
1616 
1617     /**
1618      * @dev See {IERC721-setApprovalForAll}.
1619      */
1620     function setApprovalForAll(address operator, bool approved) public virtual override {
1621         require(operator != _msgSender(), "ERC721: approve to caller");
1622 
1623         _operatorApprovals[_msgSender()][operator] = approved;
1624         emit ApprovalForAll(_msgSender(), operator, approved);
1625     }
1626 
1627     /**
1628      * @dev See {IERC721-isApprovedForAll}.
1629      */
1630     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
1631         return _operatorApprovals[owner][operator];
1632     }
1633 
1634     /**
1635      * @dev See {IERC721-transferFrom}.
1636      */
1637     function transferFrom(
1638         address from,
1639         address to,
1640         uint256 tokenId
1641     ) public virtual override {
1642         //solhint-disable-next-line max-line-length
1643         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
1644 
1645         _transfer(from, to, tokenId);
1646     }
1647 
1648     /**
1649      * @dev See {IERC721-safeTransferFrom}.
1650      */
1651     function safeTransferFrom(
1652         address from,
1653         address to,
1654         uint256 tokenId
1655     ) public virtual override {
1656         safeTransferFrom(from, to, tokenId, "");
1657     }
1658 
1659     /**
1660      * @dev See {IERC721-safeTransferFrom}.
1661      */
1662     function safeTransferFrom(
1663         address from,
1664         address to,
1665         uint256 tokenId,
1666         bytes memory _data
1667     ) public virtual override {
1668         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
1669         _safeTransfer(from, to, tokenId, _data);
1670     }
1671 
1672     /**
1673      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
1674      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
1675      *
1676      * `_data` is additional data, it has no specified format and it is sent in call to `to`.
1677      *
1678      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
1679      * implement alternative mechanisms to perform token transfer, such as signature-based.
1680      *
1681      * Requirements:
1682      *
1683      * - `from` cannot be the zero address.
1684      * - `to` cannot be the zero address.
1685      * - `tokenId` token must exist and be owned by `from`.
1686      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1687      *
1688      * Emits a {Transfer} event.
1689      */
1690     function _safeTransfer(
1691         address from,
1692         address to,
1693         uint256 tokenId,
1694         bytes memory _data
1695     ) internal virtual {
1696         _transfer(from, to, tokenId);
1697         require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
1698     }
1699 
1700     /**
1701      * @dev Returns whether `tokenId` exists.
1702      *
1703      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
1704      *
1705      * Tokens start existing when they are minted (`_mint`),
1706      * and stop existing when they are burned (`_burn`).
1707      */
1708     function _exists(uint256 tokenId) internal view virtual returns (bool) {
1709         return _owners[tokenId] != address(0);
1710     }
1711 
1712     /**
1713      * @dev Returns whether `spender` is allowed to manage `tokenId`.
1714      *
1715      * Requirements:
1716      *
1717      * - `tokenId` must exist.
1718      */
1719     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
1720         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
1721         address owner = ERC721.ownerOf(tokenId);
1722         return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
1723     }
1724 
1725     /**
1726      * @dev Safely mints `tokenId` and transfers it to `to`.
1727      *
1728      * Requirements:
1729      *
1730      * - `tokenId` must not exist.
1731      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1732      *
1733      * Emits a {Transfer} event.
1734      */
1735     function _safeMint(address to, uint256 tokenId) internal virtual {
1736         _safeMint(to, tokenId, "");
1737     }
1738 
1739     /**
1740      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
1741      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
1742      */
1743     function _safeMint(
1744         address to,
1745         uint256 tokenId,
1746         bytes memory _data
1747     ) internal virtual {
1748         _mint(to, tokenId);
1749         require(
1750             _checkOnERC721Received(address(0), to, tokenId, _data),
1751             "ERC721: transfer to non ERC721Receiver implementer"
1752         );
1753     }
1754 
1755     /**
1756      * @dev Mints `tokenId` and transfers it to `to`.
1757      *
1758      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
1759      *
1760      * Requirements:
1761      *
1762      * - `tokenId` must not exist.
1763      * - `to` cannot be the zero address.
1764      *
1765      * Emits a {Transfer} event.
1766      */
1767     function _mint(address to, uint256 tokenId) internal virtual {
1768         require(to != address(0), "ERC721: mint to the zero address");
1769         require(!_exists(tokenId), "ERC721: token already minted");
1770 
1771         _beforeTokenTransfer(address(0), to, tokenId);
1772 
1773         _balances[to] += 1;
1774         _owners[tokenId] = to;
1775 
1776         emit Transfer(address(0), to, tokenId);
1777     }
1778 
1779     /**
1780      * @dev Destroys `tokenId`.
1781      * The approval is cleared when the token is burned.
1782      *
1783      * Requirements:
1784      *
1785      * - `tokenId` must exist.
1786      *
1787      * Emits a {Transfer} event.
1788      */
1789     function _burn(uint256 tokenId) internal virtual {
1790         address owner = ERC721.ownerOf(tokenId);
1791 
1792         _beforeTokenTransfer(owner, address(0), tokenId);
1793 
1794         // Clear approvals
1795         _approve(address(0), tokenId);
1796 
1797         _balances[owner] -= 1;
1798         delete _owners[tokenId];
1799 
1800         emit Transfer(owner, address(0), tokenId);
1801     }
1802 
1803     /**
1804      * @dev Transfers `tokenId` from `from` to `to`.
1805      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
1806      *
1807      * Requirements:
1808      *
1809      * - `to` cannot be the zero address.
1810      * - `tokenId` token must be owned by `from`.
1811      *
1812      * Emits a {Transfer} event.
1813      */
1814     function _transfer(
1815         address from,
1816         address to,
1817         uint256 tokenId
1818     ) internal virtual {
1819         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
1820         require(to != address(0), "ERC721: transfer to the zero address");
1821 
1822         _beforeTokenTransfer(from, to, tokenId);
1823 
1824         // Clear approvals from the previous owner
1825         _approve(address(0), tokenId);
1826 
1827         _balances[from] -= 1;
1828         _balances[to] += 1;
1829         _owners[tokenId] = to;
1830 
1831         emit Transfer(from, to, tokenId);
1832     }
1833 
1834     /**
1835      * @dev Approve `to` to operate on `tokenId`
1836      *
1837      * Emits a {Approval} event.
1838      */
1839     function _approve(address to, uint256 tokenId) internal virtual {
1840         _tokenApprovals[tokenId] = to;
1841         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
1842     }
1843 
1844     /**
1845      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1846      * The call is not executed if the target address is not a contract.
1847      *
1848      * @param from address representing the previous owner of the given token ID
1849      * @param to target address that will receive the tokens
1850      * @param tokenId uint256 ID of the token to be transferred
1851      * @param _data bytes optional data to send along with the call
1852      * @return bool whether the call correctly returned the expected magic value
1853      */
1854     function _checkOnERC721Received(
1855         address from,
1856         address to,
1857         uint256 tokenId,
1858         bytes memory _data
1859     ) private returns (bool) {
1860         if (to.isContract()) {
1861             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
1862                 return retval == IERC721Receiver.onERC721Received.selector;
1863             } catch (bytes memory reason) {
1864                 if (reason.length == 0) {
1865                     revert("ERC721: transfer to non ERC721Receiver implementer");
1866                 } else {
1867                     assembly {
1868                         revert(add(32, reason), mload(reason))
1869                     }
1870                 }
1871             }
1872         } else {
1873             return true;
1874         }
1875     }
1876 
1877     /**
1878      * @dev Hook that is called before any token transfer. This includes minting
1879      * and burning.
1880      *
1881      * Calling conditions:
1882      *
1883      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1884      * transferred to `to`.
1885      * - When `from` is zero, `tokenId` will be minted for `to`.
1886      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1887      * - `from` and `to` are never both zero.
1888      *
1889      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1890      */
1891     function _beforeTokenTransfer(
1892         address from,
1893         address to,
1894         uint256 tokenId
1895     ) internal virtual {}
1896 }
1897 
1898 // File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol
1899 
1900 
1901 
1902 pragma solidity ^0.8.0;
1903 
1904 
1905 
1906 /**
1907  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
1908  * enumerability of all the token ids in the contract as well as all token ids owned by each
1909  * account.
1910  */
1911 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
1912     // Mapping from owner to list of owned token IDs
1913     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
1914 
1915     // Mapping from token ID to index of the owner tokens list
1916     mapping(uint256 => uint256) private _ownedTokensIndex;
1917 
1918     // Array with all token ids, used for enumeration
1919     uint256[] private _allTokens;
1920 
1921     // Mapping from token id to position in the allTokens array
1922     mapping(uint256 => uint256) private _allTokensIndex;
1923 
1924     /**
1925      * @dev See {IERC165-supportsInterface}.
1926      */
1927     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
1928         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
1929     }
1930 
1931     /**
1932      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1933      */
1934     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
1935         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
1936         return _ownedTokens[owner][index];
1937     }
1938 
1939     /**
1940      * @dev See {IERC721Enumerable-totalSupply}.
1941      */
1942     function totalSupply() public view virtual override returns (uint256) {
1943         return _allTokens.length;
1944     }
1945 
1946     /**
1947      * @dev See {IERC721Enumerable-tokenByIndex}.
1948      */
1949     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
1950         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
1951         return _allTokens[index];
1952     }
1953 
1954     /**
1955      * @dev Hook that is called before any token transfer. This includes minting
1956      * and burning.
1957      *
1958      * Calling conditions:
1959      *
1960      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1961      * transferred to `to`.
1962      * - When `from` is zero, `tokenId` will be minted for `to`.
1963      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1964      * - `from` cannot be the zero address.
1965      * - `to` cannot be the zero address.
1966      *
1967      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1968      */
1969     function _beforeTokenTransfer(
1970         address from,
1971         address to,
1972         uint256 tokenId
1973     ) internal virtual override {
1974         super._beforeTokenTransfer(from, to, tokenId);
1975 
1976         if (from == address(0)) {
1977             _addTokenToAllTokensEnumeration(tokenId);
1978         } else if (from != to) {
1979             _removeTokenFromOwnerEnumeration(from, tokenId);
1980         }
1981         if (to == address(0)) {
1982             _removeTokenFromAllTokensEnumeration(tokenId);
1983         } else if (to != from) {
1984             _addTokenToOwnerEnumeration(to, tokenId);
1985         }
1986     }
1987 
1988     /**
1989      * @dev Private function to add a token to this extension's ownership-tracking data structures.
1990      * @param to address representing the new owner of the given token ID
1991      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
1992      */
1993     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
1994         uint256 length = ERC721.balanceOf(to);
1995         _ownedTokens[to][length] = tokenId;
1996         _ownedTokensIndex[tokenId] = length;
1997     }
1998 
1999     /**
2000      * @dev Private function to add a token to this extension's token tracking data structures.
2001      * @param tokenId uint256 ID of the token to be added to the tokens list
2002      */
2003     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
2004         _allTokensIndex[tokenId] = _allTokens.length;
2005         _allTokens.push(tokenId);
2006     }
2007 
2008     /**
2009      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
2010      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
2011      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
2012      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
2013      * @param from address representing the previous owner of the given token ID
2014      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
2015      */
2016     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
2017         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
2018         // then delete the last slot (swap and pop).
2019 
2020         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
2021         uint256 tokenIndex = _ownedTokensIndex[tokenId];
2022 
2023         // When the token to delete is the last token, the swap operation is unnecessary
2024         if (tokenIndex != lastTokenIndex) {
2025             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
2026 
2027             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
2028             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
2029         }
2030 
2031         // This also deletes the contents at the last position of the array
2032         delete _ownedTokensIndex[tokenId];
2033         delete _ownedTokens[from][lastTokenIndex];
2034     }
2035 
2036     /**
2037      * @dev Private function to remove a token from this extension's token tracking data structures.
2038      * This has O(1) time complexity, but alters the order of the _allTokens array.
2039      * @param tokenId uint256 ID of the token to be removed from the tokens list
2040      */
2041     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
2042         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
2043         // then delete the last slot (swap and pop).
2044 
2045         uint256 lastTokenIndex = _allTokens.length - 1;
2046         uint256 tokenIndex = _allTokensIndex[tokenId];
2047 
2048         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
2049         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
2050         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
2051         uint256 lastTokenId = _allTokens[lastTokenIndex];
2052 
2053         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
2054         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
2055 
2056         // This also deletes the contents at the last position of the array
2057         delete _allTokensIndex[tokenId];
2058         _allTokens.pop();
2059     }
2060 }
2061 
2062 // File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol
2063 
2064 
2065 
2066 pragma solidity ^0.8.0;
2067 
2068 
2069 
2070 /**
2071  * @title ERC721 Burnable Token
2072  * @dev ERC721 Token that can be irreversibly burned (destroyed).
2073  */
2074 abstract contract ERC721Burnable is Context, ERC721 {
2075     /**
2076      * @dev Burns `tokenId`. See {ERC721-_burn}.
2077      *
2078      * Requirements:
2079      *
2080      * - The caller must own `tokenId` or be an approved operator.
2081      */
2082     function burn(uint256 tokenId) public virtual {
2083         //solhint-disable-next-line max-line-length
2084         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
2085         _burn(tokenId);
2086     }
2087 }
2088 
2089 // File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol
2090 
2091 
2092 
2093 pragma solidity ^0.8.0;
2094 
2095 
2096 
2097 /**
2098  * @dev ERC721 token with pausable token transfers, minting and burning.
2099  *
2100  * Useful for scenarios such as preventing trades until the end of an evaluation
2101  * period, or having an emergency switch for freezing all token transfers in the
2102  * event of a large bug.
2103  */
2104 abstract contract ERC721Pausable is ERC721, Pausable {
2105     /**
2106      * @dev See {ERC721-_beforeTokenTransfer}.
2107      *
2108      * Requirements:
2109      *
2110      * - the contract must not be paused.
2111      */
2112     function _beforeTokenTransfer(
2113         address from,
2114         address to,
2115         uint256 tokenId
2116     ) internal virtual override {
2117         super._beforeTokenTransfer(from, to, tokenId);
2118 
2119         require(!paused(), "ERC721Pausable: token transfer while paused");
2120     }
2121 }
2122 
2123 // File: Wavelength.sol
2124 
2125 
2126 
2127 pragma solidity ^0.8.4;
2128 
2129 
2130 
2131 
2132 
2133 
2134 
2135 
2136 
2137 
2138 
2139 /*
2140 * @title ERC721 token for Wavelength
2141 *
2142 * @author original logic by Niftydude, extended by @bitcoinski, extended again by @georgefatlion
2143 */
2144                                                                                                                                                
2145 contract Wavelength is IWavelength, ERC721Enumerable, ERC721Pausable, ERC721Burnable, Ownable, VRFConsumerBase {
2146     using Strings for uint256;
2147     using SafeMath for uint256;
2148     using Counters for Counters.Counter;
2149 
2150     Counters.Counter private generalCounter; 
2151     uint public constant MAX_MINT = 1111;
2152 
2153     // VRF stuff
2154     address public VRFCoordinator;
2155     address public LinkToken;
2156     bytes32 internal keyHash;
2157     uint256 public baseSeed;
2158   
2159     struct RedemptionWindow {
2160         bool open;
2161         uint8 maxRedeemPerWallet;
2162         bytes32 merkleRoot;
2163         uint256 pricePerToken;
2164     }
2165 
2166     mapping(uint8 => RedemptionWindow) public redemptionWindows;
2167 
2168     // links
2169     string private baseTokenURI;
2170     string public _contractURI;
2171     string public _sourceURI;
2172 
2173     event Minted(address indexed account, string tokens);
2174 
2175     /**
2176     * @notice Constructor to create Wavelength contract
2177     * 
2178     * @param _name the token name
2179     * @param _symbol the token symbol
2180     * @param _maxRedeemPerWallet the max mint per redemption by index
2181     * @param _merkleRoots the merkle root for redemption window by index
2182     * @param _prices the prices for each redemption window by index
2183     * @param _baseTokenURI the respective base URI
2184     * @param _contractMetaDataURI the respective contract meta data URI
2185     * @param _VRFCoordinator the address of the vrf coordinator
2186     * @param _LinkToken link token
2187     * @param _keyHash chainlink keyhash
2188     */
2189     
2190     constructor (
2191         string memory _name, 
2192         string memory _symbol,
2193         uint8[] memory _maxRedeemPerWallet,
2194         bytes32[] memory _merkleRoots,
2195         uint256[] memory _prices,
2196         string memory _baseTokenURI,
2197         string memory _contractMetaDataURI,
2198         address _VRFCoordinator, 
2199         address _LinkToken,
2200         bytes32 _keyHash
2201     ) 
2202     
2203     VRFConsumerBase(_VRFCoordinator, _LinkToken)
2204 
2205     ERC721(_name, _symbol) {
2206 
2207         // vrf stuff
2208         VRFCoordinator = _VRFCoordinator;
2209         LinkToken = _LinkToken;
2210 
2211         // erc721 stuff
2212         baseTokenURI = _baseTokenURI;    
2213         _contractURI = _contractMetaDataURI;
2214         keyHash = _keyHash;
2215         
2216         // set up the different redeption windows. 0 - collectors, 1 - first 100, 2 - next 200, 3 - wl, 4 - public.
2217         for(uint8 i = 0; i < _prices.length; i++) {
2218             redemptionWindows[i].open = false;
2219             redemptionWindows[i].maxRedeemPerWallet = _maxRedeemPerWallet[i];
2220             redemptionWindows[i].merkleRoot = _merkleRoots[i];
2221             redemptionWindows[i].pricePerToken = _prices[i];
2222         }
2223     }
2224 
2225     /**
2226     * @notice Pause redeems until unpause is called. this pauses the whole contract. 
2227     */
2228     function pause() external override onlyOwner {
2229         _pause();
2230     }
2231 
2232     /**
2233     * @notice Unpause redeems until pause is called. this unpauses the whole contract. 
2234     */
2235     function unpause() external override onlyOwner {
2236         _unpause();
2237     }
2238 
2239     /**
2240     * @notice edit a redemption window. only writes value if it is different. 
2241     * 
2242     * @param _windowID the index of the claim window to set.
2243     * @param _merkleRoot the window merkleRoot.
2244     * @param _open the window open state.
2245     * @param _maxPerWallet the window maximum per wallet. 
2246     * @param _pricePerToken the window price per token. 
2247     */
2248     function editRedemptionWindow(
2249         uint8 _windowID,
2250         bytes32 _merkleRoot, 
2251         bool _open,
2252         uint8 _maxPerWallet,
2253         uint256 _pricePerToken
2254     ) external override onlyOwner {
2255         if(redemptionWindows[_windowID].open != _open)
2256         {
2257             redemptionWindows[_windowID].open = _open;
2258         }
2259         if(redemptionWindows[_windowID].maxRedeemPerWallet != _maxPerWallet)
2260         {
2261             redemptionWindows[_windowID].maxRedeemPerWallet = _maxPerWallet;
2262         }
2263         if(redemptionWindows[_windowID].merkleRoot != _merkleRoot)
2264         {
2265             redemptionWindows[_windowID].merkleRoot = _merkleRoot;
2266         }
2267         if(redemptionWindows[_windowID].pricePerToken != _pricePerToken)
2268         {
2269             redemptionWindows[_windowID].pricePerToken = _pricePerToken;
2270         }
2271     }       
2272 
2273     /**
2274     * @notice Widthdraw Ether from contract.
2275     * 
2276     * @param _to the address to send to
2277     * @param _amount the amount to withdraw
2278     */
2279     function withdrawEther(address payable _to, uint256 _amount) public onlyOwner
2280     {
2281         _to.transfer(_amount);
2282     }
2283 
2284     /**
2285     * @notice Mint a wavelength.
2286     * 
2287     * @param windowIndex the index of the claim window to use.
2288     * @param amount the amount of tokens to mint
2289     * @param merkleProof the hash proving they are on the list for a given window. only applies to windows 0, 1 and 2.
2290     */
2291     function mint(uint8 windowIndex, uint8 amount, bytes32[] calldata merkleProof) external payable override{
2292 
2293         // checks
2294         require(redemptionWindows[windowIndex].open, "Redeem: window is not open");
2295         require(amount > 0, "Redeem: amount cannot be zero");
2296 
2297         // check value of transaction is high enough. 
2298         // if window index is 0 and they have no tokens, 1 mint is free. 
2299         if (windowIndex == 0 && balanceOf(msg.sender) == 0)
2300         {
2301             require(msg.value >= price(amount-1, windowIndex), "Value below price");
2302         }
2303         else
2304         {
2305             require(msg.value >= price(amount, windowIndex), "Value below price");
2306         }
2307 
2308         // check if there are enough tokens left for them to mint. 
2309         require(generalCounter.current() + amount <= MAX_MINT, "Max limit");
2310 
2311         // limit number that can be claimed for given window. 
2312         require(balanceOf(msg.sender) + amount <=  redemptionWindows[windowIndex].maxRedeemPerWallet, "Too many");
2313 
2314         // check the merkle proof
2315         require(verifyMerkleProof(merkleProof, redemptionWindows[windowIndex].merkleRoot),"Invalid proof");          
2316 
2317         string memory tokens = "";
2318 
2319         for(uint256 j = 0; j < amount; j++) {
2320             _safeMint(msg.sender, generalCounter.current());
2321         
2322             tokens = string(abi.encodePacked(tokens, generalCounter.current().toString(), ","));
2323             generalCounter.increment();
2324         }
2325         emit Minted(msg.sender, tokens);
2326     }  
2327 
2328     /**
2329     * @notice Verify the merkle proof for a given root.   
2330     *     
2331     * @param proof vrf keyhash value
2332     * @param root vrf keyhash value
2333     */
2334     function verifyMerkleProof(bytes32[] memory proof, bytes32 root)
2335         public
2336         view
2337         returns (bool)
2338     {
2339 
2340         bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
2341         return MerkleProof.verify(proof, root, leaf);
2342     }
2343 
2344     /**
2345     * @notice assign the returned chainlink vrf random number to baseSeed variable.   
2346     *     
2347     * @param requestId the id of the request - unused.
2348     * @param randomness the random number from chainlink vrf. 
2349     */
2350     function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
2351         baseSeed = randomness;
2352     }
2353 
2354     /**
2355     * @notice Get the transaction price for a given number of tokens and redemption window. 
2356     * 
2357     * @param _amount the number of tokens
2358     * @param _windowIndex the ID of the window to check. 
2359     */
2360     function price(uint8 _amount, uint8 _windowIndex) public view returns (uint256) {
2361         return redemptionWindows[_windowIndex].pricePerToken.mul(_amount);
2362     }
2363 
2364     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721, ERC721Enumerable) returns (bool) {
2365         return super.supportsInterface(interfaceId);
2366     }  
2367 
2368     /**
2369     * @notice Change the base URI for returning metadata
2370     * 
2371     * @param _baseTokenURI the respective base URI
2372     */
2373     function setBaseURI(string memory _baseTokenURI) external override onlyOwner {
2374         baseTokenURI = _baseTokenURI;    
2375     }
2376 
2377     /**
2378     * @notice Return the baseTokenURI
2379     */   
2380     function _baseURI() internal view override returns (string memory) {
2381             return baseTokenURI;
2382     }    
2383 
2384     function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
2385         super._beforeTokenTransfer(from, to, tokenId);
2386     } 
2387 
2388     /**
2389     * @notice Change the base URI for returning metadata
2390     * 
2391     * @param uri the uri of the processing source code
2392     */
2393     function setSourceURI(string memory uri) external onlyOwner{
2394         _sourceURI = uri;
2395     }  
2396 
2397     function setContractURI(string memory uri) external onlyOwner{
2398         _contractURI = uri;
2399     }
2400 
2401     function contractURI() public view returns (string memory) {
2402         return _contractURI;
2403     }
2404 
2405     /**
2406     * @notice Call chainlink to get a random number to use as the base for the random seeds.  
2407     *     
2408     */
2409     function plantSeed(uint256 fee) public onlyOwner returns (bytes32 requestId) {
2410         require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
2411         return requestRandomness(keyHash, fee);
2412     }
2413 
2414     /**
2415     * @notice Get the random seed for a given token, expanded from the baseSeed from Chainlink VRF. 
2416     * 
2417     * @param tokenId the token id 
2418     */
2419     function getSeed(uint256 tokenId) public view returns (uint256)
2420     {
2421         require(totalSupply()>tokenId, "Token Not Found");
2422 
2423         if (baseSeed == 0){
2424             return 0;
2425         }
2426         else{
2427             return uint256(keccak256(abi.encode(baseSeed, tokenId))) % 2000000000;
2428         }
2429     }
2430 }