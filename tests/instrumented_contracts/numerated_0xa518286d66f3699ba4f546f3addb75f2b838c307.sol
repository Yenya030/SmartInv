1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/moon/NonFungibleMoons.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ERC721A} from \"@erc721a/contracts/ERC721A.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {LibPRNG} from \"../utils/LibPRNG.sol\";\nimport {Utils} from \"../utils/Utils.sol\";\nimport {MoonCalculations} from \"../moon/MoonCalculations.sol\";\nimport {MoonRenderer} from \"../moon/MoonRenderer.sol\";\nimport {MoonSvg} from \"../moon/MoonSvg.sol\";\nimport {MoonConfig} from \"../moon/MoonConfig.sol\";\nimport {DynamicNftRegistryInterface} from \"../interfaces/dynamicNftRegistry/DynamicNftRegistryInterface.sol\";\nimport {AlienArtBase, MoonImageConfig} from \"../interfaces/alienArt/AlienArtBase.sol\";\nimport {AlienArtConstellation} from \"../alienArt/constellation/AlienArtConstellation.sol\";\nimport {ERC1155TokenReceiver} from \"../ext/ERC1155.sol\";\nimport {MoonNFTEventsAndErrors} from \"./MoonNFTEventsAndErrors.sol\";\nimport {Ownable} from \"../ext/Ownable.sol\";\nimport {IERC2981} from \"../interfaces/ext/IERC2981.sol\";\nimport {IERC165} from \"../interfaces/ext/IERC165.sol\";\nimport {DefaultOperatorFilterer} from \"../ext/DefaultOperatorFilterer.sol\";\n\n/*\n███╗░░██╗░█████╗░███╗░░██╗\n████╗░██║██╔══██╗████╗░██║\n██╔██╗██║██║░░██║██╔██╗██║\n██║╚████║██║░░██║██║╚████║\n██║░╚███║╚█████╔╝██║░╚███║\n╚═╝░░╚══╝░╚════╝░╚═╝░░╚══╝\n\n███████╗██╗░░░██╗███╗░░██╗░██████╗░██╗██████╗░██╗░░░░░███████╗\n██╔════╝██║░░░██║████╗░██║██╔════╝░██║██╔══██╗██║░░░░░██╔════╝\n█████╗░░██║░░░██║██╔██╗██║██║░░██╗░██║██████╦╝██║░░░░░█████╗░░\n██╔══╝░░██║░░░██║██║╚████║██║░░╚██╗██║██╔══██╗██║░░░░░██╔══╝░░\n██║░░░░░╚██████╔╝██║░╚███║╚██████╔╝██║██████╦╝███████╗███████╗\n╚═╝░░░░░░╚═════╝░╚═╝░░╚══╝░╚═════╝░╚═╝╚═════╝░╚══════╝╚══════╝\n\n███╗░░░███╗░█████╗░░█████╗░███╗░░██╗░██████╗\n████╗░████║██╔══██╗██╔══██╗████╗░██║██╔════╝\n██╔████╔██║██║░░██║██║░░██║██╔██╗██║╚█████╗░\n██║╚██╔╝██║██║░░██║██║░░██║██║╚████║░╚═══██╗\n██║░╚═╝░██║╚█████╔╝╚█████╔╝██║░╚███║██████╔╝\n*/\n\n/// @title NonFungibleMoons\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\n/// @notice Interactive on-chain generative moon NFTs with art that closely mirrors the phase of\n/// the real world moon. These NFTs support on-chain art composition, art regeneration, and mint referrals.\ncontract NonFungibleMoons is\n    DefaultOperatorFilterer,\n    ERC721A,\n    IERC2981,\n    ERC1155TokenReceiver,\n    Ownable,\n    MoonNFTEventsAndErrors\n{\n    using LibPRNG for LibPRNG.PRNG;\n\n    uint256 public constant MAX_SUPPLY = 513;\n    uint256 public constant PRICE = 0.04 ether;\n\n    address payable internal constant VAULT_ADDRESS =\n        payable(0x39Ab90066cec746A032D67e4fe3378f16294CF6b);\n\n    // On mint, PRICE / FRACTION_OF_PRICE_FOR_REFERRAL will go to referrals\n    uint256 internal constant FRACTION_OF_PRICE_FOR_REFERRAL = 4;\n\n    // Maps moon token id to randomness seed\n    mapping(uint256 => bytes32) public moonSeeds;\n    // Maps moon token id to number of regenerates used by current owner\n    mapping(uint256 => uint8) public regeneratesUsedByCurrentOwner;\n    uint8 internal constant MAX_REGENERATES_PER_OWNER = 3;\n    uint64 internal constant COOLDOWN_PERIOD = 120;\n\n    address public dynamicNftRegistryAddress;\n    address public defaultAlienArtAddress;\n\n    // Mapping from token ID to alien art\n    mapping(uint256 => address) public alienArtAddressMap;\n\n    uint256 internal constant INTERVAL_BETWEEN_ANIMATION_SAMPLES =\n        MoonCalculations.LUNAR_MONTH_LENGTH_IN_MS / 120;\n\n    /***********************************\n     ** Welcome to Non-Fungible Moons **\n     ***********************************/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _defaultAlienArtAddress\n    ) ERC721A(_name, _symbol) {\n        // Set default alien art contract, which should be the constellations address\n        defaultAlienArtAddress = _defaultAlienArtAddress;\n    }\n\n    /*************************************************************\n     ** Collect moons and explore the potential of on-chain art **\n     *************************************************************/\n\n    /// @notice Mint NFT.\n    /// @param amount amount of token that the sender wants to mint.\n    function mint(uint256 amount) external payable {\n        _mintCore(amount);\n    }\n\n    function _mintCore(uint256 amount) internal returns (uint256) {\n        // Checks\n\n        // Enforce basic mint checks\n        if (MAX_SUPPLY < _nextTokenId() + amount) {\n            revert MaxSupplyReached();\n        }\n        if (msg.value != PRICE * amount) {\n            revert WrongEtherAmount();\n        }\n\n        // Effects\n        uint256 nextMoonTokenIdToBeMinted = _nextTokenId();\n\n        // Store moon seeds\n        // NOTE: we do not need to set regenerates used for these tokens (regeneratesUsedByCurrentOwner) since the\n        // regenerates used for newly minted token ids will default to 0\n        for (\n            uint256 tokenId = nextMoonTokenIdToBeMinted;\n            tokenId < nextMoonTokenIdToBeMinted + amount;\n            ++tokenId\n        ) {\n            moonSeeds[tokenId] = MoonConfig.getMoonSeed(tokenId);\n        }\n\n        // Mint moons\n        _mint(msg.sender, amount);\n\n        // Interactions\n\n        // Mint constellations\n        AlienArtConstellation(defaultAlienArtAddress).mint(\n            nextMoonTokenIdToBeMinted,\n            amount\n        );\n\n        return nextMoonTokenIdToBeMinted;\n    }\n\n    /**************************************************************\n     ** Once you own a moon, earn on-chain mint referral rewards **\n     **************************************************************/\n\n    /// @notice Mint NFT with referrer.\n    /// @param amount amount of token that the sender wants to mint.\n    /// @param referrer referrer who will receive part of the payment.\n    /// @param referrerTokenId token that referrer owns.\n    function mintWithReferrer(\n        uint256 amount,\n        address payable referrer,\n        uint256 referrerTokenId\n    ) public payable {\n        uint256 nextMoonTokenIdToBeMinted = _mintCore(amount);\n\n        // Pay out referral funds if the following conditions are met\n        if (\n            // 1. Referrer is not 0 address\n            referrer != address(0) &&\n            // 2. Referrer is not self\n            referrer != msg.sender &&\n            // 3. Referrer owns the input token\n            referrer == ownerOf(referrerTokenId)\n        ) {\n            // Get referral amounts\n            (uint256 referrerValue, uint256 referredValue) = getReferralAmounts(\n                referrer,\n                msg.sender,\n                msg.value\n            );\n\n            // Emit minted with referrer event\n            emit MintedWithReferrer(\n                referrer,\n                referrerTokenId,\n                msg.sender,\n                nextMoonTokenIdToBeMinted,\n                amount,\n                referrerValue,\n                referredValue\n            );\n\n            // Transfer ETH to referrer and referred\n            referrer.transfer(referrerValue);\n            payable(msg.sender).transfer(referredValue);\n        }\n    }\n\n    /// @notice Get amounts that should be paid out to referrer and referred.\n    /// @param referrer referrer who will receive part of the payment.\n    /// @param referred referred who will receive part of the payment.\n    /// @param value value of the mint.\n    /// @return referrerValue value to be paid to referrer, referredValue value to be paid to referred.\n    function getReferralAmounts(\n        address referrer,\n        address referred,\n        uint256 value\n    ) public view returns (uint256 referrerValue, uint256 referredValue) {\n        // Amount from the value that will be distributed between the referrer and referred\n        uint256 amtWithheldForReferrals = value /\n            FRACTION_OF_PRICE_FOR_REFERRAL;\n\n        LibPRNG.PRNG memory prng;\n        prng.seed(\n            keccak256(abi.encodePacked(block.difficulty, referrer, referred))\n        );\n        // Note: integer division will imply the result is truncated (e.g. 5 / 2 = 2).\n        // This is the expected behavior.\n        referredValue =\n            // Random value ranging from 0 to 10000\n            (amtWithheldForReferrals * prng.uniform(10001)) /\n            10000;\n        referrerValue = amtWithheldForReferrals - referredValue;\n    }\n\n    /****************************************************\n     ** Alter the Alien Art for your moons at any time **\n     ****************************************************/\n\n    /// @notice Set alien art address for particular tokens.\n    /// @param tokenIds token ids.\n    /// @param alienArtAddress alien art contract.\n    function setAlienArtAddresses(\n        uint256[] calldata tokenIds,\n        address alienArtAddress\n    ) external {\n        if (tokenIds.length > MAX_SUPPLY) {\n            revert MaxSupplyReached();\n        }\n\n        // If alien art address is not null address, validate that alien\n        // art address is pointing to a valid alien art contract\n        if (\n            alienArtAddress != address(0) &&\n            !AlienArtBase(alienArtAddress).supportsInterface(\n                type(AlienArtBase).interfaceId\n            )\n        ) {\n            revert AlienArtContractFailedValidation();\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            if (ownerOf(tokenId) != msg.sender) {\n                revert OwnerNotMsgSender();\n            }\n\n            alienArtAddressMap[tokenId] = alienArtAddress;\n            emit AlienArtAddressUpdated(tokenId, alienArtAddress);\n        }\n    }\n\n    /// @notice Get alien art address for a particular token.\n    /// @param tokenId token id.\n    /// @return tuple containing (True if default alien art contract is used; false otherwise, alien art contract).\n    function getAlienArtContractForToken(uint256 tokenId)\n        external\n        view\n        returns (bool, AlienArtBase)\n    {\n        AlienArtBase alienArtContract;\n        if (alienArtAddressMap[tokenId] != address(0)) {\n            // Use defined alien art contract if alien art address for token is not 0\n            alienArtContract = AlienArtBase(alienArtAddressMap[tokenId]);\n        } else {\n            // Use default alien art contract if alien art address for token is 0\n            alienArtContract = AlienArtBase(defaultAlienArtAddress);\n        }\n\n        // Default alien art is used if the alien art address is\n        // the default alien art address or if alien art address is 0 address\n        return (\n            alienArtAddressMap[tokenId] == defaultAlienArtAddress ||\n                alienArtAddressMap[tokenId] == address(0),\n            alienArtContract\n        );\n    }\n\n    /// @notice Get alien art values.\n    /// @param alienArtContract alien art contract to get values from.\n    /// @param tokenId token id.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return alien art image, alien art moon filter, alien art trait.\n    function getAlienArtValues(\n        AlienArtBase alienArtContract,\n        uint256 tokenId,\n        uint256 rotationInDegrees\n    )\n        internal\n        view\n        returns (\n            string memory,\n            string memory,\n            string memory\n        )\n    {\n        bytes32 seed = moonSeeds[tokenId];\n        MoonImageConfig memory config = MoonConfig.getMoonConfig(seed);\n        return (\n            alienArtContract.getArt(tokenId, seed, config, rotationInDegrees),\n            alienArtContract.getMoonFilter(\n                tokenId,\n                seed,\n                config,\n                rotationInDegrees\n            ),\n            alienArtContract.getTraits(tokenId, seed, config, rotationInDegrees)\n        );\n    }\n\n    /**************************\n     ** Regenerate your moon **\n     **************************/\n\n    /// @notice Regenerate a moon's seed, which will permanently regenerate the moon's art and traits.\n    /// @param tokenId moon token id.\n    function regenerateMoon(uint256 tokenId) external payable {\n        // Checks\n        if (\n            regeneratesUsedByCurrentOwner[tokenId] == MAX_REGENERATES_PER_OWNER\n        ) {\n            revert NoRegenerationsRemaining();\n        }\n        if (msg.value != PRICE) {\n            revert WrongEtherAmount();\n        }\n        if (ownerOf(tokenId) != msg.sender) {\n            revert OwnerNotMsgSender();\n        }\n\n        // Effects\n\n        // Update moon seed\n        bytes32 originalMoonSeed = moonSeeds[tokenId];\n        moonSeeds[tokenId] = MoonConfig.getMoonSeed(tokenId);\n        // Increment regenerates used\n        ++regeneratesUsedByCurrentOwner[tokenId];\n\n        // Emit regeneration event\n        emit MoonRegenerated(\n            msg.sender,\n            tokenId,\n            moonSeeds[tokenId],\n            originalMoonSeed,\n            regeneratesUsedByCurrentOwner[tokenId]\n        );\n\n        // Interactions\n\n        // Burn existing constellation and mint new one\n        AlienArtConstellation(defaultAlienArtAddress).burnAndMint(tokenId);\n\n        // Update dynamic NFT registry if present\n        if (dynamicNftRegistryAddress != address(0)) {\n            DynamicNftRegistryInterface(dynamicNftRegistryAddress).updateToken(\n                address(this),\n                tokenId,\n                COOLDOWN_PERIOD,\n                false\n            );\n        }\n    }\n\n    function _afterTokenTransfers(\n        address,\n        address,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal override {\n        // After token transfer, reset regenerates for the new owner\n        for (\n            uint256 tokenId = startTokenId;\n            tokenId < startTokenId + quantity;\n            ++tokenId\n        ) {\n            regeneratesUsedByCurrentOwner[tokenId] = 0;\n        }\n    }\n\n    /*********************************\n     ** Withdraw funds to the vault **\n     *********************************/\n\n    /// @notice Withdraw all ETH from the contract to the vault.\n    function withdraw() external {\n        VAULT_ADDRESS.transfer(address(this).balance);\n    }\n\n    /***************************************************************\n     ** Generate on-chain SVG and interactive HTML token metadata **\n     ***************************************************************/\n\n    /// @notice Get token URI for a particular token.\n    /// @param tokenId token id.\n    /// @return token uri.\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        ownerOf(tokenId);\n\n        (bool defaultAlienArt, AlienArtBase alienArtContract) = this\n            .getAlienArtContractForToken(tokenId);\n\n        uint256 timestamp = block.timestamp * 1e3;\n        (, , string memory alienArtTrait) = getAlienArtValues(\n            alienArtContract,\n            tokenId,\n            MoonRenderer.getLunarCycleDistanceFromDateAsRotationInDegrees(\n                timestamp\n            )\n        );\n\n        bytes32 moonSeed = moonSeeds[tokenId];\n        string memory traits = MoonConfig.getMoonTraits(\n            moonSeed,\n            alienArtTrait,\n            alienArtContract.getArtName(),\n            Strings.toHexString(address(alienArtContract)),\n            defaultAlienArt\n        );\n\n        string memory moonName = string.concat(\n            \"Non-Fungible Moon #\",\n            Utils.uint2str(tokenId)\n        );\n\n        (\n            string memory moonSvg,\n            string memory moonAnimation\n        ) = generateOnChainMoon(tokenId, timestamp, alienArtContract);\n\n        return\n            Utils.formatTokenURI(\n                Utils.svgToImageURI(moonSvg),\n                Utils.htmlToURI(moonAnimation),\n                moonName,\n                \"Non-Fungible Moons are on-chain generative moon NFTs. All moon art is generated on-chain and updates in real-time, based on current block time and using an on-chain SVG library, to closely mirror the phase of the moon in the real world.\",\n                traits\n            );\n    }\n\n    // Generate moon svg image and interactive moon animation html based on initial timestamp\n    function generateOnChainMoon(\n        uint256 tokenId,\n        uint256 initialTimestamp,\n        AlienArtBase alienArtContract\n    ) internal view returns (string memory, string memory) {\n        bytes32 moonSeed = moonSeeds[tokenId];\n\n        string memory moonSvgText;\n        string memory firstSvg;\n\n        for (\n            uint256 timestamp = initialTimestamp;\n            timestamp <\n            initialTimestamp + MoonCalculations.LUNAR_MONTH_LENGTH_IN_MS;\n            timestamp += INTERVAL_BETWEEN_ANIMATION_SAMPLES\n        ) {\n            (\n                string memory alienArt,\n                string memory alienArtMoonFilter,\n\n            ) = getAlienArtValues(\n                    alienArtContract,\n                    tokenId,\n                    MoonRenderer\n                        .getLunarCycleDistanceFromDateAsRotationInDegrees(\n                            timestamp\n                        )\n                );\n\n            string memory moonSvg = MoonRenderer.renderWithTimestamp(\n                moonSeed,\n                timestamp,\n                alienArt,\n                alienArtMoonFilter\n            );\n\n            if (timestamp == initialTimestamp) {\n                firstSvg = moonSvg;\n                moonSvgText = string.concat(\n                    '<!DOCTYPE html><html><head><style type=\"text/css\">html{overflow:hidden}body{margin:0}#moon{display:block;margin:auto}</style></head><body><div id=\"moonDiv\"></div><script>let gs=[`',\n                    moonSvg,\n                    \"`\"\n                );\n            } else {\n                moonSvgText = string.concat(moonSvgText, \",`\", moonSvg, \"`\");\n            }\n        }\n\n        return (\n            firstSvg,\n            string.concat(\n                moonSvgText,\n                '];let $=document.getElementById.bind(document);$(\"moonDiv\").innerHTML=gs[0];let mo=$(\"moonDiv\");let u=e=>{let t=$(\"moon\").getBoundingClientRect();$(\"moonDiv\").innerHTML=gs[Math.max(0,Math.min(Math.floor(((e-t.left)/t.width)*gs.length),gs.length-1))];};mo.onmousemove=e=>u(e.clientX);mo.addEventListener(\"touchstart\",e=>{let t=e=>u(e.touches[0].clientX);n=()=>{e.target.removeEventListener(\"touchmove\",t),e.target.removeEventListener(\"touchend\",n);};e.target.addEventListener(\"touchmove\",t);e.target.addEventListener(\"touchend\",n);});</script></body></html>'\n            )\n        );\n    }\n\n    /**************************\n     ** Dynamic NFT registry **\n     **************************/\n\n    /// @notice Set up dynamic NFT registry and add default alien art as an allowed updater of this token.\n    /// @param _dynamicNftRegistryAddress dynamic NFT registry address.\n    function setupDynamicNftRegistry(address _dynamicNftRegistryAddress)\n        external\n        onlyOwner\n    {\n        dynamicNftRegistryAddress = _dynamicNftRegistryAddress;\n        DynamicNftRegistryInterface registry = DynamicNftRegistryInterface(\n            dynamicNftRegistryAddress\n        );\n        // Register this token with dynamic nft registry\n        registry.registerToken(address(this));\n        // Add default alien art as an allowed updater of this token\n        registry.addAllowedUpdater(address(this), defaultAlienArtAddress);\n        // Add this as an allowed updater of this token\n        registry.addAllowedUpdater(address(this), address(this));\n    }\n\n    /*********************\n     ** Operator filter **\n     *********************/\n\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId)\n        public\n        payable\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public payable override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    /*************************\n     ** Royalty definitions **\n     *************************/\n\n    function royaltyInfo(uint256, uint256 salePrice)\n        external\n        pure\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return (VAULT_ADDRESS, (salePrice * 250) / 10000);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721A)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /*************\n     ** Tip jar **\n     *************/\n\n    receive() external payable {}\n}\n"
6     },
7     "lib/erc721a/contracts/ERC721A.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
12     },
13     "src/utils/LibPRNG.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for generating psuedorandom numbers.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\nlibrary LibPRNG {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev A psuedorandom number state in memory.\n    struct PRNG {\n        uint256 state;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         OPERATIONS                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Seeds the `prng` with `state`.\n    function seed(PRNG memory prng, bytes32 state) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(prng, state)\n        }\n    }\n\n    /// @dev Returns a psuedorandom uint256, uniformly distributed\n    /// between 0 (inclusive) and `upper` (exclusive).\n    /// If your modulus is big, this method is recommended\n    /// for uniform sampling to avoid modulo bias.\n    /// For uniform sampling across all uint256 values,\n    /// or for small enough moduli such that the bias is neligible,\n    /// use {next} instead.\n    function uniform(PRNG memory prng, uint256 upper)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // prettier-ignore\n            for {} 1 {} {\n                result := keccak256(prng, 0x20)\n                mstore(prng, result)\n                // prettier-ignore\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\n            }\n            result := mod(result, upper)\n        }\n    }\n}\n"
15     },
16     "src/utils/Utils.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Core utils used extensively to format CSS and numbers.\nlibrary Utils {\n    string internal constant BASE64_TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    // converts an unsigned integer to a string\n    function uint2str(uint256 _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            ++len;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function htmlToURI(string memory _source)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string.concat(\n                \"data:text/html;base64,\",\n                encodeBase64(bytes(_source))\n            );\n    }\n\n    function svgToImageURI(string memory _source)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string.concat(\n                \"data:image/svg+xml;base64,\",\n                encodeBase64(bytes(_source))\n            );\n    }\n\n    function formatTokenURI(\n        string memory _imageURI,\n        string memory _animationURI,\n        string memory _name,\n        string memory _description,\n        string memory _properties\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"data:application/json;base64,\",\n                encodeBase64(\n                    bytes(\n                        string.concat(\n                            '{\"name\":\"',\n                            _name,\n                            '\",\"description\":\"',\n                            _description,\n                            '\",\"attributes\":',\n                            _properties,\n                            ',\"image\":\"',\n                            _imageURI,\n                            '\",\"animation_url\":\"',\n                            _animationURI,\n                            '\"}'\n                        )\n                    )\n                )\n            );\n    }\n\n    // Encode some bytes in base64\n    // https://gist.github.com/mbvissers/8ba9ac1eca9ed0ef6973bd49b3c999ba\n    function encodeBase64(bytes memory data)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = BASE64_TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n}\n"
18     },
19     "src/moon/MoonCalculations.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title MoonCalculations\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary MoonCalculations {\n    // Only need the 4 moon phases where the moon is actually changing,\n    // as the other phases (new moon, first quarter, full moon, third quarter)\n    // are just single points in time (don't define a rate of change)\n    enum MoonPhase {\n        WAXING_CRESCENT,\n        WAXING_GIBBOUS,\n        WANING_GIBBOUS,\n        WANING_CRESCENT\n    }\n\n    uint256 internal constant BASE_NEW_MOON_DATE_IN_MS = 1666694910000;\n    uint256 internal constant LUNAR_MONTH_LENGTH_IN_MS = 2551442877;\n\n    uint256 internal constant NUM_PHASES = 4;\n    uint256 internal constant PHASE_LENGTH = 10000 / NUM_PHASES;\n\n    function timestampToPhase(uint256 unixUtcTimestamp)\n        internal\n        pure\n        returns (MoonPhase phase, uint256 progressPercentageOutOf10000)\n    {\n        uint256 distanceIntoLunarCycleOutOf10000 = calculateLunarCycleDistanceFromDate(\n                unixUtcTimestamp\n            );\n\n        uint256 progress = distanceIntoLunarCycleOutOf10000 / PHASE_LENGTH;\n        phase = MoonPhase(progress);\n        progressPercentageOutOf10000 =\n            (distanceIntoLunarCycleOutOf10000 - progress * PHASE_LENGTH) *\n            NUM_PHASES;\n    }\n\n    function calculateLunarCycleDistanceFromDate(uint256 currDate)\n        internal\n        pure\n        returns (uint256 distanceIntoLunarCycleOutOf10000)\n    {\n        uint256 msIntoPhase = (currDate - BASE_NEW_MOON_DATE_IN_MS) %\n            LUNAR_MONTH_LENGTH_IN_MS;\n\n        uint256 value = MoonCalculations.roundToNearestMultiple(\n            msIntoPhase * 10000,\n            LUNAR_MONTH_LENGTH_IN_MS\n        ) / LUNAR_MONTH_LENGTH_IN_MS;\n\n        // Return value between 0 and 9999, inclusive\n        return value < 10000 ? value : 0;\n    }\n\n    // Helpers\n\n    function roundToNearestMultiple(uint256 number, uint256 multiple)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 result = number + multiple / 2;\n        return result - (result % multiple);\n    }\n}\n"
21     },
22     "src/moon/MoonRenderer.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {MoonCalculations} from \"./MoonCalculations.sol\";\nimport {MoonSvg} from \"./MoonSvg.sol\";\nimport {MoonConfig} from \"./MoonConfig.sol\";\nimport {MoonImageConfig} from \"./MoonStructs.sol\";\n\n/// @title MoonRenderer\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary MoonRenderer {\n    function getLunarCycleDistanceFromDateAsRotationInDegrees(uint256 date)\n        internal\n        pure\n        returns (uint16)\n    {\n        return\n            uint16(\n                // Round to nearest multiple of 10000, which ensures that progressScaled will be properly rounded rather than having truncation occur during integer division\n                MoonCalculations.roundToNearestMultiple(\n                    MoonCalculations.calculateLunarCycleDistanceFromDate(date) *\n                        360,\n                    10000\n                ) / 10000\n            );\n    }\n\n    function _render(\n        bytes32 moonSeed,\n        MoonCalculations.MoonPhase phase,\n        // Represent a fraction as progressOutOf10000 out of 10000\n        // e.g. 0.5 -> progressOutOf10000 = 5000, 0.1234 -> 1234\n        uint256 progressOutOf10000,\n        string memory alienArt,\n        string memory alienArtMoonFilter\n    ) internal pure returns (string memory) {\n        MoonImageConfig memory moonConfig = MoonConfig.getMoonConfig(moonSeed);\n\n        MoonSvg.SvgContainerParams memory svg1 = MoonSvg.SvgContainerParams({\n            x: 0,\n            y: 0,\n            width: moonConfig.moonRadius,\n            height: moonConfig.viewHeight\n        });\n        MoonSvg.SvgContainerParams memory svg2 = MoonSvg.SvgContainerParams({\n            x: 0,\n            y: 0,\n            width: moonConfig.moonRadius,\n            height: moonConfig.viewHeight\n        });\n\n        MoonSvg.EllipseParams memory ellipse1 = MoonSvg.EllipseParams({\n            cx: moonConfig.moonRadius,\n            cy: moonConfig.moonRadius,\n            rx: moonConfig.moonRadius,\n            ry: moonConfig.moonRadius,\n            color: moonConfig.colors.moon,\n            forceUseBackgroundColor: false\n        });\n\n        MoonSvg.EllipseParams memory ellipse2 = MoonSvg.EllipseParams({\n            cx: 0,\n            cy: moonConfig.moonRadius,\n            rx: moonConfig.moonRadius,\n            ry: moonConfig.moonRadius,\n            color: moonConfig.colors.moon,\n            forceUseBackgroundColor: false\n        });\n\n        // Round to nearest multiple of 10000, which ensures that progressScaled will be properly rounded rather than having truncation occur during integer division.\n        uint256 progressScaled = MoonCalculations.roundToNearestMultiple(\n            progressOutOf10000 * moonConfig.moonRadius,\n            10000\n        ) / 10000;\n\n        if (phase == MoonCalculations.MoonPhase.WANING_GIBBOUS) {\n            svg1.x = 0;\n            // Subtract 1 from svg2.x, add 1 to svg2.width, add 1 to ellipse2.cx to ensure smooth border between ellipses\n            svg2.x = moonConfig.moonRadius - 1;\n            svg2.width += 1;\n\n            ellipse1.cx = moonConfig.moonRadius;\n            ellipse1.rx = moonConfig.moonRadius;\n            ellipse2.cx = 1;\n            ellipse2.rx = moonConfig.moonRadius - progressScaled;\n        } else if (phase == MoonCalculations.MoonPhase.WANING_CRESCENT) {\n            svg1.x = 0;\n            svg2.x = 0;\n\n            // Add 1 to svg2.width to ensure smooth border between ellipses\n            svg2.width += 1;\n\n            ellipse1.cx = moonConfig.moonRadius;\n            ellipse1.rx = moonConfig.moonRadius;\n            ellipse2.cx = moonConfig.moonRadius;\n            ellipse2.rx = progressScaled;\n            ellipse2.forceUseBackgroundColor = true;\n        } else if (phase == MoonCalculations.MoonPhase.WAXING_CRESCENT) {\n            svg1.x = moonConfig.moonRadius;\n            // Subtract 1 from svg2.x, add 1 to ellipse2.cx, add 1 to ellipse2.rx to ensure smooth border between ellipses\n            svg2.x = moonConfig.moonRadius - 1;\n            svg2.width += 1;\n\n            ellipse1.cx = 0;\n            ellipse1.rx = moonConfig.moonRadius;\n            ellipse2.cx = 1;\n            ellipse2.rx = moonConfig.moonRadius - progressScaled + 1;\n            ellipse2.forceUseBackgroundColor = true;\n        } else if (phase == MoonCalculations.MoonPhase.WAXING_GIBBOUS) {\n            svg1.x = 0;\n            svg2.x = moonConfig.moonRadius;\n\n            // Add 1 to svg1.width to ensure smooth border between ellipses\n            svg1.width += 1;\n\n            ellipse1.cx = moonConfig.moonRadius;\n            ellipse1.rx = progressScaled;\n            ellipse2.cx = 0;\n            ellipse2.rx = moonConfig.moonRadius;\n        }\n\n        // Add svg offsets\n        svg1.x += moonConfig.xOffset;\n        svg2.x += moonConfig.xOffset;\n        svg1.y += moonConfig.yOffset;\n        svg2.y += moonConfig.yOffset;\n\n        return\n            MoonSvg.generateMoon(\n                MoonSvg.RectParams({\n                    color: moonConfig.colors.background,\n                    gradientColor: moonConfig.colors.backgroundGradientColor,\n                    width: moonConfig.viewWidth,\n                    height: moonConfig.viewHeight\n                }),\n                svg1,\n                svg2,\n                ellipse1,\n                ellipse2,\n                MoonSvg.BorderParams({\n                    radius: moonConfig.borderRadius,\n                    width: moonConfig.borderWidth,\n                    borderType: moonConfig.borderType,\n                    color: moonConfig.colors.border\n                }),\n                alienArt,\n                alienArtMoonFilter\n            );\n    }\n\n    function renderWithTimestamp(\n        bytes32 moonSeed,\n        // UTC timestamp.\n        uint256 timestamp,\n        string memory alienArt,\n        string memory alienArtFilter\n    ) internal pure returns (string memory) {\n        (\n            MoonCalculations.MoonPhase phase,\n            uint256 progressOutOf10000\n        ) = MoonCalculations.timestampToPhase(timestamp);\n        return\n            _render(\n                moonSeed,\n                phase,\n                progressOutOf10000,\n                alienArt,\n                alienArtFilter\n            );\n    }\n}\n"
24     },
25     "src/moon/MoonSvg.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./SVG.sol\";\n\n/// @title MoonSvg\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary MoonSvg {\n    struct SvgContainerParams {\n        uint16 x;\n        uint16 y;\n        uint16 width;\n        uint16 height;\n    }\n\n    struct EllipseParams {\n        uint16 cx;\n        uint16 cy;\n        uint256 rx;\n        uint16 ry;\n        string color;\n        bool forceUseBackgroundColor;\n    }\n\n    struct RectParams {\n        uint16 width;\n        uint16 height;\n        string color;\n        string gradientColor;\n    }\n\n    struct BorderParams {\n        uint16 radius;\n        uint16 width;\n        string borderType;\n        string color;\n    }\n\n    function getBackgroundRadialGradientDefinition(\n        RectParams memory rectParams,\n        uint256 moonVerticalRadius\n    ) internal pure returns (string memory) {\n        return\n            svg.radialGradient(\n                string.concat(\n                    svg.prop(\"id\", \"brG\"),\n                    // Set radius to 75% to smooth out the radial gradient against\n                    // the background and moon color\n                    svg.prop(\"r\", \"75%\")\n                ),\n                string.concat(\n                    svg.stop(\n                        string.concat(\n                            svg.prop(\n                                \"offset\",\n                                string.concat(\n                                    Utils.uint2str(\n                                        // Ensure that the gradient has the rect color up to at least the moon radius\n                                        // Note: the reason we do moon radius * 100 * 3 / 2 is because\n                                        // we multiply by 100 to get a percent, then multiply by 3 and divide by 2\n                                        // to get ~1.5 * moon radius, which is sufficiently large given the background radial\n                                        // gradient radius is being scaled by 75% (50% would be normal size, 75% is scaled up),\n                                        // which smooths out the gradient and reduces the presence of a color band\n                                        (((moonVerticalRadius * 100) * 3) / 2) /\n                                            rectParams.height\n                                    ),\n                                    \"%\"\n                                )\n                            ),\n                            svg.prop(\"stop-color\", rectParams.color)\n                        )\n                    ),\n                    svg.stop(\n                        string.concat(\n                            svg.prop(\"offset\", \"100%\"),\n                            svg.prop(\"stop-color\", rectParams.gradientColor)\n                        )\n                    )\n                )\n            );\n    }\n\n    function getMoonFilterDefinition(uint16 moonRadiusY)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint16 position = moonRadiusY * 2;\n        return\n            svg.filter(\n                string.concat(svg.prop(\"id\", \"mF\")),\n                string.concat(\n                    svg.feSpecularLighting(\n                        string.concat(\n                            svg.prop(\"result\", \"out\"),\n                            svg.prop(\"specularExponent\", \"20\"),\n                            svg.prop(\"lighting-color\", \"#bbbbbb\")\n                        ),\n                        svg.fePointLight(\n                            string.concat(\n                                svg.prop(\"x\", position),\n                                svg.prop(\"y\", position),\n                                svg.prop(\"z\", position)\n                            )\n                        )\n                    ),\n                    svg.feComposite(\n                        string.concat(\n                            svg.prop(\"in\", \"SourceGraphic\"),\n                            svg.prop(\"in2\", \"out\"),\n                            svg.prop(\"operator\", \"arithmetic\"),\n                            svg.prop(\"k1\", \"0\"),\n                            svg.prop(\"k2\", \"1\"),\n                            svg.prop(\"k3\", \"1\"),\n                            svg.prop(\"k4\", \"0\")\n                        )\n                    )\n                )\n            );\n    }\n\n    function getMoonFilterMask(\n        SvgContainerParams memory svg1,\n        SvgContainerParams memory svg2,\n        EllipseParams memory ellipse1,\n        EllipseParams memory ellipse2,\n        RectParams memory rect\n    ) internal pure returns (string memory) {\n        return\n            svg.mask(\n                svg.prop(\"id\", \"mfM\"),\n                string.concat(\n                    svg.rect(\n                        string.concat(\n                            svg.prop(\"width\", rect.width),\n                            svg.prop(\"height\", rect.height),\n                            svg.prop(\"fill\", \"#000\")\n                        )\n                    ),\n                    getEllipseElt(\n                        svg1,\n                        ellipse1,\n                        // Black rect for masking purposes; where this rect is visible will be hidden\n                        \"#000\",\n                        // White ellipse for masking purposes; where this ellipse is visible will be shown\n                        \"#FFF\"\n                    ),\n                    getEllipseElt(\n                        svg2,\n                        ellipse2,\n                        // Black rect for masking purposes; where this rect is visible will be hidden\n                        \"#000\",\n                        // White ellipse for masking purposes; where this ellipse is visible will be shown\n                        \"#FFF\"\n                    )\n                )\n            );\n    }\n\n    function getEllipseElt(\n        SvgContainerParams memory svgContainer,\n        EllipseParams memory ellipse,\n        string memory rectBackgroundColor,\n        string memory ellipseColor\n    ) internal pure returns (string memory) {\n        return\n            svg.svgTag(\n                string.concat(\n                    svg.prop(\"x\", svgContainer.x),\n                    svg.prop(\"y\", svgContainer.y),\n                    svg.prop(\"height\", svgContainer.height),\n                    svg.prop(\"width\", svgContainer.width)\n                ),\n                svg.ellipse(\n                    string.concat(\n                        svg.prop(\"cx\", ellipse.cx),\n                        svg.prop(\"cy\", ellipse.cy),\n                        svg.prop(\"rx\", ellipse.rx),\n                        svg.prop(\"ry\", ellipse.ry),\n                        svg.prop(\n                            \"fill\",\n                            ellipse.forceUseBackgroundColor\n                                ? rectBackgroundColor\n                                : ellipseColor\n                        )\n                    )\n                )\n            );\n    }\n\n    function getBorderStyleProp(BorderParams memory border)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            svg.prop(\n                \"style\",\n                string.concat(\n                    \"outline:\",\n                    Utils.uint2str(border.width),\n                    \"px \",\n                    border.borderType,\n                    \" \",\n                    border.color,\n                    \";outline-offset:-\",\n                    Utils.uint2str(border.width),\n                    \"px;border-radius:\",\n                    Utils.uint2str(border.radius),\n                    \"%\"\n                )\n            );\n    }\n\n    function getMoonBackgroundMaskDefinition(\n        RectParams memory rect,\n        uint256 moonRadius\n    ) internal pure returns (string memory) {\n        return\n            svg.mask(\n                svg.prop(\"id\", \"mbM\"),\n                string.concat(\n                    svg.rect(\n                        string.concat(\n                            svg.prop(\"width\", rect.width),\n                            svg.prop(\"height\", rect.height),\n                            // Everything under a white pixel will be visible\n                            svg.prop(\"fill\", \"#FFF\")\n                        )\n                    ),\n                    svg.circle(\n                        string.concat(\n                            svg.prop(\"cx\", rect.width / 2),\n                            svg.prop(\"cy\", rect.height / 2),\n                            // Add 1 to moon radius as slight buffer.\n                            svg.prop(\"r\", moonRadius + 1)\n                        )\n                    )\n                )\n            );\n    }\n\n    function getDefinitions(\n        RectParams memory rect,\n        SvgContainerParams memory svg1,\n        SvgContainerParams memory svg2,\n        EllipseParams memory ellipse1,\n        EllipseParams memory ellipse2,\n        string memory alienArtMoonFilterDefinition\n    ) internal pure returns (string memory) {\n        return\n            svg.defs(\n                string.concat(\n                    getBackgroundRadialGradientDefinition(rect, ellipse1.ry),\n                    bytes(alienArtMoonFilterDefinition).length > 0\n                        ? alienArtMoonFilterDefinition\n                        : getMoonFilterDefinition(ellipse1.ry),\n                    getMoonBackgroundMaskDefinition(rect, ellipse1.ry),\n                    getMoonFilterMask(svg1, svg2, ellipse1, ellipse2, rect)\n                )\n            );\n    }\n\n    function getMoonSvgProps(uint16 borderRadius)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string.concat(\n                svg.prop(\"xmlns\", \"http://www.w3.org/2000/svg\"),\n                // Include id so that the moon element can be accessed by JS\n                svg.prop(\"id\", \"moon\"),\n                svg.prop(\"height\", \"100%\"),\n                svg.prop(\"viewBox\", \"0 0 200 200\"),\n                svg.prop(\n                    \"style\",\n                    string.concat(\n                        \"border-radius:\",\n                        Utils.uint2str(borderRadius),\n                        \"%;max-height:100vh\"\n                    )\n                )\n            );\n    }\n\n    function generateMoon(\n        RectParams memory rect,\n        SvgContainerParams memory svg1,\n        SvgContainerParams memory svg2,\n        EllipseParams memory ellipse1,\n        EllipseParams memory ellipse2,\n        BorderParams memory border,\n        string memory alienArt,\n        string memory alienArtMoonFilterDefinition\n    ) internal pure returns (string memory) {\n        string memory ellipse1elt = getEllipseElt(\n            svg1,\n            ellipse1,\n            rect.color,\n            ellipse1.color\n        );\n        string memory ellipse2elt = getEllipseElt(\n            svg2,\n            ellipse2,\n            rect.color,\n            ellipse2.color\n        );\n\n        string memory rectProps = string.concat(\n            svg.prop(\n                \"fill\",\n                bytes(rect.gradientColor).length > 0 ? \"url(#brG)\" : rect.color\n            ),\n            svg.prop(\"width\", rect.width),\n            svg.prop(\"height\", rect.height),\n            svg.prop(\"rx\", string.concat(Utils.uint2str(border.radius), \"%\")),\n            svg.prop(\"ry\", string.concat(Utils.uint2str(border.radius), \"%\"))\n        );\n\n        string memory definitions = getDefinitions(\n            rect,\n            svg1,\n            svg2,\n            ellipse1,\n            ellipse2,\n            alienArtMoonFilterDefinition\n        );\n\n        return\n            svg.svgTag(\n                getMoonSvgProps(border.radius),\n                string.concat(\n                    definitions,\n                    svg.svgTag(\n                        svg.NULL,\n                        string.concat(\n                            svg.rect(\n                                string.concat(\n                                    rectProps,\n                                    getBorderStyleProp(border)\n                                )\n                            ),\n                            // Intentionally put alien art behind the moon in svg ordering\n                            svg.g(\n                                // Apply mask to block out the moon area from alien art,\n                                // which is necessary in order for the moon to be clearly visible when displayed\n                                svg.prop(\"mask\", \"url(#mbM)\"),\n                                alienArt\n                            ),\n                            svg.g(\n                                string.concat(\n                                    // Apply filter to moon\n                                    svg.prop(\"filter\", \"url(#mF)\"),\n                                    // Apply mask to ensure filter only applies to the visible portion of the moon\n                                    svg.prop(\"mask\", \"url(#mfM)\")\n                                ),\n                                string.concat(ellipse1elt, ellipse2elt)\n                            )\n                        )\n                    )\n                )\n            );\n    }\n}\n"
27     },
28     "src/moon/MoonConfig.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {LibPRNG} from \"../utils/LibPRNG.sol\";\nimport {Traits} from \"../utils/Traits.sol\";\nimport {Utils} from \"../utils/Utils.sol\";\nimport {MoonImageConfig, MoonImageColors} from \"./MoonStructs.sol\";\n\n/// @title MoonConfig\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary MoonConfig {\n    using LibPRNG for LibPRNG.PRNG;\n\n    function getMoonSeed(uint256 tokenId) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(tokenId, block.difficulty));\n    }\n\n    function getFrameTraits(\n        MoonImageConfig memory moonConfig\n    ) internal pure returns (string memory) {\n        bool hasFrame = moonConfig.borderWidth > 0;\n        return\n            string.concat(\n                Traits.getTrait(\n                    \"Frame roundness\",\n                    moonConfig.borderRadius,\n                    true\n                ),\n                Traits.getTrait(\n                    \"Frame thickness\",\n                    moonConfig.borderWidth,\n                    true\n                ),\n                Traits.getTrait(\n                    \"Frame type\",\n                    hasFrame ? moonConfig.borderType : \"Invisible\",\n                    true\n                ),\n                hasFrame ? Traits.getTrait(\n                    \"Frame tint\",\n                    uint256(moonConfig.colors.borderSaturation),\n                    true\n                ) : \"\"\n            );\n    }\n\n    function getMoonTraits(\n        bytes32 moonSeed,\n        string memory alienArtTrait,\n        string memory alienArtName,\n        string memory alienArtAddressStr,\n        bool isDefaultAlienArt\n    ) internal pure returns (string memory) {\n        MoonImageConfig memory moonConfig = getMoonConfig(moonSeed);\n\n        // Evaluate groups of traits to (1) better organize code (2) avoid stack too deep errors\n        string memory frameTraits = getFrameTraits(moonConfig);\n\n        string memory alienArtAllTraits = string.concat(\n            Traits.getTrait(\n                \"Is default alien art\",\n                // This needs to be included as a boolean rather than a check\n                // agains the default name since the name can be impersonated by another contract\n                isDefaultAlienArt ? \"Yes\" : \"No\",\n                true\n            ),\n            // Include alien art address so others can discover alien art\n            // used by different moons\n            Traits.getTrait(\"Alien art address\", alienArtAddressStr, true),\n            Traits.getTrait(\n                \"Alien art\",\n                alienArtName,\n                // Include comma if alien art trait is defined\n                // by doing length of alienArtTrait comparison\n                bytes(alienArtTrait).length > 0\n            ),\n            alienArtTrait\n        );\n\n        return\n            string.concat(\n                \"[\",\n                Traits.getTrait(\n                    \"Moon hue\",\n                    uint256(moonConfig.colors.moonHue),\n                    true\n                ),\n                frameTraits,\n                Traits.getTrait(\n                    \"Space darkness\",\n                    uint256(moonConfig.colors.backgroundLightness),\n                    true\n                ),\n                Traits.getTrait(\n                    \"Has space gradient\",\n                    bytes(moonConfig.colors.backgroundGradientColor).length > 0\n                        ? \"Yes\"\n                        : \"No\",\n                    true\n                ),\n                alienArtAllTraits,\n                \"]\"\n            );\n    }\n\n    function getBorderType(LibPRNG.PRNG memory prng)\n        internal\n        pure\n        returns (string memory)\n    {\n        // Choose border type based on different weightings\n        uint256 psuedoRandomOutOf100 = prng.uniform(100);\n        if (psuedoRandomOutOf100 < 70) {\n            return \"solid\";\n        }\n        if (psuedoRandomOutOf100 < 90) {\n            return \"inset\";\n        }\n        return \"outset\";\n    }\n\n    function getMoonImageColors(LibPRNG.PRNG memory prng)\n        internal\n        pure\n        returns (MoonImageColors memory)\n    {\n        uint16 moonHue = uint16(prng.uniform(360));\n        uint8 borderSaturation = uint8(prng.uniform(71));\n        uint8 backgroundLightness = uint8(prng.uniform(11));\n\n        return\n            MoonImageColors({\n                moon: hslaString(moonHue, 50, 50),\n                moonHue: moonHue,\n                border: hslaString(moonHue, borderSaturation, 50),\n                borderSaturation: borderSaturation,\n                background: hslaString(0, 0, backgroundLightness),\n                backgroundLightness: backgroundLightness,\n                backgroundGradientColor: // Bias gradient to occur 33% of the time\n                prng.uniform(3) == 0\n                    ? hslaString(\n                        // Derive hue from moon hue\n                        moonHue,\n                        50,\n                        50\n                    )\n                    : \"\"\n            });\n    }\n\n    function getMoonConfig(bytes32 moonSeed)\n        internal\n        pure\n        returns (MoonImageConfig memory)\n    {\n        uint16 moonRadius = 32;\n        uint16 viewSize = 200;\n        uint16 offset = (viewSize - 2 * moonRadius) / 2;\n\n        LibPRNG.PRNG memory prng;\n        prng.seed(keccak256(abi.encodePacked(moonSeed, uint256(5))));\n\n        // Border radius can vary from 0 to 50%\n        uint16 borderRadius = prng.uniform(9) == 0 // 11% chance of having a circular border\n            ? 50 // Otherwise, choose a border radius between 0 and 5\n            : uint16(prng.uniform(6));\n\n        // Border width can vary from 0 to 4\n        uint16 borderWidth = uint16(prng.uniform(5));\n\n        MoonImageColors memory colors = getMoonImageColors(prng);\n        string memory borderType = getBorderType(prng);\n        \n        return\n            MoonImageConfig({\n                colors: colors,\n                moonRadius: moonRadius,\n                xOffset: offset,\n                yOffset: offset,\n                viewWidth: viewSize,\n                viewHeight: viewSize,\n                borderRadius: borderRadius,\n                borderWidth: borderWidth,\n                borderType: borderType\n            });\n    }\n\n    // Helpers\n\n    function hslaString(\n        uint16 hue,\n        uint8 saturation,\n        uint8 lightness\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"hsla(\",\n                Utils.uint2str(hue),\n                \",\",\n                Utils.uint2str(saturation),\n                \"%,\",\n                Utils.uint2str(lightness),\n                \"%,100%)\"\n            );\n    }\n}\n"
30     },
31     "src/interfaces/dynamicNftRegistry/DynamicNftRegistryInterface.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {OwnerPermissionedTokenRegistryInterface} from \"./OwnerPermissionedTokenRegistryInterface.sol\";\n\n/**\n * @title  DynamicNftRegistry\n * @author James Wenzel (emo.eth)\n * @notice Interface for an open registry for allowed updaters of token contracts to register that a (potentially\n *         off-chain) metadata update has occurred on-chain, inheriting from OwnerPermissionedTokenRegistryInterface.\n */\ninterface DynamicNftRegistryInterface is\n    OwnerPermissionedTokenRegistryInterface\n{\n    /**\n     * @notice update token's last modified timestamp to timestamp of current block\n     * @param tokenAddress address of the token contract\n     * @param tokenId that has been updated\n     * @param cooldownPeriod in seconds\n     */\n    function updateToken(\n        address tokenAddress,\n        uint256 tokenId,\n        uint64 cooldownPeriod,\n        bool invalidateCollectionOrders\n    ) external;\n\n    /**\n     * @notice update token's last modified timestamp to a timestamp in the past\n     * @param tokenAddress address of the token contract\n     * @param tokenId that has been updated\n     * @param timestamp specific timestamp when token was last updated\n     * @param cooldownPeriod in seconds\n     */\n    function updateToken(\n        address tokenAddress,\n        uint256 tokenId,\n        uint64 timestamp,\n        uint64 cooldownPeriod,\n        bool invalidateCollectionOrders\n    ) external;\n}\n"
33     },
34     "src/interfaces/alienArt/AlienArtBase.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC165} from \"../ext/IERC165.sol\";\nimport {MoonImageConfig} from \"../../moon/MoonStructs.sol\";\n\n/// @title AlienArtBase\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\n/// @notice Alien Art is an on-chain NFT composability standard for on-chain art and traits.\nabstract contract AlienArtBase is IERC165 {\n    // Define functions that alien art contracts can override. These intentionally\n    // use function state mutability as view to allow for reading on-chain data.\n\n    /// @notice get art name.\n    /// @return art name.\n    function getArtName() external view virtual returns (string memory);\n\n    /// @notice get alien art image for a particular token.\n    /// @param tokenId token id.\n    /// @param moonSeed moon seed.\n    /// @param moonImageConfig moon image config.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return alien art image.\n    function getArt(\n        uint256 tokenId,\n        bytes32 moonSeed,\n        MoonImageConfig calldata moonImageConfig,\n        uint256 rotationInDegrees\n    ) external view virtual returns (string memory);\n\n    /// @notice get moon filter for a particular token.\n    /// @param tokenId token id.\n    /// @param moonSeed moon seed.\n    /// @param moonImageConfig moon image config.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return moon filter.\n    function getMoonFilter(\n        uint256 tokenId,\n        bytes32 moonSeed,\n        MoonImageConfig calldata moonImageConfig,\n        uint256 rotationInDegrees\n    ) external view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /// @notice get alien art traits for a particular token.\n    /// @param tokenId token id.\n    /// @param moonSeed moon seed.\n    /// @param moonImageConfig moon image config.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return alien art traits.\n    function getTraits(\n        uint256 tokenId,\n        bytes32 moonSeed,\n        MoonImageConfig calldata moonImageConfig,\n        uint256 rotationInDegrees\n    ) external view virtual returns (string memory) {\n        return \"\";\n    }\n}\n"
36     },
37     "src/alienArt/constellation/AlienArtConstellation.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {DynamicNftRegistryInterface} from \"../../interfaces/dynamicNftRegistry/DynamicNftRegistryInterface.sol\";\nimport {AlienArtBase} from \"../../interfaces/alienArt/AlienArtBase.sol\";\nimport {MoonImageConfig, MoonImageColors} from \"../../moon/MoonStructs.sol\";\nimport {AlienArtConstellationEventsAndErrors} from \"./AlienArtConstellationEventsAndErrors.sol\";\nimport {ConstellationLib} from \"./ConstellationLib.sol\";\nimport {IERC165} from \"../../interfaces/ext/IERC165.sol\";\nimport {IERC721} from \"../../interfaces/ext/IERC721.sol\";\nimport {ERC1155} from \"../../ext/ERC1155.sol\";\nimport {Ownable} from \"../../ext/Ownable.sol\";\nimport {Utils} from \"../../utils/Utils.sol\";\nimport {Traits} from \"../../utils/Traits.sol\";\nimport {LibPRNG} from \"../../utils/LibPRNG.sol\";\nimport {svg} from \"./SVG.sol\";\n\n/// @title AlienArtConstellation\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\n/// @notice On-chain constellation NFTs that conform to the Alien Art (AlienArtBase) on-chain NFT composability standard and support swapping constellations between Non-Fungible Moon NFTs.\ncontract AlienArtConstellation is\n    ERC1155,\n    AlienArtBase,\n    AlienArtConstellationEventsAndErrors,\n    Ownable\n{\n    using LibPRNG for LibPRNG.PRNG;\n\n    struct ConstellationParams {\n        Constellation constellationType;\n        // In degrees\n        uint16 rotation;\n        bool fluxConstellation;\n    }\n\n    enum Constellation {\n        LITTLE_DIPPER,\n        BIG_DIPPER,\n        // Zodiac\n        ARIES,\n        PISCES,\n        AQUARIUS,\n        CAPRICORNUS,\n        SAGITTARIUS,\n        OPHIUCHUS,\n        SCORPIUS,\n        LIBRA,\n        VIRGO,\n        LEO,\n        CANCER,\n        GEMINI,\n        TAURUS,\n        NONE\n    }\n\n    // These constants ensure that Etherscan/etc can read the name and symbol for this contract\n    string public constant name = \"Constellations\";\n    string public constant symbol = \"CLN\";\n\n    uint16 internal constant DEFAULT_VIEW_SIZE = 200;\n    uint16 internal constant DEFAULT_MOON_RADIUS = 32;\n\n    address internal moonAddress;\n\n    mapping(uint256 => uint256) public moonTokenIdToConstellationTokenId;\n    uint16 internal constant RANDOMNESS_FACTOR = 1337;\n\n    address dynamicNftRegistryAddress;\n    uint64 internal constant COOLDOWN_PERIOD = 120;\n\n    /// @notice set moon address.\n    /// @param _moonAddress moon address.\n    function setMoonAddress(address _moonAddress) external onlyOwner {\n        if (moonAddress != address(0)) {\n            revert MoonAddressAlreadySet();\n        }\n        moonAddress = _moonAddress;\n    }\n\n    /// @notice swap constellation associated moon 1 with the constellation associated with moon 2.\n    /// Both moons must be owned by the same user.\n    /// @param moon1 moon 1 token id.\n    /// @param moon2 moon 2 token id.\n    function swapConstellations(uint256 moon1, uint256 moon2) external {\n        // Checks\n\n        // Check both moons are owned by this account\n        if (\n            IERC721(moonAddress).ownerOf(moon1) != msg.sender ||\n            IERC721(moonAddress).ownerOf(moon2) != msg.sender\n        ) {\n            revert SwapMoonsOwnerMustBeMsgSender();\n        }\n\n        // Effects\n\n        // Perform swap\n        uint256 originalMoon1Constellation = moonTokenIdToConstellationTokenId[\n            moon1\n        ];\n        moonTokenIdToConstellationTokenId[\n            moon1\n        ] = moonTokenIdToConstellationTokenId[moon2];\n        moonTokenIdToConstellationTokenId[moon2] = originalMoon1Constellation;\n\n        // Emit event indicating swap occurred\n        emit SwapConstellations(\n            msg.sender,\n            moon1,\n            moon2,\n            moonTokenIdToConstellationTokenId[moon1],\n            moonTokenIdToConstellationTokenId[moon2]\n        );\n\n        // Interactions\n        if (dynamicNftRegistryAddress != address(0)) {\n            // Call update token on zone registry (if defined) for both moons\n            // and do not invalidate collection orders.\n            DynamicNftRegistryInterface(dynamicNftRegistryAddress).updateToken(\n                moonAddress,\n                moon1,\n                COOLDOWN_PERIOD,\n                false\n            );\n            DynamicNftRegistryInterface(dynamicNftRegistryAddress).updateToken(\n                moonAddress,\n                moon2,\n                COOLDOWN_PERIOD,\n                false\n            );\n        }\n    }\n\n    /// @notice get constellation type that corresponds to a particular moon token id when the constellation is to be minted\n    /// @param moonTokenId moon token id\n    /// @return Constellation\n    function getConstellationTypeForMoonTokenIdAtMint(uint256 moonTokenId)\n        public\n        view\n        returns (Constellation)\n    {\n        LibPRNG.PRNG memory prng;\n        prng.seed(\n            keccak256(\n                abi.encodePacked(\n                    moonTokenId,\n                    block.difficulty,\n                    RANDOMNESS_FACTOR\n                )\n            )\n        );\n\n        uint256 randomFrom0To99 = prng.uniform(100);\n        if (randomFrom0To99 <= 1) {\n            // 2% chance of returning little dipper\n            return Constellation.LITTLE_DIPPER;\n        }\n        if (randomFrom0To99 == 2) {\n            // 1% chance of returning big dipper\n            return Constellation.BIG_DIPPER;\n        }\n\n        // Length of zodiac constellation values and None is the value of the last enum - first zodiac constellation + 1 for the none value\n        uint256 totalZodiacConstellations = uint256(Constellation.NONE) -\n            uint256(Constellation.ARIES) +\n            1;\n        // Return any value from the zodiac constellations or None.\n        return\n            Constellation(\n                prng.uniform(totalZodiacConstellations) +\n                    uint256(Constellation.ARIES)\n            );\n    }\n\n    /// @notice get art name for this alien art contract.\n    /// @return art name.\n    function getArtName() external pure override returns (string memory) {\n        return name;\n    }\n\n    /// @notice get on-chain Constellation art image, adhering to Alien Art abstract class.\n    /// @param tokenId moon token id.\n    /// @param moonSeed moon seed.\n    /// @param moonImageConfig moon image config.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return on-chain Constellation SVG.\n    function getArt(\n        uint256 tokenId,\n        bytes32 moonSeed,\n        MoonImageConfig calldata moonImageConfig,\n        uint256 rotationInDegrees\n    ) external view override returns (string memory) {\n        Constellation constellation = Constellation(\n            moonTokenIdToConstellationTokenId[tokenId]\n        );\n        return\n            getArtForConstellation(\n                constellation,\n                moonSeed,\n                moonImageConfig,\n                rotationInDegrees\n            );\n    }\n\n    // For a given moon seed, returns bool indicating if flux constellation should be used, bool indicating if\n    // moon color for star color should be used\n    function getConstellationUseFluxAndUseMoonColor(bytes32 moonSeed)\n        internal\n        pure\n        returns (bool, bool)\n    {\n        if (moonSeed == bytes32(0)) {\n            // If moon seed is bytes32(0), return false for both use flux and use moon color for star color\n            return (false, false);\n        }\n        LibPRNG.PRNG memory prng;\n        prng.seed(moonSeed);\n        return (prng.uniform(4) == 0, prng.uniform(20) == 0);\n    }\n\n    /// @notice get on-chain Constellation SVG.\n    /// @param constellation constellation to get SVG for.\n    /// @param moonSeed moon seed of moon mapping to constellation.\n    /// @param moonImageConfig moon image config.\n    /// @param rotationInDegrees rotation in degrees.\n    /// @return Constellation SVG.\n    function getArtForConstellation(\n        Constellation constellation,\n        bytes32 moonSeed,\n        MoonImageConfig memory moonImageConfig,\n        uint256 rotationInDegrees\n    ) public pure returns (string memory) {\n        (\n            bool useFlux,\n            bool useMoonColorForStarColor\n        ) = getConstellationUseFluxAndUseMoonColor(moonSeed);\n        return\n            getConstellation(\n                ConstellationParams({\n                    constellationType: constellation,\n                    rotation: uint16(rotationInDegrees),\n                    fluxConstellation: useFlux\n                }),\n                moonImageConfig.viewWidth,\n                moonImageConfig.viewHeight,\n                useMoonColorForStarColor\n                    ? moonImageConfig.colors.moon\n                    : \"#FDFD96\",\n                moonSeed\n            );\n    }\n\n    /// @notice get traits for Constellation.\n    /// @param tokenId token id.\n    /// @param moonSeed moon seed.\n    /// @return traits.\n    function getTraits(\n        uint256 tokenId,\n        bytes32 moonSeed,\n        MoonImageConfig calldata,\n        uint256\n    ) external view override returns (string memory) {\n        (\n            bool useFlux,\n            bool useMoonColorForStarColor\n        ) = getConstellationUseFluxAndUseMoonColor(moonSeed);\n        return\n            string.concat(\n                Traits.getTrait(\n                    \"Star brightness\",\n                    useFlux ? \"Flux\" : \"Fixed\",\n                    true\n                ),\n                Traits.getTrait(\n                    \"Star color\",\n                    useMoonColorForStarColor ? \"Moon\" : \"Classic\",\n                    true\n                ),\n                _getTraitForConstellation(\n                    Constellation(moonTokenIdToConstellationTokenId[tokenId])\n                )\n            );\n    }\n\n    function _getTraitForConstellation(Constellation constellation)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            Traits.getTrait(\n                \"Constellation\",\n                getConstellationTypeString(constellation),\n                false\n            );\n    }\n\n    function getConstellationTypeString(Constellation constellation)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (constellation == Constellation.LITTLE_DIPPER) {\n            return \"Little dipper\";\n        }\n        if (constellation == Constellation.BIG_DIPPER) {\n            return \"Big dipper\";\n        }\n        if (constellation == Constellation.ARIES) {\n            return \"Aries\";\n        }\n        if (constellation == Constellation.PISCES) {\n            return \"Pisces\";\n        }\n        if (constellation == Constellation.AQUARIUS) {\n            return \"Aquarius\";\n        }\n        if (constellation == Constellation.CAPRICORNUS) {\n            return \"Capricornus\";\n        }\n        if (constellation == Constellation.SAGITTARIUS) {\n            return \"Sagittarius\";\n        }\n        if (constellation == Constellation.OPHIUCHUS) {\n            return \"Ophiuchus\";\n        }\n        if (constellation == Constellation.SCORPIUS) {\n            return \"Scorpius\";\n        }\n        if (constellation == Constellation.LIBRA) {\n            return \"Libra\";\n        }\n        if (constellation == Constellation.VIRGO) {\n            return \"Virgo\";\n        }\n        if (constellation == Constellation.LEO) {\n            return \"Leo\";\n        }\n        if (constellation == Constellation.CANCER) {\n            return \"Cancer\";\n        }\n        if (constellation == Constellation.GEMINI) {\n            return \"Gemini\";\n        }\n        if (constellation == Constellation.TAURUS) {\n            return \"Taurus\";\n        }\n        return \"None\";\n    }\n\n    function getConstellation(\n        ConstellationParams memory constellation,\n        uint256 rectWidth,\n        uint256 rectHeight,\n        string memory starColor,\n        bytes32 moonSeed\n    ) internal pure returns (string memory) {\n        if (constellation.constellationType == Constellation.NONE) {\n            return \"\";\n        }\n\n        ConstellationLib.GenerateConstellationParams\n            memory params = ConstellationLib.GenerateConstellationParams(\n                0,\n                0,\n                constellation.rotation,\n                uint16(rectWidth) / 2,\n                uint16(rectHeight) / 2,\n                starColor,\n                constellation.fluxConstellation,\n                moonSeed\n            );\n\n        if (constellation.constellationType == Constellation.LITTLE_DIPPER) {\n            params.x = 60;\n            params.y = 150;\n            return ConstellationLib.getLittleDipper(params);\n        }\n        if (constellation.constellationType == Constellation.BIG_DIPPER) {\n            params.x = 89;\n            params.y = 13;\n            return ConstellationLib.getBigDipper(params);\n        }\n        if (constellation.constellationType == Constellation.ARIES) {\n            params.x = 75;\n            params.y = 40;\n            return ConstellationLib.getAries(params);\n        }\n        if (constellation.constellationType == Constellation.PISCES) {\n            params.x = 25;\n            params.y = 147;\n            return ConstellationLib.getPisces(params);\n        }\n        if (constellation.constellationType == Constellation.AQUARIUS) {\n            params.x = 35;\n            params.y = 156;\n            return ConstellationLib.getAquarius(params);\n        }\n        if (constellation.constellationType == Constellation.CAPRICORNUS) {\n            params.x = 35;\n            params.y = 145;\n            return ConstellationLib.getCapricornus(params);\n        }\n        if (constellation.constellationType == Constellation.SAGITTARIUS) {\n            params.x = 35;\n            params.y = 160;\n            return ConstellationLib.getSagittarius(params);\n        }\n        if (constellation.constellationType == Constellation.OPHIUCHUS) {\n            params.x = 35;\n            params.y = 160;\n            return ConstellationLib.getOphiuchus(params);\n        }\n        if (constellation.constellationType == Constellation.SCORPIUS) {\n            params.x = 35;\n            params.y = 140;\n            return ConstellationLib.getScorpius(params);\n        }\n        if (constellation.constellationType == Constellation.LIBRA) {\n            params.x = 75;\n            params.y = 167;\n            return ConstellationLib.getLibra(params);\n        }\n        if (constellation.constellationType == Constellation.VIRGO) {\n            params.x = 15;\n            params.y = 120;\n            return ConstellationLib.getVirgo(params);\n        }\n        if (constellation.constellationType == Constellation.LEO) {\n            params.x = 55;\n            params.y = 165;\n            return ConstellationLib.getLeo(params);\n        }\n        if (constellation.constellationType == Constellation.CANCER) {\n            params.x = 110;\n            params.y = 185;\n            return ConstellationLib.getCancer(params);\n        }\n        if (constellation.constellationType == Constellation.GEMINI) {\n            params.x = 75;\n            params.y = 152;\n            return ConstellationLib.getGemini(params);\n        }\n        if (constellation.constellationType == Constellation.TAURUS) {\n            params.x = 67;\n            params.y = 155;\n            return ConstellationLib.getTaurus(params);\n        }\n\n        return \"\";\n    }\n\n    /// @notice get standalone Constellation, which is\n    /// an on-chain Constellation SVG that can properly be rendered standalone (without being embedded in another SVG).\n    /// @param constellation constellation.\n    /// @param moonSeed moon seed of moon mapping to constellation.\n    /// @param config moon image config.\n    /// @return standalone Constellation SVG.\n    function getStandaloneConstellation(\n        Constellation constellation,\n        bytes32 moonSeed,\n        MoonImageConfig memory config\n    ) public pure returns (string memory) {\n        return\n            svg.svgTag(\n                string.concat(\n                    svg.prop(\"xmlns\", \"http://www.w3.org/2000/svg\"),\n                    svg.prop(\"width\", \"400\"),\n                    svg.prop(\"height\", \"400\"),\n                    svg.prop(\"viewBox\", \"0 0 200 200\")\n                ),\n                string.concat(\n                    svg.rect(\n                        string.concat(\n                            svg.prop(\"width\", \"200\"),\n                            svg.prop(\"height\", \"200\"),\n                            svg.prop(\"fill\", \"#0e1111\")\n                        )\n                    ),\n                    getArtForConstellation(constellation, moonSeed, config, 0)\n                )\n            );\n    }\n\n    /// @notice burn and mint constellation for particular moon. Only callable by moon contract.\n    /// @param moonTokenId moon token id.\n    function burnAndMint(uint256 moonTokenId) external {\n        // Only moon contract can burn\n        if (msg.sender != moonAddress) {\n            revert MsgSenderNotMoonAddress();\n        }\n\n        // Burn existing Constellation token\n        _burn(msg.sender, moonTokenIdToConstellationTokenId[moonTokenId], 1);\n        // Mint new token\n        mint(moonTokenId, 1);\n    }\n\n    /// @notice mint Constellation NFTs corresponding with moons.\n    /// @param startMoonTokenId start moon token id.\n    /// @param numMoonsMinted number of moons minted.\n    function mint(uint256 startMoonTokenId, uint256 numMoonsMinted) public {\n        // Only moon contract can mint\n        if (msg.sender != moonAddress) {\n            revert MsgSenderNotMoonAddress();\n        }\n\n        for (\n            uint256 moonTokenId = startMoonTokenId;\n            moonTokenId < startMoonTokenId + numMoonsMinted;\n            ++moonTokenId\n        ) {\n            // Determine constellation to mint based on moon token\n            uint256 constellationIdx = uint256(\n                getConstellationTypeForMoonTokenIdAtMint(moonTokenId)\n            );\n            // Map moon token id to this constellation token id (index)\n            moonTokenIdToConstellationTokenId[moonTokenId] = constellationIdx;\n            // Mint to msg.sender, which is moon contract since we only\n            // allow minting by moon contract\n            _mint(msg.sender, constellationIdx, 1, \"\");\n        }\n    }\n\n    /// @notice get fully on-chain uri for a particular token.\n    /// @param tokenId token id, which is an index in Constellation enum.\n    /// @return Constellation uri for tokenId.\n    function uri(uint256 tokenId)\n        public\n        view\n        virtual\n        override(ERC1155)\n        returns (string memory)\n    {\n        if (tokenId > uint256(Constellation.NONE)) {\n            revert InvalidConstellationIndex();\n        }\n\n        // Only define fields relevant for generating image for uri\n        MoonImageConfig memory moonImageConfig;\n        moonImageConfig.viewWidth = DEFAULT_VIEW_SIZE;\n        moonImageConfig.viewHeight = DEFAULT_VIEW_SIZE;\n        moonImageConfig.moonRadius = DEFAULT_MOON_RADIUS;\n\n        string memory constellationSvg = Utils.svgToImageURI(\n            getStandaloneConstellation(\n                Constellation(tokenId),\n                bytes32(0),\n                moonImageConfig\n            )\n        );\n        return\n            Utils.formatTokenURI(\n                constellationSvg,\n                constellationSvg,\n                getConstellationTypeString(Constellation(tokenId)),\n                \"Constellations are on-chain constellation NFTs. Constellations are on-chain art owned by on-chain art; Constellations are all owned by Non-Fungible Moon NFTs.\",\n                string.concat(\n                    \"[\",\n                    _getTraitForConstellation(Constellation(tokenId)),\n                    \"]\"\n                )\n            );\n    }\n\n    // Dynamic NFT registry setup\n\n    /// @notice set up dynamic NFT registry.\n    /// @param _dynamicNftRegistryAddress dynamic NFT registry address.\n    function setupDynamicNftRegistry(address _dynamicNftRegistryAddress)\n        external\n        onlyOwner\n    {\n        dynamicNftRegistryAddress = _dynamicNftRegistryAddress;\n    }\n\n    // IERC165 functions\n\n    /// @notice check if this contract supports a given interface.\n    /// @param interfaceId interface id.\n    /// @return true if contract supports interfaceId, false otherwise.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC1155)\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId) ||\n            // AlienArtBase interface id\n            interfaceId == type(AlienArtBase).interfaceId;\n    }\n}\n"
39     },
40     "src/ext/ERC1155.sol": {
41       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.17;\n\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 amount\n    );\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    event URI(string value, uint256 indexed id);\n\n    /*//////////////////////////////////////////////////////////////\n                             ERC1155 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                             METADATA LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function uri(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC1155 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender],\n            \"NOT_AUTHORIZED\"\n        );\n\n        balanceOf[from][id] -= amount;\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(\n                    msg.sender,\n                    from,\n                    id,\n                    amount,\n                    data\n                ) == ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual {\n        require(ids.length == amounts.length, \"LENGTH_MISMATCH\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Storing these outside the loop saves ~15 gas per iteration.\n        uint256 id;\n        uint256 amount;\n\n        for (uint256 i = 0; i < ids.length; ) {\n            id = ids[i];\n            amount = amounts[i];\n\n            balanceOf[from][id] -= amount;\n            balanceOf[to][id] += amount;\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\n                    msg.sender,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                ) == ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory balances)\n    {\n        require(owners.length == ids.length, \"LENGTH_MISMATCH\");\n\n        balances = new uint256[](owners.length);\n\n        // Unchecked because the only math done is incrementing\n        // the array index counter which cannot possibly overflow.\n        unchecked {\n            for (uint256 i = 0; i < owners.length; ++i) {\n                balances[i] = balanceOf[owners[i]][ids[i]];\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(\n                    msg.sender,\n                    address(0),\n                    id,\n                    amount,\n                    data\n                ) == ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[to][ids[i]] += amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\n                    msg.sender,\n                    address(0),\n                    ids,\n                    amounts,\n                    data\n                ) == ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchBurn(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[from][ids[i]] -= amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\n    }\n\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        balanceOf[from][id] -= amount;\n\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155TokenReceiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n}\n"
42     },
43     "src/moon/MoonNFTEventsAndErrors.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title MoonNFTEventsAndErrors\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\ncontract MoonNFTEventsAndErrors {\n    // Event to be emitted when alien art address is updated\n    event AlienArtAddressUpdated(\n        uint256 indexed tokenId,\n        address indexed alienArtAddress\n    );\n\n    // Event to be emitted when mint with referrer occurs\n    event MintedWithReferrer(\n        // Referrer address\n        address indexed referrerAddress,\n        // Referrer token\n        uint256 indexed referrerToken,\n        // Minter address\n        address indexed minterAddress,\n        // Token id of first token minted during this mint\n        uint256 mintStartTokenId,\n        // Amount of tokens minted\n        uint256 amount,\n        // Value paid to referrer\n        uint256 referrerPayout,\n        // Value paid to referred\n        uint256 referredPayout\n    );\n\n    // Event to emitted when moon regeneration occurs\n    event MoonRegenerated(\n        address indexed moonOwner,\n        uint256 indexed tokenId,\n        bytes32 indexed newMoonSeed,\n        bytes32 previousMoonSeed,\n        uint8 regenerationsUsed\n    );\n\n    // Mint errors\n    error MaxSupplyReached();\n    error WrongEtherAmount();\n\n    // Regeneration errors\n    error NoRegenerationsRemaining();\n\n    // Alien art token-level errors\n    error AlienArtContractFailedValidation();\n    error OwnerNotMsgSender();\n}\n"
45     },
46     "src/ext/Ownable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
48     },
49     "src/interfaces/ext/IERC2981.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
51     },
52     "src/interfaces/ext/IERC165.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
54     },
55     "src/ext/DefaultOperatorFilterer.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION =\n        address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
57     },
58     "lib/erc721a/contracts/IERC721A.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
60     },
61     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
63     },
64     "src/moon/MoonStructs.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Colors describing the moon image.\nstruct MoonImageColors {\n    string moon;\n    uint16 moonHue;\n    string border;\n    uint8 borderSaturation;\n    string background;\n    uint8 backgroundLightness;\n    string backgroundGradientColor;\n}\n\n// Config describing the complete moon image, with colors, positioning, and sizing.\nstruct MoonImageConfig {\n    MoonImageColors colors;\n    uint16 moonRadius;\n    uint16 xOffset;\n    uint16 yOffset;\n    uint16 viewWidth;\n    uint16 viewHeight;\n    uint16 borderRadius;\n    uint16 borderWidth;\n    string borderType;\n}\n"
66     },
67     "src/moon/SVG.sol": {
68       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Utils} from \"../utils/Utils.sol\";\n\n// Core SVG utility library which helps us construct\n// onchain SVG's with a simple, web-like API.\n// Props to w1nt3r.eth for creating the core of this SVG utility library.\nlibrary svg {\n    string internal constant NULL = \"\";\n\n    /* MAIN ELEMENTS */\n    function svgTag(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"svg\", _props, _children);\n    }\n\n    function defs(string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"defs\", NULL, _children);\n    }\n\n    function g(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"g\", _props, _children);\n    }\n\n    function circle(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"circle\", _props, NULL);\n    }\n\n    function mask(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"mask\", _props, _children);\n    }\n\n    function radialGradient(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"radialGradient\", _props, _children);\n    }\n\n    function stop(string memory _props) internal pure returns (string memory) {\n        return el(\"stop\", _props, NULL);\n    }\n\n    function ellipse(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"ellipse\", _props, NULL);\n    }\n\n    function rect(string memory _props) internal pure returns (string memory) {\n        return el(\"rect\", _props, NULL);\n    }\n\n    function filter(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"filter\", _props, _children);\n    }\n\n    function feSpecularLighting(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"feSpecularLighting\", _props, _children);\n    }\n\n    function fePointLight(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"fePointLight\", _props, NULL);\n    }\n\n    function feComposite(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"feComposite\", _props, NULL);\n    }\n\n    /* COMMON */\n    // A generic element, can be used to construct any SVG (or HTML) element\n    function el(\n        string memory _tag,\n        string memory _props,\n        string memory _children\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"<\",\n                _tag,\n                \" \",\n                _props,\n                \">\",\n                _children,\n                \"</\",\n                _tag,\n                \">\"\n            );\n    }\n\n    // an SVG attribute\n    function prop(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(_key, '=\"', _val, '\" ');\n    }\n\n    function prop(string memory _key, uint256 _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return prop(_key, Utils.uint2str(_val));\n    }\n}\n"
69     },
70     "src/utils/Traits.sol": {
71       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Utils} from \"./Utils.sol\";\n\n/// @title Traits\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary Traits {\n    function _getTrait(\n        string memory traitType,\n        string memory value,\n        bool includeTrailingComma,\n        bool includeValueQuotes\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                '{\"trait_type\":\"',\n                traitType,\n                '\",\"value\":',\n                includeValueQuotes ? string.concat('\"', value, '\"') : value,\n                \"}\",\n                includeTrailingComma ? \",\" : \"\"\n            );\n    }\n\n    function getTrait(\n        string memory traitType,\n        string memory value,\n        bool includeTrailingComma\n    ) internal pure returns (string memory) {\n        return _getTrait(traitType, value, includeTrailingComma, true);\n    }\n\n    function getTrait(\n        string memory traitType,\n        uint256 value,\n        bool includeTrailingComma\n    ) internal pure returns (string memory) {\n        return\n            _getTrait(\n                traitType,\n                Utils.uint2str(value),\n                includeTrailingComma,\n                false\n            );\n    }\n}\n"
72     },
73     "src/interfaces/dynamicNftRegistry/OwnerPermissionedTokenRegistryInterface.sol": {
74       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @title  OwnerPermissionedTokenRegistry\n * @author James Wenzel (emo.eth)\n * @notice Interface for a generic registry of tokens, where the owner of a token contract (as specified by the Ownable\n *         interface) is allowed to register the token as part of the registry and configure addresses allowed to call\n *         into subclass methods, as permissioned by the onlyTokenOrAllowedUpdater modifier.\n *\n *         This base registry interface includes methods to see if a token is registered, and the allowedUpdaters,\n *         if any, for registered tokens.\n */\ninterface OwnerPermissionedTokenRegistryInterface {\n    error TokenNotRegistered(address tokenAddress);\n    error TokenAlreadyRegistered(address tokenAddress);\n    error NotAllowedUpdater();\n    error NotTokenOrOwner(address token, address actualOwner);\n\n    event TokenRegistered(address indexed tokenAddress);\n\n    function registerToken(address tokenAddress) external;\n\n    function addAllowedUpdater(address tokenAddress, address newAllowedUpdater)\n        external;\n\n    function removeAllowedUpdater(\n        address tokenAddress,\n        address allowedUpdaterToRemove\n    ) external;\n\n    function getAllowedUpdaters(address tokenAddress)\n        external\n        returns (address[] memory);\n\n    function isAllowedUpdater(address tokenAddress, address updater)\n        external\n        returns (bool);\n\n    function isTokenRegistered(address tokenAddress)\n        external\n        returns (bool isRegistered);\n}\n"
75     },
76     "src/alienArt/constellation/AlienArtConstellationEventsAndErrors.sol": {
77       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title AlienArtConstellationEventsAndErrors\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\ncontract AlienArtConstellationEventsAndErrors {\n    // Event to be emitted when swap constellations occurs\n    event SwapConstellations(\n        address indexed owner,\n        uint256 indexed moon1,\n        uint256 indexed moon2,\n        uint256 newConstellationForMoon1,\n        uint256 newConstellationForMoon2\n    );\n\n    // Set moon address errors\n    error MoonAddressAlreadySet();\n\n    // Mint errors\n    error MsgSenderNotMoonAddress();\n\n    // Swap constellations errors\n    error SwapMoonsOwnerMustBeMsgSender();\n\n    // Uri errors\n    error InvalidConstellationIndex();\n}\n"
78     },
79     "src/alienArt/constellation/ConstellationLib.sol": {
80       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./SVG.sol\";\nimport {Utils} from \"../../utils/Utils.sol\";\nimport {LibPRNG} from \"../../utils/LibPRNG.sol\";\n\n/// @title ConstellationLib\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\nlibrary ConstellationLib {\n    // Constellations\n    using LibPRNG for LibPRNG.PRNG;\n\n    struct GenerateConstellationParams {\n        uint256 x;\n        uint256 y;\n        uint16 rotationInDegrees;\n        uint16 rotationCenterX;\n        uint16 rotationCenterY;\n        string starColor;\n        bool fluxConstellation;\n        bytes32 moonSeed;\n    }\n\n    function getLittleDipper(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory handle = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 11, y + 9),\n            getStar(params, x + 26, y + 15),\n            getStar(params, x + 43, y + 14)\n        );\n        string memory cup = string.concat(\n            getStar(params, x + 57, y + 5),\n            getStar(params, x + 64, y + 14),\n            getStar(params, x + 47, y + 23)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                string.concat(cup, handle)\n            );\n    }\n\n    function getBigDipper(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory cup = string.concat(\n            getStar(params, x, y + 16),\n            getStar(params, x + 11, y),\n            getStar(params, x + 38, y + 13),\n            getStar(params, x + 33, y + 30)\n        );\n        string memory handle = string.concat(\n            getStar(params, x + 46, y + 45),\n            getStar(params, x + 54, y + 58),\n            getStar(params, x + 78, y + 66)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                string.concat(cup, handle)\n            );\n    }\n\n    function getAries(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory stars = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 35, y - 19),\n            getStar(params, x + 50, y - 21),\n            getStar(params, x + 55, y - 16)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getPisces(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory upperLine = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 7, y - 8),\n            getStar(params, x + 17, y - 20),\n            getStar(params, x + 24, y - 32),\n            getStar(params, x + 21, y - 41),\n            getStar(params, x + 30, y - 47)\n        );\n        string memory lowerLine = string.concat(\n            getStar(params, x + 9, y - 2),\n            getStar(params, x + 28, y - 7),\n            getStar(params, x + 36, y - 5),\n            getStar(params, x + 52, y - 6)\n        );\n        string memory lowerCirclePart1 = string.concat(\n            getStar(params, x + 60, y - 2),\n            getStar(params, x + 65, y - 6),\n            getStar(params, x + 70, y - 2),\n            getStar(params, x + 71, y + 5)\n        );\n        string memory lowerCirclePart2 = string.concat(\n            getStar(params, x + 66, y + 9),\n            getStar(params, x + 58, y + 8),\n            getStar(params, x + 57, y + 1)\n        );\n\n        string memory stars = string.concat(\n            upperLine,\n            lowerLine,\n            lowerCirclePart1,\n            lowerCirclePart2\n        );\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getAquarius(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory bottomDownLine = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 12, y - 3),\n            getStar(params, x + 20, y + 5),\n            getStar(params, x + 22, y + 21)\n        );\n        string memory topAcrossLine = string.concat(\n            getStar(params, x + 8, y - 21),\n            getStar(params, x + 14, y - 26),\n            getStar(params, x + 18, y - 21),\n            getStar(params, x + 26, y - 27),\n            getStar(params, x + 68, y - 10)\n        );\n        string memory middleDownLine = string.concat(\n            getStar(params, x + 29, y - 11),\n            getStar(params, x + 39, y - 1)\n        );\n\n        string memory stars = string.concat(\n            bottomDownLine,\n            topAcrossLine,\n            middleDownLine\n        );\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getCapricornus(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory top = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 8, y - 1),\n            getStar(params, x + 30, y + 5)\n        );\n        string memory left = string.concat(\n            getStar(params, x + 7, y + 7),\n            getStar(params, x + 13, y + 16),\n            getStar(params, x + 30, y + 29)\n        );\n        string memory right = string.concat(\n            getStar(params, x + 34, y + 26),\n            getStar(params, x + 59, y + 3),\n            getStar(params, x + 65, y - 3)\n        );\n        string memory stars = string.concat(top, left, right);\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getSagittarius(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        string memory stars = string.concat(\n            getSagittariusLeft(params),\n            getSagittariusMiddle(params),\n            getSagittariusRight(params)\n        );\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getOphiuchus(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory stars = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 3, y - 22),\n            getStar(params, x + 11, y - 32),\n            getStar(params, x + 19, y - 24),\n            getStar(params, x + 22, y + 5),\n            getStar(params, x + 9, y + 4)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                // Avoid stack too deep error by adding last star here\n                string.concat(stars, getStar(params, x + 33, y + 12))\n            );\n    }\n\n    function getScorpius(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory top = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 3, y - 10),\n            getStar(params, x + 9, y - 15),\n            getStar(params, x + 14, y - 1)\n        );\n        string memory middle = string.concat(\n            getStar(params, x + 19, y + 2),\n            getStar(params, x + 21, y + 6),\n            getStar(params, x + 25, y + 16),\n            getStar(params, x + 25, y + 32)\n        );\n        string memory bottom1 = string.concat(\n            getStar(params, x + 32, y + 37),\n            getStar(params, x + 42, y + 39),\n            getStar(params, x + 50, y + 33)\n        );\n        string memory bottom2 = string.concat(\n            getStar(params, x + 47, y + 30),\n            getStar(params, x + 44, y + 23)\n        );\n        string memory stars = string.concat(top, middle, bottom1, bottom2);\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getLibra(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory triangle = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 6, y - 17),\n            getStar(params, x + 23, y - 19)\n        );\n        string memory left = string.concat(\n            getStar(params, x + 9, y + 13),\n            getStar(params, x + 7, y + 18)\n        );\n        string memory right = string.concat(\n            getStar(params, x + 21, y - 6),\n            getStar(params, x + 32, y + 5)\n        );\n        string memory stars = string.concat(triangle, left, right);\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getVirgo(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory middle = string.concat(\n            getStar(params, x + 8, y),\n            getStar(params, x + 11, y - 11),\n            getStar(params, x + 10, y - 26),\n            getStar(params, x + 22, y - 28),\n            getStar(params, x + 28, y - 10)\n        );\n        string memory top = string.concat(\n            getStar(params, x + 4, y - 32),\n            getStar(params, x, y - 46),\n            getStar(params, x + 34, y - 34)\n        );\n        string memory bottomLeft = string.concat(\n            getStar(params, x + 21, y + 12),\n            getStar(params, x + 24, y + 10),\n            getStar(params, x + 30, y + 18)\n        );\n        string memory bottomRight = string.concat(\n            getStar(params, x + 33, y - 7),\n            getStar(params, x + 37, y - 4),\n            getStar(params, x + 48, y + 9)\n        );\n        string memory stars = string.concat(\n            middle,\n            top,\n            bottomLeft,\n            bottomRight\n        );\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getLeo(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory loop = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 4, y - 10),\n            getStar(params, x + 14, y - 12),\n            getStar(params, x + 35, y + 3),\n            getStar(params, x + 45, y + 21),\n            getStar(params, x + 30, y + 12)\n        );\n        string memory top = string.concat(\n            getStar(params, x + 17, y - 19),\n            getStar(params, x + 11, y - 30),\n            getStar(params, x + 2, y - 29)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                string.concat(loop, top)\n            );\n    }\n\n    function getCancer(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory stars = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 14, y - 21),\n            getStar(params, x + 28, y - 12),\n            getStar(params, x + 12, y - 29),\n            getStar(params, x + 11, y - 49)\n        );\n\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getGemini(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        string memory stars = string.concat(\n            getGeminiLeftPerson(params),\n            getGeminiRightPerson(params)\n        );\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    function getTaurus(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n\n        string memory left = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 5, y - 13),\n            getStar(params, x + 18, y - 2)\n        );\n        string memory middle1 = string.concat(\n            getStar(params, x + 18, y + 11),\n            getStar(params, x + 22, y + 5),\n            getStar(params, x + 22, y + 9)\n        );\n        string memory middle2 = string.concat(\n            getStar(params, x + 23, y + 13),\n            getStar(params, x + 26, y + 9),\n            getStar(params, x + 27, y + 13)\n        );\n        string memory bottom = string.concat(\n            getStar(params, x + 34, y + 19),\n            getStar(params, x + 49, y + 24),\n            getStar(params, x + 51, y + 29)\n        );\n        string memory stars = string.concat(left, middle1, middle2, bottom);\n        return\n            makeConstellation(\n                params.rotationInDegrees,\n                params.rotationCenterX,\n                params.rotationCenterY,\n                stars\n            );\n    }\n\n    // Helpers\n\n    function getTransform(\n        uint16 rotationInDegrees,\n        uint16 rotationCenterX,\n        uint16 rotationCenterY\n    ) internal pure returns (string memory) {\n        return\n            svg.prop(\n                \"transform\",\n                string.concat(\n                    \"rotate(\",\n                    Utils.uint2str(rotationInDegrees),\n                    \" \",\n                    Utils.uint2str(rotationCenterX),\n                    \" \",\n                    Utils.uint2str(rotationCenterY),\n                    \")\"\n                )\n            );\n    }\n\n    function getStarTransform(uint256 x, uint256 y)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            svg.prop(\n                \"transform\",\n                string.concat(\n                    \"translate(\",\n                    Utils.uint2str(x),\n                    \",\",\n                    Utils.uint2str(y),\n                    \") scale(0.03)\"\n                )\n            );\n    }\n\n    function getStar(\n        GenerateConstellationParams memory params,\n        uint256 x,\n        uint256 y\n    ) internal pure returns (string memory) {\n        string memory opacity;\n        if (params.fluxConstellation) {\n            LibPRNG.PRNG memory prng;\n            prng.seed(\n                keccak256(\n                    abi.encodePacked(\n                        params.rotationInDegrees,\n                        params.moonSeed,\n                        x,\n                        y\n                    )\n                )\n            );\n            // Minimum 30, max 100\n            opacity = Utils.uint2str(prng.uniform(71) + 30);\n        } else {\n            opacity = \"100\";\n        }\n\n        return\n            svg.path(\n                string.concat(\n                    svg.prop(\n                        \"d\",\n                        \"M 40 60 L 63.511 72.361 L 59.021 46.180 L 78.042 27.639 L 51.756 23.820 L 40 0 L 28.244 23.820 L 1.958 27.639 L 20.979 46.180 L 16.489 72.361 L 40 60\"\n                    ),\n                    svg.prop(\"fill\", params.starColor),\n                    svg.prop(\"filter\", \"url(#glo)\"),\n                    svg.prop(\"opacity\", string.concat(opacity, \"%\")),\n                    getStarTransform(x, y)\n                )\n            );\n    }\n\n    function makeConstellation(\n        uint16 rotationInDegrees,\n        uint16 rotationCenterX,\n        uint16 rotationCenterY,\n        string memory starElt\n    ) internal pure returns (string memory) {\n        return\n            svg.g(\n                getTransform(\n                    rotationInDegrees,\n                    rotationCenterX,\n                    rotationCenterY\n                ),\n                string.concat(\n                    // Glow filter\n                    svg.filter(\n                        svg.prop(\"id\", \"glo\"),\n                        string.concat(\n                            svg.feGaussianBlur(\n                                string.concat(\n                                    svg.prop(\"stdDeviation\", \"4\"),\n                                    svg.prop(\"result\", \"blur\")\n                                )\n                            ),\n                            svg.feMerge(\n                                string.concat(\n                                    svg.feMergeNode(svg.prop(\"in\", \"blur\")),\n                                    svg.feMergeNode(svg.prop(\"in\", \"blur\")),\n                                    svg.feMergeNode(svg.prop(\"in\", \"blur\")),\n                                    svg.feMergeNode(\n                                        svg.prop(\"in\", \"SourceGraphic\")\n                                    )\n                                )\n                            )\n                        )\n                    ),\n                    starElt\n                )\n            );\n    }\n\n    // Individual constellation helpers\n\n    // Sagittarius helpers for groups of stars as we get stack too deep errors\n    // including all stars in one function\n\n    function getSagittariusLeft(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n        return\n            string.concat(\n                getStar(params, x, y),\n                getStar(params, x + 11, y + 5),\n                getStar(params, x + 18, y + 2),\n                getStar(params, x + 22, y + 7),\n                getStar(params, x + 19, y + 13),\n                getStar(params, x + 19, y - 7),\n                getStar(params, x + 11, y - 17)\n            );\n    }\n\n    function getSagittariusMiddle(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n        return\n            string.concat(\n                getStar(params, x + 27, y - 6),\n                getStar(params, x + 30, y - 10),\n                getStar(params, x + 31, y - 20),\n                getStar(params, x + 26, y - 21),\n                getStar(params, x + 36, y - 20),\n                getStar(params, x + 42, y - 28)\n            );\n    }\n\n    function getSagittariusRight(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n        return\n            string.concat(\n                getStar(params, x + 33, y - 3),\n                getStar(params, x + 36, y - 9),\n                getStar(params, x + 45, y - 15),\n                getStar(params, x + 55, y - 11),\n                getStar(params, x + 60, y - 7),\n                getStar(params, x + 55, y + 6),\n                getStar(params, x + 53, y + 14),\n                getStar(params, x + 44, y + 12),\n                getStar(params, x + 43, y + 23)\n            );\n    }\n\n    // Gemini helpers for groups of stars as we get stack too deep errors\n    // including all stars in one function\n\n    function getGeminiLeftPerson(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n        string memory leftPersonTop = string.concat(\n            getStar(params, x, y),\n            getStar(params, x + 10, y - 12),\n            getStar(params, x + 13, y - 6),\n            getStar(params, x + 20, y - 7)\n        );\n        string memory leftPersonBottom1 = string.concat(\n            getStar(params, x + 13, y + 4),\n            getStar(params, x + 13, y + 15),\n            getStar(params, x + 11, y + 23)\n        );\n        string memory leftPersonBottom2 = string.concat(\n            getStar(params, x + 13, y + 34),\n            getStar(params, x + 1, y + 21),\n            getStar(params, x + 3, y + 38)\n        );\n        return\n            string.concat(leftPersonTop, leftPersonBottom1, leftPersonBottom2);\n    }\n\n    function getGeminiRightPerson(GenerateConstellationParams memory params)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 x = params.x;\n        uint256 y = params.y;\n        string memory rightPersonTop = string.concat(\n            getStar(params, x + 28, y - 16),\n            getStar(params, x + 29, y - 6),\n            getStar(params, x + 38, y - 7)\n        );\n        string memory rightPersonBottom1 = string.concat(\n            getStar(params, x + 28, y + 9),\n            getStar(params, x + 30, y + 18),\n            getStar(params, x + 30, y + 30)\n        );\n        string memory rightPersonBottom2 = string.concat(\n            getStar(params, x + 25, y + 35),\n            getStar(params, x + 40, y + 32)\n        );\n        return\n            string.concat(\n                rightPersonTop,\n                rightPersonBottom1,\n                rightPersonBottom2\n            );\n    }\n}\n"
81     },
82     "src/interfaces/ext/IERC721.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n"
84     },
85     "src/alienArt/constellation/SVG.sol": {
86       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Core SVG utility library which helps us construct\n// onchain SVG's with a simple, web-like API.\n// Props to w1nt3r.eth for creating the core of this SVG utility library.\nlibrary svg {\n    string internal constant NULL = \"\";\n\n    /* MAIN ELEMENTS */\n    function svgTag(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"svg\", _props, _children);\n    }\n\n    function g(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"g\", _props, _children);\n    }\n\n    function rect(string memory _props) internal pure returns (string memory) {\n        return el(\"rect\", _props, NULL);\n    }\n\n    function path(string memory _props) internal pure returns (string memory) {\n        return el(\"path\", _props, NULL);\n    }\n\n    function filter(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"filter\", _props, _children);\n    }\n\n    function feGaussianBlur(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"feGaussianBlur\", _props, NULL);\n    }\n\n    function feMerge(string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"feMerge\", NULL, _children);\n    }\n\n    function feMergeNode(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el(\"feMergeNode\", _props, NULL);\n    }\n\n    /* COMMON */\n    // A generic element, can be used to construct any SVG (or HTML) element\n    function el(\n        string memory _tag,\n        string memory _props,\n        string memory _children\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"<\",\n                _tag,\n                \" \",\n                _props,\n                \">\",\n                _children,\n                \"</\",\n                _tag,\n                \">\"\n            );\n    }\n\n    // an SVG attribute\n    function prop(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(_key, '=\"', _val, '\" ');\n    }\n}\n"
87     },
88     "src/ext/Context.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
90     },
91     "src/ext/OperatorFilterer.sol": {
92       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"../interfaces/ext/IOperatorFilterRegistry.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(\n                    address(this),\n                    subscriptionOrRegistrantToCopy\n                );\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(\n                        address(this),\n                        subscriptionOrRegistrantToCopy\n                    );\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // Allow spending tokens from addresses with balance\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n            // from an EOA.\n            if (from == msg.sender) {\n                _;\n                return;\n            }\n            if (\n                !OPERATOR_FILTER_REGISTRY.isOperatorAllowed(\n                    address(this),\n                    msg.sender\n                )\n            ) {\n                revert OperatorNotAllowed(msg.sender);\n            }\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (\n                !OPERATOR_FILTER_REGISTRY.isOperatorAllowed(\n                    address(this),\n                    operator\n                )\n            ) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n        _;\n    }\n}\n"
93     },
94     "src/interfaces/ext/IOperatorFilterRegistry.sol": {
95       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator)\n        external\n        view\n        returns (bool);\n\n    function register(address registrant) external;\n\n    function registerAndSubscribe(address registrant, address subscription)\n        external;\n\n    function registerAndCopyEntries(\n        address registrant,\n        address registrantToCopy\n    ) external;\n\n    function unregister(address addr) external;\n\n    function updateOperator(\n        address registrant,\n        address operator,\n        bool filtered\n    ) external;\n\n    function updateOperators(\n        address registrant,\n        address[] calldata operators,\n        bool filtered\n    ) external;\n\n    function updateCodeHash(\n        address registrant,\n        bytes32 codehash,\n        bool filtered\n    ) external;\n\n    function updateCodeHashes(\n        address registrant,\n        bytes32[] calldata codeHashes,\n        bool filtered\n    ) external;\n\n    function subscribe(address registrant, address registrantToSubscribe)\n        external;\n\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    function subscribers(address registrant)\n        external\n        returns (address[] memory);\n\n    function subscriberAt(address registrant, uint256 index)\n        external\n        returns (address);\n\n    function copyEntriesOf(address registrant, address registrantToCopy)\n        external;\n\n    function isOperatorFiltered(address registrant, address operator)\n        external\n        returns (bool);\n\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode)\n        external\n        returns (bool);\n\n    function isCodeHashFiltered(address registrant, bytes32 codeHash)\n        external\n        returns (bool);\n\n    function filteredOperators(address addr)\n        external\n        returns (address[] memory);\n\n    function filteredCodeHashes(address addr)\n        external\n        returns (bytes32[] memory);\n\n    function filteredOperatorAt(address registrant, uint256 index)\n        external\n        returns (address);\n\n    function filteredCodeHashAt(address registrant, uint256 index)\n        external\n        returns (bytes32);\n\n    function isRegistered(address addr) external returns (bool);\n\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
96     }
97   },
98   "settings": {
99     "remappings": [
100       "@erc721a/=lib/erc721a/",
101       "@openzeppelin/=lib/openzeppelin-contracts/",
102       "@solmate/=lib/solmate/src/",
103       "@std/=lib/forge-std/src/",
104       "ds-test/=lib/ds-test/src/",
105       "erc721a/=lib/erc721a/contracts/",
106       "forge-std/=lib/forge-std/src/",
107       "openzeppelin-contracts/=lib/openzeppelin-contracts/",
108       "solmate/=lib/solmate/src/"
109     ],
110     "optimizer": {
111       "enabled": true,
112       "runs": 200
113     },
114     "metadata": {
115       "bytecodeHash": "ipfs"
116     },
117     "outputSelection": {
118       "*": {
119         "*": [
120           "evm.bytecode",
121           "evm.deployedBytecode",
122           "devdoc",
123           "userdoc",
124           "metadata",
125           "abi"
126         ]
127       }
128     },
129     "evmVersion": "london",
130     "libraries": {}
131   }
132 }}