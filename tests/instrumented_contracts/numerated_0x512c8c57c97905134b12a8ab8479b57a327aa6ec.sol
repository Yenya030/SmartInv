1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Address.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     },
25     "contracts/ISAN.sol": {
26       "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./SANSoulbindable.sol\";\n\ninterface ISAN is SANSoulbindable {\n    function tokenLevel(uint256 _tokenId)\n        external\n        view\n        returns (SoulboundLevel _level);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external;\n\n    function batchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _tokenIDs\n    ) external;\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n}\n"
27     },
28     "contracts/ISANPASS.sol": {
29       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ISANPASS {\n    struct factionCredits {\n        uint8 chi;\n        uint8 umi;\n        uint8 sora;\n        uint8 mecha;\n        uint8 none;\n    }\n\n    enum Id {\n        UNUSED,\n        Chi,\n        Umi,\n        Sora,\n        Mecha,\n        None,\n        VIP,\n        Redvoxx\n    }\n\n    enum SaleState {\n        Paused, // 0\n        Open    // 1\n    }\n\n    event Sacrifice(\n        address indexed sacrificer\n    );\n\n    event SaleStateChanged(\n        SaleState newSaleState\n    );\n\n    error ExceedsMaxRoyaltiesPercentage();\n    error SaleStateNotActive();\n}\n"
30     },
31     "contracts/SAN1155.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// Based on OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract SAN1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     */\n    function _mintSimple(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        _balances[id][to] += amount;\n        emit TransferSingle(_msgSender(), address(0), to, id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _mintBatchSimple(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n        emit TransferBatch(_msgSender(), address(0), to, ids, amounts);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
33     },
34     "contracts/SAN1155Burnable.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// Based on OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./SAN1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract SAN1155Burnable is SAN1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
36     },
37     "contracts/SANMetadata.sol": {
38       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nabstract contract SANMetadata {\n    uint256[157] internal sanFactions = [\n        8172118231391141287902840013113466638914952054539639771171260499640339993648,\n        29430496281837262956462947599698477680114015847728529588968404981256659936273,\n        25393357345252657687578348685524716277208190960890993650346451664004748415256,\n        29633808514264345144814183736505347293089797980234916103205276024459315196450,\n        30997794508970546932695339362737748626051520564294775271332235480990298149908,\n        11088851274543046612534596707831127883620304102107090617791341461734175281432,\n        8177327568511719525707267028046949619428579739711613370657212349738512499784,\n        15947811451703475418972253741887238191481624435199846522869281518231147856945,\n        7732193023099147176953953278980406430491563238064738280913434807607180661825,\n        9279612382574686681127402412493149950275823556413062368439613207619681993091,\n        22658516974125200663226834582367883215142918725578025433782700808299578135570,\n        8206179891065982827427272001249707722201712208641054826683030142483053420835,\n        7922661334880222342750658733499771493946070122641381176098344693785380001812,\n        59936872091004013524380705450449207157309738970033980571097119443151256555907,\n        59763727181727881726613243756862669986082819893133680704279900791580211118372,\n        16313423641394527132297668070425006155613871900757179163005487788583621370920,\n        32807710136091177259795693570944504261451327778937887755711694487830293202049,\n        11086090568948432251399591338827340045964156117020709285395413555789900821521,\n        32694677702357318909697182374101968047166310143660976387555175633629225423891,\n        59741537974660048614959151045796085506410578882840771801801223085464541729042,\n        30420697163066095140688690768034017312874453646077987860331771285596214018337,\n        59317501176545182987983055501064816389561841843570449424820562612165178564930,\n        18128080585176152444226794394735506793010239035707070698456805004017219474466,\n        59820369748313283159604229631108345940410280779207928885706028620957823275521,\n        9105032894229945979105849675996708476204746294421801896081683924030073348370,\n        7724773588395726504537392581594837412617259706143598140956725063426284720776,\n        9081712998843592744859719028837281468254819189086029483406152032589141133377,\n        7719480896013179689619835903790787133686105740596302572778228651474042496017,\n        29628424614224332540965429694860414685338676695152231766033395904753520097298,\n        54511214746616474442643623328358672632929331478507643079965251961821340373640,\n        22234453054840859553098624345198537305934422425002756478823506271941147509267,\n        29520819839049765751463059447351288650979519592335532661942191210406976176420,\n        32681867548114573527903866670953285211493413185659946403004534634388373186632,\n        61550798859513052226319193038385183550975087594270352771153016437819051153474,\n        15381343686555675198625837724496474335967578587758905414302559721898038010132,\n        9135069567159577094657816353681206751158404281086690641252458890717686929537,\n        9081871737332460493573653020044347955401455119847851222293132688375540757272,\n        61550002222680535540868527270329878311101564686932243461766571283725338034979,\n        7776011754646192775870497704013965991376921292084685393843908121745900577923,\n        14956481243320019057128777023884867582768003464929639005082027454609225814305,\n        29460857037130715708472147241790461336840822459574758422587740808722246801537,\n        7804662192125122262488463525395677988217972393957152748229385215400958236737,\n        16345571975134151524723856104597707298006513969748379071222127886997191201809,\n        1930290801649354003037154680512703862422469877399048408699838160540681913409,\n        9161552479798262294808714797135922551717114425339838233718338657275939459394,\n        9163367650652110614221988545811969337436801931252679528384034495531713630529,\n        30878310101257591734203548147473781811890367630001158517376791124879226704148,\n        14968894461810922424526801024104035218241900763753304260242493607671296963617,\n        7781312295208728700266849707569993668990375088979278286567528264856480532514,\n        58831207122077829432536220416167288636416861121489561311154467846797017760840,\n        8629531363070578469553808093148346916113633350920319245295629738366675993122,\n        8184264015679463629736402535750205736372007151659699638958189898106081984836,\n        58384150388973897156342146629786450514179565642402337055143132869417973661988,\n        30086120942862244076439483773583852382575217475948796333584092944396241343524,\n        29515347613248869922164729238111959970930414451867583705273448198710947774754,\n        15861448982692692723094945921241832781274338385856927300603350689062250971970,\n        58915641364356307619610933434887006328905727001204775738328257909291242047506,\n        15439062559552472722262835875647857868931696304181565188403069953132124508436,\n        58578168589112190418306744769771666958929054071653652686521159429823599313288,\n        22651449666943389159509409546856775370255209959338661747655230479062751527971,\n        15053993410547815546402806987002554811281051729197611836865456433392468379665,\n        10885676359443946269573432145611928119760386413378449731493144620769641763348,\n        58379284745630218013772971135911998638054713042276733123832144651092255605025,\n        30081470261092880370672268486716293884403700016492353345477235669139595624737,\n        15414471178988014762412703782285721036568728475467899549995815774396217369394,\n        61635190852639421837480730153301989699953067529803927690300442917335623353473,\n        59381087423755638584105705821127647667242377751690498835763970266719601234241,\n        32597462216757577037690148587742963189226978300773147961076896020280702669076,\n        7760441468815460772416197749933621753223477978656511026143624144710656987713,\n        22647680391443324623972484993232894735679362650193453101335423707478540685587,\n        58832639665131307539182567387683123701722501623388796428834748103299496940163,\n        9161227342617692961930545348893115867939966098234397662221887383427943203880,\n        29436584053262656794074259411899676108226457392972874221666853586799215915592,\n        58919299378901958461615980459615630053215430822319726658496977311795323741202,\n        9077184600677909997355458142920276892031239216190153190934761701037369856836,\n        7922771752086562244729203399317346822523778506575454357856424035780865896996,\n        30877662808841169336788975123896264785049837300333434552708488579143763575108,\n        18320907613844533292751817027897276660470379544256007352663845968142972227857,\n        29458869519200677288635797635943928076874674925272773781010981736119685908612,\n        7816700541295837429166699168715118405651409126702046530381457977260871061793,\n        8172117642971865382509551405586076598352517867362645145788848291509985350020,\n        30884607582636238376688159537160509304780893845202319993972721250883615605800,\n        15947686785944546719126033119591537898259928997172150328413734892491378861186,\n        29432257111843840413687835110230446472769802505800917752116821178610230576259,\n        58463651632201661056879485098512105112808060433249410096150653852887898227730,\n        9133219926421052347829775587718240732621081384348791434033732748748164121154,\n        14986514605368367630291343514865814426723169944001884025978078478769573888328,\n        482815177440433400996510302924393273760071340059003585637486742121610314056,\n        18184508400905165243301468164704948518441919840393895691552928340118211930177,\n        7919285167096682777950670241738823581537981936347043761782765672151624270913,\n        9076542808796807190701330266157019447791005655554515664774253695187794625554,\n        11089181279244625167290053576865012756806028323784489085910951524519560417672,\n        29430602807404152826132512338038980005611524257525931141525286363670086174754,\n        58378511850967688060214862156809051706389268801674103609534274573460433307668,\n        15409170638522879074807689126316470651451916816635672889374718809718937190673,\n        7919126765520006992943528651317569738154716863411979750993340672372268671880,\n        8212549798498744969233131531737736323503099404474953908075346663859304874627,\n        30800175448038888869657646541091517237949490798475613948378233743061441202225,\n        9104951177532444608725890968358270005567297754048593832611298965239231689860,\n        29882913256535250203919092446015988626467535585540679822518815837706581586241,\n        10916044048693906167811694920408005573788761400169615202936077671163041485860,\n        29432256287670589846708071460951565705925576448437653848610899542031209890836,\n        59832647697530342123789279541362402494717011505218214655869355735021545079588,\n        8177092993497141878753483302460864944297130675028783581747737501834517419076,\n        25360028719254451686922070844937595710971837034614379859117178333859680625681,\n        58832716905629090012195868554020235741295226377871085382873782022547202904337,\n        59820593246436527130453319037056164810099783636570531345200427056839272960577,\n        9110143027612407915852016383999070166905443635773460386263721450519655490632,\n        29517887484865341834141870728567969144663309147287764638522578900795306575908,\n        7724884541087671635313643720744678003849405834964728681063716849751858287171,\n        16354077946152720651098549421202572709864074079658255062534725168023274132001,\n        32596728063821849205936785411072974252430948291212970494142995116040175960449,\n        14961897358113198031895445545500928056207096895267923620456645746377023045912,\n        7804620754703959264998146204200789105849810643720346027788960506044155529252,\n        30789194745696896284545943566893102130995184126838261909030091587651733979778,\n        7804329587912218274044180418544974872451058204566361903530580090573987844113,\n        9108373148950256516445128993655813529536562471291678514171507847612133049106,\n        7782092241325276821098579226724105734118240193667139527180479772775497875745,\n        59740971600079947932652969114684696832392884803266147373072289599426157363489,\n        32602090257247291584668853002254863775771923774410548599107217076355150790978,\n        30364178391888833056055093622011911355261467501799516041604220402618874341432,\n        52504091577161782951263159698826391888519489110675323940732900688282970689825,\n        58468974144010741211088368073001205522620743909184176389097654687386950570305,\n        58378851163755707925112702231548333772853514824967149444250921138712964335747,\n        15044821921567160847671994771529826739865863916742587353197246753838834197122,\n        61633820048253208237780679929353127804637823074835411164885089413827901202705,\n        30082566425334100739577578187700861008818009426030746145927348935517654844433,\n        29517197310632203257331820737207728388431425704929817372945201758670002853905,\n        22843793919025490602889118250176824869815824329767152936366203540161674379537,\n        7804662165064853769029125147403363242146447969830960339656245657144793318417,\n        7719480386079208864888593181814689760106277073416509806999618945210533446721,\n        23154808203569452641614975536642174799422931162952506746663755070477988664353,\n        9077184239739900229384440911828367453293098337174049617466251011156143642696,\n        7724884879147533867263510158513186707447765415668976955865282993571925082692,\n        8624450307431717967847067438041044117314276770575310198945215619729579910161,\n        11096251665219770268006938701094322433220939793517266342136515860347251425608,\n        18207594204644815656864056905318972256083864277784189705883631433169115826194,\n        7721399500515348348661107614326678699946111247309055324239508973234228905000,\n        15421980793673256746047779094971433572297843431398115302727707946075653478465,\n        22391702789909481066896063426322104521228219453666518491582627633227695735108,\n        7719589950563992452580558762830223631705120467838110517193998308157743698193,\n        16511656042692248558091511266205678535401041052836629397815776545433734105219,\n        15166734326800087547408575599610078473919221186706417353106760413502458892676,\n        9286901053021052224098792764795343822791182863527444981694086464759454270530,\n        16516626150716496050644186894939428304696816162704363971122239221952139039809,\n        18163526914763767899331791030754554122768168368131712130707894892794003818514,\n        15025385256384236496728937731960083631951853718428290655414189941119032300561,\n        59945725737492287429430450583399234769023828036754090083405292230104584360257,\n        9076418494696298363416961832233152239097257296837549280690229793870547747972,\n        58380630687368839487974706061173643230902433212080218288050159251844222779672,\n        30093078214590859114762106918046306738439385700409745255103886459112651952712,\n        8201828847250426851529542860056357012140382567961574638609781982361597253704,\n        32596791009940788336351669824869748939752665749581006758247781131787358507283,\n        59820590157961876402325001349477133615477905733350932598294127284781752533795,\n        32625724888840686694879571288271770915486989677524507531858137882822428596248,\n        30990622720003927274502257421688706802332158329987730486666196895749675159844,\n        46270568071285715492\n    ];\n}\n"
39     },
40     "contracts/SANPASS.sol": {
41       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**                       ███████╗ █████╗ ███╗   ██╗\n *                        ██╔════╝██╔══██╗████╗  ██║\n *                        ███████╗███████║██╔██╗ ██║\n *                        ╚════██║██╔══██║██║╚██╗██║\n *                        ███████║██║  ██║██║ ╚████║\n *                        ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝\n *\n *                              █████████████╗\n *                              ╚════════════╝\n *                               ███████████╗\n *                               ╚══════════╝\n *                            █████████████████╗\n *                            ╚════════════════╝\n *\n *                     ██████╗  █████╗ ███████╗███████╗\n *                     ██╔══██╗██╔══██╗██╔════╝██╔════╝\n *                     ██████╔╝███████║███████╗███████╗\n *                     ██╔═══╝ ██╔══██║╚════██║╚════██║\n *                     ██║     ██║  ██║███████║███████║\n *                     ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝\n */\n\nimport \"./token/ERC2981ContractWideRoyalties.sol\";\nimport \"./token/TokenRescuer.sol\";\nimport \"./ISAN.sol\";\nimport \"./ISANPASS.sol\";\nimport \"./SAN1155Burnable.sol\";\nimport \"./SANMetadata.sol\";\nimport \"./SANSoulbindable.sol\";\n\n/**\n * @title SAN Concert Pass\n * @author Aaron Hanson <coffee.becomes.code@gmail.com> @CoffeeConverter\n * @notice https://sansound.io\n */\ncontract SANPASS is\n    ISANPASS,\n    SAN1155Burnable,\n    ERC2981ContractWideRoyalties,\n    TokenRescuer,\n    SANMetadata,\n    SANSoulbindable\n{\n    uint256 public constant MAX_ROYALTIES_PCT = 333; // 3.33%\n\n    address public constant BURN_ADDRESS =\n        0x000000000000000000000000000000000000dEaD;\n\n    uint256 private constant MaskChi   = 1<<0;\n    uint256 private constant MaskUmi   = 1<<1;\n    uint256 private constant MaskSora  = 1<<2;\n    uint256 private constant MaskMecha = 1<<3;\n\n    ISAN public immutable SAN;\n\n    string public contractURI;\n\n    SaleState public saleState;\n\n    mapping(address => factionCredits) public userFactionCredits;\n\n    constructor(\n        string memory _contractURI,\n        string memory _baseURI,\n        address _royaltiesReceiver,\n        uint256 _royaltiesPercent,\n        address _sanContract\n    )\n        SAN1155(_baseURI)\n    {\n        contractURI = _contractURI;\n        setRoyalties(\n            _royaltiesReceiver,\n            _royaltiesPercent\n        );\n        SAN = ISAN(_sanContract);\n    }\n\n    /**\n     * @notice Mints SANPASS tokens by burning SAN Origin tokens.\n     * @param _tokenIds The list of SAN Origin tokens to burn.\n     */\n    function mintPasses(\n        uint256[] calldata _tokenIds\n    )\n        external\n    {\n        if (saleState != SaleState.Open) revert SaleStateNotActive();\n\n        factionCredits memory credits = userFactionCredits[_msgSender()];\n\n        unchecked {\n            for (uint i; i < _tokenIds.length; ++i) {\n                uint256 factions = sanTokenFactions(_tokenIds[i]);\n                if (factions == 0) ++credits.none;\n                else if (0 < factions & MaskMecha) ++credits.mecha;\n                else {\n                    if (0 < factions & MaskChi) ++credits.chi;\n                    if (0 < factions & MaskUmi) ++credits.umi;\n                    if (0 < factions & MaskSora) ++credits.sora;\n                }\n            }\n        }\n\n        unchecked {\n            uint256 mintChi = credits.chi / 3;\n            uint256 mintUmi = credits.umi / 3;\n            uint256 mintSora = credits.sora / 3;\n            uint256 mintMecha = credits.mecha / 3;\n            uint256 mintNone = credits.none / 3;\n            uint256 idCount = (mintChi == 0 ? 0 : 1) + (mintUmi == 0 ? 0 : 1) +\n                (mintSora == 0 ? 0 : 1) + (mintMecha == 0 ? 0 : 1) +\n                (mintNone == 0 ? 0 : 1);\n            if (1 == idCount) {\n                if (mintChi != 0) {\n                    _mintSimple(_msgSender(), uint256(Id.Chi), mintChi);\n                    credits.chi = credits.chi % 3;\n                }\n                else if (mintUmi != 0) {\n                    _mintSimple(_msgSender(), uint256(Id.Umi), mintUmi);\n                    credits.umi = credits.umi % 3;\n                }\n                else if (mintSora != 0) {\n                    _mintSimple(_msgSender(), uint256(Id.Sora), mintSora);\n                    credits.sora = credits.sora % 3;\n                }\n                else if (mintMecha != 0) {\n                    _mintSimple(_msgSender(), uint256(Id.Mecha), mintMecha);\n                    credits.mecha = credits.mecha % 3;\n                }\n                else {\n                    _mintSimple(_msgSender(), uint256(Id.None), mintNone);\n                    credits.none = credits.none % 3;\n                }\n            }\n            else if (1 < idCount) {\n                uint256[] memory ids = new uint256[](idCount);\n                uint256[] memory amounts = new uint256[](idCount);\n                uint256 curIndex;\n                if (mintChi != 0) {\n                    ids[curIndex] = uint256(Id.Chi);\n                    amounts[curIndex++] = mintChi;\n                    credits.chi = credits.chi % 3;\n                }\n                if (mintUmi != 0) {\n                    ids[curIndex] = uint256(Id.Umi);\n                    amounts[curIndex++] = mintUmi;\n                    credits.umi = credits.umi % 3;\n                }\n                if (mintSora != 0) {\n                    ids[curIndex] = uint256(Id.Sora);\n                    amounts[curIndex++] = mintSora;\n                    credits.sora = credits.sora % 3;\n                }\n                if (mintMecha != 0) {\n                    ids[curIndex] = uint256(Id.Mecha);\n                    amounts[curIndex++] = mintMecha;\n                    credits.mecha = credits.mecha % 3;\n                }\n                if (mintNone != 0) {\n                    ids[curIndex] = uint256(Id.None);\n                    amounts[curIndex] = mintNone;\n                    credits.none = credits.none % 3;\n                }\n                _mintBatchSimple(_msgSender(), ids, amounts);\n            }\n        }\n\n        userFactionCredits[_msgSender()] = credits;\n        SAN.batchTransferFrom(_msgSender(), BURN_ADDRESS, _tokenIds);\n        emit Sacrifice(_msgSender());\n    }\n\n    /**\n     * @notice (only owner) Mints VIP tokens to a list of recipients.\n     * @param _recipients The list of token recipients.\n     * @param _amounts The list of token amounts.\n     */\n    function airdropVIP(\n        address[] calldata _recipients,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyOwner\n    {\n        if (_recipients.length != _amounts.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _recipients.length; ++i) {\n                _mintSimple(\n                    _recipients[i],\n                    uint256(Id.VIP),\n                    _amounts[i]\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice (only owner) Mints Redvoxx tokens to a list of recipients.\n     * @param _recipients The list of token recipients.\n     * @param _amounts The list of token amounts.\n     */\n    function airdropRedvoxx(\n        address[] calldata _recipients,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyOwner\n    {\n        if (_recipients.length != _amounts.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _recipients.length; ++i) {\n                _mintSimple(\n                    _recipients[i],\n                    uint256(Id.Redvoxx),\n                    _amounts[i]\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice (only owner) Sets the contract URI for contract metadata.\n     * @param _newContractURI The new contract URI.\n     */\n    function setContractURI(\n        string calldata _newContractURI\n    )\n        external\n        onlyOwner\n    {\n        contractURI = _newContractURI;\n    }\n\n    /**\n     * @notice (only owner) Sets the saleState to `_newSaleState`.\n     * @param _newSaleState The new sale state\n     * (0=Paused, 1=Open).\n     */\n    function setSaleState(\n        SaleState _newSaleState\n    )\n        external\n        onlyOwner\n    {\n        saleState = _newSaleState;\n        emit SaleStateChanged(_newSaleState);\n    }\n\n    /**\n     * @notice (only owner) Sets the token URI for token metadata.\n     * @param _newURI The new URI.\n     */\n    function setURI(\n        string calldata _newURI\n    )\n        external\n        onlyOwner\n    {\n        _setURI(_newURI);\n    }\n\n    /**\n     * @notice (only owner) Sets ERC-2981 royalties recipient and percentage.\n     * @param _recipient The address to which to send royalties.\n     * @param _value The royalties percentage (two decimals, e.g. 1000 = 10%).\n     */\n    function setRoyalties(\n        address _recipient,\n        uint256 _value\n    )\n        public\n        onlyOwner\n    {\n        if (_value > MAX_ROYALTIES_PCT) revert ExceedsMaxRoyaltiesPercentage();\n\n        _setRoyalties(\n            _recipient,\n            _value\n        );\n    }\n\n    /**\n     * @notice Looks up all factions for a SAN token ID.\n     * @param _sanTokenId The SAN token ID to check.\n     * @return factions_ Bitfield of five bits indication the factions.\n     */\n    function sanTokenFactions(\n        uint256 _sanTokenId\n    )\n        public\n        view\n        returns (uint256 factions_)\n    {\n        uint256 bucket = _sanTokenId >> 6;\n        factions_ = sanFactions[bucket] >> ((_sanTokenId & 63) * 4) & 0xf;\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 _interfaceId\n    )\n        public\n        view\n        override (SAN1155, ERC2981Base)\n        returns (bool)\n    {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    string[119] public _takeThisEngineerMayItServeYouWell = [\n        \"201110\", \"010110\", \"000110\", \"012010\", \"210100\", \"220110\", \"120110\",\n        \"001110\", \"100110\", \"210100\", \"220110\", \"020110\", \"121010\", \"210100\",\n        \"102010\", \"200110\", \"121010\", \"210100\", \"002010\", \"022010\", \"120110\",\n        \"001110\", \"100110\", \"210100\", \"202010\", \"001110\", \"020110\", \"220110\",\n        \"101000\", \"010110\", \"112010\", \"210100\", \"120110\", \"100110\", \"212010\",\n        \"220110\", \"111110\", \"212010\", \"020110\", \"210100\", \"202010\", \"020110\",\n        \"202010\", \"212010\", \"201110\", \"210100\", \"102010\", \"202010\", \"002010\",\n        \"022010\", \"012010\", \"022010\", \"020110\", \"002010\", \"121010\", \"120110\",\n        \"101000\", \"100110\", \"020110\", \"121010\", \"201110\", \"120110\", \"210100\",\n        \"002010\", \"022010\", \"220110\", \"110110\", \"111110\", \"020110\", \"002010\",\n        \"210100\", \"121010\", \"210100\", \"202010\", \"200110\", \"022010\", \"201110\",\n        \"220110\", \"200110\", \"202010\", \"210100\", \"120110\", \"202010\", \"220110\",\n        \"010110\", \"200110\", \"101000\", \"100110\", \"020110\", \"010110\", \"012010\",\n        \"120110\", \"200110\", \"121010\", \"020110\", \"220110\", \"210100\", \"120110\",\n        \"200110\", \"010110\", \"022010\", \"220110\", \"002010\", \"121010\", \"012010\",\n        \"210100\", \"000110\", \"000110\", \"121010\", \"210100\", \"012010\", \"010110\",\n        \"210100\", \"120110\", \"220110\", \"120110\", \"121010\", \"202010\", \"221010\"\n    ];\n}\n"
42     },
43     "contracts/SANSoulbindable.sol": {
44       "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface SANSoulbindable {\n    enum SoulboundLevel { Unbound, One, Two, Three, Four }\n}\n"
45     },
46     "contracts/token/ERC2981Base.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC2981Royalties.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\n\tstruct RoyaltyInfo {\n\t\taddress recipient;\n\t\tuint24 amount;\n\t}\n\n\t/// @inheritdoc\tERC165\n\tfunction supportsInterface(bytes4 interfaceId)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (bool)\n\t{\n\t\treturn\n\t\t\tinterfaceId == type(IERC2981Royalties).interfaceId ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n}"
48     },
49     "contracts/token/ERC2981ContractWideRoyalties.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./ERC2981Base.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\n/// @dev This implementation has the same royalties for each and every tokens\nabstract contract ERC2981ContractWideRoyalties is ERC2981Base {\n\tRoyaltyInfo private _royalties;\n\n\t/// @dev Sets token royalties\n\t/// @param _recipient recipient of the royalties\n\t/// @param _value percentage (using 2 decimals - 10000 = 100, 0 = 0)\n\tfunction _setRoyalties(\n\t\taddress _recipient,\n\t\tuint256 _value\n\t)\n\t\tinternal\n\t{\n\t\t// unneeded since the derived contract has a lower _value limit\n\t\t// require(_value <= 10000, \"ERC2981Royalties: Too high\");\n\t\t_royalties = RoyaltyInfo(_recipient, uint24(_value));\n\t}\n\n\t/// @inheritdoc\tIERC2981Royalties\n\tfunction royaltyInfo(\n\t\tuint256,\n\t\tuint256 _value\n\t)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (address receiver, uint256 royaltyAmount)\n\t{\n\t\tRoyaltyInfo memory royalties = _royalties;\n\t\treceiver = royalties.recipient;\n\t\troyaltyAmount = (_value * royalties.amount) / 10000;\n\t}\n}"
51     },
52     "contracts/token/IERC2981Royalties.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n\t/// @notice Called with the sale price to determine how much royalty\n\t///         is owed and to whom.\n\t/// @param _tokenId - the NFT asset queried for royalty information\n\t/// @param _value - the sale price of the NFT asset specified by _tokenId\n\t/// @return _receiver - address of who should be sent the royalty payment\n\t/// @return _royaltyAmount - the royalty payment amount for value sale price\n\tfunction royaltyInfo(uint256 _tokenId, uint256 _value)\n\t\texternal\n\t\tview\n\t\treturns (address _receiver, uint256 _royaltyAmount);\n}\n"
54     },
55     "contracts/token/IStuckTokens.sol": {
56       "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\ninterface IStuckERC20 {\n    function transfer(\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IStuckERC721 {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}"
57     },
58     "contracts/token/SafeERC20.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IStuckTokens.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IStuckERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IStuckERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
60     },
61     "contracts/token/TokenRescuer.sol": {
62       "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"./IStuckTokens.sol\";\nimport \"./SafeERC20.sol\";\nimport \"../utils/Ownable.sol\";\n\nerror ArrayLengthMismatch();\n\ncontract TokenRescuer is Ownable {\n    using SafeERC20 for IStuckERC20;\n\n    function rescueBatchERC20(\n        address _token,\n        address[] calldata _receivers,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyOwner\n    {\n        if (_receivers.length != _amounts.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _receivers.length; i += 1) {\n                _rescueERC20(_token, _receivers[i], _amounts[i]);\n            }\n        }\n    }\n\n    function rescueERC20(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    )\n        external\n        onlyOwner\n    {\n        _rescueERC20(_token, _receiver, _amount);\n    }\n\n    function rescueBatchERC721(\n        address _token,\n        address[] calldata _receivers,\n        uint256[][] calldata _tokenIDs\n    )\n        external\n        onlyOwner\n    {\n        if (_receivers.length != _tokenIDs.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _receivers.length; i += 1) {\n                uint256[] memory tokenIDs = _tokenIDs[i];\n                for (uint j; j < tokenIDs.length; j += 1) {\n                    _rescueERC721(_token, _receivers[i], tokenIDs[j]);\n                }\n            }\n        }\n    }\n\n    function rescueERC721(\n        address _token,\n        address _receiver,\n        uint256 _tokenID\n    )\n        external\n        onlyOwner\n    {\n        _rescueERC721(_token, _receiver, _tokenID);\n    }\n\n    function _rescueERC20(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    )\n        private\n    {\n        IStuckERC20(_token).safeTransfer(_receiver, _amount);\n    }\n\n    function _rescueERC721(\n        address _token,\n        address _receiver,\n        uint256 _tokenID\n    )\n        private\n    {\n        IStuckERC721(_token).safeTransferFrom(\n            address(this),\n            _receiver,\n            _tokenID\n        );\n    }\n}"
63     },
64     "contracts/utils/Ownable.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// Based on OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n// With renounceOwnership() removed\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
66     }
67   },
68   "settings": {
69     "optimizer": {
70       "enabled": true,
71       "runs": 33333
72     },
73     "outputSelection": {
74       "*": {
75         "*": [
76           "evm.bytecode",
77           "evm.deployedBytecode",
78           "devdoc",
79           "userdoc",
80           "metadata",
81           "abi"
82         ]
83       }
84     },
85     "libraries": {}
86   }
87 }}