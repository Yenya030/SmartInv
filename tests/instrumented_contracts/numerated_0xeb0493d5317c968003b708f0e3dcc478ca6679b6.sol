1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Quest3.sol": {
5       "content": "// SPDX-License-Identifier: AGPL-3.0\n// ©2022 Ponderware Ltd\n\npragma solidity ^0.8.12;\n\nimport \"./openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IReverseResolver {\n    function claim(address owner) external returns (bytes32);\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ninterface IQuest3Data {\n    function getDeath (uint256 seed, uint256 prevLevel, bytes[8] memory stats) external view returns (bytes memory death, string memory ending);\n    function getFail (uint256 seed, uint256 level, bytes[8] memory stats) external view returns (bytes memory happening);\n    function getAdvance (uint256 seed, uint256 level, bytes[8] memory stats) external view returns (bytes memory happening, bytes memory stat);\n    function getMetadata (uint256 tokenId, uint256 level, uint8 journeyLength, bytes[15] memory storySegments, bytes[8] memory stats, uint16 heroStatus) external pure returns (string memory);\n    function generateCompletionImage (uint tokenId, uint level, bytes memory lastWords, uint heroStatus) external pure returns (bytes memory);\n    function generateProgressImage (uint tokenId, uint level) external pure returns (bytes memory);\n}\n\n/**\n * @title Quest3\n * @author Ponderware Ltd (a.k.a. Pondertech Digital Solutions)\n * @notice ERC-721 Quest Tokens (where will your journey lead?)\n * @dev ERC-721 Enumerable Token with fully-on-chain ERC721 Metadata\n */\ncontract Quest3 is IERC721Enumerable, IERC721Metadata {\n\n    string public name = \"Quest-3\";\n    string public symbol = unicode\"⛰\";\n\n    uint256 public maxSupply = 25600;\n    uint256 public totalSupply = 0;\n\n    address public contractOwner;\n\n    address[25600] internal Owners; // Maps tokenIds to owning addresses.\n    mapping (address => uint256[]) internal TokensByOwner; // Mapping from address to owned tokens.\n    uint16[25600] internal OwnerTokenIndex; // Maps the a tokenId to its index in the `TokensByOwner[address]` array.\n\n\n    mapping(uint256 => address) internal TokenApprovals; // Mapping from token ID to approved address.\n    mapping(address => mapping(address => bool)) internal OperatorApprovals; // Mapping from owner to operator approvals.\n\n    bool paused = true; // Pausing stops all user interactions.\n    bool frozen = false; // Freezing stops minting and actions.\n\n    uint256 public MintPriceWei = 0.01994206980085 ether;\n\n    /**\n     * @dev Contains the journey information for the token. Idx 0 is the journey length, Idx [1..14] contains the reveal seed at level of the token at that journey position, and Idx 15 is a flag to indicate if an action is in the `ActionQueue`.\n     */\n    mapping (uint256 => uint16[16]) TokenHistory;\n\n    /**\n     * @dev The number of items a token must reveal to increase their hero status.\n     */\n    uint256 public HeroThreshold = 10;\n    /**\n     * @dev If a token reveals more than HeroThreshold actions, the number of reveals is added to that token's hero status.\n     */\n    uint16[25600] public HeroStatus;\n\n    /**\n     * @dev Reference to the metadata assembly contract.\n     */\n    IQuest3Data Data;\n\n    // Owner Functions\n\n    constructor (address quest3DataContract) {\n        contractOwner = msg.sender;\n        Data = IQuest3Data(quest3DataContract);\n        IReverseResolver(0x084b1c3C81545d370f3634392De611CaaBFf8148).claim(msg.sender);\n    }\n\n    /**\n     * @dev Change the owner of the contract.\n     */\n    function transferOwnership (address newOwner) public onlyOwner {\n        contractOwner = newOwner;\n    }\n\n    function pause () public onlyOwner {\n        paused = true;\n    }\n\n    function unpause () public onlyOwner {\n        paused = false;\n    }\n\n    function ownerWithdraw () public {\n        payable(contractOwner).transfer(address(this).balance);\n    }\n\n    function clearPendingStatus (uint256 tokenId) public onlyOwner {\n        TokenHistory[tokenId][IS_PENDING_INDEX] = 0;\n    }\n\n    function setHeroThreshold (uint256 threshold) public onlyOwner {\n        HeroThreshold = threshold;\n    }\n\n    /**\n     * @dev Set `maxSupply` to `totalSupply` to end minting.\n     */\n    function permanentlyCloseMint() public onlyOwner {\n        maxSupply = totalSupply;\n    }\n\n    /**\n     * @dev When frozen action (and mint) calls will throw.\n     */\n    function setFrozen (bool state) public onlyOwner {\n        frozen = state;\n    }\n\n    // Modifiers\n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not Owner\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(paused == false || msg.sender == contractOwner, \"Paused\");\n        _;\n    }\n\n    // Action Queue\n\n    /**\n     * @dev Actions are placed into the FIFO `ActionQueue` ring and revealed on future blocks.\n     */\n    Action[256] public ActionQueue;\n    uint constant public MAX_QUEUE = 256;\n\n    /**\n     * @dev Actions are queued. The `revealBlock` is the block at which this action becomes eligible for reveal.\n     */\n    struct Action {\n        uint128 revealBlock;\n        uint128 tokenId;\n    }\n\n    /**\n     * @dev `count` is the current length of the queue. `index` is the offset to the first queue item.\n     */\n    struct QueueCursor {\n        uint16 index;\n        uint16 count;\n    }\n\n    QueueCursor public Cursor = QueueCursor(0,0);\n\n    function getQueueLength () public view returns (uint256) {\n        return Cursor.count;\n    }\n\n    /**\n     * @dev Assembles the `ActionQueue` into an array of actions in order (deconstructs the \"ring\").\n     */\n    function getQueue () public view returns (Action[] memory) {\n        uint count = Cursor.count;\n        uint index = Cursor.index;\n        Action[] memory queue = new Action[](count);\n        for (uint i = 0; i < queue.length; i++) {\n            queue[i] = ActionQueue[index];\n            index++;\n            if(index == MAX_QUEUE) index = 0;\n        }\n        return queue;\n    }\n\n    // Quest Actions / Progress Handling\n\n    /**\n     * @dev Indexes into `TokenHistory` arrays. The seed/level data is stored in indexes [1..14].\n     */\n    uint256 constant JOURNEY_LENGTH_INDEX = 0;\n    uint256 constant IS_PENDING_INDEX = 15;\n\n    /**\n     * @dev Reveals the most recent pending action on a token. Packs the result into [seed (12 bits), level (4 bits)].\n     */\n    function updateTokenHistory (uint256 tokenId) internal {\n        uint16[16] storage history = TokenHistory[tokenId];\n        uint journeyLength = history[JOURNEY_LENGTH_INDEX];\n\n        uint level = history[journeyLength] & 15;\n\n        uint prevLevel = 0;\n\n        if (journeyLength == 0) {\n            level = 1; // starting level\n        } else if (journeyLength == 1) {\n            prevLevel = 1; // starting level is always 1\n        } else {\n            prevLevel = history[journeyLength - 1] & 15; // prevLevel is penultimate level in pendingHistory\n        }\n\n        uint nextSeed = uint256(keccak256(abi.encodePacked(tokenId, blockhash(block.number-1))));\n\n        uint resolution = nextSeed & 255;\n        uint deathThreshold = 5 + level * 9;\n        uint failThreshold = 90 + level * 22;\n        if (level == 1) { deathThreshold = 2; } // low chance to die on level 1\n        if (prevLevel == level) { failThreshold = 0; } // must die or advance\n        if (resolution < deathThreshold) {\n            level = 0; // died\n        } else if (resolution >= failThreshold) {\n            level = level + 1; // advanced\n        }\n\n        history[JOURNEY_LENGTH_INDEX] = uint16(journeyLength + 1);\n        history[journeyLength + 1] = uint16((nextSeed << 4) + level);\n        history[IS_PENDING_INDEX] = 0;\n    }\n\n    /**\n     * @dev Reveals up to `maxReveals` pending `Action`s in the Action Queue, then enqueues the supplied `tokenId` if eligible.\n     */\n    function handleAction (uint256 tokenId, uint256 maxReveals) private whenNotPaused {\n        require(frozen == false, \"Frozen\");\n        uint count = Cursor.count;\n        uint index = Cursor.index;\n        if (maxReveals < 3) {\n            maxReveals = 3;\n        }\n        uint revealCount = 0;\n        for (uint i = 0; i < maxReveals; i++) {\n            if (count == 0) break;\n            Action storage action = ActionQueue[index];\n            if (block.number <= action.revealBlock) break;\n            updateTokenHistory(action.tokenId);\n            delete ActionQueue[index];\n            count--;\n            index++;\n            revealCount++;\n            if(index == MAX_QUEUE) index = 0;\n        }\n        if (revealCount >= HeroThreshold) {\n            HeroStatus[tokenId] += uint16(revealCount);\n        }\n\n        uint16[16] storage history = TokenHistory[tokenId];\n\n        uint tokenJourneyLength = history[JOURNEY_LENGTH_INDEX];\n        uint tokenLevel = history[tokenJourneyLength] & 15;\n\n        if (((tokenLevel > 0 && tokenLevel < 8) || tokenJourneyLength == 0)\n            && count < MAX_QUEUE\n            && history[IS_PENDING_INDEX] == 0)\n        {\n            uint tokenQueueIndex = count + index;\n            count++;\n            if (MAX_QUEUE <= tokenQueueIndex) {\n                tokenQueueIndex -= MAX_QUEUE;\n            }\n            ActionQueue[tokenQueueIndex] = Action(uint128(block.number + 1), uint128(tokenId));\n            history[IS_PENDING_INDEX] = 1;\n        }\n        Cursor.count = uint16(count);\n        Cursor.index = uint16(index);\n    }\n\n    /**\n     * @notice Like `doSomething` but set a max number of reveals to perform (must be >= HeroThreshold). If it reveals enough, the number of reveals will be added to the tokens HeroScore. Can be called even if your quest is complete.\n     * @dev Cannot be called by a smart contract.\n     */\n    function doSomethingHeroic (uint256 tokenId, uint256 maxAssists) public {\n        require(msg.sender == Owners[tokenId] && msg.sender == tx.origin, \"Not Owner\");\n        require(maxAssists >= HeroThreshold, \"A true hero must assist many others\");\n        handleAction(tokenId, maxAssists);\n    }\n\n    /**\n     * @notice Places the token into the `ActionQueue` where it will be revealed by actions in future blocks. Reveals up to 3 pending actions.\n     * @dev Cannot be called by a smart contract.\n     */\n    function doSomething (uint256 tokenId) public {\n        require(msg.sender == Owners[tokenId] && msg.sender == tx.origin, \"Not Owner\");\n        handleAction(tokenId, 3);\n    }\n\n    /**\n     * @notice Like `doSomething` but allows multiple tokenIds to be put in the ActionQueue.\n     * @dev Cannot be called by a smart contract.\n     */\n    function doSomething (uint256[] memory tokenIds) public {\n        require(msg.sender == tx.origin);\n        for (uint i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            require(msg.sender == Owners[tokenId], \"Not Owner\");\n            handleAction(tokenId, 3);\n        }\n    }\n\n    // Minting\n\n    /**\n     * @dev Bookkeeping for minting. Note: minting does not guarantee entry into the `ActionQueue`.\n     */\n    function mintHelper (address recipient) private  {\n        uint256 tokenId = totalSupply;\n        TokensByOwner[recipient].push(tokenId);\n        OwnerTokenIndex[tokenId] = uint16(TokensByOwner[recipient].length);\n        Owners[tokenId] = recipient;\n        totalSupply++;\n        handleAction(tokenId, 3);\n        emit Transfer(address(0), recipient, tokenId);\n    }\n\n    /**\n     * @notice Mint tokens to the provided recipient address, quantity per call is limited to 10.\n     */\n    function mint (address recipient, uint256 quantity) public payable whenNotPaused {\n        require (quantity <= 10, \"Quantity Limit Exceeded\");\n        require (totalSupply + quantity <= maxSupply, \"Max Supply Exceeded\");\n        uint256 cost = quantity * MintPriceWei;\n        require(msg.value >= cost, \"Insufficent Funds\");\n        for (uint i = 0; i < quantity; i++) {\n            mintHelper(recipient);\n        }\n    }\n\n    /**\n     * @notice Mint tokens to msg.sender, quantity per call is limited to 10.\n     */\n    function mint (uint256 quantity) public payable {\n        mint(msg.sender, quantity);\n    }\n\n    /**\n     * @notice Mint tokens to an array of recipient addresses, array length must be <= 10.\n     */\n    function mint (address[] memory recipients) public payable whenNotPaused {\n        uint quantity = recipients.length;\n        require (quantity <= 10 || msg.sender == contractOwner, \"Quantity Limit Exceeded\");\n        require (totalSupply + quantity <= maxSupply, \"Max Supply Exceeded\");\n        uint256 cost = quantity * MintPriceWei;\n        require(msg.value >= cost, \"Insufficent Funds\");\n        for (uint i = 0; i < quantity; i++) {\n            mintHelper(recipients[i]);\n        }\n    }\n\n\n    // Quest Info\n\n    /**\n     * @notice Shows where the token is in the `Action Queue`.\n     * @dev `pending` indicates the token is in the queue. `position` is the number of preceding Actions. `revealBlock` is the block at which the action becomes eligible for reveal.\n     */\n    function isPending (uint256 tokenId) public view returns (bool pending, uint position, uint revealBlock) {\n        pending = TokenHistory[tokenId][IS_PENDING_INDEX] == 1;\n        if (pending) {\n            uint count = Cursor.count;\n            uint index = Cursor.index;\n            for (uint i = 0; i < count; i++) {\n                Action storage action = ActionQueue[index];\n                if (action.tokenId == tokenId) {\n                    position = i;\n                    revealBlock = action.revealBlock;\n                    break;\n                }\n                index++;\n                if(index == MAX_QUEUE) index = 0;\n            }\n        }\n    }\n\n    /**\n     * @notice Fetches details used to generate token metadata. `level` => indicates numeric stage of the quest. `journeyLength` => number of revealed actions. `storySegments` => text corresponding to each reveled action. `stats` => attributes collected on the quest. `heroStatus` => number of tokens revealed through `doSomethingHeroic`.\n     * @dev `level` will be in range [0(ngmi)..8(gmi)]. `storySegments` will have `journeyLength` entries unless `level` == 0 in which case it will have one additional element. `stats` indexes correspond to levels - 1.\n     */\n    function getDetails (uint256 tokenId) public view returns (uint256 level,\n                                                               uint8 journeyLength,\n                                                               bytes[15] memory storySegments,\n                                                               bytes[8] memory stats,\n                                                               uint16 heroStatus)\n    {\n        require(tokenId < totalSupply, \"Doesn't Exist\");\n        uint16[16] storage tokenHistory = TokenHistory[tokenId];\n        journeyLength = uint8(tokenHistory[JOURNEY_LENGTH_INDEX]);\n        level = 1; // if quest has just begun, level will be 1\n        uint prevLevel = 1;\n        for (uint i = 1; i <= journeyLength; i++) {\n            uint256 seed = uint256(keccak256(abi.encodePacked(tokenHistory[i], tokenId)));\n            level = tokenHistory[i] & 15;\n            if (level == 0) {\n                (bytes memory storySegment, string memory ending) = Data.getDeath(seed, prevLevel, stats);\n                stats[7] = storySegment;\n                storySegments[i-1] = storySegment;\n                storySegments[i] = bytes(ending);\n            } else if (prevLevel == level) {\n                storySegments[i-1] = Data.getFail(seed, level, stats);\n            } else {\n                (bytes memory storySegment, bytes memory stat) = Data.getAdvance(seed, level, stats);\n                stats[level - 1] = stat;\n                storySegments[i-1] = storySegment;\n            }\n            prevLevel = level;\n        }\n\n        heroStatus = HeroStatus[tokenId];\n\n        if (tokenHistory[IS_PENDING_INDEX] == 1) {\n            stats[0] = \"Pending\";\n        } else if (level == 0) {\n            stats[0] = \"NGMI\";\n        } else if (level == 8) {\n            stats[0] = \"GMI\";\n        } else {\n            stats[0] = \"Questing\";\n        }\n    }\n\n    /**\n     * @notice Fetches the current stage of the journey in numeric terms. 0 => NGMI. 8 => GMI.\n     * @dev `level` is always in the range [0..8].\n     */\n    function getLevel (uint256 tokenId) public view returns (uint256 level) {\n        require(tokenId < totalSupply, \"Doesn't Exist\");\n        uint16[16] storage tokenHistory = TokenHistory[tokenId];\n        uint16 journeyLength = tokenHistory[JOURNEY_LENGTH_INDEX];\n        if (journeyLength == 0) {\n            return 1;\n        } else {\n            return (tokenHistory[journeyLength] & 15);\n        }\n    }\n\n    function getSym(int seed) internal pure returns (uint8) {\n        if (seed & 1 == 0) return 0;\n        if ((seed >> 1) & 1 == 0) {\n            return 1;\n        }\n        return 2;\n    }\n\n    /**\n     * @dev `cartouche` is an array of chevron positions and orientations. 0 => None, 1 => Right, 2 => Left. Data is only valid if `level` == 8.\n     */\n    function getMysteriousCartouche (uint256 tokenId) public view returns (uint8 level, uint8[6] memory cartouche) {\n        (uint256 currentLevel,uint8 journeyLength,, bytes[8] memory stats,) = getDetails(tokenId);\n        if (currentLevel == 8) {\n            int seed = int(uint256(keccak256(abi.encodePacked(tokenId, stats[7]))) >> 141);\n            cartouche[0] = getSym(seed);\n            cartouche[1] = getSym(seed >> 2);\n            cartouche[2] = getSym(seed >> 4);\n            cartouche[3] = getSym(seed >> 6);\n            cartouche[4] = getSym(seed >> 8);\n            cartouche[5] = getSym(seed >> 10);\n        }\n        if (journeyLength > 0) {\n            level = uint8(currentLevel);\n        } else {\n            level = 1;\n        }\n    }\n\n    // ERC-721 Metadata\n\n    /**\n     * @notice Assembles and returns the Base64 encoded token URI containing the JSON token's metadata. Assembled entirely on-chain.\n     */\n    function tokenURI (uint256 tokenId) public view returns (string memory) {\n        (uint256 level, uint8 journeyLength, bytes[15] memory storySegments, bytes[8] memory stats, uint16 heroStatus) = getDetails(tokenId);\n        return Data.getMetadata(tokenId, level, journeyLength, storySegments, stats, heroStatus);\n    }\n\n    /**\n     * @notice Assembles and returns the token's SVG image. Assembled entirely on-chain.\n     */\n    function tokenSVG (uint256 tokenId) public view returns (string memory svg) {\n        (uint256 level, uint8 journeyLength,, bytes[8] memory stats, uint16 heroStatus) = getDetails(tokenId);\n        if (journeyLength > 0 && (level == 0 || level == 8)) {\n            svg = string(Data.generateCompletionImage(tokenId, level, stats[7], heroStatus));\n        } else {\n            svg = string(Data.generateProgressImage(tokenId, level));\n        }\n    }\n\n    // ERC-721 Base\n\n    function tokenExists(uint256 tokenId) public view returns (bool) {\n        return (tokenId < totalSupply);\n    }\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        require(tokenExists(tokenId), \"ERC721: Nonexistent token\");\n        return Owners[tokenId];\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return TokensByOwner[owner].length;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            interfaceId == type(IERC721Enumerable).interfaceId;\n    }\n\n    function _approve(address to, uint256 tokenId) internal {\n        TokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    function approve(address to, uint256 tokenId) public  {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n                msg.sender == owner || isApprovedForAll(owner, msg.sender),\n                \"ERC721: approve caller is not owner nor approved for all\"\n                );\n        _approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(tokenId < totalSupply, \"ERC721: approved query for nonexistent token\");\n        return TokenApprovals[tokenId];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view  returns (bool) {\n        return OperatorApprovals[owner][operator];\n    }\n\n    function setApprovalForAll(\n                               address operator,\n                               bool approved\n                               ) external virtual {\n        require(msg.sender != operator, \"ERC721: approve to caller\");\n        OperatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n        size := extcodesize(account)\n                }\n        return size > 0;\n    }\n\n    function _checkOnERC721Received(\n                                    address from,\n                                    address to,\n                                    uint256 tokenId,\n                                    bytes memory _data\n                                    ) private returns (bool) {\n        if (isContract(to)) {\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                            }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function _transfer(\n                       address from,\n                       address to,\n                       uint256 tokenId\n                       ) private whenNotPaused {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n        _approve(address(0), tokenId);\n\n        uint16 valueIndex = OwnerTokenIndex[tokenId];\n        uint256 toDeleteIndex = valueIndex - 1;\n        uint256 lastIndex = TokensByOwner[from].length - 1;\n        if (lastIndex != toDeleteIndex) {\n            uint256 lastTokenId = TokensByOwner[from][lastIndex];\n            TokensByOwner[from][toDeleteIndex] = lastTokenId;\n            OwnerTokenIndex[lastTokenId] = valueIndex;\n        }\n        TokensByOwner[from].pop();\n\n        TokensByOwner[to].push(tokenId);\n        OwnerTokenIndex[tokenId] = uint16(TokensByOwner[to].length);\n\n        Owners[tokenId] = to;\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(tokenId < totalSupply, \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    function transferFrom(\n                          address from,\n                          address to,\n                          uint256 tokenId\n                          ) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n                              address from,\n                              address to,\n                              uint256 tokenId\n                              ) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n                              address from,\n                              address to,\n                              uint256 tokenId,\n                              bytes memory _data\n                              ) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n\n    function _safeTransfer(\n                           address from,\n                           address to,\n                           uint256 tokenId,\n                           bytes memory _data\n                           ) private {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    // Enumerable\n\n    function tokenByIndex(uint256 tokenId) public view returns (uint256) {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        return tokenId;\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return TokensByOwner[owner][index];\n    }\n\n    // Rescuers\n\n    /**\n    * @dev Rescue ERC20 assets sent directly to this contract.\n    */\n    function withdrawForeignERC20(address tokenContract) public onlyOwner {\n        IERC20 token = IERC20(tokenContract);\n        token.transfer(contractOwner, token.balanceOf(address(this)));\n        }\n\n    /**\n     * @dev Rescue ERC721 assets sent directly to this contract.\n     */\n    function withdrawForeignERC721(address tokenContract, uint256 tokenId) public onlyOwner {\n        IERC721(tokenContract).safeTransferFrom(address(this), contractOwner, tokenId);\n    }\n}\n"
6     },
7     "contracts/openzeppelin/contracts/utils/introspection/IERC165.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
9     },
10     "contracts/openzeppelin/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
12     },
13     "contracts/openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "contracts/openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
18     },
19     "contracts/openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}