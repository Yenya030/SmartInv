1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/JakNFT.sol": {
5       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title: JakNFT OPEN EDITIONS\n/// @author: manifold.xyz\n\nimport \"./ERC1155Creator.sol\";\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                                                              //\n//                                                                                                                                                              //\n//    doxcoko:,;:lccOKdx0d:;cdxdc:;;okkoc;;l:,.';::lccl:ckxlooll:lkoc::lcclcdd:loc:oOkl,lxl';ooccooodkOdlllol;,cxd:ccll:cxOxxoc:dOolocccclllcollocoxxcccol';    //\n//    oxd:lxccoolclldd::dodx:,,cddxc'cxocloollc:c;;oddoclddloc,::ddldc:ccddlodc;lxdc;;:c:oocoxxkdlddldkxl;;;';odOkc;:xd:xKx::c:lolcdo:,:odl'lklcoclOkccc:oo,    //\n//    dxlloc:cxkxl::::;oxdk0d,,cc;lo:cloocldcc:,clcd0x:ldlcccccccllcc;lo:loc',:lodoll,:o:':xxdxl:oooddo:okl,:oclxdoooddxdoolc,,ldlldc,':clxol:;lloocl:;;;okc    //\n//    kdol:clclccd:,l:;oxdod:';:::lddc,cc,ldlooolllcoololoxlcddolol:,,dx;;dxol:oxdlcloddo;:o:,lxdol::l:lxkxlcloc;lc:dddxl,';odddxdccllodkOdldolc:lc:doollxxo    //\n//    lcddlooc:oc:oo::ol,,ldl;;c:cllodlldxolc:col;:lkxcclodlloxx:cl::;cd;'oko;lloxxl;,:do,,cc''ldddcllcclololoxol:cddlc:odccodlloo:,:dkookOollcldo:lo;cdccok    //\n//    ;;ldl::odoxk0c.cxdkxdoc:cl;;cclddllol:,lkkxdocoklldc:ccooodl:cl::ollko;cl:;:ldc;:cc:;:c;;:::ccldoc::ododdlclloc::cool;;cc:c:ldodxdoloccc',ccloccodl:;c    //\n//    xxkOkx:,ldllko.;ol;:oo;;od:ckxc:;:oddl;;:kkloc,dkc,cc,:llollccxd,,ldxo:,,coodxdoccoldd:';cc::cdkxool:,:olodddxodxxc:oooddo;;kOol:,oo::loc:;;cooldl:::o    //\n//    oodllxxol::od:'ldodolcc,;dc:oxo:clodko::cddokl':l;,cc:looxdllc:lc,:l;;cc:cddl:,;ollxxc:c:cdldd:llcokl;dkooxxlo0klddc;',ccoc,:ldxl;,oo;;ooll:;:lollccll    //\n//    ool::oollc:ol;';ldo;:;;:::;ooclxd:,,lxkkdlolooll::lll:;olcll;,:clc;;;;::oxc'cl,;lcldxoodddol;;ol;:doloxxl:ol';ccol;;cc,:oloolclxxool,'''loool::cldolc'    //\n//    o;,:cc:,:oo:co:;dx;,:;;c:cclolcx0c;:',ldolc;c::c,,l:;:ldc;:do;;oxdc:lc::llcc;,:lolkk:,ldddl;'oOdddddl:col;;dxocol;;,:l;::.:xc;l::c;::;:loolc,:dolox0k:    //\n//    ;;cc,:c;';ldloc,l:'lko:c:ldooxxdOOo::lcc;;c;;;'.;olc:,:l;:oxd:,;lc'';:;:lcdko;;oooxddc;cxxc'.:doocld:'cd:cxdlxKklc:ccckx::ooc,;cccllcdxddc:oocdxdodxkc    //\n//    :coo:col:cxo:;;ckdll;.'l:;odlldddkl:dkdo;,cllldc:lll:oOOxl;;;:'..':lol;co:cdxxllc,;;lc,cxocol::,;cxd:;lxxol:col:;:cooldc,looc'.cddkl':doc::lxolool:cll    //\n//    ol;locodcloc;';oxoc;,;ox:,okl.,occoccoodl,.;oc::::cllkOxc:c:dko:lolc:;:ol:ccc:,,;,::cc'cxoodo::occo:;:lddl:lddc,;:;odcclc::oo:lxO0klcdxl;;:ccoo,;:':lc    //\n//    c,;l:;xxllcclccclko;ddcoccOkc,,c;:dxdoo;,,'cc''cdo::ddc:;cdxkdddodoc;:l:c;:ddollloccldoc::l:cdodl:c;,;ol::cllxo;ll:ol,;:olcl::clodlcllxd:ol:lc:::;:oxl    //\n//    ;,:o;'oxxdloolc:dOlcdc,dOxol;;l:.;xxdO0d;co::c,;cc::c,;:,ckkdc;lolddlc,,ldlloxxdodc,ccl:;oxc:dxll:.':ddllcokkd;cdoldd;cdxoc;'ccclcx0xdxlc:,,loccc;:cco    //\n//    :;,c:,:dxxc,:dlcxOo;;;oxlclcldo::cll::looxxollodl;cl:cdxdxko:::cxdxkl:;;oox0Odllloc:c::lc:xOc;cxdlxdllllolccododllooccccxdldlcoo;cooocdkd,;oolddloxxdd    //\n//    ;:c;,:c:ld:;l:,':ddll:;c:ll:xdlodo;lkl::lOKOdllxxo::lxdlocc:;:::cokkkd:;lccoxxc;ldc::,;c;;oxd,,llcc:;coxl,;:;coolol:coc,cdxOl:o:,;;,,:ddlccoodkccdxOx:    //\n//    ,ckc,llodc,;odcloodcll:::odcddc::lllllollddlol;:ooloxd:;lloc;;;coxd:ldl';:;,:olcdoloocco:,:dd:;:;,cdccool,,cll:,;cc::clc::lo:cxo:oc;lol;;c:cl:;:ol:::.    //\n//    dllolloc:cdodkc:;':oxxddddlodl:;:cc:;:c::lxocc:c:cdlod::ollc.':;cd:cc';c;:odoc,';dOodo;:;:ddldo:',dx,;xxc:clldkc,;:,;lxo:ccoloo:xk;colc:oxdo;.,cc'.,,;    //\n//    lc:ddcl::locc:cc,';xOoc:okc:cll,:oooll:,,cccoc,clldolo:;dl;:coo;ckd:cclxo;,'...:olodoollooc;:lc,,clc:lxdl:ld:;cl:,,:dxlcdxOxl::ccolll:;ldxoccolol,';lc    //\n//    c;lxddl::col;.,llllccl:;odcclolcdd:oOklcdo;cdxooolodlol:::xOxdo::dkodo,',,;;:c;:dddloOkoc::llcdxlc:;::loc:oo:cloo,,codccxocdl;coc,'.':ll:;clodxdxo''cc    //\n//    c,;xolocldl:,.;cox:';;';xl,:oxo,;coxdlcoxoclcdxol:ooclc,,;lkd:;:;cdddl,;lxxxkdddl:,:ol:xkl,,,;cxxlol:;';lodocol:oooxOOxlccloccl:;cldl;lo;;oOxloododdlc    //\n//    ,:odlllxdcc;odl:,::;od::doc;lxo:lcco:,,cd;;dl:co:cOkkOocloxkxoolcolcllcclcccldkc,cloxo;;oo:ll;cxx:c::lc::lc::do;oocxl;c::olldd:'.coccldc;:coccclolcc::    //\n//    olloddollol:oc:c:llcookdcolldl:coddxo,:ooccokocc',ddodolloooxl:c:oxxolcloclodxddxkxdxdllooooo;;ll;:c:;',ldc:lo::dd;lxdclddxxxo;;od,.clcoo;:o:'cx:'cccd    //\n//    ::oo:cl,,oc';:llcol;clodxccol;:xdlkOc;lo;,cdOxoocollxd:co;,;cl;,looxkd:,;cooodolxdlcc:;:;ckkl',c:ckkc:lxxo;.:dko:kd:dxccoc:codl:cloxddoodoxocdxxxddolc    //\n//    l:l:'cl::ldc;:lc;cl;:cclc;,cdlclc;:l'.;dllxkxlccdc,cdo:;;',cxxolclo:,'';olcldo:';xkc';lo,':llclccloxdlddoc;lxxOklcc::l:;oc;lc,:clollc::dkdl:loxxlldo;,    //\n//    odc:cd:,::odoko:;:loodc';oodkxc:coc;,:c;colc:ccldlc:,:ldkoccolc:lxo:;'cxlclcl:;,cxc;;ckOdcccccdxoloxkOOkko;:;,:;:ddlxd'':cdoc;:ocokd;';dOo,;l::::odl:;    //\n//    lo:,ld:';xOxxddoll:cl;',:cddxx;,cl;.,;;:;;xd;:llokdol';loxl;;:;;coccdlloll:,.:kllx:,;coloddxxooxdlolcxkdooodocccokxddo;.,lxdol;;::xxlcdkd:;::::clxOxc:    //\n//    ,;:lccxo;ldodddllxococ'';dOdllccol;::;:lcokoldl;cxxo;,lc:c;..:docoollcldolllcoxollcxxdxdldko:lxdccc',ool:ckdl,,xKklloxl,cdo:;o:';oodoccoxx:;oolcllldxd    //\n//    c;:dl,cdlc:::::;:lxOklcl;;lo:,,:ccl:loloxdlcll:cdoclloOd:ldl;:xdcloc,:cll,lOOOdod:lOd:lo:'cdoxOdol::lldd;';;;;:kkc,coc,,loolcc,.;ooxkc;clxxxkdoc;clkxd    //\n//    oo::oc;dd:llol:;,,,odcxOl';xko;,clol:cclcldllooooolc,;lxkOOdoolod:;;,,ll,;xklcc:do;lol:,',clcdxdkc;oolxx:l:,cclolc,cdc;;xo;dl;;.,ddddccolodooldoc:;c:;    //\n//    koc:lo;,lc:oc'..:xo:lc::::clxo:;lxxkkolxdddoxoodl:,coo;:ddxxoc:dxdlcc',;'lkkd:,'cdol:coc',lccl;cxl,'odcc:lo;:oxdxOo;:ldxxo;;:xkl:ll;lxxdoxdoocc::lc,cx    //\n//    koddlccclolooll:oOdc::dOocdxo;;cxocoocdx:,ccol:looddl:clooxOx::dc::,cl:;;;dKOdlcoxl::;lko:l:'.,oddl,:cldc'...':c:ll:lodddl:'.cd:';okxxxooxo;ccccodccox    //\n//    dxl;:cldccllOO::ol;;:lcol:cooc:lddoo;,::;;coocdl,,:::ccclodlcddxo'.'',:c::odc;;cdo:'.';:dxdooc';c:..;cooc.....'codkxxxkOOdlo;.clcdlcdododd;:doldkkxkx:    //\n//    llcododd,;o:cxocc:::coodc,clxxd::l:ll;,..',:odo;,:codccldl:,';ccc,... 'l:cdolcldc'lo,.;::ooloo,..  .,:lx:...   :xkdoodxxkkxxo;.;oxdloc:c:,:oloolooloo;    //\n//    :okdlokd;,:lcc:;;:coxxod:'cxdddc;odldd;    .cl;:;:dl;ldxkd:;'......    ,oo:;loll:'... .,:::clc.     .:dd'      ,codxxdxkdoodd:,codxldkc',ooooodxxxdodd    //\n//    ;cdlcddl:,:odccxdloxkxdo:;llcldolc;cllc.    .,,:lloo:,ldc:ll,...       .:oxkoc:,..     .;cloxl'. ..  .cc.      ..cxOkxkOlcddodxl:,,,;oc',ldxllolodc;oo    //\n//    ;cc:lol;';ddc;clldc;loldkd:,,;dOxxxkkkx,      .':lc;clc::cdd,...        .lkkxo:.       .:::odl;'.     ..        .'oOkxxklldllooc::clc;cl;,,cxdol;:c:ld    //\n//    :;',,cdc:k0Oxdxd:;oddlcdkkdccoxkkkkkkkk:        ,l;';c;;loxo;'..        .,okxd:.       .cc;ldxc.      ..         .l0Okkkxdl:ox:'lko;cxdlollxocollddl,,    //\n//    ,;,,cccok0dc::x0l:xx::doddlcccdOkxxxkkkc        .,ldlloloxdc,'.          .,ldl.        .;ooccd,       ..        ..cO0OOOkoldo:;coddoxdlxxc,coodoxllxc:    //\n//    cccll;::ll::cccddoodc;dkdldxllxxxxxxxkkc.        .cxkOOkxxo:,.     ..     .;:'.         .,dxc,.                  .cOOkkOOl';ll:cd:;okxcldc,lxxxlooxkll    //\n//    kddc:lxxkoolclc;o0klxxdxdokkldkkkxxxddxl.  ..     .okkkkxxl;;.    .''.    .'...   ..     .lko'                   .;xkkkkOx:,:l::l::odkxclc:lc;;locool:    //\n//    c;l:cl::okklcc,:kOkllxdxoclxddxkkkkkkkkl.   ...    .ckOkkx:'..    .,;..   ...     .;.     'oc.                   ..cxxkdldc:ooolcodl::ccoc:c::cl:,cooc    //\n//    oollxo:cdxodxl:cdOdldc:dxodllxxxxxxxxxx:.  .....    .,cxkd:,.    .,::,..   ..     ,l,     .,'.                     'oxxkOOxlxOkl,dkocllcclc,;collllool    //\n//    clc;l:,lo''llcooclxl;lc;:oxookOkkkxxxxd,   .'';;.     .;ol;'.    .;;;'..  ..     .:o;.           .      .  ..      .lxkOOkOkOxddc:cdd::oocclol:,cdoold    //\n//    ;od:odc;l;;xo,,llld,:do:;clldOOOkkxdxxl.  ....;o:.     .';'.    .:;.'...         ,dxc.          ...     .  ...    .;xOxdkxdxdlll;:oxxlododoooccodc:xxl    //\n//    lOkol:cdxc:olllodxdccdxl:loooxOkxxxxdxc.  ....;xd,.      ..     ;dc'...         .lkko,.         .;'    ... ...    .lOOkxOddxcccooc:okkkocccllokkocl:lx    //\n//    :c;:lxddx;:olccoddxd;:lcco:lxxkkxxxxxkl.  ..'.:kOc.      .     .lOx;...         ,dkkx:..       .,c'.   ... .'.     .cxdcddlcoocdxxokx;;cdkdcokkdxOd:ox    //\n//    loddodlcl,,;:olldlokc;llcllxkxkkxxxxkOc.  ....:OKk:'.          ,xOkl'..        .lxkxxl,.       .:o;.  ......;,.     'll:cccdOd:cdolod:,;dOxcdOxxxkocol    //\n//    ,;:llcoxl,ll;:oxxc;dx:lkddkkxkxkxxxkOx'   ..''cxxxo:'..       .oOOkxc'.        ,ddddol:'.  ....;dxc.. .....'l:.    .,ld:,:lkd;.,ool,.codkxc:cdkO0Kklc:    //\n//    lo;;,cxo;okxococco:;ddlxddkkkkxkkkkkkl.   .'',coddxd;..       .dkkkkxl'.   ...'lddxxdooc'. ..'lxxxo;.......:dl.     'collool:;,:::c;:ooodOOdl;;cldko;:    //\n//    kkccodoloxdloc::;look0OkkOOkkOkOO0kkkc.   .'',cdddxkxc,.     .,xkkkxddl,....':oddxxxddddc,..;ldxdodo,.   .;ldl'     .;odxlcdOOoc:;:lkOxlcdkl,;ccloc;;l    //\n//    olc:dxl::lc;cc:;,ldldoldxxOOOOkkOOkkx;    .'',lxxxxxkxoc'.  .cdkkxkxddoc;,;clooooddddxxdoc;:oxxxxxxdl::::loool'.    .cdxxl;::dkc,;::ooclooc:c,;olkx::o    //\n//    c:lkxc;ldc:lxdc:cxo:odc:cdkOkkxxxkkkd,   ..'',okxxxxddddo;..cdxxxxkxxkxdoclooooddddooddddoloxkkkxxxxdddddddddl;.    .:dxxl;:;;oc;l:;c;,,ckl:ooolokdcdx    //\n//    o:;coo;',;:ccco::xxxdlxc:xkkkkxxkkkxo'   ....'cddddddxddxdodkxxkxxkkkkkxddoooodkkkxdooddddddxkkkxdddddddddoooo;.   ..:odoc:lc;co::od::dclOo;clokdlolcc    //\n//    coddc'cooxldxcdlldodoldookkxxdddddddl.   .....:olloooodddxkkkxxkkxxxxxkxxddoddxxxkOOOkxxxkkxddddodddxxdoddoool,.  ...cdlcclodc,cc;;::cxdclol,,cdkdodol    //\n//    lox0o;ldxd;;oc:xx:,;;;'.;xkkxdddxxxd:.   .,,'':dddddoooooddddddddxxxkkxddxxddxxdxO0K0Okxxxxdoodddxxddodddoooo:'.    .ldcooox:',:coc:c;cdkdldookxxdodc;    //\n//    lkddo;:xkxlc:cloloooc:oxkkkxxxxkkxxxc.   .,,,,cdxkkxxxdoooodddolcldkxdoodddddxxxxkkkkkkkxxdddddxxxddooddddooo:..    .cooxkOkololokxo:''okccxkl;;ldkOl,    //\n//    lkko:lxOxlxkl;,'.,cooodxOOOkkkxkkxxxc.   .;,''lxxxkkxxdooooooolc:;;:cclloooddxdolc:;;cdxxdddddxxxddoooddxxddxo;.    .,;,;;clcododdxxc;:cdl:lc;:kOkxc;c    //\n//    dodl:dkddoxo;:llxkc::lxkOOkkkxxxdddd:.   .,;',dkdoollcc;,,,''',,''',;::::::;;,'.......','',,,,''''''''',,,,,,''..    ...  ..,loo:,;:coooxdl:cooodoc:dd    //\n//    lxl;:dko::xkoclccoxo:ldodxxxxxxxdddx:    .,,,;lc;;,,;;,''..........................               ..............           .,dxxooxoodlodcllldddxkl:cd    //\n//    l:coc::l;,lddolllllc;;'.';:;cc::;;,'.    ',,,,...,,,,,'...........                                .                        ';::;:ldolocoko:,:cldoodc',    //\n//    c;lxlcoxldx;lOxodxoldo;;oxdol;''..       ...............                                                              ..  .'',dkd:;c:;:lxd:cox0kokO:,c    //\n//    :;;oxlxOoxOooocc:oooxx:,ldd0k;......                                           .  ....,,...',,'',,:c,;;..':;.......    ...,;:lkkc::lxc;xOkkkdxklcoloxo    //\n//    oxddo::oxdoooodc';cldc,:llcoo;.                              ......  .;:;;'.;c:ccdoccldxxc:oxdc:oclxodx;;codlllc::::c:'';lxxdk0o';lllodloxxxkdc'':lddl    //\n//    xdcdxc;;,;,odlkxlcldl;:lcllldoc:'.''.....'';'.'::;l;....:oc:ll:,',;;;ldollocdkdxOkxdkdclkd:oOoll,,,;ddddldOxddooolxOxl:;clcxkddo:cc;:xkl;:c:loc:;;coox    //\n//    ccccccc:,;lll;:o:.:Oxloodl:lxxkdlcccod:,:oxko:oOOddoclc,ckxc:lxo,;l;:xklcollodl:lkkkOkkOOOo:codddoccokdoodxddxdoooddodxdl;;coc;odl:;cdd:'';::c:okc';cd    //\n//    docllcldo::co:'lx:;cld:'lc:l;cdolodoll:'.:oo:'lkxxd:okc,:okd;,cc,lxdooo:,:dOdcc;;dkxkkxOkllo;,lcco;;ll;:lllcol:oxlldxddxlc;;oc.;olc,,dkdl',dd;:llodold    //\n//    lllo:,cl;okoll;cd:',:olco;;loc;ll;locoxddxdol;;:odollodxocdxoc,;loc:lc:l;,lxdcc;:xdxxdddolcolcl,'lo:;'';oOl,:lccl:ll;ll:;,,;loolodkd:lkOo:oo:,coxd:cl:    //\n//    xdxdcoxdlcol,:ddllccddloolddlc;cclddodl;:olld:,:lcc:coooc;:clc,'lxookx:clcx0d:loxold;.;::loxxlc;:oxl::::ldoolc:ldll:.'ldlccccxdoo:loc:ll,;lc,..'cdl:cl    //\n//    d00lloldOkolodo::cloolcoxolc,;llodolccc;odc:cloc,;;:xklddlooxOOdocdxcccll,:dolloo::::c:;,:odolodolccdollcdoc:dxdlldol:;;lc:,;oolol:xx:c:'ldlcldocllccl    //\n//    odxccdodxdldOdl:;:docll:':dklcc,,;lddxdodxc.;kkc;;coooooool;:oc:lxoclddl::dkkdc::cllkdcol;:ddccol,;::lxkccldxllc,,;ldo;,:dl;ldlclloxoolocckx,,dl;:odox    //\n//    dllc:ldool:;c:::,:lclxdl;,:olllooloccdkdcodooxo,;cckOoldollcol:clccdollccclodocccoookc.;::clodo:locodcll:l:cddo:'',,cdlccc:lc:lol;ol:k0xodko':kd:ldxlo    //\n//    lloxolddooc:,,ccc;;dxdxxl;',:lloo:ldococ;,;oxlc:clccooll;:xoc;;o;.'oddolldl:c:cc::ldo;,locldclolxd;,cl:;ddloc::;::od:;cdc,;codo;cxd:;oxdkkodxol::ocldc    //\n//    :;:lc:loclc:,:lcclolldko;:;:d::c,'x0odxoclool;;:oko;lo,.,do;:lloc,;oxdlclc,.'cdoooc,;:col;cdc:occo;:doooodo:;;ol,:clc,ldclooxoclxdlcdkoclllccll:;colol    //\n//    d:;lldOl.'lc:lkxcco:cxo:c:;co:;c,'c:;dKO:,ol',:ldxo:ddod:cxlloclddc:cccdl:oodoolccc:c:cc,coodcodoxolll:coc;:cldolodlddoc:cclo:.,cl:;lxxccoolloc,:oxdc:    //\n//    :;;oxooo:;xOddoccl:cxd:cdl;:ldd:,:;;cool:;l,;xxc:odcdOdc:odccllodo:,lxddxxdlcodo:cdodxdl:clxxlcxxolc:ccoolc:cdl;cc::ldldoclc,;:cloxkc:o;.:l;;ll;,:llcc    //\n//    ::cl:cloo:;ol;cc:c::loc:;:c:lxl'cl,:cc,;::lccxxocc:,:oxdooxklckOdoddook0xl,.,l:;:lkxoxdc:;;:oxdol;:llokklc;;:lc:cod,,ooxOooxxxlodc:llll;;dxllc;cclldo;    //\n//    :',;,;cod:,lo:l:;:looddxxl;:ol::oc,ol,,oxodc';ldko,,lcck0kxdoooOOxkkxcod:;;,;clc;lxoodolc:l:,dkdllxkoldxo:col;:od:coll;:dOOxxlcol;;xklldddxlokd:''coc;    //\n//    :;:lcoolollooc:lolldl:;dKo;cookxddc:coodd:cccc;lx:.'ol:ddoolll:dOxollcoOdccclcll;,,',:c,'cc;,okoc:lkxcclodlc:,::;::ccc:cldlcllldd,.cd::oxO0dlxkxoccdd;    //\n//    Kkxdk0kkdcldoc:lc:cccc:cdkxxxdoll::c;::;;:c,,odk0o';dl,;ldxollclc;looolxdcllccc:ccol;::';dxc,c:',:loolcodoldddl;:c,,clcdoll:;dxdko';:ll::cdko:lkko:lc'    //\n//    xd;:oodl,,lxkl:cc;;cc':xxOXO:cxdodxxddd:':ocldcodc;ldl:lxo:ldoc,c:;oool::,l0kdlldxdc:;;;oOxc;:cl;:d::dlc:;lddc,,;clc:::;cxocoocokxolclxdlldxoclxkdlxkd    //\n//    ooc;cxdc:;:oc;coldo::ccloxko;:doldo:ldd:.':dkoccc,;oxoclxc;;:o:;dx;;odc:dxllollllllol;cccdlccldo::dddxlllccldc:l:;;,,:lldkkdddolcoxdodxdccoxxoox0kkkkk    //\n//    kxo;;ol;;''oo;,:dkdl:oxllddo::lcloxxddol:,ldoc';;'::cdddlcoloo::ox:,lxd::l:,;clc:olcdlcoc;:ododdoddcokc;oodocllxko:;okoodoo;:odl:ldookxddkOdl:.,oxo:cO    //\n//    dodocccc:';oookdcclloo;;ldOxclo::odo:oxol:oxc:llcldococ;cdl:ccddlldlcdk:.':looxl'coccdkxlcdk0OocllccdOl:doloo:,loc,:KXdoo::lccllOxolc;:oodxoclcldool:l    //\n//    kc;odoocc;;loxdcokdloc:ldldxlc;cdkdcoxdoool::ccdocoo:clcdkxo;lxc',lkxcdx,'lkc,;:lo:,,cdoodkl:dl':c,cxolxl;colxkkd;;ddodoccccdd:cdddddlccclkd:c:co:ox,'    //\n//    :lodddo;clooloddldddlcxdc,',':coocloxdlloc,,okood:,lc;codloxccdl,:xdooxxdox0d;:ollll:,cc;cxl'::,;:::ccooddc;:cdOx:cdc:ollxoollc;:c:,:odc;cdc.,dxl:cdl:    //\n//    ccc::cddl:c::dkl,clddoko,':l:;cocodxlll;cllcclldoccol;colcod:'co;:odkOkoccool:lxl;cocccl,.lolllclkd:;:oxoc:dx;:l:ldl;:c,:ol:;;:lo:';:coodoll;:dl:odo;c    //\n//    :''''colldxc:ooc::colclldko;:lc;codo:c::;;dc:okk:':,;c,;dolxo';o:,clxx::o:cddlcxo,:coOkdc,,;ldxxxxo;;:colc:okccllxoccclcll:c:lxd;;lc;lo:cc;cllddcco:cd    //\n//    c;';ccodooodollxo,;:,;lldddd:;c;:lldddllx:'lxodxo:;,,:clc::::..cclocdkdcc:;;lkdl::cloxxo;;lccl::oc,:::clocldkl,,ol:lclococ:xd;cd:,lxo:cxdclocll::c,.;l    //\n//    ll,';coc;;,,oxocllclllddodd:';doloolddllolcoo;:olcc;;llllc::oc;::,,cdodxd:'':odc,;:c:,codkOkoc::ol,,.;lc;:ccloc,lol;;xdclccolcloldxoc;coxc,;:cc,:l,,ll    //\n//    ;:clc:l:cl,.;lcoxd;;llxkodxc'cOolkxllocck0xooocc;;clldo:ldloOkocol;:oddokxodl;lool::cldlcoc;:ol,:ccddl::coo::od:;c:;oO0dclcoodkxc;,coldd::dxldxooxolol    //\n//    odoododdllol::ldkx:,;:doolcloolccc:dkc;;cdccc;coccl:dxl;'ldc:l;;odd:cOOoclclooo;,dxc;ll,':oocc:,lccdocc:;oxxkdldxc:dxllooocodc;:oo,cK0occoxdcloolll;;o    //\n//    cloo:;c:;oxol:lcco,;:::;ccdd:..lxl:oxlcoollcl::oodxdxxolc,;ccll,,ldddOOo:cc:cc:;;oc:c'.,;:oOxcc::;;lc:l:.,lldc;c:;cxkxxo:odll:cdlc::oxlcol:lodo;':clxl    //\n//    :llld::oxOdlocldoclo:,''loodl::lddcolldo:;loc;cOkoxd:cc:cclxxodl,ldccodc;,:lxo;lo;.,::ccdl;cdl::cdxodko:clclc;;;:lccxkc.'dd::ccc,;:llldol:.':dx:,lkOkl    //\n//    oxdoxllkdc:ol;::l:;dl,,;d0Ox:;:;;;ldd;,c,;xl;ccoxOkol:lddllodod:.:dolo:.,::cdoldxo,,col;cxdoddl;odldlcllloloc;oxddo:cOxldxddooddo;:oocllloocldc';cdxld    //\n//    :codo:;oOo:xd:c:;cokd;:clxo,:l;cxdloodoc,'ccc:;oocc;ldlldl;:ocllclodoll;;looo:cOdcoc:dxoll,;:,';oc:c;cod::occoloooxo:dxoOddOolddcoooolodc'ckdlldollddl    //\n//    dc:lodl:c:lOkddxdlcdkooocll,;dc,coclclolo;c0Kxlodcccodolc;,:;:lool:cooxo:;;:,.;dcokdc;lxlcdl,,;coloxl:llloloxc;:,'cl:oddocloxdlllloddloxxoxOoclc::;:xk    //\n//    c::;:odl,,',llldocooddccoxddkko,.lxo;:lodcld:,okccdc:ddddcc::ll;cxlcdxkxc;clc::loOxdl;okxddc;locc::dl:olcl;;:,:l:c;;lll:clcoxocccooodxxoxxol::ccoxxoll    //\n//                                                                                                                                                              //\n//    JakNFT OPEN EDITIONS                                                                                                                                      //\n//                                                                                                                                                              //\n//                                                                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\ncontract JakNFT is ERC1155Creator {\n    constructor() ERC1155Creator() {}\n}\n"
6     },
7     "contracts/ERC1155Creator.sol": {
8       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract ERC1155Creator is Proxy {\n\n    constructor() {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4;\n        Address.functionDelegateCall(\n            0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4,\n            abi.encodeWithSignature(\"initialize()\")\n        );\n    }\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n     function implementation() public view returns (address) {\n        return _implementation();\n    }\n\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }    \n\n}\n"
9     },
10     "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
12     },
13     "node_modules/@openzeppelin/contracts/utils/Address.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
15     },
16     "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "remappings": [
22       "@openzeppelin/=node_modules/@openzeppelin/"
23     ],
24     "optimizer": {
25       "enabled": true,
26       "runs": 200
27     },
28     "metadata": {
29       "bytecodeHash": "ipfs"
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "evmVersion": "london",
44     "libraries": {}
45   }
46 }}