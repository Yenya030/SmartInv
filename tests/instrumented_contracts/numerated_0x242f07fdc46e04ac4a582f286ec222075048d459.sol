1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "contracts/Migration.sol": {
17       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\n/**\n * @title Migration: Contract for Migrating MRI tokens over to the MFC token\n */\ncontract Migration is Ownable, ReentrancyGuard {\n    \n    \n    bool public isWithdrawEnabled;\n    bool public isDepositEnabled;\n    uint256 public swapRateMultiplier;\n    uint256 public swapRateDivider;\n\n    mapping (address => uint256) public migratedMRI;\n    mapping (address => uint256) public totalMFCdue;\n    mapping (address => uint256) public withdrawnMFC;\n\n    IERC20 public MRI;\n    IERC20 public MFC;\n    \n    \n\n    event WithdrawnMRI(address indexed user, uint256 amount);\n    event WithdrawnMFC(address indexed user, uint256 amount);\n    event DepositedMRI(address indexed user, uint256 amount);\n    event EmergencyWithdrawMFC(uint256 amount);\n    event WithdrawsEnabled(bool status);\n    event DepositEnabled(bool status);\n    event SwapRateUpdated(uint256 swapRateMultiplier, uint256 swapRateDivider);\n    event TokenSet(address tokenMRI, address tokenMFC);\n    error WithdrawMFC_NotEnabled();\n    error DepositedMRI_NotEnabled();\n    error WithdrawMFC_NothingToWithdraw();\n\n    constructor(address _MRI, uint256 _swapRateMultiplier, uint256 _swapRateDivider) {\n        MRI =  IERC20(_MRI);\n        swapRateMultiplier = _swapRateMultiplier; \n        swapRateDivider = _swapRateDivider;\n    }\n\n    /**\n     * @dev deposit MRI tokens to get the MFC MFC tokens\n     * @param _amount: Amount of MRI tokens to migrate\n     */\n    function depositMRI(uint256 _amount) external nonReentrant {\n        if( !isDepositEnabled) {\n            revert DepositedMRI_NotEnabled();\n        }\n        bool success = MRI.transferFrom(msg.sender, address(this), _amount);\n        if( success){\n            uint256 MFCAmount = _amount * swapRateMultiplier / swapRateDivider;\n            migratedMRI[msg.sender] += _amount;\n            totalMFCdue[msg.sender] += MFCAmount;\n            emit DepositedMRI(msg.sender, _amount);\n        }\n        else {\n            revert();\n        }\n\n    }\n    /**\n     * @dev Withdraws MFC tokens from the contract\n     */\n    function withdrawMFC() external nonReentrant {\n        if( !isWithdrawEnabled) {\n            revert WithdrawMFC_NotEnabled();\n        } \n        uint256 withdrawAmount = totalMFCdue[msg.sender] - withdrawnMFC[msg.sender];\n      \n        if(  withdrawAmount == 0) {\n            revert WithdrawMFC_NothingToWithdraw();\n        }\n        withdrawnMFC[msg.sender] += withdrawAmount;\n        bool success = MFC.transfer(msg.sender, withdrawAmount);\n        if(!success)\n            revert();\n        emit WithdrawnMFC(msg.sender, withdrawAmount);\n    }\n\n    /**\n     * @dev Withdraws MRI tokens from the contract\n     * @param percentage: Percentage of MRI tokens to withdraw\n     */\n    function withdrawMRI(uint256 percentage) external onlyOwner {\n        bool success = MRI.transfer(msg.sender, MRI.balanceOf(address(this)) * percentage / 100);\n        if(!success)\n            revert();\n        emit WithdrawnMRI(msg.sender, MRI.balanceOf(address(this)) * percentage / 100);\n    }\n\n    /**\n     * @dev Owner Withdraws MFC tokens from the contract in case of emergency\n     * @param percentage: Percentage of MFC tokens to withdraw\n     */\n    function emergencyWithdrawMFC(uint256 percentage) external onlyOwner {\n        bool success = MFC.transfer(msg.sender, MFC.balanceOf(address(this)) * percentage / 100);\n        if(!success)\n            revert();\n        emit EmergencyWithdrawMFC(MFC.balanceOf(address(this)) * percentage / 100);\n    }\n\n    /**\n     * @dev Enable withdraws\n     * param status: Boolean to enable or disable withdraws\n     */\n    function enableWithdraws(bool status) external onlyOwner {\n        isWithdrawEnabled = status;\n        emit WithdrawsEnabled(status);\n    }\n    /**\n     * @dev Enable deposits\n     * param status: Boolean to enable or disable deposits\n     */\n    function enableDeposits(bool status) external onlyOwner {\n        isDepositEnabled = status;\n        emit DepositEnabled(status);\n    }\n\n    /**\n    \n     */\n\n    /**\n     * @dev Sets the swap rate for the migration (therefore: 0 < swapRate < 1 or swapRate > 1 )\n     * @param _swapRateMultiplier: Multiplier to calculate the token migration rate\n     * @param _swapRateDivider: Divider to calculate the token migration rate \n     */\n    function setSwapRate(uint256 _swapRateMultiplier, uint256 _swapRateDivider) external onlyOwner {\n        if( _swapRateMultiplier == 0 || _swapRateDivider == 0)\n            revert();\n        swapRateMultiplier = _swapRateMultiplier;\n        swapRateDivider = _swapRateDivider;\n        emit SwapRateUpdated(_swapRateMultiplier, _swapRateDivider);\n    }\n\n    /**\n     * @dev Sets the start time for the migration\n     * @param _MRI: Address of the MRI token\n     * @param _MFC: Address of the MFC token\n     */\n    function setTokens(address _MRI, address _MFC) external onlyOwner {\n        MRI = IERC20(_MRI);\n        MFC = IERC20(_MFC);\n        emit TokenSet(_MRI, _MFC);\n    }\n\n    /**\n     * @dev Returns the amount of MFC tokens that can be withdrawn by the user\n     */\n    function getWithdrawableTokens(address _user) external view returns(uint256 withdrawableTokens) {\n        return totalMFCdue[_user] - withdrawnMFC[_user];\n    }\n\n}"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": true,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     },
37     "libraries": {}
38   }
39 }}