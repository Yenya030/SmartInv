1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ShibaDogeWarzone.sol": {
5       "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n\npragma solidity ^0.8.13;\n\ncontract DOGEWarzone is Ownable, Pausable, ReentrancyGuard {\n    IERC721 public DOGE_NFT;\n    IERC721 public SHIBA_NFT;\n\n    IERC20 public ShibaDoge;\n    address public treasury;\n\n\n    address public signerAddress;\n\n    bool public stakingLaunched;\n    uint256 public stakingEndTime;\n\n    bool public depositPaused;\n    bool public isWithdrawPaused;\n\n    struct Staker {\n      uint256 currentYield;\n      uint256 accumulatedAmount;\n      uint256 lastCheckpoint;\n      uint256[] stakedDOGE;\n      uint256[] stakedSHIBA;\n    }\n\n    enum ContractTypes {\n      DOGE,\n      SHIBA\n    }\n\n    mapping(address => uint256) public _baseRates;\n    mapping(address => Staker) private _stakers;\n    mapping(address => mapping(uint256 => address)) private _ownerOfToken;\n    mapping(address => ContractTypes) private _contractTypes;\n    mapping(address => mapping(uint256 => uint256)) private _nftYield;\n\n    mapping(address => uint256) public spentAmount;\n\n    event Deposit(address indexed staker,address contractAddress,uint256 tokensAmount);\n    event Withdraw(address indexed staker,address contractAddress,uint256 tokensAmount);\n    event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\n    event WithdrawRewards(address indexed staker, uint256 tokens);\n\n    constructor(\n      address _DOGE,\n      address _SHIBA,\n      address _SHIBDOGE_TOKEN,\n      address _treasury,\n      uint256 _baserate\n    ) {\n        DOGE_NFT = IERC721(_DOGE);\n        _contractTypes[_DOGE] = ContractTypes.DOGE;\n        _baseRates[_DOGE] = _baserate;\n\n        SHIBA_NFT = IERC721(_SHIBA);\n        _contractTypes[_SHIBA] = ContractTypes.SHIBA;\n        _baseRates[_SHIBA] = _baserate;\n\n        ShibaDoge = IERC20(_SHIBDOGE_TOKEN);\n\n        signerAddress = 0x5aBEF98fdD9a83B1c8C90224F86673959C19C701; // frontend signing address\n\n        treasury = _treasury;\n    }\n\n    \n    /**\n    * @dev Function allows admin to pause reward withdraw.\n    */\n    function pauseWithdraw(\n    bool _pause) external onlyOwner {\n      isWithdrawPaused = _pause;\n    }\n\n    function depositBoth(\n      uint256[] memory dogeIds,\n      uint256[] memory dogeTraits,\n      bytes calldata dogeSignature,\n      uint256[] memory shibaIds,\n      uint256[] memory shibaTraits,\n      bytes calldata shibaSignature)\n      external {\n        deposit(address(DOGE_NFT), dogeIds, dogeTraits, dogeSignature);\n        deposit(address(SHIBA_NFT), shibaIds, shibaTraits, shibaSignature);\n    }\n\n    function deposit(\n      address contractAddress,\n      uint256[] memory tokenIds,\n      uint256[] memory tokenTraits,\n      bytes calldata signature\n    ) public nonReentrant {\n      require(!depositPaused, \"Deposit paused\");\n      require(stakingLaunched, \"Staking is not launched yet\");\n      require(block.timestamp < stakingEndTime, \"Staking has ended\");\n      require(\n        contractAddress == address(DOGE_NFT)\n        || contractAddress == address(SHIBA_NFT),\n        \"Unknown contract\"\n      );\n      ContractTypes contractType = _contractTypes[contractAddress];\n\n      if (tokenTraits.length > 0) {\n        require(_validateSignature(\n          signature,\n          contractAddress,\n          tokenIds,\n          tokenTraits\n        ), \"Invalid data provided\");\n        _setTokensValues(contractAddress, tokenIds, tokenTraits);\n      }\n\n      Staker storage user = _stakers[_msgSender()];\n      uint256 newYield = user.currentYield;\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(IERC721(contractAddress).ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner\");\n        IERC721(contractAddress).safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\n\n        _ownerOfToken[contractAddress][tokenIds[i]] = _msgSender();\n\n        newYield += getTokenYield(contractAddress, tokenIds[i]);\n\n        if (contractType == ContractTypes.DOGE) { user.stakedDOGE.push(tokenIds[i]); }\n        if (contractType == ContractTypes.SHIBA) { user.stakedSHIBA.push(tokenIds[i]); }\n      }\n\n      accumulate(_msgSender());\n      user.currentYield = newYield;\n\n      emit Deposit(_msgSender(), contractAddress, tokenIds.length);\n    }\n    \n    function withdrawBoth(\n      uint256[] memory dogeIds,\n      uint256[] memory shibaIds)\n      external {\n        withdraw(address(DOGE_NFT), dogeIds);\n        withdraw(address(SHIBA_NFT), shibaIds);\n    }\n\n    function withdraw(\n      address contractAddress,\n      uint256[] memory tokenIds\n    ) public nonReentrant {\n      require(\n        contractAddress == address(DOGE_NFT)\n        || contractAddress == address(SHIBA_NFT),\n        \"Unknown contract\"\n      );\n      ContractTypes contractType = _contractTypes[contractAddress];\n      Staker storage user = _stakers[_msgSender()];\n      uint256 newYield = user.currentYield;\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(IERC721(contractAddress).ownerOf(tokenIds[i]) == address(this), \"Not the owner\");\n\n        _ownerOfToken[contractAddress][tokenIds[i]] = address(0);\n\n        if (user.currentYield != 0) {\n          uint256 tokenYield = getTokenYield(contractAddress, tokenIds[i]);\n          newYield -= tokenYield;\n        }\n\n        if (contractType == ContractTypes.DOGE) {\n          user.stakedDOGE = _moveTokenInTheList(user.stakedDOGE, tokenIds[i]);\n          user.stakedDOGE.pop();\n        }\n\n        if (contractType == ContractTypes.SHIBA) {\n          user.stakedSHIBA = _moveTokenInTheList(user.stakedSHIBA, tokenIds[i]);\n          user.stakedSHIBA.pop();\n        }\n\n        IERC721(contractAddress).safeTransferFrom(address(this), _msgSender(), tokenIds[i]);\n      }\n\n      if (user.stakedDOGE.length == 0 && user.stakedSHIBA.length == 0) {\n        newYield = 0;\n      }\n\n      accumulate(_msgSender());\n      user.currentYield = newYield;\n\n      emit Withdraw(_msgSender(), contractAddress, tokenIds.length);\n    }\n\n    function getTokenYield(address contractAddress, uint256 tokenId) public view returns (uint256) {\n      uint256 tokenYield = _nftYield[contractAddress][tokenId];\n      if (tokenYield == 0) { tokenYield = _baseRates[contractAddress]; }\n\n      return tokenYield;\n    }\n\n    function getStakerYield(address staker) public view returns (uint256) {\n      return _stakers[staker].currentYield;\n    }\n\n    function getStakerTokens(address staker) public view returns (uint256[] memory, uint256[] memory) {\n      return (_stakers[staker].stakedDOGE, _stakers[staker].stakedSHIBA);\n    }\n\n    function isTokenYieldSet(address contractAddress, uint256 tokenId) public view returns (bool) {\n      return _nftYield[contractAddress][tokenId] > 0;\n    }\n\n    function _moveTokenInTheList(uint256[] memory list, uint256 tokenId) internal pure returns (uint256[] memory) {\n      uint256 tokenIndex = 0;\n      uint256 lastTokenIndex = list.length - 1;\n      uint256 length = list.length;\n\n      for(uint256 i = 0; i < length; i++) {\n        if (list[i] == tokenId) {\n          tokenIndex = i + 1;\n          break;\n        }\n      }\n      require(tokenIndex != 0, \"msg.sender is not the owner\");\n\n      tokenIndex -= 1;\n\n      if (tokenIndex != lastTokenIndex) {\n        list[tokenIndex] = list[lastTokenIndex];\n        list[lastTokenIndex] = tokenId;\n      }\n\n      return list;\n    }\n\n    function _validateSignature(\n      bytes calldata signature,\n      address contractAddress,\n      uint256[] memory tokenIds,\n      uint256[] memory tokenTraits\n      ) internal view returns (bool) {\n      bytes32 dataHash = keccak256(abi.encodePacked(contractAddress, tokenIds, tokenTraits));\n      bytes32 message = ECDSA.toEthSignedMessageHash(dataHash);\n\n      address receivedAddress = ECDSA.recover(message, signature);\n      return (receivedAddress != address(0) && receivedAddress == signerAddress);\n    }\n\n    function _setTokensValues(\n      address contractAddress,\n      uint256[] memory tokenIds,\n      uint256[] memory tokenTraits\n    ) internal {\n      require(tokenIds.length == tokenTraits.length, \"Wrong arrays provided\");\n      for (uint256 i; i < tokenIds.length; i++) {\n        if (tokenTraits[i] != 0) {\n          _nftYield[contractAddress][tokenIds[i]] = tokenTraits[i];\n        }\n      }\n    }\n\n    function getCurrentReward(address staker) public view returns (uint256) {\n      Staker memory user = _stakers[staker];\n      if (user.lastCheckpoint == 0) { return 0; }\n\n\n      return (Math.min(block.timestamp, stakingEndTime) - user.lastCheckpoint) * user.currentYield / 1 days;\n    }\n\n    function accumulate(address staker) internal { \n      _stakers[staker].accumulatedAmount += getCurrentReward(staker);\n      _stakers[staker].lastCheckpoint = Math.min(block.timestamp, stakingEndTime);\n    }\n\n    /**\n    * @dev Returns token owner address (returns address(0) if token is not inside the gateway)\n    */\n    function ownerOf(address contractAddress, uint256 tokenId) public view returns (address) {\n      return _ownerOfToken[contractAddress][tokenId];\n    }\n\n    /**\n    * @dev Function allows admin withdraw ERC721 in case of emergency.\n    */\n    function emergencyWithdraw(address tokenAddress, uint256[] memory tokenIds) public onlyOwner {\n      require(tokenIds.length <= 50, \"50 is max per tx\");\n      pauseDeposit(true);\n      for (uint256 i; i < tokenIds.length; i++) {\n        address receiver = _ownerOfToken[tokenAddress][tokenIds[i]];\n        if (receiver != address(0) && IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\n          IERC721(tokenAddress).safeTransferFrom(address(this), receiver, tokenIds[i]);\n          emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\n        }\n      }\n    }\n\n    /**\n    * @dev Function allows to pause deposits if needed. Withdraw remains active.\n    */\n    function pauseDeposit(bool _pause) public onlyOwner {\n      depositPaused = _pause;\n    }\n\n    function updateSignerAddress(address _signer) public onlyOwner {\n      signerAddress = _signer;\n    }\n\n    function updateTreasuryAddress(address _treasury) public onlyOwner {\n      treasury = _treasury;\n    }\n\n    function launchStaking() public onlyOwner {\n      require(!stakingLaunched, \"Staking has been launched already\");\n      stakingLaunched = true;\n      stakingEndTime = block.timestamp + 60 days;\n    }\n\n    function updateBaseYield(address _contract, uint256 _yield) public onlyOwner {\n      _baseRates[_contract] = _yield;\n    }\n\n    function setStakingEndTime(uint256 endTime) external onlyOwner {\n      require(endTime > stakingEndTime);\n      stakingEndTime = endTime;\n    }\n\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns(bytes4){\n      return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n    }\n\n    /**\n    * @dev Function to withdraw staked rewards\n    */\n    function withdrawRewards() public nonReentrant whenNotPaused {\n      require(!isWithdrawPaused, \"Withdraw Paused\");\n\n      uint256 amount = getUserBalance(_msgSender());\n      require(amount > 0, \"Insufficient balance\");\n\n      spentAmount[_msgSender()] += amount;\n      ShibaDoge.transferFrom(treasury, _msgSender(), amount);\n\n      emit WithdrawRewards(\n        _msgSender(),\n        amount\n      );\n    }\n\n    /**\n    * @dev user's lifetime earnings\n    */\n    function getAccumulatedAmount(address staker) public view returns (uint256) {\n      return _stakers[staker].accumulatedAmount + getCurrentReward(staker);\n    }\n\n    /**\n    * @dev Returns current withdrawable balance of a specific user.\n    */\n    function getUserBalance(address user) public view returns (uint256) {\n      return (getAccumulatedAmount(user) - spentAmount[user]);\n    }\n\n    // Safety functions\n\n    /**\n    * @dev Allows owner to withdraw any ERC20 Token sent directly to the contract\n    */\n    function rescueTokens(address _stuckToken) external onlyOwner {\n      uint256 balance = IERC20(_stuckToken).balanceOf(address(this));\n      IERC20(_stuckToken).transfer(msg.sender, balance);\n    }\n\n    /**\n    * @dev Allows owner to withdraw any ERC721 Token sent directly to the contract\n    */\n    function rescueNFT(address _stuckToken, uint256 id) external onlyOwner {\n      if(_stuckToken == address(DOGE_NFT) || _stuckToken == address(SHIBA_NFT)) {\n        require( _ownerOfToken[_stuckToken][id] == address(0));\n      }\n      IERC721(_stuckToken).safeTransferFrom(address(this), msg.sender, id);\n    }\n\n}"
6     },
7     "@openzeppelin/contracts/utils/math/Math.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
21     },
22     "@openzeppelin/contracts/security/Pausable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/access/Ownable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Strings.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     }
55   }
56 }}