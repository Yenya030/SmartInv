1 {{
2   "language": "Solidity",
3   "sources": {
4     "operator-filter-registry-1.3.1/src/DefaultOperatorFilterer.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n */\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Context.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/common/ERC2981.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
12     },
13     "operator-filter-registry-1.3.1/src/OperatorFilterer.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
15     },
16     "operator-filter-registry-1.3.1/src/IOperatorFilterRegistry.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
30     },
31     "contracts/lib/auctions/EnglishAuctionHouse.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../IWCNFTErrorCodes.sol\";\n\ncontract EnglishAuctionHouse is IWCNFTErrorCodes {\n    struct EnglishAuction {\n        uint256 lotSize; // number of tokens to be sold\n        uint256 highestBid; // current highest bid, in WEI\n        uint256 outbidBuffer; // new bids must exceed highestBid by this, in WEI\n        uint256 startTime; // unix timestamp in seconds at start of the auction\n        uint256 endTime; // unix timestamp in seconds at the end of the auction\n        address highestBidder; // current highest bidder\n        bool settled; // flag to mark the auction as settled\n    }\n\n    uint256 public numberOfEnglishAuctions;\n    uint256 private constant _MAXIMUM_START_DELAY = 1 weeks;\n    uint256 private constant _MAXIMUM_DURATION = 1 weeks;\n    uint256 private constant _MINIMUM_DURATION = 1 hours;\n    uint256 private constant _MINIMUM_TIME_BUFFER = 2 hours; // cannot stop auction within 2 hours of end\n    uint256 private _maxRefundGas = 2300; // max gas sent with refunds\n    mapping(uint256 => EnglishAuction) internal _englishAuctions;\n\n    /**************************************************************************\n     * CUSTOM ERRORS\n     */\n\n    /// Bid must exceed the current highest bid, plus buffer price\n    error BidTooLow();\n\n    /// Auctions cannot be stopped within 2 hours of their end time\n    error CannotStopAuction();\n\n    /// attempting to initialize an auction that is already initialized\n    error EnglishAuctionAlreadyInitialized();\n\n    /// requested English auction has ended\n    error EnglishAuctionHasEnded();\n\n    /// The requested English auction is not currently accepting bids\n    error EnglishAuctionIsNotBiddable();\n\n    /// The requested English auction is not ended and settled\n    error EnglishAuctionIsNotComplete();\n\n    /// The requested English auction has already been settled\n    error EnglishAuctionIsSettled();\n\n    /**\n     * The requested English auction has not ended. It is not\n     * necessarily active, as the start may be delayed\n     */\n    error EnglishAuctionNotEnded();\n\n    /// Duration cannot exceed _MAXIMUM_DURATION\n    error ExceedsMaximumDuration();\n\n    /// Cannot start too far in the future\n    error ExceedsMaximumStartDelay();\n\n    /// Duration must exceed _MINIMUM_DURATION\n    error InsufficientDuration();\n\n    /// The requested EnglishAuction does not exist in this contract\n    error InvalidEnglishAuctionId();\n\n    /**************************************************************************\n     * EVENTS\n     */\n\n    /**\n     * @dev emitted when an English auction is created\n     * @param auctionId identifier for the English auction\n     * @param lotSize number of tokens sold in this auction\n     * @param startingBid initial bid in wei\n     */\n    event EnglishAuctionCreated(\n        uint256 indexed auctionId,\n        uint256 lotSize,\n        uint256 startingBid\n    );\n\n    /**\n     * @dev emitted when an English auction is started\n     * @param auctionId identifier for the English auction\n     * @param auctionStartTime unix timestamp in seconds of the auction start\n     * @param auctionEndTime unix timestamp in seconds of the auction end\n     */\n    event EnglishAuctionStarted(\n        uint256 indexed auctionId,\n        uint256 auctionStartTime,\n        uint256 auctionEndTime\n    );\n\n    /**\n     * @dev emitted when an auction is settled\n     * @param auctionId identifier for the English auction\n     * @param salePrice strike price for the lot\n     * @param lotSize number of tokens sold in this auction\n     * @param winner address of the winning bidder\n     */\n    event EnglishAuctionSettled(\n        uint256 indexed auctionId,\n        uint256 salePrice,\n        uint256 lotSize,\n        address winner\n    );\n\n    /**\n     * @dev emitted when an auction is force-stopped\n     * @param auctionId identifier for the English auction\n     * @param currentHighBidder address of the current leading bidder\n     * @param currentHighestBid value in wei of the current highest bid\n     */\n    event EnglishAuctionForceStopped(\n        uint256 indexed auctionId,\n        address currentHighBidder,\n        uint256 currentHighestBid\n    );\n\n    /**\n     * @dev emitted when a new high bid is received\n     * @param auctionId identifier for the English auction\n     * @param bidder address of the new high bidder\n     * @param bid value in wei of the new bid\n     */\n    event NewHighBid(\n        uint256 indexed auctionId,\n        address indexed bidder,\n        uint256 bid\n    );\n\n    /**\n     * @dev emitted when an auto refund fails\n     * @param auctionId identifier for the English auction\n     * @param recipient address of the user whose refund has been lodged\n     * @param amount amount in wei of the refund\n     */\n    event RefundLodged(\n        uint256 indexed auctionId,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    /**************************************************************************\n     * GUARD FUNCTIONS - replace modifiers\n     */\n\n    /**\n     * @dev reverts if a given English auction is not active\n     * @param auctionId identifier for the English auction\n     */\n    function _revertIfEnglishAuctionNotValid(uint256 auctionId) internal view {\n        if (auctionId == 0 || auctionId > numberOfEnglishAuctions) {\n            revert InvalidEnglishAuctionId();\n        }\n    }\n\n    /**************************************************************************\n     * ADMIN FUNCTIONS - start, stop, edit, etc.\n     */\n\n    /**\n     * @dev edit the maximum gas sent with refunds during an English Auction.\n     *  Gas limit initialized to 2300, but modifiable in case of future need.\n     *\n     *  Refunds are sent when:\n     *  i) a high-bidder is outbid (their bid is returned)\n     *  ii) an English Auction is force-stopped (current leader is refunded)\n     *\n     *  If this is set too low, all refunds using _gasLimitedCall() will\n     *  fail.\n     * @param maxGas maximum gas units for the call\n     */\n    function _editMaxRefundGas(uint256 maxGas) internal {\n        _maxRefundGas = maxGas;\n    }\n\n    /**\n     * @dev set up a new English auction (ascending price auction). This does\n     *  NOT start the auction.\n     *\n     * Start time and duration are set when auction is started with\n     *  _startEnglishAuction().\n     *\n     * outbidBuffer is to prevent 1 wei increments on the winning bid, and is\n     *  the minimum buffer new bids must exceed the current highest by.\n     *\n     * @param lotSize_ number of tokens to be sold in one bundle in this auction\n     * @param startingBidInWei starting bid for the auction\n     * @param outbidBufferInWei bids must exceed current highest by this price\n     * @return auctionId sequential auction identifier, starting at 1.\n     */\n    function _setUpEnglishAuction(\n        uint256 lotSize_,\n        uint256 startingBidInWei,\n        uint256 outbidBufferInWei\n    )\n        internal\n        returns (uint256)\n    {\n        // set up new auction - auctionId initializes to 1\n        uint256 auctionId = ++numberOfEnglishAuctions;\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n        ea.lotSize = lotSize_;\n        ea.highestBid = startingBidInWei;\n        ea.outbidBuffer = outbidBufferInWei;\n\n        emit EnglishAuctionCreated(auctionId, lotSize_, startingBidInWei);\n\n        return auctionId;\n    }\n\n    /**\n     * @dev start an English auction which has been set up already.\n     * @param auctionId the auction to start\n     * @param startDelayInSeconds set 0 to start immediately, or delay the start\n     * @param durationInSeconds the number of seconds the auction will run for\n     */\n    function _startEnglishAuction(\n        uint256 auctionId,\n        uint256 startDelayInSeconds,\n        uint256 durationInSeconds\n    )\n        internal\n    {\n        _revertIfEnglishAuctionNotValid(auctionId);\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        // check the auction has not been initialized yet\n        if (ea.startTime != 0 && ea.endTime != 0) {\n            revert EnglishAuctionAlreadyInitialized();\n        }\n\n        if (startDelayInSeconds > _MAXIMUM_START_DELAY) {\n            revert ExceedsMaximumStartDelay();\n        }\n\n        if (durationInSeconds < _MINIMUM_DURATION) {\n            revert InsufficientDuration();\n        }\n\n        if (durationInSeconds > _MAXIMUM_DURATION) {\n            revert ExceedsMaximumDuration();\n        }\n\n        // get the start time\n        uint256 startTime_ = block.timestamp + startDelayInSeconds;\n        uint256 endTime_ = startTime_ + durationInSeconds;\n\n        ea.startTime = startTime_;\n        ea.endTime = endTime_;\n\n        emit EnglishAuctionStarted(auctionId, startTime_, endTime_);\n    }\n\n    /**\n     * @dev force stop an English auction, useful if incorrect parameters\n     *  were set by mistake. To protect bidders, this cannot be used within 2\n     *  hours of an auction's end time.\n     * @param auctionId identifier for the auction\n     */\n    function _forceStopEnglishAuction(uint256 auctionId) internal {\n        _revertIfEnglishAuctionNotValid(auctionId);\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        // if the auction has started, check there is longer than 2 hours left\n        if (ea.endTime != 0) {\n            if (block.timestamp >= ea.endTime) {\n                revert EnglishAuctionHasEnded();\n            }\n            if (block.timestamp > (ea.endTime - _MINIMUM_TIME_BUFFER)) {\n                revert CannotStopAuction();\n            }\n        }\n\n        // end the auction\n        ea.endTime = block.timestamp;\n        ea.settled = true;\n\n        // return eth to highest bidder\n        address currentHighBidder = ea.highestBidder;\n        uint256 currentBid = ea.highestBid;\n        ea.highestBid = 0;\n\n        if (currentHighBidder != address(0)) {\n            bool refundSuccess = _gasLimitedCall(currentHighBidder, currentBid);\n            if (!refundSuccess) {\n                // register the failed refund\n                emit RefundLodged(auctionId, currentHighBidder, currentBid);\n            }\n        }\n\n        emit EnglishAuctionForceStopped(\n            auctionId,\n            currentHighBidder,\n            currentBid\n        );\n    }\n\n    /**\n     * @dev checks an auction has ended, then marks it as settled, emitting an\n     *  event. Set this when all accounting has been completed to block multiple\n     *  claims, e.g. the winner receives their token, all refunds are sent etc.\n     * @param auctionId identifier for the auction\n     */\n    function _markSettled(uint256 auctionId) internal {\n        _revertIfEnglishAuctionNotValid(auctionId);\n\n        if (!_englishAuctionEnded(auctionId)) {\n            revert EnglishAuctionNotEnded();\n        }\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        if (ea.settled) revert EnglishAuctionIsSettled();\n        ea.settled = true;\n\n        emit EnglishAuctionSettled(\n            auctionId,\n            ea.highestBid,\n            ea.lotSize,\n            ea.highestBidder\n        );\n    }\n\n    /**************************************************************************\n     * ACCESS FUNCTIONS - get information\n     */\n\n    /**\n     * @dev get structured information about an English auction. If all entries\n     *  are zero or false, the auction with this ID may not have been created.\n     * @param auctionId the auction id to query\n     * @return EnglishAuction structured information about the auction,\n     *  returned as a tuple.\n     */\n    function getEnglishAuctionInfo(uint256 auctionId)\n        public\n        view\n        returns (EnglishAuction memory)\n    {\n        return _englishAuctions[auctionId];\n    }\n\n    /**\n     * @notice get the minimum bid to become the highest bidder on\n     *   an English auction. This does not check if auction is active or ended.\n     * @param auctionId identifier for the auction\n     * @return minimumBid minimum bid to become the highest bidder\n     */\n    function getEnglishAuctionMinimumBid(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        _revertIfEnglishAuctionNotValid(auctionId);\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n        return ea.highestBid + ea.outbidBuffer;\n    }\n\n    /**\n     * @dev return the time remaining in an English auction.\n     *  Does not check if the auction has been initialized and will\n     *  return 0 if it does not exist.\n     * @param auctionId the auctionId to query\n     * @return remainingTime the time remaining in seconds\n     */\n    function getRemainingEnglishAuctionTime(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 endTime_ = _englishAuctions[auctionId].endTime;\n        uint256 remaining = endTime_ <= block.timestamp\n            ? 0\n            : endTime_ - block.timestamp;\n\n        return remaining;\n    }\n\n    /**************************************************************************\n     * OPERATION\n     */\n\n    /**\n     * @notice bid on an English auction. If you are the highest bidder already\n     *  extra bids are added to your current bid. All bids are final and cannot\n     *  be revoked.\n     *\n     * NOTE: if bidding from a contract ensure it can use any tokens received.\n     *  This does not check onERC721Received().\n     *\n     * @param auctionId identifier for the auction\n     */\n    function _bidEnglish(uint256 auctionId) internal {\n        _revertIfEnglishAuctionNotValid(auctionId);\n\n        if (!englishAuctionBiddable(auctionId)) {\n            revert EnglishAuctionIsNotBiddable();\n        }\n\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        uint256 currentBid = ea.highestBid;\n        address currentHighBidder = ea.highestBidder;\n\n        /*\n         * high bidder can add to their bid,\n         * new bidders must exceed existing high bid + buffer\n         */\n        if (msg.sender == currentHighBidder) {\n            ea.highestBid = currentBid + msg.value;\n            emit NewHighBid(auctionId, msg.sender, currentBid + msg.value);\n        } else {\n            // new bidder\n            if (msg.value < currentBid + ea.outbidBuffer) {\n                revert BidTooLow();\n            } else {\n                // we have a new highest bid\n                ea.highestBid = msg.value;\n                ea.highestBidder = msg.sender;\n                emit NewHighBid(auctionId, msg.sender, msg.value);\n\n                // refund the previous highest bidder.\n                // This must not revert due to the receiver.\n                if (currentHighBidder != address(0)) {\n                    bool refundSuccess = _gasLimitedCall(\n                        currentHighBidder,\n                        currentBid\n                    );\n                    if (!refundSuccess) {\n                        // register the failed refund\n                        emit RefundLodged(\n                            auctionId,\n                            currentHighBidder,\n                            currentBid\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev send ETH, limiting gas and not reverting on failure.\n     * @param receiver transaction recipient\n     * @param amount value to send\n     * @return success true if transaction is successful, false otherwise\n     */\n    function _gasLimitedCall(address receiver, uint256 amount)\n        internal\n        returns (bool)\n    {\n        (bool success, ) = receiver.call{value: amount, gas: _maxRefundGas}(\"\");\n        return success;\n    }\n\n    /**************************************************************************\n     * HELPERS\n     */\n\n    /**\n     * @dev returns true if an auction has been 'started' but has not ended.\n     *  The auction may be pending (start time has been set in the future) or\n     *  live-and-biddable (start time has passed and the auction is biddable).\n     * @param auctionId identifier for the auction\n     * @return active true (active / pending) or false (ended / not initialized)\n     */\n    function englishAuctionActive(uint256 auctionId)\n        public\n        view\n        returns (bool)\n    {\n        // if ea.endTime == 0 : auction has not been started >> false\n        // if ea.endTime <= block.timestamp : auction has ended >> false\n        // if ea.endTime > block.timestamp : auction is pending or live >> true\n\n        return (_englishAuctions[auctionId].endTime > block.timestamp);\n    }\n\n    /**\n     * @dev returns true if an auction is currently live-and-biddable\n     * @param auctionId identifier for the auction\n     * @return biddable true (live-and-biddable) or false (ended / not started)\n     */\n    function englishAuctionBiddable(uint256 auctionId)\n        public\n        view\n        returns (bool)\n    {\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        return (\n            ea.startTime <= block.timestamp &&\n            block.timestamp < ea.endTime\n        );\n    }\n\n    /**\n     * @dev returns true if the requested auction has been settled,\n     *  false otherwise.\n     * @param auctionId identifier for the auction\n     */\n    function englishAuctionSettled(uint256 auctionId)\n        public\n        view\n        returns (bool)\n    {\n        return _englishAuctions[auctionId].settled;\n    }\n\n    /**\n     * @dev returns true if an auction has ended, false if it is still active,\n     *  or not initialized.\n     * @param auctionId identifier for the auction\n     * @return ended true (ended / non-existent) or false (active / yet-to-begin)\n     */\n    function _englishAuctionEnded(uint256 auctionId)\n        internal\n        view\n        returns (bool)\n    {\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        // if ea.endTime == 0 : auction never started / does not exist >> false\n        // else :\n        // if ea.endTime <= block.timestamp : auction has ended >> true\n        // if ea.endTime > block.timestamp : auction still active >> false\n\n        return (ea.endTime != 0 && ea.endTime <= block.timestamp);\n    }\n\n    /**\n     * @dev returns true if the requested auction has been started but is NOT\n     *  settled. It may have ended, or may still be biddable but it has not\n     *  been settled. Returns false if auction has not started or if it has\n     *  been ended and settled.\n     * @param auctionId identifier for the auction\n     */\n    function _englishAuctionActiveNotSettled(uint256 auctionId)\n        internal\n        view\n        returns (bool)\n    {\n        EnglishAuction storage ea = _englishAuctions[auctionId];\n\n        // if ea.endTime == 0 : auction never started / does not exist >> false\n        // else: (the auction has been started)\n        // if the auction is active >> true\n        // if the auction is ended-but-not-settled >> true\n        // if the auction is ended-and-settled >> false\n        // if the auction is settled, it must already have ended\n        \n        return (ea.endTime != 0 && ea.settled == false);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Address.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/access/Ownable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
39     },
40     "contracts/lib/MerkleFourParams.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @dev Utility contract for managing multiple allow lists under by the same\n * 4-parameter merkle root.\n *\n * Two keys are used to nest each allow list mint count.\n */\ncontract MerkleFourParams {\n    bytes32 public merkleRoot; // merkle root governing all allow lists\n\n    /**\n     * @dev store the allow list mints per address, per two keys\n     *  we map: (address => (key1 => (key2 => minted)))\n     */\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\n        private _allowListMinted;\n\n    bool internal _allowListActive = false;\n\n    /**************************************************************************\n     * CUSTOM ERRORS\n     */\n\n    /// Attempted access while allow list is active\n    error AllowListIsActive();\n\n    /// Attempted access to inactive presale\n    error AllowListIsNotActive();\n\n    /// Exceeds allow list quota\n    error ExceedsAllowListQuota();\n\n    /// Merkle proof and user do not resolve to merkleRoot\n    error NotOnAllowList();\n\n    /**************************************************************************\n     * EVENTS\n     */\n\n    /**\n     * @dev emitted when an account has claimed some tokens\n     * @param account address of the claimer\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     * @param amount number of tokens claimed in this transaction \n     */\n    event Claimed(\n        address indexed account,\n        uint256 indexed key1,\n        uint256 indexed key2,\n        uint256 amount\n    );\n\n    /**\n     * @dev emitted when the merkle root changes\n     * @param merkleRoot new merkle root\n     */\n    event MerkleRootChanged(bytes32 merkleRoot);\n\n    /**\n     * @dev reverts when allow list is not active\n     */\n    modifier isAllowListActive() virtual {\n        if (!_allowListActive) revert AllowListIsNotActive();\n        _;\n    }\n\n    /**\n     * @dev throws when number of tokens exceeds total token quota, for a\n     *  given 2-key combination.\n     * @param to user address to query\n     * @param numberOfTokens check if this many tokens are available\n     * @param tokenQuota the user's initial token allowance\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     */\n    modifier tokensAvailable(\n        address to,\n        uint256 numberOfTokens,\n        uint256 tokenQuota,\n        uint256 key1,\n        uint256 key2\n    ) virtual {\n        uint256 claimed = _allowListMinted[to][key1][key2];\n        if (claimed + numberOfTokens > tokenQuota) {\n            revert ExceedsAllowListQuota();\n        }\n        _;\n    }\n\n    /**\n     * @dev throws when parameters sent by claimer are incorrect\n     * @param claimer the claimer's address\n     * @param tokenQuota initial token allowance for claimer\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     * @param proof merkle proof\n     */\n    modifier ableToClaim(\n        address claimer,\n        uint256 tokenQuota,\n        uint256 key1,\n        uint256 key2,\n        bytes32[] memory proof\n    ) virtual {\n        if (!onAllowList(claimer, tokenQuota, key1, key2, proof)) {\n            revert NotOnAllowList();\n        }\n        _;\n    }\n\n    /**\n     * @dev sets the state of the allow list\n     */\n    function _setAllowListActive(bool allowListActive_) internal virtual {\n        _allowListActive = allowListActive_;\n    }\n\n    /**\n     * @dev sets the merkle root\n     */\n    function _setAllowList(bytes32 merkleRoot_) internal virtual {\n        merkleRoot = merkleRoot_;\n\n        emit MerkleRootChanged(merkleRoot);\n    }\n\n    /**\n     * @dev gets the number of tokens minted by an address for given keys\n     * @param from the address to query\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     * @return minted the number of items minted by the address\n     */\n    function getAllowListMinted(\n        address from,\n        uint256 key1,\n        uint256 key2\n    ) public view virtual returns (uint256) {\n        return _allowListMinted[from][key1][key2];\n    }\n\n    /**\n     * @dev adds the number of tokens to an address's total for given keys\n     * @param to the address to increment mints against\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     * @param numberOfTokens the number of mints to increment\n     */\n    function _setAllowListMinted(\n        address to,\n        uint256 key1,\n        uint256 key2,\n        uint256 numberOfTokens\n    ) internal virtual {\n        _allowListMinted[to][key1][key2] += numberOfTokens;\n\n        emit Claimed(to, key1, key2, numberOfTokens);\n    }\n\n    /**\n     * @dev checks if the claimer has a valid proof\n     * @param claimer the claimer's address\n     * @param tokenQuota initial allow list quota for claimer\n     * @param key1 first key to the allow list\n     * @param key2 second key to the allow list\n     * @return valid true if the claimer has a valid proof for these arguments\n     */\n    function onAllowList(\n        address claimer,\n        uint256 tokenQuota,\n        uint256 key1,\n        uint256 key2,\n        bytes32[] memory proof\n    ) public view returns (bool) {\n        bytes32 leaf = keccak256(\n            abi.encodePacked(claimer, tokenQuota, key1, key2)\n        );\n        return MerkleProof.verify(proof, merkleRoot, leaf);\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
45     },
46     "contracts/lib/auctions/DutchAuctionHouse.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev Allows derived contracts to implement multiple parallel Dutch auctions,\n *  where the auction price decreases in steps.\n */\ncontract DutchAuctionHouse {\n    struct DutchAuction {\n        bool auctionActive; // flag to mark the auction active or inactive\n        uint80 startTime; // set automatically when auction started\n        uint80 duration; // time for price to drop from startPrice to finalPrice\n        uint88 startPrice; // price declines from here\n        uint88 finalPrice; // price rests here after declining\n        uint88 priceStep; // price declines in this step size\n        uint80 timeStepSeconds; // time between price drop steps\n    }\n\n    uint256 public numberOfDutchAuctions; // track number of auctions\n\n    // Map auctionId => DutchAuction\n    mapping(uint256 => DutchAuction) internal _dutchAuctions;\n\n    // Track user mints per Dutch auction:\n    // (auctionId => (address => mints))\n    mapping(uint256 => mapping(address => uint256)) private _dutchAuctionMints;\n\n    /**************************************************************************\n     * CUSTOM ERRORS\n     */\n\n    /// The price and timestep parameters result in too great a duration\n    error ComputedDurationOverflows();\n\n    /// Attempting to resume a Dutch auction that has not started\n    error DutchAuctionHasNotStarted();\n\n    /// Attempted access to an active Dutch auction\n    error DutchAuctionIsActive();\n\n    /// Attempted mint on an inactive Dutch auction\n    error DutchAuctionIsNotActive();\n\n    /// Ensure auction prices, price steps and step interval are valid\n    error InvalidDutchAuctionParameters();\n\n    /// This auctionId has not been initialised yet\n    error NonExistentDutchAuctionID();\n\n    /**************************************************************************\n     * EVENTS\n     */\n\n    /**\n     * @dev emitted when a Dutch auction is created\n     * @param auctionId identifier for the Dutch auction\n     */\n    event DutchAuctionCreated(uint256 auctionId);\n\n    /**\n     * @dev emitted when a Dutch auction starts\n     * @param auctionId identifier for the Dutch auction\n     * @param auctionStartTime unix timestamp in seconds of the auction start\n     * @param auctionDuration auction duration in seconds\n     */\n    event DutchAuctionStart(\n        uint256 indexed auctionId,\n        uint80 auctionStartTime,\n        uint80 auctionDuration\n    );\n\n    /**\n     * @dev emitted when a Dutch auction ends\n     * @param auctionId identifier for the Dutch auction\n     * @param auctionEndTime unix timestamp in seconds of the auction end\n     */\n    event DutchAuctionEnd(uint256 indexed auctionId, uint256 auctionEndTime);\n\n    /**************************************************************************\n     * GUARD FUNCTIONS\n     */\n\n    /**\n     * @dev reverts when an non-existent Dutch auction is requested\n     * @param auctionId Dutch auction ID to query\n     */\n    function _revertIfDutchAuctionDoesNotExist(uint256 auctionId)\n        internal\n        view\n    {\n        if (auctionId == 0 || auctionId > numberOfDutchAuctions) {\n            revert NonExistentDutchAuctionID();\n        }\n    }\n\n    /**************************************************************************\n     * FUNCTIONS\n     */\n\n    /**\n     * @dev get structured information about a Dutch auction, returned as tuple\n     * @param auctionId the Dutch auctionId to query.\n     * @return auctionInfo information about the Dutch auction, struct returned\n     *  as a tuple. See {struct DutchAuction} for details.\n     */\n    function getDutchAuctionInfo(uint256 auctionId)\n        public\n        view\n        returns (DutchAuction memory)\n    {\n        return _dutchAuctions[auctionId];\n    }\n\n    /**\n     * @notice get the number of mints by a user in a Dutch auction\n     * @param auctionId the auction to query\n     * @param user the minter address to query\n     */\n    function getDutchAuctionMints(uint256 auctionId, address user)\n        public\n        view\n        returns (uint256)\n    {\n        return _dutchAuctionMints[auctionId][user];\n    }\n\n    /**\n     * @dev calculates the current Dutch auction price. If not begun, returns\n     *  the start price.\n     * @param auctionId Dutch auction ID to query.\n     * @return price current price in wei\n     */\n    function getDutchAuctionPrice(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        _revertIfDutchAuctionDoesNotExist(auctionId);\n\n        DutchAuction storage a = _dutchAuctions[auctionId];\n        uint256 elapsed = _getElapsedDutchAuctionTime(auctionId);\n\n        if (elapsed >= a.duration) {\n            return a.finalPrice;\n        }\n\n        // step function\n        uint256 steps = elapsed / a.timeStepSeconds;\n        uint256 auctionPriceDecrease = steps * a.priceStep;\n\n        return a.startPrice - auctionPriceDecrease;\n    }\n\n    /**\n     * @dev returns the remaining time until a Dutch auction's resting price is\n     *  hit. If the sale has not started yet, the auction duration is returned.\n     *\n     * Returning \"0\" shows the price has reached its final value - the auction\n     *  may still be biddable.\n     *\n     * Use _endDutchAuction() to stop the auction and prevent further bids.\n     *\n     * @param auctionId Dutch auction ID to query\n     * @return remainingTime seconds until resting price is reached\n     */\n    function getRemainingDutchAuctionTime(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        _revertIfDutchAuctionDoesNotExist(auctionId);\n\n        DutchAuction storage a = _dutchAuctions[auctionId];\n\n        if (a.startTime == 0) {\n            // not started yet\n            return a.duration;\n        } else if (_getElapsedDutchAuctionTime(auctionId) >= a.duration) {\n            // already at the resting price\n            return 0;\n        }\n\n        return (a.startTime + a.duration) - block.timestamp;\n    }\n\n    /**\n     * @notice check if the Dutch auction with ID auctionId is active\n     * @param auctionId Dutch auction ID to query\n     * @return bool true if the auction is active, false if not\n     */\n    function _checkDutchAuctionActive(uint256 auctionId)\n        internal\n        view\n        returns (bool)\n    {\n        return _dutchAuctions[auctionId].auctionActive;\n    }\n\n    /**\n     * @dev initialise a new Dutch auction and return its ID\n     * @param startPrice_ starting price in wei\n     * @param finalPrice_ final resting price in wei\n     * @param priceStep_ incremental price decrease in wei\n     * @param timeStepSeconds_ time between each price decrease in seconds\n     * @return newAuctionId the new Dutch auction ID\n     */\n    function _createNewDutchAuction(\n        uint88 startPrice_,\n        uint88 finalPrice_,\n        uint88 priceStep_,\n        uint80 timeStepSeconds_\n    ) internal returns (uint256) {\n        if (\n            startPrice_ < finalPrice_ ||\n            (startPrice_ - finalPrice_) < priceStep_\n        ) {\n            revert InvalidDutchAuctionParameters();\n        }\n\n        uint256 newAuctionID = ++numberOfDutchAuctions; // start with ID 1\n\n        // create and map a new DutchAuction\n        DutchAuction storage newAuction = _dutchAuctions[newAuctionID];\n\n        newAuction.startPrice = startPrice_;\n        newAuction.finalPrice = finalPrice_;\n        newAuction.priceStep = priceStep_;\n        newAuction.timeStepSeconds = timeStepSeconds_;\n\n        uint256 duration = Math.ceilDiv(\n            (startPrice_ - finalPrice_),\n            priceStep_\n        ) * timeStepSeconds_;\n\n        if (duration == 0) revert InvalidDutchAuctionParameters();\n        if (duration > type(uint80).max) revert ComputedDurationOverflows();\n\n        newAuction.duration = uint80(duration);\n\n        emit DutchAuctionCreated(newAuctionID);\n        return newAuctionID;\n    }\n\n    /**\n     * @dev starts a Dutch auction and emits an event.\n     *\n     * If an auction has been ended with _endDutchAuction() this will reset the\n     *  auction and start it again with all of its initial arguments.\n     *\n     * @param auctionId ID of the Dutch auction to start\n     */\n    function _startDutchAuction(uint256 auctionId) internal {\n        _revertIfDutchAuctionDoesNotExist(auctionId);\n\n        DutchAuction storage a = _dutchAuctions[auctionId];\n\n        if (a.auctionActive) revert DutchAuctionIsActive();\n\n        a.startTime = uint80(block.timestamp);\n        a.auctionActive = true;\n\n        emit DutchAuctionStart(auctionId, a.startTime, a.duration);\n    }\n\n    /**\n     * @dev if a Dutch auction was paused using _endDutchAuction it can be\n     *  resumed with this function. No time is added to the duration so all\n     *  elapsed time during the pause is lost.\n     *\n     * To restart a stopped Dutch auction from the startPrice with its full\n     * duration, use _startDutchAuction() again.\n     *\n     * @param auctionId ID of the Dutch auction to resume\n     */\n    function _resumeDutchAuction(uint256 auctionId) internal {\n        _revertIfDutchAuctionDoesNotExist(auctionId);\n\n        DutchAuction storage a = _dutchAuctions[auctionId];\n\n        if (a.startTime == 0) revert DutchAuctionHasNotStarted();\n        if (a.auctionActive) revert DutchAuctionIsActive();\n\n        a.auctionActive = true; // resume the auction\n        emit DutchAuctionStart(auctionId, a.startTime, a.duration);\n    }\n\n    /**\n     * @dev ends a Dutch auction and emits an event\n     * @param auctionId ID of the Dutch auction to end\n     */\n    function _endDutchAuction(uint256 auctionId) internal {\n        _revertIfDutchAuctionDoesNotExist(auctionId);\n\n        if (!_dutchAuctions[auctionId].auctionActive) {\n            revert DutchAuctionIsNotActive();\n        }\n\n        _dutchAuctions[auctionId].auctionActive = false;\n        emit DutchAuctionEnd(auctionId, block.timestamp);\n    }\n\n    /**\n     * @dev returns the elapsed time since the start of a Dutch auction.\n     *  Does NOT check if the auction exists.\n     *  Returns 0 if the auction has not started or does not exist.\n     * @param auctionId Dutch auction ID to query\n     * @return elapsedTime elapsed seconds, or 0 if auction does not exist.\n     */\n    function _getElapsedDutchAuctionTime(uint256 auctionId)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 startTime_ = _dutchAuctions[auctionId].startTime;\n        return startTime_ > 0 ? block.timestamp - startTime_ : 0;\n    }\n\n    /**\n     * @notice set the mints for a user on a Dutch auction\n     * @param auctionId the auction counter to modify\n     * @param user the minter address to set\n     * @param quantity increment the counter by this many\n     */\n    function _incrementDutchAuctionMints(\n        uint256 auctionId,\n        address user,\n        uint256 quantity\n    ) internal {\n        _dutchAuctionMints[auctionId][user] += quantity;\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
51     },
52     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
57     },
58     "@openzeppelin/contracts/utils/math/Math.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
60     },
61     "@openzeppelin/contracts/access/IAccessControl.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
63     },
64     "contracts/lib/IWCNFTErrorCodes.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/**\n * @dev custom error codes common to many contracts are predefined here\n */\ninterface IWCNFTErrorCodes {\n    /// Exceeds maximum tokens per transaction\n    error ExceedsMaximumTokensPerTransaction();\n\n    /// Exceeds maximum supply\n    error ExceedsMaximumSupply();\n\n    /// Exceeds maximum reserve supply\n    error ExceedsReserveSupply();\n\n    /// Attempted access to inactive public sale\n    error PublicSaleIsNotActive();\n\n    /// Failed withdrawal from contract\n    error WithdrawFailed();\n\n    /// The wrong ETH value has been sent with a transaction\n    error WrongETHValueSent();\n\n    /// The zero address 0x00..000 has been provided as an argument\n    error ZeroAddressProvided();\n\n    /// A zero quantity cannot be requested here\n    error ZeroQuantityRequested();\n}\n"
66     },
67     "contracts/lib/WCNFTToken.sol": {
68       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\n\n/**\n * @dev include SUPPORT_ROLE access control\n */\ncontract WCNFTAccessControl is AccessControl {\n    bytes32 public constant SUPPORT_ROLE = keccak256(\"SUPPORT\");\n}\n\n/**\n * @dev collect common elements for multiple contracts.\n *  Includes SUPPORT_ROLE access control and ERC2981 on chain royalty info.\n */\ncontract WCNFTToken is WCNFTAccessControl, Ownable, ERC2981 {\n    constructor() {\n        // set up roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(SUPPORT_ROLE, msg.sender);\n    }\n\n    /***************************************************************************\n     * Royalties\n     */\n\n    /**\n     * @dev See {ERC2981-_setDefaultRoyalty}.\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev See {ERC2981-_deleteDefaultRoyalty}.\n     */\n    function deleteDefaultRoyalty() external onlyRole(SUPPORT_ROLE) {\n        _deleteDefaultRoyalty();\n    }\n\n    /**\n     * @dev See {ERC2981-_setTokenRoyalty}.\n     */\n    function setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) \n        external \n        onlyRole(SUPPORT_ROLE) \n    {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    /**\n     * @dev See {ERC2981-_resetTokenRoyalty}.\n     */\n    function resetTokenRoyalty(uint256 tokenId)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _resetTokenRoyalty(tokenId);\n    }\n\n    /***************************************************************************\n     * Overrides\n     */\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControl, ERC2981)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
69     },
70     "@openzeppelin/contracts/access/AccessControl.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
72     },
73     "@openzeppelin/contracts/utils/Strings.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
75     },
76     "contracts/Contract.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n/*\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓▓▓▓▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒███▓▓▓▓▓███▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒███████████▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒██▓░░░░░▒██▓░░░░░▒██▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░▒██████████████████████████▒░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n */\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"operator-filter-registry-1.3.1/src/DefaultOperatorFilterer.sol\";\nimport \"./lib/auctions/DutchAuctionHouse.sol\";\nimport \"./lib/auctions/EnglishAuctionHouse.sol\";\nimport \"./lib/MerkleFourParams.sol\";\nimport \"./lib/IWCNFTErrorCodes.sol\";\nimport \"./lib/WCNFTToken.sol\";\n\ncontract CryptoCitiesSuburbs is\n    IWCNFTErrorCodes,\n    ReentrancyGuard,\n    DefaultOperatorFilterer,\n    DutchAuctionHouse,\n    EnglishAuctionHouse,\n    MerkleFourParams,\n    Ownable,\n    WCNFTToken,\n    ERC721\n{\n    // Structs\n    struct City {\n        uint256 id;\n        uint256 numberOfSuburbs;\n        uint256 minTokenId;\n        uint256 maxTokenId; // inclusive\n        string name; // e.g. Neo Tokyo\n        string baseURIExtended;\n        mapping(uint256 => Suburb) suburbs; // first Suburb has id 1\n    }\n\n    struct Suburb {\n        uint256 id; // 1, 2, 3... etc. local to each City, starts at 1\n        uint256 cityId; // parent City\n        uint256 dutchAuctionId; // identifier of current DutchAuction, see DutchAuctionHouse.sol\n        uint256 englishAuctionId; // identifier of current EnglishAuction, see EnglishAuctionHouse.sol\n        uint256 firstTokenId;\n        uint256 maxSupply;\n        uint256 currentSupply;\n        uint256 pricePerToken;\n        uint256 allowListPricePerToken;\n        bool allowListActive;\n        bool saleActive;\n    }\n\n    // State vars\n    uint256 public numberOfCities;\n    uint256 public totalSupply; // cumulative over all cities and suburbs\n    uint256 public maxDutchAuctionMints = 1;\n    string private _baseURIOverride; // override per-City baseURIs\n    address public immutable shareholderAddress;\n\n    // map the Cities\n    mapping(uint256 => City) public cities; // first City has id 1\n\n    /**************************************************************************\n     * CUSTOM ERRORS\n     */\n\n    /// unable to find the City for this token\n    error CityNotFound();\n\n    /// cities and suburbs cannot be removed if they are not empty\n    error CityOrSuburbNotEmpty();\n\n    /// action would exceed token or mint allowance\n    error ExceedsMaximumTokensDuringDutchAuction();\n\n    /// action would exceed the maximum token supply of this Suburb\n    error ExceedsSuburbMaximumSupply();\n\n    /// an invalid cityId has been requested\n    error InvalidCityId();\n\n    /// cannot initialize a Suburb with zero supply\n    error InvalidInputZeroSupply();\n\n    /// an invalid Suburb has been requested\n    error InvalidSuburbId();\n\n    /// an invalid tokenId has been requested. Often it is out of bounds\n    error InvalidTokenId();\n\n    /// only the most recent City can be modified\n    error NotTheMostRecentCity();\n\n    /// only the most recent Suburb can be modified\n    error NotTheMostRecentSuburb();\n\n    /// cannot add new City if previous has no suburbs. addSuburb or removeCity\n    error PreviousCityHasNoSuburbs();\n\n    /// Refund unsuccessful\n    error RefundFailed();\n\n    /// cannot complete request when a sale or allowlist is active\n    error SaleIsActive();\n\n    /**************************************************************************\n     * EVENTS\n     */\n\n    /**\n     * @dev emitted when a Dutch auction is created and assigned to a Suburb\n     * @param cityId the City hosting the Dutch auction\n     * @param suburbId the Suburb hosting the Dutch auction\n     * @param dutchAuctionId auction ID, see {DutchAuctionHouse}\n     */\n    event DutchAuctionCreatedInSuburb(\n        uint256 indexed cityId,\n        uint256 indexed suburbId,\n        uint256 dutchAuctionId\n    );\n\n    /**\n     * @dev emitted when an English Auction is created and assigned to a Suburb\n     * @param cityId the City hosting the Dutch auction\n     * @param suburbId the Suburb hosting the Dutch auction\n     * @param englishAuctionId auction ID, see EnglishAuctionHouse.sol\n     */\n    event EnglishAuctionCreatedInSuburb(\n        uint256 indexed cityId,\n        uint256 indexed suburbId,\n        uint256 englishAuctionId\n    );\n\n    /**************************************************************************\n     * CONSTRUCTOR\n     */\n\n    /**\n     * @dev CryptoSuburbs tokens represent lots belonging to SUBURBS of CITIES\n     * @param shareholderAddress_ Recipient address for contract funds.\n     */\n    constructor(address payable shareholderAddress_)\n        ERC721(\"Suburbs\", \"SUBURBS\")\n        WCNFTToken()\n    {\n        if (shareholderAddress_ == address(0)) revert ZeroAddressProvided();\n        shareholderAddress = shareholderAddress_;\n    }\n\n    /**************************************************************************\n     * GUARD FUNCTIONS\n     */\n\n    /**\n     * @dev reverts if the cityId or suburbId is invalid / does not exist\n     * @param cityId city ID to query\n     * @param suburbId suburb ID to query\n     */\n    function _revertIfCityIdOrSuburbIdInvalid(uint256 cityId, uint256 suburbId)\n        internal\n        view\n    {\n        if (cityId == 0 || cityId > numberOfCities) revert InvalidCityId();\n        if (suburbId == 0 || suburbId > cities[cityId].numberOfSuburbs) {\n            revert InvalidSuburbId();\n        }\n    }\n\n    /**\n     * @dev reverts if the public sale or allow list is active in Suburb s\n     * @param s Suburb to query\n     */\n    function _revertIfAnySaleActive(Suburb storage s) internal view {\n        if (s.saleActive) revert SaleIsActive();\n        if (s.allowListActive) revert AllowListIsActive();\n    }\n\n    /**\n     * @dev reverts if a Dutch auction or English Auction is active in Suburb s\n     * @param s Suburb to query\n     */\n    function _revertIfAnyAuctionActive(Suburb storage s) internal view {\n        if (_checkDutchAuctionActive(s.dutchAuctionId)) {\n            revert DutchAuctionIsActive();\n        }\n\n        // revert if an EA is active, or is ended-but-not-settled\n        if (_englishAuctionActiveNotSettled(s.englishAuctionId)) {\n            revert EnglishAuctionIsNotComplete();\n        }\n    }\n\n    /**************************************************************************\n     * SETUP FUNCTIONS - build cities and suburbs\n     */\n\n    /**\n     * @notice add a new City to the contract\n     * @dev By adding a new City, the previous City is LOCKED and no more\n     *  suburbs can be added to it.\n     *\n     *  New Cities are initialized without suburbs and without baseURI - these\n     *  must be added with addSuburb() and setBaseURI()\n     * @param cityName A name for the City, e.g. \"Neo Tokyo\"\n     * @return cityId id for the City - use in cities(cityId) to get City info\n     */\n    function addCity(string calldata cityName)\n        external\n        onlyRole(SUPPORT_ROLE)\n        returns (uint256)\n    {\n        // new ID number, start at 1\n        uint256 cityId = ++numberOfCities;\n\n        if (cityId > 1 && cities[cityId - 1].numberOfSuburbs == 0) {\n            revert PreviousCityHasNoSuburbs();\n        }\n\n        // starting token ID for this City: refer to previous City\n        // first token is ID 1 - consistent with cityId/suburbId\n        uint256 startingTokenId = cities[cityId - 1].maxTokenId + 1;\n\n        // make a new City struct and add it to cities\n        City storage c = cities[cityId];\n\n        // init the City\n        c.id = cityId;\n        c.minTokenId = startingTokenId;\n        c.maxTokenId = startingTokenId; // will increase when adding suburbs\n        c.name = cityName;\n\n        return cityId;\n    }\n\n    /**\n     * @notice add a new Suburb to the current City under construction.\n     * @dev Suburbs can only be added to the most recently added City\n     *  i.e. the City with the highest ID.\n     * @param cityId_ the City to add a Suburb to. Must be the current City.\n     * @param maxSupplyInSuburb the number of available tokens in this Suburb,\n     *  including all sale types.\n     * @param pricePerToken_ price per token in wei, on the public sale.\n     * @param allowListPricePerToken_ allowList price per token in wei. Set to\n     *  an arbitrary value if there will be no allow list sale for this Suburb.\n     * @return newSuburbId ID for the newly created Suburb - use in\n     *  suburbs(cityId, suburbId) to get Suburb info.\n     */\n    function addSuburb(\n        uint256 cityId_,\n        uint256 maxSupplyInSuburb,\n        uint256 pricePerToken_,\n        uint256 allowListPricePerToken_\n    ) external onlyRole(SUPPORT_ROLE) returns (uint256) {\n        // Incrementing token IDs means suburbs can only be added to the most\n        // recent City\n        if (cityId_ != numberOfCities || cityId_ == 0) {\n            revert NotTheMostRecentCity();\n        }\n        if (maxSupplyInSuburb == 0) revert InvalidInputZeroSupply();\n\n        City storage c = cities[cityId_];\n        uint256 newSuburbId = ++c.numberOfSuburbs; // also increments storage\n\n        // set the first and last token IDs in the new Suburb\n        Suburb storage previousSub = c.suburbs[newSuburbId - 1];\n        uint256 firstTokenId_ = newSuburbId > 1\n            ? previousSub.firstTokenId + previousSub.maxSupply\n            : c.minTokenId; // first Suburb, avoid setting first token as 0\n        uint256 highestTokenId = firstTokenId_ + maxSupplyInSuburb - 1;\n\n        // update max token tracker in the City\n        c.maxTokenId = highestTokenId;\n\n        // init the new Suburb\n        c.suburbs[newSuburbId] = Suburb({\n            id: newSuburbId,\n            cityId: cityId_,\n            firstTokenId: firstTokenId_,\n            maxSupply: maxSupplyInSuburb,\n            currentSupply: 0,\n            pricePerToken: pricePerToken_,\n            allowListPricePerToken: allowListPricePerToken_,\n            dutchAuctionId: 0,\n            englishAuctionId: 0,\n            allowListActive: false,\n            saleActive: false\n        });\n\n        return newSuburbId;\n    }\n\n    /**\n     * @dev If and only if the most recent City is EMPTY, it can be removed.\n     *  This will allow the previous City to add more Suburbs etc.\n     *\n     *  Intended for accidentally added cities (e.g. multiple/stuck txs).\n     *\n     *  User must confirm the cityId as a sanity check, even though it must be\n     *  the most recently constructed City.\n     *\n     * @param cityId the City to be removed. Must be the most recently\n     *  constructed City.\n     */\n    function removeCity(uint256 cityId) external onlyRole(SUPPORT_ROLE) {\n        // revert if not the most recent City\n        if (cityId != numberOfCities || cityId == 0) {\n            revert NotTheMostRecentCity();\n        }\n\n        // revert if any suburbs have been built\n        if (cities[cityId].numberOfSuburbs != 0) revert CityOrSuburbNotEmpty();\n\n        // clear the empty City and decrement City counter\n        // nested suburbs mapping will not be cleared, but we know it is empty\n        delete cities[cityId];\n        numberOfCities--;\n    }\n\n    /**\n     * @dev If and only if a Suburb is EMPTY, it can be removed with this.\n     *  All sales must be closed and no tokens can have been minted from this\n     *  Suburb.\n     *\n     *  Intended for accidentally added suburbs (e.g. multiple/stuck txs).\n     *\n     *  User must confirm the cityId and suburbId as a sanity check, even\n     *  though they must be the most recently constructed City and Suburb.\n     *\n     * @param cityId the City where the Suburb is located. Must be the most\n     *  recently constructed City.\n     * @param suburbId the Suburb ID to remove. Must be the most recently\n     *  constructed Suburb.\n     */\n    function removeSuburb(uint256 cityId, uint256 suburbId)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        // revert if not the most recent City\n        if (cityId != numberOfCities || cityId == 0) {\n            revert NotTheMostRecentCity();\n        }\n\n        City storage c = cities[cityId];\n\n        // revert if not the most recent Suburb in the City\n        if (suburbId != c.numberOfSuburbs || suburbId == 0) {\n            revert NotTheMostRecentSuburb();\n        }\n\n        Suburb storage s = c.suburbs[suburbId];\n\n        // revert if any tokens have been sold\n        if (s.currentSupply != 0) revert CityOrSuburbNotEmpty();\n\n        // revert if any sales are active\n        _revertIfAnySaleActive(s);\n\n        // revert if any auctions are active\n        _revertIfAnyAuctionActive(s);\n\n        // reset token range in City\n        if (suburbId > 1) {\n            c.maxTokenId -= s.maxSupply;\n        } else {\n            c.maxTokenId = c.minTokenId; // as if City was newly initialized\n        }\n\n        // clear the Suburb and decrement counter\n        delete c.suburbs[suburbId];\n        c.numberOfSuburbs--;\n    }\n\n    /**************************************************************************\n     * CITY ACCESS - get information about a City/Suburb\n     */\n\n    /**\n     * @notice return the cityId a token belongs to. Does not check if token\n     *  exists.\n     * @param tokenId the token to search for\n     * @return cityId the City containing tokenId\n     */\n    function getCityId(uint256 tokenId) public view returns (uint256) {\n        if (tokenId == 0) revert InvalidTokenId();\n\n        for (uint256 cityId = 1; cityId <= numberOfCities; ) {\n            if (cities[cityId].maxTokenId >= tokenId) {\n                return cityId;\n            }\n            unchecked {\n                ++cityId;\n            }\n        }\n        // should only revert if tokenId is out of range\n        revert CityNotFound();\n    }\n\n    /**\n     * @notice get structured data for a Suburb.\n     *  Refer to Suburb struct layout for field ordering in returned tuple.\n     * @param cityId the City containing suburbId\n     * @param suburbId the suburbId within cityId\n     * @return Suburb structured data for the Suburb\n     */\n    function suburbs(uint256 cityId, uint256 suburbId)\n        public\n        view\n        returns (Suburb memory)\n    {\n        return cities[cityId].suburbs[suburbId];\n    }\n\n    /**************************************************************************\n     * CITY ADMIN\n     */\n\n    /**\n     * @dev set the merkle root to govern all allow lists. Reset this for each \n        new allow list sale.\n     * @param merkleRoot_ the new merkle root\n     */\n    function setAllowList(bytes32 merkleRoot_) external onlyRole(SUPPORT_ROLE) {\n        _setAllowList(merkleRoot_);\n    }\n\n    /**\n     * @dev start and stop the allow list sale for a Suburb.\n     *   Can be active at the same time as a public sale.\n     *   Cannot be active at the same time as an English or Dutch auction.\n     * @param cityId the parent City of the Suburb with the allowlist\n     * @param suburbId the Suburb hosting the allow list\n     * @param allowListState \"true\" starts the sale, \"false\" stops the sale\n     */\n    function setAllowListActive(\n        uint256 cityId,\n        uint256 suburbId,\n        bool allowListState\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _revertIfCityIdOrSuburbIdInvalid(cityId, suburbId);\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        _revertIfAnyAuctionActive(s);\n\n        s.allowListActive = allowListState;\n    }\n\n    /**\n     * @notice sets the base uri for a City\n     * @dev this baseURI applies to all suburbs in a City\n     * @param cityId identifier for the City\n     * @param baseURI_ the base uri for the City\n     */\n    function setBaseURI(uint256 cityId, string memory baseURI_)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        if (cityId == 0 || cityId > numberOfCities) revert InvalidCityId();\n        cities[cityId].baseURIExtended = baseURI_;\n    }\n\n    /**\n     * @notice sets the base uri for ALL tokens, overriding City baseURIs.\n     * @dev set this to override all the existing City-level baseURIs. The URI\n     *  set here must include all tokens in the collection.\n     *  To revert back to City-level baseURIs, set this to an empty string (\"\")\n     * @param baseURI_ the base uri for the whole collection\n     */\n    function setBaseURIOverride(string memory baseURI_)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _baseURIOverride = baseURI_;\n    }\n\n    /**\n     * @dev start and stop the public sale for a Suburb.\n     *   Can be active at the same time as an allow list sale.\n     *   Cannot be active at the same time as an English or Dutch auction.\n     * @param cityId the parent City of the Suburb hosting the sale\n     * @param suburbId the Suburb hosting the sale\n     * @param saleState \"true\" starts the sale, \"false\" stops the sale\n     */\n    function setSaleActive(\n        uint256 cityId,\n        uint256 suburbId,\n        bool saleState\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _revertIfCityIdOrSuburbIdInvalid(cityId, suburbId);\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        _revertIfAnyAuctionActive(s);\n\n        s.saleActive = saleState;\n    }\n\n    /**************************************************************************\n     * DUTCH AUCTIONS - create and manage Dutch auctions\n     */\n\n    /**\n     * @dev set up a Dutch auction for a Suburb.\n     *  This does not start the auction.\n     *  This will replace any existing auction details for this Suburb.\n     *  This cannot be called while a Dutch auction is active.\n     *\n     *  The auction duration is computed from the start price, final price,\n     *  price step and time step. Before starting the auction, check the\n     *  duration is correct by calling\n     *  getDutchAuctionInfo(dutchAuctionId)\n     *\n     * @param cityId the parent City of the Suburb hosting the Dutch Auction\n     * @param suburbId the Suburb to host the Dutch auction\n     * @param startPriceInWei start price for the auction, in wei.\n     * @param finalPriceInWei final price in wei. Lower than startPriceInWei.\n     * @param priceStepInWei price decreases this amount of wei each time step.\n     * @param timeStepInSeconds time between price decrease steps, in seconds.\n     * @return dutchAuctionId the ID number associated with this auction.\n     */\n    function createNewDutchAuction(\n        uint256 cityId,\n        uint256 suburbId,\n        uint88 startPriceInWei,\n        uint88 finalPriceInWei,\n        uint88 priceStepInWei,\n        uint80 timeStepInSeconds\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n        returns (uint256)\n    {\n        _revertIfCityIdOrSuburbIdInvalid(cityId, suburbId);\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        _revertIfAnyAuctionActive(s);\n\n        // create the auction, see {DutchAuctionHouse}\n        uint256 dutchAuctionID_ = _createNewDutchAuction(\n            startPriceInWei,\n            finalPriceInWei,\n            priceStepInWei,\n            timeStepInSeconds\n        );\n\n        // store the auction ID\n        s.dutchAuctionId = dutchAuctionID_;\n\n        emit DutchAuctionCreatedInSuburb(cityId, suburbId, dutchAuctionID_);\n        return dutchAuctionID_;\n    }\n\n    /**\n     * @notice start a Dutch auction\n     * @dev starts the most recently created Dutch auction in a Suburb.\n     *  If called on an auction which has been ended, this restarts the auction,\n     *  resetting price and timers.\n     *\n     *  Before starting the Dutch auction, check the parameters are correct by\n     *  calling getDutchAuctionInfo(dutchAuctionId)\n     *\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the Dutch auction\n     */\n    function startDutchAuction(uint256 cityId, uint256 suburbId)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        _revertIfAnySaleActive(s);\n        _revertIfAnyAuctionActive(s);\n\n        _startDutchAuction(s.dutchAuctionId);\n    }\n\n    /**\n     * @dev resume a stopped auction without resetting price and time counters\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the Dutch auction\n     */\n    function resumeDutchAuction(uint256 cityId, uint256 suburbId)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        _revertIfAnySaleActive(s);\n        _revertIfAnyAuctionActive(s);\n\n        _resumeDutchAuction(s.dutchAuctionId);\n    }\n\n    /**\n     * @dev end a Dutch auction\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the Dutch auction\n     */\n    function endDutchAuction(uint256 cityId, uint256 suburbId)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        uint256 auctionId = cities[cityId].suburbs[suburbId].dutchAuctionId;\n        _endDutchAuction(auctionId);\n    }\n\n    /**\n     * @notice get the current Dutch auction id in a Suburb. Use this in\n     *  helper functions for Dutch auctions. Returns 0 if an invalid City or\n     *  Suburb is requested.\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb to query\n     * @return dutchAuctionId identifier for the current Dutch auction\n     */\n    function getDutchAuctionId(uint256 cityId, uint256 suburbId)\n        external\n        view\n        returns (uint256)\n    {\n        return cities[cityId].suburbs[suburbId].dutchAuctionId;\n    }\n\n    /**\n     * @dev set the maximum number of mints per wallet per Dutch Auction\n     * @param maxMints maximum mints per wallet per Dutch Auction\n     */\n    function setMaxDutchAuctionMints(uint256 maxMints)\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        maxDutchAuctionMints = maxMints;\n    }\n\n    /**************************************************************************\n     * ENGLISH AUCTIONS - create and manage English auctions\n     */\n\n    /**\n     * @dev set up a new English Auction (ascending price auction). This does\n     *  NOT start the auction.\n     *\n     * Start time and duration are set when auction is started with\n     *  startEnglishAuction().\n     *\n     * outbidBuffer is to prevent 1 wei increments on the winning bid, and is\n     *  the minimum buffer new bids must exceed the current highest by.\n     *\n     * This will overwrite any unstarted English auctions in this Suburb.\n     *\n     * If any English auctions have been started in this Suburb, they must\n     *  be ended and settled before creating a new one.\n     *\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId Suburb to host the English Auction\n     * @param lotSize_ number of tokens to be sold in one bundle in this auction\n     * @param startingBidInWei_ starting bid in wei for the auction\n     * @param outbidBufferInWei_ new bids must exceed current highest by this\n     * @return auctionId id for the new English Auction\n     */\n    function createNewEnglishAuction(\n        uint256 cityId,\n        uint256 suburbId,\n        uint256 lotSize_,\n        uint256 startingBidInWei_,\n        uint256 outbidBufferInWei_\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n        returns (uint256)\n    {\n        _revertIfCityIdOrSuburbIdInvalid(cityId, suburbId);\n        if (lotSize_ == 0) revert InvalidInputZeroSupply();\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        // English Auction sale check, included in _revertIfAnyAuctionActive()\n        // cases:\n        //  ea not started >> continue >> overwrite the old one\n        //  ea started >> revert\n        //  ea ended && !settled >> revert\n        //  ea ended && settled >> continue >> overwrite the old one\n\n        _revertIfAnyAuctionActive(s);\n\n        // check there is supply available in this Suburb\n        if (s.currentSupply + lotSize_ > s.maxSupply) {\n            revert ExceedsSuburbMaximumSupply();\n        }\n\n        // set up the English Auction\n        uint256 newEnglishId = _setUpEnglishAuction(\n            lotSize_,\n            startingBidInWei_,\n            outbidBufferInWei_\n        );\n\n        s.englishAuctionId = newEnglishId;\n        emit EnglishAuctionCreatedInSuburb(cityId, suburbId, newEnglishId);\n        return newEnglishId;\n    }\n\n    /**\n     * @dev start an English Auction which has already been set up. It can be\n     *  started immediately, or some time in the future. When this has been\n     *  called, no other sales can be started until this English Auction ends\n     *  or is force-stopped.\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId Suburb hosting the English Auction\n     * @param startDelayInSeconds set 0 to start immediately, or delay the start\n     * @param durationInSeconds the number of seconds the auction will run for\n     */\n    function startEnglishAuction(\n        uint256 cityId,\n        uint256 suburbId,\n        uint256 startDelayInSeconds,\n        uint256 durationInSeconds\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        // check all sales are inactive for this Suburb, before starting\n        _revertIfAnySaleActive(s);\n        _revertIfAnyAuctionActive(s);\n\n        // recheck there is supply available for the lot size\n        uint256 auctionId = s.englishAuctionId;\n        if (\n            s.currentSupply + _englishAuctions[auctionId].lotSize > s.maxSupply\n        ) {\n            revert ExceedsSuburbMaximumSupply();\n        }\n\n        _startEnglishAuction(auctionId, startDelayInSeconds, durationInSeconds);\n    }\n\n    /**\n     * @dev marks an English Auction as settled and mints the winner's token(s)\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the English Auction\n     */\n    function settleEnglishAuction(uint256 cityId, uint256 suburbId)\n        external\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n        uint256 auctionId = s.englishAuctionId;\n\n        // auction ended/settled checks done in _markSettled()\n        _markSettled(auctionId);\n\n        // mint token to the winner\n        address winner = _englishAuctions[auctionId].highestBidder;\n\n        if (winner != address(0)) {\n            uint256 numberOfTokens_ = _englishAuctions[auctionId].lotSize;\n\n            // to prevent _safeMint() reverting maliciously and sticking the\n            // contract, we do not check onERC721Received(). Contracts bidding\n            // in this English Auction do so at their own risk and should\n            // ensure they can use their tokens once received, e.g. using\n            // {IERC721-safeTransferFrom}\n            _mintInSuburb(s, winner, numberOfTokens_);\n        }\n    }\n\n    /**\n     * @dev force stop an English Auction, returns ETH to highest bidder,\n     *  the token is not sold.\n     *  Cannot do this within the final 2 hours of an auction.\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the English Auction\n     */\n    function forceStopEnglishAuction(uint256 cityId, uint256 suburbId)\n        external\n        onlyRole(SUPPORT_ROLE)\n        nonReentrant\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        uint256 auctionId = s.englishAuctionId;\n        _forceStopEnglishAuction(auctionId);\n    }\n\n    /**\n     * @notice get the current englishAuctionId in a Suburb. Use this in\n     *  helper functions for English auctions.\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb to query\n     * @return englishAuctionId identifier for the active English Auction\n     */\n    function getEnglishAuctionId(uint256 cityId, uint256 suburbId)\n        external\n        view\n        returns (uint256)\n    {\n        return cities[cityId].suburbs[suburbId].englishAuctionId;\n    }\n\n    /**\n     * @dev edit the maximum gas sent with refunds during an English Auction.\n     *  Gas limit initialized to 2300, but modifiable in case of future need.\n     *\n     *  Refunds are sent when:\n     *  i) a high-bidder is outbid (their bid is returned)\n     *  ii) an English Auction is force-stopped (current leader is refunded)\n     *\n     *  If this is set too low, all refunds using _gasLimitedCall() will\n     *  fail.\n     * @param maxGas maximum gas units for the call\n     */\n    function editMaxRefundGas(uint256 maxGas) external onlyRole(SUPPORT_ROLE) {\n        _editMaxRefundGas(maxGas);\n    }\n\n    /**************************************************************************\n     * MINT FUNCTIONS - mint tokens using each sale type\n     */\n\n    /**\n     * @notice mint tokens from a City-Suburb on the public sale.\n     * @param cityId the City ID to mint from\n     * @param suburbId the Suburb ID within cityId to mint from: 1, 2, 3...\n     * @param numberOfTokens number of tokens to mint\n     */\n    function mint(\n        uint256 cityId,\n        uint256 suburbId,\n        uint256 numberOfTokens\n    )\n        external\n        payable\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n\n        // check saleActive\n        if (!s.saleActive) revert PublicSaleIsNotActive();\n\n        // check sent value is correct\n        uint256 price = s.pricePerToken;\n        if (msg.value != price * numberOfTokens) revert WrongETHValueSent();\n\n        _safeMintInSuburb(s, msg.sender, numberOfTokens);\n    }\n\n    /**\n     * @notice mint tokens on the Allow List\n     * @dev using {MerkleFourParams} to manage a multiparameter merkle tree\n     * @param cityId the parent City of the Suburb to mint in\n     * @param suburbId the Suburb to mint in\n     * @param numberOfTokens how many tokens to mint\n     * @param tokenQuotaInSuburb the total quota for this address in this\n     *  Suburb, regardless of the number minted so far\n     * @param merkleProof merkle proof for this address and Suburb combo\n     */\n    function mintAllowList(\n        uint256 cityId,\n        uint256 suburbId,\n        uint256 numberOfTokens,\n        uint256 tokenQuotaInSuburb,\n        bytes32[] calldata merkleProof\n    )\n        external\n        payable\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n        if (!s.allowListActive) revert AllowListIsNotActive();\n\n        // check minted quota\n        uint256 claimed_ = getAllowListMinted(msg.sender, cityId, suburbId);\n        if (claimed_ + numberOfTokens > tokenQuotaInSuburb) {\n            revert ExceedsAllowListQuota();\n        }\n\n        // check user is on allowlist and has their tokenQuotaInSuburb\n        if (\n            !onAllowList(\n                msg.sender,\n                tokenQuotaInSuburb,\n                cityId,\n                suburbId,\n                merkleProof\n            )\n        ) {\n            revert NotOnAllowList();\n        }\n\n        // check the eth passed is correct for this Suburb\n        if (msg.value != numberOfTokens * s.allowListPricePerToken) {\n            revert WrongETHValueSent();\n        }\n\n        // update allowlist minted for user\n        _setAllowListMinted(msg.sender, cityId, suburbId, numberOfTokens);\n\n        _safeMintInSuburb(s, msg.sender, numberOfTokens);\n    }\n\n    /**\n     * @notice Mint tokens in the Dutch auction for any tier\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId the Suburb hosting the Dutch auction\n     * @param numberOfTokens The number of tokens to mint\n     */\n    function mintDutch(\n        uint256 cityId,\n        uint256 suburbId,\n        uint256 numberOfTokens\n    )\n        external\n        payable\n        nonReentrant\n    {\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n        uint256 auctionId = s.dutchAuctionId;\n        DutchAuction storage da = _dutchAuctions[auctionId];\n\n        // check auction is active - see {DutchAuctionHouse}\n        if (!da.auctionActive) revert DutchAuctionIsNotActive();\n\n        // check current price\n        uint256 tokenPrice = getDutchAuctionPrice(auctionId);\n        uint256 salePrice = tokenPrice * numberOfTokens;\n        if (msg.value < salePrice) revert WrongETHValueSent();\n\n        // limit mints during price decline, unlimited at resting price\n        if (tokenPrice > da.finalPrice) {\n            if (\n                (getDutchAuctionMints(auctionId, msg.sender) + numberOfTokens) >\n                maxDutchAuctionMints\n            ) {\n                revert ExceedsMaximumTokensDuringDutchAuction();\n            }\n            // if resting price is already hit, this SSTORE is not needed\n            _incrementDutchAuctionMints(auctionId, msg.sender, numberOfTokens);\n        }\n\n        _safeMintInSuburb(s, msg.sender, numberOfTokens);\n\n        // refund if price declined before tx confirmed\n        if (msg.value > salePrice) {\n            uint256 refund = msg.value - salePrice;\n            (bool success, ) = payable(msg.sender).call{value: refund}(\"\");\n            if (!success) revert RefundFailed();\n        }\n    }\n\n    /**\n     * @notice Bid on an English Auction for a Suburb. If you are the highest\n     *  bidder already, extra bids are added to your current bid. All bids are\n     *  final and cannot be revoked.\n     *\n     * NOTE: if bidding from a contract ensure it can use any tokens received.\n     *  This does not check onERC721Received().\n     *\n     * @dev refunds previous highest bidder when new highest bid received.\n     * @param cityId parent City of the auctioning Suburb\n     * @param suburbId Suburb hosting the auction\n     */\n    function bidEnglish(uint256 cityId, uint256 suburbId)\n        external\n        payable\n        nonReentrant\n    {\n        uint256 auctionId = cities[cityId].suburbs[suburbId].englishAuctionId;\n        _bidEnglish(auctionId);\n    }\n\n    /**\n     * @dev mint reserve tokens to any address\n     * @param cityId the City ID to mint from\n     * @param suburbId the Suburb ID within cityId to mint from: 1, 2, 3...\n     * @param to recipient address\n     * @param numberOfTokens number of tokens to mint\n     */\n    function devMint(\n        uint256 cityId,\n        uint256 suburbId,\n        address to,\n        uint256 numberOfTokens\n    )\n        external\n        onlyRole(SUPPORT_ROLE)\n    {\n        _revertIfCityIdOrSuburbIdInvalid(cityId, suburbId);\n        Suburb storage s = cities[cityId].suburbs[suburbId];\n        _revertIfAnyAuctionActive(s);\n\n        _safeMintInSuburb(s, to, numberOfTokens);\n    }\n\n    /**************************************************************************\n     * OWNER FUNCTIONS\n     */\n\n    /**\n     * @dev withdraws ether from the contract to the shareholder address\n     */\n    function withdraw() external onlyOwner nonReentrant {\n        uint256 bal = address(this).balance;\n        (bool success, ) = shareholderAddress.call{value: bal}(\"\");\n\n        if (!success) revert WithdrawFailed();\n    }\n\n    /**************************************************************************\n     * INTERNAL MINT FUNCTIONS\n     */\n\n    /**\n     * @dev internal mint helper - check and update supply, then return the\n     *  next sequential ID to mint in the Suburb.\n     * @param s the Suburb to mint in\n     * @param quantity number of tokens to mint\n     * @return nextId the next sequential ID to mint in the Suburb\n     */\n    function _mintChecksEffectsNextId(Suburb storage s, uint256 quantity)\n        internal\n        returns (uint256)\n    {\n        if (quantity == 0) revert ZeroQuantityRequested();\n\n        // current supply check\n        uint256 currentSupply_ = s.currentSupply;\n        if (currentSupply_ + quantity > s.maxSupply) {\n            revert ExceedsSuburbMaximumSupply();\n        }\n\n        // effects\n        s.currentSupply = currentSupply_ + quantity;\n        totalSupply += quantity;\n\n        // return\n        uint256 nextId = s.firstTokenId + currentSupply_;\n        return nextId;\n    }\n\n    /**\n     * @dev internal mint function using {ERC721-_mint} i.e. NOT checking\n     *  {ERC721-onERC721Received}.\n     * @param s the Suburb to mint in\n     * @param receiver mint to this address\n     * @param quantity number of tokens to mint\n     */\n    function _mintInSuburb(\n        Suburb storage s,\n        address receiver,\n        uint256 quantity\n    )\n        internal\n    {\n        uint256 nextId = _mintChecksEffectsNextId(s, quantity);\n\n        for (uint256 i; i < quantity; ) {\n            _mint(receiver, nextId + i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev internal mint function using {ERC721-_safeMint}\n     * @param s the Suburb to mint in\n     * @param receiver mint to this address\n     * @param quantity number of tokens to mint\n     */\n    function _safeMintInSuburb(\n        Suburb storage s,\n        address receiver,\n        uint256 quantity\n    )\n        internal\n    {\n        uint256 nextId = _mintChecksEffectsNextId(s, quantity);\n\n        for (uint256 i; i < quantity; ) {\n            _safeMint(receiver, nextId + i);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**************************************************************************\n     * OVERRIDE SUPERS\n     */\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(WCNFTToken, ERC721)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev each City has its own baseURI.\n     * Adapted from {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert InvalidTokenId();\n        string memory baseURI = _baseURIOverride;\n\n        if (bytes(baseURI).length == 0) {\n            uint256 cityId = getCityId(tokenId);\n            baseURI = cities[cityId].baseURIExtended;\n\n            if (bytes(baseURI).length == 0) {\n                return \"\";\n            }\n        }\n\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\n    }\n\n    /***************************************************************************\n     * Operator Filter\n     */\n\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId)\n        public\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n}\n"
78     },
79     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
80       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
81     }
82   },
83   "settings": {
84     "optimizer": {
85       "enabled": true,
86       "runs": 825
87     },
88     "outputSelection": {
89       "*": {
90         "*": [
91           "evm.bytecode",
92           "evm.deployedBytecode",
93           "devdoc",
94           "userdoc",
95           "metadata",
96           "abi"
97         ]
98       }
99     }
100   }
101 }}