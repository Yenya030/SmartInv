1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "src/EtherCapsuleAuction.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nerror InputMismatch();\nerror AuctionNotStarted();\nerror MaxPerMintExceeded();\nerror InsufficientPrice();\nerror WithdrawFailed();\nerror InvalidCurrentTokenId();\nerror RefundAlreadyProcessed();\nerror AuctionNotOver();\nerror InvalidBid();\nerror RefundFailed(uint256 tokenId);\nerror OnlyEOA();\n\ncontract EtherCapsuleAuction is Ownable, ReentrancyGuard {\n    IERC721 public immutable ETHER_CAPSULE;\n\n    struct AuctionParams {\n        uint64 startPrice;\n        uint64 endPrice;\n        uint64 decay;\n        uint32 step;\n        uint32 startTime;\n    }\n\n    struct Bid {\n        address bidder;\n        uint64 amount;\n        bool refundProcessed;\n    }\n\n    AuctionParams public auctionParams;\n    mapping(uint256 => Bid) public tokenBids;\n    // Initial value is the first token minted to this contract\n    uint256 public currentTokenId = 2075;\n    uint256 public settlePrice;\n\n    constructor(\n        address _capsuleAddress,\n        uint64 _startPrice,\n        uint64 _endPrice,\n        uint64 _decay,\n        uint32 _step,\n        uint32 _startTime\n    ) {\n        ETHER_CAPSULE = IERC721(_capsuleAddress);\n\n        auctionParams = AuctionParams(_startPrice, _endPrice, _decay, _step, _startTime);\n    }\n\n    function airdrop(address[] calldata receivers, uint16[] calldata amounts) external onlyOwner {\n        if (receivers.length != amounts.length) revert InputMismatch();\n\n        unchecked {\n            for (uint256 i; i < receivers.length; ++i) {\n                address receiver = receivers[i];\n                uint16 amount = amounts[i];\n                uint256 _currentTokenId = currentTokenId;\n\n                // Loop through and transfer tokens\n                for (uint16 j; j < amount; ++j) {\n                    ETHER_CAPSULE.transferFrom(address(this), receiver, _currentTokenId + j);\n                }\n\n                currentTokenId += amount;\n            }\n        }\n    }\n\n    modifier onlyEOA() {\n        if (tx.origin != msg.sender) revert OnlyEOA();\n        _;\n    }\n\n    // =========================================================================\n    //                            Auction Functions\n    // =========================================================================\n\n    function getAuctionPrice() public view returns (uint256) {\n        AuctionParams memory _auctionParams = auctionParams;\n        if (_auctionParams.startTime == 0) return _auctionParams.startPrice;\n        uint256 elapsed = block.timestamp - _auctionParams.startTime;\n        uint256 steps = elapsed / _auctionParams.step;\n        uint256 decay = steps * _auctionParams.decay;\n        unchecked {\n            if (decay > _auctionParams.startPrice - _auctionParams.endPrice) {\n                return _auctionParams.endPrice;\n            }\n            return _auctionParams.startPrice - decay;\n        }\n    }\n\n    function auctionMint(uint256 qty) external payable nonReentrant onlyEOA {\n        if (auctionParams.startTime == 0) revert AuctionNotStarted();\n        if (qty > 3) revert MaxPerMintExceeded();\n\n        uint256 currentPrice = getAuctionPrice();\n        uint256 totalPrice = currentPrice * qty;\n        if (msg.value < totalPrice) revert InsufficientPrice();\n\n        // Record bids for each token id\n        uint256 _currentTokenId = currentTokenId;\n        for (uint256 i; i < qty;) {\n            uint256 tokenId = _currentTokenId + i;\n            tokenBids[tokenId] = Bid(msg.sender, uint64(currentPrice), false);\n            ETHER_CAPSULE.transferFrom(address(this), msg.sender, tokenId);\n            unchecked {\n                ++i;\n            }\n        }\n\n        unchecked {\n            // Increment current token id\n            currentTokenId += qty;\n\n            // Refund if over\n            uint256 difference = msg.value - totalPrice;\n            if (difference > 0) {\n                _transferETH(msg.sender, difference);\n            }\n        }\n    }\n\n    function processRefunds(uint256[] calldata tokenIds) external onlyOwner nonReentrant {\n        if (settlePrice == 0) revert AuctionNotOver();\n\n        for (uint256 i; i < tokenIds.length;) {\n            uint256 tokenId = tokenIds[i];\n            Bid memory bid = tokenBids[tokenId];\n\n            if (bid.bidder == address(0)) revert InvalidBid();\n            if (bid.refundProcessed) revert RefundAlreadyProcessed();\n\n            tokenBids[tokenId].refundProcessed = true;\n            uint256 priceDifference = bid.amount - settlePrice;\n            if (priceDifference > 0) {\n                bool success = _transferETH(bid.bidder, priceDifference);\n                if (!success) revert RefundFailed(tokenId);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // =========================================================================\n    //                           Owner Only Functions\n    // =========================================================================\n\n    function setCurrentTokenId(uint256 _currentTokenId) external onlyOwner {\n        if (ETHER_CAPSULE.ownerOf(_currentTokenId) != address(this)) {\n            revert InvalidCurrentTokenId();\n        }\n        currentTokenId = _currentTokenId;\n    }\n    \n    function setSettlePrice(uint256 _settlePrice) external onlyOwner {\n        settlePrice = _settlePrice;\n    }\n\n    function setAuctionStart(uint32 _startTime) external onlyOwner {\n        auctionParams.startTime = _startTime;\n    }\n\n    function setAuctionParams(uint64 _startPrice, uint64 _endPrice, uint64 _decay, uint32 _step, uint32 _startTime)\n        external\n        onlyOwner\n    {\n        // Passing a _startTime > 0 will set the auction start time\n        auctionParams = AuctionParams(_startPrice, _endPrice, _decay, _step, _startTime);\n    }\n\n    function withdrawFunds(address receiver) external onlyOwner {\n        (bool sent,) = receiver.call{value: address(this).balance}(\"\");\n        if (!sent) {\n            revert WithdrawFailed();\n        }\n    }\n\n    function _transferETH(address to, uint256 value) internal returns (bool) {\n        (bool success,) = to.call{value: value, gas: 30000}(new bytes(0));\n        return success;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "remappings": [
41       "@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
42       "@openzeppelin/=lib/openzeppelin-contracts/",
43       "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
44       "ERC721A/=lib/ERC721A/contracts/",
45       "closedsea/=lib/closedsea/src/",
46       "ds-test/=lib/forge-std/lib/ds-test/src/",
47       "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
48       "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
49       "erc721a/=lib/closedsea/lib/erc721a/contracts/",
50       "forge-std/=lib/forge-std/src/",
51       "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
52       "openzeppelin-contracts/=lib/openzeppelin-contracts/",
53       "operator-filter-registry/=lib/operator-filter-registry/src/"
54     ],
55     "libraries": {}
56   }
57 }}