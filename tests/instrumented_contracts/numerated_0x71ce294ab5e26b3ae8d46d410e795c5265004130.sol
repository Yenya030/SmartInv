1 {{
2   "language": "Solidity",
3   "sources": {
4     "NegotiationsWithTheAbyss.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\n/// @title Negotiations With the Abyss by diewiththemostlikes\n/// @author transientlabs.xyz\n\npragma solidity 0.8.17;\n\nimport {ERC1155TLCore} from \"ERC1155TLCore.sol\";\nimport {BlockList} from \"BlockList.sol\";\n\ncontract NegotiationsWithTheAbyss is ERC1155TLCore, BlockList {\n\n    constructor(address admin, address payout, address[] memory initBlockedOperators)\n    ERC1155TLCore(admin, payout, \"negotiations with the abyss\")\n    BlockList()\n    {\n        for (uint256 i = 0; i < initBlockedOperators.length; i++) {\n            _setBlockListStatus(initBlockedOperators[i], true);\n        }\n    }\n\n    /// @notice function to set the merkle root for a token\n    /// @dev requires admin or owner\n    function setMerkleRoot(uint256 tokenId, bytes32 newRoot) external adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _tokenDetails[tokenId].merkleRoot = newRoot;\n    }\n\n    /// @notice add blocklist modifier to approval\n    function setApprovalForAll(address operator, bool approved) public virtual override notBlocked(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /// @notice burn function\n    /// @dev requires owner of the tokens or approved operator\n    function burn(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external {\n        require(tokenIds.length > 0, \"cannot burn 0 tokens\");\n        require(msg.sender == from || isApprovedForAll(from, msg.sender), \"unauthorized\");\n        _burnBatch(from, tokenIds, amounts);\n    }\n\n    /// @notice blocklist function\n    /// @dev requires owner\n    function setBlockListStatus(address operator, bool status) external onlyOwner {\n        _setBlockListStatus(operator, status);\n    }\n}"
6     },
7     "ERC1155TLCore.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\n/**\n*   @title ERC-1155 TL Core\n*   @notice ERC-1155 contract with owner/admin roles, merkle claim, airdrops, and owner mint functionality\n*   @author transientlabs.xyz\n*/\n\n/*\n   ___       _ __   __  ___  _ ______                 __ \n  / _ )__ __(_) /__/ / / _ \\(_) _/ _/__ _______ ___  / /_\n / _  / // / / / _  / / // / / _/ _/ -_) __/ -_) _ \\/ __/\n/____/\\_,_/_/_/\\_,_/ /____/_/_//_/ \\__/_/  \\__/_//_/\\__/                                                          \n ______                  _          __    __        __     \n/_  __/______ ____  ___ (_)__ ___  / /_  / /  ___ _/ /  ___\n / / / __/ _ `/ _ \\(_-</ / -_) _ \\/ __/ / /__/ _ `/ _ \\(_-<\n/_/ /_/  \\_,_/_//_/___/_/\\__/_//_/\\__/ /____/\\_,_/_.__/___/ \n*/\n\npragma solidity 0.8.17;\n\nimport \"ERC1155.sol\";\nimport \"IERC20.sol\";\nimport \"Ownable.sol\";\nimport \"ReentrancyGuard.sol\";\nimport \"MerkleProof.sol\";\nimport \"EIP2981MultiToken.sol\";\n\ncontract ERC1155TLCore is ERC1155, EIP2981MultiToken, Ownable, ReentrancyGuard {\n\n    struct TokenDetails {\n        bool created;\n        bool mintStatus;\n        bool frozen;\n        uint64 availableSupply;\n        uint16 mintAllowance;\n        uint256 price;\n        string uri;\n        bytes32 merkleRoot;\n        mapping(address => uint16) numMinted;\n    }\n\n    mapping(uint256 => TokenDetails) internal _tokenDetails;\n\n    address public adminAddress;\n    address payable public payoutAddress;\n\n    string public name;\n\n    modifier adminOrOwner {\n        require(msg.sender == adminAddress || msg.sender == owner(), \"ERC1155TLCore: Address not admin or owner\");\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == adminAddress, \"ERC1155TLCore: Address not admin\");\n        _;\n    }\n\n    /**\n    *   @param admin is the admin address\n    *   @param payout is the payout address\n    *   @param contractName is the name of the contract\n    */\n    constructor(address admin, address payout, string memory contractName)\n        ERC1155(\"\")\n        Ownable() \n        ReentrancyGuard()\n    {\n        adminAddress = admin;\n        payoutAddress = payable(payout);\n        name = contractName;\n    }\n\n    /**\n    *   @notice function to create a token\n    *   @dev requires owner or admin\n    *   @param tokenId must be a new token id\n    *   @param supply is the total supply of the new token\n    *   @param mintStatus is a bool representing initial mint status\n    *   @param mintAllowance is a uint16 representing the number someone is able to mint\n    *   @param price is a uint256 representing mint price in wei\n    *   @param uri_ is the new token uri\n    *   @param merkleRoot is the token merkle root\n    *   @param royaltyRecipient is an address that is the royalty recipient for this token\n    *   @param royaltyPerc is the percentage for royalties, in basis (out of 10,000)\n    */\n    function createToken(\n        uint256 tokenId,\n        uint64 supply,\n        bool mintStatus,\n        uint16 mintAllowance,\n        uint256 price,\n        string memory uri_,\n        bytes32 merkleRoot,\n        address royaltyRecipient,\n        uint256 royaltyPerc\n    )\n        external\n        virtual\n        adminOrOwner \n    {\n        require(_tokenDetails[tokenId].created == false, \"ERC1155TLCore: Token ID already exists\");\n        _tokenDetails[tokenId].created = true;\n        _tokenDetails[tokenId].availableSupply = supply;\n        _tokenDetails[tokenId].mintAllowance = mintAllowance;\n        _tokenDetails[tokenId].mintStatus = mintStatus;\n        _tokenDetails[tokenId].price = price;\n        _tokenDetails[tokenId].uri = uri_;\n        _tokenDetails[tokenId].merkleRoot = merkleRoot;\n        _setRoyaltyInfo(tokenId, royaltyRecipient, royaltyPerc);\n    }\n\n    /**\n    *   @notice function to set mint allowance for a token\n    *   @dev requires admin or owner\n    *   @param tokenId is the token id\n    *   @param allowance is the new available mint allowance for that token\n    */\n    function setMintAllowance(uint256 tokenId, uint16 allowance) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _tokenDetails[tokenId].mintAllowance = allowance;\n    }\n\n    /**\n    *   @notice freezes the metadata for the token\n    *   @dev requires admin or owner\n    *   @param tokenId is the token id\n    */\n    function freezeToken(uint256 tokenId) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _tokenDetails[tokenId].frozen = true;\n    }\n\n    /**\n    *   @notice sets the URI for individual tokens\n    *   @dev requires admin or owner\n    *   @dev emits URI event per the ERC 1155 standard\n    *   @param newURI is the base URI set for each token\n    *   @param tokenId is the token id\n    */\n    function setURI(uint256 tokenId, string memory newURI) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        require(!_tokenDetails[tokenId].frozen, \"ERC1155TLCore: Token metadata frozen\");\n        _tokenDetails[tokenId].uri = newURI;\n        emit URI(newURI, tokenId);\n    }\n\n    /**\n    *   @notice set token mint status\n    *   @dev requires admin or owner\n    *   @param tokenId is the token id\n    *   @param status is the desired status\n    */\n    function setMintStatus(uint256 tokenId, bool status) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _tokenDetails[tokenId].mintStatus = status;\n    }\n\n    /**\n    *   @notice function to change the royalty recipient\n    *   @dev requires owner\n    *   @dev this is useful if an account gets compromised or anything like that\n    *   @param tokenId is the token id to assign this address to\n    *   @param newRecipient is the new royalty recipient\n    */\n    function setRoyaltyRecipient(uint256 tokenId, address newRecipient) external virtual onlyOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _setRoyaltyInfo(tokenId, newRecipient, _royaltyPerc[tokenId]);\n    }\n\n    /**\n    *   @notice function to change the royalty percentage\n    *   @dev requires owner\n    *   @dev this is useful if the amount was set improperly at contract creation.\n    *   @param tokenId is the token id\n    *   @param newPerc is the new royalty percentage, in basis points (out of 10,000)\n    */\n    function setRoyaltyPercentage(uint256 tokenId, uint256 newPerc) external virtual onlyOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        _setRoyaltyInfo(tokenId, _royaltyAddr[tokenId], newPerc);\n    }\n\n    /**\n    *   @notice function for batch minting the token to many addresses\n    *   @dev requires owner or admin\n    *   @dev airdrop not subject to mint allowance constraints\n    *   @param tokenId is the token id to airdrop\n    *   @param addresses is an array of addresses to mint to\n    */\n    function airdrop(uint256 tokenId, address[] calldata addresses) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        require(_tokenDetails[tokenId].availableSupply >= addresses.length, \"ERC1155TLCore: Not enough token supply available\");\n\n        _tokenDetails[tokenId].availableSupply -= uint64(addresses.length);\n        \n        for (uint256 i; i < addresses.length; i++) {\n            _mint(addresses[i], tokenId, 1, \"\");\n        }\n    }\n\n    /**\n    *   @notice function for minting to the owner's address\n    *   @dev requires owner or admin\n    *   @dev not subject to mint allowance constraints\n    *   @param tokenId is the token id to airdrop\n    *   @param numToMint is the number to mint\n    */\n    function ownerMint(uint256 tokenId, uint256 numToMint) external virtual adminOrOwner {\n        require(_tokenDetails[tokenId].created, \"ERC1155TLCore: Token ID not valid\");\n        require(_tokenDetails[tokenId].availableSupply >= numToMint, \"ERC1155TLCore: Not enough token supply available\");\n\n        _tokenDetails[tokenId].availableSupply -= uint64(numToMint);\n        \n        _mint(owner(), tokenId, numToMint, \"\");\n    }\n\n    /**\n    *   @notice function to withdraw ERC20 tokens from the contract\n    *   @dev requires admin or owner\n    *   @dev requires payout address to be abel to receive ERC20 tokens\n    *   @param tokenAddress is the ERC20 contract address\n    *   @param amount is the amount to withdraw\n    */\n    function withdrawERC20(address tokenAddress, uint256 amount) external virtual adminOrOwner {\n        IERC20 erc20 = IERC20(tokenAddress);\n        require(amount <= erc20.balanceOf(address(this)), \"ERC721ATLCore: cannot withdraw more than balance\");\n        require(erc20.transfer(payoutAddress, amount));\n    }\n\n    /**\n    *   @notice function to withdraw ether from the contract\n    *   @dev requires admin or owner\n    *   @dev recipient MUST be an EOA or contract that does not require more than 2300 gas\n    *   @param amount is the amount to withdraw\n    */\n    function withdrawEther(uint256 amount) external virtual adminOrOwner {\n        require(amount <= address(this).balance, \"ERC721ATLCore: cannot withdraw more than balance\");\n        payoutAddress.transfer(amount);\n    }\n\n    /**\n    *   @notice function to renounce admin rights\n    *   @dev requires admin only\n    */\n    function renounceAdmin() external virtual onlyAdmin {\n        adminAddress = address(0);\n    }\n\n    /**\n    *   @notice function to set the admin address on the contract\n    *   @dev requires owner\n    *   @param newAdmin is the new admin address\n    */\n    function setAdminAddress(address newAdmin) external virtual onlyOwner {\n        require(newAdmin != address(0), \"ERC1155TLCore: New admin cannot be the zero address\");\n        adminAddress = newAdmin;\n    }\n\n    /**\n    *   @notice function to set the payout address\n    *   @dev requires owner\n    *   @param payoutAddr is the new payout address\n    */\n    function setPayoutAddress(address payoutAddr) external virtual onlyOwner {\n        require(payoutAddr != address(0), \"ERC1155TLCore: Payout address cannot be the zero address\");\n        payoutAddress = payable(payoutAddr);\n    }\n\n    /**\n    *   @notice function for users to mint\n    *   @dev requires payment\n    *   @param tokenId is the token id to mint\n    *   @param numToMint is the amount to mint\n    *   @param merkleProof is the has for merkle proof verification\n    */\n    function mint(uint256 tokenId, uint16 numToMint, bytes32[] calldata merkleProof) external virtual payable nonReentrant {\n        TokenDetails storage token = _tokenDetails[tokenId];\n        require(token.created, \"ERC1155TLCore: Token ID not valid\");\n        require(token.availableSupply >= numToMint, \"ERC1155TLCore: Not enough token supply available\");\n        require(token.mintStatus == true, \"ERC1155TLCore: Mint not open\");\n        require(msg.value >= token.price*uint256(numToMint), \"ERC1155TLCore: Not enough ether attached to the transaction\");\n        require(token.numMinted[msg.sender] + numToMint <= token.mintAllowance, \"ERC1155TLCore: Cannot mint more than allowed\");\n        if (token.merkleRoot != bytes32(0)) {\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n            require(MerkleProof.verify(merkleProof, token.merkleRoot, leaf), \"ERC1155TLCore: Not on allowlist\");\n        }\n\n        token.numMinted[msg.sender] += numToMint;\n        token.availableSupply -= uint64(numToMint);\n\n        _mint(msg.sender, tokenId, uint256(numToMint), \"\");\n    }\n\n    /**\n    *   @notice function to return available token supply\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @return uint64 representing available supply\n    */\n    function getTokenSupply(uint256 tokenId) external view virtual returns(uint64) {\n        return _tokenDetails[tokenId].availableSupply;\n    }\n\n    /**\n    *   @notice function to return mint allowance for a token\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @return uint16 representing mint allowance\n    */\n    function getMintAllowance(uint256 tokenId) external view virtual returns(uint16) {\n        return _tokenDetails[tokenId].mintAllowance;\n    }\n\n    /**\n    *   @notice function to see how many tokens and address has minted\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @param addr is the address to check\n    *   @return uint16 indicating number minted\n    */\n    function getNumMinted(uint256 tokenId, address addr) external view virtual returns (uint16) {\n        return _tokenDetails[tokenId].numMinted[addr];\n    }\n\n    /**\n    *   @notice function to see the mint status for a token\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @return boolean indicating mint status\n    */\n    function getMintStatus(uint256 tokenId) external view virtual returns (bool) {\n        return _tokenDetails[tokenId].mintStatus;\n    }\n\n    /**\n    *   @notice function to see the price for a token\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @return uint256 with price in Wei\n    */\n    function getTokenPrice(uint256 tokenId) external view virtual returns (uint256) {\n        return _tokenDetails[tokenId].price;\n    }\n\n    /**\n    *   @notice function to see the merkle root for a token\n    *   @dev does not throw for non-existent tokens\n    *   @param tokenId is the token id\n    *   @return bytes32 with merkle root\n    */\n    function getMerkleRoot(uint256 tokenId) external view virtual returns (bytes32) {\n        return _tokenDetails[tokenId].merkleRoot;\n    }\n\n    /**\n    *   @notice overrides supportsInterface function\n    *   @param interfaceId is supplied from anyone/contract calling this function, as defined in ERC 165\n    *   @return a boolean saying if this contract supports the interface or not\n    */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, EIP2981MultiToken) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n    *   @notice function to return uri for a specific token type\n    *   @param tokenId is the uint256 representation of a token ID\n    *   @return string representing the uri for the token id\n    */\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return _tokenDetails[tokenId].uri;\n    }   \n}"
9     },
10     "ERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC1155.sol\";\nimport \"IERC1155Receiver.sol\";\nimport \"IERC1155MetadataURI.sol\";\nimport \"Address.sol\";\nimport \"Context.sol\";\nimport \"ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
12     },
13     "IERC1155.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
15     },
16     "IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "IERC1155Receiver.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
21     },
22     "IERC1155MetadataURI.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
24     },
25     "Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
27     },
28     "Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
33     },
34     "IERC20.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
36     },
37     "Ownable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
39     },
40     "ReentrancyGuard.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
42     },
43     "MerkleProof.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
45     },
46     "EIP2981MultiToken.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n\n/**\n*   @title EIP 2981 base contract\n*   @notice EIP 2981 implementation for differing royalties based on token number\n*   @author transientlabs.xyz\n*/\n\n/*\n   ___       _ __   __  ___  _ ______                 __ \n  / _ )__ __(_) /__/ / / _ \\(_) _/ _/__ _______ ___  / /_\n / _  / // / / / _  / / // / / _/ _/ -_) __/ -_) _ \\/ __/\n/____/\\_,_/_/_/\\_,_/ /____/_/_//_/ \\__/_/  \\__/_//_/\\__/                                                          \n ______                  _          __    __        __     \n/_  __/______ ____  ___ (_)__ ___  / /_  / /  ___ _/ /  ___\n / / / __/ _ `/ _ \\(_-</ / -_) _ \\/ __/ / /__/ _ `/ _ \\(_-<\n/_/ /_/  \\_,_/_//_/___/_/\\__/_//_/\\__/ /____/\\_,_/_.__/___/ \n*/\npragma solidity 0.8.17;\n\nimport \"ERC165.sol\";\nimport \"IEIP2981.sol\";\n\nabstract contract EIP2981MultiToken is IEIP2981, ERC165 {\n\n    mapping(uint256 => address) internal _royaltyAddr;\n    mapping(uint256 => uint256) internal _royaltyPerc; // percentage in basis (out of 10,000)\n\n    /**\n    *   @notice EIP 2981 royalty support\n    */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view virtual override returns (address receiver, uint256 royaltyAmount) {\n        return (_royaltyAddr[_tokenId], _royaltyPerc[_tokenId] * _salePrice / 10000);\n    }\n\n    /**\n    *   @notice override ERC 165 implementation of this function\n    *   @dev if using this contract with another contract that suppports ERC 165, will have to override in the inheriting contract\n    */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return interfaceId == type(IEIP2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n    *   @notice function to set royalty information for a token\n    *   @dev to be called by inheriting contract\n    *   @param tokenId is the token id\n    *   @param addr is the royalty payout address for this token id\n    *   @param perc is the royalty percentage (out of 10,000) to set for this token id\n    */\n    function _setRoyaltyInfo(uint256 tokenId, address addr, uint256 perc) internal virtual {\n        require(addr != address(0), \"EIP2981MultiToken: Cannot set royalty receipient to the zero address\");\n        require(perc < 10000, \"EIP2981MultiToken: Cannot set royalty percentage above 10000\");\n        _royaltyAddr[tokenId] = addr;\n        _royaltyPerc[tokenId] = perc;\n    }\n}"
48     },
49     "IEIP2981.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IEIP2981 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver,uint256 royaltyAmount);\n}"
51     },
52     "BlockList.sol": {
53       "content": "// SPDX-License-Identifier: Apache-2.0\n\n/// @title BlockList\n/// @author transientlabs.xyz\n\n/**\n    ____        _ __    __   ____  _ ________                     __ \n   / __ )__  __(_) /___/ /  / __ \\(_) __/ __/__  ________  ____  / /_\n  / __  / / / / / / __  /  / / / / / /_/ /_/ _ \\/ ___/ _ \\/ __ \\/ __/\n / /_/ / /_/ / / / /_/ /  / /_/ / / __/ __/  __/ /  /  __/ / / / /_  \n/_____/\\__,_/_/_/\\__,_/  /_____/_/_/ /_/  \\___/_/   \\___/_/ /_/\\__/  \n                                                                     \n  ______                      _            __     __          __        \n /_  __/________ _____  _____(_)__  ____  / /_   / /   ____ _/ /_  _____\n  / / / ___/ __ `/ __ \\/ ___/ / _ \\/ __ \\/ __/  / /   / __ `/ __ \\/ ___/\n / / / /  / /_/ / / / (__  ) /  __/ / / / /_   / /___/ /_/ / /_/ (__  ) \n/_/ /_/   \\__,_/_/ /_/____/_/\\___/_/ /_/\\__/  /_____/\\__,_/_.___/____/  \n                                                                        \n*/\n\npragma solidity 0.8.17;\n\nabstract contract BlockList {\n\n    //================= State Variables =================//\n    mapping(address => bool) private _blockList;\n\n    //================= Events =================//\n    event BlockListStatusChange(address indexed operator, bool indexed status);\n\n    //================= Modifier =================//\n    /// @dev modifier that can be applied to approval functions in order to block listings on marketplaces\n    modifier notBlocked(address operator) {\n        require(!_blockList[operator], \"BlockList: operator is blocked\");\n        _;\n    }\n\n    //================= View Function =================//\n    /// @dev function to get blocklist status with True meaning that the operator is blocked\n    function getBlockListStatus(address operator) public view returns (bool) {\n        return _blockList[operator];\n    }\n\n    //================= Setter Function =================//\n    /// @notice internal function to set the block list status\n    /// @dev inheriting contracts must implement a function that can call this one\n    function _setBlockListStatus(address operator, bool status) internal {\n        _blockList[operator] = status;\n        emit BlockListStatusChange(operator, status);\n    }\n\n}"
54     }
55   },
56   "settings": {
57     "evmVersion": "istanbul",
58     "optimizer": {
59       "enabled": true,
60       "runs": 200
61     },
62     "libraries": {
63       "NegotiationsWithTheAbyss.sol": {}
64     },
65     "outputSelection": {
66       "*": {
67         "*": [
68           "evm.bytecode",
69           "evm.deployedBytecode",
70           "devdoc",
71           "userdoc",
72           "metadata",
73           "abi"
74         ]
75       }
76     }
77   }
78 }}