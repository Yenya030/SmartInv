1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/HeroAdventure.sol": {
5       "content": "// By interacting with this code I agree to the Quest Terms at https://digidaigaku.com/hero-adventure-tos.pdf\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IAdventure.sol\";\nimport \"./IMintableHero.sol\";\nimport \"./IQuestStakingERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/// @title HeroAdventure contract\n/// @notice This contract is the entry point into a quest where players will receive a hero NFT upon completion of the quest\n/// @dev This adventure is intened to prevent the transfer of Adventure ERC721 tokens that are engaged in the quest.\n/// This `questsLockTokens` value must be set to `true` when this adventure contract is whitelisted.\ncontract HeroAdventure is Context, Ownable, Pausable, ERC165, IAdventure {\n\n    struct HeroQuest {\n        uint16 genesisTokenId;\n        uint16 spiritTokenId;\n        address adventurer;\n    }\n\n    /// @dev The amount of time the user must remain in the quest to complete it and receive a hero\n    uint256 public constant HERO_QUEST_DURATION = 1 days;\n\n    /// @dev The identifier for the spirit quest\n    uint256 public constant SPIRIT_QUEST_ID = 1;\n\n    /// @dev The largest token id for genesis and spirit tokens\n    uint256 public constant MAX_TOKEN_ID = 2022;\n\n    /// @dev An unchangeable reference to the hero contract that is rewarded at the conclusion of adventure quest\n    IMintableHero immutable public heroContract;\n\n    /// @dev An unchangeable reference to the genesis token contract\n    IERC721 immutable public genesisContract;\n\n    /// @dev An unchangeable reference to the spirit token contract\n    IQuestStakingERC721 immutable public spiritContract;\n\n    /// @dev Map spirit token id to hero quest details\n    mapping (uint256 => HeroQuest) public spiritQuestLookup;\n\n    /// @dev Map genesis token id to hero quest details\n    mapping (uint256 => HeroQuest) public genesisQuestLookup;\n\n    /// @dev Specify the hero, genesis, and spirit token contract addresses during creation\n    constructor(address heroAddress, address genesisAddress, address spiritAddress) {\n        heroContract = IMintableHero(heroAddress);\n        genesisContract = IERC721(genesisAddress);\n        spiritContract = IQuestStakingERC721(spiritAddress);\n    }\n\n    /// @dev ERC-165 interface support\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdventure).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @dev Returns whether or not quests on this adventure lock tokens.\n    function questsLockTokens() external override pure returns (bool) {\n        return true;\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n    /// Throws in all cases because spirits contract did not implement the IAdventure checks and will not invoke this callback.\n    function onQuestEntered(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/) external override pure {\n        revert(\"Callback not implemented\");\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully exited.\n    /// Throws in all cases because spirits contract did not implement the IAdventure checks and will not invoke this callback.\n    function onQuestExited(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/, uint256 /*questStartTimestamp*/) external override pure {\n        revert(\"Callback not implemented\");\n    }\n\n    /// @dev Pauses and blocks adventurers from starting new hero quests\n    /// Throws if the adventure is already paused\n    function pauseNewQuestEntries() external onlyOwner {\n        _pause();\n    }\n\n    /// @dev Unpauses and allows adventurers to start new hero quests\n    /// Throws if the adventure is already unpaused\n    function unpauseNewQuestEntries() external onlyOwner {\n        _unpause();\n    }\n\n    /// @dev Enters the hero quest with a spirit and an optional genesis token id\n    /// Throws when the spirit has already been entered into the quest by the caller\n    /// Throws when the specified non-zero genesis token id does not exist\n    /// Throws when the specified non-zero genesis token id is not owned by the caller\n    /// Throws if the genesis transferFrom function fails to transfer custody of genesis to this contract\n    /// Throws when the specified spirit token id does not exist\n    /// Throws when the specified spirit token id is not owned by the caller\n    /// Throws if the spirit cannot enter quest, for example if this adventure has been removed from whitelist\n    /// Throws if the contract is paused\n    ///\n    /// Postconditions:\n    /// ---------------\n    ///\n    /// The specified non-zero genesis token id is owned by this contract\n    /// The genesis quest lookup contains the quest details when a non-zero genesis token was specified\n    /// The spirit quest lookup contains the quest details for the specified spirit token id\n    /// The spirit token has been entered into quest #1 for this adventure\n    ///\n    /// Caveats/Special Cases:\n    /// ----------------------\n    ///\n    /// 1. Bob enters the quest spirit token 1 with a genesis token\n    /// 2. Bob uses the backdoor userExitQuest call on the spirit contract to exit the quest for spirit token 1.\n    ///    This adventure contract still thinks spirit token 1 is on the quest.\n    /// 3. Bob sells spirit token 1 to Amy (Bob's token is now orphaned, and can be recovered by calling recoverOrphanedGenesisToken).\n    /// 4. Amy is allowed to call enterQuest with spirit token id 1.  \n    /// 5. Amy's progress starts when she enters the quest with the spirit, not when Bob entered the quest originally.\n    function enterQuest(uint256 spiritTokenId, uint256 genesisTokenId) external whenNotPaused {\n        address caller = _msgSender();\n        require(spiritQuestLookup[spiritTokenId].adventurer != caller, \"Spirit already entered into quest by caller\");\n\n        if(genesisTokenId > 0) {\n            address genesisOwner = genesisContract.ownerOf(genesisTokenId);\n            require(genesisOwner == caller, \"Caller not owner of genesis\");\n\n            genesisQuestLookup[genesisTokenId] = HeroQuest({\n                genesisTokenId: uint16(genesisTokenId),\n                spiritTokenId: uint16(spiritTokenId),\n                adventurer: genesisOwner\n            });\n\n            genesisContract.transferFrom(genesisOwner, address(this), genesisTokenId);\n        }\n\n        require(spiritContract.ownerOf(spiritTokenId) == caller, \"Caller not owner of spirit\");\n\n        spiritQuestLookup[spiritTokenId] = HeroQuest({\n            genesisTokenId: uint16(genesisTokenId),\n            spiritTokenId: uint16(spiritTokenId),\n            adventurer: caller\n        });\n\n        spiritContract.enterQuest(spiritTokenId, SPIRIT_QUEST_ID);\n    }\n\n    /// @dev Exits the hero quest for a specified spirit with the genesis token that it was paired with, if applicable.\n    /// Throws when the spirit has not been entered into the quest by any caller.\n    /// Throws when the owner of the spirit token is not the caller.\n    /// Throws if the owner of the spirit is not the same as the original user that entered the quest with the the spirit.\n    ///  - This can happen if a user does a backdoor userExitQuest on the spirit directly.  \n    ///  - The new owner needs to enterQuest with the spirit first before it can be exited from the quest to claim a reward.\n    /// Throws if the parameter `redeemHero` is true and the quest has not been completed yet\n    ///  - This prevents accidentally exiting the quest just before the quest ends, as the user's progress would be lost\n    /// Throws if the parameter `redeemHero` is false and the quest is complete\n    ///\n    /// Postconditions:\n    /// ---------------\n    ///\n    /// If a genesis token was paired with the spirit when the spirit entered the quest, the genesis token id is returned to the original\n    /// address from which the genesis token came.\n    /// The genesis quest mapping is cleared for the returned genesis token id.\n    /// The quest on the spirit contract will be in the exited state.\n    /// If the quest is exited after the quest timer has been completed, the spirit is burned\n    /// and a hero with the proper bloodline is minted to the adventurer who completed the adventure.\n    /// The spirit quest mapping is cleared for the specified spirit token id.\n    ///\n    /// Caveats/Special Cases:\n    /// ----------------------\n    ///\n    /// 1. Bob previously entered the quest with spirit token 1 and with a genesis token\n    /// 2. Bob uses the backdoor userExitQuest call on the spirit contract to exit the quest for spirit token 1.\n    ///    This adventure contract still thinks spirit token 1 is in the quest.\n    /// 3. Until Bob sells or transfers spirit token 1, Bob can still call exitQuest on this \n    ///    contract to clear the quest state and retrieve their genesis token that was paired with the spirit.\n    /// 4. Bob sells spirit token 1 to Amy (If Bob did not exitQuest first, Bob's genesis token is now orphaned, and can be recovered by calling recoverOrphanedGenesisToken).\n    /// 5. Amy cannot call exitQuest for spirit 1 without first entering the quest with spirit 1. Amy's progress starts when she enters the quest.\n    /// 6. Amy can exit the quest normally (before 30 days, she will not receive a reward, but after 30 days she will receive the reward).\n    function exitQuest(uint256 spiritTokenId, bool redeemHero) external {\n        address caller = _msgSender();\n        \n        HeroQuest memory quest = spiritQuestLookup[spiritTokenId];\n        require(quest.adventurer != address(0), \"Spirit token is not on quest\");\n        require(spiritContract.ownerOf(spiritTokenId) == caller, \"Caller not owner of spirit\");\n        \n        if(quest.genesisTokenId > 0) {            \n            returnGenesisToAdventurer(genesisQuestLookup[quest.genesisTokenId].adventurer, quest.genesisTokenId);\n        }\n        \n        if(quest.adventurer == caller) {\n            (bool participatingInQuest, uint256 startTimestamp,) = spiritContract.isParticipatingInQuest(spiritTokenId, address(this), SPIRIT_QUEST_ID);\n\n            if(participatingInQuest) {\n                bool questComplete = block.timestamp - startTimestamp >= HERO_QUEST_DURATION;\n                \n                if(questComplete && !redeemHero) {\n                    revert(\"Quest complete, must redeem hero\");\n                }\n\n                if(!questComplete && redeemHero) {\n                    revert(\"Complete quest to redeem hero\");\n                }\n\n                spiritContract.exitQuest(spiritTokenId, SPIRIT_QUEST_ID);\n\n                if(questComplete) {\n                    spiritContract.adventureBurn(spiritTokenId);\n                    heroContract.mintHero(caller, spiritTokenId, quest.genesisTokenId);\n                }\n            }\n        } else {\n            revert(\"New spirit owner must enter quest with spirit before exiting\");\n        }\n        \n        delete spiritQuestLookup[spiritTokenId];\n    }\n\n    /// @dev Used only to protect against an edge case where a backdoor exit and transfer occurs, locking up genesis tokens.\n    ///\n    /// This can be called by anyone generous enough to spend gas to help a player recover their genesis token, \n    /// as it will always return to the original owner of the genesis token that entered a quest.\n    ///\n    /// Throws when the speicified genesis token id is not in an orphaned state.\n    ///\n    /// Postconditions:\n    /// ---------------\n    ///\n    /// The orphaned genesis token is returned to the address that originally entered a quest with it.\n    /// The genesis quest mapping is cleared, returning the contract to a consistent state.\n    function recoverOrphanedGenesisToken(uint256 genesisTokenId) external {\n        (bool isOrphaned, address returnAddress) = isGenesisTokenOrphaned(genesisTokenId);\n        require(isOrphaned, \"Genesis token is not orphaned\");\n        returnGenesisToAdventurer(returnAddress, genesisTokenId);\n    }\n\n    /// @dev Enumerates all hero quests/pairs that are currently entered into quests by the specified player.\n    /// Never use this function in a transaction context - it is fine for a read-only query for \n    /// external applications, but will consume a lot of gas when used in a transaction.\n    function findHeroQuestsByPlayer(address player) external view returns (HeroQuest[] memory playerQuests) {\n        unchecked {\n            // First, find all the token ids owned by the player\n            uint256 ownerBalance = spiritContract.balanceOf(player);\n            uint256[] memory ownedTokenIds = new uint256[](ownerBalance);\n            uint256 tokenIndex = 0;\n            for(uint256 spiritTokenId = 1; spiritTokenId <= MAX_TOKEN_ID; ++spiritTokenId) {\n                try spiritContract.ownerOf(spiritTokenId) returns (address ownerOfToken) {\n                    if(ownerOfToken == player) {\n                        ownedTokenIds[tokenIndex++] = spiritTokenId;\n                    }\n                } catch {}\n                \n                if(tokenIndex == ownerBalance) {\n                    break;\n                }\n            }\n\n            // For each owned spirit token id, check the quest count\n            // When 1 or greater, the spirit is engaged in a quest on this adventure.\n            address thisAddress = address(this);\n            uint256 numberOfQuests = 0;\n            for(uint256 i = 0; i < ownerBalance; ++i) {\n                if(spiritContract.getQuestCount(ownedTokenIds[i], thisAddress) > 0) {\n                    ++numberOfQuests;\n                }\n            }\n\n            // Finally, make one more pass and populate the player quests return array\n            uint256 questIndex = 0;\n            playerQuests = new HeroQuest[](numberOfQuests);\n    \n            for(uint256 i = 0; i < ownerBalance; ++i) {\n                if(spiritContract.getQuestCount(ownedTokenIds[i], thisAddress) > 0) {\n                    playerQuests[questIndex] = spiritQuestLookup[ownedTokenIds[i]];\n                    ++questIndex;\n                }\n    \n                if(questIndex == numberOfQuests) {\n                    break;\n                }\n            }\n        }\n\n        return playerQuests;\n    }\n\n    /// @dev Given a list of genesis token ids, returns whether or not each token id is considered orphaned.\n    /// The length of orphanedStatuses return array always matches the length of the genesisTokenIds input array.\n    /// When orphanedStatuses[i] == true, it means genesisTokenIds[i] was orphaned.\n    /// When orphanedStatuses[i] == false, it means genesisTokenIds[i] was not orphaned.\n    function areGenesisTokensOrphaned(uint256[] calldata genesisTokenIds) external view returns (bool[] memory orphanedStatuses) {\n        unchecked {\n            uint256 queryLength = genesisTokenIds.length;\n            orphanedStatuses = new bool[](queryLength);\n            for(uint256 i = 0; i < queryLength; i++) {\n                (bool isOrphaned,) = isGenesisTokenOrphaned(genesisTokenIds[i]);\n                orphanedStatuses[i] = isOrphaned;\n            }\n        }\n\n        return orphanedStatuses;\n    }\n\n    /// @dev Given a list of spirit token ids, returns whether or not each token id is considered soulless.\n    /// The length of soullessStatuses return array always matches the length of the spiritTokenIds input array.\n    /// When soullessStatuses[i] == true, it means spiritTokenIds[i] was soulless.\n    /// When soullessStatuses[i] == false, it means spiritTokenIds[i] was not soulless.\n    function areSpiritTokensSoulless(uint256[] calldata spiritTokenIds) external view returns (bool[] memory soullessStatuses) {\n        unchecked {\n            uint256 queryLength = spiritTokenIds.length;\n            soullessStatuses = new bool[](queryLength);\n            for(uint256 i = 0; i < queryLength; i++) {\n                (bool isSoulless,) = isSpiritTokenSoulless(spiritTokenIds[i]);\n                soullessStatuses[i] = isSoulless;\n            }\n        }\n\n        return soullessStatuses;\n    }\n\n    /// @dev Detects whether a genesis token has been orphaned.\n    /// It is orphaned if the user backdoor exits the spirit from the quest and transferred it to a new user, who then entered the quest with the spirit.\n    /// Alternately, if the known adventurer for the spirit doesn't match the owner that entered quest with the genesis token,\n    /// the genesis token is orphaned.\n    function isGenesisTokenOrphaned(uint256 genesisTokenId) public view returns (bool isOrphaned, address returnAddress) {\n        HeroQuest memory questFromGenesisLookup = genesisQuestLookup[genesisTokenId];\n        HeroQuest memory questFromSpiritLookup = spiritQuestLookup[questFromGenesisLookup.spiritTokenId];\n\n        try spiritContract.ownerOf(questFromGenesisLookup.spiritTokenId) returns (address spiritOwner) {\n            isOrphaned = questFromSpiritLookup.adventurer != questFromGenesisLookup.adventurer || questFromSpiritLookup.adventurer != spiritOwner;\n            returnAddress = isOrphaned ? questFromGenesisLookup.adventurer : address(0);\n            return (isOrphaned, returnAddress);\n        } catch {}\n\n        isOrphaned = questFromGenesisLookup.adventurer != address(0);\n        returnAddress = isOrphaned ? questFromGenesisLookup.adventurer : address(0);\n        return (isOrphaned, returnAddress);\n    }\n    \n    /// @dev Detects whether a spirit token is currently soulless.\n    /// It is considered soulless if the user backdoor exits the spirit from the quest and has not transferred it to a new user.\n    /// In this case, the spirit cannot be burned to claim their hero until the user exits the quest and re-enters the quest.\n    function isSpiritTokenSoulless(uint256 spiritTokenId) public view returns (bool isSoulless, address soullessOwner) {\n        try spiritContract.ownerOf(spiritTokenId) returns (address spiritOwner) {\n            (bool participatingInQuest,,) = spiritContract.isParticipatingInQuest(spiritTokenId, address(this), SPIRIT_QUEST_ID);\n            isSoulless = spiritQuestLookup[spiritTokenId].adventurer == spiritOwner && !participatingInQuest;\n            soullessOwner = isSoulless ? spiritOwner : address(0);\n            return (isSoulless, soullessOwner);\n        } catch {}\n\n        return (false, address(0));\n    }\n\n    /// @dev Returns a genesis token to the specified adventurer\n    function returnGenesisToAdventurer(address adventurer, uint256 genesisTokenId) private {\n        genesisContract.transferFrom(\n            address(this), \n            adventurer,\n            genesisTokenId);\n\n        delete genesisQuestLookup[genesisTokenId];\n    }\n}"
6     },
7     "contracts/IAdventure.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of a contract that complies with the adventure/quest system that is permitted to interact with an AdventureERC721.\n */\ninterface IAdventure is IERC165 {\n\n    /**\n     * @dev Returns whether or not quests on this adventure lock tokens.\n     * Developers of adventure contract should ensure that this is immutable \n     * after deployment of the adventure contract.  Failure to do so\n     * can lead to error that deadlock token transfers.\n     */\n    function questsLockTokens() external view returns (bool);\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestEntered(address adventurer, uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully exited.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestExited(address adventurer, uint256 tokenId, uint256 questId, uint256 questStartTimestamp) external;\n}\n"
9     },
10     "contracts/IMintableHero.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./Bloodlines.sol\";\n\n/**\n * @dev Required interface of mintable hero contracts.\n */\ninterface IMintableHero {\n    \n    /**\n     * @notice Mints a hero with a specified token id and genesis token id\n     */\n    function mintHero(address to, uint256 tokenId, uint256 genesisTokenId) external;\n}\n"
12     },
13     "contracts/IQuestStakingERC721.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IQuestStaking.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @dev An interface for ERC-721s that implement IQuestStaking\n */\ninterface IQuestStakingERC721 is IERC721, IQuestStaking {\n\n}"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/security/Pausable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "contracts/Bloodlines.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nlibrary Bloodlines {\n\n    /// @notice 1 => Rogue, 2 => Warrior, 3 => Royal\n    enum Bloodline { None, Rogue, Warrior, Royal }\n}"
36     },
37     "contracts/IQuestStaking.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./Quest.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract that supports adventures and quest staking.\n */\ninterface IQuestStaking is IERC165 {\n\n    /**\n     * @dev Emitted when a token enters or exits a quest\n     */    \n    event QuestUpdated(uint256 indexed tokenId, address indexed tokenOwner, address indexed adventure, uint256 questId, bool active, bool booted);\n\n    /**\n     * @notice Allows an authorized game contract to transfer a player's token if they have opted in\n     */\n    function adventureTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Allows an authorized game contract to safe transfer a player's token if they have opted in\n     */\n    function adventureSafeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Allows an authorized game contract to burn a player's token if they have opted in\n     */\n    function adventureBurn(uint256 tokenId) external;\n\n    /**\n     * @notice Allows an authorized game contract to stake a player's token into a quest if they have opted in\n     */\n    function enterQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Allows an authorized game contract to unstake a player's token from a quest if they have opted in\n     */\n    function exitQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Returns the number of quests a token is actively participating in for a specified adventure\n     */\n    function getQuestCount(uint256 tokenId, address adventure) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of time a token has been participating in the specified quest\n     */\n    function getTimeOnQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a token is currently participating in the specified quest as well as the time it was started and the quest index\n     */\n    function isParticipatingInQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (bool participatingInQuest, uint256 startTimestamp, uint256 index);\n\n    /**\n     * @notice Returns a list of all active quests for the specified token id and adventure\n     */\n    function getActiveQuests(uint256 tokenId, address adventure) external view returns (Quest[] memory activeQuests);\n}\n"
39     },
40     "contracts/Quest.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nstruct Quest {\n    bool isActive;\n    uint32 questId;\n    uint64 startTimestamp;\n    uint32 arrayIndex;\n}"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": true,
47       "runs": 1500
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}