1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/LeprechaunTown_WTF_v2.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^ 0.8.7;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\";\n\n/*\n     .-. .-.\n    (   |   )\n  .-.:  |  ;,-.\n (_ __`.|.'_ __)\n (    ./Y\\.    )\n  `-.-' | `-.-'\n        \\ 🌈 ☘️ 2️⃣\n*/\n\ncontract LeprechaunTown_WTF_v2 is ERC1155, Ownable {\n    string public name = \"LeprechaunTown_WTF_v2\";\n    string public symbol = \"LTWTF2\";\n    string private ipfsCID = \"QmUGH1et5D6aa67r4XUVuD2eVoVQZQCfBqDZsm1fh6SfKU\";\n    uint256 public collectionTotal = 7608;\n    uint256 public cost = 0.03 ether;\n    uint256 public maxMintAmount = 10;\n    uint256 public maxBatchMintAmount = 10;\n\n    bool public paused = true;\n    bool public revealed = true;\n    bool public mintInOrder = true;\n\n    uint256 public ogCollectionTotal;\n    uint256 public tokenNextToMint;\n    mapping(uint => string) private tokenToURI;\n    mapping(uint256 => uint256) private currentSupply;\n    mapping(uint256 => bool) private hasMaxSupply;\n    mapping(uint256 => uint256) public maxSupply;\n    mapping(uint256 => bool) private hasMaxSupplyForBatch;\n    mapping(uint256 => uint256) public maxSupplyForBatch;\n    mapping(uint256 => bool) private createdToken;\n\n    bool public roleInUse = false;\n    mapping(uint256 => string) public role;\n    uint256 public roleLimit = 20;\n\n    mapping(uint256 => uint256[]) public requirementTokens;\n    mapping(uint256 => uint256[]) public batchRequirementTokens;\n\n    mapping(uint256 => bool) public flagged;\n    mapping(address => bool) public restricted;\n\n    uint256[] public collectionBatchEndID;\n    string[] public ipfsCIDBatch;\n    string[] public uriBatch;\n\n    mapping(address => uint256) public holdersAmount;\n    mapping(address => uint256) public claimBalance;\n\n    address payable public payments;\n    address public projectLeader;\n    address[] public admins;\n    uint256 public devpayCount = 1;\n    uint256 private devpayCountMax = 0;\n    \n    address public LeprechaunTown_WTF = 0xDA0bab807633f07f013f94DD0E6A4F96F8742B53;//0x360C8A7C01fd75b00814D6282E95eafF93837F27;\n    \n\n    constructor() ERC1155(\"\"){\n        ogCollectionTotal = collectionTotal;\n        collectionBatchEndID.push(collectionTotal);\n        ipfsCIDBatch.push(ipfsCID);\n        uriBatch.push(\"\");\n        maxSupply[1] = 1;\n        hasMaxSupply[1] = true;\n        createdToken[1] = true;\n        currentSupply[1] = 1;\n        tokenNextToMint = 2;\n        _mint(msg.sender, 1, 1, \"\");\n\n        projectLeader = 0x522ee4130B819355e10218E40d6Ab0c495219690;\n    }\n\n    /**\n     * @dev The contract developer's website.\n     */\n    function contractDev() public pure returns(string memory){\n        string memory dev = unicode\"🐸 https://www.halfsupershop.com/ 🐸\";\n        return dev;\n    }   \n\n    /**\n     * @dev Admin can set the PAUSE state.\n     * true = closed to Admin Only\n     * false = open for Presale or Public\n     */\n    function pause(bool _state) public onlyAdmins {\n        paused = _state;\n    }\n\n    /**\n     * @dev Admin can set the roleInUse state allowing Mints to pick a role randomly.\n     */\n    function setRoleInUse(bool _state) public onlyAdmins {\n        roleInUse = _state;\n    }\n\n    /**\n     * @dev Admin can set the mintInOrder state.\n     */\n    function setMintInOrder(bool _state) public onlyAdmins {\n        mintInOrder = _state;\n    }\n\n    /**\n     * @dev Admin can set the tokenNextToMint.\n     */\n    function setTokenNextToMint(uint _id) public onlyAdmins {\n        tokenNextToMint = _id;\n    }\n\n    function _cost() public view returns(uint256){\n        if (!checkIfAdmin()) {\n            return cost;\n        }\n        else{\n            return 0;\n        }\n    }\n\n    function checkOut(uint _amount) private {\n        uint256 _freeAmount = holdersAmount[msg.sender] - claimBalance[msg.sender];\n        if(_freeAmount >= _amount){\n            _freeAmount = _amount;\n        }\n\n        if (!checkIfAdmin()) {\n            //Public Phase\n            require(msg.value >= ((_amount - _freeAmount) * _cost()), \"!Funds\");\n\n            if(msg.value > 0 && devpayCount <= devpayCountMax){\n                devpayCount += msg.value;\n            }\n        }\n    }\n\n    function checkOutScan(uint _id) private{\n        if (!exists(_id)) {\n            createdToken[_id] = true;\n            flagged[_id] = false;\n            if(mintInOrder){\n                maxSupply[_id] = 1;\n                hasMaxSupply[_id] = true;\n                currentSupply[_id] = 1;\n            }\n        }\n\n        if(roleInUse){\n            role[_id] = randomRole();\n        }\n    }\n\n    /**\n     * @dev Allows Admins, Whitelisters, and Public to Mint NFTs in Order from 1-collectionTotal.\n     */\n    function _mintInOrder(uint _numberOfTokensToMint) public payable {\n        require(mintInOrder, \"mintInOrder\");\n        require(!paused, \"P\");\n        require(!exists(collectionTotal), \"S/O\");\n        require(_numberOfTokensToMint + tokenNextToMint - 1 <= collectionTotal, \">Amount\");\n\n        checkOut(_numberOfTokensToMint);\n        _mintBatchTo(msg.sender, _numberOfTokensToMint);\n    }\n\n    /**\n     * @dev Allows Admins to Mint NFTs in Order from 1-collectionTotal to an address.\n     * Can only be called by Admins even while paused.\n     */\n    function _mintInOrderTo(address _to, uint _numberOfTokensToMint) external onlyAdmins {\n        require(mintInOrder, \"mintInOrder\");\n        require(!exists(collectionTotal), \"S/O\");\n        require(_numberOfTokensToMint + tokenNextToMint -1 <= collectionTotal, \">Amount\");\n\n        _mintBatchTo(_to, _numberOfTokensToMint);\n    }\n\n    function _mintBatchTo(address _to, uint _numberOfTokensToMint) private {\n        uint256[] memory _ids = new uint256[](_numberOfTokensToMint);\n        uint256[] memory _amounts = new uint256[](_numberOfTokensToMint);\n        for (uint256 i = 0; i < _numberOfTokensToMint; i++) {\n            uint256 _id = tokenNextToMint;\n            \n            checkOutScan(_id);\n\n            _ids[i] = tokenNextToMint;\n            _amounts[i] = 1;\n            tokenNextToMint++;\n        }\n        claimBalance[msg.sender] += _numberOfTokensToMint;\n\n        _mintBatch(_to, _ids, _amounts, \"\");\n    }\n\n    /**\n     * @dev Allows Owner, Whitelisters, and Public to Mint a single NFT.\n     */\n    function mint(address _to, uint _id, uint _amount) public payable {\n        require(!mintInOrder, \"!mintInOrder\");\n        require(!paused, \"P\");\n        require(canMintChecker(_id, _amount), \"CANNOT MINT\");\n\n        checkOut(_amount);\n        checkOutScan(_id);\n        currentSupply[_id] += _amount;\n        \n        _mint(_to, _id, _amount, \"\");\n    }\n\n    function canMintChecker(uint _id, uint _amount) private view returns(bool){\n        if (hasMaxSupply[_id]) {\n            if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal && currentSupply[_id] + _amount <= maxSupply[_id]) {\n                // CAN MINT\n            }\n            else {\n                // CANNOT MINT \n                return false;\n            }\n        }\n        else {\n            if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal) {\n                // CAN MINT\n            }\n            else {\n                // CANNOT MINT \n                return false;\n            }\n        }\n\n        // checks if the id needs requirement token(s)\n        if(requirementTokens[_id].length > 0) {\n            for (uint256 i = 0; i < requirementTokens[_id].length; i++) {\n                if(balanceOf(msg.sender, requirementTokens[_id][i]) <= 0){\n                    //CANNOT MINT: DOES NOT HAVE REQUIREMENT TOKEN(S)\n                    return false;\n                }\n                else{\n                    continue;\n                }\n            }\n        }\n\n        // checks if the batch (other than the original) that the id resides in needs requirement token(s)\n        for (uint256 i = 0; i < collectionBatchEndID.length; i++) {\n            if(i != 0 && _id <= collectionBatchEndID[i] && _id > collectionBatchEndID[i - 1]){\n                uint256 batchToCheck = collectionBatchEndID[i];\n                if(batchRequirementTokens[batchToCheck].length > 0){\n                    for (uint256 j = 0; j < batchRequirementTokens[batchToCheck].length; j++) {\n                        if(balanceOf(msg.sender, batchRequirementTokens[batchToCheck][j]) <= 0){\n                            //CANNOT MINT: DOES NOT HAVE REQUIREMENT TOKEN(S)\n                            return false;\n                        }\n                        else{\n                            continue;\n                        }\n                    }\n                }\n                // checks if the batch the id resides in has a supply limit for each id in the batch\n                if(hasMaxSupplyForBatch[batchToCheck]){\n                    if (_amount > 0 && _amount <= maxMintAmount && _id > 0 && _id <= collectionTotal && currentSupply[_id] + _amount <= maxSupplyForBatch[batchToCheck]) {\n                        // CAN MINT\n                    }\n                    else {\n                        // CANNOT MINT \n                        return false;\n                    }\n                }\n                else {\n                    continue;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Allows Owner, Whitelisters, and Public to Mint multiple NFTs.\n     */\n    function mintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) public payable {\n        require(!mintInOrder, \"Requires mintInOrder False\");\n        require(!paused, \"Paused\");\n        require(_ids.length <= maxMintAmount, \"Too Many IDs\");\n        require(_ids.length == _amounts.length, \"IDs and Amounts Not Equal\");\n        require(canMintBatchChecker(_ids, _amounts), \"CANNOT MINT BATCH\");\n\n        uint256 _totalBatchAmount;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            _totalBatchAmount += _amounts[i];\n        }\n        require(_totalBatchAmount <= maxBatchMintAmount, \"Batch Amount Limit Exceeded\");\n\n        checkOut(_totalBatchAmount);\n        \n        for (uint256 k = 0; k < _ids.length; k++) {\n            uint256 _id = _ids[k];\n            checkOutScan(_id);\n            currentSupply[_ids[k]] += _amounts[k];\n        }\n\n        _mintBatch(_to, _ids, _amounts, \"\");\n    }\n\n    function canMintBatchChecker(uint[] memory _ids, uint[] memory _amounts)private view returns(bool){\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint256 _id = _ids[i];\n            uint256 _amount = _amounts[i];\n            if(canMintChecker(_id, _amount)){\n                //CAN MINT\n            }\n            else{\n                // CANNOT MINT\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Allows Admin to Mint a single NEW NFT.\n     */\n    function adminMint(address _to, uint _id, uint _amount) external onlyAdmins {\n        require(_id > ogCollectionTotal, \"ID Must Be New\");\n        checkOutScan(_id);\n        currentSupply[_id] += _amount;\n        _mint(_to, _id, _amount, \"\");\n    }\n\n    /**\n     * @dev Allows Admin to Mint multiple NEW NFTs.\n     */\n    function adminMintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) external onlyAdmins {\n        require(!checkIfOriginal(_ids), \"ID Must Be New\");\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 _id = _ids[i];\n            checkOutScan(_id);\n            currentSupply[_id] += _amounts[i];\n        }\n        _mintBatch(_to, _ids, _amounts, \"\");\n    }\n\n    /**\n    * @dev Allows User to DESTROY a single token they own.\n    */\n    function burn(uint _id, uint _amount) external {\n        currentSupply[_id] -= _amount;\n        _burn(msg.sender, _id, _amount);\n    }\n\n    /**\n    * @dev Allows User to DESTROY multiple tokens they own.\n    */\n    function burnBatch(uint[] memory _ids, uint[] memory _amounts) external {\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 _id = _ids[i];\n            currentSupply[_id] -= _amounts[i];\n        }\n        _burnBatch(msg.sender, _ids, _amounts);\n    }\n\n    /**\n    * @dev Allows Admin to REVEAL the original collection.\n    * Can only be called by the current owner once.\n    * WARNING: Please ensure the CID is 100% correct before execution.\n    */\n    function reveal(string memory _CID) external onlyAdmins {\n        require(!revealed, \"Revealed\");\n        ipfsCID = _CID;\n        ipfsCIDBatch[0] = _CID;\n        revealed = true;\n    }\n\n    /**\n     * @dev Allows Admin to set the requirementTokens for a specified token ID or Batch end ID\n     */\n    function setRequirementTokens(uint _endID, bool _isBatch, uint[] memory _requiredIDS) external onlyAdmins {\n        if(_isBatch){\n            for (uint256 i = 0; i < collectionBatchEndID.length; i++) {\n                if(collectionBatchEndID[i] == _endID){\n                    // is confirmed a Batch\n                    break;\n                }\n                if(collectionBatchEndID[i] == collectionBatchEndID[collectionBatchEndID.length - 1] && _endID != collectionBatchEndID[i]){\n                    // is not a Batch\n                    revert(\"_endID is not a Batch\");\n                }\n            }\n            batchRequirementTokens[_endID] = _requiredIDS;\n        }\n        else{\n            requirementTokens[_endID] = _requiredIDS;\n        }\n    }\n\n    /**\n    * @dev Allows Admin to modify the URI or CID of a Batch.\n    * Note: Original Collection Batch URIs and or CIDs cannot be modified.\n    */\n    function modifyURICID(uint _batchIndex, string memory _uri, bool _isIpfsCID) external onlyAdmins {\n        require(_batchIndex != 0, \"Batch Index Cannot Be Original Collection\");\n        if (_isIpfsCID) {\n            //modify IPFS CID\n            ipfsCIDBatch[_batchIndex] = _uri;\n        }\n        else{\n            //modify URI\n            uriBatch[_batchIndex] = _uri;\n        }\n    }\n\n    /**\n    * @dev Allows Admin to set the URI of a single token.\n    * Note: Original Token URIs cannot be changed.\n    *       Set _isIpfsCID to true if using only IPFS CID for the _uri.\n    */\n    function setURI(uint _id, string memory _uri, bool _isIpfsCID) external onlyAdmins {\n        require(_id > ogCollectionTotal, \"ID Must Not Be From Original Collection\");\n        if (_isIpfsCID) {\n            string memory _uriIPFS = string(abi.encodePacked(\n                \"ipfs://\",\n                _uri,\n                \"/\",\n                Strings.toString(_id),\n                \".json\"\n            ));\n\n            tokenToURI[_id] = _uriIPFS;\n            emit URI(_uriIPFS, _id);\n        }\n        else {\n            tokenToURI[_id] = _uri;\n            emit URI(_uri, _id);\n        }\n    }\n\n    /**\n    * @dev Allows Admin to create a new Batch and set the URI or CID of a single or batch of tokens.\n    * Note: Previous Token URIs and or CIDs cannot be changed.\n    *       Set _isIpfsCID to true if using only IPFS CID for the _uri.\n    *       Example URI structure if _endBatchID = 55 and if _isIpfsCID = false and if _uri = BASEURI.EXTENSION\n    *       will output: BASEURI.EXTENSION/55.json for IDs 55 and below until it hits another batch end ID\n    */\n    function createBatchAndSetURI(uint _endBatchID, string memory _uri, bool _isIpfsCID) external onlyAdmins {\n        require(_endBatchID > collectionBatchEndID[collectionBatchEndID.length-1], \"Last Batch ID must be > previous batch total\");\n        \n        if (_isIpfsCID) {\n            //set IPFS CID\n            collectionBatchEndID.push(_endBatchID);\n            ipfsCIDBatch.push(_uri);\n            uriBatch.push(\"\");\n        }\n        else{\n            //set URI\n            collectionBatchEndID.push(_endBatchID);\n            uriBatch.push(_uri);\n            ipfsCIDBatch.push(\"\");\n        }\n        \n    }\n\n    function uri(uint256 _id) override public view returns(string memory){\n       string memory _CIDorURI = string(abi.encodePacked(\n            \"ipfs://\",\n            ipfsCID,\n            \"/\"\n        ));\n        if(createdToken[_id]){\n            if (_id > 0 && _id <= ogCollectionTotal) {\n                //hidden\n                if(!revealed){\n                    return (\n                    string(abi.encodePacked(\n                        _CIDorURI,\n                        \"hidden\",\n                        \".json\"\n                    )));\n                }\n                else{\n                    if(keccak256(abi.encodePacked((tokenToURI[_id]))) != keccak256(abi.encodePacked((\"\")))){\n                        return tokenToURI[_id];\n                    }\n                    for (uint256 i = 0; i < collectionBatchEndID.length; ++i) {\n                        if(i == 0){\n                            //first iteration is for OG collection\n                            continue;\n                        }\n                        else{\n                            if(_id <= collectionBatchEndID[i]){\n                                if(keccak256(abi.encodePacked((ipfsCIDBatch[i]))) != keccak256(abi.encodePacked((\"\")))){\n                                    _CIDorURI = string(abi.encodePacked(\n                                        \"ipfs://\",\n                                        ipfsCIDBatch[i],\n                                        \"/\"\n                                    ));\n                                }\n                                if(keccak256(abi.encodePacked((uriBatch[i]))) != keccak256(abi.encodePacked((\"\")))){\n                                    _CIDorURI = string(abi.encodePacked(\n                                        uriBatch[i],\n                                        \"/\"\n                                    ));\n                                }\n                                \n                                continue;\n                            }\n                            else{\n                                //_id was not found in a batch\n                                continue;\n                            }\n                        }\n                    \n                    }\n                    //no role\n                    if(keccak256(abi.encodePacked((role[_id]))) == keccak256(abi.encodePacked((\"\")))){\n                        return (\n                        string(abi.encodePacked(\n                            _CIDorURI,\n                            Strings.toString(_id),\n                            \".json\"\n                        )));\n                    }\n                    else{\n                        //has role\n                        return (\n                        string(abi.encodePacked(\n                            _CIDorURI,\n                            role[_id],\n                            \".json\"\n                        )));\n                    }\n                }\n            }\n            //no URI\n            return \"URI Does Not Exist\";\n        }\n        else{\n            return \"Token Does Not Exist\";\n        }\n    }\n\n    function checkIfOriginal(uint[] memory _ids) private view returns(bool){\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 _id = _ids[i];\n            if (_id <= ogCollectionTotal) {\n                // original\n            }\n            else {\n                // new\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //\"Randomly\" returns a number >= 0 and <= roleLimit.\n    function randomNumber() internal view returns (uint256){\n        uint random = uint(keccak256(abi.encodePacked(\n            block.timestamp,\n            block.difficulty,\n            msg.sender,\n            tokenNextToMint,\n            role[tokenNextToMint - 1])\n            )) % roleLimit;\n        //return random;\n        return (random + 1);\n    }\n\n    //\"Randomly\" returns a number string >= 0 and <= roleLimit.\n    function randomRole() internal view returns (string memory){\n        uint random = randomNumber();\n        //return random;\n        return Strings.toString(random + 1);\n    }\n\n    function randomPick() public view returns (string memory _role){\n        return randomRole();\n    }\n\n    function roleLimitSet(uint _limit) external onlyAdmins {\n        roleLimit = _limit;\n    }\n\n    /**\n    * @dev Total amount of tokens in with a given id.\n    */\n    function totalSupply(uint256 _id) public view returns(uint256) {\n        return currentSupply[_id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 _id) public view returns(bool) {\n        return createdToken[_id];\n    }\n\n    /**\n    * @dev Checks max supply of token with the given id.\n    * Note: If 0 then supply is limitless.\n    */\n    function checkMaxSupply(uint256 _id) public view returns(uint256) {\n        if(maxSupply[_id] != 0){\n            return maxSupply[_id];\n        }\n        \n        for (uint256 i = 0; i < collectionBatchEndID.length; i++) {\n            if(_id != 0 && _id <= collectionBatchEndID[i] && _id > collectionBatchEndID[i - 1]){\n                uint256 batchToCheck = collectionBatchEndID[i];\n                if(maxSupplyForBatch[batchToCheck] != 0){\n                    return maxSupplyForBatch[batchToCheck];\n                }\n                else{\n                    break;\n                }\n            }\n        }\n        \n        // no Max Supply found ID has infinite supply\n        return 0;\n    }\n\n    /**\n     * @dev Admin can set a supply limit.\n     * Note: If 0 then supply is limitless.\n     */\n    function setMaxSupplies(uint[] memory _ids, uint[] memory _supplies, bool _isBatchAllSameSupply) external onlyAdmins {\n        if(_isBatchAllSameSupply){\n            uint256 _endBatchID = _ids[_ids.length - 1];\n            for (uint256 i = 0; i < collectionBatchEndID.length; ++i) {\n                if(_endBatchID == collectionBatchEndID[i]){\n                    maxSupplyForBatch[_endBatchID] = _supplies[_supplies.length - 1];\n                    if(_supplies[_supplies.length - 1] > 0){\n                        // has a max limit\n                        hasMaxSupplyForBatch[_endBatchID] = true;\n                    }\n                    else {\n                        // infinite supply\n                        hasMaxSupplyForBatch[_endBatchID] = false;\n                    }                 \n                }\n            }\n        }\n        else{\n            for (uint256 i = 0; i < _ids.length; i++) {\n                uint256 _id = _ids[i];\n                maxSupply[_id] += _supplies[i];\n                if (_supplies[i] > 0) {\n                    // has a max limit\n                    hasMaxSupply[_id] = true;\n                }\n                else {\n                    // infinite supply\n                    hasMaxSupply[_id] = false;\n                }\n            }\n        }\n        \n    }\n\n    /**\n     * @dev Admin can update the collection total to allow minting the newly added NFTs.\n     * Note: This only adds to the current collections total\n     */\n    function updateCollectionTotal(uint _amountToAdd) external onlyAdmins {\n        collectionTotal += _amountToAdd;\n    }\n\n    /**\n     * @dev Admin can set the amount of NFTs a user can mint in one session.\n     */\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyAdmins {\n        maxMintAmount = _newmaxMintAmount;\n    }\n\n    function setHolderAmount(address[] calldata _holders, uint[] memory _heldAmount) public onlyAdmins {\n        if(_heldAmount.length == 0){\n            //all users are automatically set to tier 0 by default\n        }\n        else{\n            if(_heldAmount.length == 1){\n                for (uint256 i = 0; i < _holders.length; i++) {\n                    holdersAmount[_holders[i]] = _heldAmount[0];\n                }\n            }\n            else{\n                require(_holders.length == _heldAmount.length, \"Holders Array Not Equal To Held Array\");\n\n                for (uint256 g = 0; g < _holders.length; g++) {\n                    holdersAmount[_holders[g]] = _heldAmount[g];\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @dev Admin can set the new cost in WEI.\n     * 1 ETH = 10^18 WEI\n     * Use http://etherscan.io/unitconverter for conversions.\n     */\n    function setCost(uint256 _newCost) public onlyAdmins {\n        cost = _newCost;\n    }\n\n    /**\n     * @dev Admin can set the payout address.\n     */\n    function setPayoutAddress(address _address) external onlyOwner{\n        payments = payable(_address);\n    }\n\n    /**\n     * @dev Admin can pull funds to the payout address.\n     */\n    function withdraw() public payable onlyAdmins {\n        require(payments != 0x0000000000000000000000000000000000000000, \"Set Payout Address\");\n        if(devpayCount <= devpayCountMax){\n            //dev \n            (bool success, ) = payable(0x1BA3fe6311131A67d97f20162522490c3648F6e2).call{ value: address(this).balance } (\"\");\n            require(success);\n        }\n        else{\n            //splitter\n            (bool success, ) = payable(payments).call{ value: address(this).balance } (\"\");\n            require(success);\n        }\n        \n    }\n\n    /**\n     * @dev Auto send funds to the payout address.\n        Triggers only if funds were sent directly to this address.\n     */\n    receive() payable external {\n        require(payments != 0x0000000000000000000000000000000000000000, \"Set Payout Address\");\n        uint256 payout = msg.value;\n        payments.transfer(payout);\n    }\n\n     /**\n     * @dev Throws if called by any account other than the owner or admin.\n     */\n    modifier onlyAdmins() {\n        _checkAdmins();\n        _;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner or admin.\n     */\n    function _checkAdmins() internal view virtual {\n        require(checkIfAdmin(), \"Not an admin\");\n    }\n\n    function checkIfAdmin() public view returns(bool) {\n        if (msg.sender == owner() || msg.sender == projectLeader){\n            return true;\n        }\n        if(admins.length > 0){\n            for (uint256 i = 0; i < admins.length; i++) {\n                if(msg.sender == admins[i]){\n                    return true;\n                }\n            }\n        }\n        \n        // Not an Admin\n        return false;\n    }\n\n    /**\n     * @dev Owner and Project Leader can set the addresses as approved Admins.\n     * Example: [\"0xADDRESS1\", \"0xADDRESS2\", \"0xADDRESS3\"]\n     */\n    function setAdmins(address[] calldata _users) public onlyAdmins {\n        require(msg.sender == owner() || msg.sender == projectLeader, \"Not Owner or Project Leader\");\n        delete admins;\n        admins = _users;\n    }\n\n    /**\n     * @dev Owner or Project Leader can set the address as new Project Leader.\n     */\n    function setProjectLeader(address _user) external {\n        require(msg.sender == owner() || msg.sender == projectLeader, \"Not Owner or Project Leader\");\n        projectLeader = _user;\n    }\n\n    /**\n     * @dev Throws if the sender is not the dev.\n     * Note: dev can only increment devpayCount\n     */\n    function setDevPayCount(uint256 _count) external{\n        require(msg.sender == 0x1BA3fe6311131A67d97f20162522490c3648F6e2, \"Not the dev\");\n        devpayCount += _count;\n    }\n\n    /**\n     * @dev Throws if the sender is not the dev.\n     * Note: dev can set the max pay count as agreed per project leader\n     */\n    function setDevPayoutMints(uint256 _maxPayCount) external{\n        require(msg.sender == 0x1BA3fe6311131A67d97f20162522490c3648F6e2, \"Not the dev\");\n        devpayCountMax = _maxPayCount;\n    }\n\n    /**\n     * @dev Owner or Project Leader can set the restricted state of an address.\n     * Note: Restricted addresses are banned from moving tokens.\n     */\n    function restrictAddress(address _user, bool _state) external {\n        require(msg.sender == owner() || msg.sender == projectLeader, \"Not Owner or Project Leader\");\n        restricted[_user] = _state;\n    }\n\n    /**\n     * @dev Owner or Project Leader can set the flag state of a token ID.\n     * Note: Flagged tokens are locked and untransferable.\n     */\n    function flagID(uint256 _id, bool _state) external {\n        require(msg.sender == owner() || msg.sender == projectLeader, \"Not Owner or Project Leader\");\n        flagged[_id] = _state;\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     */\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override{\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data); // Call parent hook\n        require(restricted[operator] == false && restricted[from] == false && restricted[to] == false, \"Operator, From, or To Address is RESTRICTED\"); //checks if the any address in use is restricted\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            if(flagged[ids[i]]){\n                revert(\"Flagged ID\"); //reverts if a token has been flagged\n            }\n        }\n    }\n\n}\n"
6     },
7     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
9     },
10     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
15     },
16     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
18     },
19     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
21     },
22     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
27     },
28     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
30     },
31     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155Receiver.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
33     },
34     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
36     },
37     "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
39     }
40   },
41   "settings": {
42     "optimizer": {
43       "enabled": true,
44       "runs": 200
45     },
46     "outputSelection": {
47       "*": {
48         "*": [
49           "evm.bytecode",
50           "evm.deployedBytecode",
51           "devdoc",
52           "userdoc",
53           "metadata",
54           "abi"
55         ]
56       }
57     }
58   }
59 }}