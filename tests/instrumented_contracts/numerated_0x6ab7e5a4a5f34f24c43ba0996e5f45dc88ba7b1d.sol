1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ZooverseGen2Controller.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./BaseMint.sol\";\n\n/**\n    Conditions:\n        - Genesis and Whitelist happens same time\n        - Addresses in claim gets a free mint, they can mint up to 2 at price .12\n        - Addresses in diamond hand can mint up to 3 at price .12\n        - Addresses in genesis can mint up to 2 at price .12\n        - Addresses in whitelist can mint up to 1 at price .15\n        - Addresses in waitlist can mint up to 1 at price .15\n        - Public no sales, cannot mint through another contract, at price .18\n */\n\ncontract ZooverseGen2Controller is BaseMint {\n    mapping(uint256 => mapping(address => bool)) private _whitelist;\n    mapping (address => bool) private _claimed;\n\n    uint256 private genesisLimit = 2;\n    uint256 public genesisPrice = 0.12 ether;\n    uint256 public whitelistPrice = 0.15 ether;\n    uint256 private _lastSaleType;\n\n    struct Sale {\n        uint256 limit;\n        uint256 liveIndex;\n        bytes32 root;\n    }\n\n    mapping(uint256 => Sale) public sales;\n\n    constructor() {\n        // claim\n        sales[1] = Sale(genesisLimit, 1, 0xe8673ee234e7ce0840f0c8b2df7486e7cad1433368b49d67ef3b6eac282ddb2d);\n        // diamondhand\n        sales[2] = Sale(genesisLimit + 1, 1, 0xb1915c4f45866c50eafd6e31b50005f7ee6e36130b2205d844d63be98e6ebcc1);\n        // genesis\n        sales[3] = Sale(genesisLimit, 1, 0xf9b463e9c56dd6e2cea744dd5e699ced04b36fd7c327b2614baaaedb38afa4fc);\n        // whitelist\n        sales[4] = Sale(1, 1, 0x1dd3a4f211ca8e7a0839f666370a647628d51b1718ffa362ce5d11b24bcfceda); \n        // waitlist\n        sales[5] = Sale(1, 2, 0x8b357472e382e324c75a0b5af28d470e59c0c5c1d358315f512d967c1a3dca5d);\n        _lastSaleType = 5;\n    }\n\n    modifier correctMintConditions(uint256 saleType, uint256 quantity, bytes32[] calldata proof) {\n        require(currentStage == sales[saleType].liveIndex, \"Not Live\");\n        require(nft.getAux(msg.sender) + quantity <= sales[saleType].limit, \"Exceeds limit\");\n        require(isPermitted(saleType, msg.sender, proof), \"Not verified user\");        \n        _;\n    }\n\n    function salesMint(uint256 quantity, bytes32[] calldata proof, uint256 saleType) \n        external \n        payable \n        callerIsUser\n        correctMintConditions(saleType, quantity, proof) \n    {\n        uint256 mintQuantity = quantity;\n        if(saleType == 1) {\n            if(!_claimed[msg.sender]) {\n                unchecked {\n                    mintQuantity++;\n                }\n                _claimed[msg.sender] = true;\n            }\n        }        \n        require(msg.value >= quantity * discountedPrice(saleType), \"Not enough eth\");\n        nft.setAux(msg.sender, uint64(nft.getAux(msg.sender) + quantity));\n        _mint(mintQuantity, msg.sender);\n    }\n\n    function _verify(uint256 saleType, address account, bytes32[] calldata proof) internal view returns (bool) {\n        return MerkleProof.verify(proof, sales[saleType].root, keccak256(abi.encodePacked(account)));\n    }\n\n    function isPermitted(uint256 saleType, address account, bytes32[] calldata proof) public view returns (bool) {\n        return _verify(saleType, account, proof) || _whitelist[saleType][account];\n    }\n\n    function getSaleType(address account, bytes32[] calldata proof) public view returns (uint256) {        \n        for(uint256 i = 1; i <= _lastSaleType;) {\n            if(isPermitted(i, account, proof)) return i;\n            unchecked {\n                i++;   \n            }\n        }\n        return 0;\n    }\n\n    function availableToMint(address account, bytes32[] calldata proof) public view returns (uint256) {\n        if(currentStage == 1 || currentStage == 2) {\n            uint256 balance = nft.getAux(account);\n            uint256 saleType = getSaleType(account, proof);\n            if(saleType == 0) return 0;\n            return sales[saleType].limit - balance;\n        }\n        if(currentStage == 3) return maxPerTx;\n        return 0;\n    }\n\n    function discountedPrice(uint256 saleType) public view returns (uint256) {\n        if(saleType > 3) return whitelistPrice;\n        return genesisPrice;\n    }\n\n    function updateSale(uint256 saleType, uint256 limit, uint256 liveIndex, bytes32 root) external adminOnly {\n        require(saleType <= _lastSaleType || _lastSaleType + 1 == saleType, \"Sale error\");        \n        Sale memory newSale;\n        newSale.limit = limit;\n        newSale.liveIndex = liveIndex;\n        newSale.root = root;\n        sales[saleType] = newSale;\n        if(saleType > _lastSaleType) _lastSaleType = saleType;\n    }\n\n    function updateGenesisPrice(uint256 _price) external adminOnly {\n        genesisPrice = _price;\n    }\n\n    function updateWhitelistPrice(uint256 _price) external adminOnly {\n        whitelistPrice = _price;\n    }\n\n    function updateRoot(uint256 saleType, bytes32 _root) external adminOnly {\n        sales[saleType].root = _root;\n    }\n\n    function addToWhitelist(uint256 saleType, address[] calldata to, bool[] calldata value) external adminOnly {\n        uint256 total = to.length;\n        for(uint256 i = 0; i < total;) {\n            _whitelist[saleType][to[i]] = value[i];\n            unchecked {\n                i++;   \n            }         \n        }\n    }\n}"
6     },
7     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
9     },
10     "contracts/BaseMint.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./AdminController.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./IERC721Token.sol\";\n\ncontract BaseMint is AdminController {\n    IERC721Token public nft;\n    uint256 public price = 0.18 ether;\n    uint256 public maxPerTx = 5;\n    uint256 public currentStage;\n    address public treasury = 0x6745a0b4fDF94Fb0AeD81FE7aC73bDF85aCF8310;\n\n    function publicMint(uint256 quantity) payable external callerIsUser enoughPrice(quantity, price) {\n        require(currentStage == 3, \"Not Live\");\n        require(quantity <= maxPerTx, \"Exceeds Limit\");\n        _mint(quantity, msg.sender);\n    }\n\n    function _mint(uint256 quantity, address to) internal {\n        nft.mint(to, quantity);\n    }\n\n    function setNFT(IERC721Token _nft) public adminOnly {\n        nft = _nft;\n    }\n\n    function setPrice(uint256 _price) public adminOnly {\n        price = _price;\n    }\n\n    function setMaxPerTx(uint256 _max) public adminOnly {\n        maxPerTx = _max;\n    }\n\n    function changeCurrentStage(uint256 stage) public adminOnly {\n        currentStage = stage;\n    }\n    \n    modifier callerIsUser {\n        require(tx.origin == msg.sender, \"Caller is not user\");\n        _;\n    }\n\n    modifier enoughPrice(uint256 quantity, uint256 mintCost) {\n        require(msg.value >= quantity * mintCost, \"Not enough eth\");\n        _;\n    }\n\n    function changeTreasury(address _treasury) external adminOnly {\n        treasury = _treasury;\n    }\n\n    function withdraw() external adminOnly {\n        uint256 balance = address(this).balance;\n        payable(treasury).transfer(balance);\n    }\n}"
12     },
13     "contracts/AdminController.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IAdminController.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract AdminController is IAdminController, Ownable {\n    mapping(address => bool) public _admins;\n\n    constructor() {\n        _admins[msg.sender] = true;\n    }    \n\n    function isAdmin(address to) public view returns (bool) {\n        return _admins[to];\n    }\n\n    modifier adminOnly() {\n        require(_admins[msg.sender] || msg.sender == owner(), \"Not authorised\");\n        _;\n    }\n\n    function setAdmins(address to, bool value) public adminOnly {\n        _admins[to] = value;\n    }\n}"
15     },
16     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
18     },
19     "contracts/IERC721Token.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\nimport \"./IAdminController.sol\";\n\ninterface IERC721Token is IAdminController {\n    function initialize(string memory _name, string memory _symbol, uint256 _supply, address owner) external;\n    function mint(address to, uint256 quantity) external;\n    function tokenURI(uint256) external view returns (string memory);\n    function setURI(string memory) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n    function totalSupply() external view returns (uint256);\n    function owner() external view returns (address);\n    function supply() external view returns (uint256);\n    function setSupply() external;\n    function numberMinted(address) external view returns (uint256);\n    function getAux(address) external view returns (uint256);\n    function setAux(address, uint64) external;\n}"
21     },
22     "contracts/IAdminController.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IAdminController {\n    function setAdmins(address to, bool value) external;\n    function isAdmin(address) external view returns (bool);\n}"
24     },
25     "@openzeppelin/contracts/access/Ownable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     }
31   },
32   "settings": {
33     "optimizer": {
34       "enabled": true,
35       "runs": 200
36     },
37     "outputSelection": {
38       "*": {
39         "*": [
40           "evm.bytecode",
41           "evm.deployedBytecode",
42           "devdoc",
43           "userdoc",
44           "metadata",
45           "abi"
46         ]
47       }
48     },
49     "libraries": {}
50   }
51 }}