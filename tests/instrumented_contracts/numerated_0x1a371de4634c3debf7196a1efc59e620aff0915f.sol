1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CashCows.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n//-------------------------------------------------------------------------------------------\n//\n//   /$$$$$$                      /$$              /$$$$$$                                   \n//  /$$__  $$                    | $$             /$$__  $$                                  \n// | $$  \\__/  /$$$$$$   /$$$$$$$| $$$$$$$       | $$  \\__/  /$$$$$$  /$$  /$$  /$$  /$$$$$$$\n// | $$       |____  $$ /$$_____/| $$__  $$      | $$       /$$__  $$| $$ | $$ | $$ /$$_____/\n// | $$        /$$$$$$$|  $$$$$$ | $$  \\ $$      | $$      | $$  \\ $$| $$ | $$ | $$|  $$$$$$ \n// | $$    $$ /$$__  $$ \\____  $$| $$  | $$      | $$    $$| $$  | $$| $$ | $$ | $$ \\____  $$\n// |  $$$$$$/|  $$$$$$$ /$$$$$$$/| $$  | $$      |  $$$$$$/|  $$$$$$/|  $$$$$/$$$$/ /$$$$$$$/\n//  \\______/  \\_______/|_______/ |__/  |__/       \\______/  \\______/  \\_____/\\___/ |_______/\n//\n//-------------------------------------------------------------------------------------------\n//\n// Moo.\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./CashCowsAbstract.sol\";\n\n/**\n * @dev Specifics of the Cash Cows collection\n */\ncontract CashCows is ReentrancyGuard, CashCowsAbstract { \n  // ============ Constants ============\n\n  //additional roles\n  bytes32 private constant _MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n  \n  //max amount that can be minted in this collection\n  uint16 public constant MAX_SUPPLY = 7777;\n  //the sale price per token\n  uint256 public constant MINT_PRICE = 0.005 ether;\n\n  //maximum amount that can be purchased per wallet in the public sale\n  uint256 public constant MAX_PER_WALLET = 9;\n\n  // ============ Storage ============\n\n  //mapping of address to amount minted\n  mapping(address => uint256) public minted;\n  //flag for if the mint is open to the public\n  bool public mintOpened;\n  //maximum amount free per wallet in the public sale\n  uint256 public maxFreePerWallet = 1;\n\n  // ============ Deploy ============\n\n  /**\n   * @dev Sets the base token uri\n   */\n  constructor(\n    string memory preview, \n    address admin\n  ) CashCowsAbstract(preview, admin) {}\n  \n  // ============ Read Methods ============\n\n  /**\n   * @dev Returns the token collection name.\n   */\n  function name() external pure returns(string memory) {\n    return \"Cash Cows Crew\";\n  }\n\n  /**\n   * @dev Returns the token collection symbol.\n   */\n  function symbol() external pure returns(string memory) {\n    return \"MOO\";\n  }\n\n  // ============ Write Methods ============\n\n  /**\n   * @dev Mints new tokens for the `recipient`. Its token ID will be \n   * automatically assigned\n   */\n  function mint(uint256 quantity) external payable nonReentrant {\n    address recipient = _msgSender();\n    //no contracts sorry..\n    if (recipient.code.length > 0\n      //has the sale started?\n      || !mintOpened\n      //the quantity here plus the current amount already minted \n      //should be less than the max purchase amount\n      || (quantity + minted[recipient]) > MAX_PER_WALLET\n      //the quantity being minted should not exceed the max supply\n      || (super.totalSupply() + quantity) > MAX_SUPPLY\n    ) revert InvalidCall();\n\n    //if there are still some free\n    if (minted[recipient] < maxFreePerWallet) {\n      //find out how much left is free\n      uint256 freeLeft = maxFreePerWallet - minted[recipient];\n      //if some of the quantity still needs to be paid\n      if (freeLeft < quantity \n        // and what is sent is less than what needs to be paid \n        && ((quantity - freeLeft) * MINT_PRICE) > msg.value\n      ) revert InvalidCall();\n    //the value sent should be the price times quantity\n    } else if ((quantity * MINT_PRICE) > msg.value) \n      revert InvalidCall();\n\n    minted[recipient] += quantity;\n    _safeMint(recipient, quantity);\n  }\n\n  /**\n   * @dev Allows anyone to mint tokens that was approved by the owner\n   */\n  function mint(\n    uint256 quantity, \n    uint256 maxMint, \n    uint256 maxFree, \n    bytes memory proof\n  ) external payable nonReentrant {\n    address recipient = _msgSender();\n\n    //free cannot be more than max\n    if (maxMint < maxFree\n      //the quantity here plus the current amount already minted \n      //should be less than the max purchase amount\n      || (quantity + minted[recipient]) > maxMint\n      //the quantity being minted should not exceed the max supply\n      || (super.totalSupply() + quantity) > MAX_SUPPLY\n      //make sure the minter signed this off\n      || !hasRole(_MINTER_ROLE, ECDSA.recover(\n        ECDSA.toEthSignedMessageHash(\n          keccak256(abi.encodePacked(\n            \"mint\", \n            recipient, \n            maxMint,\n            maxFree\n          ))\n        ),\n        proof\n      ))\n    ) revert InvalidCall();\n\n    //if there are still some free\n    if (minted[recipient] < maxFree) {\n      //find out how much left is free\n      uint256 freeLeft = maxFree - minted[recipient];\n      //if some of the quantity still needs to be paid\n      if (freeLeft < quantity \n        // and what is sent is less than what needs to be paid \n        && ((quantity - freeLeft) * MINT_PRICE) > msg.value\n      ) revert InvalidCall();\n    //the value sent should be the price times quantity\n    } else if ((quantity * MINT_PRICE) > msg.value) \n      revert InvalidCall();\n\n    minted[recipient] += quantity;\n    _safeMint(recipient, quantity);\n  }\n\n  // ============ Admin Methods ============\n\n  /**\n   * @dev Allows the _MINTER_ROLE to mint any to anyone (in the case of \n   * a no sell out)\n   */\n  function mint(\n    address recipient,\n    uint256 quantity\n  ) external onlyRole(_MINTER_ROLE) nonReentrant {\n    //the quantity being minted should not exceed the max supply\n    if ((super.totalSupply() + quantity) > MAX_SUPPLY) \n      revert InvalidCall();\n\n    _safeMint(recipient, quantity);\n  }\n\n  /**\n   * @dev Starts the sale\n   */\n  function openMint(bool yes) external onlyRole(_CURATOR_ROLE) {\n    mintOpened = yes;\n  }\n\n  /**\n   * @dev Allows the admin to change the public max free\n   */\n  function setMaxFree(uint256 max) external onlyRole(_CURATOR_ROLE) {\n    maxFreePerWallet = max;\n  }\n\n  /**\n   * @dev Allows the proceeds to be withdrawn. This wont be allowed\n   * until the metadata has been set to discourage rug pull\n   */\n  function withdraw(address recipient) external onlyOwner nonReentrant {\n    //cannot withdraw without setting a base URI first\n    if (address(_metadata) == address(0)) revert InvalidCall();\n    payable(recipient).transfer(address(this).balance);\n  }\n}"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
12     },
13     "contracts/CashCowsAbstract.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ERC721BAbstract.sol\";\nimport \"./IMetadata.sol\";\nimport \"./IRoyaltySplitter.sol\";\n\n/**\n * @dev Adds access control, metadata, erc2981 and royalties, and \n * marketplace proxies. Opens set sontract URI\n */\nabstract contract CashCowsAbstract is \n  Ownable,\n  AccessControl, \n  ERC721BAbstract, \n  IERC721Metadata \n{ \n  // ============ Constants ============\n\n  //roles\n  bytes32 internal constant _DAO_ROLE = keccak256(\"DAO_ROLE\");\n  bytes32 internal constant _CURATOR_ROLE = keccak256(\"CURATOR_ROLE\");\n  bytes32 internal constant _APPROVED_ROLE = keccak256(\"APPROVED_ROLE\");\n  \n  //bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n  //immutable preview uri json\n  string private _PREVIEW_URI;\n\n  // ============ Storage ============\n\n  //the treasury where your money at.\n  IRoyaltySplitter public treasury;\n  //where 10000 == 100.00%\n  uint256 public royaltyPercent = 1000;\n  //the location of the metadata generator\n  IMetadata internal _metadata;\n\n  // ============ Deploy ============\n\n  /**\n   * @dev Sets the base token uri\n   */\n  constructor(string memory preview, address admin) {\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    _PREVIEW_URI = preview;\n  }\n  \n  // ============ Read Methods ============\n\n  /**\n   * @dev Override isApprovedForAll to whitelist marketplaces \n   * to enable gas-less listings.\n   */\n  function isApprovedForAll(\n    address owner, \n    address operator\n  ) public view override(ERC721B, IERC721) returns(bool) {\n    return hasRole(_APPROVED_ROLE, operator) \n      || super.isApprovedForAll(owner, operator);\n  }\n\n  /**\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(\n    uint256 tokenId\n  ) external view returns(string memory) {\n    //if token does not exist\n    if(!_exists(tokenId)) revert InvalidCall();\n    //if metadata is not set\n    if (address(_metadata) == address(0)) return _PREVIEW_URI;\n    return _metadata.tokenURI(tokenId);\n  }\n\n  // ============ Write Methods ============\n\n  /** \n   * @dev ERC165 bytes to add to interface array - set in parent contract\n   *  implementing this standard\n   */\n  function royaltyInfo(\n    uint256 _tokenId,\n    uint256 _salePrice\n  ) external view returns (\n    address receiver,\n    uint256 royaltyAmount\n  ) {\n    if (address(treasury) == address(0) || !_exists(_tokenId)) \n      revert InvalidCall();\n    \n    return (\n      payable(address(treasury)), \n      (_salePrice * royaltyPercent) / 10000\n    );\n  }\n\n  /**\n   * @dev Adding support for ERC2981\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view override(AccessControl, ERC721B, IERC165) returns(bool) {\n    //support ERC721\n    return interfaceId == type(IERC721Metadata).interfaceId\n      //support ERC2981\n      || interfaceId == _INTERFACE_ID_ERC2981\n      //support other things\n      || super.supportsInterface(interfaceId);\n  }\n\n  // ============ Admin Methods ============\n\n  /**\n   * @dev Sets the contract URI\n   */\n  function setURI(string memory uri) external onlyRole(_CURATOR_ROLE) {\n    _setURI(uri);\n  }\n\n  /**\n   * @dev Updates the metadata location\n   */\n  function updateMetadata(\n    IMetadata metadata\n  ) external onlyRole(_CURATOR_ROLE) {\n    _metadata = metadata;\n  }\n\n  /**\n   * @dev Updates the royalty (provisions for Cow DAO) \n   * where `percent` up to 1000 == 10.00%\n   */\n  function updateRoyalty(uint256 percent) external onlyRole(_DAO_ROLE) {\n    if (percent > 1000) revert InvalidCall();\n    royaltyPercent = percent;\n  }\n\n  /**\n   * @dev Updates the treasury location, (in the case treasury needs to \n   * be updated)\n   */\n  function updateTreasury(IRoyaltySplitter splitter) external onlyRole(_CURATOR_ROLE) {\n    treasury = splitter;\n  }\n}"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
21     },
22     "@openzeppelin/contracts/access/AccessControl.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/access/Ownable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
27     },
28     "contracts/ERC721BAbstract.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"erc721b/contracts/ERC721B.sol\";\n\n/**\n * @dev Packages all the specific ERC721B features needed including\n * contract URI, burnable\n */\nabstract contract ERC721BAbstract is ERC721B { \n  // ============ Constants ============\n\n  //contract URI\n  string private _CONTRACT_URI;\n\n  // ============ Storage ============\n\n  //mapping of token id to who burned?\n  mapping(uint256 => address) public burned;\n  //count of how many burned\n  uint256 private _totalBurned;\n  \n  // ============ Read Methods ============\n\n  /**\n   * @dev Returns the contract URI.\n   */\n  function contractURI() external view returns(string memory) {\n    return _CONTRACT_URI;\n  }\n\n  /**\n   * @dev Adds a provision for burnt tokens.\n   */\n  function ownerOf(\n    uint256 tokenId\n  ) public view override returns(address) {\n    //error if burned\n    if (burned[tokenId] != address(0)) revert NonExistentToken();\n    return super.ownerOf(tokenId);\n  }\n\n  /**\n   * @dev Returns all the owner's tokens. This is an incredibly \n   * ineffecient method and should not be used by other contracts.\n   * It's recommended to call this on your dApp then call `ownsAll`\n   * from your other contract instead.\n   */\n  function ownerTokens(\n    address owner\n  ) external view returns(uint256[] memory) {\n    //get the balance\n    uint256 balance = balanceOf(owner);\n    //if no balance\n    if (balance == 0) {\n      //return empty array\n      return new uint256[](0);\n    }\n    //this is how we can fix the array size\n    uint256[] memory tokenIds = new uint256[](balance);\n    //next get the total supply\n    uint256 supply = totalSupply();\n    //next declare the array index\n    uint256 index;\n    //loop through the supply\n    for (uint256 i = 1; i <= supply; i++) {\n      //if we found a token owner ows\n      if (owner == ownerOf(i)) {\n        //add it to the token ids\n        tokenIds[index++] = i;\n        //if the index is equal to the balance\n        if (index == balance) {\n          //break out to save time\n          break;\n        }\n      }\n    }\n    //finally return the token ids\n    return tokenIds;\n  }\n\n  /**\n   * @dev Returns true if `owner` owns all the `tokenIds`\n   */\n  function ownsAll(\n    address owner, \n    uint256[] memory tokenIds\n  ) external view returns(bool) {\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      if (owner != ownerOf(tokenIds[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Shows the overall amount of tokens generated in the contract\n   */\n  function totalSupply() public view override returns(uint256) {\n    return super.totalSupply() - _totalBurned;\n  }\n\n  // ============ Write Methods ============\n\n  /**\n   * @dev Burns `tokenId`. See {ERC721B-_burn}.\n   *\n   * Requirements:\n   *\n   * - The caller must own `tokenId` or be an approved operator.\n   */\n  function burn(uint256 tokenId) external {\n    address owner = ERC721B.ownerOf(tokenId);\n    if (!_isApprovedOrOwner(_msgSender(), tokenId, owner)) \n      revert InvalidCall();\n\n    _beforeTokenTransfers(owner, address(0), tokenId, 1);\n    \n    // Clear approvals\n    _approve(address(0), tokenId, owner);\n\n    unchecked {\n      //this is the situation when _owners are not normalized\n      //get the next token id\n      uint256 nextTokenId = tokenId + 1;\n      //if token exists and yet it is address 0\n      if (_exists(nextTokenId) && _owners[nextTokenId] == address(0)) {\n        _owners[nextTokenId] = owner;\n      }\n\n      //this is the situation when _owners are normalized\n      burned[tokenId] = owner;\n      _balances[owner] -= 1;\n      _owners[tokenId] = address(0);\n      _totalBurned++;\n    }\n\n    _afterTokenTransfers(owner, address(0), tokenId, 1);\n\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  // ============ Internal Methods ============\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via \n   * {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   *\n   * The parent defines `_exists` as greater than 0 and less than \n   * the last token id\n   */\n  function _exists(\n    uint256 tokenId\n  ) internal view virtual override returns(bool) {\n    return burned[tokenId] == address(0) && super._exists(tokenId);\n  }\n\n  /**\n   * @dev Sets the contract URI\n   */\n  function _setURI(string memory uri) internal {\n    _CONTRACT_URI = uri;\n  }\n}"
30     },
31     "contracts/IMetadata.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMetadata {\n  function tokenURI(uint256 tokenId) external view returns(string memory);\n}"
33     },
34     "contracts/IRoyaltySplitter.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRoyaltySplitter {\n  function releaseable(uint256 tokenId) external view returns(uint256);\n  function releaseable(IERC20 token, uint256 tokenId) external view returns(uint256);\n}"
36     },
37     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
42     },
43     "@openzeppelin/contracts/access/IAccessControl.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
45     },
46     "@openzeppelin/contracts/utils/Context.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
51     },
52     "erc721b/contracts/ERC721B.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nerror InvalidCall();\nerror BalanceQueryZeroAddress();\nerror NonExistentToken();\nerror ApprovalToCurrentOwner();\nerror ApprovalOwnerIsOperator();\nerror NotERC721Receiver();\nerror ERC721ReceiverNotReceived();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] \n * Non-Fungible Token Standard, including the Metadata extension and \n * token Auto-ID generation.\n *\n * You must provide `name()` `symbol()` and `tokenURI(uint256 tokenId)`\n * to conform with IERC721Metadata\n */\nabstract contract ERC721B is Context, ERC165, IERC721 {\n\n  // ============ Storage ============\n\n  // The last token id minted\n  uint256 private _lastTokenId;\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) internal _owners;\n  // Mapping owner address to token count\n  mapping(address => uint256) internal _balances;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  // ============ Read Methods ============\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) \n    public view virtual override returns(uint256) \n  {\n    if (owner == address(0)) revert BalanceQueryZeroAddress();\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Shows the overall amount of tokens generated in the contract\n   */\n  function totalSupply() public view virtual returns(uint256) {\n    return _lastTokenId;\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) \n    public view virtual override returns(address) \n  {\n    unchecked {\n      //this is the situation when _owners normalized\n      uint256 id = tokenId;\n      if (_owners[id] != address(0)) {\n        return _owners[id];\n      }\n      //this is the situation when _owners is not normalized\n      if (id > 0 && id <= _lastTokenId) {\n        //there will never be a case where token 1 is address(0)\n        while(true) {\n          id--;\n          if (id == 0) {\n            break;\n          } else if (_owners[id] != address(0)) {\n            return _owners[id];\n          }\n        }\n      }\n    }\n\n    revert NonExistentToken();\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) \n    public view virtual override(ERC165, IERC165) returns(bool) \n  {\n    return interfaceId == type(IERC721).interfaceId\n      || super.supportsInterface(interfaceId);\n  }\n\n  // ============ Approval Methods ============\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    address owner = ERC721B.ownerOf(tokenId);\n    if (to == owner) revert ApprovalToCurrentOwner();\n\n    address sender = _msgSender();\n    if (sender != owner && !isApprovedForAll(owner, sender)) \n      revert ApprovalToCurrentOwner();\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) \n    public view virtual override returns(address) \n  {\n    if (!_exists(tokenId)) revert NonExistentToken();\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator) \n    public view virtual override returns (bool) \n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) \n    public virtual override \n  {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(address to, uint256 tokenId, address owner) \n    internal virtual \n  {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev transfers token considering approvals\n   */\n  function _approveTransfer(\n    address spender, \n    address from, \n    address to, \n    uint256 tokenId\n  ) internal virtual {\n    if (!_isApprovedOrOwner(spender, tokenId, from)) \n      revert InvalidCall();\n\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers token considering approvals\n   */\n  function _approveSafeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) internal virtual {\n    _approveTransfer(_msgSender(), from, to, tokenId);\n    //see: @openzep/utils/Address.sol\n    if (to.code.length > 0\n      && !_checkOnERC721Received(from, to, tokenId, _data)\n    ) revert ERC721ReceiverNotReceived();\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isApprovedOrOwner(\n    address spender, \n    uint256 tokenId, \n    address owner\n  ) internal view virtual returns(bool) {\n    return spender == owner \n      || getApproved(tokenId) == spender \n      || isApprovedForAll(owner, spender);\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits a {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(\n    address owner,\n    address operator,\n    bool approved\n  ) internal virtual {\n    if (owner == operator) revert ApprovalOwnerIsOperator();\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  // ============ Mint Methods ============\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} \n   * whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(\n    address to,\n    uint256 amount,\n    bytes memory _data,\n    bool safeCheck\n  ) private {\n    if(amount == 0 || to == address(0)) revert InvalidCall();\n    uint256 startTokenId = _lastTokenId + 1;\n    \n    _beforeTokenTransfers(address(0), to, startTokenId, amount);\n    \n    unchecked {\n      _lastTokenId += amount;\n      _balances[to] += amount;\n      _owners[startTokenId] = to;\n\n      _afterTokenTransfers(address(0), to, startTokenId, amount);\n\n      uint256 updatedIndex = startTokenId;\n      uint256 endIndex = updatedIndex + amount;\n      //if do safe check and,\n      //check if contract one time (instead of loop)\n      //see: @openzep/utils/Address.sol\n      if (safeCheck && to.code.length > 0) {\n        //loop emit transfer and received check\n        do {\n          emit Transfer(address(0), to, updatedIndex);\n          if (!_checkOnERC721Received(address(0), to, updatedIndex++, _data))\n            revert ERC721ReceiverNotReceived();\n        } while (updatedIndex != endIndex);\n        return;\n      }\n\n      do {\n        emit Transfer(address(0), to, updatedIndex++);\n      } while (updatedIndex != endIndex);\n    }\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement \n   *   {IERC721Receiver-onERC721Received}, which is called upon a \n   *   safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 amount) internal virtual {\n    _safeMint(to, amount, \"\");\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], \n   * with an additional `data` parameter which is forwarded in \n   * {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(\n    address to,\n    uint256 amount,\n    bytes memory _data\n  ) internal virtual {\n    _mint(to, amount, _data, true);\n  }\n\n  // ============ Transfer Methods ============\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    _approveTransfer(_msgSender(), from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public virtual override {\n    _approveSafeTransfer(from, to, tokenId, _data);\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} \n   * on a target address. The call is not executed if the target address \n   * is not a contract.\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    try IERC721Receiver(to).onERC721Received(\n      _msgSender(), from, tokenId, _data\n    ) returns (bytes4 retval) {\n      return retval == IERC721Receiver.onERC721Received.selector;\n    } catch (bytes memory reason) {\n      if (reason.length == 0) {\n        revert NotERC721Receiver();\n      } else {\n        assembly {\n          revert(add(32, reason), mload(reason))\n        }\n      }\n    }\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via \n   * {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return tokenId > 0 && tokenId <= _lastTokenId;\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking \n   * first that contract recipients are aware of the ERC721 protocol to \n   * prevent tokens from being forever locked.\n   *\n   * `_data` is additional data, it has no specified format and it is \n   * sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can \n   * be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as \n   * signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement \n   *   {IERC721Receiver-onERC721Received}, which is called upon a \n   *   safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) internal virtual {\n    _transfer(from, to, tokenId);\n    //see: @openzep/utils/Address.sol\n    if (to.code.length > 0\n      && !_checkOnERC721Received(from, to, tokenId, _data)\n    ) revert ERC721ReceiverNotReceived();\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`. As opposed to \n   * {transferFrom}, this imposes no restrictions on msg.sender.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(address from, address to, uint256 tokenId) private {\n    //if transfer to null or not the owner\n    if (to == address(0) || from != ERC721B.ownerOf(tokenId)) \n      revert InvalidCall();\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n    \n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, from);\n\n    unchecked {\n      //this is the situation when _owners are normalized\n      _balances[to] += 1;\n      _balances[from] -= 1;\n      _owners[tokenId] = to;\n      //this is the situation when _owners are not normalized\n      uint256 nextTokenId = tokenId + 1;\n      if (nextTokenId <= _lastTokenId && _owners[nextTokenId] == address(0)) {\n        _owners[nextTokenId] = from;\n      }\n    }\n\n    _afterTokenTransfers(from, to, tokenId, 1);\n    emit Transfer(from, to, tokenId);\n  }\n\n  // ============ TODO Methods ============\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids \n   * are about to be transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * amount - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` \n   *   will be transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids \n   * have been transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * amount - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 amount\n  ) internal virtual {}\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
57     },
58     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 200
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "libraries": {}
80   }
81 }}