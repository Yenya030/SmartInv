1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "src/ARBOBCTFaucet.sol": {
38       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract ARBOBCTFaucet is ERC1155Holder, Ownable, ReentrancyGuard {\n    // Address of the Artifacts (ERC1155) Contract\n    IERC1155 public artifactsContract;\n    // The fee to access the FanFaucet (FAF)\n    uint256 public ethPrice;\n    // The array of token ids that are in the inventory\n    uint256[] public tokenIdsInventory;\n    // The iteration of the FanFaucet campaign, allowing for reuse while restricting free withdrawals to numOfFreeRequestsAllowed\n    uint256 public campaignId;\n    // Number of free requests without FAF per wallet\n    uint256 public numOfFreeRequestsAllowed;\n    // Number of total requests allowed from the FanFaucet with and without FAF\n    uint256 public numOfTotalRequestsAllowed;\n    // List of whitelisted ERC token addresses for FanFaucet collabs\n    address[] public whitelistedTokenAddressList;\n    // Indicates if the FanFaucet is online or offlne\n    bool public isOnline = false;\n\n    // Map of whitelisted ERC token address and their details\n    struct WhitelistToken {\n        string standard;\n        uint256[] tokenIdsArray;\n        uint256[] amountsArray; // in decimal units as defined by the contract\n        bool active;\n    }\n\n    mapping(address => WhitelistToken) public whitelistedTokens;\n\n    // Map of wallet addresses and total FanFaucet requests per campaignId\n    mapping(address => mapping(uint256 => uint256)) public withdrawn;\n\n    // Events\n    event FanFaucetWithdraw(address userAddress, uint256 tokenId);\n\n    // Errors\n    // Already used allotted free requests\n    error AlreadyWithdrawnFree();\n    // Already used allotted total requests\n    error TooManyWithdrawn(uint256 withdrawnAmount);\n    // FanFaucet is offline\n    error FaucetOffline();\n    // Nothing to claim\n    error ContractBalanceEmpty();\n    // Incorrect FanFaucet Access Fee\n    error WrongEthAmountSent(uint256 ethAmount);\n    // External seed not provided\n    error EmptySeed();\n    // Unsupported standard\n    error WrongStandard();\n    // Details on the collab tokens doesn't exist\n    error TokenStructDoesNotExist();\n    // Not whitelisted\n    error NotEnoughWhitelistedTokens();\n\n    // Constructoooor\n    constructor(address _artifactsContract, uint256 _campaignId) {\n        artifactsContract = IERC1155(_artifactsContract);\n        campaignId = _campaignId;\n    }\n\n    function fanFaucetClaim(string calldata _randomSeed) external payable nonReentrant {\n        if (isOnline == false) revert FaucetOffline();\n        if (bytes(_randomSeed).length == 0) revert EmptySeed();\n        // Check if the caller has already withdrawn more than the total allowed amount\n        if (withdrawn[msg.sender][campaignId] >= numOfTotalRequestsAllowed)\n            revert TooManyWithdrawn(withdrawn[msg.sender][campaignId]);\n        // Check if we need to collect payment, by checking if total withdrawn is >= numOfFreeRequestsAllowed\n        if (withdrawn[msg.sender][campaignId] >= numOfFreeRequestsAllowed && msg.value != ethPrice)\n            revert WrongEthAmountSent(msg.value);\n        // Check if tokens are required to access the Faucet\n        if (whitelistedTokenAddressList.length > 0) {\n            bool accessGranted = false;\n\n            if (whitelistedTokenAddressList.length == 1) {\n                accessGranted = checkWhitelistedTokens(0);\n            } else {\n                for (uint256 i = 0; i < whitelistedTokenAddressList.length; i++) {\n                    accessGranted = checkWhitelistedTokens(i);\n                    if (accessGranted) break;\n                }\n            }\n            if (!accessGranted) revert NotEnoughWhitelistedTokens();\n        }\n\n        // Generate a random number using keccak256\n        uint256 randomNumber = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp,\n                    block.difficulty,\n                    msg.sender,\n                    _randomSeed,\n                    withdrawn[msg.sender][campaignId]\n                )\n            )\n        );\n\n        // Generate a random number within the range of the token ids array length\n        uint256 randomIndex = randomNumber % (tokenIdsInventory.length);\n\n        uint256 availableTokenId = findTokenWithBalance(randomIndex);\n\n        // Withdraw 1 ERC1155 token from the contract\n        withdrawn[msg.sender][campaignId] = withdrawn[msg.sender][campaignId] + 1;\n        artifactsContract.safeTransferFrom(address(this), msg.sender, availableTokenId, 1, \"\");\n        emit FanFaucetWithdraw(msg.sender, availableTokenId);\n    }\n\n    function checkWhitelistedTokens(uint256 _index) private view returns (bool access) {\n        address tokenAddress = whitelistedTokenAddressList[_index];\n        WhitelistToken memory tokenStruct = whitelistedTokens[tokenAddress];\n\n        if (keccak256(abi.encodePacked(tokenStruct.standard)) == keccak256(abi.encodePacked(\"erc20\"))) {\n            if (IERC20(tokenAddress).balanceOf(msg.sender) >= tokenStruct.amountsArray[0]) return true;\n        }\n\n        if (keccak256(abi.encodePacked(tokenStruct.standard)) == keccak256(abi.encodePacked(\"erc721\"))) {\n            for (uint256 i = 0; i < tokenStruct.tokenIdsArray.length; i++) {\n                if (IERC721(tokenAddress).ownerOf(tokenStruct.tokenIdsArray[i]) == msg.sender) return true;\n            }\n        }\n\n        if (keccak256(abi.encodePacked(tokenStruct.standard)) == keccak256(abi.encodePacked(\"erc1155\"))) {\n            for (uint256 i = 0; i < tokenStruct.tokenIdsArray.length; i++) {\n                if (\n                    IERC1155(tokenAddress).balanceOf(msg.sender, tokenStruct.tokenIdsArray[i]) >=\n                    tokenStruct.amountsArray[i]\n                ) return true;\n            }\n        }\n\n        return false;\n    }\n\n    function findTokenWithBalance(uint256 _randomIndex) private view returns (uint256 availableTokenId) {\n        if (artifactsContract.balanceOf(address(this), tokenIdsInventory[_randomIndex]) > 0) {\n            return tokenIdsInventory[_randomIndex];\n        }\n\n        uint256 newIndex = _randomIndex + 1;\n\n        for (uint256 i = 0; i < tokenIdsInventory.length; i++) {\n            if (newIndex > tokenIdsInventory.length) {\n                newIndex = 0;\n            }\n\n            if (newIndex == _randomIndex) revert ContractBalanceEmpty();\n\n            if (artifactsContract.balanceOf(address(this), tokenIdsInventory[newIndex]) > 0) {\n                return tokenIdsInventory[newIndex];\n            }\n\n            newIndex = newIndex + 1;\n        }\n    }\n\n    // External views\n    function getTokenIdsInventory() external view returns (uint256[] memory) {\n        return tokenIdsInventory;\n    }\n\n    function getTotalClaims(address _userAddress, uint256 _campaignId) external view returns (uint256) {\n        return withdrawn[_userAddress][_campaignId];\n    }\n\n    function getWhitelistedTokenAddressList() external view returns (address[] memory) {\n        return whitelistedTokenAddressList;\n    }\n\n    function getWhitelistedTokenDetails(address _contractAddress) external view returns (WhitelistToken memory) {\n        return whitelistedTokens[_contractAddress];\n    }\n\n    // Owner controls\n    function enableFaucet() external onlyOwner {\n        isOnline = true;\n    }\n\n    function disableFaucet() external onlyOwner {\n        isOnline = false;\n    }\n\n    function setTokenIdsInventory(uint256[] calldata _tokenIds) external onlyOwner {\n        tokenIdsInventory = _tokenIds;\n    }\n\n    function setNumOfTotalRequestsAllowed(uint256 _totalAllowed) external onlyOwner {\n        numOfTotalRequestsAllowed = _totalAllowed;\n    }\n\n    function setNumOfFreeRequestsAllowed(uint256 _freeAllowed) external onlyOwner {\n        numOfFreeRequestsAllowed = _freeAllowed;\n    }\n\n    // Start a new campaign and fresh wallet claim record\n    function setCampaignId(uint256 _campaignId) external onlyOwner {\n        campaignId = _campaignId;\n    }\n\n    // FanFaucetAccessFee in wei\n    function setFanFaucetAccessFee(uint256 _ethPrice) external onlyOwner {\n        ethPrice = _ethPrice;\n    }\n\n    // Set WhitelistToken struct for every whitelist contract before adding to this array\n    // This ensures the address list will always have corresponding structs in storage and one can be removed easily\n    function setWhitelistedTokenAddressList(address[] calldata _whitelistedTokenAddressList) external onlyOwner {\n        for (uint256 i = 0; i < _whitelistedTokenAddressList.length; i++) {\n            address tokenAddress = _whitelistedTokenAddressList[i];\n            WhitelistToken memory tokenStruct = whitelistedTokens[tokenAddress];\n\n            if (!tokenStruct.active) revert TokenStructDoesNotExist();\n        }\n\n        whitelistedTokenAddressList = _whitelistedTokenAddressList;\n    }\n\n    function setWhitelistedTokenDetails(\n        string calldata _tokenStandard,\n        address _contractAddress,\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _amounts\n    ) external onlyOwner {\n        if (\n            keccak256(abi.encodePacked(_tokenStandard)) == keccak256(abi.encodePacked(\"erc20\")) ||\n            keccak256(abi.encodePacked(_tokenStandard)) == keccak256(abi.encodePacked(\"erc721\")) ||\n            keccak256(abi.encodePacked(_tokenStandard)) == keccak256(abi.encodePacked(\"erc1155\"))\n        ) {\n            whitelistedTokens[_contractAddress].standard = _tokenStandard;\n            whitelistedTokens[_contractAddress].tokenIdsArray = _tokenIds;\n            whitelistedTokens[_contractAddress].amountsArray = _amounts;\n            whitelistedTokens[_contractAddress].active = true;\n        } else {\n            revert WrongStandard();\n        }\n    }\n\n    function removeWhitelistedToken(address[] calldata _contractAddresses) external onlyOwner {\n        for (uint256 i = 0; i < _contractAddresses.length; i++) {\n            delete whitelistedTokens[_contractAddresses[i]];\n        }\n    }\n\n    function withdrawAll() external onlyOwner {\n        uint256[] memory amountsArray = new uint256[](tokenIdsInventory.length);\n\n        // Loop through all of the ERC-1155s owned by the contract\n        for (uint256 i = 0; i < tokenIdsInventory.length; i++) {\n            uint256 balance = artifactsContract.balanceOf(address(this), tokenIdsInventory[i]);\n            amountsArray[i] = balance;\n        }\n\n        artifactsContract.safeBatchTransferFrom(address(this), owner(), tokenIdsInventory, amountsArray, \"\");\n    }\n\n    function withdrawSingleId(uint256 _tokenId) external onlyOwner {\n        uint256 balance = artifactsContract.balanceOf(address(this), _tokenId);\n        artifactsContract.safeTransferFrom(address(this), owner(), _tokenId, balance, \"\");\n    }\n\n    function withdrawEth() external onlyOwner {\n        address payable to = payable(owner());\n        to.transfer(address(this).balance);\n    }\n\n}\n"
39     }
40   },
41   "settings": {
42     "metadata": {
43       "bytecodeHash": "none"
44     },
45     "optimizer": {
46       "enabled": true,
47       "runs": 800
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}