1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ApemoArmyOperator.sol": {
5       "content": "//SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IApemoArmy.sol\";\nimport \"./utils/Operatorable.sol\";\nimport \"./helpers/DateHelper.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * Apemo Army Avatar Operator Contract V1\n * Provided by Satoshiverse LLC\n */\ncontract ApemoArmyOperator is Operatorable, ReentrancyGuard {\n    IApemoArmy public apemoArmyContract;\n\n    // Payable Address for the Initial Sale\n    address payable public svEthAddr =\n        payable(0x981268bF660454e24DBEa9020D57C2504a538C57);\n\n    enum AllowLists {\n        APELIST,\n        CREWMEN_LIST,\n        TREVOR_JONES,\n        HACKATAO,\n        PUBLIC_SALE_LIST\n    }\n    //Allow List Merkle roots\n    mapping(AllowLists => bytes32) public allowListMerkleRoots;\n\n    //Merkle Tree Root for the free claim list\n    bytes32 public freeClaimMerkleRoot;\n\n    //Current phase of the drop\n    uint256 currentPhase = 0;\n\n    uint16 mintIndex = 1;\n\n    uint16 public apemoArmySold = 0;\n    uint256 public trevorTexturesSold = 0;\n    uint256 public hackataoTexturesSold = 0;\n\n    uint256 MAX_SUPPLY = 10000;\n    uint256 MAX_SUPPLY_SALES = 5000;\n    uint256 MAX_SUPPLY_SPECIAL_TEXTURES = 100;\n\n    uint256 publicSalePrice = .1 ether;\n\n    bool public claimState = true;\n    bool public purchaseState = true;\n\n    //We can have a address => bool mapping or address => uint8 mapping\n    mapping(address => uint8) public claimedAmount;\n    mapping(address => bool) public claimedAddresses;\n\n    //Allowlist purchases cannot exceed per-user allotment, which can never exceed 2.\n    mapping(AllowLists => mapping(address => uint8)) public allowListPurchases;\n\n    //Functions\n\n    // Set Initial Addresses and Variables Upon Deployment\n    constructor(address _operator, address _apemoArmyContract) {\n        apemoArmyContract = IApemoArmy(_apemoArmyContract);\n        addOperator(_operator);\n    }\n\n    // Change the Payment Adddress if Necessary\n    function setPaymentAddress(address _svEthAddr) external onlyOwner {\n        svEthAddr = payable(_svEthAddr);\n    }\n\n    // Sets the merkle root corresponding to the free Claim List\n    // Snapshot will be taken on August 23rd, 2022 1:00 PM PST.\n    function setFreeClaimMerkleRoot(bytes32 _freeClaimMerkleRoot)\n        external\n        onlyOperator\n    {\n        freeClaimMerkleRoot = _freeClaimMerkleRoot;\n    }\n\n    //Sets the merkle roots for the allow lists\n    function setAllowListMerkleRoot(AllowLists allowList, bytes32 merkleRoot)\n        external\n        onlyOperator\n    {\n        allowListMerkleRoots[allowList] = merkleRoot;\n    }\n\n    // Operator can toggle the claim mechanism as On / Off\n    function toggleClaim() external onlyOperator {\n        claimState = !claimState;\n    }\n\n    // Operator can toggle the purchasing mechanism as On / Off for the Sale of Apemo Army\n    function togglePurchase() external onlyOperator {\n        purchaseState = !purchaseState;\n    }\n\n    // Claim Apemo Army if you have the allotment. Must be in phase = 4\n    //function claim(uint8 claimCount, bytes32[] calldata merkleProof, uint8 phaseOrAllowList)\n    function claim(\n        uint256 claimCount,\n        uint256 allotment,\n        bytes32[] calldata merkleProof\n    ) external nonReentrant {\n        require(claimState, \"Claim is disabled\");\n        require(currentPhase == 4, \"Claim period has not yet begun.\");\n        require(\n            !claimedAddresses[msg.sender],\n            \"You have already claimed your full allotment.\"\n        );\n\n        require(\n            claimCount + claimedAmount[msg.sender] <= allotment,\n            \"Claiming this many would exceed your allotment.\"\n        );\n        require(\n            MerkleProof.verify(\n                merkleProof,\n                freeClaimMerkleRoot,\n                keccak256(abi.encodePacked(msg.sender, allotment))\n            ),\n            \"Sender address is not on the free claim list\"\n        );\n\n        if (claimedAmount[msg.sender] + claimCount == allotment) {\n            claimedAddresses[msg.sender] = true;\n            claimedAmount[msg.sender] = (uint8)(\n                claimedAmount[msg.sender] + claimCount\n            );\n        } else {\n            claimedAmount[msg.sender] = (uint8)(\n                claimedAmount[msg.sender] + claimCount\n            );\n        }\n\n        uint256 i = 0;\n        uint256 tokenId;\n\n        while (i < claimCount) {\n            tokenId = mintIndex;\n            mintIndex++;\n            apemoArmyContract.operatorMint(msg.sender, tokenId);\n            i++;\n        }\n    }\n\n    // Purchase Apemo Army avatars without discount. Max 10 per transaction.\n    function purchase(uint256 count) external payable nonReentrant {\n        require(purchaseState, \"Purchase is disabled\");\n        require(count <= 10, \"Can only purchase up to 10 per transaction\");\n        require(\n            currentPhase == 3,\n            \"Public sale has not begun yet or has already ended\"\n        );\n        require(msg.value >= count * publicSalePrice, \"Not enough ether\");\n\n        require(\n            apemoArmySold + count <= MAX_SUPPLY_SALES,\n            \"No Apemo Army avatars left for public sale\"\n        );\n\n        uint256 tokenId;\n        for (uint256 i = 0; i < count; i++) {\n            tokenId = mintIndex;\n            mintIndex++;\n            apemoArmySold++;\n            apemoArmyContract.operatorMint(msg.sender, tokenId);\n        }\n\n        (bool sent, ) = svEthAddr.call{value: count * publicSalePrice}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        if (msg.value > count * publicSalePrice) {\n            (sent, ) = payable(msg.sender).call{\n                value: msg.value - count * publicSalePrice\n            }(\"\");\n            require(sent, \"Failed to send change back to user\");\n        }\n    }\n\n    //Purchase Apemo Army avatars using your spot in one of the allowlists\n    function allowListPurchase(\n        uint256 count,\n        uint256 allotment,\n        AllowLists list,\n        bytes32[] calldata merkleProof\n    ) external payable nonReentrant {\n        require(purchaseState, \"Purchase is disabled\");\n        require(\n            allowListPurchases[list][msg.sender] + count <= allotment,\n            \"Purchasing would exceed allotment.\"\n        );\n        require(currentPhase >= 1, \"Allowlist sale has not begun yet\");\n        require(currentPhase < 3, \"Allowlist sale has already ended\");\n        if (list == AllowLists.PUBLIC_SALE_LIST) {\n            require(\n                currentPhase == 2,\n                \"Public Allowlist sales cannot be performed at this time\"\n            );\n        } else if (list == AllowLists.TREVOR_JONES) {\n            require(\n                trevorTexturesSold + count <= MAX_SUPPLY_SPECIAL_TEXTURES,\n                \"Bitcoin Angel Clothing textures are sold out\"\n            );\n            trevorTexturesSold += count;\n        }\n        else if (list == AllowLists.HACKATAO) {\n            require(\n                hackataoTexturesSold + count <= MAX_SUPPLY_SPECIAL_TEXTURES,\n                \"Hackatao Clothing textures are sold out\"\n            );\n            hackataoTexturesSold += count;\n        }\n\n        require(count <= allotment, \"Cannot mint more than allotment.\");\n        uint256 price = publicSalePrice;\n        if (list == AllowLists.APELIST) {\n            price = (price) / 2;\n        } else if (\n            list == AllowLists.CREWMEN_LIST ||\n            list == AllowLists.TREVOR_JONES ||\n            list == AllowLists.HACKATAO\n        ) {\n            price = (price * 8) / 10;\n        }\n        require(msg.value >= count * price, \"Not enough ether\");\n        require(\n            apemoArmySold + count <= MAX_SUPPLY_SALES,\n            \"No Apemo Army avatars left for public sale\"\n        );\n        require(\n            MerkleProof.verify(\n                merkleProof,\n                allowListMerkleRoots[list],\n                keccak256(abi.encodePacked(msg.sender, allotment))\n            ),\n            \"Sender address is not in that allowlist\"\n        );\n\n        allowListPurchases[list][msg.sender] += uint8(count);\n\n        uint256 tokenId;\n        for (uint256 i = 0; i < count; i++) {\n            tokenId = mintIndex;\n            mintIndex++;\n            apemoArmySold++;\n            apemoArmyContract.operatorMint(msg.sender, tokenId);\n        }\n\n        (bool sent, ) = svEthAddr.call{value: count * price}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        if (msg.value > count * price) {\n            (sent, ) = payable(msg.sender).call{\n                value: msg.value - count * price\n            }(\"\");\n            require(sent, \"Failed to send change back to user\");\n        }\n    }\n\n    // Operator can batch mint and transfer remaining Apemo Army avatars to a secure address\n    function safeBatchMintAndTransfer(address holder, uint16 batchSize)\n        external\n        onlyOperator\n    {\n        require(\n            mintIndex + batchSize <= MAX_SUPPLY + 1,\n            \"No Apemo Army avatars left for public sale\"\n        );\n\n        for (uint256 i = mintIndex; i < mintIndex + batchSize; i++) {\n            apemoArmyContract.operatorMint(holder, i);\n        }\n\n        mintIndex = uint16(mintIndex + batchSize);\n    }\n\n    // Owner can decrease the total supply not ever exceeding 10,000 Apemo Army avatars\n    function setMaxLimit(uint256 maxLimit) external onlyOwner {\n        require(maxLimit < 10001, \"Max supply can never exceed 10000\");\n        MAX_SUPPLY = maxLimit;\n    }\n\n    //Sets current phase of the drop\n    function setPhase(uint8 _currentPhase) external onlyOperator {\n        require(\n            _currentPhase <= 5 && _currentPhase >= 0,\n            \"Phase must be between 0 and 5\"\n        );\n        currentPhase = _currentPhase;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "contracts/interfaces/IApemoArmy.sol": {
11       "content": "//SPDX-License-Identifier: GNU General Public License v3.0\npragma solidity ^0.8.0;\n\n// Interface for the ApemoArmy token\ninterface IApemoArmy {\n\n  function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\n\n  function operatorMint(address to, uint256 tokenId) external;\n}\n"
12     },
13     "contracts/utils/Operatorable.sol": {
14       "content": "//SPDX-License-Identifier: GNU General Public License v3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract Operatorable is Ownable, AccessControl {\n  bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n  /**\n    * @dev Restricted to members of the `operator` role.\n    */\n  modifier onlyOperator() {\n    require(hasRole(OPERATOR_ROLE, msg.sender), \"Operatorable: CALLER_NO_OPERATOR_ROLE\");\n    _;\n  }\n\n  constructor() {\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(OPERATOR_ROLE, msg.sender);\n  }\n\n  /**\n    * @dev Add an `_account` to the `operator` role.\n    */\n  function addOperator(address _account) public onlyOwner {\n    grantRole(OPERATOR_ROLE, _account);\n  }\n\n  /**\n    * @dev Remove an `_account` from the `operator` role.\n    */\n  function removeOperator(address _account) public onlyOwner {\n    revokeRole(OPERATOR_ROLE, _account);\n  }\n\n  /**\n    * @dev Check if an _account is operator.\n    */\n  function isOperator(address _account) public view returns (bool) {\n    return hasRole(OPERATOR_ROLE, _account);\n  }\n}\n"
15     },
16     "contracts/helpers/DateHelper.sol": {
17       "content": "//SPDX-License-Identifier: GNU General Public License v3.0\npragma solidity ^0.8.0;\n\nlibrary DateHelper {\n  // function min(uint a, uint b) internal pure returns (uint) {\n  //   return a < b ? a : b;\n  // }\n\n  function getPhase(uint256 _activeDateTime, uint256 _interval) internal view returns (uint256) {\n    unchecked {\n      uint256 passedTimeInHours = (block.timestamp - _activeDateTime) / _interval;\n      if( passedTimeInHours < 24) {\n        return 1;\n      } else if( passedTimeInHours < 48 ) {\n        return 2;\n      } else if( passedTimeInHours < 72 ) {\n        return 3;\n      } else if( passedTimeInHours < 96 ) {\n        return 4;\n      } else if( passedTimeInHours < 120 ) {\n        return 5;\n      } else if( passedTimeInHours < 144 ) {\n        return 6;\n      } else if( passedTimeInHours < 168 ) {\n        return 7;\n      } else {\n        return 8;\n      }\n    }\n  }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/access/AccessControl.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/access/IAccessControl.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Strings.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": true,
47       "runs": 1
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}