1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/veToken/VeTokenProxy.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./VeTokenStorage.sol\";\r\nimport \"./AccessControl.sol\";\r\n\r\n/**\r\n * @title VeTokenCore\r\n * @dev Storage for the VeToken is at this address, while execution is delegated to the `veTokenImplementation`.\r\n */\r\ncontract VeTokenProxy is AccessControl, ProxyStorage {\r\n    function setPendingImplementation(\r\n        address newPendingImplementation_\r\n    ) public onlyOwner \r\n    {\r\n        address oldPendingImplementation = pendingVeTokenImplementation;\r\n\r\n        pendingVeTokenImplementation = newPendingImplementation_;\r\n\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingVeTokenImplementation);\r\n    }\r\n\r\n    /**\r\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    */\r\n    function acceptImplementation() public {\r\n        // Check caller is pendingImplementation and pendingImplementation â‰  address(0)\r\n        require (msg.sender == pendingVeTokenImplementation && pendingVeTokenImplementation != address(0),\r\n                \"Invalid veTokenImplementation\");\r\n\r\n        // Save current values for inclusion in log\r\n        address oldImplementation = veTokenImplementation;\r\n        address oldPendingImplementation = pendingVeTokenImplementation;\r\n\r\n        veTokenImplementation = oldPendingImplementation;\r\n\r\n        pendingVeTokenImplementation = address(0);\r\n\r\n        emit NewImplementation(oldImplementation, veTokenImplementation);\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingVeTokenImplementation);\r\n    }\r\n    \r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n    fallback () external payable {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = veTokenImplementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n              let free_mem_ptr := mload(0x40)\r\n              returndatacopy(free_mem_ptr, 0, returndatasize())\r\n\r\n              switch success\r\n              case 0 { revert(free_mem_ptr, returndatasize()) }\r\n              default { return(free_mem_ptr, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    receive () external payable {}\r\n\r\n    function claim (address receiver) external onlyOwner nonReentrant {\r\n        payable(receiver).transfer(address(this).balance);\r\n\r\n        emit Claim(receiver);\r\n    }\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is changed\r\n      */\r\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n      */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n   \r\n    /**\r\n      * @notice Emitted when claim eth in contract\r\n      */\r\n    event Claim(address receiver);\r\n}\r\n "
6     },
7     "contracts/veToken/VeTokenStorage.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProxyStorage {\r\n    /**\r\n    * @notice Active brains of VeTokenProxy\r\n    */\r\n    address public veTokenImplementation;\r\n\r\n    /**\r\n    * @notice Pending brains of VeTokenProxy\r\n    */\r\n    address public pendingVeTokenImplementation;\r\n}\r\n\r\ncontract VeTokenStorage is  ProxyStorage {\r\n    address public token;  // token\r\n    uint256 public supply; // veToken\r\n\r\n    // veToken related\r\n    string public name;\r\n    string public symbol;\r\n    string public version;\r\n    uint256 constant decimals = 18;\r\n\r\n    // score related\r\n    uint256 public scorePerBlk;\r\n    uint256 public totalStaked;\r\n\r\n    mapping (address => UserInfo) internal userInfo;\r\n    PoolInfo public poolInfo;\r\n    uint256 public startBlk;  // start Blk\r\n    uint256 public clearBlk;  // set annually\r\n    \r\n    // User variables\r\n    struct UserInfo {\r\n        uint256 amount;        // How many tokens the user has provided.\r\n        uint256 score;         // score exclude pending amount\r\n        uint256 scoreDebt;     // score debt\r\n        uint256 lastUpdateBlk; // last user's tx Blk\r\n    }\r\n\r\n    // Pool variables\r\n    struct PoolInfo {      \r\n        uint256 lastUpdateBlk;     // Last block number that score distribution occurs.\r\n        uint256 accScorePerToken;   // Accumulated socres per token, times 1e12. \r\n    }\r\n\r\n    address public smartWalletChecker;\r\n}\r\n"
9     },
10     "contracts/veToken/AccessControl.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"./Sig.sol\";\n\ncontract AccessControl is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    // event ContractUpgrade(address newContract);\n    event SetProxy(address proxy);\n    event AdminTransferred(address oldAdmin, address newAdmin);\n    event FlipStakableState(bool stakeIsActive);\n    event FlipClaimableState(bool claimIsActive);\n    event TransferAdmin(address oldAdmin, address newAdmin);\n\n    address private _admin;\n    address public proxy;\n    bool public stakeIsActive = true;\n    bool public claimIsActive = true;\n\n    address public constant ZERO_ADDRESS = address(0);\n\n    constructor() {\n        _setAdmin(_msgSender());\n    }\n\n    // function verified(bytes32 hash, bytes memory signature) public view returns (bool){\n    //     return admin() == Sig.recover(hash, signature);\n    // }\n\n    /**\n     * @dev Returns the address of the current admin.\n     */\n    function admin() public view virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the admin.\n     */\n    modifier onlyAdmin() {\n        require(admin() == _msgSender(), \"Invalid Admin: caller is not the admin\");\n        _;\n    }\n\n    function _setAdmin(address newAdmin) private {\n        address oldAdmin = _admin;\n        _admin = newAdmin;\n        emit AdminTransferred(oldAdmin, newAdmin);\n    }\n\n    function setProxy(address _proxy) external onlyOwner {\n        require(_proxy != address(0), \"Invalid Address\");\n        proxy = _proxy;\n\n        emit SetProxy(_proxy);\n    }\n\n    modifier onlyProxy() {\n        require(proxy == _msgSender(), \"Not Permit: caller is not the proxy\"); \n        _;\n    }\n\n    // modifier sigVerified(bytes memory signature) {\n    //     require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n    //     _;\n    // }\n\n    modifier activeStake() {\n        require(stakeIsActive, \"Unstakable\");\n        _;\n    } \n\n    modifier activeClaim() {\n        require(claimIsActive, \"Unclaimable\");\n        _;\n    } \n    \n    modifier notZeroAddr(address addr_) {\n        require(addr_ != ZERO_ADDRESS, \"Zero address\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\n     * Can only be called by the current admin.\n     */\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\n        require(newAdmin != address(0), \"Invalid Admin: new admin is the zero address\");\n        address oldAdmin = admin();\n        _setAdmin(newAdmin);\n\n        emit TransferAdmin(oldAdmin, newAdmin);\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipStakableState() external onlyOwner {\n        stakeIsActive = !stakeIsActive;\n\n        emit FlipStakableState(stakeIsActive);\n    }\n\n    function flipClaimableState() external onlyOwner {\n        claimIsActive = !claimIsActive;\n\n        emit FlipClaimableState(claimIsActive);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "metadata": {
44       "useLiteralContent": true
45     },
46     "libraries": {}
47   }
48 }}