1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/erc721a/contracts/IERC721A.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n"
6     },
7     "lib/erc721a/contracts/extensions/IERC721AQueryable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '../IERC721A.sol';\r\n\r\n/**\r\n * @dev Interface of ERC721AQueryable.\r\n */\r\ninterface IERC721AQueryable is IERC721A {\r\n    /**\r\n     * Invalid query range (`start` >= `stop`).\r\n     */\r\n    error InvalidQueryRange();\r\n\r\n    /**\r\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\r\n     *\r\n     * If the `tokenId` is out of bounds:\r\n     *\r\n     * - `addr = address(0)`\r\n     * - `startTimestamp = 0`\r\n     * - `burned = false`\r\n     * - `extraData = 0`\r\n     *\r\n     * If the `tokenId` is burned:\r\n     *\r\n     * - `addr = <Address of owner before token was burned>`\r\n     * - `startTimestamp = <Timestamp when token was burned>`\r\n     * - `burned = true`\r\n     * - `extraData = <Extra data when token was burned>`\r\n     *\r\n     * Otherwise:\r\n     *\r\n     * - `addr = <Address of owner>`\r\n     * - `startTimestamp = <Timestamp of start of ownership>`\r\n     * - `burned = false`\r\n     * - `extraData = <Extra data at start of ownership>`\r\n     */\r\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\r\n\r\n    /**\r\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\r\n     * See {ERC721AQueryable-explicitOwnershipOf}\r\n     */\r\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`,\r\n     * in the range [`start`, `stop`)\r\n     * (i.e. `start <= tokenId < stop`).\r\n     *\r\n     * This function allows for tokens to be queried if the collection\r\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `start < stop`\r\n     */\r\n    function tokensOfOwnerIn(\r\n        address owner,\r\n        uint256 start,\r\n        uint256 stop\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`.\r\n     *\r\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\r\n     * It is meant to be called off-chain.\r\n     *\r\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\r\n     * multiple smaller scans if the collection is large enough to cause\r\n     * an out-of-gas error (10K collections should be fine).\r\n     */\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n}\r\n"
9     },
10     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
12     },
13     "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/IERC20.sol\";\r\n"
15     },
16     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
18     },
19     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
20       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n"
21     },
22     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
27     },
28     "src/interfaces/IFewl.sol": {
29       "content": "// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ninterface IFewl is IERC20 {\r\n\r\n    function mint(address to, uint256 amount) external;\r\n    function burn(address from, uint256 amount) external;\r\n}"
30     },
31     "src/interfaces/IMetaFlyers.sol": {
32       "content": "// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IMetaFlyers {\r\n\r\n    // store lock meta data\r\n    struct Locked {\r\n        uint64 tokenId;\r\n        uint64 lockTimestamp;\r\n        uint128 claimedAmount;\r\n    }\r\n    \r\n    function totalMinted() external returns (uint16);\r\n    function totalLocked() external returns (uint16);\r\n    function getLock(uint256 tokenId) external view returns (Locked memory);\r\n    function isLocked(uint256 tokenId) external view returns(bool);\r\n    \r\n    function mint(address recipient, uint16 qty) external; // onlyAdmin\r\n    function burn(uint256 tokenId) external; // onlyAdmin\r\n    function lock( uint256 tokenId, address user) external; // onlyAdmin\r\n    function unlock(uint256 tokenId, address user) external; // onlyAdmin\r\n    function refreshLock(uint256 tokenId, uint256 amount) external; // onlyAdmin\r\n    \r\n}"
33     },
34     "src/mfMain.sol": {
35       "content": "// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../lib/erc721a/contracts/extensions/IERC721AQueryable.sol\";\r\nimport \"./interfaces/IMetaFlyers.sol\";\r\nimport \"./interfaces/IFewl.sol\";\r\n\r\n\r\ncontract mfMain is Ownable, Pausable, ReentrancyGuard {\r\n\r\n    // CONTRACTS \r\n    IFewl public fewlContract;\r\n    IMetaFlyers public mfContract;\r\n\r\n    constructor(address _mfContract, address _fewlContract){\r\n        mfContract = IMetaFlyers(_mfContract);\r\n        fewlContract = IFewl(_fewlContract);\r\n        _pause();\r\n    }    \r\n\r\n    // EVENTS \r\n    event MetaFlyersMinted(address indexed owner, uint16[] tokenIds);\r\n    event MetaFlyersLocked(address indexed owner, uint256[] tokenIds);\r\n    event MetaFlyersClaimed(address indexed owner, uint256[] tokenIds);\r\n\r\n    // ERRORS\r\n    error InvalidAmount();\r\n    error InvalidOwner();\r\n    error MintingNotActive();\r\n    error LockingInactive();\r\n    error NotWhitelisted();\r\n    error MaxAllowedPreSaleMints();    \r\n    error MaxAllowedPublicSaleMints();\r\n\r\n    // PUBLIC VARS \r\n    uint256 public MINT_PRICE = 0.047 ether;\r\n    uint256 public DAILY_BASE_FEWL_RATE = 5 ether;\r\n    uint256 public DAILY_TIER1_FEWL_RATE = 10 ether;\r\n    uint256 public DAILY_TIER2_FEWL_RATE = 20 ether;\r\n    uint256 public BONUS_FEWL_AMOUNT = 200 ether;\r\n\r\n    // Time that must pass before a Locked Nft can receive bonus FEWL amount\r\n    uint256 public MINIMUM_DAYS_TO_BONUS = 14 days;       \r\n\r\n    bool public PRE_SALE_STARTED;\r\n    bool public PUBLIC_SALE_STARTED;\r\n    bool public LOCKING_STARTED;\r\n    bool public TIER_EMISSIONS_STARTED;\r\n\r\n    uint16 public MAX_PRE_SALE_MINTS = 5;   \r\n    uint16 public MAX_PUBLIC_SALE_MINTS = 10;\r\n\r\n    address public withdrawAddress;\r\n    \r\n\r\n    // PRIVATE VARS \r\n    mapping(address => bool) private _admins;\r\n    mapping(address => uint8) private _publicSaleMints;\r\n    mapping(uint256 => bool) private _tier1Tokens;\r\n    mapping(uint256 => bool) private _tier2Tokens;\r\n    mapping(address => bool) private _preSaleAddresses;\r\n    mapping(address => uint8) private _preSaleMints;\r\n\r\n\r\n    function mint(uint8 amount, bool lock) external payable whenNotPaused nonReentrant {\r\n        if(!PRE_SALE_STARTED && !PUBLIC_SALE_STARTED) revert MintingNotActive();\r\n\r\n        if (PRE_SALE_STARTED) {\r\n            if(!_preSaleAddresses[_msgSender()]) revert NotWhitelisted();\r\n            if(_preSaleMints[_msgSender()] + amount > MAX_PRE_SALE_MINTS) revert MaxAllowedPreSaleMints();\r\n        } else {\r\n            if(_publicSaleMints[_msgSender()] + amount > MAX_PUBLIC_SALE_MINTS) revert MaxAllowedPublicSaleMints();\r\n        }\r\n        //check for adequate value sent\r\n        if (PRE_SALE_STARTED && _preSaleMints[_msgSender()] == 0){\r\n            if(msg.value < (amount - 1) * MINT_PRICE) revert InvalidAmount();\r\n        }\r\n        else if(msg.value < amount * MINT_PRICE) revert InvalidAmount();\r\n        \r\n\r\n        if (PRE_SALE_STARTED) _preSaleMints[_msgSender()] += amount;\r\n        else _publicSaleMints[_msgSender()] += amount;\r\n\r\n        mfContract.mint(_msgSender(), amount);\r\n\r\n        if(lock){\r\n           uint256[] memory tokens = IERC721AQueryable(address(mfContract)).tokensOfOwner(_msgSender());\r\n           for(uint16 i = 0; i < tokens.length; i++) {\r\n            if(!mfContract.isLocked(tokens[i])){\r\n                 mfContract.lock(tokens[i], _msgSender());\r\n            }\r\n           }\r\n        }\r\n    }\r\n\r\n    function lockMetaFlyers(uint256[] memory tokenIds) external whenNotPaused nonReentrant {\r\n        if(!LOCKING_STARTED) revert LockingInactive();\r\n\r\n        for(uint16 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            \r\n            if(IERC721AQueryable(address(mfContract)).ownerOf(tokenId) != _msgSender()) revert InvalidOwner();\r\n            // lock MetaFlyer\r\n            //reverts if nft is already locked\r\n            mfContract.lock(tokenId, _msgSender());\r\n        }\r\n\r\n        emit MetaFlyersLocked(_msgSender(), tokenIds);\r\n    }\r\n\r\n    function claimMetaFlyers(uint256[] memory tokenIds, bool unlock) public whenNotPaused nonReentrant {\r\n        uint256 stakingRewards;\r\n        uint256 mintAmount;\r\n        for(uint16 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if(IERC721AQueryable(address(mfContract)).ownerOf(tokenId) != _msgSender()) revert InvalidOwner();\r\n\r\n            // pay out rewards\r\n            stakingRewards = calculateLockingRewards(tokenId);\r\n            mintAmount += stakingRewards;\r\n            // unlock if the owner wishes to\r\n            if (unlock) mfContract.unlock(tokenId, _msgSender());\r\n            else mfContract.refreshLock(tokenId, stakingRewards);            \r\n        }\r\n\r\n        //mint claimed amount\r\n        fewlContract.mint(_msgSender(), mintAmount);        \r\n\r\n        emit MetaFlyersClaimed(_msgSender(), tokenIds);\r\n    }\r\n\r\n    function calculateAllLockingRewards(uint256[] memory tokenIds) public view returns(uint256 rewards) {\r\n        for(uint16 i = 0; i < tokenIds.length; i++) {\r\n            rewards += calculateLockingRewards(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function calculateLockingRewards(uint256 tokenId) public view returns(uint256 rewards) {\r\n        //reverts if not locked\r\n        IMetaFlyers.Locked memory myStake = mfContract.getLock(tokenId);\r\n        uint256 lockDuration = block.timestamp - myStake.lockTimestamp;\r\n        uint256 fewlRate = DAILY_BASE_FEWL_RATE;\r\n        \r\n        //calculate proper bonus rewards based on time locked\r\n        rewards = lockDuration / MINIMUM_DAYS_TO_BONUS * BONUS_FEWL_AMOUNT;        \r\n\r\n        //calculate tier emission rate\r\n        if(TIER_EMISSIONS_STARTED){\r\n            if(_tier1Tokens[tokenId]) fewlRate = DAILY_TIER1_FEWL_RATE;                \r\n            if(_tier2Tokens[tokenId]) fewlRate = DAILY_TIER2_FEWL_RATE;                      \r\n        } \r\n\r\n        //if tier emissions have not started all nfts get base rate\r\n        rewards += lockDuration * fewlRate / 1 days;        \r\n\r\n        if(rewards > myStake.claimedAmount){\r\n            rewards -= myStake.claimedAmount;\r\n        } else rewards = 0;               \r\n        \r\n    }\r\n\r\n    function getPreSaleAddress(address user) external view returns (bool){\r\n        return _preSaleAddresses[user];\r\n    }\r\n\r\n    function getPreSaleMints(address user) external view returns (uint256) {\r\n        return _preSaleMints[user];\r\n    }\r\n\r\n    function getPublicSaleSaleMints(address user) external view returns (uint256) {\r\n        return _publicSaleMints[user];\r\n    }\r\n\r\n    // OWNER ONLY FUNCTIONS \r\n    function setContracts(address _mfContract, address _fewlContract) external onlyOwner {\r\n        mfContract = IMetaFlyers(_mfContract);\r\n        fewlContract = IFewl(_fewlContract);\r\n    }\r\n\r\n    function mintForTeam(address receiver, uint16 amount) external whenNotPaused onlyOwner {        \r\n        mfContract.mint(receiver, amount);        \r\n    }\r\n\r\n    function addToPresale(address[] memory addresses) external onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            _preSaleAddresses[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(withdrawAddress != address(0x00), \"Withdraw address not set\");\r\n        require(_msgSender() == withdrawAddress, \"Withdraw address only\");\r\n        uint256 totalAmount = address(this).balance;\r\n        bool sent;\r\n\r\n        (sent, ) = withdrawAddress.call{value: totalAmount}(\"\");\r\n        require(sent, \"Main: Failed to send funds\");\r\n\r\n    }\r\n\r\n    function setWithdrawAddress(address addr) external onlyOwner {\r\n        withdrawAddress = addr;\r\n    }\r\n\r\n    function setPreSaleStarted(bool started) external onlyOwner {\r\n        PRE_SALE_STARTED = started;\r\n        if (PRE_SALE_STARTED) PUBLIC_SALE_STARTED = false;\r\n    }\r\n\r\n    function setPublicSaleStarted(bool started) external onlyOwner {\r\n        PUBLIC_SALE_STARTED = started;\r\n        if (PUBLIC_SALE_STARTED) PRE_SALE_STARTED = false;\r\n    }\r\n\r\n    function setLockingStarted(bool started) external onlyOwner {\r\n        LOCKING_STARTED = started;\r\n    }\r\n\r\n    function setTierEmissionStarted(bool started) external onlyOwner {\r\n        TIER_EMISSIONS_STARTED = started;\r\n    }\r\n\r\n    function setMintPrice(uint256 number) external onlyOwner {\r\n        MINT_PRICE = number;\r\n    }\r\n\r\n    function setMaxPublicSaleMints(uint16 number) external onlyOwner {\r\n        MAX_PUBLIC_SALE_MINTS = number;\r\n    }\r\n\r\n    function setMaxPreSaleMints(uint16 number) external onlyOwner {\r\n        MAX_PRE_SALE_MINTS = number;\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        if (_paused) _pause();\r\n        else _unpause();\r\n    }\r\n\r\n    function setDailyBaseFewlRate(uint256 number) external onlyOwner {\r\n        DAILY_BASE_FEWL_RATE = number;\r\n    }\r\n\r\n    function setDailyTier1FewlRate(uint256 number) external onlyOwner {\r\n        DAILY_TIER1_FEWL_RATE = number;\r\n    }\r\n\r\n    function setDailyTier2FewlRate(uint256 number) external onlyOwner {\r\n        DAILY_TIER2_FEWL_RATE = number;\r\n    }\r\n\r\n    //Base = Tier 0, Agents= Tier 1, 1/1= Tier2\r\n    function addTokensToTier(uint256[] memory tokenIds, uint8 tier) external onlyOwner {\r\n        require(tier==1 || tier==2, \"Tier must be 1 or 2\");\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            if (tier==1) _tier1Tokens[tokenIds[i]] = true;\r\n                else _tier2Tokens[tokenIds[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setBonusFewlAmount(uint256 amount) external onlyOwner {\r\n        BONUS_FEWL_AMOUNT = amount;\r\n    }\r\n\r\n    function setMinimumDaysToBonus(uint256 number) external onlyOwner {\r\n        MINIMUM_DAYS_TO_BONUS = number;\r\n    }\r\n\r\n}"
36     }
37   },
38   "settings": {
39     "remappings": [
40       "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
41       "ds-test/=lib/forge-std/lib/ds-test/src/",
42       "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
43       "erc721a/=lib/erc721a/contracts/",
44       "forge-std/=lib/forge-std/src/",
45       "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
46       "solmate/=lib/solmate/src/"
47     ],
48     "optimizer": {
49       "enabled": true,
50       "runs": 200
51     },
52     "metadata": {
53       "bytecodeHash": "ipfs"
54     },
55     "outputSelection": {
56       "*": {
57         "*": [
58           "evm.bytecode",
59           "evm.deployedBytecode",
60           "devdoc",
61           "userdoc",
62           "metadata",
63           "abi"
64         ]
65       }
66     },
67     "evmVersion": "london",
68     "libraries": {}
69   }
70 }}