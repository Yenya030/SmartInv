1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/WebaverseGenesisPass.sol": {
5       "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./IWebaverseLand.sol\";\n\n/**\n *\n * @dev Inheritance details:\n *      ERC721            ERC721 token standard, imported from openzeppelin\n *      Pausable          Allows functions to be Paused, note that this contract includes the metadrop\n *                        time-limited pause, where the contract can only be paused for a defined time period.\n *                        Imported from openzeppelin.\n *      Ownable           Allow priviledged access to certain functions. Imported from openzeppelin.\n *      ERC721Burnable    Helper library for convenient burning of ERC721s. Imported from openzeppelin.\n *      VRFConsumerBaseV2   Chainlink RNG contract. Imported from chainlink.\n *\n */\ncontract WebaverseGenesisPass is\n  ERC721,\n  Pausable,\n  Ownable,\n  ERC721Burnable,\n  VRFConsumerBaseV2\n{\n  using SafeERC20 for IERC20;\n  using Strings for uint256;\n\n  /**\n   * @dev Chainlink config.\n   */\n  VRFCoordinatorV2Interface vrfCoordinator;\n  uint64 vrfSubscriptionId;\n  // The gas lane to use, which specifies the maximum gas price to bump to.\n  // For a list of available gas lanes on each network,\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\n  bytes32 vrfKeyHash;\n  // Depends on the number of requested values that you want sent to the\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n  // so 100,000 is a safe default for this example contract. Test and adjust\n  // this limit based on the network that you select, the size of the request,\n  // and the processing of the callback request in the fulfillRandomWords()\n  // function.\n  uint32 vrfCallbackGasLimit = 150000;\n  // The default is 3, but you can set this higher.\n  uint16 vrfRequestConfirmations = 3;\n  // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\n  uint32 vrfNumWords = 1;\n\n  uint256 public immutable maxSupply;\n  uint256 public immutable numberOfCommunities;\n  uint256 public immutable mintPrice;\n  uint256 public immutable maxCommunityWhitelistLength;\n  uint256 public immutable whitelistMintStart;\n  uint256 public immutable whitelistMintEnd;\n  address payable public immutable beneficiaryAddress;\n\n  string private _tokenBaseURI;\n  string public placeholderTokenURI;\n\n  uint256 public communityRandomness;\n\n  uint256 private _royaltyPercentageBasisPoints;\n\n  uint256 public tokenIdCounter;\n\n  uint256 public burnCounter;\n\n  // Slot size (32 + 160 + 8 + 8 + 8 = 216)\n  // ERC-2981: NFT Royalty Standard\n  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n  address private _royaltyReceipientAddress;\n  bool public tokenBaseURILocked;\n  bool public listsLocked;\n  bool public webaverseLandAddressLocked;\n  bool public placeholderTokenURILocked;\n\n  // Claim whitelist merkle root - for auction\n  // hash(quantity, address)\n  bytes32 public claimWhitelistMerkleRoot;\n  mapping(address => bool) private _claimHasMinted;\n\n  // Treasury whitelist merkle root - for metadrop & webaverse treasury\n  // hash(quantity, address)\n  bytes32 public treasuryWhitelistMerkleRoot;\n  mapping(address => uint256) private _treasuryAllocationMinted;\n\n  // Direct whitelist merkle root\n  // hash(position, address)\n  bytes32 public directWhitelistMerkleRoot;\n\n  // Community whitelist merkle root\n  // hash(community, position, address)\n  bytes32 public communityWhitelistMerkleRoot;\n  // Community ID => Community whitelist merkle length\n  mapping(uint256 => uint256) public communityWhitelistLengths;\n\n  // Completion whitelist merkle root\n  // hash(quantity, address, unitPrice)\n  bytes32 public completionWhitelistMerkleRoot;\n  mapping(address => uint256) private _completionAllocationMinted;\n\n  uint256 public pauseCutoffDays;\n\n  // Single bool for first stage mint (direct and community) - each\n  // address can only mint once, regardless of multiple eligibility:\n  mapping(address => bool) private _firstStageAddressHasMinted;\n\n  // Webaverse Land contract address:\n  address public webaverseLandAddress;\n\n  /**\n   *\n   * @dev constructor: Must be passed following addresses:\n   *                   * chainlink VRF address and Link token address\n   *\n   */\n  constructor(\n    // configIntegers array must contain the following:\n    // [0]: numberOfCommunities (e.g. 7)\n    // [1]: maxCommunityWhitlistLength (how many slots are open per community, beyond which we 'lottery' using a randon start position)\n    // [2]: whitelistMintStart (timestamp of when the stage 1 mint will start)\n    // [3]: pauseCutoffDays (when the ability to pause this contract expires)\n    uint256[] memory configIntegers_,\n    uint256 maxSupply_,\n    uint256 mintPrice_,\n    address royaltyReceipientAddress_,\n    uint256 royaltyPercentageBasisPoints_,\n    address vrfCoordinator_,\n    bytes32 vrfKeyHash_,\n    address payable beneficiaryAddress_\n  )\n    ERC721(\"Webaverse Genesis Pass\", \"WEBA\")\n    VRFConsumerBaseV2(vrfCoordinator_)\n  {\n    numberOfCommunities = configIntegers_[0];\n    maxCommunityWhitelistLength = configIntegers_[1];\n    whitelistMintStart = configIntegers_[2];\n    pauseCutoffDays = configIntegers_[3];\n    whitelistMintEnd = whitelistMintStart + 2 days;\n\n    maxSupply = maxSupply_;\n    mintPrice = mintPrice_;\n    _royaltyReceipientAddress = royaltyReceipientAddress_;\n    _royaltyPercentageBasisPoints = royaltyPercentageBasisPoints_;\n    vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator_);\n    vrfKeyHash = vrfKeyHash_;\n    beneficiaryAddress = beneficiaryAddress_;\n  }\n\n  /**\n   *\n   * @dev WebaverseVotes: Emit the votes cast with this mint to be tallied off-chain.\n   *\n   */\n  event WebaverseVotes(address voter, uint256 quantityMinted, uint256[] votes);\n\n  /**\n   *\n   * @dev Only allow when stage 1 whitelist minting is open:\n   *\n   */\n  modifier whenStage1MintingOpen() {\n    require(stage1MintingOpen(), \"Stage 1 mint closed\");\n    require(communityRandomness != 0, \"Community randomness not set\");\n    _;\n  }\n\n  /**\n   *\n   * @dev whenListsUnlocked: restrict access to when the lists are unlocked.\n   * This allows the owner to effectively end new minting, with eligibility\n   * fixed to the details on the merkle roots (and associated lists) already\n   * saved in storage\n   *\n   */\n  modifier whenListsUnlocked() {\n    require(!listsLocked, \"Lists locked\");\n    _;\n  }\n\n  /**\n   *\n   * @dev whenLandAddressUnlocked: the webaverse land address cannot be\n   * updated after it has been locked\n   *\n   */\n  modifier whenLandAddressUnlocked() {\n    require(!webaverseLandAddressLocked, \"Land address locked\");\n    _;\n  }\n\n  /**\n   *\n   * @dev whenPlaceholderURIUnlocked: the placeholder URI cannot be\n   * updated after it has been locked\n   *\n   */\n  modifier whenPlaceholderURIUnlocked() {\n    require(!placeholderTokenURILocked, \"Place holder URI locked\");\n    _;\n  }\n\n  /**\n   *\n   * @dev whenSupplyRemaining: Supply is controlled by lists and cannot be exceeded, but as\n   * an explicity and clear control we check here that the mint operation requested will not\n   * exceed the max supply.\n   *\n   */\n  modifier whenSupplyRemaining(uint256 quantity_) {\n    require((tokenIdCounter + quantity_) <= maxSupply, \"Max supply exceeded\");\n    _;\n  }\n\n  /**\n   *\n   * @dev stage1MintingOpen: View of whether stage 1 mint is open\n   *\n   */\n  function stage1MintingOpen() public view returns (bool) {\n    return\n      block.timestamp > (whitelistMintStart - 1) &&\n      block.timestamp < (whitelistMintEnd + 1);\n  }\n\n  /**\n   *\n   * @dev isStage1MintingEnded: View of whether stage 1 mint is ended\n   *\n   */\n  function stage1MintingEnded() public view returns (bool) {\n    return block.timestamp > whitelistMintEnd;\n  }\n\n  /**\n   * totalSupply is the number of tokens minted (value tokenIdCounter, as this is 0\n   * indexed by always set to the next ID it will issue) minus burned\n   */\n  function totalSupply() public view returns (uint256) {\n    return tokenIdCounter - burnCounter;\n  }\n\n  /**\n   *\n   * @dev getRandomNumber: Requests randomness.\n   *\n   */\n  function getRandomNumber() public onlyOwner returns (uint256) {\n    require(communityWhitelistMerkleRoot != 0, \"Community list not set\");\n    require(communityRandomness == 0, \"Randomness set\");\n    return\n      vrfCoordinator.requestRandomWords(\n        vrfKeyHash,\n        vrfSubscriptionId,\n        vrfRequestConfirmations,\n        vrfCallbackGasLimit,\n        vrfNumWords\n      );\n  }\n\n  /**\n   *\n   * @dev fulfillRandomWords: Callback function used by VRF Coordinator.\n   * This function is used to generate random values used in community & claim minting\n   *\n   */\n  function fulfillRandomWords(uint256, uint256[] memory randomWords_)\n    internal\n    override\n  {\n    require(communityRandomness == 0, \"Randomness set\");\n    communityRandomness = randomWords_[0];\n  }\n\n  /**\n   *\n   * @dev setVRFSubscriptionId: Set the chainlink subscription id.\n   *\n   */\n  function setVRFSubscriptionId(uint64 vrfSubscriptionId_) external onlyOwner {\n    vrfSubscriptionId = vrfSubscriptionId_;\n  }\n\n  /**\n   *\n   * @dev withdrawContractBalance: A withdraw function to allow ETH balance to be withdrawn to the beneficiary address\n   * set in the constructor\n   *\n   */\n  function withdrawContractBalance() external onlyOwner {\n    (bool success, ) = beneficiaryAddress.call{value: address(this).balance}(\n      \"\"\n    );\n    require(success, \"Transfer failed\");\n  }\n\n  /**\n   *\n   * @dev receive: Handles receiving ether to the contract. Reject all direct payments to the contract except from beneficiary and owner.\n   * set in the constructor\n   *\n   */\n  receive() external payable {\n    require(msg.value > 0, \"No ETH\");\n    require(\n      msg.sender == beneficiaryAddress || msg.sender == owner(),\n      \"Only owner or beneficiary\"\n    );\n  }\n\n  /**\n   *\n   * @dev transferERC20Token: A withdraw function to avoid locking ERC20 tokens in the contract forever.\n   * Tokens can only be withdrawn by the owner, to the owner.\n   *\n   */\n  function transferERC20Token(IERC20 token, uint256 amount) public onlyOwner {\n    token.safeTransfer(owner(), amount);\n  }\n\n  /**\n   *\n   * @dev pause: Allow owner to pause.\n   *\n   */\n  function pause() public onlyOwner {\n    require(\n      whitelistMintStart == 0 ||\n        block.timestamp < (whitelistMintStart + pauseCutoffDays * 1 days),\n      \"Pause cutoff passed\"\n    );\n    _pause();\n  }\n\n  /**\n   *\n   * @dev unpause: Allow owner to unpause.\n   *\n   */\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  /**\n   *\n   * @dev lockLists: Prevent any further changes to list merkle roots.\n   *\n   */\n  function lockLists() public onlyOwner {\n    listsLocked = true;\n  }\n\n  /**\n   *\n   * @dev lockLandAddress: Prevent any further changes to the webaverse land contract address.\n   *\n   */\n  function lockLandAddress() public onlyOwner {\n    webaverseLandAddressLocked = true;\n  }\n\n  /**\n   *\n   * @dev setLandAddress: Set the root for the auction claims.\n   *\n   */\n  function setLandAddress(address webaverseLandAddress_)\n    external\n    onlyOwner\n    whenLandAddressUnlocked\n  {\n    webaverseLandAddress = webaverseLandAddress_;\n  }\n\n  /**\n   *\n   * @dev lockPlaceholderTokenURI: Prevent any further changes to the placeholder URI.\n   *\n   */\n  function lockPlaceholderTokenURI() public onlyOwner {\n    placeholderTokenURILocked = true;\n  }\n\n  /**\n   *\n   * @dev setPlaceholderTokenURI: Set the string for the placeholder\n   * token URI.\n   *\n   */\n  function setPlaceholderTokenURI(string memory placeholderTokenURI_)\n    external\n    onlyOwner\n    whenPlaceholderURIUnlocked\n  {\n    placeholderTokenURI = placeholderTokenURI_;\n  }\n\n  /**\n   *\n   * @dev setDirectWhitelist: Set the initial data for the direct list mint.\n   *\n   */\n  function setDirectWhitelist(bytes32 directWhitelistMerkleRoot_)\n    external\n    whenListsUnlocked\n    onlyOwner\n  {\n    directWhitelistMerkleRoot = directWhitelistMerkleRoot_;\n  }\n\n  /**\n   *\n   * @dev setCommunityWhitelist: Set the initial data for the community mint.\n   *\n   */\n  function setCommunityWhitelist(\n    uint256[] calldata communityWhitelistLengths_,\n    bytes32 communityWhitelistMerkleRoot_\n  ) external whenListsUnlocked onlyOwner {\n    require(\n      communityWhitelistLengths_.length == numberOfCommunities,\n      \"Community length doesnt match\"\n    );\n\n    communityWhitelistMerkleRoot = communityWhitelistMerkleRoot_;\n\n    for (\n      uint256 communityId = 0;\n      communityId < numberOfCommunities;\n      communityId++\n    ) {\n      communityWhitelistLengths[communityId] = communityWhitelistLengths_[\n        communityId\n      ];\n    }\n  }\n\n  /**\n   *\n   * @dev setClaimWhitelistMerkleRoot: Set the root for the auction claims.\n   *\n   */\n  function setClaimWhitelistMerkleRoot(bytes32 claimWhitelistMerkleRoot_)\n    external\n    whenListsUnlocked\n    onlyOwner\n  {\n    claimWhitelistMerkleRoot = claimWhitelistMerkleRoot_;\n  }\n\n  /**\n   *\n   * @dev setTreasuryWhitelistMerkleRoot: Set the root for the treasury claims (metadrop + webaverse allocations).\n   *\n   */\n  function setTreasuryWhitelistMerkleRoot(bytes32 treasuryWhitelistMerkleRoot_)\n    external\n    whenListsUnlocked\n    onlyOwner\n  {\n    treasuryWhitelistMerkleRoot = treasuryWhitelistMerkleRoot_;\n  }\n\n  /**\n   *\n   * @dev setCompletionWhitelistMerkleRoot: Set the root for completion mints.\n   *\n   */\n  function setCompletionWhitelistMerkleRoot(\n    bytes32 completionWhitelistMerkleRoot_\n  ) external whenListsUnlocked onlyOwner {\n    completionWhitelistMerkleRoot = completionWhitelistMerkleRoot_;\n  }\n\n  /**\n   *\n   * @dev _getCommunityHash: Get hash of information for the community mint.\n   *\n   */\n  function _getCommunityHash(\n    uint256 community_,\n    uint256 position_,\n    address minter_\n  ) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(community_, position_, minter_));\n  }\n\n  /**\n   *\n   * @dev _getDirectHash: Get hash of information for mints for direct list.\n   *\n   */\n  function _getDirectHash(address minter_) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(minter_));\n  }\n\n  /**\n   *\n   * @dev _getClaimAndTreasuryHash: Get hash of information for mints from the auction (claims).\n   * Also the same hash format as the treasury whitelist, used for treasuryWhitelistMerkleRoot too\n   *\n   */\n  function _getClaimAndTreasuryHash(uint256 quantity_, address minter_)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encodePacked(quantity_, minter_));\n  }\n\n  /**\n   *\n   * @dev _getCompletionHash: Get hash of information for mints from the auction (claims).\n   * Also the same hash format as the treasury whitelist, used for treasuryWhitelistMerkleRoot too\n   *\n   */\n  function _getCompletionHash(\n    uint256 quantity_,\n    address minter_,\n    uint256 unitPrice_\n  ) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(quantity_, minter_, unitPrice_));\n  }\n\n  /**\n   *\n   * @dev isValidPosition: Check is this is a valid position for this community allowlist. There are\n   * 1,000 positions per community. If more than 1,000 have registered a random start position in the\n   * allowlist is used to determine eligibility.\n   *\n   */\n  function isValidPosition(uint256 position_, uint256 community_)\n    internal\n    view\n    returns (bool)\n  {\n    uint256 communityWhitelistLength = communityWhitelistLengths[community_];\n    require(communityWhitelistLength > 0, \"Length not set\");\n\n    if (communityWhitelistLength > maxCommunityWhitelistLength) {\n      // Find the random starting point somewhere in the whitelist length array\n      uint256 startPoint = communityRandomness % communityWhitelistLength;\n      uint256 endPoint = startPoint + maxCommunityWhitelistLength;\n      // If the valid range exceeds the length of the whitelist, it must roll over\n      if (endPoint > communityWhitelistLength) {\n        return\n          position_ >= startPoint ||\n          position_ < endPoint - communityWhitelistLength;\n      } else {\n        return position_ >= startPoint && position_ < endPoint;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   *\n   * @dev _checkTheVote: check the count of votes = the quantity minted:\n   *\n   */\n  function _checkTheVote(uint256[] memory votesToCount_, uint256 quantity_)\n    internal\n    view\n  {\n    // (1) Check that we have been passed the right number of community votes in the array:\n    require(\n      votesToCount_.length == numberOfCommunities,\n      \"Vote array does not match community count\"\n    );\n\n    // (2) Check that the total votes matches the mint quantity:\n    uint256 totalVotes;\n    for (uint256 i = 0; i < votesToCount_.length; i++) {\n      totalVotes += votesToCount_[i];\n    }\n    require(totalVotes == quantity_, \"Votes do not match minting quantity\");\n  }\n\n  /**\n   *\n   * @dev communityMint: Minting of community allocations from the allowlist.\n   *\n   */\n  function communityMint(\n    uint256 community_,\n    uint256 position_,\n    bytes32[] calldata proof_,\n    uint256[] calldata votes_\n  ) external payable whenStage1MintingOpen whenSupplyRemaining(1) {\n    require(msg.value == mintPrice, \"Insufficient ETH passed\");\n\n    require(communityWhitelistMerkleRoot != 0, \"Community merkle root not set\");\n\n    // Check the total votes passed equals the minted quantity:\n    _checkTheVote(votes_, 1);\n\n    bytes32 leaf = _getCommunityHash(community_, position_, msg.sender);\n\n    require(\n      MerkleProof.verify(proof_, communityWhitelistMerkleRoot, leaf),\n      \"Community mint proof invalid\"\n    );\n\n    require(\n      isValidPosition(position_, community_),\n      \"This position has missed out\"\n    );\n\n    _performDirectAndCommunityMint(msg.sender, votes_);\n  }\n\n  /**\n   *\n   * @dev directMint:  Mint allocations from the webaverse direct allowlist\n   *\n   */\n  function directMint(bytes32[] calldata proof_, uint256[] calldata votes_)\n    external\n    payable\n    whenStage1MintingOpen\n    whenSupplyRemaining(1)\n  {\n    require(msg.value == mintPrice, \"Insufficient ETH passed\");\n\n    require(directWhitelistMerkleRoot != 0, \"Direct merkle root not set\");\n\n    // Check the total votes passed equals the minted quantity:\n    _checkTheVote(votes_, 1);\n\n    bytes32 leaf = _getDirectHash(msg.sender);\n\n    require(\n      MerkleProof.verify(proof_, directWhitelistMerkleRoot, leaf),\n      \"Direct mint proof invalid\"\n    );\n\n    _performDirectAndCommunityMint(msg.sender, votes_);\n  }\n\n  /**\n   *\n   * @dev claimMint: Whitelist proof is generated from quantity and address\n   *\n   */\n  function claimMint(\n    uint256 quantityToMint_,\n    bytes32[] calldata proof_,\n    uint256[] calldata votes_\n  ) public whenSupplyRemaining(quantityToMint_) {\n    require(claimWhitelistMerkleRoot != 0, \"Mint merkle root not set\");\n\n    // Check the total votes passed equals the minted quantity:\n    _checkTheVote(votes_, quantityToMint_);\n\n    bytes32 leaf = _getClaimAndTreasuryHash(quantityToMint_, msg.sender);\n\n    require(\n      MerkleProof.verify(proof_, claimWhitelistMerkleRoot, leaf),\n      \"Claim mint proof invalid\"\n    );\n\n    require(!_claimHasMinted[msg.sender], \"Claim: Address has already minted\");\n\n    _claimHasMinted[msg.sender] = true;\n\n    _batchMint(msg.sender, quantityToMint_);\n\n    emit WebaverseVotes(msg.sender, quantityToMint_, votes_);\n  }\n\n  /**\n   *\n   * @dev treasuryMint: Mint function for metadrop & webaverse treasury + other parties\n   *\n   */\n  function treasuryMint(\n    uint256 quantityEligible_,\n    bytes32[] calldata proof_,\n    uint256 quantityToMint_\n  ) public whenSupplyRemaining(quantityToMint_) {\n    require(treasuryWhitelistMerkleRoot != 0, \"Mint merkle root not set\");\n\n    bytes32 leaf = _getClaimAndTreasuryHash(quantityEligible_, msg.sender);\n\n    require(\n      MerkleProof.verify(proof_, treasuryWhitelistMerkleRoot, leaf),\n      \"Treasury: mint proof invalid\"\n    );\n\n    require(\n      (_treasuryAllocationMinted[msg.sender] + quantityToMint_) <=\n        quantityEligible_,\n      \"Treasury: Requesting more than remaining allocation\"\n    );\n\n    _treasuryAllocationMinted[msg.sender] += quantityToMint_;\n\n    _batchMint(msg.sender, quantityToMint_);\n  }\n\n  /**\n   *\n   * @dev completionMint\n   *\n   */\n  function completionMint(\n    uint256 quantityEligible_,\n    bytes32[] calldata proof_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  ) public payable whenSupplyRemaining(quantityToMint_) {\n    require(\n      msg.value == (quantityToMint_ * unitPrice_),\n      \"Insufficient ETH passed\"\n    );\n\n    require(\n      completionWhitelistMerkleRoot != 0,\n      \"Completion merkle root not set\"\n    );\n\n    bytes32 leaf = _getCompletionHash(\n      quantityEligible_,\n      msg.sender,\n      unitPrice_\n    );\n\n    require(\n      MerkleProof.verify(proof_, completionWhitelistMerkleRoot, leaf),\n      \"Completion: mint proof invalid\"\n    );\n\n    require(\n      (_completionAllocationMinted[msg.sender] + quantityToMint_) <=\n        quantityEligible_,\n      \"Completion: Requesting more than remaining allocation\"\n    );\n\n    _completionAllocationMinted[msg.sender] += quantityToMint_;\n\n    _batchMint(msg.sender, quantityToMint_);\n  }\n\n  /**\n   *\n   * @dev _performDirectAndCommunityMint:  Unified processing for direct and community mint\n   *\n   */\n  function _performDirectAndCommunityMint(\n    address minter_,\n    uint256[] calldata votes_\n  ) internal {\n    require(\n      !_firstStageAddressHasMinted[minter_],\n      \"Community and Direct: Address has already minted\"\n    );\n\n    _firstStageAddressHasMinted[minter_] = true;\n\n    _safeMint(minter_, tokenIdCounter);\n    tokenIdCounter += 1;\n\n    emit WebaverseVotes(minter_, 1, votes_);\n  }\n\n  /**\n   *\n   * @dev _batchMint:  Unified processing for treasury, claim and completion mint\n   *\n   */\n  function _batchMint(address minter_, uint256 quantity_) internal {\n    uint256 tempTokenIdCounter = tokenIdCounter;\n    for (uint256 i = 0; i < quantity_; i++) {\n      _safeMint(minter_, tempTokenIdCounter);\n      tempTokenIdCounter += 1;\n    }\n    tokenIdCounter = tempTokenIdCounter;\n  }\n\n  /**\n   *\n   * @dev setRoyaltyPercentageBasisPoints: allow the owner to set the base royalty percentage.\n   *\n   */\n  function setRoyaltyPercentageBasisPoints(\n    uint256 royaltyPercentageBasisPoints_\n  ) external onlyOwner {\n    _royaltyPercentageBasisPoints = royaltyPercentageBasisPoints_;\n  }\n\n  /**\n   *\n   * @dev setRoyaltyReceipientAddress: Allow the owner to set the royalty recipient.\n   *\n   */\n  function setRoyaltyReceipientAddress(\n    address payable royaltyReceipientAddress_\n  ) external onlyOwner {\n    _royaltyReceipientAddress = royaltyReceipientAddress_;\n  }\n\n  /**\n   *\n   * @dev setTokenBaseURI: Allow the owner to set the base token URI\n   *\n   */\n  function setTokenBaseURI(string calldata tokenBaseURI_) external onlyOwner {\n    require(!tokenBaseURILocked, \"Token base URI is locked\");\n    _tokenBaseURI = tokenBaseURI_;\n  }\n\n  /**\n   *\n   * @dev lockTokenBaseURI: allow the owner to lock the base token URI, after which the URI cannot be altered.\n   *\n   */\n  function lockTokenBaseURI() external onlyOwner {\n    require(!tokenBaseURILocked, \"Token base URI is locked\");\n    tokenBaseURILocked = true;\n  }\n\n  /**\n   *\n   * @dev royaltyInfo: Returns recipent address and royalty.\n   *\n   */\n  function royaltyInfo(uint256, uint256 salePrice_)\n    external\n    view\n    returns (address receiver, uint256 royaltyAmount)\n  {\n    uint256 royalty = (salePrice_ * _royaltyPercentageBasisPoints) / 10000;\n    return (_royaltyReceipientAddress, royalty);\n  }\n\n  /**\n   *\n   * @dev _baseURI: returns the URI\n   *\n   */\n  function _baseURI() internal view override returns (string memory) {\n    return _tokenBaseURI;\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override\n    returns (string memory)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Metadata: URI query for nonexistent token\"\n    );\n\n    // If there is a land contract address set, use that address to retrieve the tokenURI:\n    if (webaverseLandAddress != address(0)) {\n      // Call the contract to return the token URI for this token ID:\n      return IWebaverseLand(webaverseLandAddress).uriForToken(tokenId);\n\n      // See if we have a token base URI set:\n    } else if (bytes(_tokenBaseURI).length != 0) {\n      // Return tokenBaseURI appended with the tokenId number:\n      return\n        string(abi.encodePacked(_tokenBaseURI, tokenId.toString(), \".json\"));\n\n      // If neither of the above, use the placeholder URI\n    } else {\n      // The placeholder URI is the same for all tokenIds:\n      return placeholderTokenURI;\n    }\n  }\n\n  /**\n   *\n   * @dev _beforeTokenTransfer: function called before tokens are transfered.\n   *\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC721) whenNotPaused {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n\n  /**\n   *\n   * @dev supportsInterface: ERC2981 interface support.\n   *\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    override(ERC721)\n    returns (bool)\n  {\n    return\n      interfaceId == _INTERFACE_ID_ERC2981 ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * ============================\n   * Web app eligibility getters:\n   * ============================\n   */\n\n  /**\n   *\n   * @dev eligibleForCommunityMint: Eligibility check for the COMMUNITY mint. This can be called from front-end (for example to control\n   * screen components that indicate if the connected address is eligible).\n   *\n   * Function flow is as follows:\n   * (1) Check that the position, community and address are in the allowlist.\n   * (2) Check if this leaf has already minted. If so, exit with false eligibility and reason \"Sender has already minted for this community\"\n   * (3) Check if this leaf is in a valid position in the allowlist. If not, exit with false eligilibity and reason \"This position has missed out\"\n   * (4) All checks passed, return elibility = true, the delivery address and valid leaf.\n   *\n   */\n  function eligibleForCommunityMint(\n    address addressToCheck_,\n    uint256 position_,\n    uint256 community_,\n    bytes32[] calldata proof_\n  )\n    external\n    view\n    returns (\n      address,\n      bool eligible,\n      string memory reason,\n      bytes32 leaf,\n      address\n    )\n  {\n    leaf = _getCommunityHash(community_, position_, addressToCheck_);\n\n    if (\n      MerkleProof.verify(proof_, communityWhitelistMerkleRoot, leaf) == false\n    ) {\n      return (\n        addressToCheck_,\n        false,\n        \"Community mint proof invalid\",\n        leaf,\n        addressToCheck_\n      );\n    }\n\n    if (_firstStageAddressHasMinted[addressToCheck_]) {\n      return (\n        addressToCheck_,\n        false,\n        \"Community: Address has already minted\",\n        leaf,\n        addressToCheck_\n      );\n    }\n\n    if (!isValidPosition(position_, community_)) {\n      return (\n        addressToCheck_,\n        false,\n        \"This position has missed out\",\n        leaf,\n        addressToCheck_\n      );\n    }\n\n    return (addressToCheck_, true, \"\", leaf, addressToCheck_);\n  }\n\n  /**\n   *\n   * @dev eligibleForDirectMint: Eligibility check for the DIRECT mint. This can be called from front-end (for example to control\n   * screen components that indicate if the connected address is eligible).\n   *\n   * Function flow is as follows:\n   * (1) Check that the position and address are in the allowlist.\n   * (2) Check if this minter address has already minted. If so, exit with false eligibility and reason \"Address has already minted\"\n   * (3) All checks passed, return elibility = true, the delivery address and valid minter adress.\n   *\n   */\n  function eligibleForDirectMint(\n    address addressToCheck_,\n    bytes32[] calldata proof_\n  )\n    external\n    view\n    returns (\n      address,\n      address,\n      bool eligible,\n      string memory reason\n    )\n  {\n    bytes32 leaf = _getDirectHash(addressToCheck_);\n\n    if (MerkleProof.verify(proof_, directWhitelistMerkleRoot, leaf) == false) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Direct mint proof invalid\"\n      );\n    }\n\n    if (_firstStageAddressHasMinted[addressToCheck_]) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Direct: Address has already minted\"\n      );\n    }\n\n    return (addressToCheck_, addressToCheck_, true, \"\");\n  }\n\n  /**\n   *\n   * @dev eligibleForClaimMint: Eligibility check for the CLAIM mint. This can be called from front-end (for example to control\n   * screen components that indicate if the connected address is eligible).\n   *\n   * Function flow is as follows:\n   * (1) Check that the position and address are in the allowlist.\n   * (2) Check if this minter address has already minted. If so, exit with false eligibility and reason \"Address has already minted\"\n   * (3) All checks passed, return elibility = true, the delivery address and valid minter adress.\n   *\n   */\n  function eligibleForClaimMint(\n    address addressToCheck_,\n    uint256 quantity_,\n    bytes32[] calldata proof_\n  )\n    external\n    view\n    returns (\n      address,\n      address,\n      bool eligible,\n      string memory reason\n    )\n  {\n    bytes32 leaf = _getClaimAndTreasuryHash(quantity_, addressToCheck_);\n\n    if (MerkleProof.verify(proof_, claimWhitelistMerkleRoot, leaf) == false) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Claim mint proof invalid\"\n      );\n    }\n\n    if (_claimHasMinted[addressToCheck_]) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Claim: Address has already minted\"\n      );\n    }\n\n    return (addressToCheck_, addressToCheck_, true, \"\");\n  }\n\n  /**\n   *\n   * @dev eligibleForTreasuryMint: Eligibility check for the treasury mint. This can be called from front-end (for example to control\n   * screen components that indicate if the connected address is eligible).\n   * Function flow is as follows:\n   * (1) Check that the quantityEligible and address are in the allowlist.\n   * (2) Check if this minter is requesting more than its allocation. If so, exit with false eligibility and reason \"Treasury: Requesting more than remaining allocation\"\n   * (3) All checks passed, return elibility = true, the delivery address and valid minter adress.\n   *\n   */\n  function eligibleForTreasuryMint(\n    address addressToCheck_,\n    uint256 quantityEligible_,\n    bytes32[] calldata proof_,\n    uint256 quantityToMint_\n  )\n    external\n    view\n    returns (\n      address,\n      address,\n      bool eligible,\n      string memory reason\n    )\n  {\n    // (2) Check the proof is valid\n    bytes32 leaf = _getClaimAndTreasuryHash(quantityEligible_, addressToCheck_);\n\n    if (\n      MerkleProof.verify(proof_, treasuryWhitelistMerkleRoot, leaf) == false\n    ) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Treasury: mint proof invalid\"\n      );\n    }\n\n    if (\n      (_treasuryAllocationMinted[addressToCheck_] + quantityToMint_) >\n      quantityEligible_\n    ) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Treasury: Requesting more than remaining allocation\"\n      );\n    }\n\n    return (addressToCheck_, addressToCheck_, true, \"\");\n  }\n\n  /**\n   *\n   * @dev eligibleForCompletionMint: Eligibility check for the completion mint. This can be called from front-end (for example to control\n   * screen components that indicate if the connected address is eligible).\n   * Function flow is as follows:\n   * (1) Check that the quantityEligible, address and unitPrice are in the allowlist.\n   * (2) Check if this minter is requesting more than its allocation. If so, exit with false eligibility and reason \"Treasury: Requesting more than remaining allocation\"\n   * (3) All checks passed, return elibility = true, the delivery address and valid minter adress.\n   *\n   */\n  function eligibleForCompletionMint(\n    address addressToCheck_,\n    uint256 quantityEligible_,\n    bytes32[] calldata proof_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  )\n    external\n    view\n    returns (\n      address,\n      address,\n      bool eligible,\n      string memory reason\n    )\n  {\n    bytes32 leaf = _getCompletionHash(\n      quantityEligible_,\n      addressToCheck_,\n      unitPrice_\n    );\n\n    if (\n      MerkleProof.verify(proof_, completionWhitelistMerkleRoot, leaf) == false\n    ) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Completion: mint proof invalid\"\n      );\n    }\n\n    if (\n      (_completionAllocationMinted[addressToCheck_] + quantityToMint_) >\n      quantityEligible_\n    ) {\n      return (\n        addressToCheck_,\n        addressToCheck_,\n        false,\n        \"Completion: Requesting more than remaining allocation\"\n      );\n    }\n\n    return (addressToCheck_, addressToCheck_, true, \"\");\n  }\n\n  /**\n   * @dev Burns `tokenId`. See {ERC721-_burn}.\n   *\n   * Requirements:\n   *\n   * - The caller must own `tokenId` or be an approved operator.\n   */\n  function burn(uint256 tokenId) public override {\n    super.burn(tokenId);\n    burnCounter += 1;\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
12     },
13     "@openzeppelin/contracts/security/Pausable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
21     },
22     "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
24     },
25     "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
30     },
31     "contracts/IWebaverseLand.sol": {
32       "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.15;\n\ninterface IWebaverseLand {\n  // Function to call to return the tokenURI for a passed token Id\n  function uriForToken(uint256 tokenId_) external view returns (string memory);\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Address.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
48     },
49     "@openzeppelin/contracts/utils/Context.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/utils/Strings.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
57     },
58     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 200
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "libraries": {}
80   }
81 }}