1 {{
2   "language": "Solidity",
3   "sources": {
4     "ehx.sol": {
5       "content": "// SPDX-License-Identifier: MIT                                                                               \n                                                    \npragma solidity ^0.8.16;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract AuthorizedRole is Ownable {\n    using Roles for Roles.Role;\n\n    event AuthorizedAdded(address indexed account);\n    event AuthorizedRemoved(address indexed account);\n\n    Roles.Role private _authorizeds;\n\n    modifier onlyAuthorized() {\n        require(isAuthorized(msg.sender), \"AuthorizedRole: caller does not have the Authorized role\");\n        _;\n    }\n\n    function isAuthorized(address account) public view returns (bool) {\n        return _authorizeds.has(account);\n    }\n\n    function addAuthorized(address account) public onlyOwner {\n        _addAuthorized(account);\n    }\n\n    function removeAuthorized(address account) public onlyOwner {\n        _removeAuthorized(account);\n    }\n\n    function renounceAuthorized() public {\n        _removeAuthorized(msg.sender);\n    }\n\n    function _addAuthorized(address account) internal {\n        _authorizeds.add(account);\n        emit AuthorizedAdded(account);\n    }\n\n    function _removeAuthorized(address account) internal {\n        _authorizeds.remove(account);\n        emit AuthorizedRemoved(account);\n    }\n}\n\ninterface IDexRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n}\n\ninterface IDexFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ncontract EHX is ERC20, Ownable, AuthorizedRole {\n\n    uint256 public maxTransaction;\n\n    address public robinHoodWallet;\n    uint256 public robinHoodPercent = 10;\n\n    IDexRouter public immutable dexRouter;\n    //address public immutable lpPair;\n    address public immutable lpPairEth;\n\n    mapping (address => uint256) public lastBuyBlock;\n\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\n    mapping (address => bool) public restrictedWallets;\n    uint256 public blockForPenaltyEnd;\n\n    bool public limitsInEffect = true;\n    bool public tradingActive = false;\n    bool public robinHoodActive = true;\n    \n    mapping (address => bool) public _isWhitelisted;\n\n    mapping (address => bool) public automatedMarketMakerPairs;\n\n    // Events\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event EnabledTrading();\n    event RemovedLimits();\n    event Whitelisted(address indexed account, bool isWhitelisted);\n    event UpdatedMaxTransaction(uint256 newAmount);\n    event TransferForeignToken(address token, uint256 amount);\n\n    constructor() ERC20(\"Eterna\", \"EHX\") {\n\n        address stablecoinAddress;\n        address _dexRouter;\n\n        // automatically detect router/desired stablecoin\n        if(block.chainid == 1){\n            stablecoinAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH: Uniswap V2\n        } else if(block.chainid == 4){\n            stablecoinAddress  = 0xE7d541c18D6aDb863F4C570065c57b75a53a64d3; // Rinkeby Testnet USDC\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH: Uniswap V2\n        } else if(block.chainid == 56){\n            stablecoinAddress  = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD\n            _dexRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BNB Chain: PCS V2\n        } else if(block.chainid == 97){\n            stablecoinAddress  = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // BSC Testnet BUSD\n            _dexRouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // BNB Chain: PCS V2\n        } else {\n            revert(\"Chain not configured\");\n        }\n\n        dexRouter = IDexRouter(_dexRouter);\n\n        // create pair\n        // lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), address(stablecoinAddress));\n        // setAutomatedMarketMakerPair(address(lpPair), true);\n\n        lpPairEth = IDexFactory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\n        setAutomatedMarketMakerPair(address(lpPairEth), true);\n\n        uint256 totalSupply = 2 * 1e9 * 1e18;\n        \n        maxTransaction = totalSupply * 5 / 1000;\n\n        setWhitelistedAddress(address(this), true);\n        setWhitelistedAddress(address(0xdead), true);\n        setWhitelistedAddress(address(dexRouter), true);\n        setWhitelistedAddress(address(msg.sender), true);\n\n        _mint(address(msg.sender), totalSupply);\n    }\n\n    // Owner / Whitelisted Functions\n\n    function enableTrading() external onlyOwner {\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        tradingActive = true;\n        tradingActiveBlock = block.number;\n        emit EnabledTrading();\n    }\n\n    function manageRestrictedWallets(address[] calldata wallets, bool restricted) external onlyOwner {\n        for(uint256 i = 0; i < wallets.length; i++){\n            restrictedWallets[wallets[i]] = restricted;\n        }\n    }\n    \n    function removeLimits() external onlyOwner {\n        limitsInEffect = false;\n        maxTransaction = totalSupply();\n        emit RemovedLimits();\n    }\n\n    function setRobinHoodActive(bool active) external onlyOwner {\n        robinHoodActive = active;\n    }\n\n    function setRobinHoodPercent(uint256 perc) external onlyOwner {\n        require(perc <= 10000, \"too high\");\n        robinHoodPercent = perc;\n    }\n\n    function setRobinHoodAddress(address wallet) external onlyOwner {\n        require(wallet != address(0), \"zero address\");\n        robinHoodWallet = wallet;\n    }\n\n    function updateMaxTransaction(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 1 / 1000) / (10 ** decimals()), \"Cannot set max buy amount lower than 0.1%\");\n        maxTransaction = newNum * (10 ** decimals());\n        emit UpdatedMaxTransaction(maxTransaction);\n    }\n    \n    function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) {\n        require(_token != address(0), \"_token address cannot be 0\");\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\n        emit TransferForeignToken(_token, _contractBalance);\n    }\n        \n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(value, \"The pair cannot be removed from automatedMarketMakerPairs\");\n        automatedMarketMakerPairs[pair] = value;\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function setWhitelistedAddress(address account, bool excluded) public onlyOwner {\n        _isWhitelisted[account] = excluded;\n        emit Whitelisted(account, excluded);\n    }\n\n    function mintTokens(address destination, uint256 amount) public onlyAuthorized {\n        _mint(destination, amount);\n    }\n\n    function burnTokens(uint256 amount) public onlyAuthorized {\n        _burn(msg.sender, amount);\n    }\n\n    // private / internal functions\n\n    function _transfer(address from, address to, uint256 amount) internal override {\n\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        // transfer of 0 is allowed, but triggers no logic.  In case of staking where a staking pool is paying out 0 rewards.\n        if(amount == 0){\n            super._transfer(from, to, 0);\n            return;\n        }\n        \n        if(!tradingActive){\n            require(_isWhitelisted[from] || _isWhitelisted[to], \"Trading is not active.\");\n        }\n\n        if(tradingActiveBlock > 0){\n            require((!restrictedWallets[from] && !restrictedWallets[to]) || to == owner() || to == address(0xdead), \"Restricted wallet\");\n        }\n        \n        if(robinHoodActive && (!_isWhitelisted[to] && !_isWhitelisted[from])){\n            if(automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to]){\n                lastBuyBlock[to] = block.number;\n            } else if(lastBuyBlock[from] == block.number && robinHoodPercent > 0){\n                uint256 robinHoodAmount = amount * robinHoodPercent / 10000;\n                uint256 transferAmount = amount - robinHoodAmount;\n                super._transfer(from, robinHoodWallet, robinHoodAmount);\n                super._transfer(from, to, transferAmount);\n                return;\n            }\n        }\n\n        if(limitsInEffect){\n            if (!_isWhitelisted[from] && !_isWhitelisted[to]){\n                //on buy or sell\n                if (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]) {\n                    require(amount <= maxTransaction, \"Buy transfer amount exceeds the max buy.\");\n                }\n            }\n        }\n\n        super._transfer(from, to, amount);\n    }\n}"
6     }
7   },
8   "settings": {
9     "optimizer": {
10       "enabled": true,
11       "runs": 200
12     },
13     "outputSelection": {
14       "*": {
15         "*": [
16           "evm.bytecode",
17           "evm.deployedBytecode",
18           "devdoc",
19           "userdoc",
20           "metadata",
21           "abi"
22         ]
23       }
24     }
25   }
26 }}