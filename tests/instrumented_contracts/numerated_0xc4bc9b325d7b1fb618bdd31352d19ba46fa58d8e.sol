1 {{
2   "language": "Solidity",
3   "settings": {
4     "optimizer": {
5       "enabled": true,
6       "runs": 200
7     },
8     "evmVersion": "byzantium",
9     "viaIR": true,
10     "outputSelection": {
11       "*": {
12         "*": [
13           "evm.bytecode",
14           "evm.deployedBytecode",
15           "abi"
16         ]
17       }
18     }
19   },
20   "sources": {
21     "contracts/PYEMarket.sol": {
22       "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/INFT.sol\";\nimport \"./interfaces/ITOPIA.sol\";\nimport \"./interfaces/IHub.sol\";\nimport \"./interfaces/IPYEMarket.sol\";\nimport \"./interfaces/IRandomizer.sol\";\n\ncontract PYEMarket is IPYEMarket, Ownable, ReentrancyGuard, IERC721Receiver, Pausable {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    // maximum rank for a Foodie/Baker\n    uint8 public constant MAX_RANK = 8;\n\n    // struct to store a stake's token, owner, and earning values\n    struct Stake {\n        uint16 tokenId;\n        uint80 value;\n        address owner;\n        uint80 stakedAt;\n    }\n\n    // struct to store a stake's token, owner, and earning values\n    struct StakeAlpha {\n        uint16 tokenId;\n        uint80 value;\n        address owner;\n        uint80 stakedAt;\n    }\n\n    mapping(uint16 => uint8) public genesisType;\n\n    // number of Bakers staked\n    uint256 private numBakersStaked;\n    // number of Foodie staked\n    uint256 private numFoodieStaked;\n    // number of ShopOwner staked\n    uint256 private numShopOwnerStaked;\n    // number of Alpha staked\n    uint256 private numAlphasStaked;\n\n    uint256 public PERIOD = 1 days;\n\n    event TokenStaked(address indexed owner, uint256 indexed tokenId, uint8 tokenType, uint256 value);\n    event BakerClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n    event BakerUnStaked(address indexed owner, uint256 indexed tokenId, uint256 blockNum, uint256 timeStamp);\n    event BakerStolen(uint16 indexed tokenId, address indexed victim, address indexed thief, uint256 blockNum, uint256 timeStamp);\n    event FoodieClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n    event FoodieUnStaked(address indexed owner, uint256 indexed tokenId, uint256 blockNum, uint256 timeStamp);\n    event FoodieStolen(uint16 indexed tokenId, address indexed victim, address indexed thief, uint256 blockNum, uint256 timeStamp);\n    event ShopOwnerClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n    event ShopOwnerUnStaked(address indexed owner, uint256 indexed tokenId, uint256 blockNum, uint256 timeStamp);\n    event BoughtPYE(address indexed owner, uint256 indexed tokenId, uint8 boughtPYEType, uint256 rewardInPYE);\n    event AlphaStaked(address indexed owner, uint256 indexed tokenId, uint256 value);\n    event AlphaClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n    event AlphaUnstaked(address indexed owner, uint256 indexed tokenId, uint256 blockNum, uint256 timeStamp);\n\n    // reference to the NFT contract\n    INFT public lfGenesis;\n\n    INFT public lfAlpha;\n\n    // reference to the $TOPIA contract for minting $TOPIA earnings\n    ITOPIA public TOPIAToken;\n\n    IHub public HUB;\n\n    // reference to Randomizer\n    IRandomizer public randomizer;\n    address payable vrf;\n\n    // maps Baker tokenId to stake\n    mapping(uint256 => Stake) private baker;\n\n    // maps Alpha tokenId to stakeAlpha\n    mapping(uint256 => StakeAlpha) private alpha;\n\n    // maps Foodie tokenId to stake\n    mapping(uint256 => Stake) private foodie;\n    // array of Foodie token ids;\n    // uint256[] private yieldIds;\n    EnumerableSet.UintSet private foodieIds;\n    // maps ShopOwner tokenId to stake\n    mapping(uint256 => Stake) private shopOwner;\n    // array of ShopOwner token ids;\n    EnumerableSet.UintSet private shopOwnerIds;\n\n    mapping(address => uint256) ownerBalanceStaked;\n\n    // array of Owned Genesis token ids;\n    mapping(address => EnumerableSet.UintSet) genesisOwnedIds;\n    // array of Owned Alpha token ids;\n    mapping(address => EnumerableSet.UintSet) alphaOwnedIds;\n\n\n    // any rewards distributed when no Foodies are staked\n    uint256 private unaccountedFoodieRewards;\n    // amount of $TOPIA due for each foodie staked\n    uint256 private TOPIAPerFoodie;\n    // any rewards distributed when no ShopOwners are staked\n    uint256 private unaccountedShopOwnerRewards;\n    // amount of $TOPIA due for each ShopOwner staked\n    uint256 private TOPIAPerShopOwner;\n\n    // Bakers earn 20 $TOPIA per day\n    uint256 public DAILY_BAKER_RATE = 20 * 10**18;\n\n    // Bakers earn 35 $TOPIA per day\n    uint256 public DAILY_ALPHA_RATE = 35 * 10**18;\n\n    // Bakers must have 2 days worth of $TOPIA to un-stake or else they're still remaining the armory\n    uint256 public MINIMUM = 40 * 10**18;\n\n    // rolling price\n    uint256 public PYE_COST = 40 * 10**18;\n\n    // ShopOwners take a 3% tax on all $TOPIA claimed\n    uint256 public FOODIE_TAX_RATE = 300;\n\n    // ShopOwners take a 3% tax on all $TOPIA from upgrades\n    uint256 public SHOP_OWNER_TAX_RATE = 300;\n\n    mapping(uint8 => uint256) pyeFilling;\n\n    // tx cost for getting random numbers\n    uint256 public SEED_COST = .0008 ether;\n\n    // amount of $TOPIA earned so far\n    uint256 public totalTOPIAEarned;\n    // the last time $TOPIA was claimed\n    uint80 public claimEndTime;\n\n    // emergency rescue to allow un-staking without any checks but without $TOPIA\n    bool public rescueEnabled = false;\n\n    /**\n     */\n    constructor() {\n        _pause();\n    }\n\n    /** CRITICAL TO SETUP */\n\n    modifier requireContractsSet() {\n        require(address(lfGenesis) != address(0) && address(TOPIAToken) != address(0)\n        && address(randomizer) != address(0) && address(HUB) != address(0), \"Contracts not set\");\n        _;\n    }\n\n    function setContracts(address _lfGenesis, address _lfAlpha, address _TOPIA, address _HUB, address payable _rand) external onlyOwner {\n        lfGenesis = INFT(_lfGenesis);\n        lfAlpha = INFT(_lfAlpha);\n        TOPIAToken = ITOPIA(_TOPIA);\n        randomizer = IRandomizer(_rand);\n        HUB = IHub(_HUB);\n        vrf = _rand;\n    }\n\n    // mass update the nftType mapping\n    function setBatchNFTType(uint16[] calldata tokenIds, uint8[] calldata _types) external onlyOwner {\n        require(tokenIds.length == _types.length , \" _idNumbers.length != _types.length: Each token ID must have exactly 1 corresponding type!\");\n        for (uint16 i = 0; i < tokenIds.length; i++) {\n            require(_types[i] != 0 , \"Invalid nft type - cannot be 0\");\n            genesisType[tokenIds[i]] = _types[i];\n        }\n    }\n\n\n    /** STAKING */\n\n    /**\n     * adds Foodies and Baker\n     * @param account the address of the staker\n   * @param tokenIds the IDs of the Foodies and Baker to stake\n   */\n    function addManyToStakingPool(address account, uint16[] calldata tokenIds) external override nonReentrant {\n        require(tx.origin == msg.sender, \"Only EOA\");\n        require(account == tx.origin, \"account to send mismatch\");\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(lfGenesis.ownerOf(tokenIds[i]) == msg.sender, \"You don't own this token\");\n\n            if (genesisType[tokenIds[i]] == 1) {\n                lfGenesis.transferFrom(msg.sender, address(this), tokenIds[i]);\n                _addBakerToStakingPool(account, tokenIds[i]);\n            } else if (genesisType[tokenIds[i]] == 2) {\n                lfGenesis.transferFrom(msg.sender, address(this), tokenIds[i]);\n                _addFoodieToStakingPool(account, tokenIds[i]);\n            } else if (genesisType[tokenIds[i]] == 3) {\n                lfGenesis.transferFrom(msg.sender, address(this), tokenIds[i]);\n                _addShopOwnerToStakingPool(account, tokenIds[i]);\n            } else if (genesisType[tokenIds[i]] == 0) {\n                revert('invalid token id');\n            }\n\n        }\n        HUB.emitGenesisStaked(account, tokenIds, 3);\n    }\n\n    /**\n     * adds a single Foodie to the Armory\n     * @param account the address of the staker\n   * @param tokenId the ID of the Foodie/ShopOwner to add to the Staking Pool\n   */\n    function _addFoodieToStakingPool(address account, uint256 tokenId) internal whenNotPaused {\n        foodie[tokenId] = Stake({\n        owner : account,\n        tokenId : uint16(tokenId),\n        value : uint80(TOPIAPerFoodie),\n        stakedAt : uint80(block.timestamp)\n        });\n        foodieIds.add(tokenId);\n        genesisOwnedIds[account].add(tokenId);\n        numFoodieStaked += 1;\n        emit TokenStaked(account, tokenId, 2, TOPIAPerFoodie);\n    }\n\n\n    /**\n     * adds a single ShopOwner to the Armory\n     * @param account the address of the staker\n   * @param tokenId the ID of the Foodie/ShopOwner to add to the Staking Pool\n   */\n    function _addShopOwnerToStakingPool(address account, uint256 tokenId) internal whenNotPaused {\n        shopOwner[tokenId] = Stake({\n        owner : account,\n        tokenId : uint16(tokenId),\n        value : uint80(TOPIAPerShopOwner),\n        stakedAt : uint80(block.timestamp)\n        });\n        shopOwnerIds.add(tokenId);\n        genesisOwnedIds[account].add(tokenId);\n        numShopOwnerStaked += 1;\n        emit TokenStaked(account, tokenId, 3, TOPIAPerShopOwner);\n    }\n\n\n    /**\n     * adds a single Baker to the armory\n     * @param account the address of the staker\n   * @param tokenId the ID of the Baker to add to the Staking Pool\n   */\n    function _addBakerToStakingPool(address account, uint256 tokenId) internal {\n        baker[tokenId] = Stake({\n        owner : account,\n        tokenId : uint16(tokenId),\n        value : uint80(block.timestamp),\n        stakedAt : uint80(block.timestamp)\n        });\n        // Add the baker to the armory\n        genesisOwnedIds[account].add(tokenId);\n        numBakersStaked += 1;\n        emit TokenStaked(account, tokenId, 1, block.timestamp);\n    }\n\n    /** CLAIMING / UNSTAKING */\n\n    /**\n     * realize $TOPIA earnings and optionally unstake tokens from the Armory / Yield\n     * to unstake a Baker it will require it has 2 days worth of $TOPIA unclaimed\n     * @param tokenIds the IDs of the tokens to claim earnings from\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\n   */\n    function claimManyFromArmoryAndYield(uint16[] calldata tokenIds, bool unstake) external payable whenNotPaused nonReentrant returns (uint16[] memory stolenNFTs){\n        require(tx.origin == msg.sender, \"Only EOA\");\n        uint256 numWords = tokenIds.length;\n        require(msg.value == SEED_COST * numWords, \"Invalid value for randomness\");\n\n        if(unstake) { \n            stolenNFTs = new uint16[](numWords);\n            HUB.emitGenesisUnstaked(msg.sender, tokenIds);\n        } else {\n            stolenNFTs = new uint16[](1);\n            stolenNFTs[0] = 0;\n        }\n        uint256 remainingWords = randomizer.getRemainingWords();\n        require(remainingWords >= numWords, \"Not enough random numbers. Please try again soon.\");\n        uint256[] memory seed = randomizer.getRandomWords(numWords);\n        uint256 owed = 0;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            if (genesisType[tokenIds[i]] == 1) {\n                (uint256 _owed, uint16 _stolen) = _claimBakerFromArmory(tokenIds[i], unstake, seed[i]);\n                owed += _owed;\n                if(unstake) {stolenNFTs[i] = _stolen;}\n            } else if (genesisType[tokenIds[i]] == 2) {\n                owed += _claimFoodieFromYield(tokenIds[i], unstake);\n            } else if (genesisType[tokenIds[i]] == 3) {\n                owed += _claimShopOwnerFromYield(tokenIds[i], unstake);\n            } else if (genesisType[tokenIds[i]] == 0) {\n                revert('invalid token id');\n            }\n        }\n        if (owed == 0) {\n            return stolenNFTs;\n        }\n        totalTOPIAEarned += owed;\n        TOPIAToken.mint(msg.sender, owed);\n        HUB.emitTopiaClaimed(msg.sender, owed);\n        vrf.transfer(msg.value);\n    }\n\n\n    /**\n     * realize $TOPIA earnings for a single Baker and optionally unstake it\n     * if not unstaking, lose x% chance * y% percent of accumulated $TOPIA to the staked Foodies based on it's upgrade\n     * if unstaking, there is a % chanc of losing Baker NFT\n     * @param tokenId the ID of the Baker to claim earnings from\n   * @param unstake whether or not to unstake the Baker\n   * @return owed - the amount of $TOPIA earned\n   */\n    function _claimBakerFromArmory(uint16 tokenId, bool unstake, uint256 seed) internal returns (uint256 owed , uint16 tokId) {       \n        require(baker[tokenId].owner == msg.sender, \"Don't own the given token\");\n        if(block.timestamp <= claimEndTime) {\n            owed = (block.timestamp - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n        } else if (baker[tokenId].value < claimEndTime) {\n            owed = (claimEndTime - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n        } else {\n            owed = 0;\n        }\n\n        uint256 shopOwnerTax = owed * SHOP_OWNER_TAX_RATE / 10000;\n        _payShopOwnerTax(shopOwnerTax);\n        uint256 foodieTax = owed * FOODIE_TAX_RATE / 10000;\n        _payFoodieTax(foodieTax);\n        owed = owed - shopOwnerTax - foodieTax;\n\n        bool stolen = false;\n        address thief;\n        if (unstake) {\n            if ((seed & 0xFFFF) % 100 < 10) {\n                thief = randomFoodieOwner(seed);\n                lfGenesis.safeTransferFrom(address(this), thief, tokenId);\n                stolen = true;\n            }\n            delete baker[tokenId];\n            numBakersStaked -= 1;\n            genesisOwnedIds[msg.sender].remove(tokenId);\n            // reset baker to unarmed\n            if (stolen) {\n                emit BakerStolen(tokenId, msg.sender, thief, block.number, block.timestamp);\n                tokId = tokenId;\n            } else {\n                // Always transfer last to guard against reentrance\n                lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n            }\n            emit BakerUnStaked(msg.sender, tokenId, block.number, block.timestamp);\n        } else {// Claiming\n            baker[tokenId].value = uint80(block.timestamp);\n            // reset stake\n        }\n        emit BakerClaimed(tokenId, unstake, owed);\n    }\n\n    /**\n     * realize $TOPIA earnings for a single Foodie and optionally unstake it\n     * Foodies earn $TOPIA\n     * @param tokenId the ID of the Foodie to claim earnings from\n   * @param unstake whether or not to unstake the Foodie\n   */\n    function _claimFoodieFromYield(uint16 tokenId, bool unstake) internal returns (uint256 owed) {\n        require(foodie[tokenId].owner == msg.sender, \"Doesn't own given token\");\n        owed = TOPIAPerFoodie - foodie[tokenId].value;\n        if (unstake) {\n            delete foodie[tokenId];\n            foodieIds.remove(tokenId);\n            genesisOwnedIds[msg.sender].remove(tokenId);\n            numFoodieStaked -= 1;\n            // Always remove last to guard against reentrance\n            lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n            emit FoodieUnStaked(msg.sender, tokenId, block.number, block.timestamp);\n        } else {\n            foodie[tokenId].value = uint80(TOPIAPerFoodie);\n            // reset stake\n\n        }\n        emit FoodieClaimed(tokenId, unstake, owed);\n    }\n\n    /**\n     * realize $TOPIA earnings for a ShopOwner Foodie and optionally unstake it\n     * Foodies earn $TOPIA\n     * @param tokenId the ID of the Foodie to claim earnings from\n   * @param unstake whether or not to unstake the ShopOwner Foodie\n   */\n    function _claimShopOwnerFromYield(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\n        require(shopOwner[tokenId].owner == msg.sender, \"Doesn't own given token\");\n        owed = TOPIAPerShopOwner - shopOwner[tokenId].value;\n        if (unstake) {\n            delete shopOwner[tokenId];\n            shopOwnerIds.remove(tokenId);\n            genesisOwnedIds[msg.sender].remove(tokenId);\n            numShopOwnerStaked -= 1;\n            // Always remove last to guard against reentrance\n            lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n            // Send back ShopOwner\n            emit ShopOwnerUnStaked(msg.sender, tokenId, block.number, block.timestamp);\n        } else {\n            shopOwner[tokenId].value = uint80(TOPIAPerShopOwner);\n            // reset stake\n\n        }\n        emit ShopOwnerClaimed(tokenId, unstake, owed);\n    }\n\n\n    /**\n     * emergency unstake tokens\n     * @param tokenIds the IDs of the tokens to claim earnings from\n   */\n    function rescue(uint16[] calldata tokenIds) external nonReentrant {\n        require(rescueEnabled, \"RESCUE DISABLED\");\n        uint16 tokenId;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            tokenId = tokenIds[i];\n            \n            if (genesisType[tokenId] == 1) {\n                require(baker[tokenId].owner == msg.sender, \"SWIPER, NO SWIPING\");\n                delete baker[tokenId];\n                genesisOwnedIds[msg.sender].remove(tokenId);\n                numBakersStaked -= 1;\n                lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n                emit BakerClaimed(tokenId, true, 0);\n            } else if (genesisType[tokenId] == 2) {\n                require(foodie[tokenId].owner == msg.sender, \"SWIPER, NO SWIPING\");\n                delete foodie[tokenId];\n                foodieIds.remove(tokenId);\n                genesisOwnedIds[msg.sender].remove(tokenId);\n                numFoodieStaked -= 1;\n                lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n                emit FoodieClaimed(tokenId, true, 0);\n            } else if (genesisType[tokenId] == 3) {\n                require(shopOwner[tokenId].owner == msg.sender, \"SWIPER, NO SWIPING\");\n                delete shopOwner[tokenId];\n                shopOwnerIds.remove(tokenId);\n                genesisOwnedIds[msg.sender].remove(tokenId);\n                numShopOwnerStaked -= 1;\n                lfGenesis.safeTransferFrom(address(this), msg.sender, tokenId, \"\");\n                emit ShopOwnerClaimed(tokenId, true, 0);\n            } else if (genesisType[tokenIds[i]] == 0) {\n                revert('invalid token id');\n            }\n        }\n        HUB.emitGenesisUnstaked(msg.sender, tokenIds);\n    }\n\n    /*\n  * implement foodie buy pye\n  */\n  function buyPYE(uint16 tokenId) external payable whenNotPaused nonReentrant returns(uint8) {\n    require(tx.origin == msg.sender, \"Only EOA\");         \n    require(foodie[tokenId].owner == msg.sender, \"Don't own the given token\");\n    require(genesisType[tokenId] == 2, \"affected only for Foodie NFTs\");\n    require(msg.value == SEED_COST, \"Invalid value for randomness\");\n\n    TOPIAToken.burnFrom(msg.sender, PYE_COST);\n    uint256 remainingWords = randomizer.getRemainingWords();\n    require(remainingWords >= 1, \"Not enough random numbers. Please try again soon.\");\n    uint256[] memory seed = randomizer.getRandomWords(1);\n    uint8 boughtPYE;\n\n    /*\n    * Odds of PYE:\n    * Dud: 70%\n    * Filled PYE: 25%\n    * Golden Ticket PYE: 5%\n    */\n    if ((seed[0] & 0xFFFF) % 100 < 5) {\n      boughtPYE = 3;\n    } else if((seed[0] & 0xFFFF) % 100 < 30) {\n      boughtPYE = 2;\n    } else {\n      boughtPYE = 1;\n    }\n\n    if(pyeFilling[boughtPYE] > 0) { \n        TOPIAToken.mint(msg.sender, pyeFilling[boughtPYE]); \n        HUB.emitTopiaClaimed(msg.sender, pyeFilling[boughtPYE]);\n    }\n    vrf.transfer(msg.value);\n\n    emit BoughtPYE(msg.sender, tokenId, boughtPYE, pyeFilling[boughtPYE]);\n    return boughtPYE;\n  }\n\n    /** ACCOUNTING */\n\n    /**\n     * add $TOPIA to claimable pot for the Foodie Yield\n     * @param amount $TOPIA to add to the pot\n   */\n    function _payFoodieTax(uint256 amount) internal {\n        if (numFoodieStaked == 0) {// if there's no staked Foodies\n            unaccountedFoodieRewards += amount;\n            // keep track of $TOPIA due to Foodies\n            return;\n        }\n        // makes sure to include any unaccounted $GP\n        TOPIAPerFoodie += (amount + unaccountedFoodieRewards) / numFoodieStaked;\n        unaccountedFoodieRewards = 0;\n    }\n\n    /**\n     * add $TOPIA to claimable pot for the ShopOwner Yield\n     * @param amount $TOPIA to add to the pot\n   */\n    function _payShopOwnerTax(uint256 amount) internal {\n        if (numShopOwnerStaked == 0) {// if there's no staked shopOwners\n            unaccountedShopOwnerRewards += amount;\n            // keep track of $TOPIA due to shopOwners\n            return;\n        }\n        // makes sure to include any unaccounted $GP\n        TOPIAPerShopOwner += (amount + unaccountedShopOwnerRewards) / numShopOwnerStaked;\n        unaccountedShopOwnerRewards = 0;\n    }\n\n    /** ALPHA FUNCTIONS */\n\n    /**\n     * adds Foodies and Baker\n     * @param account the address of the staker\n   * @param tokenIds the IDs of the Foodies and Baker to stake\n   */\n    function addManyAlphaToStakingPool(address account, uint16[] calldata tokenIds) external nonReentrant {\n        require(tx.origin == msg.sender, \"Only EOA\");\n        require(account == tx.origin, \"account to send mismatch\");\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(lfAlpha.ownerOf(tokenIds[i]) == msg.sender, \"You don't own this token\");\n            lfAlpha.transferFrom(msg.sender, address(this), tokenIds[i]);\n\n            alpha[tokenIds[i]] = StakeAlpha({\n            owner : account,\n            tokenId : uint16(tokenIds[i]),\n            value : uint80(block.timestamp),\n            stakedAt : uint80(block.timestamp)\n            });\n            // Add the baker to the armory\n            alphaOwnedIds[account].add(tokenIds[i]);\n            numAlphasStaked += 1;\n            emit AlphaStaked(account, tokenIds[i], block.timestamp);\n        }\n        HUB.emitAlphaStaked(account, tokenIds, 3);\n    }\n\n    /**\n     * realize $TOPIA earnings and optionally unstake Alpha tokens\n     * @param tokenIds the IDs of the tokens to claim earnings from\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\n   */\n    function claimManyAlphas(uint16[] calldata tokenIds, bool unstake) external whenNotPaused nonReentrant {\n        require(tx.origin == msg.sender, \"Only EOA\");\n        uint256 owed = 0;\n        for (uint i = 0; i < tokenIds.length; i++) { \n            require(alpha[tokenIds[i]].owner == msg.sender, \"Don't own the given token\");\n            \n            if(block.timestamp <= claimEndTime) {\n                owed += (block.timestamp - alpha[tokenIds[i]].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else if (alpha[tokenIds[i]].value < claimEndTime) {\n                owed += (claimEndTime - alpha[tokenIds[i]].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else {\n                owed += 0;\n            }\n\n            if (unstake) {\n                delete alpha[tokenIds[i]];\n                numAlphasStaked -= 1;\n                alphaOwnedIds[msg.sender].remove(tokenIds[i]);\n                lfAlpha.transferFrom(address(this), msg.sender, tokenIds[i]);\n                emit AlphaUnstaked(msg.sender, tokenIds[i], block.number, block.timestamp);\n            } else {\n                alpha[tokenIds[i]].value = uint80(block.timestamp);\n            }\n            emit AlphaClaimed(tokenIds[i], unstake, owed);\n        }\n        if (owed == 0) {\n            return;\n        }\n        if(unstake) { HUB.emitAlphaUnstaked(msg.sender, tokenIds); }\n        HUB.emitTopiaClaimed(msg.sender, owed);\n        TOPIAToken.mint(msg.sender, owed);\n        totalTOPIAEarned += owed;\n    }\n\n    /**\n     * emergency unstake tokens\n     * @param tokenIds the IDs of the tokens to claim earnings from\n   */\n    function rescueAlpha(uint16[] calldata tokenIds) external nonReentrant {\n        require(rescueEnabled, \"RESCUE DISABLED\");\n        uint16 tokenId;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            tokenId = tokenIds[i];\n            require(alpha[tokenId].owner == msg.sender, \"SWIPER, NO SWIPING\");\n\n            delete alpha[tokenId];\n            numAlphasStaked -= 1;\n            alphaOwnedIds[msg.sender].remove(tokenId);\n            lfAlpha.transferFrom(address(this), msg.sender, tokenId);\n            emit AlphaUnstaked(msg.sender, tokenId, block.number, block.timestamp);\n        }\n        HUB.emitAlphaUnstaked(msg.sender, tokenIds);\n    }\n\n    /** ADMIN */\n\n    /**\n     * allows owner to enable \"rescue mode\"\n     * simplifies accounting, prioritizes tokens out in emergency\n     */\n    function setRescueEnabled(bool _enabled) external onlyOwner {\n        rescueEnabled = _enabled;\n    }\n\n    function isOwner(uint16 tokenId, address owner) external view override returns (bool validOwner) {\n        if (genesisType[tokenId] == 1) {\n            return baker[tokenId].owner == owner;\n        } else if (genesisType[tokenId] == 2) {\n            return foodie[tokenId].owner == owner;\n        } else if (genesisType[tokenId] == 3) {\n            return shopOwner[tokenId].owner == owner;\n        }\n    }\n\n    /**\n     * enables owner to pause / unpause contract\n     */\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\n        if (_paused) _pause();\n        else _unpause();\n    }\n\n    /** READ ONLY */\n\n    function getUnclaimedAlpha(uint16 tokenId) external view returns (uint256) {\n        if(alpha[tokenId].value > 0) {\n            if(block.timestamp <= claimEndTime) {\n                return (block.timestamp - alpha[tokenId].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else if (alpha[tokenId].value < claimEndTime) {\n                return (claimEndTime - alpha[tokenId].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function getUnclaimedGenesis(uint16 tokenId) external view returns (uint256 owed) {\n        owed = 0;\n        if (genesisType[tokenId] == 1 && baker[tokenId].value > 0) {\n            if(block.timestamp <= claimEndTime) {\n                return (block.timestamp - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n            } else if (baker[tokenId].value < claimEndTime) {\n                return (claimEndTime - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n            } else {\n                return 0;\n            }\n        } else if (genesisType[tokenId] == 2 && foodie[tokenId].owner != address(0)) {\n            return TOPIAPerFoodie - foodie[tokenId].value;\n        } else if (genesisType[tokenId] == 3 && shopOwner[tokenId].owner != address(0)) {\n            return TOPIAPerShopOwner - shopOwner[tokenId].value;\n        }\n        return owed;\n    }\n\n    function getUnclaimedTopiaForUser(address _account) external view returns (uint256) {\n        uint256 owed;\n        uint256 genesisLength = genesisOwnedIds[_account].length();\n        uint256 alphaLength = alphaOwnedIds[_account].length();\n        for (uint i = 0; i < genesisLength; i++) {\n            uint16 tokenId = uint16(genesisOwnedIds[_account].at(i));\n            if (genesisType[tokenId] == 1) {\n                if(block.timestamp <= claimEndTime) {\n                    owed += (block.timestamp - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n                } else if (baker[tokenId].value < claimEndTime) {\n                    owed += (claimEndTime - baker[tokenId].value) * DAILY_BAKER_RATE / PERIOD;\n                } else {\n                    owed += 0;\n                }\n            } else if (genesisType[tokenId] == 2) {\n                owed += TOPIAPerFoodie - foodie[tokenId].value;\n            } else if (genesisType[tokenId] == 3) {\n                owed += TOPIAPerShopOwner - shopOwner[tokenId].value;\n            } else if (genesisType[tokenId] == 0) {\n                continue;\n            }\n        }\n        for (uint i = 0; i < alphaLength; i++) {\n            uint16 tokenId = uint16(alphaOwnedIds[_account].at(i));\n            if(block.timestamp <= claimEndTime) {\n                owed += (block.timestamp - alpha[tokenId].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else if (alpha[tokenId].value < claimEndTime) {\n                owed += (claimEndTime - alpha[tokenId].value) * DAILY_ALPHA_RATE / PERIOD;\n            } else {\n                owed += 0;\n            }\n        }\n\n        return owed;\n    }\n\n    function getStakedGenesisForUser(address _account) external view returns (uint16[] memory stakedGensis) {\n        uint256 length = genesisOwnedIds[_account].length();\n        stakedGensis = new uint16[](length);\n        for (uint i = 0; i < length; i++) {\n            stakedGensis[i] = uint16(genesisOwnedIds[_account].at(i));\n        }\n    }\n\n    function getStakedAlphasForUser(address _account) external view returns (uint16[] memory stakedAlphas) {\n        uint256 length = alphaOwnedIds[_account].length();\n        stakedAlphas = new uint16[](length);\n        for (uint i = 0; i < length; i++) {\n            stakedAlphas[i] = uint16(alphaOwnedIds[_account].at(i));\n        }\n    }\n\n    /**\n     * chooses a random Foodie thief when an unstaking token is stolen\n     * @param seed a random value to choose a Foodie from\n   * @return the owner of the randomly selected Baker thief\n   */\n    function randomFoodieOwner(uint256 seed) internal view returns (address) {\n        if (foodieIds.length() == 0) {\n            return address(0x0);\n        }\n        uint256 bucket = (seed & 0xFFFFFFFF) % foodieIds.length();\n        return foodie[foodieIds.at(bucket)].owner;\n    }\n\n    /**\n     * chooses a random ShopOwner thief when a an unstaking token is stolen\n     * @param seed a random value to choose a ShopOwner from\n   * @return the owner of the randomly selected Foodie thief\n   */\n    function randomShopOwnerOwner(uint256 seed) internal view returns (address) {\n        if (shopOwnerIds.length() == 0) {\n            return address(0x0);\n        }\n        uint256 bucket = (seed & 0xFFFFFFFF) % shopOwnerIds.length();\n        return shopOwner[shopOwnerIds.at(bucket)].owner;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function updateMinimumExit(uint256 _minimum) external onlyOwner {\n        MINIMUM = _minimum;\n    }\n    \n    function updatePeriod(uint256 _period) external onlyOwner {\n        PERIOD = _period;\n    }\n\n    function updateDailyBakerRate(uint256 _rate) external onlyOwner {\n        DAILY_BAKER_RATE = _rate;\n    }\n\n    function updateDailyAlphaRate(uint256 _rate) external onlyOwner {\n        DAILY_ALPHA_RATE = _rate;\n    }\n    \n    function updateTaxRates(uint8 _foodieRate, uint8 _vetRate) external onlyOwner {\n        FOODIE_TAX_RATE = _foodieRate;\n        SHOP_OWNER_TAX_RATE = _vetRate;\n    }\n\n    function updatePYEFillings(uint256 dudPYE, uint256 filledPYE, uint256 goldenTicketPYE) external onlyOwner {\n        pyeFilling[1] = dudPYE;\n        pyeFilling[2] = filledPYE;\n        pyeFilling[3] = goldenTicketPYE;\n    }\n    \n    function updatePYECost(uint256 _cost) external onlyOwner {\n        PYE_COST = _cost;\n    }\n\n    function updateSeedCost(uint256 _cost) external onlyOwner {\n        SEED_COST = _cost;\n    }\n\n    function closeSeasonEearnings(uint80 _timestamp) external onlyOwner {\n        claimEndTime = _timestamp;\n    }\n}"
23     },
24     "contracts/interfaces/IRandomizer.sol": {
25       "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\ninterface IRandomizer {\n    function requestRandomWords() external returns (uint256);\n    function requestManyRandomWords(uint256 numWords) external returns (uint256);\n    function getRandomWords(uint256 number) external returns (uint256[] memory);\n    function getRemainingWords() external view returns (uint256);\n}"
26     },
27     "contracts/interfaces/IPYEMarket.sol": {
28       "content": "// SPDX-License-Identifier: MIT LICENSE \n\npragma solidity ^0.8.0;\n\ninterface IPYEMarket {\n  function addManyToStakingPool(address account, uint16[] calldata tokenIds) external;\n  function isOwner(uint16 tokenId, address owner) external view returns (bool);\n}"
29     },
30     "contracts/interfaces/IHub.sol": {
31       "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\ninterface IHub {\n    function emitGenesisStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitAlphaStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitGenesisUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitAlphaUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitTopiaClaimed(address owner, uint256 amount) external;\n    function balanceOf(address owner) external view returns (uint256);\n}"
32     },
33     "contracts/interfaces/ITOPIA.sol": {
34       "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\ninterface ITOPIA {\n    function mint(address to, uint256 amount) external;\n    function burn(uint256 amount) external;\n    function burnFrom(address from, uint256 amount) external;\n    function updateOriginAccess() external;\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\n}"
35     },
36     "contracts/interfaces/INFT.sol": {
37       "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface INFT is IERC721Enumerable {\n    \n}"
38     },
39     "@openzeppelin/contracts/security/Pausable.sol": {
40       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
41     },
42     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
43       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
44     },
45     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
46       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
47     },
48     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
49       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
50     },
51     "@openzeppelin/contracts/access/Ownable.sol": {
52       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
53     },
54     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
55       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
56     },
57     "@openzeppelin/contracts/utils/Context.sol": {
58       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
59     },
60     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
61       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
62     },
63     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
64       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
65     }
66   }
67 }}