1 {{
2   "language": "Solidity",
3   "sources": {
4     "Safuchain.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./IGovernanceToken.sol\";\r\nimport \"./ITaxHandler.sol\";\r\nimport \"./ITreasuryHandler.sol\";\r\n\r\n/**\r\n * @title Safuchain token contract\r\n * @dev The Safuchain token has modular systems for tax and treasury handler as well as governance capabilities.\r\n */\r\ncontract Safuchain is IERC20, IGovernanceToken, Ownable {\r\n    /// @dev Registry of user token balances.\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /// @dev Registry of addresses users have given allowances to.\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    /// @notice Registry of user delegates for governance.\r\n    mapping(address => address) public delegates;\r\n\r\n    /// @notice Registry of nonces for vote delegation.\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice Registry of the number of balance checkpoints an account has.\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice Registry of balance checkpoints per account.\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain.\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice The contract implementing tax calculations.\r\n    ITaxHandler public taxHandler;\r\n\r\n    /// @notice The contract that performs treasury-related operations.\r\n    ITreasuryHandler public treasuryHandler;\r\n\r\n    /// @notice Emitted when the tax handler contract is changed.\r\n    event TaxHandlerChanged(address oldAddress, address newAddress);\r\n\r\n    /// @notice Emitted when the treasury handler contract is changed.\r\n    event TreasuryHandlerChanged(address oldAddress, address newAddress);\r\n\r\n    /// @dev Name of the token.\r\n    string private _name;\r\n\r\n    /// @dev Symbol of the token.\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @param name_ Name of the token.\r\n     * @param symbol_ Symbol of the token.\r\n     * @param taxHandlerAddress Initial tax handler contract.\r\n     * @param treasuryHandlerAddress Initial treasury handler contract.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address taxHandlerAddress,\r\n        address treasuryHandlerAddress\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        taxHandler = ITaxHandler(taxHandlerAddress);\r\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\r\n\r\n        _balances[_msgSender()] = totalSupply();\r\n\r\n        emit Transfer(address(0), _msgSender(), totalSupply());\r\n    }\r\n\r\n    /**\r\n     * @notice Get token name.\r\n     * @return Name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @notice Get token symbol.\r\n     * @return Symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @notice Get number of decimals used by the token.\r\n     * @return Number of decimals used by the token.\r\n     */\r\n    function decimals() external pure returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the maximum number of tokens.\r\n     * @return The maximum number of tokens that will ever be in existence.\r\n     */\r\n    function totalSupply() public pure override returns (uint256) {\r\n        // Ten billion, i.e., 10,000,000,000 tokens.\r\n        return 1e10 * 1e9;\r\n    }\r\n\r\n    /**\r\n     * @notice Get token balance of given given account.\r\n     * @param account Address to retrieve balance for.\r\n     * @return The number of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from caller's address to another.\r\n     * @param recipient Address to send the caller's tokens to.\r\n     * @param amount The number of tokens to transfer to recipient.\r\n     * @return True if transfer succeeds, else an error is raised.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the allowance `owner` has given `spender`.\r\n     * @param owner The address on behalf of whom tokens can be spent by `spender`.\r\n     * @param spender The address authorized to spend tokens on behalf of `owner`.\r\n     * @return The allowance `owner` has given `spender`.\r\n     */\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve address to spend caller's tokens.\r\n     * @dev This method can be exploited by malicious spenders if their allowance is already non-zero. See the following\r\n     * document for details: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit.\r\n     * Ensure the spender can be trusted before calling this method if they've already been approved before. Otherwise\r\n     * use either the `increaseAllowance`/`decreaseAllowance` functions, or first set their allowance to zero, before\r\n     * setting a new allowance.\r\n     * @param spender Address to authorize for token expenditure.\r\n     * @param amount The number of tokens `spender` is allowed to spend.\r\n     * @return True if the approval succeeds, else an error is raised.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another.\r\n     * @param sender Address to move tokens from.\r\n     * @param recipient Address to send the caller's tokens to.\r\n     * @param amount The number of tokens to transfer to recipient.\r\n     * @return True if the transfer succeeds, else an error is raised.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"SAFUCHAIN:transferFrom:ALLOWANCE_EXCEEDED: Transfer amount exceeds allowance.\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increase spender's allowance.\r\n     * @param spender Address of user authorized to spend caller's tokens.\r\n     * @param addedValue The number of tokens to add to `spender`'s allowance.\r\n     * @return True if the allowance is successfully increased, else an error is raised.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease spender's allowance.\r\n     * @param spender Address of user authorized to spend caller's tokens.\r\n     * @param subtractedValue The number of tokens to remove from `spender`'s allowance.\r\n     * @return True if the allowance is successfully decreased, else an error is raised.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"SAFUCHAIN:decreaseAllowance:ALLOWANCE_UNDERFLOW: Subtraction results in sub-zero allowance.\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes to given address.\r\n     * @dev It should be noted that users that want to vote themselves, also need to call this method, albeit with their\r\n     * own address.\r\n     * @param delegatee Address to delegate votes to.\r\n     */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from signatory to `delegatee`.\r\n     * @param delegatee The address to delegate votes to.\r\n     * @param nonce The contract state required to match the signature.\r\n     * @param expiry The time at which to expire the signature.\r\n     * @param v The recovery byte of the signature.\r\n     * @param r Half of the ECDSA signature pair.\r\n     * @param s Half of the ECDSA signature pair.\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), block.chainid, address(this))\r\n        );\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n\r\n        require(signatory != address(0), \"SAFUCHAIN:delegateBySig:INVALID_SIGNATURE: Received signature was invalid.\");\r\n        require(block.timestamp <= expiry, \"SAFUCHAIN:delegateBySig:EXPIRED_SIGNATURE: Received signature has expired.\");\r\n        require(nonce == nonces[signatory]++, \"SAFUCHAIN:delegateBySig:INVALID_NONCE: Received nonce was invalid.\");\r\n\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the number of votes for an account as of a block number.\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check.\r\n     * @param blockNumber The block number to get the vote balance at.\r\n     * @return The number of votes the account had as of the given block.\r\n     */\r\n    function getVotesAtBlock(address account, uint32 blockNumber) public view returns (uint224) {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"SAFUCHAIN:getVotesAtBlock:FUTURE_BLOCK: Cannot get votes at a block in the future.\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance.\r\n        if (checkpoints[account][nCheckpoints - 1].blockNumber <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance.\r\n        if (checkpoints[account][0].blockNumber > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        // Perform binary search.\r\n        uint32 lowerBound = 0;\r\n        uint32 upperBound = nCheckpoints - 1;\r\n        while (upperBound > lowerBound) {\r\n            uint32 center = upperBound - (upperBound - lowerBound) / 2;\r\n            Checkpoint memory checkpoint = checkpoints[account][center];\r\n\r\n            if (checkpoint.blockNumber == blockNumber) {\r\n                return checkpoint.votes;\r\n            } else if (checkpoint.blockNumber < blockNumber) {\r\n                lowerBound = center;\r\n            } else {\r\n                upperBound = center - 1;\r\n            }\r\n        }\r\n\r\n        // No exact block found. Use last known balance before that block number.\r\n        return checkpoints[account][lowerBound].votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Set new tax handler contract.\r\n     * @param taxHandlerAddress Address of new tax handler contract.\r\n     */\r\n    function setTaxHandler(address taxHandlerAddress) external onlyOwner {\r\n        address oldTaxHandlerAddress = address(taxHandler);\r\n        taxHandler = ITaxHandler(taxHandlerAddress);\r\n\r\n        emit TaxHandlerChanged(oldTaxHandlerAddress, taxHandlerAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set new treasury handler contract.\r\n     * @param treasuryHandlerAddress Address of new treasury handler contract.\r\n     */\r\n    function setTreasuryHandler(address treasuryHandlerAddress) external onlyOwner {\r\n        address oldTreasuryHandlerAddress = address(treasuryHandler);\r\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\r\n\r\n        emit TreasuryHandlerChanged(oldTreasuryHandlerAddress, treasuryHandlerAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from one address to another.\r\n     * @param delegator Address from which to delegate votes for.\r\n     * @param delegatee Address to delegate votes to.\r\n     */\r\n    function _delegate(address delegator, address delegatee) private {\r\n        address currentDelegate = delegates[delegator];\r\n        uint256 delegatorBalance = _balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, uint224(delegatorBalance));\r\n    }\r\n\r\n    /**\r\n     * @notice Move delegates from one address to another.\r\n     * @param from Representative to move delegates from.\r\n     * @param to Representative to move delegates to.\r\n     * @param amount Number of delegates to move.\r\n     */\r\n    function _moveDelegates(\r\n        address from,\r\n        address to,\r\n        uint224 amount\r\n    ) private {\r\n        // No need to update checkpoints if the votes don't actually move between different delegates. This can be the\r\n        // case where tokens are transferred between two parties that have delegated their votes to the same address.\r\n        if (from == to) {\r\n            return;\r\n        }\r\n\r\n        // Some users preemptively delegate their votes (i.e. before they have any tokens). No need to perform an update\r\n        // to the checkpoints in that case.\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (from != address(0)) {\r\n            uint32 fromRepNum = numCheckpoints[from];\r\n            uint224 fromRepOld = fromRepNum > 0 ? checkpoints[from][fromRepNum - 1].votes : 0;\r\n            uint224 fromRepNew = fromRepOld - amount;\r\n\r\n            _writeCheckpoint(from, fromRepNum, fromRepOld, fromRepNew);\r\n        }\r\n\r\n        if (to != address(0)) {\r\n            uint32 toRepNum = numCheckpoints[to];\r\n            uint224 toRepOld = toRepNum > 0 ? checkpoints[to][toRepNum - 1].votes : 0;\r\n            uint224 toRepNew = toRepOld + amount;\r\n\r\n            _writeCheckpoint(to, toRepNum, toRepOld, toRepNew);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Write balance checkpoint to chain.\r\n     * @param delegatee The address to write the checkpoint for.\r\n     * @param nCheckpoints The number of checkpoints `delegatee` already has.\r\n     * @param oldVotes Number of votes prior to this checkpoint.\r\n     * @param newVotes Number of votes `delegatee` now has.\r\n     */\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint224 oldVotes,\r\n        uint224 newVotes\r\n    ) private {\r\n        uint32 blockNumber = uint32(block.number);\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].blockNumber == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve spender on behalf of owner.\r\n     * @param owner Address on behalf of whom tokens can be spent by `spender`.\r\n     * @param spender Address to authorize for token expenditure.\r\n     * @param amount The number of tokens `spender` is allowed to spend.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"SAFUCHAIN:_approve:OWNER_ZERO: Cannot approve for the zero address.\");\r\n        require(spender != address(0), \"SAFUCHAIN:_approve:SPENDER_ZERO: Cannot approve to the zero address.\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from account `from` to account `to`.\r\n     * @param from Address the tokens are moved out of.\r\n     * @param to Address the tokens are moved to.\r\n     * @param amount The number of tokens to transfer.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"SAFUCHAIN:_transfer:FROM_ZERO: Cannot transfer from the zero address.\");\r\n        require(to != address(0), \"SAFUCHAIN:_transfer:TO_ZERO: Cannot transfer to the zero address.\");\r\n        require(amount > 0, \"SAFUCHAIN:_transfer:ZERO_AMOUNT: Transfer amount must be greater than zero.\");\r\n        require(amount <= _balances[from], \"SAFUCHAIN:_transfer:INSUFFICIENT_BALANCE: Transfer amount exceeds balance.\");\r\n\r\n        treasuryHandler.beforeTransferHandler(from, to, amount);\r\n\r\n        uint256 tax = taxHandler.getTax(from, to, amount);\r\n        uint256 taxedAmount = amount - tax;\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += taxedAmount;\r\n        _moveDelegates(delegates[from], delegates[to], uint224(taxedAmount));\r\n\r\n        if (tax > 0) {\r\n            _balances[address(treasuryHandler)] += tax;\r\n\r\n            _moveDelegates(delegates[from], delegates[address(treasuryHandler)], uint224(tax));\r\n\r\n            emit Transfer(from, address(treasuryHandler), tax);\r\n        }\r\n\r\n        treasuryHandler.afterTransferHandler(from, to, amount);\r\n\r\n        emit Transfer(from, to, taxedAmount);\r\n    }\r\n}"
6     },
7     "ITreasuryHandler.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Treasury handler interface\r\n * @dev Any class that implements this interface can be used for protocol-specific operations pertaining to the treasury.\r\n */\r\ninterface ITreasuryHandler {\r\n    /**\r\n     * @notice Perform operations before a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function beforeTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Perform operations after a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function afterTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n}"
9     },
10     "ITaxHandler.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Tax handler interface\r\n * @dev Any class that implements this interface can be used for protocol-specific tax calculations.\r\n */\r\ninterface ITaxHandler {\r\n    /**\r\n     * @notice Get number of tokens to pay as tax.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     * @return Number of tokens to pay as tax.\r\n     */\r\n    function getTax(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n}"
12     },
13     "IGovernanceToken.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Governance token interface.\r\n */\r\ninterface IGovernanceToken {\r\n    /// @notice A checkpoint for marking number of votes as of a given block.\r\n    struct Checkpoint {\r\n        // The 32-bit unsigned integer is valid until these estimated dates for these given chains:\r\n        //  - BSC: Sat Dec 23 2428 18:23:11 UTC\r\n        //  - ETH: Tue Apr 18 3826 09:27:12 UTC\r\n        // This assumes that block mining rates don't speed up.\r\n        uint32 blockNumber;\r\n        // This type is set to `uint224` for optimizations purposes (i.e., specifically to fit in a 32-byte block). It\r\n        // assumes that the number of votes for the implementing governance token never exceeds the maximum value for a\r\n        // 224-bit number.\r\n        uint224 votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the number of votes for an account as of a block number.\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check.\r\n     * @param blockNumber The block number to get the vote balance at.\r\n     * @return The number of votes the account had as of the given block.\r\n     */\r\n    function getVotesAtBlock(address account, uint32 blockNumber) external view returns (uint224);\r\n\r\n    /// @notice Emitted whenever a new delegate is set for an account.\r\n    event DelegateChanged(address delegator, address currentDelegate, address newDelegate);\r\n\r\n    /// @notice Emitted when a delegate's vote count changes.\r\n    event DelegateVotesChanged(address delegatee, uint224 oldVotes, uint224 newVotes);\r\n}"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     }
43   }
44 }}