1 
2 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
3 
4 pragma solidity ^0.5.4;
5 
6 interface IntVoteInterface {
7     //When implementing this interface please do not only override function and modifier,
8     //but also to keep the modifiers on the overridden functions.
9     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
10     modifier votable(bytes32 _proposalId) {revert(); _;}
11 
12     event NewProposal(
13         bytes32 indexed _proposalId,
14         address indexed _organization,
15         uint256 _numOfChoices,
16         address _proposer,
17         bytes32 _paramsHash
18     );
19 
20     event ExecuteProposal(bytes32 indexed _proposalId,
21         address indexed _organization,
22         uint256 _decision,
23         uint256 _totalReputation
24     );
25 
26     event VoteProposal(
27         bytes32 indexed _proposalId,
28         address indexed _organization,
29         address indexed _voter,
30         uint256 _vote,
31         uint256 _reputation
32     );
33 
34     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
35     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
36 
37     /**
38      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
39      * generated by calculating keccak256 of a incremented counter.
40      * @param _numOfChoices number of voting choices
41      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
42      * @param _proposer address
43      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
44      * @return proposal's id.
45      */
46     function propose(
47         uint256 _numOfChoices,
48         bytes32 _proposalParameters,
49         address _proposer,
50         address _organization
51         ) external returns(bytes32);
52 
53     function vote(
54         bytes32 _proposalId,
55         uint256 _vote,
56         uint256 _rep,
57         address _voter
58     )
59     external
60     returns(bool);
61 
62     function cancelVote(bytes32 _proposalId) external;
63 
64     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
65 
66     function isVotable(bytes32 _proposalId) external view returns(bool);
67 
68     /**
69      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
70      * @param _proposalId the ID of the proposal
71      * @param _choice the index in the
72      * @return voted reputation for the given choice
73      */
74     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
75 
76     /**
77      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
78      * @return bool true or false
79      */
80     function isAbstainAllow() external pure returns(bool);
81 
82     /**
83      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
84      * @return min - minimum number of choices
85                max - maximum number of choices
86      */
87     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
88 }
89 
90 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
91 
92 pragma solidity ^0.5.2;
93 
94 /**
95  * @title ERC20 interface
96  * @dev see https://eips.ethereum.org/EIPS/eip-20
97  */
98 interface IERC20 {
99     function transfer(address to, uint256 value) external returns (bool);
100 
101     function approve(address spender, uint256 value) external returns (bool);
102 
103     function transferFrom(address from, address to, uint256 value) external returns (bool);
104 
105     function totalSupply() external view returns (uint256);
106 
107     function balanceOf(address who) external view returns (uint256);
108 
109     function allowance(address owner, address spender) external view returns (uint256);
110 
111     event Transfer(address indexed from, address indexed to, uint256 value);
112 
113     event Approval(address indexed owner, address indexed spender, uint256 value);
114 }
115 
116 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
117 
118 pragma solidity ^0.5.4;
119 
120 
121 interface VotingMachineCallbacksInterface {
122     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
123     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
124 
125     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
126     external
127     returns(bool);
128 
129     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
130     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
131     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
132 }
133 
134 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
135 
136 pragma solidity ^0.5.2;
137 
138 /**
139  * @title Ownable
140  * @dev The Ownable contract has an owner address, and provides basic authorization control
141  * functions, this simplifies the implementation of "user permissions".
142  */
143 contract Ownable {
144     address private _owner;
145 
146     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
147 
148     /**
149      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
150      * account.
151      */
152     constructor () internal {
153         _owner = msg.sender;
154         emit OwnershipTransferred(address(0), _owner);
155     }
156 
157     /**
158      * @return the address of the owner.
159      */
160     function owner() public view returns (address) {
161         return _owner;
162     }
163 
164     /**
165      * @dev Throws if called by any account other than the owner.
166      */
167     modifier onlyOwner() {
168         require(isOwner());
169         _;
170     }
171 
172     /**
173      * @return true if `msg.sender` is the owner of the contract.
174      */
175     function isOwner() public view returns (bool) {
176         return msg.sender == _owner;
177     }
178 
179     /**
180      * @dev Allows the current owner to relinquish control of the contract.
181      * It will not be possible to call the functions with the `onlyOwner`
182      * modifier anymore.
183      * @notice Renouncing ownership will leave the contract without an owner,
184      * thereby removing any functionality that is only available to the owner.
185      */
186     function renounceOwnership() public onlyOwner {
187         emit OwnershipTransferred(_owner, address(0));
188         _owner = address(0);
189     }
190 
191     /**
192      * @dev Allows the current owner to transfer control of the contract to a newOwner.
193      * @param newOwner The address to transfer ownership to.
194      */
195     function transferOwnership(address newOwner) public onlyOwner {
196         _transferOwnership(newOwner);
197     }
198 
199     /**
200      * @dev Transfers control of the contract to a newOwner.
201      * @param newOwner The address to transfer ownership to.
202      */
203     function _transferOwnership(address newOwner) internal {
204         require(newOwner != address(0));
205         emit OwnershipTransferred(_owner, newOwner);
206         _owner = newOwner;
207     }
208 }
209 
210 // File: @daostack/infra/contracts/Reputation.sol
211 
212 pragma solidity ^0.5.4;
213 
214 
215 
216 /**
217  * @title Reputation system
218  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
219  * A reputation is use to assign influence measure to a DAO'S peers.
220  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
221  * The Reputation contract maintain a map of address to reputation value.
222  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
223  */
224 
225 contract Reputation is Ownable {
226 
227     uint8 public decimals = 18;             //Number of decimals of the smallest unit
228     // Event indicating minting of reputation to an address.
229     event Mint(address indexed _to, uint256 _amount);
230     // Event indicating burning of reputation for an address.
231     event Burn(address indexed _from, uint256 _amount);
232 
233       /// @dev `Checkpoint` is the structure that attaches a block number to a
234       ///  given value, the block number attached is the one that last changed the
235       ///  value
236     struct Checkpoint {
237 
238     // `fromBlock` is the block number that the value was generated from
239         uint128 fromBlock;
240 
241           // `value` is the amount of reputation at a specific block number
242         uint128 value;
243     }
244 
245       // `balances` is the map that tracks the balance of each address, in this
246       //  contract when the balance changes the block number that the change
247       //  occurred is also included in the map
248     mapping (address => Checkpoint[]) balances;
249 
250       // Tracks the history of the `totalSupply` of the reputation
251     Checkpoint[] totalSupplyHistory;
252 
253     /// @notice Constructor to create a Reputation
254     constructor(
255     ) public
256     {
257     }
258 
259     /// @dev This function makes it easy to get the total number of reputation
260     /// @return The total number of reputation
261     function totalSupply() public view returns (uint256) {
262         return totalSupplyAt(block.number);
263     }
264 
265   ////////////////
266   // Query balance and totalSupply in History
267   ////////////////
268     /**
269     * @dev return the reputation amount of a given owner
270     * @param _owner an address of the owner which we want to get his reputation
271     */
272     function balanceOf(address _owner) public view returns (uint256 balance) {
273         return balanceOfAt(_owner, block.number);
274     }
275 
276       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
277       /// @param _owner The address from which the balance will be retrieved
278       /// @param _blockNumber The block number when the balance is queried
279       /// @return The balance at `_blockNumber`
280     function balanceOfAt(address _owner, uint256 _blockNumber)
281     public view returns (uint256)
282     {
283         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
284             return 0;
285           // This will return the expected balance during normal situations
286         } else {
287             return getValueAt(balances[_owner], _blockNumber);
288         }
289     }
290 
291       /// @notice Total amount of reputation at a specific `_blockNumber`.
292       /// @param _blockNumber The block number when the totalSupply is queried
293       /// @return The total amount of reputation at `_blockNumber`
294     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
295         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
296             return 0;
297           // This will return the expected totalSupply during normal situations
298         } else {
299             return getValueAt(totalSupplyHistory, _blockNumber);
300         }
301     }
302 
303       /// @notice Generates `_amount` reputation that are assigned to `_owner`
304       /// @param _user The address that will be assigned the new reputation
305       /// @param _amount The quantity of reputation generated
306       /// @return True if the reputation are generated correctly
307     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
308         uint256 curTotalSupply = totalSupply();
309         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
310         uint256 previousBalanceTo = balanceOf(_user);
311         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
312         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
313         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
314         emit Mint(_user, _amount);
315         return true;
316     }
317 
318       /// @notice Burns `_amount` reputation from `_owner`
319       /// @param _user The address that will lose the reputation
320       /// @param _amount The quantity of reputation to burn
321       /// @return True if the reputation are burned correctly
322     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
323         uint256 curTotalSupply = totalSupply();
324         uint256 amountBurned = _amount;
325         uint256 previousBalanceFrom = balanceOf(_user);
326         if (previousBalanceFrom < amountBurned) {
327             amountBurned = previousBalanceFrom;
328         }
329         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
330         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
331         emit Burn(_user, amountBurned);
332         return true;
333     }
334 
335   ////////////////
336   // Internal helper functions to query and set a value in a snapshot array
337   ////////////////
338 
339       /// @dev `getValueAt` retrieves the number of reputation at a given block number
340       /// @param checkpoints The history of values being queried
341       /// @param _block The block number to retrieve the value at
342       /// @return The number of reputation being queried
343     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
344         if (checkpoints.length == 0) {
345             return 0;
346         }
347 
348           // Shortcut for the actual value
349         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
350             return checkpoints[checkpoints.length-1].value;
351         }
352         if (_block < checkpoints[0].fromBlock) {
353             return 0;
354         }
355 
356           // Binary search of the value in the array
357         uint256 min = 0;
358         uint256 max = checkpoints.length-1;
359         while (max > min) {
360             uint256 mid = (max + min + 1) / 2;
361             if (checkpoints[mid].fromBlock<=_block) {
362                 min = mid;
363             } else {
364                 max = mid-1;
365             }
366         }
367         return checkpoints[min].value;
368     }
369 
370       /// @dev `updateValueAtNow` used to update the `balances` map and the
371       ///  `totalSupplyHistory`
372       /// @param checkpoints The history of data being updated
373       /// @param _value The new number of reputation
374     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
375         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
376         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
377             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
378             newCheckPoint.fromBlock = uint128(block.number);
379             newCheckPoint.value = uint128(_value);
380         } else {
381             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
382             oldCheckPoint.value = uint128(_value);
383         }
384     }
385 }
386 
387 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
388 
389 pragma solidity ^0.5.2;
390 
391 /**
392  * @title SafeMath
393  * @dev Unsigned math operations with safety checks that revert on error
394  */
395 library SafeMath {
396     /**
397      * @dev Multiplies two unsigned integers, reverts on overflow.
398      */
399     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
400         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
401         // benefit is lost if 'b' is also tested.
402         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
403         if (a == 0) {
404             return 0;
405         }
406 
407         uint256 c = a * b;
408         require(c / a == b);
409 
410         return c;
411     }
412 
413     /**
414      * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
415      */
416     function div(uint256 a, uint256 b) internal pure returns (uint256) {
417         // Solidity only automatically asserts when dividing by 0
418         require(b > 0);
419         uint256 c = a / b;
420         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
421 
422         return c;
423     }
424 
425     /**
426      * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
427      */
428     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
429         require(b <= a);
430         uint256 c = a - b;
431 
432         return c;
433     }
434 
435     /**
436      * @dev Adds two unsigned integers, reverts on overflow.
437      */
438     function add(uint256 a, uint256 b) internal pure returns (uint256) {
439         uint256 c = a + b;
440         require(c >= a);
441 
442         return c;
443     }
444 
445     /**
446      * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
447      * reverts when dividing by zero.
448      */
449     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
450         require(b != 0);
451         return a % b;
452     }
453 }
454 
455 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
456 
457 pragma solidity ^0.5.2;
458 
459 
460 
461 /**
462  * @title Standard ERC20 token
463  *
464  * @dev Implementation of the basic standard token.
465  * https://eips.ethereum.org/EIPS/eip-20
466  * Originally based on code by FirstBlood:
467  * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
468  *
469  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for
470  * all accounts just by listening to said events. Note that this isn't required by the specification, and other
471  * compliant implementations may not do it.
472  */
473 contract ERC20 is IERC20 {
474     using SafeMath for uint256;
475 
476     mapping (address => uint256) private _balances;
477 
478     mapping (address => mapping (address => uint256)) private _allowed;
479 
480     uint256 private _totalSupply;
481 
482     /**
483      * @dev Total number of tokens in existence
484      */
485     function totalSupply() public view returns (uint256) {
486         return _totalSupply;
487     }
488 
489     /**
490      * @dev Gets the balance of the specified address.
491      * @param owner The address to query the balance of.
492      * @return A uint256 representing the amount owned by the passed address.
493      */
494     function balanceOf(address owner) public view returns (uint256) {
495         return _balances[owner];
496     }
497 
498     /**
499      * @dev Function to check the amount of tokens that an owner allowed to a spender.
500      * @param owner address The address which owns the funds.
501      * @param spender address The address which will spend the funds.
502      * @return A uint256 specifying the amount of tokens still available for the spender.
503      */
504     function allowance(address owner, address spender) public view returns (uint256) {
505         return _allowed[owner][spender];
506     }
507 
508     /**
509      * @dev Transfer token to a specified address
510      * @param to The address to transfer to.
511      * @param value The amount to be transferred.
512      */
513     function transfer(address to, uint256 value) public returns (bool) {
514         _transfer(msg.sender, to, value);
515         return true;
516     }
517 
518     /**
519      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
520      * Beware that changing an allowance with this method brings the risk that someone may use both the old
521      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
522      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
523      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
524      * @param spender The address which will spend the funds.
525      * @param value The amount of tokens to be spent.
526      */
527     function approve(address spender, uint256 value) public returns (bool) {
528         _approve(msg.sender, spender, value);
529         return true;
530     }
531 
532     /**
533      * @dev Transfer tokens from one address to another.
534      * Note that while this function emits an Approval event, this is not required as per the specification,
535      * and other compliant implementations may not emit the event.
536      * @param from address The address which you want to send tokens from
537      * @param to address The address which you want to transfer to
538      * @param value uint256 the amount of tokens to be transferred
539      */
540     function transferFrom(address from, address to, uint256 value) public returns (bool) {
541         _transfer(from, to, value);
542         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
543         return true;
544     }
545 
546     /**
547      * @dev Increase the amount of tokens that an owner allowed to a spender.
548      * approve should be called when _allowed[msg.sender][spender] == 0. To increment
549      * allowed value is better to use this function to avoid 2 calls (and wait until
550      * the first transaction is mined)
551      * From MonolithDAO Token.sol
552      * Emits an Approval event.
553      * @param spender The address which will spend the funds.
554      * @param addedValue The amount of tokens to increase the allowance by.
555      */
556     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
557         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
558         return true;
559     }
560 
561     /**
562      * @dev Decrease the amount of tokens that an owner allowed to a spender.
563      * approve should be called when _allowed[msg.sender][spender] == 0. To decrement
564      * allowed value is better to use this function to avoid 2 calls (and wait until
565      * the first transaction is mined)
566      * From MonolithDAO Token.sol
567      * Emits an Approval event.
568      * @param spender The address which will spend the funds.
569      * @param subtractedValue The amount of tokens to decrease the allowance by.
570      */
571     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
572         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
573         return true;
574     }
575 
576     /**
577      * @dev Transfer token for a specified addresses
578      * @param from The address to transfer from.
579      * @param to The address to transfer to.
580      * @param value The amount to be transferred.
581      */
582     function _transfer(address from, address to, uint256 value) internal {
583         require(to != address(0));
584 
585         _balances[from] = _balances[from].sub(value);
586         _balances[to] = _balances[to].add(value);
587         emit Transfer(from, to, value);
588     }
589 
590     /**
591      * @dev Internal function that mints an amount of the token and assigns it to
592      * an account. This encapsulates the modification of balances such that the
593      * proper events are emitted.
594      * @param account The account that will receive the created tokens.
595      * @param value The amount that will be created.
596      */
597     function _mint(address account, uint256 value) internal {
598         require(account != address(0));
599 
600         _totalSupply = _totalSupply.add(value);
601         _balances[account] = _balances[account].add(value);
602         emit Transfer(address(0), account, value);
603     }
604 
605     /**
606      * @dev Internal function that burns an amount of the token of a given
607      * account.
608      * @param account The account whose tokens will be burnt.
609      * @param value The amount that will be burnt.
610      */
611     function _burn(address account, uint256 value) internal {
612         require(account != address(0));
613 
614         _totalSupply = _totalSupply.sub(value);
615         _balances[account] = _balances[account].sub(value);
616         emit Transfer(account, address(0), value);
617     }
618 
619     /**
620      * @dev Approve an address to spend another addresses' tokens.
621      * @param owner The address that owns the tokens.
622      * @param spender The address that will spend the tokens.
623      * @param value The number of tokens that can be spent.
624      */
625     function _approve(address owner, address spender, uint256 value) internal {
626         require(spender != address(0));
627         require(owner != address(0));
628 
629         _allowed[owner][spender] = value;
630         emit Approval(owner, spender, value);
631     }
632 
633     /**
634      * @dev Internal function that burns an amount of the token of a given
635      * account, deducting from the sender's allowance for said account. Uses the
636      * internal burn function.
637      * Emits an Approval event (reflecting the reduced allowance).
638      * @param account The account whose tokens will be burnt.
639      * @param value The amount that will be burnt.
640      */
641     function _burnFrom(address account, uint256 value) internal {
642         _burn(account, value);
643         _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
644     }
645 }
646 
647 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
648 
649 pragma solidity ^0.5.2;
650 
651 
652 /**
653  * @title Burnable Token
654  * @dev Token that can be irreversibly burned (destroyed).
655  */
656 contract ERC20Burnable is ERC20 {
657     /**
658      * @dev Burns a specific amount of tokens.
659      * @param value The amount of token to be burned.
660      */
661     function burn(uint256 value) public {
662         _burn(msg.sender, value);
663     }
664 
665     /**
666      * @dev Burns a specific amount of tokens from the target address and decrements allowance
667      * @param from address The account whose tokens will be burned.
668      * @param value uint256 The amount of token to be burned.
669      */
670     function burnFrom(address from, uint256 value) public {
671         _burnFrom(from, value);
672     }
673 }
674 
675 // File: contracts/controller/DAOToken.sol
676 
677 pragma solidity ^0.5.4;
678 
679 
680 
681 
682 
683 /**
684  * @title DAOToken, base on zeppelin contract.
685  * @dev ERC20 compatible token. It is a mintable, burnable token.
686  */
687 
688 contract DAOToken is ERC20, ERC20Burnable, Ownable {
689 
690     string public name;
691     string public symbol;
692     // solhint-disable-next-line const-name-snakecase
693     uint8 public constant decimals = 18;
694     uint256 public cap;
695 
696     /**
697     * @dev Constructor
698     * @param _name - token name
699     * @param _symbol - token symbol
700     * @param _cap - token cap - 0 value means no cap
701     */
702     constructor(string memory _name, string memory _symbol, uint256 _cap)
703     public {
704         name = _name;
705         symbol = _symbol;
706         cap = _cap;
707     }
708 
709     /**
710      * @dev Function to mint tokens
711      * @param _to The address that will receive the minted tokens.
712      * @param _amount The amount of tokens to mint.
713      */
714     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
715         if (cap > 0)
716             require(totalSupply().add(_amount) <= cap);
717         _mint(_to, _amount);
718         return true;
719     }
720 }
721 
722 // File: openzeppelin-solidity/contracts/utils/Address.sol
723 
724 pragma solidity ^0.5.2;
725 
726 /**
727  * Utility library of inline functions on addresses
728  */
729 library Address {
730     /**
731      * Returns whether the target address is a contract
732      * @dev This function will return false if invoked during the constructor of a contract,
733      * as the code is not actually created until after the constructor finishes.
734      * @param account address of the account to check
735      * @return whether the target address is a contract
736      */
737     function isContract(address account) internal view returns (bool) {
738         uint256 size;
739         // XXX Currently there is no better way to check if there is a contract in an address
740         // than to check the size of the code at that address.
741         // See https://ethereum.stackexchange.com/a/14016/36603
742         // for more details about how this works.
743         // TODO Check this again before the Serenity release, because all addresses will be
744         // contracts then.
745         // solhint-disable-next-line no-inline-assembly
746         assembly { size := extcodesize(account) }
747         return size > 0;
748     }
749 }
750 
751 // File: contracts/libs/SafeERC20.sol
752 
753 /*
754 
755 SafeERC20 by daostack.
756 The code is based on a fix by SECBIT Team.
757 
758 USE WITH CAUTION & NO WARRANTY
759 
760 REFERENCE & RELATED READING
761 - https://github.com/ethereum/solidity/issues/4116
762 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
763 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
764 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
765 
766 */
767 pragma solidity ^0.5.4;
768 
769 
770 
771 library SafeERC20 {
772     using Address for address;
773 
774     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
775     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
776     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
777 
778     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
779 
780         // Must be a contract addr first!
781         require(_erc20Addr.isContract());
782 
783         (bool success, bytes memory returnValue) =
784         // solhint-disable-next-line avoid-low-level-calls
785         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
786         // call return false when something wrong
787         require(success);
788         //check return value
789         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
790     }
791 
792     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
793 
794         // Must be a contract addr first!
795         require(_erc20Addr.isContract());
796 
797         (bool success, bytes memory returnValue) =
798         // solhint-disable-next-line avoid-low-level-calls
799         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
800         // call return false when something wrong
801         require(success);
802         //check return value
803         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
804     }
805 
806     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
807 
808         // Must be a contract addr first!
809         require(_erc20Addr.isContract());
810 
811         // safeApprove should only be called when setting an initial allowance,
812         // or when resetting it to zero.
813         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
814 
815         (bool success, bytes memory returnValue) =
816         // solhint-disable-next-line avoid-low-level-calls
817         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
818         // call return false when something wrong
819         require(success);
820         //check return value
821         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
822     }
823 }
824 
825 // File: contracts/controller/Avatar.sol
826 
827 pragma solidity ^0.5.4;
828 
829 
830 
831 
832 
833 
834 
835 /**
836  * @title An Avatar holds tokens, reputation and ether for a controller
837  */
838 contract Avatar is Ownable {
839     using SafeERC20 for address;
840 
841     string public orgName;
842     DAOToken public nativeToken;
843     Reputation public nativeReputation;
844 
845     event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
846     event SendEther(uint256 _amountInWei, address indexed _to);
847     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
848     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
849     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
850     event ReceiveEther(address indexed _sender, uint256 _value);
851     event MetaData(string _metaData);
852 
853     /**
854     * @dev the constructor takes organization name, native token and reputation system
855     and creates an avatar for a controller
856     */
857     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
858         orgName = _orgName;
859         nativeToken = _nativeToken;
860         nativeReputation = _nativeReputation;
861     }
862 
863     /**
864     * @dev enables an avatar to receive ethers
865     */
866     function() external payable {
867         emit ReceiveEther(msg.sender, msg.value);
868     }
869 
870     /**
871     * @dev perform a generic call to an arbitrary contract
872     * @param _contract  the contract's address to call
873     * @param _data ABI-encoded contract call to call `_contract` address.
874     * @param _value value (ETH) to transfer with the transaction
875     * @return bool    success or fail
876     *         bytes - the return bytes of the called contract's function.
877     */
878     function genericCall(address _contract, bytes memory _data, uint256 _value)
879     public
880     onlyOwner
881     returns(bool success, bytes memory returnValue) {
882       // solhint-disable-next-line avoid-call-value
883         (success, returnValue) = _contract.call.value(_value)(_data);
884         emit GenericCall(_contract, _data, _value, success);
885     }
886 
887     /**
888     * @dev send ethers from the avatar's wallet
889     * @param _amountInWei amount to send in Wei units
890     * @param _to send the ethers to this address
891     * @return bool which represents success
892     */
893     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
894         _to.transfer(_amountInWei);
895         emit SendEther(_amountInWei, _to);
896         return true;
897     }
898 
899     /**
900     * @dev external token transfer
901     * @param _externalToken the token contract
902     * @param _to the destination address
903     * @param _value the amount of tokens to transfer
904     * @return bool which represents success
905     */
906     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
907     public onlyOwner returns(bool)
908     {
909         address(_externalToken).safeTransfer(_to, _value);
910         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
911         return true;
912     }
913 
914     /**
915     * @dev external token transfer from a specific account
916     * @param _externalToken the token contract
917     * @param _from the account to spend token from
918     * @param _to the destination address
919     * @param _value the amount of tokens to transfer
920     * @return bool which represents success
921     */
922     function externalTokenTransferFrom(
923         IERC20 _externalToken,
924         address _from,
925         address _to,
926         uint256 _value
927     )
928     public onlyOwner returns(bool)
929     {
930         address(_externalToken).safeTransferFrom(_from, _to, _value);
931         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
932         return true;
933     }
934 
935     /**
936     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
937     *      on behalf of msg.sender.
938     * @param _externalToken the address of the Token Contract
939     * @param _spender address
940     * @param _value the amount of ether (in Wei) which the approval is referring to.
941     * @return bool which represents a success
942     */
943     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
944     public onlyOwner returns(bool)
945     {
946         address(_externalToken).safeApprove(_spender, _value);
947         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
948         return true;
949     }
950 
951     /**
952     * @dev metaData emits an event with a string, should contain the hash of some meta data.
953     * @param _metaData a string representing a hash of the meta data
954     * @return bool which represents a success
955     */
956     function metaData(string memory _metaData) public onlyOwner returns(bool) {
957         emit MetaData(_metaData);
958         return true;
959     }
960 
961 
962 }
963 
964 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
965 
966 pragma solidity ^0.5.4;
967 
968 
969 contract UniversalSchemeInterface {
970 
971     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
972     
973 }
974 
975 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
976 
977 pragma solidity ^0.5.4;
978 
979 
980 contract GlobalConstraintInterface {
981 
982     enum CallPhase { Pre, Post, PreAndPost }
983 
984     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
985     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
986     /**
987      * @dev when return if this globalConstraints is pre, post or both.
988      * @return CallPhase enum indication  Pre, Post or PreAndPost.
989      */
990     function when() public returns(CallPhase);
991 }
992 
993 // File: contracts/controller/ControllerInterface.sol
994 
995 pragma solidity ^0.5.4;
996 
997 
998 
999 /**
1000  * @title Controller contract
1001  * @dev A controller controls the organizations tokens ,reputation and avatar.
1002  * It is subject to a set of schemes and constraints that determine its behavior.
1003  * Each scheme has it own parameters and operation permissions.
1004  */
1005 interface ControllerInterface {
1006 
1007     /**
1008      * @dev Mint `_amount` of reputation that are assigned to `_to` .
1009      * @param  _amount amount of reputation to mint
1010      * @param _to beneficiary address
1011      * @return bool which represents a success
1012     */
1013     function mintReputation(uint256 _amount, address _to, address _avatar)
1014     external
1015     returns(bool);
1016 
1017     /**
1018      * @dev Burns `_amount` of reputation from `_from`
1019      * @param _amount amount of reputation to burn
1020      * @param _from The address that will lose the reputation
1021      * @return bool which represents a success
1022      */
1023     function burnReputation(uint256 _amount, address _from, address _avatar)
1024     external
1025     returns(bool);
1026 
1027     /**
1028      * @dev mint tokens .
1029      * @param  _amount amount of token to mint
1030      * @param _beneficiary beneficiary address
1031      * @param _avatar address
1032      * @return bool which represents a success
1033      */
1034     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1035     external
1036     returns(bool);
1037 
1038   /**
1039    * @dev register or update a scheme
1040    * @param _scheme the address of the scheme
1041    * @param _paramsHash a hashed configuration of the usage of the scheme
1042    * @param _permissions the permissions the new scheme will have
1043    * @param _avatar address
1044    * @return bool which represents a success
1045    */
1046     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1047     external
1048     returns(bool);
1049 
1050     /**
1051      * @dev unregister a scheme
1052      * @param _avatar address
1053      * @param _scheme the address of the scheme
1054      * @return bool which represents a success
1055      */
1056     function unregisterScheme(address _scheme, address _avatar)
1057     external
1058     returns(bool);
1059 
1060     /**
1061      * @dev unregister the caller's scheme
1062      * @param _avatar address
1063      * @return bool which represents a success
1064      */
1065     function unregisterSelf(address _avatar) external returns(bool);
1066 
1067     /**
1068      * @dev add or update Global Constraint
1069      * @param _globalConstraint the address of the global constraint to be added.
1070      * @param _params the constraint parameters hash.
1071      * @param _avatar the avatar of the organization
1072      * @return bool which represents a success
1073      */
1074     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1075     external returns(bool);
1076 
1077     /**
1078      * @dev remove Global Constraint
1079      * @param _globalConstraint the address of the global constraint to be remove.
1080      * @param _avatar the organization avatar.
1081      * @return bool which represents a success
1082      */
1083     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1084     external  returns(bool);
1085 
1086   /**
1087     * @dev upgrade the Controller
1088     *      The function will trigger an event 'UpgradeController'.
1089     * @param  _newController the address of the new controller.
1090     * @param _avatar address
1091     * @return bool which represents a success
1092     */
1093     function upgradeController(address _newController, Avatar _avatar)
1094     external returns(bool);
1095 
1096     /**
1097     * @dev perform a generic call to an arbitrary contract
1098     * @param _contract  the contract's address to call
1099     * @param _data ABI-encoded contract call to call `_contract` address.
1100     * @param _avatar the controller's avatar address
1101     * @param _value value (ETH) to transfer with the transaction
1102     * @return bool -success
1103     *         bytes  - the return value of the called _contract's function.
1104     */
1105     function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)
1106     external
1107     returns(bool, bytes memory);
1108 
1109   /**
1110    * @dev send some ether
1111    * @param _amountInWei the amount of ether (in Wei) to send
1112    * @param _to address of the beneficiary
1113    * @param _avatar address
1114    * @return bool which represents a success
1115    */
1116     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1117     external returns(bool);
1118 
1119     /**
1120     * @dev send some amount of arbitrary ERC20 Tokens
1121     * @param _externalToken the address of the Token Contract
1122     * @param _to address of the beneficiary
1123     * @param _value the amount of ether (in Wei) to send
1124     * @param _avatar address
1125     * @return bool which represents a success
1126     */
1127     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1128     external
1129     returns(bool);
1130 
1131     /**
1132     * @dev transfer token "from" address "to" address
1133     *      One must to approve the amount of tokens which can be spend from the
1134     *      "from" account.This can be done using externalTokenApprove.
1135     * @param _externalToken the address of the Token Contract
1136     * @param _from address of the account to send from
1137     * @param _to address of the beneficiary
1138     * @param _value the amount of ether (in Wei) to send
1139     * @param _avatar address
1140     * @return bool which represents a success
1141     */
1142     function externalTokenTransferFrom(
1143     IERC20 _externalToken,
1144     address _from,
1145     address _to,
1146     uint256 _value,
1147     Avatar _avatar)
1148     external
1149     returns(bool);
1150 
1151     /**
1152     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1153     *      on behalf of msg.sender.
1154     * @param _externalToken the address of the Token Contract
1155     * @param _spender address
1156     * @param _value the amount of ether (in Wei) which the approval is referring to.
1157     * @return bool which represents a success
1158     */
1159     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1160     external
1161     returns(bool);
1162 
1163     /**
1164     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1165     * @param _metaData a string representing a hash of the meta data
1166     * @param _avatar Avatar
1167     * @return bool which represents a success
1168     */
1169     function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);
1170 
1171     /**
1172      * @dev getNativeReputation
1173      * @param _avatar the organization avatar.
1174      * @return organization native reputation
1175      */
1176     function getNativeReputation(address _avatar)
1177     external
1178     view
1179     returns(address);
1180 
1181     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1182 
1183     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1184 
1185     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1186 
1187     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1188 
1189     /**
1190      * @dev globalConstraintsCount return the global constraint pre and post count
1191      * @return uint256 globalConstraintsPre count.
1192      * @return uint256 globalConstraintsPost count.
1193      */
1194     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1195 
1196     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1197 }
1198 
1199 // File: contracts/universalSchemes/UniversalScheme.sol
1200 
1201 pragma solidity ^0.5.4;
1202 
1203 
1204 
1205 
1206 
1207 contract UniversalScheme is UniversalSchemeInterface {
1208     /**
1209     *  @dev get the parameters for the current scheme from the controller
1210     */
1211     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1212         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1213         "scheme is not registered");
1214         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1215     }
1216 }
1217 
1218 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1219 
1220 pragma solidity ^0.5.2;
1221 
1222 /**
1223  * @title Elliptic curve signature operations
1224  * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
1225  * TODO Remove this library once solidity supports passing a signature to ecrecover.
1226  * See https://github.com/ethereum/solidity/issues/864
1227  */
1228 
1229 library ECDSA {
1230     /**
1231      * @dev Recover signer address from a message by using their signature
1232      * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
1233      * @param signature bytes signature, the signature is generated using web3.eth.sign()
1234      */
1235     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1236         // Check the signature length
1237         if (signature.length != 65) {
1238             return (address(0));
1239         }
1240 
1241         // Divide the signature in r, s and v variables
1242         bytes32 r;
1243         bytes32 s;
1244         uint8 v;
1245 
1246         // ecrecover takes the signature parameters, and the only way to get them
1247         // currently is to use assembly.
1248         // solhint-disable-next-line no-inline-assembly
1249         assembly {
1250             r := mload(add(signature, 0x20))
1251             s := mload(add(signature, 0x40))
1252             v := byte(0, mload(add(signature, 0x60)))
1253         }
1254 
1255         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
1256         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
1257         // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
1258         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
1259         //
1260         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
1261         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
1262         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
1263         // these malleable signatures as well.
1264         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
1265             return address(0);
1266         }
1267 
1268         if (v != 27 && v != 28) {
1269             return address(0);
1270         }
1271 
1272         // If the signature is valid (and not malleable), return the signer address
1273         return ecrecover(hash, v, r, s);
1274     }
1275 
1276     /**
1277      * toEthSignedMessageHash
1278      * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
1279      * and hash the result
1280      */
1281     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1282         // 32 is the length in bytes of hash,
1283         // enforced by the type signature above
1284         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1285     }
1286 }
1287 
1288 // File: @daostack/infra/contracts/libs/RealMath.sol
1289 
1290 pragma solidity ^0.5.4;
1291 
1292 /**
1293  * RealMath: fixed-point math library, based on fractional and integer parts.
1294  * Using uint256 as real216x40, which isn't in Solidity yet.
1295  * Internally uses the wider uint256 for some math.
1296  *
1297  * Note that for addition, subtraction, and mod (%), you should just use the
1298  * built-in Solidity operators. Functions for these operations are not provided.
1299  *
1300  */
1301 
1302 
1303 library RealMath {
1304 
1305     /**
1306      * How many total bits are there?
1307      */
1308     uint256 constant private REAL_BITS = 256;
1309 
1310     /**
1311      * How many fractional bits are there?
1312      */
1313     uint256 constant private REAL_FBITS = 40;
1314 
1315     /**
1316      * What's the first non-fractional bit
1317      */
1318     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1319 
1320     /**
1321      * Raise a real number to any positive integer power
1322      */
1323     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1324 
1325         uint256 tempRealBase = realBase;
1326         uint256 tempExponent = exponent;
1327 
1328         // Start with the 0th power
1329         uint256 realResult = REAL_ONE;
1330         while (tempExponent != 0) {
1331             // While there are still bits set
1332             if ((tempExponent & 0x1) == 0x1) {
1333                 // If the low bit is set, multiply in the (many-times-squared) base
1334                 realResult = mul(realResult, tempRealBase);
1335             }
1336                 // Shift off the low bit
1337             tempExponent = tempExponent >> 1;
1338             if (tempExponent != 0) {
1339                 // Do the squaring
1340                 tempRealBase = mul(tempRealBase, tempRealBase);
1341             }
1342         }
1343 
1344         // Return the final result.
1345         return realResult;
1346     }
1347 
1348     /**
1349      * Create a real from a rational fraction.
1350      */
1351     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1352         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1353     }
1354 
1355     /**
1356      * Multiply one real by another. Truncates overflows.
1357      */
1358     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1359         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1360         // So we just have to clip off the extra REAL_FBITS fractional bits.
1361         uint256 res = realA * realB;
1362         require(res/realA == realB, "RealMath mul overflow");
1363         return (res >> REAL_FBITS);
1364     }
1365 
1366     /**
1367      * Divide one real by another real. Truncates overflows.
1368      */
1369     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1370         // We use the reverse of the multiplication trick: convert numerator from
1371         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1372         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1373     }
1374 
1375 }
1376 
1377 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
1378 
1379 pragma solidity ^0.5.4;
1380 
1381 interface ProposalExecuteInterface {
1382     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
1383 }
1384 
1385 // File: openzeppelin-solidity/contracts/math/Math.sol
1386 
1387 pragma solidity ^0.5.2;
1388 
1389 /**
1390  * @title Math
1391  * @dev Assorted math operations
1392  */
1393 library Math {
1394     /**
1395      * @dev Returns the largest of two numbers.
1396      */
1397     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1398         return a >= b ? a : b;
1399     }
1400 
1401     /**
1402      * @dev Returns the smallest of two numbers.
1403      */
1404     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1405         return a < b ? a : b;
1406     }
1407 
1408     /**
1409      * @dev Calculates the average of two numbers. Since these are integers,
1410      * averages of an even and odd number cannot be represented, and will be
1411      * rounded down.
1412      */
1413     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1414         // (a + b) / 2 can overflow, so we distribute
1415         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1416     }
1417 }
1418 
1419 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
1420 
1421 pragma solidity ^0.5.4;
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 
1432 
1433 /**
1434  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1435  */
1436 contract GenesisProtocolLogic is IntVoteInterface {
1437     using SafeMath for uint256;
1438     using Math for uint256;
1439     using RealMath for uint216;
1440     using RealMath for uint256;
1441     using Address for address;
1442 
1443     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1444     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1445 
1446     //Organization's parameters
1447     struct Parameters {
1448         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1449         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1450         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1451         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1452                                           //to be in an preparation state (stable) before boosted.
1453         uint256 thresholdConst; //constant  for threshold calculation .
1454                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1455         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1456                                    //in the threshold calculation to prevent overflow
1457         uint256 quietEndingPeriod; //quite ending period
1458         uint256 proposingRepReward;//proposer reputation reward.
1459         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1460                                           //voters lose votersReputationLossRatio% of their reputation.
1461         uint256 minimumDaoBounty;
1462         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1463                                //(daoBountyConst * averageBoostDownstakes)/100 .
1464         uint256 activationTime;//the point in time after which proposals can be created.
1465         //if this address is set so only this address is allowed to vote of behalf of someone else.
1466         address voteOnBehalf;
1467     }
1468 
1469     struct Voter {
1470         uint256 vote; // YES(1) ,NO(2)
1471         uint256 reputation; // amount of voter's reputation
1472         bool preBoosted;
1473     }
1474 
1475     struct Staker {
1476         uint256 vote; // YES(1) ,NO(2)
1477         uint256 amount; // amount of staker's stake
1478         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1479     }
1480 
1481     struct Proposal {
1482         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1483         address callbacks;    // should fulfill voting callbacks interface.
1484         ProposalState state;
1485         uint256 winningVote; //the winning vote.
1486         address proposer;
1487         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1488         uint256 currentBoostedVotePeriodLimit;
1489         bytes32 paramsHash;
1490         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1491         uint256 daoBounty;
1492         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1493         uint256 confidenceThreshold;
1494         //The percentage from upper stakes which the caller for the expiration was given.
1495         uint256 expirationCallBountyPercentage;
1496         uint[3] times; //times[0] - submittedTime
1497                        //times[1] - boostedPhaseTime
1498                        //times[2] -preBoostedPhaseTime;
1499         bool daoRedeemItsWinnings;
1500         //      vote      reputation
1501         mapping(uint256   =>  uint256    ) votes;
1502         //      vote      reputation
1503         mapping(uint256   =>  uint256    ) preBoostedVotes;
1504         //      address     voter
1505         mapping(address =>  Voter    ) voters;
1506         //      vote        stakes
1507         mapping(uint256   =>  uint256    ) stakes;
1508         //      address  staker
1509         mapping(address  => Staker   ) stakers;
1510     }
1511 
1512     event Stake(bytes32 indexed _proposalId,
1513         address indexed _organization,
1514         address indexed _staker,
1515         uint256 _vote,
1516         uint256 _amount
1517     );
1518 
1519     event Redeem(bytes32 indexed _proposalId,
1520         address indexed _organization,
1521         address indexed _beneficiary,
1522         uint256 _amount
1523     );
1524 
1525     event RedeemDaoBounty(bytes32 indexed _proposalId,
1526         address indexed _organization,
1527         address indexed _beneficiary,
1528         uint256 _amount
1529     );
1530 
1531     event RedeemReputation(bytes32 indexed _proposalId,
1532         address indexed _organization,
1533         address indexed _beneficiary,
1534         uint256 _amount
1535     );
1536 
1537     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1538     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1539     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1540     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
1541 
1542     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1543     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1544     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1545            //organizationId => organization
1546     mapping(bytes32        => address     ) public organizations;
1547           //organizationId => averageBoostDownstakes
1548     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1549     uint256 constant public NUM_OF_CHOICES = 2;
1550     uint256 constant public NO = 2;
1551     uint256 constant public YES = 1;
1552     uint256 public proposalsCnt; // Total number of proposals
1553     IERC20 public stakingToken;
1554     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1555     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1556 
1557     /**
1558      * @dev Constructor
1559      */
1560     constructor(IERC20 _stakingToken) public {
1561       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1562       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1563       //If such contract address does not exist in the network (e.g ganache)
1564       //the contract will use the _stakingToken param as the
1565       //staking token address.
1566         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1567             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1568         } else {
1569             stakingToken = _stakingToken;
1570         }
1571     }
1572 
1573   /**
1574    * @dev Check that the proposal is votable
1575    * a proposal is votable if it is in one of the following states:
1576    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1577    */
1578     modifier votable(bytes32 _proposalId) {
1579         require(_isVotable(_proposalId));
1580         _;
1581     }
1582 
1583     /**
1584      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1585      * generated by calculating keccak256 of a incremented counter.
1586      * @param _paramsHash parameters hash
1587      * @param _proposer address
1588      * @param _organization address
1589      */
1590     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1591         external
1592         returns(bytes32)
1593     {
1594       // solhint-disable-next-line not-rely-on-time
1595         require(now > parameters[_paramsHash].activationTime, "not active yet");
1596         //Check parameters existence.
1597         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1598         // Generate a unique ID:
1599         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1600         proposalsCnt = proposalsCnt.add(1);
1601          // Open proposal:
1602         Proposal memory proposal;
1603         proposal.callbacks = msg.sender;
1604         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1605 
1606         proposal.state = ProposalState.Queued;
1607         // solhint-disable-next-line not-rely-on-time
1608         proposal.times[0] = now;//submitted time
1609         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1610         proposal.proposer = _proposer;
1611         proposal.winningVote = NO;
1612         proposal.paramsHash = _paramsHash;
1613         if (organizations[proposal.organizationId] == address(0)) {
1614             if (_organization == address(0)) {
1615                 organizations[proposal.organizationId] = msg.sender;
1616             } else {
1617                 organizations[proposal.organizationId] = _organization;
1618             }
1619         }
1620         //calc dao bounty
1621         uint256 daoBounty =
1622         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1623         if (daoBounty < parameters[_paramsHash].minimumDaoBounty) {
1624             proposal.daoBountyRemain = parameters[_paramsHash].minimumDaoBounty;
1625         } else {
1626             proposal.daoBountyRemain = daoBounty;
1627         }
1628         proposal.totalStakes = proposal.daoBountyRemain;
1629         proposals[proposalId] = proposal;
1630         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1631 
1632         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1633         return proposalId;
1634     }
1635 
1636     /**
1637       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
1638       * @param _proposalId the id of the proposal
1639       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1640      */
1641     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1642         Proposal storage proposal = proposals[_proposalId];
1643         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
1644         "proposal state in not Boosted nor QuietEndingPeriod");
1645         require(_execute(_proposalId), "proposal need to expire");
1646         uint256 expirationCallBountyPercentage =
1647         // solhint-disable-next-line not-rely-on-time
1648         (uint(1).add(now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1])).div(15)));
1649         if (expirationCallBountyPercentage > 100) {
1650             expirationCallBountyPercentage = 100;
1651         }
1652         proposal.expirationCallBountyPercentage = expirationCallBountyPercentage;
1653         expirationCallBounty = expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100);
1654         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1655         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1656     }
1657 
1658     /**
1659      * @dev hash the parameters, save them if necessary, and return the hash value
1660      * @param _params a parameters array
1661      *    _params[0] - _queuedVoteRequiredPercentage,
1662      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1663      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1664      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1665      *                  state (stable) before boosted.
1666      *    _params[4] -_thresholdConst
1667      *    _params[5] -_quietEndingPeriod
1668      *    _params[6] -_proposingRepReward
1669      *    _params[7] -_votersReputationLossRatio
1670      *    _params[8] -_minimumDaoBounty
1671      *    _params[9] -_daoBountyConst
1672      *    _params[10] -_activationTime
1673      * @param _voteOnBehalf - authorized to vote on behalf of others.
1674     */
1675     function setParameters(
1676         uint[11] calldata _params, //use array here due to stack too deep issue.
1677         address _voteOnBehalf
1678     )
1679     external
1680     returns(bytes32)
1681     {
1682         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1683         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1684         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1685         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1686         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1687         require(_params[9] > 0, "daoBountyConst should be > 0");
1688 
1689         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1690         //set a limit for power for a given alpha to prevent overflow
1691         uint256 limitExponent = 172;//for alpha less or equal 2
1692         uint256 j = 2;
1693         for (uint256 i = 2000; i < 16000; i = i*2) {
1694             if ((_params[4] > i) && (_params[4] <= i*2)) {
1695                 limitExponent = limitExponent/j;
1696                 break;
1697             }
1698             j++;
1699         }
1700 
1701         parameters[paramsHash] = Parameters({
1702             queuedVoteRequiredPercentage: _params[0],
1703             queuedVotePeriodLimit: _params[1],
1704             boostedVotePeriodLimit: _params[2],
1705             preBoostedVotePeriodLimit: _params[3],
1706             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1707             limitExponentValue:limitExponent,
1708             quietEndingPeriod: _params[5],
1709             proposingRepReward: _params[6],
1710             votersReputationLossRatio:_params[7],
1711             minimumDaoBounty:_params[8],
1712             daoBountyConst:_params[9],
1713             activationTime:_params[10],
1714             voteOnBehalf:_voteOnBehalf
1715         });
1716         return paramsHash;
1717     }
1718 
1719     /**
1720      * @dev redeem a reward for a successful stake, vote or proposing.
1721      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1722      * users to redeem on behalf of someone else.
1723      * @param _proposalId the ID of the proposal
1724      * @param _beneficiary - the beneficiary address
1725      * @return rewards -
1726      *           [0] stakerTokenReward
1727      *           [1] voterReputationReward
1728      *           [2] proposerReputationReward
1729      */
1730      // solhint-disable-next-line function-max-lines,code-complexity
1731     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1732         Proposal storage proposal = proposals[_proposalId];
1733         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1734         "Proposal should be Executed or ExpiredInQueue");
1735         Parameters memory params = parameters[proposal.paramsHash];
1736         uint256 lostReputation;
1737         if (proposal.winningVote == YES) {
1738             lostReputation = proposal.preBoostedVotes[NO];
1739         } else {
1740             lostReputation = proposal.preBoostedVotes[YES];
1741         }
1742         lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1743         //as staker
1744         Staker storage staker = proposal.stakers[_beneficiary];
1745         uint256 totalStakes = proposal.stakes[NO].add(proposal.stakes[YES]);
1746         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1747 
1748         if (staker.amount > 0) {
1749             uint256 totalStakesLeftAfterCallBounty =
1750             totalStakes.sub(proposal.expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100));
1751             if (proposal.state == ProposalState.ExpiredInQueue) {
1752                 //Stakes of a proposal that expires in Queue are sent back to stakers
1753                 rewards[0] = staker.amount;
1754             } else if (staker.vote == proposal.winningVote) {
1755                 if (staker.vote == YES) {
1756                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
1757                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
1758                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1759                     }
1760                 } else {
1761                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
1762                 }
1763             }
1764             staker.amount = 0;
1765         }
1766             //dao redeem its winnings
1767         if (proposal.daoRedeemItsWinnings == false &&
1768             _beneficiary == organizations[proposal.organizationId] &&
1769             proposal.state != ProposalState.ExpiredInQueue &&
1770             proposal.winningVote == NO) {
1771             rewards[0] =
1772             rewards[0].add((proposal.daoBounty.mul(totalStakes))/totalWinningStakes).sub(proposal.daoBounty);
1773             proposal.daoRedeemItsWinnings = true;
1774         }
1775 
1776         //as voter
1777         Voter storage voter = proposal.voters[_beneficiary];
1778         if ((voter.reputation != 0) && (voter.preBoosted)) {
1779             if (proposal.state == ProposalState.ExpiredInQueue) {
1780               //give back reputation for the voter
1781                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1782             } else if (proposal.winningVote == voter.vote) {
1783                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1784                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
1785             }
1786             voter.reputation = 0;
1787         }
1788         //as proposer
1789         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1790             rewards[2] = params.proposingRepReward;
1791             proposal.proposer = address(0);
1792         }
1793         if (rewards[0] != 0) {
1794             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1795             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1796             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1797         }
1798         if (rewards[1].add(rewards[2]) != 0) {
1799             VotingMachineCallbacksInterface(proposal.callbacks)
1800             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1801             emit RedeemReputation(
1802             _proposalId,
1803             organizations[proposal.organizationId],
1804             _beneficiary,
1805             rewards[1].add(rewards[2])
1806             );
1807         }
1808     }
1809 
1810     /**
1811      * @dev redeemDaoBounty a reward for a successful stake.
1812      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1813      * users to redeem on behalf of someone else.
1814      * @param _proposalId the ID of the proposal
1815      * @param _beneficiary - the beneficiary address
1816      * @return redeemedAmount - redeem token amount
1817      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1818      */
1819     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1820     public
1821     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1822         Proposal storage proposal = proposals[_proposalId];
1823         require(proposal.state == ProposalState.Executed);
1824         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1825         Staker storage staker = proposal.stakers[_beneficiary];
1826         if (
1827             (staker.amount4Bounty > 0)&&
1828             (staker.vote == proposal.winningVote)&&
1829             (proposal.winningVote == YES)&&
1830             (totalWinningStakes != 0)) {
1831             //as staker
1832                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1833             }
1834         if ((potentialAmount != 0)&&
1835             (VotingMachineCallbacksInterface(proposal.callbacks)
1836             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1837             staker.amount4Bounty = 0;
1838             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1839             require(
1840             VotingMachineCallbacksInterface(proposal.callbacks)
1841             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1842             redeemedAmount = potentialAmount;
1843             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1844         }
1845     }
1846 
1847     /**
1848      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
1849      * @param _proposalId the ID of the proposal
1850      * @return bool true or false.
1851      */
1852     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
1853         Proposal memory proposal = proposals[_proposalId];
1854         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
1855     }
1856 
1857     /**
1858      * @dev threshold return the organization's score threshold which required by
1859      * a proposal to shift to boosted state.
1860      * This threshold is dynamically set and it depend on the number of boosted proposal.
1861      * @param _organizationId the organization identifier
1862      * @param _paramsHash the organization parameters hash
1863      * @return uint256 organization's score threshold as real number.
1864      */
1865     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
1866         uint256 power = orgBoostedProposalsCnt[_organizationId];
1867         Parameters storage params = parameters[_paramsHash];
1868 
1869         if (power > params.limitExponentValue) {
1870             power = params.limitExponentValue;
1871         }
1872 
1873         return params.thresholdConst.pow(power);
1874     }
1875 
1876   /**
1877    * @dev hashParameters returns a hash of the given parameters
1878    */
1879     function getParametersHash(
1880         uint[11] memory _params,//use array here due to stack too deep issue.
1881         address _voteOnBehalf
1882     )
1883         public
1884         pure
1885         returns(bytes32)
1886         {
1887         //double call to keccak256 to avoid deep stack issue when call with too many params.
1888         return keccak256(
1889             abi.encodePacked(
1890             keccak256(
1891             abi.encodePacked(
1892                 _params[0],
1893                 _params[1],
1894                 _params[2],
1895                 _params[3],
1896                 _params[4],
1897                 _params[5],
1898                 _params[6],
1899                 _params[7],
1900                 _params[8],
1901                 _params[9],
1902                 _params[10])
1903             ),
1904             _voteOnBehalf
1905         ));
1906     }
1907 
1908     /**
1909       * @dev execute check if the proposal has been decided, and if so, execute the proposal
1910       * @param _proposalId the id of the proposal
1911       * @return bool true - the proposal has been executed
1912       *              false - otherwise.
1913      */
1914      // solhint-disable-next-line function-max-lines,code-complexity
1915     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
1916         Proposal storage proposal = proposals[_proposalId];
1917         Parameters memory params = parameters[proposal.paramsHash];
1918         Proposal memory tmpProposal = proposal;
1919         uint256 totalReputation =
1920         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
1921         //first divide by 100 to prevent overflow
1922         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
1923         ExecutionState executionState = ExecutionState.None;
1924         uint256 averageDownstakesOfBoosted;
1925         uint256 confidenceThreshold;
1926 
1927         if (proposal.votes[proposal.winningVote] > executionBar) {
1928          // someone crossed the absolute vote execution bar.
1929             if (proposal.state == ProposalState.Queued) {
1930                 executionState = ExecutionState.QueueBarCrossed;
1931             } else if (proposal.state == ProposalState.PreBoosted) {
1932                 executionState = ExecutionState.PreBoostedBarCrossed;
1933             } else {
1934                 executionState = ExecutionState.BoostedBarCrossed;
1935             }
1936             proposal.state = ProposalState.Executed;
1937         } else {
1938             if (proposal.state == ProposalState.Queued) {
1939                 // solhint-disable-next-line not-rely-on-time
1940                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
1941                     proposal.state = ProposalState.ExpiredInQueue;
1942                     proposal.winningVote = NO;
1943                     executionState = ExecutionState.QueueTimeOut;
1944                 } else {
1945                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1946                     if (_score(_proposalId) > confidenceThreshold) {
1947                         //change proposal mode to PreBoosted mode.
1948                         proposal.state = ProposalState.PreBoosted;
1949                         // solhint-disable-next-line not-rely-on-time
1950                         proposal.times[2] = now;
1951                         proposal.confidenceThreshold = confidenceThreshold;
1952                     }
1953                 }
1954             }
1955 
1956             if (proposal.state == ProposalState.PreBoosted) {
1957                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1958               // solhint-disable-next-line not-rely-on-time
1959                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
1960                     if (_score(_proposalId) > confidenceThreshold) {
1961                         if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {
1962                          //change proposal mode to Boosted mode.
1963                             proposal.state = ProposalState.Boosted;
1964                          // solhint-disable-next-line not-rely-on-time
1965                             proposal.times[1] = now;
1966                             orgBoostedProposalsCnt[proposal.organizationId]++;
1967                          //add a value to average -> average = average + ((value - average) / nbValues)
1968                             averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1969                           // solium-disable-next-line indentation
1970                             averagesDownstakesOfBoosted[proposal.organizationId] =
1971                                 uint256(int256(averageDownstakesOfBoosted) +
1972                                 ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
1973                                 int256(orgBoostedProposalsCnt[proposal.organizationId])));
1974                         }
1975                     } else {
1976                         proposal.state = ProposalState.Queued;
1977                     }
1978                 } else { //check the Confidence level is stable
1979                     uint256 proposalScore = _score(_proposalId);
1980                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
1981                         proposal.state = ProposalState.Queued;
1982                     } else if (proposal.confidenceThreshold > proposalScore) {
1983                         proposal.confidenceThreshold = confidenceThreshold;
1984                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
1985                     }
1986                 }
1987             }
1988         }
1989 
1990         if ((proposal.state == ProposalState.Boosted) ||
1991             (proposal.state == ProposalState.QuietEndingPeriod)) {
1992             // solhint-disable-next-line not-rely-on-time
1993             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
1994                 proposal.state = ProposalState.Executed;
1995                 executionState = ExecutionState.BoostedTimeOut;
1996             }
1997         }
1998 
1999         if (executionState != ExecutionState.None) {
2000             if ((executionState == ExecutionState.BoostedTimeOut) ||
2001                 (executionState == ExecutionState.BoostedBarCrossed)) {
2002                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
2003                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
2004                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2005                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2006                 if (boostedProposals == 0) {
2007                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2008                 } else {
2009                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2010                     averagesDownstakesOfBoosted[proposal.organizationId] =
2011                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2012                 }
2013             }
2014             emit ExecuteProposal(
2015             _proposalId,
2016             organizations[proposal.organizationId],
2017             proposal.winningVote,
2018             totalReputation
2019             );
2020             emit GPExecuteProposal(_proposalId, executionState);
2021             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2022             proposal.daoBounty = proposal.daoBountyRemain;
2023         }
2024         if (tmpProposal.state != proposal.state) {
2025             emit StateChange(_proposalId, proposal.state);
2026         }
2027         return (executionState != ExecutionState.None);
2028     }
2029 
2030     /**
2031      * @dev staking function
2032      * @param _proposalId id of the proposal
2033      * @param _vote  NO(2) or YES(1).
2034      * @param _amount the betting amount
2035      * @return bool true - the proposal has been executed
2036      *              false - otherwise.
2037      */
2038     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2039         // 0 is not a valid vote.
2040         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2041         require(_amount > 0, "staking amount should be >0");
2042 
2043         if (_execute(_proposalId)) {
2044             return true;
2045         }
2046         Proposal storage proposal = proposals[_proposalId];
2047 
2048         if ((proposal.state != ProposalState.PreBoosted) &&
2049             (proposal.state != ProposalState.Queued)) {
2050             return false;
2051         }
2052 
2053         // enable to increase stake only on the previous stake vote
2054         Staker storage staker = proposal.stakers[_staker];
2055         if ((staker.amount > 0) && (staker.vote != _vote)) {
2056             return false;
2057         }
2058 
2059         uint256 amount = _amount;
2060         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2061         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2062         staker.amount = staker.amount.add(amount);
2063         //This is to prevent average downstakes calculation overflow
2064         //Note that any how GEN cap is 100000000 ether.
2065         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2066         require(proposal.totalStakes <= 0x100000000000000000000000000000000, "total stakes is too high");
2067 
2068         if (_vote == YES) {
2069             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2070         }
2071         staker.vote = _vote;
2072 
2073         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2074         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2075         return _execute(_proposalId);
2076     }
2077 
2078     /**
2079      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2080      * @param _proposalId id of the proposal
2081      * @param _voter used in case the vote is cast for someone else
2082      * @param _vote a value between 0 to and the proposal's number of choices.
2083      * @param _rep how many reputation the voter would like to stake for this vote.
2084      *         if  _rep==0 so the voter full reputation will be use.
2085      * @return true in case of proposal execution otherwise false
2086      * throws if proposal is not open or if it has been executed
2087      * NB: executes the proposal if a decision has been reached
2088      */
2089      // solhint-disable-next-line function-max-lines,code-complexity
2090     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2091         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2092         if (_execute(_proposalId)) {
2093             return true;
2094         }
2095 
2096         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2097         Proposal storage proposal = proposals[_proposalId];
2098 
2099         // Check voter has enough reputation:
2100         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2101         require(reputation > 0, "_voter must have reputation");
2102         require(reputation >= _rep, "reputation >= _rep");
2103         uint256 rep = _rep;
2104         if (rep == 0) {
2105             rep = reputation;
2106         }
2107         // If this voter has already voted, return false.
2108         if (proposal.voters[_voter].reputation != 0) {
2109             return false;
2110         }
2111         // The voting itself:
2112         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2113         //check if the current winningVote changed or there is a tie.
2114         //for the case there is a tie the current winningVote set to NO.
2115         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2116             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2117             proposal.winningVote == YES)) {
2118             if (proposal.state == ProposalState.Boosted &&
2119             // solhint-disable-next-line not-rely-on-time
2120                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2121                 proposal.state == ProposalState.QuietEndingPeriod) {
2122                 //quietEndingPeriod
2123                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2124                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2125                     proposal.state = ProposalState.QuietEndingPeriod;
2126                 }
2127                 // solhint-disable-next-line not-rely-on-time
2128                 proposal.times[1] = now;
2129             }
2130             proposal.winningVote = _vote;
2131         }
2132         proposal.voters[_voter] = Voter({
2133             reputation: rep,
2134             vote: _vote,
2135             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2136         });
2137         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2138             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2139             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2140             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2141         }
2142         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2143         return _execute(_proposalId);
2144     }
2145 
2146     /**
2147      * @dev _score return the proposal score (Confidence level)
2148      * For dual choice proposal S = (S+)/(S-)
2149      * @param _proposalId the ID of the proposal
2150      * @return uint256 proposal score as real number.
2151      */
2152     function _score(bytes32 _proposalId) internal view returns(uint256) {
2153         Proposal storage proposal = proposals[_proposalId];
2154         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2155         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2156     }
2157 
2158     /**
2159       * @dev _isVotable check if the proposal is votable
2160       * @param _proposalId the ID of the proposal
2161       * @return bool true or false
2162     */
2163     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2164         ProposalState pState = proposals[_proposalId].state;
2165         return ((pState == ProposalState.PreBoosted)||
2166                 (pState == ProposalState.Boosted)||
2167                 (pState == ProposalState.QuietEndingPeriod)||
2168                 (pState == ProposalState.Queued)
2169         );
2170     }
2171 }
2172 
2173 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2174 
2175 pragma solidity ^0.5.4;
2176 
2177 
2178 
2179 
2180 /**
2181  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2182  */
2183 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2184     using ECDSA for bytes32;
2185 
2186     // Digest describing the data the user signs according EIP 712.
2187     // Needs to match what is passed to Metamask.
2188     bytes32 public constant DELEGATION_HASH_EIP712 =
2189     keccak256(abi.encodePacked(
2190     "address GenesisProtocolAddress",
2191     "bytes32 ProposalId",
2192     "uint256 Vote",
2193     "uint256 AmountToStake",
2194     "uint256 Nonce"
2195     ));
2196 
2197     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2198 
2199     /**
2200      * @dev Constructor
2201      */
2202     constructor(IERC20 _stakingToken)
2203     public
2204     // solhint-disable-next-line no-empty-blocks
2205     GenesisProtocolLogic(_stakingToken) {
2206     }
2207 
2208     /**
2209      * @dev staking function
2210      * @param _proposalId id of the proposal
2211      * @param _vote  NO(2) or YES(1).
2212      * @param _amount the betting amount
2213      * @return bool true - the proposal has been executed
2214      *              false - otherwise.
2215      */
2216     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2217         return _stake(_proposalId, _vote, _amount, msg.sender);
2218     }
2219 
2220     /**
2221      * @dev stakeWithSignature function
2222      * @param _proposalId id of the proposal
2223      * @param _vote  NO(2) or YES(1).
2224      * @param _amount the betting amount
2225      * @param _nonce nonce value ,it is part of the signature to ensure that
2226               a signature can be received only once.
2227      * @param _signatureType signature type
2228               1 - for web3.eth.sign
2229               2 - for eth_signTypedData according to EIP #712.
2230      * @param _signature  - signed data by the staker
2231      * @return bool true - the proposal has been executed
2232      *              false - otherwise.
2233      */
2234     function stakeWithSignature(
2235         bytes32 _proposalId,
2236         uint256 _vote,
2237         uint256 _amount,
2238         uint256 _nonce,
2239         uint256 _signatureType,
2240         bytes calldata _signature
2241         )
2242         external
2243         returns(bool)
2244         {
2245         // Recreate the digest the user signed
2246         bytes32 delegationDigest;
2247         if (_signatureType == 2) {
2248             delegationDigest = keccak256(
2249                 abi.encodePacked(
2250                     DELEGATION_HASH_EIP712, keccak256(
2251                         abi.encodePacked(
2252                         address(this),
2253                         _proposalId,
2254                         _vote,
2255                         _amount,
2256                         _nonce)
2257                     )
2258                 )
2259             );
2260         } else {
2261             delegationDigest = keccak256(
2262                         abi.encodePacked(
2263                         address(this),
2264                         _proposalId,
2265                         _vote,
2266                         _amount,
2267                         _nonce)
2268                     ).toEthSignedMessageHash();
2269         }
2270         address staker = delegationDigest.recover(_signature);
2271         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2272         require(staker != address(0), "staker address cannot be 0");
2273         require(stakesNonce[staker] == _nonce);
2274         stakesNonce[staker] = stakesNonce[staker].add(1);
2275         return _stake(_proposalId, _vote, _amount, staker);
2276     }
2277 
2278     /**
2279      * @dev voting function
2280      * @param _proposalId id of the proposal
2281      * @param _vote NO(2) or YES(1).
2282      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2283      * @param _voter voter address
2284      * @return bool true - the proposal has been executed
2285      *              false - otherwise.
2286      */
2287     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2288     external
2289     votable(_proposalId)
2290     returns(bool) {
2291         Proposal storage proposal = proposals[_proposalId];
2292         Parameters memory params = parameters[proposal.paramsHash];
2293         address voter;
2294         if (params.voteOnBehalf != address(0)) {
2295             require(msg.sender == params.voteOnBehalf);
2296             voter = _voter;
2297         } else {
2298             voter = msg.sender;
2299         }
2300         return internalVote(_proposalId, voter, _vote, _amount);
2301     }
2302 
2303   /**
2304    * @dev Cancel the vote of the msg.sender.
2305    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2306    * This function is here in order to comply to the IntVoteInterface .
2307    */
2308     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2309        //this is not allowed
2310         return;
2311     }
2312 
2313     /**
2314       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2315       * @param _proposalId the id of the proposal
2316       * @return bool true - the proposal has been executed
2317       *              false - otherwise.
2318      */
2319     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2320         return _execute(_proposalId);
2321     }
2322 
2323   /**
2324     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2325     * @return uint256 that contains number of choices
2326     */
2327     function getNumberOfChoices(bytes32) external view returns(uint256) {
2328         return NUM_OF_CHOICES;
2329     }
2330 
2331     /**
2332       * @dev getProposalTimes returns proposals times variables.
2333       * @param _proposalId id of the proposal
2334       * @return proposals times array
2335       */
2336     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2337         return proposals[_proposalId].times;
2338     }
2339 
2340     /**
2341      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2342      * @param _proposalId the ID of the proposal
2343      * @param _voter the address of the voter
2344      * @return uint256 vote - the voters vote
2345      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2346      */
2347     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2348         Voter memory voter = proposals[_proposalId].voters[_voter];
2349         return (voter.vote, voter.reputation);
2350     }
2351 
2352     /**
2353     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2354     * @param _proposalId the ID of the proposal
2355     * @param _choice the index in the
2356     * @return voted reputation for the given choice
2357     */
2358     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2359         return proposals[_proposalId].votes[_choice];
2360     }
2361 
2362     /**
2363     * @dev isVotable check if the proposal is votable
2364     * @param _proposalId the ID of the proposal
2365     * @return bool true or false
2366     */
2367     function isVotable(bytes32 _proposalId) external view returns(bool) {
2368         return _isVotable(_proposalId);
2369     }
2370 
2371     /**
2372     * @dev proposalStatus return the total votes and stakes for a given proposal
2373     * @param _proposalId the ID of the proposal
2374     * @return uint256 preBoostedVotes YES
2375     * @return uint256 preBoostedVotes NO
2376     * @return uint256 total stakes YES
2377     * @return uint256 total stakes NO
2378     */
2379     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2380         return (
2381                 proposals[_proposalId].preBoostedVotes[YES],
2382                 proposals[_proposalId].preBoostedVotes[NO],
2383                 proposals[_proposalId].stakes[YES],
2384                 proposals[_proposalId].stakes[NO]
2385         );
2386     }
2387 
2388   /**
2389     * @dev getProposalOrganization return the organizationId for a given proposal
2390     * @param _proposalId the ID of the proposal
2391     * @return bytes32 organization identifier
2392     */
2393     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2394         return (proposals[_proposalId].organizationId);
2395     }
2396 
2397     /**
2398       * @dev getStaker return the vote and stake amount for a given proposal and staker
2399       * @param _proposalId the ID of the proposal
2400       * @param _staker staker address
2401       * @return uint256 vote
2402       * @return uint256 amount
2403     */
2404     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2405         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2406     }
2407 
2408     /**
2409       * @dev voteStake return the amount stakes for a given proposal and vote
2410       * @param _proposalId the ID of the proposal
2411       * @param _vote vote number
2412       * @return uint256 stake amount
2413     */
2414     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2415         return proposals[_proposalId].stakes[_vote];
2416     }
2417 
2418   /**
2419     * @dev voteStake return the winningVote for a given proposal
2420     * @param _proposalId the ID of the proposal
2421     * @return uint256 winningVote
2422     */
2423     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2424         return proposals[_proposalId].winningVote;
2425     }
2426 
2427     /**
2428       * @dev voteStake return the state for a given proposal
2429       * @param _proposalId the ID of the proposal
2430       * @return ProposalState proposal state
2431     */
2432     function state(bytes32 _proposalId) external view returns(ProposalState) {
2433         return proposals[_proposalId].state;
2434     }
2435 
2436    /**
2437     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2438     * @return bool true or false
2439     */
2440     function isAbstainAllow() external pure returns(bool) {
2441         return false;
2442     }
2443 
2444     /**
2445      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2446      * @return min - minimum number of choices
2447                max - maximum number of choices
2448      */
2449     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2450         return (YES, NO);
2451     }
2452 
2453     /**
2454      * @dev score return the proposal score
2455      * @param _proposalId the ID of the proposal
2456      * @return uint256 proposal score.
2457      */
2458     function score(bytes32 _proposalId) public view returns(uint256) {
2459         return  _score(_proposalId);
2460     }
2461 }
2462 
2463 // File: contracts/votingMachines/VotingMachineCallbacks.sol
2464 
2465 pragma solidity ^0.5.4;
2466 
2467 
2468 
2469 
2470 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2471 
2472     struct ProposalInfo {
2473         uint256 blockNumber; // the proposal's block number
2474         Avatar avatar; // the proposal's avatar
2475     }
2476 
2477     modifier onlyVotingMachine(bytes32 _proposalId) {
2478         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
2479         _;
2480     }
2481 
2482     // VotingMaching  ->  proposalId  ->  ProposalInfo
2483     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
2484 
2485     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2486     external
2487     onlyVotingMachine(_proposalId)
2488     returns(bool)
2489     {
2490         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2491         if (avatar == Avatar(0)) {
2492             return false;
2493         }
2494         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2495     }
2496 
2497     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2498     external
2499     onlyVotingMachine(_proposalId)
2500     returns(bool)
2501     {
2502         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2503         if (avatar == Avatar(0)) {
2504             return false;
2505         }
2506         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2507     }
2508 
2509     function stakingTokenTransfer(
2510         IERC20 _stakingToken,
2511         address _beneficiary,
2512         uint256 _amount,
2513         bytes32 _proposalId)
2514     external
2515     onlyVotingMachine(_proposalId)
2516     returns(bool)
2517     {
2518         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2519         if (avatar == Avatar(0)) {
2520             return false;
2521         }
2522         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2523     }
2524 
2525     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2526         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2527         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
2528             return 0;
2529         }
2530         return _stakingToken.balanceOf(address(avatar));
2531     }
2532 
2533     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2534         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2535         if (proposal.avatar == Avatar(0)) {
2536             return 0;
2537         }
2538         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2539     }
2540 
2541     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2542         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2543         if (proposal.avatar == Avatar(0)) {
2544             return 0;
2545         }
2546         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2547     }
2548 }
2549 
2550 // File: contracts/universalSchemes/ContributionReward.sol
2551 
2552 pragma solidity ^0.5.4;
2553 
2554 
2555 
2556 
2557 
2558 
2559 /**
2560  * @title A scheme for proposing and rewarding contributions to an organization
2561  * @dev An agent can ask an organization to recognize a contribution and reward
2562  * him with token, reputation, ether or any combination.
2563  */
2564 
2565 contract ContributionReward is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2566     using SafeMath for uint;
2567 
2568     event NewContributionProposal(
2569         address indexed _avatar,
2570         bytes32 indexed _proposalId,
2571         address indexed _intVoteInterface,
2572         string _descriptionHash,
2573         int256 _reputationChange,
2574         uint[5]  _rewards,
2575         IERC20 _externalToken,
2576         address _beneficiary
2577     );
2578 
2579     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
2580 
2581     event RedeemReputation(
2582         address indexed _avatar,
2583         bytes32 indexed _proposalId,
2584         address indexed _beneficiary,
2585         int256 _amount);
2586 
2587     event RedeemEther(address indexed _avatar,
2588         bytes32 indexed _proposalId,
2589         address indexed _beneficiary,
2590         uint256 _amount);
2591 
2592     event RedeemNativeToken(address indexed _avatar,
2593         bytes32 indexed _proposalId,
2594         address indexed _beneficiary,
2595         uint256 _amount);
2596 
2597     event RedeemExternalToken(address indexed _avatar,
2598         bytes32 indexed _proposalId,
2599         address indexed _beneficiary,
2600         uint256 _amount);
2601 
2602     // A struct holding the data for a contribution proposal
2603     struct ContributionProposal {
2604         uint256 nativeTokenReward; // Reward asked in the native token of the organization.
2605         int256 reputationChange; // Organization reputation reward requested.
2606         uint256 ethReward;
2607         IERC20 externalToken;
2608         uint256 externalTokenReward;
2609         address payable beneficiary;
2610         uint256 periodLength;
2611         uint256 numberOfPeriods;
2612         uint256 executionTime;
2613         uint[4] redeemedPeriods;
2614     }
2615 
2616     // A mapping from the organization (Avatar) address to the saved data of the organization:
2617     mapping(address=>mapping(bytes32=>ContributionProposal)) public organizationsProposals;
2618 
2619     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2620     struct Parameters {
2621         bytes32 voteApproveParams;
2622         IntVoteInterface intVote;
2623     }
2624 
2625     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2626     mapping(bytes32=>Parameters) public parameters;
2627 
2628     /**
2629     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2630     * @param _proposalId the ID of the voting in the voting machine
2631     * @param _param a parameter of the voting result, 1 yes and 2 is no.
2632     */
2633     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
2634         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2635         require(organizationsProposals[address(proposal.avatar)][_proposalId].executionTime == 0);
2636         require(organizationsProposals[address(proposal.avatar)][_proposalId].beneficiary != address(0));
2637         // Check if vote was successful:
2638         if (_param == 1) {
2639           // solhint-disable-next-line not-rely-on-time
2640             organizationsProposals[address(proposal.avatar)][_proposalId].executionTime = now;
2641         }
2642         emit ProposalExecuted(address(proposal.avatar), _proposalId, _param);
2643         return true;
2644     }
2645 
2646     /**
2647     * @dev hash the parameters, save them if necessary, and return the hash value
2648     */
2649     function setParameters(
2650         bytes32 _voteApproveParams,
2651         IntVoteInterface _intVote
2652     ) public returns(bytes32)
2653     {
2654         bytes32 paramsHash = getParametersHash(
2655             _voteApproveParams,
2656             _intVote
2657         );
2658         parameters[paramsHash].voteApproveParams = _voteApproveParams;
2659         parameters[paramsHash].intVote = _intVote;
2660         return paramsHash;
2661     }
2662 
2663     /**
2664     * @dev return a hash of the given parameters
2665     * @param _voteApproveParams parameters for the voting machine used to approve a contribution
2666     * @param _intVote the voting machine used to approve a contribution
2667     * @return a hash of the parameters
2668     */
2669     function getParametersHash(
2670         bytes32 _voteApproveParams,
2671         IntVoteInterface _intVote
2672     ) public pure returns(bytes32)
2673     {
2674         return (keccak256(abi.encodePacked(_voteApproveParams, _intVote)));
2675     }
2676 
2677     /**
2678     * @dev Submit a proposal for a reward for a contribution:
2679     * @param _avatar Avatar of the organization that the contribution was made for
2680     * @param _descriptionHash A hash of the proposal's description
2681     * @param _reputationChange - Amount of reputation change requested .Can be negative.
2682     * @param _rewards rewards array:
2683     *         rewards[0] - Amount of tokens requested per period
2684     *         rewards[1] - Amount of ETH requested per period
2685     *         rewards[2] - Amount of external tokens requested per period
2686     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
2687     *         rewards[4] - Number of periods
2688     * @param _externalToken Address of external token, if reward is requested there
2689     * @param _beneficiary Who gets the rewards
2690     */
2691     function proposeContributionReward(
2692         Avatar _avatar,
2693         string memory _descriptionHash,
2694         int256 _reputationChange,
2695         uint[5] memory _rewards,
2696         IERC20 _externalToken,
2697         address payable _beneficiary
2698     )
2699     public
2700     returns(bytes32)
2701     {
2702         validateProposalParams(_reputationChange, _rewards);
2703         Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];
2704 
2705         bytes32 contributionId = controllerParams.intVote.propose(
2706         2,
2707         controllerParams.voteApproveParams,
2708         msg.sender,
2709         address(_avatar)
2710         );
2711 
2712         address payable beneficiary = _beneficiary;
2713         if (beneficiary == address(0)) {
2714             beneficiary = msg.sender;
2715         }
2716 
2717         ContributionProposal memory proposal = ContributionProposal({
2718             nativeTokenReward: _rewards[0],
2719             reputationChange: _reputationChange,
2720             ethReward: _rewards[1],
2721             externalToken: _externalToken,
2722             externalTokenReward: _rewards[2],
2723             beneficiary: beneficiary,
2724             periodLength: _rewards[3],
2725             numberOfPeriods: _rewards[4],
2726             executionTime: 0,
2727             redeemedPeriods:[uint(0), uint(0), uint(0), uint(0)]
2728         });
2729         organizationsProposals[address(_avatar)][contributionId] = proposal;
2730 
2731         emit NewContributionProposal(
2732             address(_avatar),
2733             contributionId,
2734             address(controllerParams.intVote),
2735             _descriptionHash,
2736             _reputationChange,
2737             _rewards,
2738             _externalToken,
2739             beneficiary
2740         );
2741 
2742         proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({
2743             blockNumber:block.number,
2744             avatar:_avatar
2745         });
2746         return contributionId;
2747     }
2748 
2749     /**
2750     * @dev RedeemReputation reward for proposal
2751     * @param _proposalId the ID of the voting in the voting machine
2752     * @param _avatar address of the controller
2753     * @return reputation the redeemed reputation.
2754     */
2755     function redeemReputation(bytes32 _proposalId, Avatar _avatar) public returns(int256 reputation) {
2756 
2757         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2758         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2759         require(proposal.executionTime != 0);
2760         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 0);
2761 
2762         //set proposal reward to zero to prevent reentrancy attack.
2763         proposal.reputationChange = 0;
2764         reputation = int(periodsToPay) * _proposal.reputationChange;
2765         if (reputation > 0) {
2766             require(
2767             ControllerInterface(
2768             _avatar.owner()).mintReputation(uint(reputation), _proposal.beneficiary, address(_avatar)));
2769         } else if (reputation < 0) {
2770             require(
2771             ControllerInterface(
2772             _avatar.owner()).burnReputation(uint(reputation*(-1)), _proposal.beneficiary, address(_avatar)));
2773         }
2774         if (reputation != 0) {
2775             proposal.redeemedPeriods[0] = proposal.redeemedPeriods[0].add(periodsToPay);
2776             emit RedeemReputation(address(_avatar), _proposalId, _proposal.beneficiary, reputation);
2777         }
2778         //restore proposal reward.
2779         proposal.reputationChange = _proposal.reputationChange;
2780     }
2781 
2782     /**
2783     * @dev RedeemNativeToken reward for proposal
2784     * @param _proposalId the ID of the voting in the voting machine
2785     * @param _avatar address of the controller
2786     * @return amount the redeemed nativeToken.
2787     */
2788     function redeemNativeToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2789 
2790         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2791         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2792         require(proposal.executionTime != 0);
2793         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 1);
2794         //set proposal rewards to zero to prevent reentrancy attack.
2795         proposal.nativeTokenReward = 0;
2796 
2797         amount = periodsToPay.mul(_proposal.nativeTokenReward);
2798         if (amount > 0) {
2799             require(ControllerInterface(_avatar.owner()).mintTokens(amount, _proposal.beneficiary, address(_avatar)));
2800             proposal.redeemedPeriods[1] = proposal.redeemedPeriods[1].add(periodsToPay);
2801             emit RedeemNativeToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2802         }
2803 
2804         //restore proposal reward.
2805         proposal.nativeTokenReward = _proposal.nativeTokenReward;
2806     }
2807 
2808     /**
2809     * @dev RedeemEther reward for proposal
2810     * @param _proposalId the ID of the voting in the voting machine
2811     * @param _avatar address of the controller
2812     * @return amount ether redeemed amount
2813     */
2814     function redeemEther(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2815 
2816         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2817         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2818         require(proposal.executionTime != 0);
2819         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 2);
2820         //set proposal rewards to zero to prevent reentrancy attack.
2821         proposal.ethReward = 0;
2822         amount = periodsToPay.mul(_proposal.ethReward);
2823 
2824         if (amount > 0) {
2825             require(ControllerInterface(_avatar.owner()).sendEther(amount, _proposal.beneficiary, _avatar));
2826             proposal.redeemedPeriods[2] = proposal.redeemedPeriods[2].add(periodsToPay);
2827             emit RedeemEther(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2828         }
2829 
2830         //restore proposal reward.
2831         proposal.ethReward = _proposal.ethReward;
2832     }
2833 
2834     /**
2835     * @dev RedeemNativeToken reward for proposal
2836     * @param _proposalId the ID of the voting in the voting machine
2837     * @param _avatar address of the controller
2838     * @return amount the external token redeemed amount
2839     */
2840     function redeemExternalToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2841 
2842         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2843         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2844         require(proposal.executionTime != 0);
2845         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 3);
2846         //set proposal rewards to zero to prevent reentrancy attack.
2847         proposal.externalTokenReward = 0;
2848 
2849         if (proposal.externalToken != IERC20(0) && _proposal.externalTokenReward > 0) {
2850             amount = periodsToPay.mul(_proposal.externalTokenReward);
2851             if (amount > 0) {
2852                 require(
2853                 ControllerInterface(
2854                 _avatar.owner())
2855                 .externalTokenTransfer(_proposal.externalToken, _proposal.beneficiary, amount, _avatar));
2856                 proposal.redeemedPeriods[3] = proposal.redeemedPeriods[3].add(periodsToPay);
2857                 emit RedeemExternalToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2858             }
2859         }
2860         //restore proposal reward.
2861         proposal.externalTokenReward = _proposal.externalTokenReward;
2862     }
2863 
2864     /**
2865     * @dev redeem rewards for proposal
2866     * @param _proposalId the ID of the voting in the voting machine
2867     * @param _avatar address of the controller
2868     * @param _whatToRedeem whatToRedeem array:
2869     *         whatToRedeem[0] - reputation
2870     *         whatToRedeem[1] - nativeTokenReward
2871     *         whatToRedeem[2] - Ether
2872     *         whatToRedeem[3] - ExternalToken
2873     * @return  result boolean array for each redeem type.
2874     */
2875     function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] memory _whatToRedeem)
2876     public
2877     returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)
2878     {
2879 
2880         if (_whatToRedeem[0]) {
2881             reputationReward = redeemReputation(_proposalId, _avatar);
2882         }
2883 
2884         if (_whatToRedeem[1]) {
2885             nativeTokenReward = redeemNativeToken(_proposalId, _avatar);
2886         }
2887 
2888         if (_whatToRedeem[2]) {
2889             etherReward = redeemEther(_proposalId, _avatar);
2890         }
2891 
2892         if (_whatToRedeem[3]) {
2893             externalTokenReward = redeemExternalToken(_proposalId, _avatar);
2894         }
2895     }
2896 
2897     /**
2898     * @dev getPeriodsToPay return the periods left to be paid for reputation,nativeToken,ether or externalToken.
2899     * The function ignore the reward amount to be paid (which can be zero).
2900     * @param _proposalId the ID of the voting in the voting machine
2901     * @param _avatar address of the controller
2902     * @param _redeemType - the type of the reward  :
2903     *         0 - reputation
2904     *         1 - nativeTokenReward
2905     *         2 - Ether
2906     *         3 - ExternalToken
2907     * @return  periods left to be paid.
2908     */
2909     function getPeriodsToPay(bytes32 _proposalId, address _avatar, uint256 _redeemType) public view returns (uint256) {
2910         require(_redeemType <= 3, "should be in the redeemedPeriods range");
2911         ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];
2912         if (_proposal.executionTime == 0)
2913             return 0;
2914         uint256 periodsFromExecution;
2915         if (_proposal.periodLength > 0) {
2916           // solhint-disable-next-line not-rely-on-time
2917             periodsFromExecution = (now.sub(_proposal.executionTime))/(_proposal.periodLength);
2918         }
2919         uint256 periodsToPay;
2920         if ((_proposal.periodLength == 0) || (periodsFromExecution >= _proposal.numberOfPeriods)) {
2921             periodsToPay = _proposal.numberOfPeriods.sub(_proposal.redeemedPeriods[_redeemType]);
2922         } else {
2923             periodsToPay = periodsFromExecution.sub(_proposal.redeemedPeriods[_redeemType]);
2924         }
2925         return periodsToPay;
2926     }
2927 
2928     /**
2929     * @dev getRedeemedPeriods return the already redeemed periods for reputation, nativeToken, ether or externalToken.
2930     * @param _proposalId the ID of the voting in the voting machine
2931     * @param _avatar address of the controller
2932     * @param _redeemType - the type of the reward  :
2933     *         0 - reputation
2934     *         1 - nativeTokenReward
2935     *         2 - Ether
2936     *         3 - ExternalToken
2937     * @return redeemed period.
2938     */
2939     function getRedeemedPeriods(bytes32 _proposalId, address _avatar, uint256 _redeemType)
2940     public
2941     view
2942     returns (uint256) {
2943         return organizationsProposals[_avatar][_proposalId].redeemedPeriods[_redeemType];
2944     }
2945 
2946     function getProposalEthReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2947         return organizationsProposals[_avatar][_proposalId].ethReward;
2948     }
2949 
2950     function getProposalExternalTokenReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2951         return organizationsProposals[_avatar][_proposalId].externalTokenReward;
2952     }
2953 
2954     function getProposalExternalToken(bytes32 _proposalId, address _avatar) public view returns (address) {
2955         return address(organizationsProposals[_avatar][_proposalId].externalToken);
2956     }
2957 
2958     function getProposalExecutionTime(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2959         return organizationsProposals[_avatar][_proposalId].executionTime;
2960     }
2961 
2962     /**
2963     * @dev validateProposalParams validate proposal's rewards parameters.
2964     * The function check for potential overflow upon proposal's redeem.
2965     * The function reverts if the params are not valid.
2966     * @param _reputationChange - Amount of reputation change requested .Can be negative.
2967     * @param _rewards rewards array:
2968     *         rewards[0] - Amount of tokens requested per period
2969     *         rewards[1] - Amount of ETH requested per period
2970     *         rewards[2] - Amount of external tokens requested per period
2971     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
2972     *         rewards[4] - Number of periods
2973     */
2974     function validateProposalParams(int256 _reputationChange, uint[5] memory _rewards) private pure {
2975         require(((_rewards[3] > 0) || (_rewards[4] == 1)), "periodLength equal 0 require numberOfPeriods to be 1");
2976         if (_rewards[4] > 0) {
2977             // This is the only case of overflow not detected by the check below
2978             require(!(int(_rewards[4]) == -1 && _reputationChange == (-2**255)),
2979             "numberOfPeriods * _reputationChange will overflow");
2980            //check that numberOfPeriods * _reputationChange will not overflow
2981             require((int(_rewards[4]) * _reputationChange) / int(_rewards[4]) == _reputationChange,
2982             "numberOfPeriods * reputationChange will overflow");
2983             //check that numberOfPeriods * tokenReward will not overflow
2984             require((_rewards[4] * _rewards[0]) / _rewards[4] == _rewards[0],
2985             "numberOfPeriods * tokenReward will overflow");
2986             //check that numberOfPeriods * ethReward will not overflow
2987             require((_rewards[4] * _rewards[1]) / _rewards[4] == _rewards[1],
2988             "numberOfPeriods * ethReward will overflow");
2989             //check that numberOfPeriods * texternalTokenReward will not overflow
2990             require((_rewards[4] * _rewards[2]) / _rewards[4] == _rewards[2],
2991             "numberOfPeriods * texternalTokenReward will overflow");
2992         }
2993     }
2994 
2995 }
