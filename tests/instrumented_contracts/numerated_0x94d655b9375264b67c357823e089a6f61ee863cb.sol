1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/AccessControl.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/IAccessControl.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
9     },
10     "@openzeppelin/contracts/interfaces/IERC1271.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
12     },
13     "@openzeppelin/contracts/security/Pausable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
51     },
52     "@openzeppelin/contracts/utils/math/Math.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/Strings.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
57     },
58     "contracts/Global/AuthorityModel.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title AuthorityModel.sol. Library for global authority components\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\n/**\n *\n * @dev Inheritance details:\n *      AccessControl           OZ access control implementation - used for authority control\n *\n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract AuthorityModel is AccessControl {\n  // Platform admin: The role for platform admins. Platform admins can be added. These addresses have privileged\n  // access to maintain configuration like the platform fee.\n  bytes32 public constant PLATFORM_ADMIN = keccak256(\"PLATFORM_ADMIN\");\n\n  // Review admin: access to perform reviews of drops, in this case the authority to maintain the drop status parameter, and\n  // set it from review to editable (when sending back to the project owner), or from review to approved (when)\n  // the drop is ready to go).\n  bytes32 public constant REVIEW_ADMIN = keccak256(\"REVIEW_ADMIN\");\n\n  // Project owner: This is the role for the project itself, i.e. the team that own this drop.\n  bytes32 internal constant PROJECT_OWNER = keccak256(\"PROJECT_OWNER\");\n\n  // Address for the factory:\n  address public factory;\n\n  /** ====================================================================================================================\n   *                                                        ERRORS\n   * =====================================================================================================================\n   */\n  error CallerIsNotDefaultAdmin(address caller);\n  error CallerIsNotPlatformAdmin(address caller);\n  error CallerIsNotReviewAdmin(address caller);\n  error CallerIsNotPlatformAdminOrProjectOwner(address caller);\n  error CallerIsNotPlatformAdminOrFactory(address caller);\n  error CallerIsNotProjectOwner(address caller);\n\n  /** ====================================================================================================================\n   *                                                       MODIFIERS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyDefaultAdmin. The associated action can only be taken by an address with the\n   * default admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyDefaultAdmin() {\n    if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\n      revert CallerIsNotDefaultAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdmin() {\n    if (!hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyReviewAdmin. The associated action can only be taken by an address with the\n   * review admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyReviewAdmin() {\n    if (!hasRole(REVIEW_ADMIN, msg.sender))\n      revert CallerIsNotReviewAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdminOrProjectOwner. The associated action can only be taken by an address with the\n   * platform admin role or project owner role\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdminOrProjectOwner() {\n    if (\n      !hasRole(PLATFORM_ADMIN, msg.sender) &&\n      !hasRole(PROJECT_OWNER, msg.sender)\n    ) revert CallerIsNotPlatformAdminOrProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyProjectOwner. The associated action can only be taken by an address with the\n   * project owner role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyProjectOwner() {\n    if (!hasRole(PROJECT_OWNER, msg.sender))\n      revert CallerIsNotProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyFactoryOrPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role or the factory.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyFactoryOrPlatformAdmin() {\n    if (msg.sender != factory && !hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdminOrFactory(msg.sender);\n    _;\n  }\n}\n"
60     },
61     "contracts/Global/IConfigStructures.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\ninterface IConfigStructures {\n  enum DropStatus {\n    approved,\n    deployed,\n    cancelled\n  }\n\n  enum TemplateStatus {\n    live,\n    terminated\n  }\n\n  enum TokenAllocationMethod {\n    sequential,\n    random\n  }\n\n  // The current status of the mint:\n  //   - notEnabled: This type of mint is not part of this drop\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\n  //   - open: it's ready for ya, get in there.\n  //   - finished: been and gone.\n  //   - unknown: theoretically impossible.\n  enum MintStatus {\n    notEnabled,\n    notYetOpen,\n    open,\n    finished,\n    unknown\n  }\n\n  struct SubListConfig {\n    uint256 start;\n    uint256 end;\n    uint256 phaseMaxSupply;\n  }\n\n  struct PrimarySaleModuleInstance {\n    address instanceAddress;\n    string instanceDescription;\n  }\n\n  struct NFTModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct PrimarySaleModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct VestingModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct RoyaltySplitterModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModules {\n    InLifeModuleConfig[] modules;\n  }\n\n  struct NFTConfig {\n    uint256 supply;\n    uint256 mintingMethod;\n    bytes32 name;\n    bytes32 symbol;\n    bytes32 dropId;\n    bytes32 positionProof;\n  }\n\n  struct DropApproval {\n    DropStatus status;\n    uint32 lastChangedDate;\n    address dropOwnerAddress;\n    bytes32 configHash;\n  }\n\n  struct Template {\n    TemplateStatus status;\n    uint16 templateNumber;\n    uint32 loadedDate;\n    address payable templateAddress;\n    string templateDescription;\n  }\n\n  struct NumericOverride {\n    bool isSet;\n    uint248 overrideValue;\n  }\n}\n"
63     },
64     "contracts/NFT/INFTByMetadrop.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title INFTByMetadrop.sol. Interface for metadrop NFT standard\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Global/IConfigStructures.sol\";\n\ninterface INFTByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                     EVENTS\n   * =====================================================================================================================\n   */\n  event Revealed();\n  event RandomNumberReceived(uint256 indexed requestId, uint256 randomNumber);\n  event VRFPositionSet(uint256 VRFPosition);\n  event PositionProofSet(bytes32 positionProof);\n  event MetadropMint(\n    address indexed allowanceAddress,\n    address indexed recipientAddress,\n    address callerAddress,\n    address primarySaleModuleAddress,\n    uint256 unitPrice,\n    uint256[] tokenIds\n  );\n\n  /** ====================================================================================================================\n   *                                                     ERRORS\n   * =====================================================================================================================\n   */\n  error TransferFailed();\n  error AlreadyInitialised();\n  error MetadataIsLocked();\n  error InvalidTokenAllocationMethod();\n  error InvalidAddress();\n  error IncorrectConfirmationValue();\n  error MintingIsClosedForever();\n  error VRFAlreadySet();\n  error PositionProofAlreadySet();\n  error MetadropFactoryOnly();\n  error InvalidRecipient();\n  error PauseCutOffHasPassed();\n  error AdditionalAddressesCannotBeAddedToRolesUseTransferToTransferRoleToAnotherAddress();\n\n  /** ====================================================================================================================\n   *                                                    FUNCTIONS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseNFT  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param owner_              The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                            platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_       The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModules_ The primary sale modules for this drop. These are the contract addresses that are\n   *                            authorised to call mint on this contract.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_          The drop specific configuration for this NFT. This is decoded and used to set\n   *                            configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitter_  The address of the deployed royalty payment splitted for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param totalRoyaltyPercentage_  The total royalty percentage (project + metadrop) for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialiseNFT(\n    address owner_,\n    address projectOwner_,\n    PrimarySaleModuleInstance[] calldata primarySaleModules_,\n    NFTModuleConfig calldata nftModule_,\n    address royaltyPaymentSplitter_,\n    uint96 totalRoyaltyPercentage_,\n    string[3] calldata collectionURIs_,\n    uint8 pauseCutOffInDays_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) metadropCustom  Returns if this contract is a custom NFT (true) or is a standard metadrop\n   *                                 ERC721M (false)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isMetadropCustom_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropCustom() external pure returns (bool isMetadropCustom_);\n\n  /** ____________________________________________________________________________________________________________________\n   *\n   * @dev (function) totalSupply  Returns total supply (minted - burned)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalSupply_   The total supply of this collection (minted - burned)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalSupply() external view returns (uint256 totalSupply_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalUnminted  Returns the remaining unminted supply\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalUnminted_   The total unminted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalUnminted() external view returns (uint256 totalUnminted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalMinted  Returns the total number of tokens ever minted\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalMinted_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalMinted() external view returns (uint256 totalMinted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalBurned  Returns the count of tokens sent to the burn address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalBurned_   The total burned supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalBurned() external view returns (uint256 totalBurned_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferProjectOwner  Allows the current project owner to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_   New project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(address newProjectOwner_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferPlatformAdmin  Allows the current platform admin to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_   New platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferPlatformAdmin(address newPlatformAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setURIs  Set the URI data for this contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param preRevealURI_   The URI to use pre-reveal\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param arweaveURI_     The URI for arweave\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param ipfsURI_     The URI for IPFS\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setURIs(\n    string calldata preRevealURI_,\n    string calldata arweaveURI_,\n    string calldata ipfsURI_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) lockURIsCannotBeUndone  Lock the URI data for this contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_   The confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function lockURIsCannotBeUndone(string calldata confirmation_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                       -->LOCK MINTING\n   * @dev (function) setMintingCompleteForeverCannotBeUndone  Allow project owner OR platform admin to set minting\n   *                                                          complete\n   *\n   * @notice Enter confirmation value of \"MintingComplete\" to confirm that you are closing minting.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_  Confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMintingCompleteForeverCannotBeUndone(\n    string calldata confirmation_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) revealCollection  Set the collection to revealed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function revealCollection() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setPositionProof  Set the metadata position proof\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param positionProof_  The metadata proof\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPositionProof(bytes32 positionProof_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setUseArweave  Guards against either arweave or IPFS being no more\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param useArweave_   Boolean to indicate whether arweave should be used or not (true = use arweave, false = use IPFS)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setUseArweave(bool useArweave_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) setDefaultRoyalty  Set the royalty percentage\n   *\n   * @notice - we have specifically NOT implemented the ability to have different royalties on a token by token basis.\n   * This reduces the complexity of processing on multi-buys, and also avoids challenges to decentralisation (e.g. the\n   * project targetting one users tokens with larger royalties)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_   Royalty receiver\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fraction_   Royalty fraction\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultRoyalty(address recipient_, uint96 fraction_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) deleteDefaultRoyalty  Delete the royalty percentage claimed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function deleteDefaultRoyalty() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) metadropMint  Mint tokens. Can only be called from a valid primary market contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The address that has called mint through the primary sale module.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param allowanceAddress_      The address that has an allowance being used in this mint. This will be the same as the\n   *                               calling address in almost all cases. An example of when they may differ is in a list\n   *                               mint where the caller is a delegate of another address with an allowance in the list.\n   *                               The caller is performing the mint, but it is the allowance for the allowance address\n   *                               that is being checked and decremented in this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_   The quantity of tokens to be minted\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param unitPrice_        The unit price for each token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropMint(\n    address caller_,\n    address recipient_,\n    address allowanceAddress_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setStartPosition  Get the metadata start position for use on reveal of this collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setStartPosition() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) fulfillRandomWords  Callback from the chainlinkv2 oracle (on factory) with randomness\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param requestId_      The Id of this request (this contract will submit a single request)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param randomWords_   The random words returned from chainlink\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function fulfillRandomWords(\n    uint256 requestId_,\n    uint256[] memory randomWords_\n  ) external;\n}\n"
66     },
67     "contracts/PrimarySaleModules/IPrimarySaleModule.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IPrimarySaleModule.sol. Interface for base primary sale module contract\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"../NFT/INFTByMetadrop.sol\";\nimport \"../ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol\";\n\ninterface IPrimarySaleModule is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                       ERRORS\n   * =====================================================================================================================\n   */\n  error AlreadyInitialised();\n  error AddressAlreadySet();\n  error ThisMintIsClosed();\n  error IncorrectPayment();\n  error InvalidOracleSignature();\n  error QuantityExceedsPhaseRemainingSupply(\n    uint256 requested,\n    uint256 remaining\n  );\n  error ParametersDoNotMatchSignedMessage();\n  error TransferFailed();\n  error OracleSignatureHasExpired();\n  error CannotSetToZeroAddress();\n\n  /** ====================================================================================================================\n   *                                                      FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialisePrimarySaleModule  Defined here and must be overriden in child contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param initialInstanceOwner_  The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                               platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_          The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vesting_               The vesting contract used for sales proceeds from this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param configData_            The drop specific configuration for this module. This is decoded and used to set\n   *                               configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutoffInDays_     The maximum number of days after drop deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_ The trusted metadrop signer. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_ The validity period of a signed message. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialisePrimarySaleModule(\n    address initialInstanceOwner_,\n    address projectOwner_,\n    address vesting_,\n    bytes calldata configData_,\n    uint256 pauseCutoffInDays_,\n    address metadropOracleAddress_,\n    uint80 messageValidityInSeconds_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->SETUP\n   * @dev (function) setNFTAddress    Set the NFT contract for this drop\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftContract_           The deployed NFT contract\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setNFTAddress(address nftContract_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->SETUP\n   * @dev (function) phaseMintStatus    The status of the deployed primary sale module\n   * _____________________________________________________________________________________________________________________\n   */\n  function phaseMintStatus() external view returns (MintStatus status);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawETH      A withdraw function to allow ETH to be withdrawn to the vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             Theamount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawETH(uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawContractETHBalance      A withdraw function to allow  all ETH to be withdrawn to vesting.\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawContractETHBalance() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawERC20     A withdraw function to allow ERC20s to be withdrawn to the vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_             The token to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ACCESS\n   * @dev (function) transferProjectOwner    Allows the current project owner to transfer this role to another address,\n   * therefore being the equivalent of 'transfer owner'\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_         The new project owner address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(address newProjectOwner_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ACCESS\n   * @dev (function) transferPlatformAdmin    Allows the current platform admin to transfer this role to another address,\n   * therefore being the equivalent of 'transfer owner'\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_         The new platform admin address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferPlatformAdmin(address newPlatformAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setMetadropOracleAddress   Allow platform admin to update trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_         The new metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setVestingContractAddress     Allow platform admin to update vesting contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingContract_         The new vesting contract address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVestingContractAddress(address vestingContract_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn off anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOff() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn ON anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOn() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn off EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOff() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn ON EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOn() external;\n}\n"
69     },
70     "contracts/PrimarySaleModules/PrimarySaleModule.sol": {
71       "content": "// SPDX-License-Identifier: BUSL 1.0\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title PrimarySaleModule.sol. This contract is the base primary sale module contract\n * for the metadrop drop platform. All primary sale modules inherit from this contract\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"./IPrimarySaleModule.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"../Global/AuthorityModel.sol\";\n\n/**\n *\n * @dev Inheritance details:\n *      IPrimarySaleModule         Interface for this module\n *      Pausable                   Allow modules to be paused\n *      AccessControl              Implement OZ access control for privileged access\n *\n *\n */\n\ncontract PrimarySaleModule is IPrimarySaleModule, Pausable, AuthorityModel {\n  using Strings for uint256;\n\n  // EPS Register\n  IEPSDelegationRegister public immutable epsRegister;\n  // Slot 1 - NFT and phase details (pack together for warm slot reads)\n  //  160\n  //   32\n  //   32\n  //   32\n  //= 256\n\n  uint32 public phaseQuantityMinted;\n\n  INFTByMetadrop public nftContract;\n\n  // Start time for  minting\n  uint32 public phaseStart;\n\n  // End time for minting. Note that this can be passed as maxUint32, which is a mint\n  // unlimited by time\n  uint32 public phaseEnd;\n\n  // The number of NFTs that can be minted in this phase:\n  uint32 public phaseMaxSupply;\n\n  // Slot 2 - anti-bot-proection (pack together for warm slot reads)\n  //  160\n  //    8\n  //    8\n  //   32\n  //= 208\n\n  // The metadrop admin signer used as a trusted oracle (e.g. for anti-bot protection)\n  address public metadropOracleAddress;\n\n  // Bool to indicate if we are using the oracle for anti-bot protection\n  bool public useOracleToAntiSybil;\n\n  // Bool to indicate if EPS is in use in this drop\n  bool public useEPS;\n\n  // The oracle signed message validity period:\n  uint80 public messageValidityInSeconds;\n\n  // Slot 3 - not accessed in mints\n  //  160\n  //   32\n  //    8\n  //= 200\n\n  // The contract to which all funds route. This is a payment splitting vesting contract\n  address public vestingContract;\n\n  // Point at which contract cannot be paused:\n  uint32 public pauseCutoffInDays;\n\n  // Bool that controls initialisation and only allows it to occur ONCE. This is\n  // needed as this contract is clonable, threfore the constructor is not called\n  // on cloned instances. We setup state of this contract through the initialise\n  // function.\n  bool public initialised;\n\n  /** ====================================================================================================================\n   *                                              CONSTRUCTOR AND INTIIALISE\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                        -->CONSTRUCTOR\n   * @dev constructor           The constructor is not called when the contract is cloned. In this\n   *                            constructor we just setup default values and set the template contract to initialised.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param epsRegister_        The EPS register address (0x888888888888660F286A7C06cfa3407d09af44B2 on most chains)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  constructor(address epsRegister_) {\n    epsRegister = IEPSDelegationRegister(epsRegister_);\n    initialised = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialisePrimarySaleModule  Defined here and must be overriden in child contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param initialInstanceOwner_  The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                               platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_          The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vesting_               The vesting contract used for sales proceeds from this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param configData_            The drop specific configuration for this module. This is decoded and used to set\n   *                               configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutoffInDays_     The maximum number of days after drop deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_ The trusted metadrop signer. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_ The validity period of a signed message. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialisePrimarySaleModule(\n    address initialInstanceOwner_,\n    address projectOwner_,\n    address vesting_,\n    bytes calldata configData_,\n    uint256 pauseCutoffInDays_,\n    address metadropOracleAddress_,\n    uint80 messageValidityInSeconds_\n  ) public virtual {\n    // Must be overridden\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) _initialisePrimarySaleModuleBase  Base configuration load that is shared across all primary sale\n   *                                                   modules\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param initialInstanceOwner_  The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                               platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_          The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vesting_               The vesting contract used for sales proceeds from this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutoffInDays_     The maximum number of days after drop deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param start_                 The start date of this primary sale module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param end_                   The end date of this primary sale module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param phaseMaxSupply_        The max supply for this phase\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_ The trusted metadrop signer. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_ The validity period of a signed message. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _initialisePrimarySaleModuleBase(\n    address initialInstanceOwner_,\n    address projectOwner_,\n    address vesting_,\n    uint256 pauseCutoffInDays_,\n    uint256 start_,\n    uint256 end_,\n    uint256 phaseMaxSupply_,\n    address metadropOracleAddress_,\n    uint80 messageValidityInSeconds_\n  ) internal {\n    if (initialised) revert AlreadyInitialised();\n\n    _grantRole(PLATFORM_ADMIN, initialInstanceOwner_);\n    _grantRole(PROJECT_OWNER, projectOwner_);\n\n    // If the vesting contract is address(0) then the vesting module\n    // has been flagged as not required for this drop. This will almost\n    // exclusively be in the case of a free drop, where there are no funds\n    // to vest or split.\n    // To avoid any possible loss of funds from incorrect configuation we don't\n    // set the vestingContract to address(0), but rather to the platform admin\n    if (vesting_ == address(0)) {\n      vestingContract = initialInstanceOwner_;\n    } else {\n      vestingContract = vesting_;\n    }\n\n    pauseCutoffInDays = uint32(pauseCutoffInDays_);\n\n    phaseStart = uint32(start_);\n    phaseEnd = uint32(end_);\n    phaseMaxSupply = uint32(phaseMaxSupply_);\n\n    metadropOracleAddress = metadropOracleAddress_;\n    messageValidityInSeconds = messageValidityInSeconds_;\n\n    useOracleToAntiSybil = true;\n    useEPS = true;\n    factory = msg.sender;\n\n    initialised = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->SETUP\n   * @dev (function) setNFTAddress    Set the NFT contract for this drop\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftContract_           The deployed NFT contract\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setNFTAddress(\n    address nftContract_\n  ) external onlyFactoryOrPlatformAdmin {\n    if (nftContract == INFTByMetadrop(address(0))) {\n      nftContract = INFTByMetadrop(nftContract_);\n    } else {\n      revert AddressAlreadySet();\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->SETUP\n   * @dev (function) setPhaseStart  Set the phase start for this drop (platform admin only)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param phaseStart_             The phase start time\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPhaseStart(uint32 phaseStart_) external onlyPlatformAdmin {\n    phaseStart = phaseStart_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->SETUP\n   * @dev (function) setPhaseEnd    Set the phase start for this drop (platform admin only)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param phaseEnd_               The phase end time\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPhaseEnd(uint32 phaseEnd_) external onlyPlatformAdmin {\n    phaseEnd = phaseEnd_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->SETUP\n   * @dev (function) setPhaseMaxSupply     Set the phase start for this drop (platform admin only)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param phaseMaxSupply_                The phase supply\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPhaseMaxSupply(\n    uint32 phaseMaxSupply_\n  ) external onlyPlatformAdmin {\n    phaseMaxSupply = phaseMaxSupply_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->SETUP\n   * @dev (function) phaseMintStatus    The status of the deployed primary sale module\n   * _____________________________________________________________________________________________________________________\n   */\n  function phaseMintStatus() public view returns (MintStatus status) {\n    return _primarySaleStatus(phaseStart, phaseEnd);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->SETUP\n   * @dev (function) _primarySaleStatus    Return the status of the mint type\n   * _____________________________________________________________________________________________________________________\n   */\n  function _primarySaleStatus(\n    uint256 start_,\n    uint256 end_\n  ) internal view returns (MintStatus) {\n    // Explicitly check for open before anything else. This is the only valid path to making a\n    // state change, so keep the gas as low as possible for the code path through 'open'\n    if (block.timestamp >= (start_) && block.timestamp <= (end_)) {\n      return (MintStatus.open);\n    }\n\n    if ((start_ + end_) == 0) {\n      return (MintStatus.notEnabled);\n    }\n\n    if (block.timestamp > end_) {\n      return (MintStatus.finished);\n    }\n\n    if (block.timestamp < start_) {\n      return (MintStatus.notYetOpen);\n    }\n\n    return (MintStatus.unknown);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) _mint         Called from all primary sale modules: perform minting!\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The address that has called mint through the primary sale module.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param allowanceAddress_      The address that has an allowance being used in this mint. This will be the same as the\n   *                               calling address in almost all cases. An example of when they may differ is in a list\n   *                               mint where the caller is a delegate of another address with an allowance in the list.\n   *                               The caller is performing the mint, but it is the allowance for the allowance address\n   *                               that is being checked and decremented in this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_        The number of NFTs being minted in this call\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param unitPrice_             The per NFT price for this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageTimeStamp_      The timestamp of the signed message\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageHash_           The message hash signed by the trusted oracle signer. This will be the keccack256 hash\n   *                               of received data about this social mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageSignature_      The signed message from the backend oracle signer for validation.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _mint(\n    address caller_,\n    address recipient_,\n    address allowanceAddress_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_,\n    uint256 messageTimeStamp_,\n    bytes32 messageHash_,\n    bytes calldata messageSignature_\n  ) internal whenNotPaused {\n    if (phaseMintStatus() != MintStatus.open) revert ThisMintIsClosed();\n\n    if (\n      phaseMaxSupply != 0 &&\n      quantityToMint_ > (phaseMaxSupply - phaseQuantityMinted)\n    ) {\n      revert QuantityExceedsPhaseRemainingSupply(\n        quantityToMint_,\n        phaseMaxSupply - phaseQuantityMinted\n      );\n    }\n\n    phaseQuantityMinted += uint32(quantityToMint_);\n\n    if (useOracleToAntiSybil) {\n      // Check that this signature is from the oracle signer:\n      if (!_validSignature(messageHash_, messageSignature_)) {\n        revert InvalidOracleSignature();\n      }\n\n      // Check that the signature has not expired:\n      if ((messageTimeStamp_ + messageValidityInSeconds) < block.timestamp) {\n        revert OracleSignatureHasExpired();\n      }\n\n      // Signature is valid. Check that the passed parameters match the hash that was signed:\n      if (\n        !_parametersMatchHash(\n          recipient_,\n          quantityToMint_,\n          msg.sender,\n          messageTimeStamp_,\n          messageHash_\n        )\n      ) {\n        revert ParametersDoNotMatchSignedMessage();\n      }\n    }\n    nftContract.metadropMint(\n      caller_,\n      recipient_,\n      allowanceAddress_,\n      quantityToMint_,\n      unitPrice_\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) _validSignature         Checks the the signature on the signed message is from the metadrop oracle\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageHash_           The message hash signed by the trusted oracle signer. This will be the keccack256 hash\n   *                               of received data about this social mint\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageSignature_      The signed message from the backend oracle signer for validation.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _validSignature(\n    bytes32 messageHash_,\n    bytes memory messageSignature_\n  ) internal view returns (bool) {\n    bytes32 ethSignedMessageHash = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash_)\n    );\n\n    // Check the signature is valid:\n    return (\n      SignatureChecker.isValidSignatureNow(\n        metadropOracleAddress,\n        ethSignedMessageHash,\n        messageSignature_\n      )\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) _parametersMatchHash      Checks the the signature on the signed message is from the metadrop oracle\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_        The number of NFTs being minted in this call\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The msg.sender on this call\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageTimeStamp_      The timestamp on the message\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageHash_           The message hash signed by the trusted oracle signer. This will be the keccack256 hash\n   *                               of received data about this social mint\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _parametersMatchHash(\n    address recipient_,\n    uint256 quantityToMint_,\n    address caller_,\n    uint256 messageTimeStamp_,\n    bytes32 messageHash_\n  ) internal pure returns (bool) {\n    return (\n      (keccak256(\n        abi.encodePacked(\n          recipient_,\n          quantityToMint_,\n          caller_,\n          messageTimeStamp_\n        )\n      ) == messageHash_)\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawETH      A withdraw function to allow ETH to be withdrawn to the vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawETH(uint256 amount_) external onlyPlatformAdmin {\n    (bool success, ) = vestingContract.call{value: amount_}(\"\");\n    if (!success) revert TransferFailed();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawContractETHBalance      A withdraw function to allow  all ETH to be withdrawn to vesting.\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawContractETHBalance() external onlyPlatformAdmin {\n    (bool success, ) = vestingContract.call{value: address(this).balance}(\"\");\n    if (!success) revert TransferFailed();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawERC20     A withdraw function to allow ERC20s to be withdrawn to the vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_             The token to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawERC20(\n    IERC20 token_,\n    uint256 amount_\n  ) external onlyPlatformAdmin {\n    bool success = token_.transfer(vestingContract, amount_);\n    if (!success) revert TransferFailed();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ACCESS\n   * @dev (function) transferProjectOwner    Allows the current project owner to transfer this role to another address,\n   * therefore being the equivalent of 'transfer owner'\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_         The new project owner address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(\n    address newProjectOwner_\n  ) external onlyProjectOwner {\n    grantRole(PROJECT_OWNER, newProjectOwner_);\n    revokeRole(PROJECT_OWNER, msg.sender);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ACCESS\n   * @dev (function) transferPlatformAdmin    Allows the current platform admin to transfer this role to another address,\n   * therefore being the equivalent of 'transfer owner'\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_         The new platform admin address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferPlatformAdmin(\n    address newPlatformAdmin_\n  ) external onlyPlatformAdmin {\n    grantRole(PLATFORM_ADMIN, newPlatformAdmin_);\n    revokeRole(PLATFORM_ADMIN, msg.sender);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setMetadropOracleAddress   Allow platform admin to update trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_         The new metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(\n    address metadropOracleAddress_\n  ) external onlyPlatformAdmin {\n    if (metadropOracleAddress_ == address(0)) {\n      revert CannotSetToZeroAddress();\n    }\n    metadropOracleAddress = metadropOracleAddress_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setVestingContractAddress     Allow platform admin to update vesting contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingContract_         The new vesting contract address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVestingContractAddress(\n    address vestingContract_\n  ) external onlyPlatformAdmin {\n    if (vestingContract_ == address(0)) {\n      revert CannotSetToZeroAddress();\n    }\n    vestingContract = vestingContract_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn off anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOff() external onlyPlatformAdmin {\n    useOracleToAntiSybil = false;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn ON anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOn() external onlyPlatformAdmin {\n    useOracleToAntiSybil = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn off EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOff() external onlyPlatformAdmin {\n    useEPS = false;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn ON EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOn() external onlyPlatformAdmin {\n    useEPS = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) pause    Allow platform admin to pause\n   * _____________________________________________________________________________________________________________________\n   */\n  function pause() external onlyPlatformAdmin {\n    _pause();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) unpause    Allow platform admin to unpause\n   * _____________________________________________________________________________________________________________________\n   */\n  function unpause() external onlyPlatformAdmin {\n    _unpause();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) receive   Reject eth of unkown source\n   * _____________________________________________________________________________________________________________________\n   */\n  receive() external payable {\n    if (!hasRole(PLATFORM_ADMIN, msg.sender)) {\n      revert CallerIsNotPlatformAdmin(msg.sender);\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) fallback   Revert all fall backs\n   * _____________________________________________________________________________________________________________________\n   */\n  fallback() external {\n    revert();\n  }\n}\n"
72     },
73     "contracts/PrimarySaleModules/PublicMint/IPublicMintByMetadrop.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IPublicMintByMetadrop.sol. Interface for metadrop public mint primary sale module\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../Global/IConfigStructures.sol\";\nimport \"../IPrimarySaleModule.sol\";\n\ninterface IPublicMintByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                    STRUCTS and ENUMS\n   * =====================================================================================================================\n   */\n  // Configuation options for this primary sale module.\n  struct PublicMintConfig {\n    uint256 phaseMaxSupply;\n    uint256 phaseStart;\n    uint256 phaseEnd;\n    uint256 publicPrice;\n    uint256 maxPublicQuantity;\n  }\n\n  /** ====================================================================================================================\n   *                                                        ERRORS\n   * =====================================================================================================================\n   */\n  // Error when the mint request exceeds the public mint allowance.\n  error MaxPublicMintAllowanceExceeded(\n    uint256 requested,\n    uint256 alreadyMinted,\n    uint256 maxAllowance\n  );\n\n  /** ====================================================================================================================\n   *                                                       FUNCTIONS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) publicMintStatus  View of public mint status\n   * _____________________________________________________________________________________________________________________\n   */\n  /**\n   *\n   * @dev publicMintStatus: View of public mint status\n   *\n   */\n  function publicMintStatus() external view returns (MintStatus);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) publicMint  Public minting of tokens according to set config.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_        The number of NFTs being minted in this call\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageTimeStamp_      The timestamp of the signed message\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageHash_           The message hash signed by the trusted oracle signer. This will be checked as part of\n   *                               antibot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageSignature_      The signed message from the backend oracle signer for validation as part of anti-bot\n   *                               protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function publicMint(\n    uint256 quantityToMint_,\n    address recipient_,\n    uint256 messageTimeStamp_,\n    bytes32 messageHash_,\n    bytes calldata messageSignature_\n  ) external payable;\n}\n"
75     },
76     "contracts/PrimarySaleModules/PublicMint/PublicMintByMetadrop.sol": {
77       "content": "// SPDX-License-Identifier: BUSL 1.0\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title PublicMintByMetadrop.sol. This contract is the public mint primary sale contract\n * from the metadrop deployment platform\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./IPublicMintByMetadrop.sol\";\nimport \"../PrimarySaleModule.sol\";\n\n/**\n *\n * @dev Inheritance details:\n *      PrimarySaleModule             Platform-wide primary sale module features\n *      IPublicMintByMetadrop         Specfic interface for this primary sale module\n *\n *\n */\n\ncontract PublicMintByMetadrop is PrimarySaleModule, IPublicMintByMetadrop {\n  // Mint price for the public mint.\n  uint128 public publicMintPrice;\n\n  // Max allowance per address for public mint\n  uint16 public maxPublicMintPerAddress;\n\n  // Track publicMint minting allocations:\n  mapping(address => uint256) public publicMintAllocationMinted;\n\n  /** ====================================================================================================================\n   *                                              CONSTRUCTOR AND INTIIALISE\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                        -->CONSTRUCTOR\n   * @dev constructor           The constructor is not called when the contract is cloned. In this\n   *                            constructor we just setup default values and set the template contract to initialised.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param epsRegister_        The EPS register address (0x888888888888660F286A7C06cfa3407d09af44B2 on most chains)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  constructor(address epsRegister_) PrimarySaleModule(epsRegister_) {}\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialisePrimarySaleModule  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param initialInstanceOwner_  The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                               platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_          The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vesting_               The vesting contract used for sales proceeds from this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param configData_            The drop specific configuration for this module. This is decoded and used to set\n   *                               configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutoffInDays_     The maximum number of days after drop deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_ The trusted metadrop signer. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_ The validity period of a signed message. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialisePrimarySaleModule(\n    address initialInstanceOwner_,\n    address projectOwner_,\n    address vesting_,\n    bytes calldata configData_,\n    uint256 pauseCutoffInDays_,\n    address metadropOracleAddress_,\n    uint80 messageValidityInSeconds_\n  ) public override {\n    // Decode the config:\n    PublicMintConfig memory publicMintConfig = abi.decode(\n      configData_,\n      (PublicMintConfig)\n    );\n\n    // Set the public mint price:\n    publicMintPrice = uint128(publicMintConfig.publicPrice);\n\n    // Set max mints per address\n    maxPublicMintPerAddress = uint16(publicMintConfig.maxPublicQuantity);\n\n    // Set this phases max supply\n    phaseMaxSupply = uint32(publicMintConfig.phaseMaxSupply);\n\n    _initialisePrimarySaleModuleBase(\n      initialInstanceOwner_,\n      projectOwner_,\n      vesting_,\n      pauseCutoffInDays_,\n      publicMintConfig.phaseStart,\n      publicMintConfig.phaseEnd,\n      publicMintConfig.phaseMaxSupply,\n      metadropOracleAddress_,\n      messageValidityInSeconds_\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) publicMintStatus  View of public mint status\n   * _____________________________________________________________________________________________________________________\n   */\n  function publicMintStatus() external view returns (MintStatus) {\n    return phaseMintStatus();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) publicMint  Public minting of tokens according to set config.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_        The number of NFTs being minted in this call\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageTimeStamp_      The timestamp of the signed message\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageHash_           The message hash signed by the trusted oracle signer. This will be checked as part of\n   *                               antibot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageSignature_      The signed message from the backend oracle signer for validation as part of anti-bot\n   *                               protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function publicMint(\n    uint256 quantityToMint_,\n    address recipient_,\n    uint256 messageTimeStamp_,\n    bytes32 messageHash_,\n    bytes calldata messageSignature_\n  ) external payable {\n    if (msg.value != (publicMintPrice * quantityToMint_))\n      revert IncorrectPayment();\n\n    // Get previous mint count and check that this quantity will not exceed the allowance.\n    uint256 publicMintsForAddress;\n\n    // If msg.sender and tx.origin are NOT the same get the largest number of mints for either\n    if (msg.sender != tx.origin) {\n      uint256 senderMinted = publicMintAllocationMinted[msg.sender];\n      uint256 originMinted = publicMintAllocationMinted[tx.origin];\n      if (senderMinted > originMinted) {\n        publicMintsForAddress = senderMinted;\n      } else {\n        publicMintsForAddress = originMinted;\n      }\n    } else {\n      publicMintsForAddress = publicMintAllocationMinted[msg.sender];\n    }\n\n    if (maxPublicMintPerAddress != 0) {\n      if ((publicMintsForAddress + quantityToMint_) > maxPublicMintPerAddress) {\n        revert MaxPublicMintAllowanceExceeded({\n          requested: quantityToMint_,\n          alreadyMinted: publicMintsForAddress,\n          maxAllowance: maxPublicMintPerAddress\n        });\n      }\n\n      publicMintAllocationMinted[msg.sender] += quantityToMint_;\n\n      if (msg.sender != tx.origin) {\n        publicMintAllocationMinted[tx.origin] += quantityToMint_;\n      }\n    }\n\n    _mint(\n      msg.sender,\n      recipient_,\n      msg.sender,\n      quantityToMint_,\n      publicMintPrice,\n      messageTimeStamp_,\n      messageHash_,\n      messageSignature_\n    );\n  }\n}\n"
78     },
79     "contracts/ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol": {
80       "content": "// SPDX-License-Identifier: CC0-1.0\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev EPS Delegation Register - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"../EPSRewardToken/IOAT.sol\";\nimport \"../EPSRewardToken/IERCOmnReceiver.sol\";\n\n/**\n *\n * @dev Implementation of the EPS proxy register interface.\n *\n */\ninterface IEPSDelegationRegister {\n  // ======================================================\n  // ENUMS and STRUCTS\n  // ======================================================\n\n  // Scope of a delegation: global, collection or token\n  enum DelegationScope {\n    global,\n    collection,\n    token\n  }\n\n  // Time limit of a delegation: eternal or time limited\n  enum DelegationTimeLimit {\n    eternal,\n    limited\n  }\n\n  // The Class of a delegation: primary, secondary or rental\n  enum DelegationClass {\n    primary,\n    secondary,\n    rental\n  }\n\n  // The status of a delegation:\n  enum DelegationStatus {\n    live,\n    pending\n  }\n\n  // Data output format for a report (used to output both hot and cold\n  // delegation details)\n  struct DelegationReport {\n    address hot;\n    address cold;\n    DelegationScope scope;\n    DelegationClass class;\n    DelegationTimeLimit timeLimit;\n    address collection;\n    uint256 tokenId;\n    uint40 startDate;\n    uint40 endDate;\n    bool validByDate;\n    bool validBilaterally;\n    bool validTokenOwnership;\n    bool[25] usageTypes;\n    address key;\n    uint96 controlInteger;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Delegation record\n  struct DelegationRecord {\n    address hot;\n    uint96 controlInteger;\n    address cold;\n    uint40 startDate;\n    uint40 endDate;\n    DelegationStatus status;\n  }\n\n  // If a delegation is for a collection, or has additional data, it will need to read the delegation metadata\n  struct DelegationMetadata {\n    address collection;\n    uint256 tokenId;\n    bytes data;\n  }\n\n  // Details of a hot wallet lock\n  struct LockDetails {\n    uint40 lockStart;\n    uint40 lockEnd;\n  }\n\n  // Validity dates when checking a delegation\n  struct ValidityDates {\n    uint40 start;\n    uint40 end;\n  }\n\n  // Delegation struct to hold details of a new delegation\n  struct Delegation {\n    address hot;\n    address cold;\n    address[] targetAddresses;\n    uint256 tokenId;\n    bool tokenDelegation;\n    uint8[] usageTypes;\n    uint40 startDate;\n    uint40 endDate;\n    uint16 providerCode;\n    DelegationClass delegationClass;\n    uint96 subDelegateKey;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Addresses associated with a delegation check\n  struct DelegationCheckAddresses {\n    address hot;\n    address cold;\n    address targetCollection;\n  }\n\n  // Classes associated with a delegation check\n  struct DelegationCheckClasses {\n    bool secondary;\n    bool rental;\n    bool token;\n  }\n\n  // Migrated record data\n  struct MigratedRecord {\n    address hot;\n    address cold;\n  }\n\n  // ======================================================\n  // CUSTOM ERRORS\n  // ======================================================\n\n  error UsageTypeAlreadyDelegated(uint256 usageType);\n  error CannotDeleteValidDelegation();\n  error CannotDelegatedATokenYouDontOwn();\n  error IncorrectAdminLevel(uint256 requiredLevel);\n  error OnlyParticipantOrAuthorisedSubDelegate();\n  error HotAddressIsLockedAndCannotBeDelegatedTo();\n  error InvalidDelegation();\n  error ToMuchETHForPendingPayments(uint256 sent, uint256 required);\n  error UnknownAmount();\n  error InvalidERC20Payment();\n  error IncorrectProxyRegisterFee();\n  error UnrecognisedEPSAPIAmount();\n  error CannotRevokeAllForRegisterAdminHierarchy();\n\n  // ======================================================\n  // EVENTS\n  // ======================================================\n\n  event DelegationMade(\n    address indexed hot,\n    address indexed cold,\n    address targetAddress,\n    uint256 tokenId,\n    bool tokenDelegation,\n    uint8[] usageTypes,\n    uint40 startDate,\n    uint40 endDate,\n    uint16 providerCode,\n    DelegationClass delegationClass,\n    uint96 subDelegateKey,\n    bytes data,\n    DelegationStatus status\n  );\n  event DelegationRevoked(address hot, address cold, address delegationKey);\n  event DelegationPaid(address delegationKey);\n  event AllDelegationsRevokedForHot(address hot);\n  event AllDelegationsRevokedForCold(address cold);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   *\n   *\n   * @dev getDelegationRecord\n   *\n   *\n   */\n  function getDelegationRecord(address delegationKey_)\n    external\n    view\n    returns (DelegationRecord memory);\n\n  /**\n   *\n   *\n   * @dev isValidDelegation\n   *\n   *\n   */\n  function isValidDelegation(\n    address hot_,\n    address cold_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (bool isValid_);\n\n  /**\n   *\n   *\n   * @dev getAddresses - Get all currently valid addresses for a hot address.\n   * - Pass in address(0) to return records that are for ALL collections\n   * - Pass in a collection address to get records for just that collection\n   * - Usage type must be supplied. Only records that match usage type will be returned\n   *\n   *\n   */\n  function getAddresses(\n    address hot_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (address[] memory addresses_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryBalanceOf: Returns the beneficiary balance\n   *\n   *\n   */\n  function beneficiaryBalanceOf(\n    address queryAddress_,\n    address contractAddress_,\n    uint256 usageType_,\n    bool erc1155_,\n    uint256 id_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (uint256 balance_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryOf\n   *\n   *\n   */\n  function beneficiaryOf(\n    address collection_,\n    uint256 tokenId_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  )\n    external\n    view\n    returns (\n      address primaryBeneficiary_,\n      address[] memory secondaryBeneficiaries_\n    );\n\n  /**\n   *\n   *\n   * @dev delegationFromColdExists - check a cold delegation exists\n   *\n   *\n   */\n  function delegationFromColdExists(address cold_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev delegationFromHotExists - check a hot delegation exists\n   *\n   *\n   */\n  function delegationFromHotExists(address hot_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev getAllForHot - Get all delegations at a hot address, formatted nicely\n   *\n   *\n   */\n  function getAllForHot(address hot_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev getAllForCold - Get all delegations at a cold address, formatted nicely\n   *\n   *\n   */\n  function getAllForCold(address cold_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev makeDelegation - A direct call to setup a new proxy record\n   *\n   *\n   */\n  function makeDelegation(\n    address hot_,\n    address cold_,\n    address[] memory targetAddresses_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint8[] memory usageTypes_,\n    uint40 startDate_,\n    uint40 endDate_,\n    uint16 providerCode_,\n    DelegationClass delegationClass_, //0 = primary, 1 = secondary, 2 = rental\n    uint96 subDelegateKey_,\n    bytes memory data_\n  ) external payable;\n\n  /**\n   *\n   *\n   * @dev getDelegationKey - get the link hash to the delegation metadata\n   *\n   *\n   */\n  function getDelegationKey(\n    address hot_,\n    address cold_,\n    address targetAddress_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint96 controlInteger_,\n    uint40 startDate_,\n    uint40 endDate_\n  ) external pure returns (address);\n\n  /**\n   *\n   *\n   * @dev getHotAddressLockDetails\n   *\n   *\n   */\n  function getHotAddressLockDetails(address hot_)\n    external\n    view\n    returns (LockDetails memory, address[] memory);\n\n  /**\n   *\n   *\n   * @dev lockAddressUntilDate\n   *\n   *\n   */\n  function lockAddressUntilDate(uint40 unlockDate_) external;\n\n  /**\n   *\n   *\n   * @dev lockAddress\n   *\n   *\n   */\n  function lockAddress() external;\n\n  /**\n   *\n   *\n   * @dev unlockAddress\n   *\n   *\n   */\n  function unlockAddress() external;\n\n  /**\n   *\n   *\n   * @dev addLockBypassAddress\n   *\n   *\n   */\n  function addLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev removeLockBypassAddress\n   *\n   *\n   */\n  function removeLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev revokeRecord: Revoking a single record with Key\n   *\n   *\n   */\n  function revokeRecord(address delegationKey_, uint96 subDelegateKey_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeGlobalAll\n   *\n   *\n   */\n  function revokeRecordOfGlobalScopeForAllUsages(address participant2_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForCold: Cold calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForCold(address cold_, uint96 subDelegateKey_) external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForHot: Hot calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForHot() external;\n\n  /**\n   *\n   *\n   * @dev deleteExpired: ANYONE can delete expired records\n   *\n   *\n   */\n  function deleteExpired(address delegationKey_) external;\n\n  /**\n   *\n   *\n   * @dev setRegisterFee: set the fee for accepting a registration:\n   *\n   *\n   */\n  function setRegisterFees(\n    uint256 registerFee_,\n    address erc20_,\n    uint256 erc20Fee_\n  ) external;\n\n  /**\n   *\n   *\n   * @dev setRewardTokenAndRate\n   *\n   *\n   */\n  function setRewardTokenAndRate(address rewardToken_, uint88 rewardRate_)\n    external;\n\n  /**\n   *\n   *\n   * @dev lockRewardRate\n   *\n   *\n   */\n  function lockRewardRate() external;\n\n  /**\n   *\n   *\n   * @dev setLegacyOff\n   *\n   *\n   */\n  function setLegacyOff() external;\n\n  /**\n   *\n   *\n   * @dev setENSName (used to set reverse record so interactions with this contract are easy to\n   * identify)\n   *\n   *\n   */\n  function setENSName(string memory ensName_) external;\n\n  /**\n   *\n   *\n   * @dev setENSReverseRegistrar\n   *\n   *\n   */\n  function setENSReverseRegistrar(address ensReverseRegistrar_) external;\n\n  /**\n   *\n   *\n   * @dev setTreasuryAddress: set the treasury address:\n   *\n   *\n   */\n  function setTreasuryAddress(address treasuryAddress_) external;\n\n  /**\n   *\n   *\n   * @dev setDecimalsAndBalance\n   *\n   *\n   */\n  function setDecimalsAndBalance(uint8 decimals_, uint256 balance_) external;\n\n  /**\n   *\n   *\n   * @dev withdrawETH: withdraw eth to the treasury:\n   *\n   *\n   */\n  function withdrawETH(uint256 amount_) external returns (bool success_);\n\n  /**\n   *\n   *\n   * @dev withdrawERC20: Allow any ERC20s to be withdrawn Note, this is provided to enable the\n   * withdrawal of payments using valid ERC20s. Assets sent here in error are retrieved with\n   * rescueERC20\n   *\n   *\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /**\n   *\n   *\n   * @dev isLevelAdmin\n   *\n   *\n   */\n  function isLevelAdmin(\n    address receivedAddress_,\n    uint256 level_,\n    uint96 key_\n  ) external view returns (bool);\n}\n"
81     },
82     "contracts/ThirdParty/EPS/EPSRewardToken/IERCOmnReceiver.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IERCOmnReceiver - Interface\n\n */\n\npragma solidity 0.8.19;\n\ninterface IERCOmnReceiver {\n  function onTokenTransfer(\n    address sender,\n    uint256 value,\n    bytes memory data\n  ) external payable;\n}\n"
84     },
85     "contracts/ThirdParty/EPS/EPSRewardToken/IOAT.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IOAT - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev OAT interface\n */\ninterface IOAT is IERC20 {\n  /**\n   *\n   * @dev emitToken\n   *\n   */\n  function emitToken(address receiver_, uint256 amount_) external;\n\n  /**\n   *\n   * @dev addEmitter\n   *\n   */\n  function addEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev removeEmitter\n   *\n   */\n  function removeEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev setTreasury\n   *\n   */\n  function setTreasury(address treasury_) external;\n}\n"
87     }
88   },
89   "settings": {
90     "optimizer": {
91       "enabled": true,
92       "runs": 1
93     },
94     "outputSelection": {
95       "*": {
96         "*": [
97           "evm.bytecode",
98           "evm.deployedBytecode",
99           "devdoc",
100           "userdoc",
101           "metadata",
102           "abi"
103         ]
104       }
105     },
106     "libraries": {}
107   }
108 }}