1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "istanbul",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/access/AccessControl.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/access/IAccessControl.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
34     },
35     "@openzeppelin/contracts/access/Ownable.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
37     },
38     "@openzeppelin/contracts/utils/Context.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
40     },
41     "@openzeppelin/contracts/utils/Strings.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
43     },
44     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
46     },
47     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
49     },
50     "contracts/Delegatable/CaveatEnforcer.sol": {
51       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./TypesAndDecoders.sol\";\n\nabstract contract CaveatEnforcer {\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata tx,\n    bytes32 delegationHash\n  ) public virtual returns (bool);\n}\n"
52     },
53     "contracts/Delegatable/Delegatable.sol": {
54       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { EIP712DOMAIN_TYPEHASH } from \"./TypesAndDecoders.sol\";\nimport { Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation } from \"./CaveatEnforcer.sol\";\nimport { DelegatableCore } from \"./DelegatableCore.sol\";\nimport { IDelegatable } from \"./interfaces/IDelegatable.sol\";\n\nabstract contract Delegatable is IDelegatable, DelegatableCore {\n  /// @notice The hash of the domain separator used in the EIP712 domain hash.\n  bytes32 public immutable domainHash;\n\n  /**\n   * @notice Delegatable Constructor\n   * @param contractName string - The name of the contract\n   * @param version string - The version of the contract\n   */\n  constructor(string memory contractName, string memory version) {\n    domainHash = getEIP712DomainHash(contractName, version, block.chainid, address(this));\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /// @inheritdoc IDelegatable\n  function getDelegationTypedDataHash(Delegation memory delegation) public view returns (bytes32) {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_DELEGATION_PACKETHASH(delegation))\n    );\n    return digest;\n  }\n\n  /// @inheritdoc IDelegatable\n  function getInvocationsTypedDataHash(Invocations memory invocations)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INVOCATIONS_PACKETHASH(invocations))\n    );\n    return digest;\n  }\n\n  function getEIP712DomainHash(\n    string memory contractName,\n    string memory version,\n    uint256 chainId,\n    address verifyingContract\n  ) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      keccak256(bytes(contractName)),\n      keccak256(bytes(version)),\n      chainId,\n      verifyingContract\n    );\n    return keccak256(encoded);\n  }\n\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n    public\n    view\n    virtual\n    override(IDelegatable, DelegatableCore)\n    returns (address)\n  {\n    Delegation memory delegation = signedDelegation.delegation;\n    bytes32 sigHash = getDelegationTypedDataHash(delegation);\n    address recoveredSignatureSigner = recover(sigHash, signedDelegation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n    public\n    view\n    returns (address)\n  {\n    bytes32 sigHash = getInvocationsTypedDataHash(signedInvocation.invocations);\n    address recoveredSignatureSigner = recover(sigHash, signedInvocation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  // --------------------------------------\n  // WRITES\n  // --------------------------------------\n\n  /// @inheritdoc IDelegatable\n  function contractInvoke(Invocation[] calldata batch) external override returns (bool) {\n    return _invoke(batch, msg.sender);\n  }\n\n  /// @inheritdoc IDelegatable\n  function invoke(SignedInvocation[] calldata signedInvocations)\n    external\n    override\n    returns (bool success)\n  {\n    for (uint256 i = 0; i < signedInvocations.length; i++) {\n      SignedInvocation calldata signedInvocation = signedInvocations[i];\n      address invocationSigner = verifyInvocationSignature(signedInvocation);\n      _enforceReplayProtection(invocationSigner, signedInvocations[i].invocations.replayProtection);\n      _invoke(signedInvocation.invocations.batch, invocationSigner);\n    }\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n}\n"
55     },
56     "contracts/Delegatable/DelegatableCore.sol": {
57       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {EIP712Decoder, EIP712DOMAIN_TYPEHASH} from \"./TypesAndDecoders.sol\";\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer} from \"./CaveatEnforcer.sol\";\n\nabstract contract DelegatableCore is EIP712Decoder {\n    /// @notice Account delegation nonce manager\n    mapping(address => mapping(uint256 => uint256)) internal multiNonce;\n\n    function getNonce(address intendedSender, uint256 queue)\n        external\n        view\n        returns (uint256)\n    {\n        return multiNonce[intendedSender][queue];\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        returns (address);\n\n    function _enforceReplayProtection(\n        address intendedSender,\n        ReplayProtection memory protection\n    ) internal {\n        uint256 queue = protection.queue;\n        uint256 nonce = protection.nonce;\n        require(\n            nonce == (multiNonce[intendedSender][queue] + 1),\n            \"DelegatableCore:nonce2-out-of-order\"\n        );\n        multiNonce[intendedSender][queue] = nonce;\n    }\n\n    function _execute(\n        address to,\n        bytes memory data,\n        uint256 gasLimit,\n        address sender\n    ) internal returns (bool success) {\n        bytes memory full = abi.encodePacked(data, sender);\n        bytes memory errorMessage;\n        (success, errorMessage) = address(to).call{gas: gasLimit}(full);\n\n        if (!success) {\n            if (errorMessage.length > 0) {\n                string memory reason = extractRevertReason(errorMessage);\n                revert(reason);\n            } else {\n                revert(\"DelegatableCore::execution-failed\");\n            }\n        }\n    }\n\n    function extractRevertReason(bytes memory revertData)\n        internal\n        pure\n        returns (string memory reason)\n    {\n        uint256 l = revertData.length;\n        if (l < 68) return \"\";\n        uint256 t;\n        assembly {\n            revertData := add(revertData, 4)\n            t := mload(revertData) // Save the content of the length slot\n            mstore(revertData, sub(l, 4)) // Set proper length\n        }\n        reason = abi.decode(revertData, (string));\n        assembly {\n            mstore(revertData, t) // Restore the content of the length slot\n        }\n    }\n\n    function _invoke(Invocation[] calldata batch, address sender)\n        internal\n        returns (bool success)\n    {\n        for (uint256 x = 0; x < batch.length; x++) {\n            Invocation memory invocation = batch[x];\n            address intendedSender;\n            address canGrant;\n\n            // If there are no delegations, this invocation comes from the signer\n            if (invocation.authority.length == 0) {\n                intendedSender = sender;\n                canGrant = intendedSender;\n            }\n\n            bytes32 authHash = 0x0;\n\n            for (uint256 d = 0; d < invocation.authority.length; d++) {\n                SignedDelegation memory signedDelegation = invocation.authority[\n                    d\n                ];\n                address delegationSigner = verifyDelegationSignature(\n                    signedDelegation\n                );\n\n                // Implied sending account is the signer of the first delegation\n                if (d == 0) {\n                    intendedSender = delegationSigner;\n                    canGrant = intendedSender;\n                }\n\n                require(\n                    delegationSigner == canGrant,\n                    \"DelegatableCore:invalid-delegation-signer\"\n                );\n\n                Delegation memory delegation = signedDelegation.delegation;\n                require(\n                    delegation.authority == authHash,\n                    \"DelegatableCore:invalid-authority-delegation-link\"\n                );\n\n                // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\n                // otherwise once it's revoked, you can't give the exact same permission again.\n                bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\n                    signedDelegation\n                );\n\n                // Each delegation can include any number of caveats.\n                // A caveat is any condition that may reject a proposed transaction.\n                // The caveats specify an external contract that is passed the proposed tx,\n                // As well as some extra terms that are used to parameterize the enforcer.\n                for (uint16 y = 0; y < delegation.caveats.length; y++) {\n                    CaveatEnforcer enforcer = CaveatEnforcer(\n                        delegation.caveats[y].enforcer\n                    );\n                    bool caveatSuccess = enforcer.enforceCaveat(\n                        delegation.caveats[y].terms,\n                        invocation.transaction,\n                        delegationHash\n                    );\n                    require(caveatSuccess, \"DelegatableCore:caveat-rejected\");\n                }\n\n                // Store the hash of this delegation in `authHash`\n                // That way the next delegation can be verified against it.\n                authHash = delegationHash;\n                canGrant = delegation.delegate;\n            }\n\n            // Here we perform the requested invocation.\n            Transaction memory transaction = invocation.transaction;\n\n            require(\n                transaction.to == address(this),\n                \"DelegatableCore:invalid-invocation-target\"\n            );\n\n            // TODO(@kames): Can we bubble up the error message from the enforcer? Why not? Optimizations?\n            success = _execute(\n                transaction.to,\n                transaction.data,\n                transaction.gasLimit,\n                intendedSender\n            );\n            require(success, \"DelegatableCore::execution-failed\");\n        }\n    }\n\n    function _msgSender() internal view virtual returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
58     },
59     "contracts/Delegatable/TypesAndDecoders.sol": {
60       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\nimport \"./libraries/ECRecovery.sol\";\n\n// BEGIN EIP712 AUTOGENERATED SETUP\nstruct EIP712Domain {\n  string name;\n  string version;\n  uint256 chainId;\n  address verifyingContract;\n}\n\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n  \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n);\n\nstruct Invocation {\n  Transaction transaction;\n  SignedDelegation[] authority;\n}\n\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\n  \"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Invocations {\n  Invocation[] batch;\n  ReplayProtection replayProtection;\n}\n\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\n  \"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct SignedInvocation {\n  Invocations invocations;\n  bytes signature;\n}\n\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\n  \"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Transaction {\n  address to;\n  uint256 gasLimit;\n  bytes data;\n}\n\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\n  \"Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct ReplayProtection {\n  uint256 nonce;\n  uint256 queue;\n}\n\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\"ReplayProtection(uint nonce,uint queue)\");\n\nstruct Delegation {\n  address delegate;\n  bytes32 authority;\n  Caveat[] caveats;\n}\n\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\n  \"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\"\n);\n\nstruct Caveat {\n  address enforcer;\n  bytes terms;\n}\n\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\"Caveat(address enforcer,bytes terms)\");\n\nstruct SignedDelegation {\n  Delegation delegation;\n  bytes signature;\n}\n\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\n  \"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\"\n);\n\n// END EIP712 AUTOGENERATED SETUP\n\ncontract EIP712Decoder is ECRecovery {\n  // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\n\n  // function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input)\n  //     public\n  //     pure\n  //     returns (bytes32)\n  // {\n  //     bytes memory encoded = abi.encode(\n  //         EIP712DOMAIN_TYPEHASH,\n  //         _input.name,\n  //         _input.version,\n  //         _input.chainId,\n  //         _input.verifyingContract\n  //     );\n\n  //     return keccak256(encoded);\n  // }\n\n  function GET_INVOCATION_PACKETHASH(Invocation memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      INVOCATION_TYPEHASH,\n      GET_TRANSACTION_PACKETHASH(_input.transaction),\n      GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(SignedDelegation[] memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_SIGNEDDELEGATION_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  function GET_INVOCATIONS_PACKETHASH(Invocations memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      INVOCATIONS_TYPEHASH,\n      GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\n      GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_INVOCATION_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  // function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\n  //     public\n  //     pure\n  //     returns (bytes32)\n  // {\n  //     bytes memory encoded = abi.encode(\n  //         SIGNEDINVOCATION_TYPEHASH,\n  //         GET_INVOCATIONS_PACKETHASH(_input.invocations),\n  //         keccak256(_input.signature)\n  //     );\n\n  //     return keccak256(encoded);\n  // }\n\n  function GET_TRANSACTION_PACKETHASH(Transaction memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      TRANSACTION_TYPEHASH,\n      _input.to,\n      _input.gasLimit,\n      keccak256(_input.data)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(REPLAYPROTECTION_TYPEHASH, _input.nonce, _input.queue);\n\n    return keccak256(encoded);\n  }\n\n  function GET_DELEGATION_PACKETHASH(Delegation memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      DELEGATION_TYPEHASH,\n      _input.delegate,\n      _input.authority,\n      GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input) public pure returns (bytes32) {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  function GET_CAVEAT_PACKETHASH(Caveat memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(CAVEAT_TYPEHASH, _input.enforcer, keccak256(_input.terms));\n\n    return keccak256(encoded);\n  }\n\n  function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(\n      SIGNEDDELEGATION_TYPEHASH,\n      GET_DELEGATION_PACKETHASH(_input.delegation),\n      keccak256(_input.signature)\n    );\n\n    return keccak256(encoded);\n  }\n}\n"
61     },
62     "contracts/Delegatable/interfaces/IDelegatable.sol": {
63       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../TypesAndDecoders.sol\";\n\ninterface IDelegatable {\n  /**\n   * @notice Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\n   * @param batch Invocation[] - The batch of invocations to process.\n   * @return success bool - Whether the batch of invocations was successfully processed.\n   */\n  function contractInvoke(Invocation[] calldata batch) external returns (bool);\n\n  /**\n   * @notice Allows anyone to submit a batch of signed invocations for processing.\n   * @param signedInvocations SignedInvocation[] - The batch of signed invocations to process.\n   * @return success bool - Whether the batch of invocations was successfully processed.\n   */\n  function invoke(SignedInvocation[] calldata signedInvocations) external returns (bool success);\n\n  /**\n   * @notice Returns the typehash for this contract's delegation signatures.\n   * @param delegation Delegation - The delegation to get the type of\n   * @return bytes32 - The type of the delegation\n   */\n  function getDelegationTypedDataHash(Delegation memory delegation) external view returns (bytes32);\n\n  /**\n   * @notice Returns the typehash for this contract's invocation signatures.\n   * @param invocations Invocations\n   * @return bytes32 - The type of the Invocations\n   */\n  function getInvocationsTypedDataHash(Invocations memory invocations)\n    external\n    view\n    returns (bytes32);\n\n  function getEIP712DomainHash(\n    string memory contractName,\n    string memory version,\n    uint256 chainId,\n    address verifyingContract\n  ) external pure returns (bytes32);\n\n  /**\n   * @notice Verifies that the given invocation is valid.\n   * @param signedInvocation - The signed invocation to verify\n   * @return address - The address of the account authorizing this invocation to act on its behalf.\n   */\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n    external\n    view\n    returns (address);\n\n  /**\n   * @notice Verifies that the given delegation is valid.\n   * @param signedDelegation - The delegation to verify\n   * @return address - The address of the account authorizing this delegation to act on its behalf.\n   */\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n    external\n    view\n    returns (address);\n}\n"
64     },
65     "contracts/Delegatable/libraries/ECRecovery.sol": {
66       "content": "pragma solidity 0.8.15;\n\n// SPDX-License-Identifier: MIT\n\ncontract ECRecovery {\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n}\n"
67     },
68     "contracts/DelegatableERC721Controller.sol": {
69       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Context } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Delegatable, DelegatableCore } from \"./Delegatable/Delegatable.sol\";\n\ninterface IERC721Mintable {\n  function mint(address to) external;\n\n  function burn(uint256 tokenId) external;\n}\n\ncontract DelegatableERC721Controller is AccessControl, Delegatable {\n  address public erc721TokenAddress;\n  bytes32 public constant CONTROLLER_ROLE = keccak256(\"CONTROLLER_ROLE\");\n\n  constructor(address _erc721TokenAddress, address admin, address controller)\n    Delegatable(\"DelegatableERC721Controller\", \"1\")\n  {\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    _setupRole(CONTROLLER_ROLE, controller);\n    erc721TokenAddress = _erc721TokenAddress;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function controllerMint(address account) external virtual {\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \"DelegatableERC721Controller:unauthorized\");\n    IERC721Mintable(erc721TokenAddress).mint(account);\n  }\n\n  function controllerBurn(uint256 tokenId) external virtual {\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \"DelegatableERC721Controller:unauthorized\");\n    IERC721Mintable(erc721TokenAddress).burn(tokenId);\n  }\n\n  function grantMinterRole(address _minter) external virtual {\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"DelegatableERC721Controller:unauthorized\");\n    grantRole(CONTROLLER_ROLE, _minter);\n  }\n\n  function revokeMinter(address _minter) external virtual {\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"DelegatableERC721Controller:unauthorized\");\n    revokeRole(CONTROLLER_ROLE, _minter);\n  }\n\n  function transferAdmin(address account) external {\n    grantRole(DEFAULT_ADMIN_ROLE, account);\n    renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _msgSender()\n    internal\n    view\n    virtual\n    override(Context, DelegatableCore)\n    returns (address sender)\n  {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
70     }
71   }
72 }}