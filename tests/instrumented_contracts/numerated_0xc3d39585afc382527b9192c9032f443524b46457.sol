1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/MonkeyPoly.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./ERC721A.sol\";\n\n//███    ███  ██████  ███    ██ ██   ██ ███████ ██    ██ ██████   ██████  ██      ██    ██\n//████  ████ ██    ██ ████   ██ ██  ██  ██       ██  ██  ██   ██ ██    ██ ██       ██  ██\n//██ ████ ██ ██    ██ ██ ██  ██ █████   █████     ████   ██████  ██    ██ ██        ████\n//██  ██  ██ ██    ██ ██  ██ ██ ██  ██  ██         ██    ██      ██    ██ ██         ██\n//██      ██  ██████  ██   ████ ██   ██ ███████    ██    ██       ██████  ███████    ██\ncontract MonkeyPoly is ERC721A, Ownable, Pausable {\n\tusing Address for address;\n\tusing Strings for uint256;\n\tusing MerkleProof for bytes32[];\n\n\taddress proxyRegistryAddress;\n\n\t//the merkle root\n\tbytes32 public root = 0x21a69ae93781ffea397668022e64c09ba2760422692a9d74a8fd2e87deb26f71;\n\n\tstring public _contractBaseURI = \"https://unreveal.monkeypoly.com/\";\n\tstring public _contractURI = \"https://monkeypoly.com/contract_uri/contract_uri.json\";\n\n\tuint256 public tokenPrice = 0.03 ether; //price per token\n\n\tmapping(address => uint256) public usedAddresses; //used addresses for whitelist\n\n\tbool public locked; //baseURI & contractURI lock\n\tuint256 public maxSupply = 9999; //tokenIDs start from 0\n\n\tuint256 public whitelistStartTime = block.timestamp - 1; //TODO: change to real;\n\tuint256 public publicSaleStartTime = block.timestamp - 1; //TODO: change to real;\n\n\tconstructor() ERC721A(\"MonkeyPoly\", \"MonkeyPoly\", 5) {\n\t\t_safeMint(msg.sender, 1); //mints 1 nft to the owner for configuring opensea\n\t}\n\n\t/**\n\t * @dev whitelist buy\n\t */\n\tfunction whitelistBuy(\n\t\tuint256 qty,\n\t\tuint256 tokenId,\n\t\tbytes32[] calldata proof\n\t) external payable whenNotPaused {\n\t\trequire(qty <= 2, \"max 2\");\n\t\trequire(tokenPrice * qty == msg.value, \"exact amount needed\");\n\t\trequire(usedAddresses[msg.sender] + qty <= 2, \"max per wallet reached\");\n\t\trequire(block.timestamp > whitelistStartTime, \"not live\");\n\t\trequire(isTokenValid(msg.sender, tokenId, proof), \"invalid merkle proof\");\n\n\t\tusedAddresses[msg.sender] += qty;\n\n\t\t_safeMint(msg.sender, qty);\n\t}\n\n\t/**\n\t * @dev everyone can mint freely\n\t */\n\tfunction buy(uint256 qty) external payable whenNotPaused {\n\t\trequire(tokenPrice * qty == msg.value, \"exact amount needed\");\n\t\trequire(qty < 6, \"max 5 at once\");\n\t\trequire(totalSupply() + qty <= maxSupply, \"out of stock\");\n\t\trequire(block.timestamp > publicSaleStartTime, \"not live\");\n\n\t\t_safeMint(msg.sender, qty);\n\t}\n\n\t/**\n\t * @dev can airdrop tokens\n\t */\n\tfunction adminMint(address to, uint256 qty) external onlyOwner {\n\t\trequire(totalSupply() + qty <= maxSupply, \"out of stock\");\n\t\t_safeMint(to, qty);\n\t}\n\n\t/**\n\t * @dev verification function for merkle root\n\t */\n\tfunction isTokenValid(\n\t\taddress _to,\n\t\tuint256 _tokenId,\n\t\tbytes32[] memory _proof\n\t) public view returns (bool) {\n\t\t// construct Merkle tree leaf from the inputs supplied\n\t\tbytes32 leaf = keccak256(abi.encodePacked(_to, _tokenId));\n\t\t// verify the proof supplied, and return the verification result\n\t\treturn _proof.verify(root, leaf);\n\t}\n\n\tfunction setMerkleRoot(bytes32 _root) external onlyOwner {\n\t\troot = _root;\n\t}\n\n\t//----------------------------------\n\t//----------- other code -----------\n\t//----------------------------------\n\tfunction tokensOfOwner(address _owner) external view returns (uint256[] memory) {\n\t\tuint256 tokenCount = balanceOf(_owner);\n\t\tif (tokenCount == 0) {\n\t\t\treturn new uint256[](0);\n\t\t} else {\n\t\t\tuint256[] memory result = new uint256[](tokenCount);\n\t\t\tuint256 index;\n\t\t\tfor (index = 0; index < tokenCount; index++) {\n\t\t\t\tresult[index] = tokenOfOwnerByIndex(_owner, index);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\n\t\trequire(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\t\treturn string(abi.encodePacked(_contractBaseURI, _tokenId.toString(), \".json\"));\n\t}\n\n\tfunction setBaseURI(string memory newBaseURI) external onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractBaseURI = newBaseURI;\n\t}\n\n\tfunction setContractURI(string memory newuri) external onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractURI = newuri;\n\t}\n\n\tfunction contractURI() public view returns (string memory) {\n\t\treturn _contractURI;\n\t}\n\n\tfunction reclaimERC20(IERC20 erc20Token) external onlyOwner {\n\t\terc20Token.transfer(msg.sender, erc20Token.balanceOf(address(this)));\n\t}\n\n\tfunction reclaimERC721(IERC721 erc721Token, uint256 id) external onlyOwner {\n\t\terc721Token.safeTransferFrom(address(this), msg.sender, id);\n\t}\n\n\tfunction setWhitelistStartTime(uint256 newTime) external onlyOwner {\n\t\twhitelistStartTime = newTime;\n\t}\n\n\tfunction setPublicSaleStartTime(uint256 newTime) external onlyOwner {\n\t\tpublicSaleStartTime = newTime;\n\t}\n\n\t//change the price per token\n\tfunction setCost(uint256 newPrice) external onlyOwner {\n\t\ttokenPrice = newPrice;\n\t}\n\n\t//change the max supply\n\tfunction setmaxMintAmount(uint256 newMaxSupply) public onlyOwner {\n\t\tmaxSupply = newMaxSupply;\n\t}\n\n\t//blocks staking but doesn't block unstaking / claiming\n\tfunction setPaused(bool _setPaused) public onlyOwner {\n\t\treturn (_setPaused) ? _pause() : _unpause();\n\t}\n\n\t//sets the opensea proxy\n\tfunction setProxyRegistry(address _newRegistry) external onlyOwner {\n\t\tproxyRegistryAddress = _newRegistry;\n\t}\n\n\t// and for the eternity!\n\tfunction lockBaseURIandContractURI() external onlyOwner {\n\t\tlocked = true;\n\t}\n\n\t// earnings withdrawal\n\tfunction withdraw() public payable onlyOwner {\n\t\tuint256 _total_owner = address(this).balance;\n\n\t\t(bool all1, ) = payable(0xed6f9E7d3A94141E28cA5D1905d2EA9F085D00FA).call{\n\t\t\tvalue: (_total_owner * 1) / 3\n\t\t}(\"\"); //l\n\t\trequire(all1);\n\t\t(bool all2, ) = payable(0x318cbB40Fdaf1A2Ab545B957518cb95D7c18ED32).call{\n\t\t\tvalue: (_total_owner * 1) / 3\n\t\t}(\"\"); //sc\n\t\trequire(all2);\n\t\t(bool all3, ) = payable(0x831C6bF9562791480802055Eb51311f6EedCA783).call{\n\t\t\tvalue: (_total_owner * 1) / 3\n\t\t}(\"\"); //sp\n\t\trequire(all3);\n\t}\n\n\t/**\n\t * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n\t */\n\tfunction isApprovedForAll(address owner, address operator) public view override returns (bool) {\n\t\t// Whitelist OpenSea proxy contract for easy trading.\n\t\tProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n\t\tif (address(proxyRegistry.proxies(owner)) == operator) {\n\t\t\treturn true;\n\t\t}\n\t\treturn super.isApprovedForAll(owner, operator);\n\t}\n}\n\n//opensea removal of approvals\ncontract OwnableDelegateProxy {\n\n}\n\ncontract ProxyRegistry {\n\tmapping(address => OwnableDelegateProxy) public proxies;\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Address.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Strings.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/security/Pausable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
27     },
28     "contracts/ERC721A.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n\tusing Address for address;\n\tusing Strings for uint256;\n\n\tstruct TokenOwnership {\n\t\taddress addr;\n\t\tuint64 startTimestamp;\n\t}\n\n\tstruct AddressData {\n\t\tuint128 balance;\n\t\tuint128 numberMinted;\n\t}\n\n\tuint256 private currentIndex = 0;\n\n\taddress private burned = address(1);\n\n\tuint256 internal immutable maxBatchSize;\n\n\t// Token name\n\tstring private _name;\n\n\t// Token symbol\n\tstring private _symbol;\n\n\t// Mapping from token ID to ownership details\n\t// An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n\tmapping(uint256 => TokenOwnership) private _ownerships;\n\n\t// Mapping owner address to address data\n\tmapping(address => AddressData) private _addressData;\n\n\t// Mapping from token ID to approved address\n\tmapping(uint256 => address) private _tokenApprovals;\n\n\t// Mapping from owner to operator approvals\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\n\n\t/**\n\t * @dev\n\t * `maxBatchSize` refers to how much a minter can mint at a time.\n\t */\n\tconstructor(\n\t\tstring memory name_,\n\t\tstring memory symbol_,\n\t\tuint256 maxBatchSize_\n\t) {\n\t\trequire(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\tmaxBatchSize = maxBatchSize_;\n\t}\n\n\t/**\n\t * @dev See {IERC721Enumerable-totalSupply}.\n\t */\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn currentIndex;\n\t}\n\n\t/**\n\t * @dev See {IERC721Enumerable-tokenByIndex}.\n\t */\n\tfunction tokenByIndex(uint256 index) public view override returns (uint256) {\n\t\trequire(index < totalSupply(), \"ERC721A: global index out of bounds\");\n\t\treturn index;\n\t}\n\n\t/**\n\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n\t * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n\t * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n\t */\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (uint256)\n\t{\n\t\trequire(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\n\t\tuint256 numMintedSoFar = totalSupply();\n\t\tuint256 tokenIdsIdx = 0;\n\t\taddress currOwnershipAddr = address(0);\n\t\tfor (uint256 i = 0; i < numMintedSoFar; i++) {\n\t\t\tTokenOwnership memory ownership = _ownerships[i];\n\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\tcurrOwnershipAddr = ownership.addr;\n\t\t\t}\n\t\t\tif (currOwnershipAddr == owner) {\n\t\t\t\tif (tokenIdsIdx == index) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t\ttokenIdsIdx++;\n\t\t\t}\n\t\t}\n\t\trevert(\"ERC721A: unable to get token of owner by index\");\n\t}\n\n\t/**\n\t * @dev See {IERC165-supportsInterface}.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride(ERC165, IERC165)\n\t\treturns (bool)\n\t{\n\t\treturn\n\t\t\tinterfaceId == type(IERC721).interfaceId ||\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\n\t\t\tinterfaceId == type(IERC721Enumerable).interfaceId ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-balanceOf}.\n\t */\n\tfunction balanceOf(address owner) public view override returns (uint256) {\n\t\trequire(owner != address(0), \"ERC721A: balance query for the zero address\");\n\t\treturn uint256(_addressData[owner].balance);\n\t}\n\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\n\t\trequire(owner != address(0), \"ERC721A: number minted query for the zero address\");\n\t\treturn uint256(_addressData[owner].numberMinted);\n\t}\n\n\tfunction ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n\t\trequire(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\n\n\t\tuint256 lowestTokenToCheck;\n\t\tif (tokenId >= maxBatchSize) {\n\t\t\tlowestTokenToCheck = tokenId - maxBatchSize + 1;\n\t\t}\n\n\t\tfor (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\n\t\t\tTokenOwnership memory ownership = _ownerships[curr];\n\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\treturn ownership;\n\t\t\t}\n\t\t}\n\n\t\trevert(\"ERC721A: unable to determine the owner of token\");\n\t}\n\n\t/**\n\t * @dev See {IERC721-ownerOf}.\n\t */\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\n\t\treturn ownershipOf(tokenId).addr;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-name}.\n\t */\n\tfunction name() public view virtual override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-symbol}.\n\t */\n\tfunction symbol() public view virtual override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-tokenURI}.\n\t */\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n\t\tstring memory baseURI = _baseURI();\n\t\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n\t}\n\n\t/**\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n\t * by default, can be overriden in child contracts.\n\t */\n\tfunction _baseURI() internal view virtual returns (string memory) {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @dev See {IERC721-approve}.\n\t */\n\tfunction approve(address to, uint256 tokenId) public override {\n\t\taddress owner = ERC721A.ownerOf(tokenId);\n\t\trequire(to != owner, \"ERC721A: approval to current owner\");\n\n\t\trequire(\n\t\t\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n\t\t\t\"ERC721A: approve caller is not owner nor approved for all\"\n\t\t);\n\n\t\t_approve(to, tokenId, owner);\n\t}\n\n\t/**\n\t * @dev See {IERC721-getApproved}.\n\t */\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\n\t\trequire(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\n\n\t\treturn _tokenApprovals[tokenId];\n\t}\n\n\t/**\n\t * @dev See {IERC721-setApprovalForAll}.\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) public override {\n\t\trequire(operator != _msgSender(), \"ERC721A: approve to caller\");\n\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\n\t}\n\n\t/**\n\t * @dev See {IERC721-isApprovedForAll}.\n\t */\n\tfunction isApprovedForAll(address owner, address operator)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (bool)\n\t{\n\t\treturn _operatorApprovals[owner][operator];\n\t}\n\n\t/**\n\t * @dev See {IERC721-transferFrom}.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public override {\n\t\t_transfer(from, to, tokenId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public override {\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) public override {\n\t\t_transfer(from, to, tokenId);\n\t\trequire(\n\t\t\t_checkOnERC721Received(from, to, tokenId, _data),\n\t\t\t\"ERC721A: transfer to non ERC721Receiver implementer\"\n\t\t);\n\t}\n\n\t/**\n\t * @dev Returns whether `tokenId` exists.\n\t *\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n\t *\n\t * Tokens start existing when they are minted (`_mint`),\n\t */\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\n\t\treturn tokenId < currentIndex;\n\t}\n\n\tfunction _safeMint(address to, uint256 quantity) internal {\n\t\t_safeMint(to, quantity, \"\");\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` cannot be larger than the max batch size.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _safeMint(\n\t\taddress to,\n\t\tuint256 quantity,\n\t\tbytes memory _data\n\t) internal {\n\t\tuint256 startTokenId = currentIndex;\n\t\trequire(to != address(0), \"ERC721A: mint to the zero address\");\n\t\t// We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n\t\trequire(!_exists(startTokenId), \"ERC721A: token already minted\");\n\t\trequire(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\tAddressData memory addressData = _addressData[to];\n\t\t_addressData[to] = AddressData(\n\t\t\taddressData.balance + uint128(quantity),\n\t\t\taddressData.numberMinted + uint128(quantity)\n\t\t);\n\t\t_ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n\t\tuint256 updatedIndex = startTokenId;\n\n\t\tfor (uint256 i = 0; i < quantity; i++) {\n\t\t\temit Transfer(address(0), to, updatedIndex);\n\t\t\trequire(\n\t\t\t\t_checkOnERC721Received(address(0), to, updatedIndex, _data),\n\t\t\t\t\"ERC721A: transfer to non ERC721Receiver implementer\"\n\t\t\t);\n\t\t\tupdatedIndex++;\n\t\t}\n\n\t\tcurrentIndex = updatedIndex;\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t//change the ownership of a token. limited to the quantities put in require!\n\t// function _changeOwnership(uint256 tokenId, address to) internal {\n\t// \tTokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\t// \t_addressData[prevOwnership.addr].balance -= 1;\n\t// \t_ownerships[tokenId] = TokenOwnership(burned, uint64(block.timestamp));\n\n\t// \t_beforeTokenTransfers(address(0), to, tokenId, 1);\n\n\t// \tAddressData memory addressData = _addressData[to];\n\t// \t_addressData[to] = AddressData(addressData.balance + 1, addressData.numberMinted + 1);\n\t// \t_ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n\t// \temit Transfer(address(0), to, tokenId);\n\t// \t_afterTokenTransfers(address(0), to, tokenId, 1);\n\t// }\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _transfer(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) private {\n\t\tTokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n\t\tbool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n\t\t\tgetApproved(tokenId) == _msgSender() ||\n\t\t\tisApprovedForAll(prevOwnership.addr, _msgSender()));\n\n\t\trequire(isApprovedOrOwner, \"ERC721A: transfer caller is not owner nor approved\");\n\n\t\trequire(prevOwnership.addr == from, \"ERC721A: transfer from incorrect owner\");\n\t\trequire(to != address(0), \"ERC721A: transfer to the zero address\");\n\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\n\n\t\t// Clear approvals from the previous owner\n\t\t_approve(address(0), tokenId, prevOwnership.addr);\n\n\t\t_addressData[from].balance -= 1;\n\t\t_addressData[to].balance += 1;\n\t\t_ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n\t\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n\t\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n\t\tuint256 nextTokenId = tokenId + 1;\n\t\tif (_ownerships[nextTokenId].addr == address(0)) {\n\t\t\tif (_exists(nextTokenId)) {\n\t\t\t\t_ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, to, tokenId);\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\n\t}\n\n\t/**\n\t * @dev Approve `to` to operate on `tokenId`\n\t *\n\t * Emits a {Approval} event.\n\t */\n\tfunction _approve(\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\taddress owner\n\t) private {\n\t\t_tokenApprovals[tokenId] = to;\n\t\temit Approval(owner, to, tokenId);\n\t}\n\n\tuint256 public nextOwnerToExplicitlySet = 0;\n\n\t/**\n\t * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\n\t */\n\tfunction _setOwnersExplicit(uint256 quantity) internal {\n\t\tuint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\n\t\trequire(quantity > 0, \"quantity must be nonzero\");\n\t\tuint256 endIndex = oldNextOwnerToSet + quantity - 1;\n\t\tif (endIndex > currentIndex - 1) {\n\t\t\tendIndex = currentIndex - 1;\n\t\t}\n\t\t// We know if the last one in the group exists, all in the group exist, due to serial ordering.\n\t\trequire(_exists(endIndex), \"not enough minted yet for this cleanup\");\n\t\tfor (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\n\t\t\tif (_ownerships[i].addr == address(0)) {\n\t\t\t\tTokenOwnership memory ownership = ownershipOf(i);\n\t\t\t\t_ownerships[i] = TokenOwnership(ownership.addr, ownership.startTimestamp);\n\t\t\t}\n\t\t}\n\t\tnextOwnerToExplicitlySet = endIndex + 1;\n\t}\n\n\t/**\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n\t * The call is not executed if the target address is not a contract.\n\t *\n\t * @param from address representing the previous owner of the given token ID\n\t * @param to target address that will receive the tokens\n\t * @param tokenId uint256 ID of the token to be transferred\n\t * @param _data bytes optional data to send along with the call\n\t * @return bool whether the call correctly returned the expected magic value\n\t */\n\tfunction _checkOnERC721Received(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) private returns (bool) {\n\t\tif (to.isContract()) {\n\t\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\n\t\t\t\tbytes4 retval\n\t\t\t) {\n\t\t\t\treturn retval == IERC721Receiver(to).onERC721Received.selector;\n\t\t\t} catch (bytes memory reason) {\n\t\t\t\tif (reason.length == 0) {\n\t\t\t\t\trevert(\"ERC721A: transfer to non ERC721Receiver implementer\");\n\t\t\t\t} else {\n\t\t\t\t\tassembly {\n\t\t\t\t\t\trevert(add(32, reason), mload(reason))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t */\n\tfunction _beforeTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n\t * minting.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - when `from` and `to` are both non-zero.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _afterTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
36     },
37     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
45     },
46     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
48     }
49   },
50   "settings": {
51     "optimizer": {
52       "enabled": true,
53       "runs": 20000
54     },
55     "outputSelection": {
56       "*": {
57         "*": [
58           "evm.bytecode",
59           "evm.deployedBytecode",
60           "devdoc",
61           "userdoc",
62           "metadata",
63           "abi"
64         ]
65       }
66     },
67     "libraries": {}
68   }
69 }}