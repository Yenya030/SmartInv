1 {{
2   "language": "Solidity",
3   "sources": {
4     ".deps/fckit/fckit.sol": {
5       "content": "// SPDX-License-Identifier: MIT   \n//                                                                                                                                                                                                                                                           \n//           ..                                                                                        \n//          !57       ^.                                                                                 \n//      .:?PB&BPP5J: :75!77?777~^:.        .....     :: .                   .   .....:^~~!!!~:..        \n//      ~J###&PYPBY ^5B#GPB##BP5J!.   .~?5G##BPY:    ^?Y5      .::..      ..7. .7PBB#&#&&@&&&G7^.       \n//      :J#GG#!  :.  J#BJ7~~^^^^::: ^?P&@##BBP5G?    .5G#!.:^7YG##5^      ?5G^  .!7?Y#&?^^::::.         \n//       ^Y&&#^     .JBB:          :P#B&Y7!!~^:.      ?&#GYG#@@#Y~.       J@@!      ^#@!                 \n//        .?#@5:    ^P#&P555YYJ~:  ^GP#J              ?@&&#G5?^.          ?@&!      ~#@7             \n//         .5&&#7   7GGG5YYYJJ?!.  :GG#J.             J#&BPGJ^.           J&&~      J@#^                \n//        7#B!#&7  7PGP:           ?#&Y~.           .?B#GGB&&BJ~.        ~B&^     .G#B^            \n//     ^^::Y&#J#&P..JB&P:           .5B&5J~          .?#@P.!5GPBBP?.      J&#.     ~GBB.          \n//    :YB#B&@#P57: :G&G~             :?G&#B5YY5JJ?.  :P&#5   :^JG&#P^     P#P      !PG5         \n//     .^^^5B!      75Y:              .^7GBB&###G?^  :JP7^      :!^??.   ^JJ^      ^?!.         \n//         :~:      .:                   .^!?J?YY~.    !.       \n//\n//                            $FCKIT ~ https://twitter.com/FCKITCOIN\n//                             Contract developed by @shrimpyuk :^)                         \n\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract FCKIT is Ownable, ERC20 {\n    bool isDeployed = false;                        //If the contract is deployed\n    bool public isLimited;                  //Enabled to deter Token Hoarding + MEV Sniping during our launch. Limits slowly raised then dropped to ensure smooth and fair release.\n    uint256 public maxHoldAmount;           //Maximum Balance to be able to trade in Limited Trading Phase. Used to deter Token Hoarding + MEV Sniping during our launch.\n    uint256 public minHoldAmount;           //Minimum Balance to be able to trade in Limited Trading Phase. Used to deter Token Hoarding + MEV Sniping during our launch.\n    address public liqudityPoolSwapPair;    //Address of our initial Liquidity Pool\n\n    mapping(address => bool) public hasFuckedAround; //Blacklisted Address Map. Fuck Around => Find Out\n    \n    uint256 public constant SUPPLY_CAP = 42_690_000_000 * 1 ether; //42,690,000,000 supply cap\n\n    //Important Wallets\n    address constant cexReserveWallet = 0xCdA13fE7AEa02AD5740E3Fd48913A24b83976C60; \n    address constant managementWallet = 0x5346ffCc2291A9d555E8B860A263B94338E043be;\n\n    // Supply Distribution:\n    // 10%      Team Allocation\n    uint constant teamAllocation = ((SUPPLY_CAP / 1000)*100); //10%\n    // 22.5%    Liquidity Pool\n    uint constant liquidityPoolAllocation = ((SUPPLY_CAP / 1000)*225); //22.5%\n    // 10%      Developments Reserve\n    // Used for CEX Liquidity + Emergency Use\n    uint constant cexReserveAllocation = ((SUPPLY_CAP / 1000)*250); //25%\n    // 0.2%     Airdrop (Freebies)\n    uint constant airdropAllocation = ((SUPPLY_CAP / 1000)*2); //0.2%\n    // 42.3%    Presale Allocation\n    uint constant presaleAllocation = ((SUPPLY_CAP / 1000)*423); //42.3%\n\n    // Wallets for locking funds\n    address[4] public lockedWallets;\n    uint256[4] public walletAllocations;\n\n    uint256 public LOCK_DURATION = 14 days;\n\n    // Team Wallets\n    address constant teamWallet1 = 0xF3bb77973f7F1de2fC99fCAE3AF66b56e5df5114;\n    address constant teamWallet2 = 0xc4AAeE79cC0a7c5d4EC3F4f8279f31Ba15055e6B;\n    address constant teamWallet3 = 0x3a1c2AA33BC5522D59cF729e701C31cc4B8F0037;\n    address constant teamWallet4 = 0xff955eFf3d270D44B39D228F7ECdfe41aD5760B3;\n\n    constructor() ERC20(\"FCKIT\", \"FCKIT\") {\n        // Mint tokens to gnosis safes\n        _mint(cexReserveWallet, cexReserveAllocation);\n        _mint(managementWallet, liquidityPoolAllocation+airdropAllocation+presaleAllocation);\n\n        // Assign Team Allocations\n        walletAllocations[0] = ((teamAllocation / 100) * 50); // 50% of team allocation for wallet 1\n        walletAllocations[1] = ((teamAllocation / 100) * 20); // 20% of team allocation for wallet 2\n        walletAllocations[2] = ((teamAllocation / 100) * 20); // 20% of team allocation for wallet 3\n        walletAllocations[3] = ((teamAllocation / 100) * 10); // 10% of team allocation for wallet 4\n\n        // Lock Wallets\n        lockedWallets[0] = teamWallet1;\n        lockedWallets[1] = teamWallet2;\n        lockedWallets[2] = teamWallet3;\n        lockedWallets[3] = teamWallet4;\n\n        // Mint 10% of Team's Allocation\n        for (uint i = 0; i < walletAllocations.length; i++) {\n            uint256 allocation = walletAllocations[i];\n            uint256 initial = allocation / 10;\n            walletAllocations[i] = allocation - initial;\n            _mint(lockedWallets[i], initial);\n        }\n        \n        // Apply 14 Day Lock to remainder 90% of Team's Allocation\n        setLockDuration(block.timestamp + (14 days));\n\n        isDeployed = true;\n        _transferOwnership(managementWallet);\n    }\n\n    // Sets the lock duration of funds. Can only be called internally and once, via the initializer.\n    function setLockDuration(uint256 duration) internal {\n        require(!isDeployed, \"Lock duration can only be set before deployment\");\n        LOCK_DURATION = duration;\n    }\n\n    // @notice Withdraw Team's Allocation after 14 Day Lock\n    function withdrawLockedFunds() external {\n        require(block.timestamp >= LOCK_DURATION, \"Funds are still locked\");\n        for (uint i = 0; i < lockedWallets.length; i++) {\n            address wallet = lockedWallets[i];\n            uint256 allocation = walletAllocations[i];\n            if (allocation > 0) {\n                walletAllocations[i] = 0;\n                _mint(wallet, allocation);\n            }\n        }\n    }\n\n    /// @notice Blacklist/Unblacklist a Wallet\n    /// @param _address The Address of the wallet to modify\n    /// @param _hasFuckedAround If they are blacklisted or not\n    function foundOut(address _address, bool _hasFuckedAround) external onlyOwner {\n        hasFuckedAround[_address] = _hasFuckedAround;\n    }\n\n    /// @notice Set temporary trading rules to ensure a smooth launch detering token hoarding + MEV sniping.\n    /// @param _isLimited If the temporary trading rules should apply\n    /// @param _tokenSwapPair Address of the Token Swap Pair e.g. Uniswap\n    /// @param _maxHoldAmount Maximum amount of tokens that can be held to interact with the Liquduity Pool during the limited phase\n    /// @param _minHoldAmount Minimum amount of tokens that can be held to interact with the Liquduity Pool during the limited phase\n    function setRules(bool _isLimited, address _tokenSwapPair, uint256 _maxHoldAmount, uint256 _minHoldAmount) external onlyOwner {\n        isLimited = _isLimited;\n        liqudityPoolSwapPair = _tokenSwapPair;\n        maxHoldAmount = _maxHoldAmount;\n        minHoldAmount = _minHoldAmount;\n    }\n\n    /// @notice Set them tokens on fire\n    /// @param value How many tokens to burn\n    function burn(uint256 value) external {\n        _burn(msg.sender, value);\n    }\n\n     //Enforce Ruleset\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) override internal virtual {\n        // Blacklist Ruleset\n        require(!hasFuckedAround[to] && !hasFuckedAround[from], \"Fucked Around & Found Out\");\n\n        // Exclude Pre-Liqudity Trading (Aside from Owner Wallet)\n        if (liqudityPoolSwapPair == address(0) && isDeployed) {\n            require(from == owner() || to == owner(), \"Trading has not yet started\");\n            return;\n        }\n\n        //Extra rules to keep a fair and smooth release :)\n        if (isLimited && from == liqudityPoolSwapPair) {\n            require(super.balanceOf(to) + amount <= maxHoldAmount && super.balanceOf(to) + amount >= minHoldAmount, \"Forbidden\");\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": false,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     }
40   }
41 }}