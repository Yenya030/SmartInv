1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "london",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/access/Ownable.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
34     },
35     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
37     },
38     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
40     },
41     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
43     },
44     "@openzeppelin/contracts/utils/Address.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
46     },
47     "@openzeppelin/contracts/utils/Context.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
49     },
50     "@openzeppelin/contracts/utils/Strings.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
52     },
53     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
54       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
55     },
56     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
57       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
58     },
59     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
60       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
61     },
62     "contracts/AnonymiceLibrary.sol": {
63       "content": "pragma solidity ^0.8.7;\n\nlibrary AnonymiceLibrary {\n    string internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function parseInt(string memory _a)\n        internal\n        pure\n        returns (uint8 _parsedInt)\n    {\n        bytes memory bresult = bytes(_a);\n        uint8 mint = 0;\n        for (uint8 i = 0; i < bresult.length; i++) {\n            if (\n                (uint8(uint8(bresult[i])) >= 48) &&\n                (uint8(uint8(bresult[i])) <= 57)\n            ) {\n                mint *= 10;\n                mint += uint8(bresult[i]) - 48;\n            }\n        }\n        return mint;\n    }\n\n    function substring(\n        string memory str,\n        uint256 startIndex,\n        uint256 endIndex\n    ) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n"
64     },
65     "contracts/SnowCrash.sol": {
66       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./AnonymiceLibrary.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract SnowCrash is ERC721, Ownable {\n    /*\n ______     __   __     ______     __     __     ______     ______     ______     ______     __  __    \n/\\  ___\\   /\\ \"-.\\ \\   /\\  __ \\   /\\ \\  _ \\ \\   /\\  ___\\   /\\  == \\   /\\  __ \\   /\\  ___\\   /\\ \\_\\ \\   \n\\ \\___  \\  \\ \\ \\-.  \\  \\ \\ \\/\\ \\  \\ \\ \\/ \".\\ \\  \\ \\ \\____  \\ \\  __<   \\ \\  __ \\  \\ \\___  \\  \\ \\  __ \\  \n \\/\\_____\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\  \\ \\__/\".~\\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_\\ \\_\\  \\/\\_____\\  \\ \\_\\ \\_\\ \n  \\/_____/   \\/_/ \\/_/   \\/_____/   \\/_/   \\/_/   \\/_____/   \\/_/ /_/   \\/_/\\/_/   \\/_____/   \\/_/\\/_/ \n*/\n    using AnonymiceLibrary for uint8;\n\n    struct Trait {\n        string traitName;\n        string traitType;\n    }\n\n    //Mappings\n    mapping(uint256 => Trait[]) public traitTypes;\n    mapping(uint256 => string) internal tokenIdToHash;\n    mapping(address => uint256) private lastWrite;\n\n    //Mint Checks\n    mapping(address => bool) addressFreeMinted;\n    mapping(address => bool) contributorMints;\n    uint256 contributorCount = 0;\n    uint256 regularCount = 0;\n    uint256 public totalSupply = 0;\n\n    //uint256s\n    uint256 constant MAX_SUPPLY = 256;\n    uint256 constant MINT_COST = 0.0256 ether;\n    uint256 constant PUBLIC_START_BLOCK = 14651420;\n    uint256 SEED_NONCE = 0;\n\n    //minting flag\n    bool ogMinted = false;\n    bool public MINTING_LIVE = false;\n\n    //uint arrays\n    uint16[][8] TIERS;\n\n    //p5js url\n    string p5jsUrl;\n    string p5jsIntegrity;\n    string imageUrl;\n    string animationUrl;\n\n    bytes32 constant whitelistRoot =\n        0x2cd756bd043061e7f4cd5b02ccfbd86ac3965d315356463f26afa7c6915ab14f;\n\n    constructor() payable ERC721(\"SnwCrsh\", \"SNOW\") {\n        //Declare all the rarity tiers\n\n        //col\n        TIERS[0] = [1600, 1200, 550, 550, 1200, 700, 1600, 700, 1200, 700];\n        //border size\n        TIERS[1] = [1000, 4000, 4000, 1000];\n        //noise Max\n        TIERS[2] = [1000, 2000, 4000, 3000];\n        //speed\n        TIERS[3] = [1000, 5500, 2500, 1000];\n        //Slice thickness\n        TIERS[4] = [2500, 3500, 2500, 1500];\n        //secCol\n        TIERS[5] = [7000, 3000];\n        //charset\n        TIERS[6] = [1000, 2500, 3000, 2500, 500, 500];\n        //flowType\n        TIERS[7] = [8500, 1500];\n    }\n\n    //prevents someone calling read functions the same block they mint\n    modifier disallowIfStateIsChanging() {\n        require(\n            owner() == msg.sender || lastWrite[msg.sender] < block.number,\n            \"not so fast!\"\n        );\n        _;\n    }\n\n    /*\n __    __     __     __   __     ______   __     __   __     ______    \n/\\ \"-./  \\   /\\ \\   /\\ \"-.\\ \\   /\\__  _\\ /\\ \\   /\\ \"-.\\ \\   /\\  ___\\   \n\\ \\ \\-./\\ \\  \\ \\ \\  \\ \\ \\-.  \\  \\/_/\\ \\/ \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\__ \\  \n \\ \\_\\ \\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\    \\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\ \n  \\/_/  \\/_/   \\/_/   \\/_/ \\/_/     \\/_/   \\/_/   \\/_/ \\/_/   \\/_____/ \n                                                                                                                                                                                                                                               \n   */\n\n    /**\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\n     * @param _rarityTier The tier to use.\n     */\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\n        internal\n        view\n        returns (uint8)\n    {\n        uint16 currentLowerBound = 0;\n        for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\n            uint16 thisPercentage = TIERS[_rarityTier][i];\n            if (\n                _randinput >= currentLowerBound &&\n                _randinput < currentLowerBound + thisPercentage\n            ) return i;\n            currentLowerBound = currentLowerBound + thisPercentage;\n        }\n\n        revert();\n    }\n\n    /**\n     * @dev Generates a 11 digit hash from a tokenId, address, and random number.\n     * @param _t The token id to be used within the hash.\n     * @param _a The address to be used within the hash.\n     * @param _c The custom nonce to be used within the hash.\n     */\n    function hash(\n        uint256 _t,\n        address _a,\n        uint256 _c\n    ) internal returns (string memory) {\n        require(_c < 11);\n\n        // This will generate a 11 character string.\n        // The first 2 digits are the palette.\n        string memory currentHash = \"\";\n\n        for (uint8 i = 0; i < 8; i++) {\n            SEED_NONCE++;\n            uint16 _randinput = uint16(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            block.timestamp,\n                            block.difficulty,\n                            _t,\n                            _a,\n                            _c,\n                            SEED_NONCE\n                        )\n                    )\n                ) % 10000\n            );\n            currentHash = string(\n                abi.encodePacked(\n                    currentHash,\n                    rarityGen(_randinput, i).toString()\n                )\n            );\n        }\n\n        return currentHash;\n    }\n\n    /**\n     * @dev Mint internal, this is to avoid code duplication.\n     */\n    function mintInternal() internal {\n        require(\n            MINTING_LIVE == true || msg.sender == owner(),\n            \"Minting not live\"\n        );\n        uint256 _totalSupply = totalSupply;\n        require(_totalSupply < MAX_SUPPLY);\n        require(!AnonymiceLibrary.isContract(msg.sender));\n        require(regularCount < 241);\n        uint256 thisTokenId = _totalSupply;\n\n        tokenIdToHash[thisTokenId] = hash(thisTokenId, msg.sender, 0);\n        lastWrite[msg.sender] = block.number;\n\n        ++totalSupply;\n\n        _mint(msg.sender, thisTokenId);\n    }\n\n    function mintOgBatch(address[] memory _addresses)\n        external\n        payable\n        onlyOwner\n    {\n        require(ogMinted == false);\n        require(_addresses.length == 10);\n        for (uint256 i = 0; i < 10; i++) {\n            uint256 thisTokenId = i;\n            tokenIdToHash[thisTokenId] = hash(thisTokenId, _addresses[i], 0);\n            _mint(_addresses[i], thisTokenId);\n        }\n        totalSupply = 10;\n        regularCount = 10;\n        ogMinted = true;\n    }\n\n    /**\n     * @dev Mints new tokens.\n     */\n    function mintFreeSnowCrash(address account, bytes32[] calldata merkleProof)\n        external\n    {\n        bytes32 node = keccak256(abi.encodePacked(account));\n\n        require(MerkleProof.verify(merkleProof, whitelistRoot, node));\n        require(\n            addressFreeMinted[msg.sender] != true,\n            \"Address already free minted\"\n        );\n\n        addressFreeMinted[msg.sender] = true;\n        ++regularCount;\n        return mintInternal();\n    }\n\n    function mintPaidSnowCrash() external payable {\n        require(msg.value == MINT_COST, \"Insufficient ETH sent\");\n        require(block.number > PUBLIC_START_BLOCK);\n        ++regularCount;\n        return mintInternal();\n    }\n\n    function mintCircolorsContributor() external {\n        require(contributorMints[msg.sender] == true);\n        require(contributorCount < 16);\n\n        contributorMints[msg.sender] = false;\n        ++contributorCount;\n\n        return mintInternal();\n    }\n\n    /*\n ______     ______     ______     _____     __     __   __     ______    \n/\\  == \\   /\\  ___\\   /\\  __ \\   /\\  __-.  /\\ \\   /\\ \"-.\\ \\   /\\  ___\\   \n\\ \\  __<   \\ \\  __\\   \\ \\  __ \\  \\ \\ \\/\\ \\ \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\__ \\  \n \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\____-  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\ \n  \\/_/ /_/   \\/_____/   \\/_/\\/_/   \\/____/   \\/_/   \\/_/ \\/_/   \\/_____/                                                                    \n                                                                                           \n*/\n\n    /**\n     * @dev Hash to HTML function\n     */\n    function hashToHTML(string memory _hash, uint256 _tokenId)\n        external\n        view\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        string memory htmlString = string(\n            abi.encodePacked(\n                \"data:text/html,%3Chtml%3E%3Chead%3E%3Cscript%20src%3D%22\",\n                p5jsUrl,\n                \"%22%20integrity%3D%22\",\n                p5jsIntegrity,\n                \"%22%20crossorigin%3D%22anonymous%22%3E%3C%2Fscript%3E%3C%2Fhead%3E%3Cbody%3E%3Cscript%3Evar%20tokenId%3D\",\n                AnonymiceLibrary.toString(_tokenId),\n                \"%3Bvar%20hash%3D%22\",\n                _hash,\n                \"%22%3B\"\n            )\n        );\n\n        htmlString = string(\n            abi.encodePacked(\n                htmlString,\n                \"let%20f%3D0%3Blet%20cSet%3D%5B%22%C3%91%2450c-%22%2C%22%4097%3F%3B%2C%22%2C%22%238%C2%A3%21%3A.%22%2C%22%E2%82%A942a%2B_%22%2C%22%25gm%3B%29%27%22%2C%220101%2F%20%22%5D%3Blet%20xoff1%2Cyoff1%2Cxyoff%2Cn%2Ccols%3D%5B0%2C1%2C2%2C4%2C5%2C6%2C7%2C8%2C9%2C11%5D%2CfSizes%3D%5B12.5%2C9%2C6%2C4.7%5D%2CnoiseEnd%3D%5B.001%2C.002%2C.005%2C.008%5D%2Cspds%3D%5B.7%2C1.2%2C2.5%2C2.6%5D%2CtextCol%3D%5B0%2C100%5D%2CcSprd%3D%5B.06%2C.12%2C.18%2C.24%5D%2Ct%3D0%2CsT%3D0%2CcT%3D0%2Clp%3D%210%2Crv%3D%211%2Cw%3D500%2Ch%3D500%3Bfunction%20setup%28%29%7BcreateCanvas%28w%2Ch%29%2CcolorMode%28HSB%2C360%2C100%2C100%29%2CtextFont%28%22Courier%22%29%2CnoiseSeed%28tokenId%29%2CcO%3D30%2Acols%5BparseInt%28hash.substring%280%2C1%29%29%5D%2CfW%3Dwidth%2FfSizes%5BparseInt%28hash.substring%281%2C2%29%29%5D%2CfH%3Dheight%2FfSizes%5BparseInt%28hash.substring%281%2C2%29%29%5D%2Cend%3DnoiseEnd%5BparseInt%28hash.substring%282%2C3%29%29%5D%2Csp%3Dspds%5BparseInt%28hash.substring%283%2C4%29%29%5D%2F%28fW%2BfH%29%2F3%2Cs%3DcSprd%5BparseInt%28hash.substring%284%2C5%29%29%5D%2CbT%3DtextCol%5BparseInt%28hash.substring%285%2C6%29%29%5D%2Cc%3DparseInt%28hash.substring%286%2C7%29%29%2CfTyp%3DparseInt%28hash.substring%287%2C8%29%29%2CsO%3D80%2C100%3D%3DbT%3FbO%3D85%3AbO%3D100%2Cfill%28cT%2CsT%2CbT%29%7Dfunction%20draw%28%29%7Bbackground%28cO%2CsO%2CbO%29%3Bfor%28let%20e%3DfW%3Be%3C%3Dwidth-fW%3Be%2B%3D10%29for%28let%20o%3DfH%3Bo%3C%3Dheight-fH%3Bo%2B%3D10%29xoff1%3Dmap%28e%2CfW%2Cwidth%2C0%2Cend%29%2Cyoff1%3Dmap%28o%2CfH%2Cheight%2C0%2Cend%29%2Cxyoff%3Dxoff1%2Byoff1%2Cn%3Dnoise%28e%2Axyoff%2Bt%2Co%2Axyoff%2Bt%2Cf%29%2CnoStroke%28%29%2Cfill%28cT%2CsT%2CbT%29%2Cn%3E.5%2B.8%2As%7C%7Cn%3C.5-.8%2As%3Ftext%28cSet%5Bc%5D%5B0%5D%2Ce%2Co%29%3An%3E.5%2B.65%2As%7C%7Cn%3C.5-.65%2As%3Ftext%28cSet%5Bc%5D%5B1%5D%2Ce%2Co%29%3An%3E.5%2B.5%2As%7C%7Cn%3C.5-.5%2As%3Ftext%28cSet%5Bc%5D%5B2%5D%2Ce%2Co%29%3An%3E.5%2B.35%2As%7C%7Cn%3C.5-.35%2As%3Ftext%28cSet%5Bc%5D%5B3%5D%2Ce%2Co%29%3An%3E.5%2B.2%2As%7C%7Cn%3C.5-.2%2As%3Ftext%28cSet%5Bc%5D%5B4%5D%2Ce%2Co%29%3Atext%28cSet%5Bc%5D%5B5%5D%2Ce%2Co%29%3B0%3D%3Drv%3F0%3D%3DfTyp%3Ft%2B%3Dsp%3A%28f%2B%3Dsp%2Ct%2B%3Dsp%2F10%29%3A0%3D%3DfTyp%3Ft-%3Dsp%3A%28f-%3Dsp%2Ct-%3Dsp%2F10%29%2Ctext%28%22%23%22%2BtokenId.toString%28%29%2C10%2Cheight-10%29%7Dfunction%20mouseClicked%28%29%7BcB%3DcO%2CsB%3DsO%2CbB%3DbO%2CcO%3DcT%2CsO%3DsT%2CbO%3DbT%2CcT%3DcB%2CsT%3DsB%2CbT%3DbB%7Dfunction%20keyPressed%28%29%7B32%3D%3D%3DkeyCode%26%261%3D%3Dlp%3F%28noLoop%28%29%2Clp%3D%211%29%3AkeyCode%3D%3D%3DLEFT_ARROW%3F%28rv%3D%211%2Cloop%28%29%2Clp%3D%210%29%3AkeyCode%3D%3D%3DRIGHT_ARROW%3F%28rv%3D%210%2Cloop%28%29%2Clp%3D%210%29%3AkeyCode%3D%3D%3DUP_ARROW%3FresizeCanvas%28750%2C250%29%3AkeyCode%3D%3D%3DDOWN_ARROW%3FresizeCanvas%28500%2C500%29%3A16%3D%3D%3DkeyCode%3FresizeCanvas%28350%2C600%29%3A%28loop%28%29%2Clp%3D%210%29%7D%3C%2Fscript%3E%3C%2Fbody%3E%3C%2Fhtml%3E\"\n            )\n        );\n\n        return htmlString;\n    }\n\n    /**\n     * @dev Hash to metadata function\n     */\n    function hashToMetadata(string memory _hash)\n        public\n        view\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        string memory metadataString;\n\n        for (uint8 i = 0; i < 8; i++) {\n            uint8 thisTraitIndex = AnonymiceLibrary.parseInt(\n                AnonymiceLibrary.substring(_hash, i, i + 1)\n            );\n\n            metadataString = string(\n                abi.encodePacked(\n                    metadataString,\n                    '{\"trait_type\":\"',\n                    traitTypes[i][thisTraitIndex].traitType,\n                    '\",\"value\":\"',\n                    traitTypes[i][thisTraitIndex].traitName,\n                    '\"}'\n                )\n            );\n\n            if (i != 7)\n                metadataString = string(abi.encodePacked(metadataString, \",\"));\n        }\n\n        return string(abi.encodePacked(\"[\", metadataString, \"]\"));\n    }\n\n    /**\n     * @dev Returns the SVG and metadata for a token Id\n     * @param _tokenId The tokenId to return the SVG and metadata for.\n     */\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        require(_exists(_tokenId));\n\n        string memory tokenHash = _tokenIdToHash(_tokenId);\n\n        string\n            memory description = '\", \"description\": \"256 ASCII SnowCrashes. Metadata & images mirrored on chain permanently and loops infinitely\",';\n\n        string memory encodedTokenId = AnonymiceLibrary.encode(\n            bytes(string(abi.encodePacked(AnonymiceLibrary.toString(_tokenId))))\n        );\n        string memory encodedHash = AnonymiceLibrary.encode(\n            bytes(string(abi.encodePacked(tokenHash)))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    AnonymiceLibrary.encode(\n                        bytes(\n                            string(\n                                abi.encodePacked(\n                                    '{\"name\": \"SnowCrash #',\n                                    AnonymiceLibrary.toString(_tokenId),\n                                    description,\n                                    '\"animation_url\":\"',\n                                    animationUrl,\n                                    encodedTokenId,\n                                    \"&t=\",\n                                    encodedHash,\n                                    '\",\"image\":\"',\n                                    imageUrl,\n                                    AnonymiceLibrary.toString(_tokenId),\n                                    \"&t=\",\n                                    tokenHash,\n                                    '\",\"attributes\":',\n                                    hashToMetadata(tokenHash),\n                                    \"}\"\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    /**\n     * @dev Returns a hash for a given tokenId\n     * @param _tokenId The tokenId to return the hash for.\n     */\n    function _tokenIdToHash(uint256 _tokenId)\n        public\n        view\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        string memory tokenHash = tokenIdToHash[_tokenId];\n\n        return tokenHash;\n    }\n\n    /*\n ______     __     __     __   __     ______     ______    \n/\\  __ \\   /\\ \\  _ \\ \\   /\\ \"-.\\ \\   /\\  ___\\   /\\  == \\   \n\\ \\ \\/\\ \\  \\ \\ \\/ \".\\ \\  \\ \\ \\-.  \\  \\ \\  __\\   \\ \\  __<   \n \\ \\_____\\  \\ \\__/\".~\\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\  \\ \\_\\ \\_\\ \n  \\/_____/   \\/_/   \\/_/   \\/_/ \\/_/   \\/_____/   \\/_/ /_/ \n                                                           \n    /**\n     * @dev Add a trait type\n     * @param _traitTypeIndex The trait type index\n     * @param traits Array of traits to add\n     */\n\n    function addTraitType(uint256 _traitTypeIndex, Trait[] memory traits)\n        external\n        payable\n        onlyOwner\n    {\n        for (uint256 i = 0; i < traits.length; i++) {\n            traitTypes[_traitTypeIndex].push(\n                Trait(traits[i].traitName, traits[i].traitType)\n            );\n        }\n\n        return;\n    }\n\n    function addContributorMint(address _account) external payable onlyOwner {\n        contributorMints[_account] = true;\n    }\n\n    function flipMintingSwitch() external payable onlyOwner {\n        MINTING_LIVE = !MINTING_LIVE;\n    }\n\n    /**\n     * @dev Sets the p5js url\n     * @param _p5jsUrl The address of the p5js file hosted on CDN\n     */\n\n    function setJsAddress(string memory _p5jsUrl) external payable onlyOwner {\n        p5jsUrl = _p5jsUrl;\n    }\n\n    /**\n     * @dev Sets the p5js resource integrity\n     * @param _p5jsIntegrity The hash of the p5js file (to protect w subresource integrity)\n     */\n\n    function setJsIntegrity(string memory _p5jsIntegrity)\n        external\n        payable\n        onlyOwner\n    {\n        p5jsIntegrity = _p5jsIntegrity;\n    }\n\n    /**\n     * @dev Sets the base image url\n     * @param _imageUrl The base url for image field\n     */\n\n    function setImageUrl(string memory _imageUrl) external payable onlyOwner {\n        imageUrl = _imageUrl;\n    }\n\n    function setAnimationUrl(string memory _animationUrl)\n        external\n        payable\n        onlyOwner\n    {\n        animationUrl = _animationUrl;\n    }\n\n    function withdraw() external payable onlyOwner {\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(success);\n    }\n}\n"
67     }
68   }
69 }}