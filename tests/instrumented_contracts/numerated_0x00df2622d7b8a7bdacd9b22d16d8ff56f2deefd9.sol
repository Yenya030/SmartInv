1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/staking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// Copyright (c) 2023 Flipping Club - flippingclub.xyz\n/**\n *  ______ _ _             _                _____ _       _\n * |  ____| (_)           (_)              / ____| |     | |\n * | |__  | |_ _ __  _ __  _ _ __   __ _  | |    | |_   _| |__\n * |  __| | | | '_ \\| '_ \\| | '_ \\ / _` | | |    | | | | | '_ \\\n * | |    | | | |_) | |_) | | | | | (_| | | |____| | |_| | |_) |\n * |_|    |_|_| .__/| .__/|_|_| |_|\\__, |  \\_____|_|\\__,_|_.__/\n *            | |   | |             __/ |\n *   _____ _  |_|   |_|  _         |___/  _____            _                  _\n *  / ____| |      | |  (_)              / ____|          | |                | |\n * | (___ | |_ __ _| | ___ _ __   __ _  | |     ___  _ __ | |_ _ __ __ _  ___| |_\n *  \\___ \\| __/ _` | |/ / | '_ \\ / _` | | |    / _ \\| '_ \\| __| '__/ _` |/ __| __|\n *  ____) | || (_| |   <| | | | | (_| | | |___| (_) | | | | |_| | | (_| | (__| |_\n * |_____/ \\__\\__,_|_|\\_\\_|_| |_|\\__, |  \\_____\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|\n *                                __/ |\n *                               |___/\n *\n * @title Flipping Club Staking Contract v4.1.1 - flippingclub.xyz\n * @author Flipping Club Team - (Team B)\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./stakeable.sol\";\nimport \"./NFTContractFunctions.sol\";\nimport \"./burnFunctions.sol\";\n\ncontract FlippingClubStakingContract is Stakeable, Pausable, Ownable {\n    using SafeMath for uint256;\n    uint256 private maxAllowancePerKey = 5000000000000000000;\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\"ADMIN\"));\n    bytes32 private constant EXEC = keccak256(abi.encodePacked(\"EXEC\"));\n    bytes32 private constant CLAIM = keccak256(abi.encodePacked(\"CLAIM\"));\n    address private __checkKeys;\n    address private __burnKeys;\n    address private __migratingContract;\n    event Claimed(uint256 indexed amount, address indexed payee);\n    NFTContractFunctions private ERC721KeyCards;\n    burnFunctions private ERC721KeyBurn;\n    migratingSourceFunctions private MigratingStakes;\n    struct StakePackage {\n        uint256 duration;\n        uint256 percentage;\n        uint256 min;\n        uint256 max;\n        bytes32 token;\n    }\n\n    mapping(uint256 => StakePackage[]) private Packages;\n\n    constructor(address payable _newAdmin) {\n        _grantRole(ADMIN, _newAdmin);\n        _grantRole(ADMIN, msg.sender);\n        _grantRole(EXEC, _newAdmin);\n        _grantRole(EXEC, msg.sender);\n    }\n\n    receive() external payable {}\n\n    function addPackage(\n        uint256 _name,\n        uint256 duration,\n        uint256 percentage,\n        uint256 min,\n        uint256 max\n    ) external onlyRole(ADMIN) {\n        Packages[_name].push(\n            StakePackage(\n                duration,\n                percentage,\n                min,\n                max,\n                keccak256(abi.encodePacked(duration, percentage, min, max))\n            )\n        );\n    }\n\n    function getPackage(uint256 packageName)\n        private\n        view\n        returns (StakePackage memory)\n    {\n        require(Packages[packageName].length > 0, \"No Package\");\n        StakePackage memory package = Packages[packageName][0];\n        return package;\n    }\n\n    function deletePackage(uint256 packageName) external onlyRole(ADMIN) {\n        require(Packages[packageName].length > 0, \"No Package\");\n        delete Packages[packageName];\n    }\n\n    function beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256[] memory _keysToBeUsed,\n        bytes32 token,\n        uint256 poolID\n    ) external payable nonReentrant whenNotPaused {\n        _beginStake(\n            _amount,\n            _package,\n            _keysToBeUsed,\n            msg.sender,\n            token,\n            poolID\n        );\n    }\n\n    function exec_beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256 _startTime,\n        address _spender,\n        uint256 _numKeys,\n        uint256 rewards,\n        uint256 poolID\n    ) external nonReentrant onlyRole(EXEC) whenNotPaused {\n        StakePackage memory package = getPackage(_package);\n        uint256 percentage = package.percentage;\n        uint256 _timePeriodInSeconds = package.duration;\n        uint256 _minStakeValue = package.min;\n        uint256 _maxStakeValue = package.max;\n        require(\n            _amount >= _minStakeValue && _amount <= _maxStakeValue,\n            \"Value not in range\"\n        );\n        require(enoughKeys(_amount, percentage, _numKeys), \"Not enough Keys.\");\n        _admin_stake(\n            _amount,\n            percentage,\n            _timePeriodInSeconds,\n            _spender,\n            _startTime,\n            _numKeys,\n            rewards,\n            poolID\n        );\n    }\n\n    function _beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256[] memory _keysToBeUsed,\n        address _spender,\n        bytes32 token,\n        uint256 poolID\n    ) private {\n        StakePackage memory package = getPackage(_package);\n        uint256 percentage = package.percentage;\n        uint256 _timePeriodInSeconds = package.duration;\n        uint256 _minStakeValue = package.min;\n        uint256 _maxStakeValue = package.max;\n        require(token == package.token, \"Package is not authorized.\");\n        require(\n            _amount >= _minStakeValue && _amount <= _maxStakeValue,\n            \"Stake value not in range\"\n        );\n        require(msg.value == _amount, \"Invalid amount sent.\");\n        require(\n            checkTokens(_keysToBeUsed, _spender) == true,\n            \"Not all Keys owned by address.\"\n        );\n        require(checkKey() >= 1, \"Address have no Key.\");\n        require(\n            enoughKeys(_amount, percentage, _keysToBeUsed.length),\n            \"Not enough Keys.\"\n        );\n        burnKeys(_keysToBeUsed, _spender);\n\n        _stake(\n            _amount,\n            percentage,\n            _timePeriodInSeconds,\n            _spender,\n            _keysToBeUsed.length,\n            poolID\n        );\n    }\n\n    function enoughKeys(\n        uint256 _amount,\n        uint256 percentage,\n        uint256 _numKeys\n    ) private view returns (bool) {\n        if (\n            _amount.mul(percentage).div(100) <= _numKeys.mul(maxAllowancePerKey)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    function migrateStakes(\n        uint256 poolID,\n        uint256 _securityAddedTime,\n        uint256 index\n    ) external nonReentrant whenNotPaused {\n        (\n            uint256 _amount,\n            uint256 _startTime,\n            uint256 percentage,\n            uint256 _timePeriodInSeconds,\n            uint256 _curReturn,\n            uint256 _numKeys\n        ) = getMigratingStake(msg.sender, index);\n        _timePeriodInSeconds = _timePeriodInSeconds.add(_securityAddedTime);\n        _migrateStake(\n            _amount,\n            percentage,\n            _timePeriodInSeconds,\n            _startTime,\n            _numKeys,\n            _curReturn,\n            poolID\n        );\n    }\n\n\n\n    function withdrawStake(uint256 index) external nonReentrant whenNotPaused {\n        require(_hasStake(msg.sender, index), \"No active positions.\");\n        _withdrawStake(index);\n    }\n\n    function withdrawReturn(uint256 index) external nonReentrant whenNotPaused {\n        require(_hasStake(msg.sender, index), \"No active positions.\");\n        _withdrawReturn(index);\n    }\n\n    function _withdraw_close(\n        uint256 stake_index,\n        address payable _spender,\n        bool refund\n    ) external onlyRole(EXEC) {\n        require(_hasStake(_spender, stake_index), \"Nothing available.\");\n        _admin_withdraw_close(stake_index, _spender, refund);\n    }\n\n    function hasEnoughKeys(\n        uint256 _amount,\n        uint256 percentage,\n        uint256 _numKeys\n    ) private view returns (bool) {\n        if (\n            _amount.mul(percentage).div(100) <= _numKeys.mul(maxAllowancePerKey)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    function isValidAmount(\n        uint256 _amount,\n        uint256 _minStakeValue,\n        uint256 _maxStakeValue\n    ) private pure returns (bool) {\n        if (_amount >= _minStakeValue && _amount <= _maxStakeValue) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTokens(uint256[] memory _tokenList, address _msgSender)\n        private\n        view\n        returns (bool)\n    {\n        require(__checkKeys != address(0), \"Key Contract not set.\");\n        for (uint256 i = 0; i < _tokenList.length; i++) {\n            if (ERC721KeyCards.ownerOf(_tokenList[i]) != _msgSender) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function burnKeys(uint256[] memory _keysToBeUsed, address _spender)\n        public\n        whenNotPaused\n    {\n        require(__burnKeys != address(0), \"Delegated Burn not set.\");\n        ERC721KeyBurn.burnKeys(_keysToBeUsed, _spender);\n    }\n\n    function checkKey() private view returns (uint256) {\n        require(__checkKeys != address(0), \"Key Contract not set.\");\n        return ERC721KeyCards.balanceOf(msg.sender);\n    }\n\n    function initPool(uint256 _amount, address _payee)\n        external\n        nonReentrant\n        onlyRole(ADMIN)\n    {\n        payable(_payee).transfer(_amount);\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function setCheckKeysContractAddress(address KeysContract)\n        external\n        onlyRole(ADMIN)\n    {\n        __checkKeys = KeysContract;\n        ERC721KeyCards = NFTContractFunctions(__checkKeys);\n    }\n\n    function setBurnContractAddress(address BurnContract)\n        external\n        onlyRole(ADMIN)\n    {\n        __burnKeys = BurnContract;\n        ERC721KeyBurn = burnFunctions(__burnKeys);\n    }\n\n    function setmaxAllowancePerKey(uint256 _maxAllowancePerKey)\n        external\n        onlyRole(ADMIN)\n    {\n        maxAllowancePerKey = _maxAllowancePerKey;\n    }\n\n    function pause() external whenNotPaused onlyRole(ADMIN) {\n        _pause();\n    }\n\n    function unPause() external whenPaused onlyRole(ADMIN) {\n        _unpause();\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function setMigratingSourceContractAddress(address migratingSourceContract)\n        external\n        onlyRole(ADMIN)\n    {\n        __migratingContract = migratingSourceContract;\n        MigratingStakes = migratingSourceFunctions(__migratingContract);\n    }\n\n    function getMigratingStake(address _staker, uint256 index)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return MigratingStakes.getSingleStake(_staker, index);\n    }\n}\n"
6     },
7     "contracts/burnFunctions.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface burnFunctions {\n    function burnKeys(uint256[] memory _keysToBeUsed, address _spender)\n        external;\n}\n"
9     },
10     "contracts/NFTContractFunctions.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface NFTContractFunctions {\n    function balanceOf(address owner) external view returns (uint256);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function approve(address to, uint256 tokenId) external;\n}\n"
12     },
13     "contracts/stakeable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// Copyright (c) 2023 Flipping Club - flippingclub.xyz\n/**\n *  ______ _ _             _                _____ _       _\n * |  ____| (_)           (_)              / ____| |     | |\n * | |__  | |_ _ __  _ __  _ _ __   __ _  | |    | |_   _| |__\n * |  __| | | | '_ \\| '_ \\| | '_ \\ / _` | | |    | | | | | '_ \\\n * | |    | | | |_) | |_) | | | | | (_| | | |____| | |_| | |_) |\n * |_|    |_|_| .__/| .__/|_|_| |_|\\__, |  \\_____|_|\\__,_|_.__/\n *            | |   | |             __/ |\n *   _____ _  |_|   |_|  _         |___/  _____            _                  _\n *  / ____| |      | |  (_)              / ____|          | |                | |\n * | (___ | |_ __ _| | ___ _ __   __ _  | |     ___  _ __ | |_ _ __ __ _  ___| |_\n *  \\___ \\| __/ _` | |/ / | '_ \\ / _` | | |    / _ \\| '_ \\| __| '__/ _` |/ __| __|\n *  ____) | || (_| |   <| | | | | (_| | | |___| (_) | | | | |_| | | (_| | (__| |_\n * |_____/ \\__\\__,_|_|\\_\\_|_| |_|\\__, |  \\_____\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|\n *                                __/ |\n *                               |___/\n *\n * @title Flipping Club Staking Contract - Dependency v4.1.1 - flippingclub.xyz\n * @author Flipping Club Team - (Team B)\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./migratingSourceFunctions.sol\";\n\ncontract Stakeable is ReentrancyGuard {\n    using SafeMath for uint256;\n    uint256 private initialTimestamp;\n    uint256 private _maxAllowancePerKey = 5000000000000000000;\n    uint256 private timePeriod;\n    uint256 private maxPositions = 4;\n    uint256 private MinStakeValueToClosePosition = 100000000000000000;\n    uint256 private MovePercentageBasisNumber = 50;\n    uint256 private minWithdraw = 100000000000000000;\n    address private StakingAccount;\n    bool private MoveFundsUponReceipt;\n    bool private partialWithdraw = true;\n    bool private lockdown = false;\n    bool private MovePercentageOfFundsUponReceipt = true;\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\"ADMIN\"));\n    bytes32 private constant EXEC = keccak256(abi.encodePacked(\"EXEC\"));\n    bytes32 private constant CLAIM = keccak256(abi.encodePacked(\"CLAIM\"));\n    Stakeholder[] internal stakeholders;\n    mapping(bytes32 => mapping(address => bool)) public roles;\n    mapping(address => uint256) internal stakes;\n    mapping(uint256 => poolGroup[]) private poolGroups;\n    event GrantRole(bytes32 indexed role, address indexed account);\n    event RevokeRole(bytes32 indexed role, address indexed account);\n    event Withdrawn(address indexed, uint256 amount, uint256 timestamp);\n    event Extended(\n        address user,\n        uint256 amount,\n        uint256 since,\n        uint256 reward,\n        uint256 timePeriod,\n        uint256 usedKeys\n    );\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 index,\n        uint256 timestamp,\n        uint256 _plan,\n        uint256 timePeriod,\n        uint256 usedKeys\n    );\n    event Migrated(\n        address indexed user,\n        uint256 amount,\n        uint256 index,\n        uint256 timestamp,\n        uint256 _plan,\n        uint256 timePeriod,\n        uint256 usedKeys\n    );\n    struct Stake {\n        address user;\n        uint256 amount;\n        uint256 since;\n        uint256 percentage;\n        uint256 timePeriod;\n        uint256 reward;\n        uint256 usedKeys;\n        bool paused;\n        uint256 poolID;\n    }\n    struct Stakeholder {\n        address user;\n        Stake[] address_stakes;\n    }\n    struct poolGroup {\n        uint256 id;\n        bool active;\n    }\n    struct StakingSummary {\n        Stake[] stakes;\n    }\n\n    constructor() {\n        stakeholders.push();\n    }\n\n    function _addStakeholder(address staker) private returns (uint256) {\n        stakeholders.push();\n        uint256 userIndex = stakeholders.length - 1;\n        stakeholders[userIndex].user = staker;\n        stakes[staker] = userIndex;\n        return userIndex;\n    }\n\n    function _stake(\n        uint256 _amount,\n        uint256 _percentage,\n        uint256 _timePeriodInSeconds,\n        address _Sender,\n        uint256 usedKeys,\n        uint256 poolID\n    ) internal {\n        require(poolGroups[poolID].length > 0, \"No Pool\");\n        require(StakingAccount != address(0), \"Staking account not set.\");\n        require(canStake(_Sender, _percentage), \"Max open positions.\");\n        if (MoveFundsUponReceipt) {\n            payable(StakingAccount).transfer(_amount);\n        }\n        if (MovePercentageOfFundsUponReceipt) {\n            payable(StakingAccount).transfer(\n                (_amount.mul(MovePercentageBasisNumber)).div(100)\n            );\n        }\n        uint256 index = stakes[_Sender];\n        uint256 timestamp = block.timestamp;\n        if (index == 0) {\n            index = _addStakeholder(_Sender);\n        }\n        initialTimestamp = block.timestamp;\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\n        stakeholders[index].address_stakes.push(\n            Stake(\n                payable(_Sender),\n                _amount,\n                timestamp,\n                _percentage,\n                timePeriod,\n                0,\n                usedKeys,\n                false,\n                poolID\n            )\n        );\n        emit Staked(\n            _Sender,\n            _amount,\n            index,\n            timestamp,\n            _percentage,\n            timePeriod,\n            usedKeys\n        );\n    }\n\n    function _admin_stake(\n        uint256 _amount,\n        uint256 _percentage,\n        uint256 _timePeriodInSeconds,\n        address _Sender,\n        uint256 _startTime,\n        uint256 usedKeys,\n        uint256 rewards,\n        uint256 poolID\n    ) internal {\n        require(canStake(_Sender, _percentage), \"Max open positions.\");\n        require(poolGroups[poolID].length > 0, \"No Pool\");\n        uint256 index = stakes[_Sender];\n        uint256 timestamp = _startTime;\n        if (index == 0) {\n            index = _addStakeholder(_Sender);\n        }\n        initialTimestamp = _startTime;\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\n        stakeholders[index].address_stakes.push(\n            Stake(\n                payable(_Sender),\n                _amount,\n                timestamp,\n                _percentage,\n                timePeriod,\n                rewards,\n                usedKeys,\n                false,\n                poolID\n            )\n        );\n        emit Staked(\n            _Sender,\n            _amount,\n            index,\n            timestamp,\n            _percentage,\n            timePeriod,\n            usedKeys\n        );\n    }\n\n    function _migrateStake(\n        uint256 _amount,\n        uint256 _percentage,\n        uint256 _timePeriodInSeconds,\n        uint256 _startTime,\n        uint256 usedKeys,\n        uint256 _reward,\n        uint256 poolID\n    ) internal {\n        require(poolGroups[poolID].length > 0, \"No Pool\");\n        require(canStake(msg.sender, _percentage), \"Max open positions.\");\n        uint256 index = stakes[msg.sender];\n        if (index == 0) {\n            index = _addStakeholder(msg.sender);\n        }\n        stakeholders[index].address_stakes.push(\n            Stake(\n                msg.sender,\n                _amount,\n                _startTime,\n                _percentage,\n                _timePeriodInSeconds,\n                _reward,\n                usedKeys,\n                false,\n                poolID\n            )\n        );\n        emit Migrated(\n            msg.sender,\n            _amount,\n            index,\n            _startTime,\n            _percentage,\n            _timePeriodInSeconds,\n            usedKeys\n        );\n    }\n\n    function calculateStakeReward(Stake memory _current_stake)\n        private\n        view\n        returns (uint256)\n    {\n        if (block.timestamp > _current_stake.timePeriod) {\n            return\n                (_current_stake.amount.mul(_current_stake.percentage)).div(100);\n        }\n        return 0;\n    }\n\n    function toggleStakeStatus(\n        address _staker,\n        bool _status,\n        uint256 index\n    ) external onlyRole(EXEC) {\n        uint256 user_index = stakes[_staker];\n        require(user_index > 0, \"Address not registered.\");\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(current_stake.amount > 0, \"No active positions.\");\n        stakeholders[user_index].address_stakes[index].paused = _status;\n    }\n\n    function _withdrawStake(uint256 index) internal {\n        require(lockdown == false, \"Contract Locked.\");\n        uint256 user_index = stakes[msg.sender];\n        require(user_index > 0, \"Address not registered.\");\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(\n            poolGroups[current_stake.poolID][0].active,\n            \"Pool Temporary Suspended\"\n        );\n        require(current_stake.amount > 0, \"No active positions.\");\n        require(\n            block.timestamp >= current_stake.timePeriod,\n            \"Not matured yet.\"\n        );\n        uint256 reward = current_stake.reward.add(\n            calculateStakeReward(current_stake)\n        );\n        require(reward > 0, \"Claim not ready.\");\n        uint256 _amount = current_stake.amount.add(reward);\n        require(_amount >= minWithdraw, \"Amount is less than minimum\");\n        require(address(this).balance > _amount, \"Not enough balance.\");\n        delete stakeholders[user_index].address_stakes[index];\n        stakeholders[user_index].address_stakes[index] = stakeholders[\n            user_index\n        ].address_stakes[stakeholders[user_index].address_stakes.length - 1];\n        stakeholders[user_index].address_stakes.pop();\n        payable(msg.sender).transfer(_amount);\n        emit Withdrawn(msg.sender, _amount, block.timestamp);\n    }\n\n    function _withdrawReturn(uint256 index) internal {\n        require(lockdown == false, \"Contract Locked.\");\n        uint256 user_index = stakes[msg.sender];\n        require(user_index > 0, \"Address not registered.\");\n        require(partialWithdraw, \"Partial withdraw is not enabled.\");\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(\n            poolGroups[current_stake.poolID][0].active,\n            \"Pool Temporary Suspended\"\n        );\n        require(current_stake.amount > 0, \"No active positions.\");\n\n        require(\n            block.timestamp >= current_stake.timePeriod,\n            \"Not matured yet.\"\n        );\n        uint256 reward = current_stake.reward.add(\n            calculateStakeReward(current_stake)\n        );\n        require(reward > 0, \"Claim not ready.\");\n        uint256 _amount = reward;\n        require(_amount >= minWithdraw, \"Amount is less than minimum\");\n        require(address(this).balance > _amount, \"Not enough balance.\");\n\n        if (\n            _enoughKeys(\n                stakeholders[user_index].address_stakes[index].amount,\n                stakeholders[user_index].address_stakes[index].percentage,\n                reward,\n                stakeholders[user_index].address_stakes[index].usedKeys\n            )\n        ) {\n            uint256 timeDiff = (\n                stakeholders[user_index].address_stakes[index].timePeriod\n            ).sub(stakeholders[user_index].address_stakes[index].since);\n            stakeholders[user_index].address_stakes[index].since = block\n                .timestamp;\n            stakeholders[user_index].address_stakes[index].timePeriod = block\n                .timestamp\n                .add(timeDiff);\n            stakeholders[user_index].address_stakes[index].reward = 0;\n            payable(msg.sender).transfer(_amount);\n            emit Withdrawn(msg.sender, _amount, block.timestamp);\n            emit Extended(\n                stakeholders[user_index].address_stakes[index].user,\n                stakeholders[user_index].address_stakes[index].amount,\n                stakeholders[user_index].address_stakes[index].since,\n                stakeholders[user_index].address_stakes[index].reward,\n                stakeholders[user_index].address_stakes[index].timePeriod,\n                stakeholders[user_index].address_stakes[index].usedKeys\n            );\n        } else {\n            _amount = current_stake.amount.add(reward);\n            delete stakeholders[user_index].address_stakes[index];\n            stakeholders[user_index].address_stakes[index] = stakeholders[\n                user_index\n            ].address_stakes[\n                    stakeholders[user_index].address_stakes.length - 1\n                ];\n            stakeholders[user_index].address_stakes.pop();\n            payable(msg.sender).transfer(_amount);\n            emit Withdrawn(msg.sender, _amount, block.timestamp);\n        }\n    }\n\n    function _admin_withdraw_close(\n        uint256 index,\n        address payable _spender,\n        bool refund\n    ) internal {\n        uint256 user_index = stakes[_spender];\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        uint256 reward = current_stake.reward.add(\n            calculateStakeReward(current_stake)\n        );\n\n        uint256 claimable = current_stake.amount.add(reward);\n        delete stakeholders[user_index].address_stakes[index];\n        stakeholders[user_index].address_stakes[index] = stakeholders[\n            user_index\n        ].address_stakes[stakeholders[user_index].address_stakes.length - 1];\n        stakeholders[user_index].address_stakes.pop();\n        if (refund) {\n            require(address(this).balance >= claimable, \"Not enough balance.\");\n            payable(_spender).transfer(claimable);\n        }\n    }\n\n    function _extendStake(uint256 index) public {\n        require(lockdown == false, \"Contract Locked.\");\n        uint256 user_index = stakes[msg.sender];\n        require(user_index > 0, \"Address not registered.\");\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(current_stake.amount > 0, \"No active positions.\");\n        uint256 reward = current_stake.reward.add(\n            calculateStakeReward(current_stake)\n        );\n        require(\n            poolGroups[current_stake.poolID][0].active,\n            \"Pool Temporary Suspended\"\n        );\n        require(reward > 0, \"Extend not Possible.\");\n        require(\n            _enoughKeys(\n                stakeholders[user_index].address_stakes[index].amount,\n                stakeholders[user_index].address_stakes[index].percentage,\n                reward,\n                stakeholders[user_index].address_stakes[index].usedKeys\n            ),\n            \"Not enough allowance left.\"\n        );\n        uint256 timeDiff = (\n            stakeholders[user_index].address_stakes[index].timePeriod\n        ).sub(stakeholders[user_index].address_stakes[index].since);\n        stakeholders[user_index].address_stakes[index].since = block.timestamp;\n        stakeholders[user_index].address_stakes[index].timePeriod = block\n            .timestamp\n            .add(timeDiff);\n        stakeholders[user_index].address_stakes[index].reward = reward;\n        emit Extended(\n            stakeholders[user_index].address_stakes[index].user,\n            stakeholders[user_index].address_stakes[index].amount,\n            stakeholders[user_index].address_stakes[index].since,\n            stakeholders[user_index].address_stakes[index].reward,\n            stakeholders[user_index].address_stakes[index].timePeriod,\n            stakeholders[user_index].address_stakes[index].usedKeys\n        );\n    }\n\n    function _changeEndTime(\n        uint256 index,\n        address staker,\n        uint256 newTime\n    ) public onlyRole(EXEC){\n        require(lockdown == false, \"Contract Locked.\");\n        uint256 user_index = stakes[staker];\n        require(user_index > 0, \"Address not registered.\");\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(current_stake.amount > 0, \"No active positions.\");\n        stakeholders[user_index].address_stakes[index].timePeriod = newTime;\n    }\n\n    function _enoughKeys(\n        uint256 _amount,\n        uint256 _PlanReward,\n        uint256 _FutReward,\n        uint256 _numKeys\n    ) internal view returns (bool) {\n        if (\n            _amount.mul(_PlanReward).div(100).add(_FutReward) <=\n            _numKeys.mul(_maxAllowancePerKey)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    function _stakeLength(address _staker) external view returns (uint256) {\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        return summary.stakes.length;\n    }\n\n    function getAllStakes(address _staker)\n        external\n        view\n        returns (StakingSummary memory)\n    {\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\n            uint256 availableReward = calculateStakeReward(summary.stakes[s]);\n            summary.stakes[s].reward = summary.stakes[s].reward.add(\n                availableReward\n            );\n        }\n        return summary;\n    }\n\n    function getSingleStake(address _staker, uint256 index)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        require(summary.stakes.length > 0, \"No active positions.\");\n        require(summary.stakes.length > index, \"Index not valid.\");\n\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\n            uint256 availableReward = calculateStakeReward(summary.stakes[s]);\n            summary.stakes[s].reward = summary.stakes[s].reward.add(\n                availableReward\n            );\n        }\n        return (\n            summary.stakes[index].amount,\n            summary.stakes[index].since,\n            summary.stakes[index].percentage,\n            summary.stakes[index].timePeriod,\n            summary.stakes[index].reward,\n            summary.stakes[index].usedKeys\n        );\n    }\n\n    function _hasStake(address _staker, uint256 index)\n        internal\n        view\n        returns (bool)\n    {\n        require(index <= maxPositions - 1, \"Index out of range.\");\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        if (summary.stakes.length > 0 && summary.stakes.length > index) {\n            return true;\n        }\n        return false;\n    }\n\n    function canStake(address _staker, uint256 _percentage)\n        private\n        view\n        returns (bool result)\n    {\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        if (summary.stakes.length >= maxPositions) {\n            return false;\n        }\n\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\n            if (summary.stakes[s].percentage == _percentage) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function setMaxPositions(uint256 _maxPositions) external onlyRole(ADMIN) {\n        maxPositions = _maxPositions;\n    }\n\n    function setMinStakeValueToClosePosition(\n        uint256 _MinStakeValueToClosePosition\n    ) external onlyRole(ADMIN) {\n        MinStakeValueToClosePosition = _MinStakeValueToClosePosition;\n    }\n\n    function setStakingAccount(address _StakingAccount)\n        external\n        onlyRole(ADMIN)\n    {\n        StakingAccount = _StakingAccount;\n    }\n\n    function setMoveFundsUponReceipt(bool _MoveFundsUponReceipt)\n        external\n        onlyRole(ADMIN)\n    {\n        MoveFundsUponReceipt = _MoveFundsUponReceipt;\n    }\n\n    function setMovePercentageBasisNumber(uint256 _MovePercentageBasisNumber)\n        external\n        onlyRole(ADMIN)\n    {\n        MovePercentageBasisNumber = _MovePercentageBasisNumber;\n    }\n\n    function setPartialWithdraw(bool _partialWithdraw)\n        external\n        onlyRole(ADMIN)\n    {\n        partialWithdraw = _partialWithdraw;\n    }\n\n    function setMovePercentageOfFundsUponReceipt(\n        bool _MovePercentageOfFundsUponReceipt\n    ) external onlyRole(ADMIN) {\n        MovePercentageOfFundsUponReceipt = _MovePercentageOfFundsUponReceipt;\n    }\n    function _onlyRole(bytes32 _role) public view {\n        require(roles[_role][msg.sender], \"Not authorized.\");\n    }\n    modifier onlyRole(bytes32 _role) {\n        _onlyRole(_role);\n        _;\n    }\n\n    function _grantRole(bytes32 _role, address _account) internal {\n        roles[_role][_account] = true;\n        emit GrantRole(_role, _account);\n    }\n\n    function grantRole(bytes32 _role, address _account)\n        external\n        onlyRole(ADMIN)\n    {\n        _grantRole(_role, _account);\n    }\n\n    function _revokeRole(bytes32 _role, address _account) internal {\n        roles[_role][_account] = false;\n        emit RevokeRole(_role, _account);\n    }\n\n    function revokeRole(bytes32 _role, address _account)\n        external\n        onlyRole(ADMIN)\n    {\n        _revokeRole(_role, _account);\n    }\n\n    function set_maxAllowancePerKey(uint256 __maxAllowancePerKey)\n        external\n        onlyRole(ADMIN)\n    {\n        _maxAllowancePerKey = __maxAllowancePerKey;\n    }\n\n    function setMinWithdraw(uint256 _minWithdraw) external onlyRole(ADMIN) {\n        minWithdraw = _minWithdraw;\n    }\n\n    function toggleLockdown(bool _status) external onlyRole(EXEC) {\n        lockdown = _status;\n    }\n\n    function addPoolGroup(uint256 id, bool active) external onlyRole(ADMIN) {\n        poolGroups[id].push(poolGroup(id, active));\n    }\n\n    function getPoolGroup(uint256 poolID)\n        public\n        view\n        returns (poolGroup memory)\n    {\n        require(poolGroups[poolID].length > 0, \"No Pool\");\n        poolGroup memory pool = poolGroups[poolID][0];\n        return pool;\n    }\n\n    function deletePoolGroup(uint256 poolID) external onlyRole(ADMIN) {\n        require(poolGroups[poolID].length > 0, \"No Pool\");\n        delete poolGroups[poolID];\n    }\n\n    function togglePoolGroupStatus(uint256 poolID, bool _status)\n        external\n        onlyRole(EXEC)\n    {\n        poolGroups[poolID][0].active = _status;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/security/Pausable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
33     },
34     "contracts/migratingSourceFunctions.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface migratingSourceFunctions {\n    function getSingleStake(address _staker, uint256 index)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     }
55   }
56 }}