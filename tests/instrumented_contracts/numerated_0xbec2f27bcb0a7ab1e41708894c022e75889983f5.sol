1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/RIAPresale.sol": {
5       "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./lib/IERC20.sol\";\r\nimport \"./lib/Address.sol\";\r\nimport \"./lib/Context.sol\";\r\nimport \"./lib/Pausable.sol\";\r\nimport \"./lib/Ownable.sol\";\r\nimport \"./lib/ReentrancyGuard.sol\";\r\n\r\ninterface Aggregator {\r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint startedAt,\r\n        uint updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract RIAPresale is ReentrancyGuard, Ownable, Pausable {\r\n    uint public salePrice;\r\n    uint public totalTokensForPresale;\r\n    uint public minimumBuyAmount;\r\n    uint public inSale;\r\n    uint public priceStep;\r\n    uint public periodSize;\r\n    uint public startTime;\r\n    uint public endTime;\r\n    uint public claimStart;\r\n    uint public baseDecimals;\r\n\r\n    address public saleToken;\r\n    address dataOracle;\r\n    address USDTtoken;\r\n    address USDCtoken;\r\n    address BUSDtoken;\r\n    address DAItoken;\r\n\r\n    mapping(address => uint) public userDeposits;\r\n    mapping(address => bool) public hasClaimed;\r\n\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint indexed tokensBought,\r\n        address indexed purchaseToken,\r\n        uint amountPaid,\r\n        uint timestamp\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n\r\n    constructor(uint _startTime, uint _endTime, address _oracle, address _usdt, address _usdc, address _busd, address _dai) {\r\n        require(_startTime > block.timestamp && _endTime > _startTime, \"Invalid time\");\r\n        baseDecimals = (10 ** 18);\r\n        salePrice = 0.01 * (10 ** 18); //USD\r\n        priceStep = 0.0025 * (10 ** 18); //USD\r\n        periodSize = 30_000_000;\r\n        totalTokensForPresale = 300_000_000;\r\n        minimumBuyAmount = 1000;\r\n        inSale = totalTokensForPresale;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        dataOracle = _oracle;\r\n        USDTtoken = _usdt;\r\n        USDCtoken = _usdc;\r\n        BUSDtoken = _busd;\r\n        DAItoken = _dai;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function calculatePrice(uint256 _amount) internal view returns (uint256 totalValue) {\r\n        uint256 totalSold = totalTokensForPresale - inSale;\r\n\r\n        if(totalSold + _amount <= periodSize) return (_amount * salePrice);\r\n        else {\r\n            uint256 extra = (totalSold + _amount) - periodSize;\r\n            uint256 _salePrice = salePrice;\r\n\r\n            if(totalSold >= periodSize) {\r\n                _salePrice = (_salePrice + priceStep) + (((totalSold - periodSize) / periodSize) * priceStep);\r\n\r\n                uint256 period = _amount / periodSize;\r\n\r\n                if(period == 0) return (_amount * _salePrice);\r\n                else {\r\n                    while(period > 0) {\r\n                        totalValue = totalValue + (periodSize * _salePrice);\r\n                        _amount -= periodSize;\r\n                        _salePrice += priceStep;\r\n                        period--;\r\n                    }\r\n\r\n                    if(_amount > 0) totalValue += (_amount * _salePrice);\r\n                }\r\n            } else {\r\n                totalValue = (_amount - extra) * _salePrice;\r\n                if(extra <= periodSize) return totalValue + (extra * ((_salePrice * 125) / 100));\r\n                else {\r\n                    while(extra >= periodSize) {\r\n                        _salePrice += priceStep;\r\n                        totalValue = totalValue + (periodSize * _salePrice);\r\n                        extra -= periodSize;\r\n                    }\r\n\r\n                    if(extra > 0) {\r\n                        _salePrice += priceStep;\r\n                        totalValue += (extra * _salePrice);\r\n                    }\r\n                    return totalValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getETHLatestPrice() public view returns (uint) {\r\n        (, int256 price, , , ) = Aggregator(dataOracle).latestRoundData();\r\n        price = (price * (10 ** 10));\r\n        return uint(price);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    modifier checkSaleState(uint amount) {\r\n        require(block.timestamp >= startTime && block.timestamp <= endTime, \"Invalid time for buying\");\r\n        require(amount >= minimumBuyAmount, \"Too small amount\");\r\n        require(amount > 0 && amount <= inSale, \"Invalid sale amount\");\r\n        _;\r\n    }\r\n\r\n    function buyWithEth(uint amount) external payable checkSaleState(amount) whenNotPaused nonReentrant {\r\n        uint usdPrice = calculatePrice(amount);\r\n        uint ethAmount = (usdPrice * baseDecimals) / getETHLatestPrice();\r\n        require(msg.value >= ethAmount, \"Less payment\");\r\n        uint excess = msg.value - ethAmount;\r\n        inSale -= amount;\r\n        userDeposits[_msgSender()] += (amount * baseDecimals);\r\n        sendValue(payable(owner()), ethAmount);\r\n        if(excess > 0) sendValue(payable(_msgSender()), excess);\r\n\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            amount,\r\n            address(0),\r\n            ethAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buyWithUSD(uint amount, uint purchaseToken) external checkSaleState(amount) whenNotPaused {\r\n        uint usdPrice = calculatePrice(amount);\r\n        if(purchaseToken == 0 || purchaseToken == 1) usdPrice = usdPrice / (10 ** 12); //USDT and USDC have 6 decimals\r\n        inSale -= amount;\r\n        userDeposits[_msgSender()] += (amount * baseDecimals);\r\n\r\n        IERC20 tokenInterface;\r\n        if(purchaseToken == 0) tokenInterface = IERC20(USDTtoken);\r\n        else if(purchaseToken == 1) tokenInterface = IERC20(USDCtoken);\r\n        else if(purchaseToken == 2) tokenInterface = IERC20(BUSDtoken);\r\n        else if(purchaseToken == 3) tokenInterface = IERC20(DAItoken);\r\n\r\n        uint ourAllowance = tokenInterface.allowance(_msgSender(), address(this));\r\n        require(usdPrice <= ourAllowance, \"Make sure to add enough allowance\");\r\n\r\n        (bool success, ) = address(tokenInterface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                owner(),\r\n                usdPrice\r\n            )\r\n        );\r\n\r\n        require(success, \"Token payment failed\");\r\n\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            amount,\r\n            address(tokenInterface),\r\n            usdPrice,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getEthAmount(uint amount) external view returns (uint ethAmount) {\r\n        uint usdPrice = calculatePrice(amount);\r\n        ethAmount = (usdPrice * baseDecimals) / getETHLatestPrice();\r\n    }\r\n\r\n    function getTokenAmount(uint amount, uint purchaseToken) external view returns (uint usdPrice) {\r\n        usdPrice = calculatePrice(amount);\r\n        if(purchaseToken == 0 || purchaseToken == 1) usdPrice = usdPrice / (10 ** 12); //USDT and USDC have 6 decimals\r\n    }\r\n\r\n    function startClaim(uint _claimStart, uint tokensAmount, address _saleToken) external onlyOwner {\r\n        require(_claimStart > endTime && _claimStart > block.timestamp, \"Invalid claim start time\");\r\n        require(tokensAmount >= ((totalTokensForPresale - inSale) * baseDecimals), \"Tokens less than sold\");\r\n        require(_saleToken != address(0), \"Zero token address\");\r\n        require(claimStart == 0, \"Claim already set\");\r\n        claimStart = _claimStart;\r\n        saleToken = _saleToken;\r\n        IERC20(_saleToken).transferFrom(_msgSender(), address(this), tokensAmount);\r\n    }\r\n\r\n    function claim() external whenNotPaused {\r\n        require(saleToken != address(0), \"Sale token not added\");\r\n        require(block.timestamp >= claimStart, \"Claim has not started yet\");\r\n        require(!hasClaimed[_msgSender()], \"Already claimed\");\r\n        hasClaimed[_msgSender()] = true;\r\n        uint amount = userDeposits[_msgSender()];\r\n        require(amount > 0, \"Nothing to claim\");\r\n        delete userDeposits[_msgSender()];\r\n        IERC20(saleToken).transfer(_msgSender(), amount);\r\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\r\n    }\r\n\r\n    function changeClaimStart(uint _claimStart) external onlyOwner {\r\n        require(claimStart > 0, \"Initial claim data not set\");\r\n        require(_claimStart > endTime, \"Sale in progress\");\r\n        require(_claimStart > block.timestamp, \"Claim start in past\");\r\n        claimStart = _claimStart;\r\n    }\r\n\r\n    function changeSaleTimes(uint _startTime, uint _endTime) external onlyOwner {\r\n        require(_startTime > 0 || _endTime > 0, \"Invalid parameters\");\r\n\r\n        if(_startTime > 0) {\r\n            require(block.timestamp < _startTime, \"Sale time in past\");\r\n            startTime = _startTime;\r\n        }\r\n\r\n        if(_endTime > 0) {\r\n            require(_endTime > startTime, \"Invalid endTime\");\r\n            endTime = _endTime;\r\n        }\r\n    }\r\n\r\n    function changePriceStep(uint _priceStep) external onlyOwner {\r\n        require(_priceStep > 0 && _priceStep != priceStep, \"Invalid price step\");\r\n        priceStep = _priceStep;\r\n    }\r\n\r\n    function changePeriodSize(uint _periodSize) external onlyOwner {\r\n        require(_periodSize > 0 && _periodSize != periodSize, \"Invalid period size\");\r\n        periodSize = _periodSize;\r\n    }\r\n\r\n    function changeMinimumBuyAmount(uint _amount) external onlyOwner {\r\n        require(_amount > 0 && _amount != minimumBuyAmount, \"Invalid amount\");\r\n        minimumBuyAmount = _amount;\r\n    }\r\n\r\n    function withdrawTokens(address token, uint amount) external onlyOwner {\r\n        IERC20(token).transfer(owner(), amount);\r\n    }\r\n\r\n    function withdrawEthers() external onlyOwner {\r\n        (bool success,) = owner().call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed to withdraw\");\r\n    }\r\n}"
6     },
7     "contracts/lib/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.6;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
9     },
10     "contracts/lib/Address.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
12     },
13     "contracts/lib/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
15     },
16     "contracts/lib/Ownable.sol": {
17       "content": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: MIT License\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
18     },
19     "contracts/lib/Pausable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.6;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
21     },
22     "contracts/lib/ReentrancyGuard.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.6;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}