1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Address.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/math/Math.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
33     },
34     "contracts/DarkEnergy.sol": {
35       "content": "/**\n *Glitch was here\n */\n\n// SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.19;\n/*\n            ____ _ _ _       _     _          _\n           / ___| (_) |_ ___| |__ ( )___     / \\   _ __ _ __ ___  _   _\n          | |  _| | | __/ __| '_ \\|// __|   / _ \\ | '__| '_ ` _ \\| | | |\n          | |_| | | | || (__| | | | \\__ \\  / ___ \\| |  | | | | | | |_| |\n           \\____|_|_|\\__\\___|_| |_| |___/ /_/   \\_\\_|  |_| |_| |_|\\__, |\n                                                                  |___/\n\n             ____             _      _____\n            |  _ \\  __ _ _ __| | __ | ____|_ __   ___ _ __ __ _ _   _\n            | | | |/ _` | '__| |/ / |  _| | '_ \\ / _ \\ '__/ _` | | | |\n            | |_| | (_| | |  |   <  | |___| | | |  __/ | | (_| | |_| |\n            |____/ \\__,_|_|  |_|\\_\\ |_____|_| |_|\\___|_|  \\__, |\\__, |\n                                                          |___/ |___/\n*/\n\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./GlitchGeneralMintSpots.sol\";\nimport \"../interfaces/ISeaDrop.sol\";\nimport \"../util/OwnableAndAdministrable.sol\";\nimport \"../libraries/UriEncode.sol\";\nimport \"../interfaces/IDarkEnergy.sol\";\nimport \"../libraries/DarkEnergyPackedStruct.sol\";\n\n/**\n * @title  DarkEnergy\n * @author mouradif.eth\n * @notice Optimized ERC721 base for use with LazyLion's missing 80 Open\n *         Edition: DarkEnergy\n */\ncontract DarkEnergy is\n    OwnableAndAdministrable,\n    ReentrancyGuard,\n    IDarkEnergy\n{\n    string internal constant NAME = \"Glitchs Army: Dark Energy\";\n    string internal constant SYMBOL = \"DE\";\n    uint256 internal constant ENERGY_PER_MINT = 100;\n\n    using DarkEnergyPackedStruct for bytes32;\n    using DarkEnergyPackedStruct for DarkEnergyPackedStruct.GameRules;\n    using Strings for uint256;\n    using Strings for int256;\n    using UriEncode for string;\n\n    /// @notice Missing80 Ordinals Vouchers contract\n    address public ordinalsVouchers;\n\n    /// @notice Track the allowed SeaDrop addresses.\n    mapping(address => bool) internal _allowedSeaDrop;\n\n    /// @notice Track the enumerated allowed SeaDrop addresses.\n    address[] internal _enumeratedAllowedSeaDrop;\n\n    /// @notice Mapping from address to ownership details in binary format\n    ///\n    /// Bits Layout:\n    /// - [0]        bool   isHolder\n    /// - [1..40]    int40  energyAmount\n    /// - [41..56]   uint16 gamePasses\n    /// - [57..72]   uint16 mintCount\n    /// - [73..88]   uint16 mergeCount\n    /// - [89..104]  uint16 noRiskPlayCount\n    /// - [105..120] uint16 noRiskWinCount\n    /// - [121..136] uint16 highStakesPlayCount\n    /// - [137..152] uint16 highStakesWinCount\n    /// - [153..168] uint16 highStakesLossCount\n    /// - [169..200] uint32 totalEarned\n    /// - [201..232] uint32 totalRugged\n    /// - [233..255] 23bits unused\n    mapping(address => bytes32) internal _playerData;\n\n    /// @notice Game configuration\n    ///\n    /// @dev for the Odds:\n    ///              Each uint16 is a number that divided by 120_000\n    ///              returns the probability of an event to occur\n    /// Bits layout:\n    /// - [0]        bool isActive (bool)\n    /// - [1..16]    uint16 oddsNoRiskEarn100\n    /// - [17..32]   uint16 oddsNoRiskEarn300\n    /// - [33..48]   uint16 oddsNoRiskEarn500\n    /// - [49..64]   uint16 oddsHighStakesWinOrdinal\n    /// - [65..80]   uint16 oddsHighStakesLose100\n    /// - [81..96]   uint16 oddsHighStakesLose300\n    /// - [97..112]  uint16 oddsHighStakesLose500\n    /// - [113..128] uint16 oddsHighStakesLose1000\n    /// - [129..144] uint16 oddsHighStakesEarn100\n    /// - [145..160] uint16 oddsHighStakesEarn300\n    /// - [161..176] uint16 oddsHighStakesEarn500\n    /// - [177..192] uint16 oddsHighStakesEarn1000\n    /// - [193..208] uint16 oddsHighStakesDoubles\n    /// - [209..224] uint16 oddsHighStakesHalves\n    /// - [225..240] uint16 oddsGamePassOnMint\n    /// - [241..248] uint8  remainingOrdinals\n    /// - [249]      bool   flagA\n    /// - [250]      bool   flagB\n    /// - [251]      bool   flagC\n    /// - [252]      bool   flagD\n    /// - [253]      bool   flagE\n    /// - [254]      bool   flagF\n    /// - [255]      bool   flagG\n\n    bytes32 internal _gameRules =\n        0x0026ea60096009602ee03e805dc0bb802ee03e805dc0bb80003c096012c02ee1;\n\n    /// @notice The maximum supply\n    uint64 internal _maxSupply;\n\n    /// @notice The current circulating supply\n    uint64 internal _totalSupply;\n\n    /// @notice The current circulating energy\n    int256 internal _circulatingEnergy;\n\n    /// @notice Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\n\n    /// @notice Mapping from token ID to approved address.\n    mapping(uint256 => address) internal _tokenApprovals;\n\n    /// @notice Track the royalty info: address to receive royalties, and\n    ///         royalty basis points.\n    RoyaltyInfo _royaltyInfo;\n\n    /// @notice AllowList of marketplaces\n    mapping(address => bool) internal _allowedOperators;\n\n    /**\n     * @notice Deploy the token contract with its name and symbol.\n     */\n    constructor(address admin, address[] memory allowedSeaDrop) {\n        _setOwner(msg.sender);\n        _setRole(admin, 0, true);\n        // Put the length on the stack for more efficient access.\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\n\n        // Set the mapping for allowed SeaDrop contracts.\n        for (uint256 i = 0; i < allowedSeaDropLength; ) {\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\n            unchecked {\n                ++i;\n            }\n        }\n        GlitchGeneralMintSpots _ordinalsVouchers = new GlitchGeneralMintSpots();\n        ordinalsVouchers = address(_ordinalsVouchers);\n        _royaltyInfo.royaltyBps = 500;\n        _royaltyInfo.royaltyAddress = msg.sender;\n        emit SeaDropTokenDeployed();\n        emit OrdinalsVouchersDeployed(ordinalsVouchers);\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the total number of energy in circulation\n     */\n    function circulatingEnergy() external view returns (int256) {\n        return _circulatingEnergy;\n    }\n\n    /**\n     * @notice Returns the token collection name.\n     */\n    function name() external pure override returns (string memory) {\n        return NAME;\n    }\n\n    /**\n     * @notice Returns the token collection symbol.\n     */\n    function symbol() external pure override returns (string memory) {\n        return SYMBOL;\n    }\n\n    /**\n     * @notice Checks wether a token exists or not\n     */\n    function exists(uint256 tokenId) external view returns(bool) {\n        address potentialOwner = address(uint160(tokenId));\n        return _playerData[potentialOwner].isHolder();\n    }\n\n    /**\n     * @notice Returns the expected ball size in the SVG\n     */\n    function _getBallSize(uint32 x) internal pure returns (uint256) {\n        if (x < 150) return x;\n        if (x < 1000) return 150 + (x - 150) / 20;\n        if (x < 4000) return 193 + (x - 1000) / 30;\n        if (x < 10000) return 293 + (x - 4000) / 80;\n        if (x < 300000) return 368 + (x - 10000) / 2200;\n        return 500;\n    }\n\n    /**\n     * @notice Returns the expected center of the ball in the SVG\n     */\n    function _getCenter(uint256 x) internal pure returns (uint256) {\n        if (x < 150) return 1000 + x / 4;\n        if (x < 1000) return 1070 - x / 5;\n        if (x < 4000) return 870 - (x - 1000) / 20;\n        if (x < 9500) return 720 - (x - 4000) / 25;\n        return 500;\n    }\n\n    /**\n     * @notice Special metadata for dead tokens\n     */\n    function _deadToken() internal pure returns (string memory) {\n        string memory svgData = string(abi.encodePacked(\n                \"<svg viewBox='0 0 1e3 1e3' xmlns='http://www.w3.org/2000/svg'><style>svg{background:#000000}</style></svg>\"\n            ));\n        return string(\n            abi.encodePacked(\n                'data:application/json,{\"name\":\"Energy Waste\",\"image_data\":\"',\n                svgData,\n                '\",\"attributes\":[{\"trait_type\":\"energy\",\"value\":0},',\n                '{\"trait_type\":\"Game Passes\",\"value\":0},',\n                '{\"trait_type\":\"Burned\",\"value\":\"yes\"}',\n                ']}'\n            )\n        ).uriEncode();\n    }\n\n    /**\n     * @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        address potentialOwner = address(uint160(tokenId));\n        bytes32 data = _playerData[potentialOwner];\n        if (!data.isHolder()) {\n            return _deadToken();\n        }\n        int40 energy = data.getEnergy();\n        uint16 gamePasses = data.getGamePasses();\n        uint32 absEnergy = uint32(uint40(energy < 0 ? -energy : energy));\n        uint256 size = _getBallSize(absEnergy);\n        uint256 center = _getCenter(absEnergy);\n        bytes6 color = energy < 0 ? bytes6(bytes(\"B46278\")) : bytes6(bytes(\"5C6BBA\"));\n        bytes6 background = gamePasses == 0 ? bytes6(bytes(\"0B0B0B\")) : bytes6(bytes(\"1B309F\"));\n\n        string memory svgData = string(abi.encodePacked(\n            \"<svg viewBox='0 0 1e3 1e3' xmlns='http://www.w3.org/2000/svg'><defs><radialGradient id='a' cx='500' cy='\",\n            center.toString(),\n            \"' r='\",\n            size.toString(),\n            \"' gradientUnits='userSpaceOnUse'><stop stop-color='#fff' stop-opacity='.6' offset='.17'/><stop stop-color='#fff' stop-opacity='0' offset='1'/></radialGradient></defs><circle cx='500' cy='\",\n            center.toString(),\n            \"' r='\",\n            size.toString(),\n            \"' fill='#\",\n            color,\n            \"'/><circle id='cg' cx='500' cy='\",\n            center.toString(),\n            \"' r='\",\n            size.toString(),\n            \"' fill='url(#a)' opacity='0'/><style>svg{background:#\",\n            background,\n            \"}#cg{-webkit-animation:1.5s ease-in-out infinite alternate p;animation:1.5s ease-in-out infinite alternate p}@-webkit-keyframes p{to{opacity:1}}@keyframes p{to{opacity:1}}</style></svg>\"\n        ));\n\n        return string(\n            abi.encodePacked(\n                'data:application/json,{\"name\":\"Dark Energy: ',\n                int256(energy).toString(),\n                '\",\"image_data\":\"',\n                svgData,\n                '\",\"attributes\":[{\"trait_type\":\"Energy\",\"value\":\"',\n                int256(energy).toString(),\n                '\"},{\"trait_type\":\"Game Passes\",\"value\":\"',\n                uint256(gamePasses).toString(),\n                '\"}]}'\n            )\n        ).uriEncode();\n    }\n\n    /**\n     * @notice Returns the contract URI for contract metadata.\n     */\n    function contractURI() external view override returns (string memory) {\n        return string(\n            abi.encodePacked(\n                'data:application/json,{\"name\":\"',\n                NAME,\n                '\",\"totalSupply\":',\n                uint256(_totalSupply).toString(),\n                '}'\n            )\n        ).uriEncode();\n    }\n\n    /**\n     * @notice Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     */\n    function approve(address to, uint256 tokenId) external virtual override {\n        address _owner = ownerOf(tokenId);\n\n        if (msg.sender != _owner) {\n            if (!_operatorApprovals[_owner][msg.sender]) {\n                revert CallerNotOwnerNorApproved();\n            }\n        }\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(_owner, to, tokenId);\n    }\n\n    /**\n     * @notice Returns the account approved for `tokenId` token.\n     */\n    function getApproved(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        ownerOf(tokenId);\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @notice Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom}, {safeTransferFrom} or {approve}\n     * for any token owned by the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public virtual override {\n        if (!_allowedOperators[operator]) {\n            revert OperatorNotAllowed();\n        }\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        address potentialOwner = ownerOf(tokenId);\n\n        if (potentialOwner != from) revert TransferFromIncorrectOwner();\n        if (to == address(0)) revert QueryForZeroAddress();\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\n            revert CallerNotOwnerNorApproved();\n        if (from != msg.sender && !_allowedOperators[msg.sender])\n            revert OperatorNotAllowed();\n\n        bytes32 senderData = _playerData[from];\n        bytes32 recipientData = _playerData[to];\n        int40 senderEnergy = senderData.getEnergy();\n        int40 recipientEnergy = recipientData.getEnergy();\n        uint256 newTokenId = uint256(uint160(to));\n\n        emit Transfer(from, to, tokenId);\n\n        if (recipientData.isHolder()) {\n            if (senderEnergy < 0 && recipientEnergy >= 0)\n                revert NegativeEnergyToPositiveHolder();\n            recipientEnergy += senderEnergy;\n            uint256 realTotalGamePasses;\n            unchecked {\n                realTotalGamePasses = senderData.getGamePasses() +\n                recipientData.getGamePasses();\n            }\n            uint16 gamePasses = realTotalGamePasses > 0xFFFF\n            ? 0xFFFF\n            : uint16(realTotalGamePasses);\n            uint16 mergeCount = recipientData.getMergeCount();\n\n            recipientData = recipientData.setHolder(true);\n            recipientData = recipientData.setEnergy(recipientEnergy);\n            recipientData = recipientData.setGamePasses(gamePasses);\n            recipientData = recipientData.setMergeCount(mergeCount + 1);\n            unchecked {\n                _totalSupply--;\n            }\n        } else {\n            recipientData = recipientData.setHoldingData(senderData);\n            emit Transfer(address(0), to, newTokenId);\n        }\n        _playerData[from] = senderData.clearHoldingData();\n        _playerData[to] = recipientData;\n        _tokenApprovals[tokenId] = address(0);\n\n        // Burn of the sent token\n        emit Transfer(to, address(0), tokenId);\n        emit MetadataUpdate(tokenId);\n        emit MetadataUpdate(newTokenId);\n    }\n\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal {\n        _transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @notice Transfers `tokenId` from `from` to `to`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external override {\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @notice Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     */\n    function _mint(\n        address to,\n        uint16 quantity\n    ) internal virtual returns (uint256) {\n        uint256 tokenId = uint256(uint160(to));\n        bytes32 data = _playerData[to];\n        uint16 mintCount = data.getMintCount();\n        int40 energy = data.getEnergy();\n        unchecked {\n            energy += int40(uint40(quantity * ENERGY_PER_MINT));\n            mintCount += quantity;\n        }\n        uint16 gamePasses = 0;\n        bool isHolder = data.isHolder();\n        if (quantity >= 4) {\n            unchecked { gamePasses = uint16(quantity / 4); }\n        }\n        uint8 remainder = uint8(quantity % 4);\n        for (uint256 i = 0; i < remainder;) {\n            uint256 base;\n            unchecked {\n                base = block.prevrandao - i;\n                ++i;\n            }\n\n            uint256 n = uint256(keccak256(abi.encode(base))) % 120000;\n            if (n < _gameRules.getUint16(225)) {\n                unchecked { gamePasses++; }\n            }\n        }\n        if (isHolder) {\n            uint16 mergeCount = data.getMergeCount();\n            data = data.setMergeCount(mergeCount + 1);\n        } else {\n            unchecked { _totalSupply++; }\n            if (_totalSupply > _maxSupply) {\n                revert MaxSupplyExceeded();\n            }\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        data = data.setHolder(true);\n        data = data.setEnergy(energy);\n        data = data.setGamePasses(gamePasses + data.getGamePasses());\n        data = data.setMintCount(mintCount);\n        _playerData[to] = data;\n        unchecked { _circulatingEnergy += int256(ENERGY_PER_MINT * quantity); }\n        emit GlitchMint(to, quantity * ENERGY_PER_MINT, gamePasses);\n        emit MetadataUpdate(tokenId);\n        return isHolder ? 0 : tokenId;\n    }\n\n    function _noRiskEarn(int40 amount, bytes32 data) internal {\n        _circulatingEnergy += amount;\n        uint256 tokenId = uint256(uint160(msg.sender));\n        int40 energy = data.getEnergy();\n        uint16 winCount = data.getNoRiskWinCount();\n        uint32 totalEarned = data.getTotalEarned();\n        data = data.setEnergy(energy + amount);\n        data = data.setNoRiskWinCount(winCount + 1);\n        data = data.setTotalEarned(totalEarned + uint32(uint40(amount)));\n        _playerData[msg.sender] = data;\n        emit EnergyUpdate(msg.sender, int40(amount));\n        emit MetadataUpdate(tokenId);\n    }\n\n    function _winOrdinal(address winner, bytes32 data) internal {\n        uint256 tokenId = uint256(uint160(winner));\n        int40 energy = data.getEnergy();\n        _circulatingEnergy -= energy;\n        data = data.setEnergy(int40(0));\n        _playerData[winner] = data;\n\n        GlitchGeneralMintSpots vouchers = GlitchGeneralMintSpots(ordinalsVouchers);\n        uint256 voucherId = vouchers.nextId();\n        if (energy < 0) {\n            energy = -energy;\n        }\n        uint256 ballSize = _getBallSize(uint32(uint40(energy)));\n        vouchers.adminMint(winner, voucherId, ballSize);\n\n        emit MetadataUpdate(tokenId);\n        emit OrdinalWon(winner);\n    }\n\n    function _highStakesResult(int40 result, bytes32 data) internal {\n        _circulatingEnergy += result;\n        uint256 tokenId = uint256(uint160(msg.sender));\n        emit EnergyUpdate(msg.sender, result);\n        data = data.setEnergy(data.getEnergy() + result);\n        if (result < 0) {\n            result = -result;\n            data = data.setHighStakesLossCount(\n                data.getHighStakesLossCount() + 1\n            );\n            data = data.setTotalRugged(\n                data.getTotalRugged() + uint32(uint40(result))\n            );\n        } else {\n            data = data.setHighStakesWinCount(\n                data.getHighStakesWinCount() + 1\n            );\n            data = data.setTotalEarned(\n                data.getTotalEarned() + uint32(uint40(result))\n            );\n        }\n        _playerData[msg.sender] = data;\n        emit MetadataUpdate(tokenId);\n    }\n\n    function playNoRisk() external {\n        if (!_gameRules.getBool(0)) {\n            revert GameNotActive();\n        }\n        emit PlayNoRisk(msg.sender);\n        bytes32 data = _playerData[msg.sender];\n        uint16 gamePasses = data.getGamePasses();\n        if (gamePasses == 0) {\n            revert NoGamePass();\n        }\n        data = data.setNoRiskPlayCount(data.getNoRiskPlayCount() + 1);\n        data = data.setGamePasses(gamePasses - 1);\n        bytes32 rules = _gameRules;\n\n        uint256 randomNumber = uint256(\n            keccak256(abi.encode(block.prevrandao))\n        ) % 120000;\n        uint32 treshold = rules.getUint16(1);\n        if (randomNumber < treshold) {\n            _noRiskEarn(100, data);\n            return;\n        }\n        treshold += rules.getUint16(17);\n        if (randomNumber < treshold) {\n            _noRiskEarn(300, data);\n            return;\n        }\n        treshold += rules.getUint16(33);\n        if (randomNumber < treshold) {\n            _noRiskEarn(500, data);\n            return;\n        }\n        _playerData[msg.sender] = data;\n        emit MetadataUpdate(uint256(uint160(msg.sender)));\n    }\n\n    function playHighStakes() external {\n        if (!_gameRules.getBool(0)) {\n            revert GameNotActive();\n        }\n        emit PlayHighStakes(msg.sender);\n        bytes32 data = _playerData[msg.sender];\n        uint16 gamePasses = data.getGamePasses();\n        if (gamePasses == 0) {\n            revert NoGamePass();\n        }\n        data = data.setHighStakesPlayCount(data.getHighStakesPlayCount() + 1);\n        data = data.setGamePasses(gamePasses - 1);\n        bytes32 rules = _gameRules;\n        uint256 randomNumber = uint256(\n            keccak256(abi.encode(block.prevrandao))\n        ) % 120000;\n        uint32 treshold = uint32(rules.getUint16(49)) * uint32(rules.getUint8(241));\n        if (randomNumber < treshold) {\n            _gameRules = _gameRules.setUint8(241, _gameRules.getUint8(241) - 1);\n            return _winOrdinal(msg.sender, data);\n        }\n        treshold = rules.getUint16(65);\n        if (randomNumber < treshold) {\n            return _highStakesResult(-100, data);\n        }\n        treshold += rules.getUint16(81);\n        if (randomNumber < treshold) {\n            return _highStakesResult(-300, data);\n        }\n        treshold += rules.getUint16(97);\n        if (randomNumber < treshold) {\n            return _highStakesResult(-500, data);\n        }\n        treshold += rules.getUint16(113);\n        if (randomNumber < treshold) {\n            return _highStakesResult(-1000, data);\n        }\n        treshold += rules.getUint16(129);\n        if (randomNumber < treshold) {\n            return _highStakesResult(100, data);\n        }\n        treshold += rules.getUint16(145);\n        if (randomNumber < treshold) {\n            return _highStakesResult(300, data);\n        }\n        treshold += rules.getUint16(161);\n        if (randomNumber < treshold) {\n            return _highStakesResult(500, data);\n        }\n        treshold += rules.getUint16(177);\n        if (randomNumber < treshold) {\n            return _highStakesResult(1000, data);\n        }\n        int40 energy = data.getEnergy();\n        uint256 tokenId = uint256(uint160(msg.sender));\n        treshold += rules.getUint16(193);\n        if (randomNumber < treshold && energy != 0) {\n            emit EnergyDoubled(msg.sender, energy);\n            return _highStakesResult(energy, data);\n        }\n        treshold += rules.getUint16(209);\n        if (randomNumber < treshold && energy != 0) {\n            emit EnergyHalved(msg.sender, energy);\n            int40 diff = energy / 2;\n            return _highStakesResult(-diff, data);\n        }\n        _playerData[msg.sender] = data;\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n        IERC721Receiver(to).onERC721Received(\n            msg.sender,\n            from,\n            tokenId,\n            _data\n        )\n        returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n            assembly {\n                revert(add(32, reason), mload(reason))\n            }\n        }\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        uint256 tokenId = _mint(to, uint16(quantity));\n        if (tokenId == 0) {\n            return;\n        }\n\n        unchecked {\n            if (to.code.length != 0) {\n                if (\n                    !_checkContractOnERC721Received(\n                    address(0),\n                    to,\n                    tokenId,\n                    _data\n                )\n                ) {\n                    revert TransferToNonERC721ReceiverImplementer();\n                }\n            }\n        }\n    }\n\n    function _onlyAllowedSeaDrop(address seaDrop) internal view {\n        if (!_allowedSeaDrop[seaDrop]) {\n            revert OnlyAllowedSeaDrop();\n        }\n    }\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     */\n    function mintSeaDrop(\n        address minter,\n        uint256 quantity\n    ) external override nonReentrant {\n        _onlyAllowedSeaDrop(msg.sender);\n        _safeMint(minter, quantity, \"\");\n    }\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     */\n    function adminMint(\n        address minter,\n        int40 energy,\n        uint16 gamePasses\n    ) external nonReentrant {\n        _checkRoleOrOwner(msg.sender, 1);\n        _safeMint(minter, 0, \"\");\n        bytes32 data = _playerData[minter];\n        emit AdminMint(minter, energy - data.getEnergy(), gamePasses - data.getGamePasses());\n        _circulatingEnergy += energy - data.getEnergy();\n        data = data.setEnergy(energy);\n        data = data.setGamePasses(gamePasses);\n        _playerData[minter] = data;\n    }\n\n    /**\n     * @notice Admin function to distribute rewards to the raffle winners\n     */\n    function raffleReward(address winner) external nonReentrant {\n        _checkRoleOrOwner(msg.sender, 1);\n        bytes32 data = _playerData[winner];\n        if (!data.isHolder()) {\n            revert AddressNotHolder();\n        }\n        _winOrdinal(winner, data);\n    }\n\n    /**\n     * @notice Sets the address and basis points for royalties.\n     *\n     * @param newInfo The struct to configure royalties.\n     */\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external {\n        // Ensure the sender is only the owner or contract itself.\n        _checkRoleOrOwner(msg.sender, 1);\n\n        // Revert if the new royalty address is the zero address.\n        if (newInfo.royaltyAddress == address(0)) {\n            revert RoyaltyAddressCannotBeZeroAddress();\n        }\n\n        // Revert if the new basis points is greater than 10_000.\n        if (newInfo.royaltyBps > 10_000) {\n            revert InvalidRoyaltyBasisPoints(newInfo.royaltyBps);\n        }\n\n        // Set the new royalty info.\n        _royaltyInfo = newInfo;\n\n        // Emit an event with the updated params.\n        emit RoyaltyInfoUpdated(newInfo.royaltyAddress, newInfo.royaltyBps);\n    }\n\n    /**\n     * @notice Returns the address that receives royalties.\n     */\n    function royaltyAddress() external view returns (address) {\n        return _royaltyInfo.royaltyAddress;\n    }\n\n    /**\n     * @notice Returns the royalty basis points out of 10_000.\n     */\n    function royaltyBasisPoints() external view returns (uint256) {\n        return _royaltyInfo.royaltyBps;\n    }\n\n    /**\n     * @notice Called with the sale price to determine how much royalty\n     *         is owed and to whom.\n     *\n     * @return receiver      Address of who should be sent the royalty payment.\n     * @return royaltyAmount The royalty payment amount for _salePrice.\n     */\n    function royaltyInfo(\n        uint256,\n        uint256 _salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount) {\n        royaltyAmount = (_salePrice * _royaltyInfo.royaltyBps) / 10_000;\n        receiver = _royaltyInfo.royaltyAddress;\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        address potentialOwner = address(uint160(tokenId));\n        return _playerData[potentialOwner].isHolder();\n    }\n\n    /**\n     * @dev Returns whether `address` is approved for transfering `tokenId`\n     */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view returns (bool) {\n        address potentialOwner = ownerOf(tokenId);\n        if (spender == potentialOwner) return true;\n        return spender == _tokenApprovals[tokenId] ||\n        _operatorApprovals[potentialOwner][spender];\n    }\n\n    /**\n     * @notice Returns whether the interface is supported.\n     *\n     * @param interfaceId The interface id to check against.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IDarkEnergy) returns (bool) {\n        return\n        interfaceId == 0x01ffc9a7 || // ER165\n        interfaceId == 0x80ac58cd || // ERC721\n        interfaceId == 0x5b5e139f || // ERC721-Metadata\n        interfaceId == 0x2a55205a || // ERC2981\n        interfaceId == 0x49064906 || // ERC4906\n        interfaceId == type(INonFungibleSeaDropToken).interfaceId ||\n        interfaceId == type(ISeaDropTokenContractMetadata).interfaceId;\n    }\n\n    // =============================================================\n    //                      Game configuration\n    // =============================================================\n\n    function _checkNoRiskOdds(\n        uint16 earn1,\n        uint16 earn3,\n        uint16 earn5\n    ) internal pure {\n        uint256 total = earn1 + earn3 + earn5;\n        if (total > 120000) {\n            revert InvalidGameRules();\n        }\n    }\n\n    function _checkHighStakesOdds(\n        uint16 lose1,\n        uint16 lose3,\n        uint16 lose5,\n        uint16 lose10,\n        uint16 earn1,\n        uint16 earn3,\n        uint16 earn5,\n        uint16 earn10,\n        uint16 double,\n        uint16 halve\n    ) internal pure {\n        uint256 total = lose1 + lose3 + lose5;\n        total = total + lose10 + earn1;\n        total = total + earn3 + earn5;\n        total = total + earn10 + double + halve;\n        if (total > 120000) {\n            revert InvalidGameRules();\n        }\n    }\n\n    function _checkOrdinalsRules(\n        uint16 odds,\n        uint8 amount\n    ) internal pure {\n        uint256 total = uint256(odds) * uint256(amount);\n        if (total > 120000) {\n            revert InvalidGameRules();\n        }\n    }\n\n    function setRules(\n        DarkEnergyPackedStruct.GameRules calldata config\n    ) external {\n        _checkRoleOrOwner(msg.sender, 1);\n        _checkNoRiskOdds(\n            config.oddsNoRiskEarn100,\n            config.oddsNoRiskEarn300,\n            config.oddsNoRiskEarn500\n        );\n        _checkHighStakesOdds(\n            config.oddsHighStakesLose100,\n            config.oddsHighStakesLose300,\n            config.oddsHighStakesLose500,\n            config.oddsHighStakesLose1000,\n            config.oddsHighStakesEarn100,\n            config.oddsHighStakesEarn300,\n            config.oddsHighStakesEarn500,\n            config.oddsHighStakesEarn1000,\n            config.oddsHighStakesDoubles,\n            config.oddsHighStakesHalves\n        );\n        _checkOrdinalsRules(\n            config.oddsHighStakesWinOrdinal,\n            config.remainingOrdinals\n        );\n        bytes32 newRules = config.packGameRules();\n        emit GameRulesUpdated(_gameRules, newRules);\n        _gameRules = newRules;\n    }\n\n    function gameRules()\n    external\n    view\n    returns (DarkEnergyPackedStruct.GameRules memory) {\n        return _gameRules.gameRules();\n    }\n\n    // =============================================================\n    //                  Administrative functions\n    // =============================================================\n\n    /**\n     * @notice Sets the max token supply and emits an event.\n     *\n     * @param operator   The operator account or contract address\n     * @param status        The status (true = approved, false = denied)\n     */\n    function setOperatorStatus(address operator, bool status) external {\n        _checkRoleOrOwner(msg.sender, 1);\n        _allowedOperators[operator] = status;\n    }\n\n    /**\n     * @notice Sets the max token supply and emits an event.\n     *\n     * @param newMaxSupply The new max supply to set.\n     */\n    function setMaxSupply(uint256 newMaxSupply) external {\n        _checkRoleOrOwner(msg.sender, 1);\n        uint64 supply = uint64(newMaxSupply);\n        if (supply < _totalSupply) {\n            supply = _totalSupply;\n        }\n        _maxSupply = supply;\n        emit MaxSupplyUpdated(supply);\n    }\n\n    /**\n     * @notice Internal function to update the allowed SeaDrop contracts.\n     *\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\n     */\n    function _updateAllowedSeaDrop(address[] calldata allowedSeaDrop) internal {\n        // Put the length on the stack for more efficient access.\n        uint256 enumeratedAllowedSeaDropLength = _enumeratedAllowedSeaDrop\n        .length;\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\n\n        // Reset the old mapping.\n        for (uint256 i = 0; i < enumeratedAllowedSeaDropLength; ) {\n            _allowedSeaDrop[_enumeratedAllowedSeaDrop[i]] = false;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Set the new mapping for allowed SeaDrop contracts.\n        for (uint256 i = 0; i < allowedSeaDropLength; ) {\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Set the enumeration.\n        _enumeratedAllowedSeaDrop = allowedSeaDrop;\n\n        // Emit an event for the update.\n        emit AllowedSeaDropUpdated(allowedSeaDrop);\n    }\n\n\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external {\n        _checkRoleOrOwner(msg.sender, 0);\n\n        _updateAllowedSeaDrop(allowedSeaDrop);\n    }\n\n    function updateCreatorPayoutAddress(\n        address seaDrop,\n        address creator\n    ) external {\n        _checkRoleOrOwner(msg.sender, 1);\n        _onlyAllowedSeaDrop(seaDrop);\n        ISeaDrop(seaDrop).updateCreatorPayoutAddress(creator);\n    }\n\n    function updatePublicDrop(\n        address seaDrop,\n        PublicDrop memory dropData\n    ) external {\n        _checkRoleOrOwner(msg.sender, 0);\n        _onlyAllowedSeaDrop(seaDrop);\n        PublicDrop memory r = ISeaDrop(seaDrop).getPublicDrop(address(this));\n        if (!_hasRole(msg.sender, 0)) {\n            if (r.maxTotalMintableByWallet == 0) {\n                revert AdministratorMustInitializeWithFee();\n            }\n            dropData.feeBps = r.feeBps;\n            dropData.restrictFeeRecipients = true;\n        } else {\n            uint256 maxTotalMintableByWallet = r.maxTotalMintableByWallet;\n            r.maxTotalMintableByWallet = maxTotalMintableByWallet > 0 ?\n                uint16(maxTotalMintableByWallet) :\n                1;\n            r.feeBps = dropData.feeBps;\n            r.restrictFeeRecipients = true;\n            dropData = r;\n        }\n        ISeaDrop(seaDrop).updatePublicDrop(dropData);\n    }\n\n    /**\n     * @notice Update the drop URI for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param dropURI     The new drop URI.\n     */\n    function updateDropURI(address seaDropImpl, string calldata dropURI)\n        external\n        virtual\n        override\n    {\n        _checkRoleOrOwner(msg.sender, 0);\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the drop URI.\n        ISeaDrop(seaDropImpl).updateDropURI(dropURI);\n    }\n\n    /**\n     * @notice Update the allow list data for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(\n        address seaDropImpl,\n        AllowListData calldata allowListData\n    ) external virtual override {\n        _checkRoleOrOwner(msg.sender, 0);\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the allow list on SeaDrop.\n        ISeaDrop(seaDropImpl).updateAllowList(allowListData);\n    }\n\n    /**\n     * @notice Update the allowed fee recipient for this nft contract\n     *         on SeaDrop.\n     *         Only the administrator can set the allowed fee recipient.\n     *\n     * @param seaDrop      The allowed SeaDrop contract.\n     * @param feeRecipient The new fee recipient.\n     * @param status       If the fee recipient is allowed.\n     */\n    function updateAllowedFeeRecipient(\n        address seaDrop,\n        address feeRecipient,\n        bool status\n    ) external {\n        _checkRole(msg.sender, 0);\n        _onlyAllowedSeaDrop(seaDrop);\n        ISeaDrop(seaDrop).updateAllowedFeeRecipient(feeRecipient, status);\n    }\n\n    /**\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param payer       The payer to update.\n     * @param allowed     Whether the payer is allowed.\n     */\n    function updatePayer(\n        address seaDropImpl,\n        address payer,\n        bool allowed\n    ) external virtual override {\n        _checkRoleOrOwner(msg.sender, 0);\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the payer.\n        ISeaDrop(seaDropImpl).updatePayer(payer, allowed);\n    }\n\n    /**\n     * @notice Configure multiple properties at a time.\n     *\n     *         Note: The individual configure methods should be used\n     *         to unset or reset any properties to zero, as this method\n     *         will ignore zero-value properties in the config struct.\n     *\n     * @param config The configuration struct.\n     */\n    function multiConfigure(MultiConfigureStruct calldata config)\n    external\n    {\n        _checkRoleOrOwner(msg.sender, 1);\n        if (config.maxSupply > 0) {\n            this.setMaxSupply(config.maxSupply);\n        }\n        if (\n            config.publicDrop.startTime != 0 ||\n            config.publicDrop.endTime != 0\n        ) {\n            this.updatePublicDrop(config.seaDropImpl, config.publicDrop);\n        }\n        if (bytes(config.dropURI).length != 0) {\n            this.updateDropURI(config.seaDropImpl, config.dropURI);\n        }\n        if (config.allowListData.merkleRoot != bytes32(0)) {\n            this.updateAllowList(config.seaDropImpl, config.allowListData);\n        }\n        if (config.creatorPayoutAddress != address(0)) {\n            this.updateCreatorPayoutAddress(\n                config.seaDropImpl,\n                config.creatorPayoutAddress\n            );\n        }\n        if (config.allowedFeeRecipients.length > 0) {\n            for (uint256 i = 0; i < config.allowedFeeRecipients.length; ) {\n                this.updateAllowedFeeRecipient(\n                    config.seaDropImpl,\n                    config.allowedFeeRecipients[i],\n                    true\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedFeeRecipients.length > 0) {\n            for (uint256 i = 0; i < config.disallowedFeeRecipients.length; ) {\n                this.updateAllowedFeeRecipient(\n                    config.seaDropImpl,\n                    config.disallowedFeeRecipients[i],\n                    false\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.allowedPayers.length > 0) {\n            for (uint256 i = 0; i < config.allowedPayers.length; ) {\n                this.updatePayer(\n                    config.seaDropImpl,\n                    config.allowedPayers[i],\n                    true\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedPayers.length > 0) {\n            for (uint256 i = 0; i < config.disallowedPayers.length; ) {\n                this.updatePayer(\n                    config.seaDropImpl,\n                    config.disallowedPayers[i],\n                    false\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //   No-op or low-op functions to ensure compatibility\n    // =============================================================\n\n    function setBaseURI(string calldata) external override {}\n\n    function setContractURI(string calldata) external override {}\n\n\n    function setProvenanceHash(bytes32) external {}\n\n    function updateSignedMintValidationParams(\n        address,\n        address,\n        SignedMintValidationParams memory\n    ) external {}\n\n    function updateTokenGatedDrop(\n        address,\n        address,\n        TokenGatedDropStage calldata\n    ) external {}\n\n    function baseURI() external pure override returns (string memory) {\n        return \"\";\n    }\n\n    // =============================================================\n    //        NFT and Game stats\n    // =============================================================\n\n\n    function maxSupply() external view returns (uint256) {\n        return _maxSupply;\n    }\n\n    function provenanceHash() external pure override returns (bytes32) {\n        return bytes32(0);\n    }\n\n    function getMintStats(\n        address minter\n    ) external view returns (uint256, uint256, uint256) {\n        bytes32 data = _playerData[minter];\n        return (\n        uint256(data.getMintCount()),\n        _totalSupply,\n        _maxSupply\n        );\n    }\n\n    /**\n     * @notice Returns the address that owns the given token.\n     *\n     * @dev The tokenId is the numeric representation of the owner's address.\n     *      If that address holds a token, its last bit will be 1 and we can\n     *      return the address representation of the tokenId. If not, then\n     *      the token doesn't exist.\n     */\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        address potentialOwner = address(uint160(tokenId));\n        if (!_playerData[potentialOwner].isHolder()) {\n            revert QueryForNonExistentToken();\n        }\n        return potentialOwner;\n    }\n\n    /**\n     * @notice Returns the number of tokens in `owner`'s account.\n     *\n     * @dev An address may have at most one token. If the data of an\n            address has 1 as a last bit, then that address has a token.\n     */\n    function balanceOf(address _owner) public view override returns (uint256) {\n        if (_owner == address(0)) {\n            revert QueryForZeroAddress();\n        }\n        bool isHolder = _playerData[_owner].isHolder();\n        if (isHolder) {\n            return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Returns the amount of energy in a given tokenId\n     */\n    function playerData(\n        address player\n    ) external view returns (DarkEnergyPackedStruct.PlayerData memory) {\n        return _playerData[player].playerData();\n    }\n}\n"
36     },
37     "contracts/ERC721.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../libraries/Strings.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n        interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
39     },
40     "contracts/GlitchGeneralMintSpots.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ERC721.sol\";\nimport \"../util/OwnableAndAdministrable.sol\";\nimport \"../libraries/UriEncode.sol\";\n\ncontract GlitchGeneralMintSpots is ERC721, OwnableAndAdministrable {\n  using Strings for uint256;\n  using UriEncode for string;\n\n  /**\n   * @dev Revert if the royalty basis points is greater than 10_000.\n     */\n  error InvalidRoyaltyBasisPoints(uint256 basisPoints);\n\n  /**\n   * @dev Revert if the royalty address is being set to the zero address.\n     */\n  error RoyaltyAddressCannotBeZeroAddress();\n\n  /**\n   * @dev Emit an event when the royalties info is updated.\n   */\n  event RoyaltyInfoUpdated(address receiver, uint256 bps);\n\n  /**\n   * @notice A struct defining royalty info for the contract.\n   */\n  struct RoyaltyInfo {\n    address royaltyAddress;\n    uint96 royaltyBps;\n  }\n\n  /// @notice Track the royalty info: address to receive royalties, and\n  ///         royalty basis points.\n  RoyaltyInfo _royaltyInfo;\n\n  uint256 private _tokenIdCounter = 1;\n  mapping(uint256 => uint256) private _tokenSize;\n\n  event MetadataUpdate(uint256 _tokenId);\n\n  address public darkEnergyContract;\n\n  constructor() ERC721(\"Glitchs Army: The Generals mint spot\", \"GMS\") {\n    _setOwner(tx.origin);\n    _setRole(tx.origin, 0, true);\n    _setRole(msg.sender, 0, true);\n    _royaltyInfo.royaltyBps = 500;\n    _royaltyInfo.royaltyAddress = tx.origin;\n    darkEnergyContract = msg.sender;\n  }\n\n  /**\n   * @notice Returns whether the interface is supported.\n   *\n   * @param interfaceId The interface id to check against.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(ERC721) returns (bool) {\n    return\n    interfaceId == 0x01ffc9a7 || // ER165\n    interfaceId == 0x80ac58cd || // ERC721\n    interfaceId == 0x5b5e139f || // ERC721-Metadata\n    interfaceId == 0x2a55205a;   // ERC2981\n  }\n\n  /**\n   * @notice Sets the address and basis points for royalties.\n   *\n   * @param newInfo The struct to configure royalties.\n   */\n  function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external {\n    // Ensure the sender is only the owner or contract itself.\n    _checkRoleOrOwner(msg.sender, 1);\n\n    // Revert if the new royalty address is the zero address.\n    if (newInfo.royaltyAddress == address(0)) {\n      revert RoyaltyAddressCannotBeZeroAddress();\n    }\n\n    // Revert if the new basis points is greater than 10_000.\n    if (newInfo.royaltyBps > 10_000) {\n      revert InvalidRoyaltyBasisPoints(newInfo.royaltyBps);\n    }\n\n    // Set the new royalty info.\n    _royaltyInfo = newInfo;\n\n    // Emit an event with the updated params.\n    emit RoyaltyInfoUpdated(newInfo.royaltyAddress, newInfo.royaltyBps);\n  }\n\n  /**\n   * @notice Returns the address that receives royalties.\n   */\n  function royaltyAddress() external view returns (address) {\n    return _royaltyInfo.royaltyAddress;\n  }\n\n  /**\n   * @notice Returns the royalty basis points out of 10_000.\n   */\n  function royaltyBasisPoints() external view returns (uint256) {\n    return _royaltyInfo.royaltyBps;\n  }\n\n  /**\n   * @notice Called with the sale price to determine how much royalty\n   *         is owed and to whom.\n   *\n   * @return receiver      Address of who should be sent the royalty payment.\n   * @return royaltyAmount The royalty payment amount for _salePrice.\n   */\n  function royaltyInfo(\n    uint256,\n    uint256 _salePrice\n  ) external view returns (address receiver, uint256 royaltyAmount) {\n    royaltyAmount = (_salePrice * _royaltyInfo.royaltyBps) / 10_000;\n    receiver = _royaltyInfo.royaltyAddress;\n  }\n\n  function adminMint(address to, uint256 tokenId, uint256 size) external {\n    _checkRoleOrOwner(msg.sender, 0);\n    if(tokenId == _tokenIdCounter) {\n      _tokenIdCounter++;\n    }\n    _tokenSize[tokenId] = size;\n    _safeMint(to, tokenId);\n  }\n\n  function adminBurn(uint256 tokenId) external {\n    _checkRoleOrOwner(msg.sender, 0);\n    _burn(tokenId);\n  }\n\n  function adminSetTokenSize(uint256 tokenId, uint256 size) external {\n    _checkRoleOrOwner(msg.sender, 0);\n    _requireMinted(tokenId);\n    _tokenSize[tokenId] = size;\n    emit MetadataUpdate(tokenId);\n  }\n\n  function nextId() external view returns(uint256) {\n    return _tokenIdCounter;\n  }\n\n  function tokenURI(uint256 tokenId) public view override returns(string memory) {\n    _requireMinted(tokenId);\n    uint256 size = _tokenSize[tokenId];\n    uint256 center = 500;\n    bytes6 color = bytes6(bytes(\"DDC159\"));\n    bytes6 background = bytes6(bytes(\"0B0B0B\"));\n\n    string memory svgData = string(abi.encodePacked(\n        \"<svg viewBox='0 0 1e3 1e3' xmlns='http://www.w3.org/2000/svg'><defs><radialGradient id='a' cx='500' cy='\",\n        center.toString(),\n        \"' r='\",\n        size.toString(),\n        \"' gradientUnits='userSpaceOnUse'><stop stop-color='#fff' stop-opacity='.6' offset='.17'/><stop stop-color='#fff' stop-opacity='0' offset='1'/></radialGradient></defs><circle cx='500' cy='\",\n        center.toString(),\n        \"' r='\",\n        size.toString(),\n        \"' fill='#\",\n        color,\n        \"'/><circle id='cg' cx='500' cy='\",\n        center.toString(),\n        \"' r='\",\n        size.toString(),\n        \"' fill='url(#a)' opacity='0'/><style>svg{background:#\",\n        background,\n        \"}#cg{-webkit-animation:1.5s ease-in-out infinite alternate p;animation:1.5s ease-in-out infinite alternate p}@-webkit-keyframes p{to{opacity:1}}@keyframes p{to{opacity:1}}</style></svg>\"\n      ));\n\n    return string(\n      abi.encodePacked(\n        'data:application/json,{\"name\":\"Glitch\\'s Army: The Generals mint spot #',\n        tokenId.toString(),\n        '\",\"image_data\":\"',\n        svgData,\n        '\"}'\n      )\n    ).uriEncode();\n  }\n\n  function contractURI() external pure returns(string memory) {\n    return string(abi.encodePacked(\n      'data:application/json,{\"name\": \"Glitch\\'s Army: The Generals mint spot\"}'\n    )).uriEncode();\n  }\n}\n"
42     },
43     "contracts/lib/SeaDropErrorsAndEvents.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport { PublicDrop, TokenGatedDropStage, SignedMintValidationParams } from \"./SeaDropStructs.sol\";\n\ninterface SeaDropErrorsAndEvents {\n    /**\n     * @dev Revert with an error if the drop stage is not active.\n     */\n    error NotActive(\n        uint256 currentTimestamp,\n        uint256 startTimestamp,\n        uint256 endTimestamp\n    );\n\n    /**\n     * @dev Revert with an error if the mint quantity is zero.\n     */\n    error MintQuantityCannotBeZero();\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max allowed\n     *      to be minted per wallet.\n     */\n    error MintQuantityExceedsMaxMintedPerWallet(uint256 total, uint256 allowed);\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max token\n     *      supply.\n     */\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max token\n     *      supply for the stage.\n     *      Note: The `maxTokenSupplyForStage` for public mint is\n     *      always `type(uint).max`.\n     */\n    error MintQuantityExceedsMaxTokenSupplyForStage(\n        uint256 total,\n        uint256 maxTokenSupplyForStage\n    );\n\n    /**\n     * @dev Revert if the fee recipient is the zero address.\n     */\n    error FeeRecipientCannotBeZeroAddress();\n\n    /**\n     * @dev Revert if the fee recipient is not already included.\n     */\n    error FeeRecipientNotPresent();\n\n    /**\n     * @dev Revert if the fee basis points is greater than 10_000.\n     */\n    error InvalidFeeBps(uint256 feeBps);\n\n    /**\n     * @dev Revert if the fee recipient is already included.\n     */\n    error DuplicateFeeRecipient();\n\n    /**\n     * @dev Revert if the fee recipient is restricted and not allowed.\n     */\n    error FeeRecipientNotAllowed();\n\n    /**\n     * @dev Revert if the creator payout address is the zero address.\n     */\n    error CreatorPayoutAddressCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if the received payment is incorrect.\n     */\n    error IncorrectPayment(uint256 got, uint256 want);\n\n    /**\n     * @dev Revert with an error if the allow list proof is invalid.\n     */\n    error InvalidProof();\n\n    /**\n     * @dev Revert if a supplied signer address is the zero address.\n     */\n    error SignerCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if signer's signature is invalid.\n     */\n    error InvalidSignature(address recoveredSigner);\n\n    /**\n     * @dev Revert with an error if a signer is not included in\n     *      the enumeration when removing.\n     */\n    error SignerNotPresent();\n\n    /**\n     * @dev Revert with an error if a payer is not included in\n     *      the enumeration when removing.\n     */\n    error PayerNotPresent();\n\n    /**\n     * @dev Revert with an error if a payer is already included in mapping\n     *      when adding.\n     *      Note: only applies when adding a single payer, as duplicates in\n     *      enumeration can be removed with updatePayer.\n     */\n    error DuplicatePayer();\n\n    /**\n     * @dev Revert with an error if the payer is not allowed. The minter must\n     *      pay for their own mint.\n     */\n    error PayerNotAllowed();\n\n    /**\n     * @dev Revert if a supplied payer address is the zero address.\n     */\n    error PayerCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if the sender does not\n     *      match the INonFungibleSeaDropToken interface.\n     */\n    error OnlyINonFungibleSeaDropToken(address sender);\n\n    /**\n     * @dev Revert with an error if the sender of a token gated supplied\n     *      drop stage redeem is not the owner of the token.\n     */\n    error TokenGatedNotTokenOwner(\n        address nftContract,\n        address allowedNftToken,\n        uint256 allowedNftTokenId\n    );\n\n    /**\n     * @dev Revert with an error if the token id has already been used to\n     *      redeem a token gated drop stage.\n     */\n    error TokenGatedTokenIdAlreadyRedeemed(\n        address nftContract,\n        address allowedNftToken,\n        uint256 allowedNftTokenId\n    );\n\n    /**\n     * @dev Revert with an error if an empty TokenGatedDropStage is provided\n     *      for an already-empty TokenGatedDropStage.\n     */\n     error TokenGatedDropStageNotPresent();\n\n    /**\n     * @dev Revert with an error if an allowedNftToken is set to\n     *      the zero address.\n     */\n     error TokenGatedDropAllowedNftTokenCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if an allowedNftToken is set to\n     *      the drop token itself.\n     */\n     error TokenGatedDropAllowedNftTokenCannotBeDropToken();\n\n\n    /**\n     * @dev Revert with an error if supplied signed mint price is less than\n     *      the minimum specified.\n     */\n    error InvalidSignedMintPrice(uint256 got, uint256 minimum);\n\n    /**\n     * @dev Revert with an error if supplied signed maxTotalMintableByWallet\n     *      is greater than the maximum specified.\n     */\n    error InvalidSignedMaxTotalMintableByWallet(uint256 got, uint256 maximum);\n\n    /**\n     * @dev Revert with an error if supplied signed start time is less than\n     *      the minimum specified.\n     */\n    error InvalidSignedStartTime(uint256 got, uint256 minimum);\n\n    /**\n     * @dev Revert with an error if supplied signed end time is greater than\n     *      the maximum specified.\n     */\n    error InvalidSignedEndTime(uint256 got, uint256 maximum);\n\n    /**\n     * @dev Revert with an error if supplied signed maxTokenSupplyForStage\n     *      is greater than the maximum specified.\n     */\n     error InvalidSignedMaxTokenSupplyForStage(uint256 got, uint256 maximum);\n\n     /**\n     * @dev Revert with an error if supplied signed feeBps is greater than\n     *      the maximum specified, or less than the minimum.\n     */\n    error InvalidSignedFeeBps(uint256 got, uint256 minimumOrMaximum);\n\n    /**\n     * @dev Revert with an error if signed mint did not specify to restrict\n     *      fee recipients.\n     */\n    error SignedMintsMustRestrictFeeRecipients();\n\n    /**\n     * @dev Revert with an error if a signature for a signed mint has already\n     *      been used.\n     */\n    error SignatureAlreadyUsed();\n\n    /**\n     * @dev An event with details of a SeaDrop mint, for analytical purposes.\n     *\n     * @param nftContract    The nft contract.\n     * @param minter         The mint recipient.\n     * @param feeRecipient   The fee recipient.\n     * @param payer          The address who payed for the tx.\n     * @param quantityMinted The number of tokens minted.\n     * @param unitMintPrice  The amount paid for each token.\n     * @param feeBps         The fee out of 10_000 basis points collected.\n     * @param dropStageIndex The drop stage index. Items minted\n     *                       through mintPublic() have\n     *                       dropStageIndex of 0.\n     */\n    event SeaDropMint(\n        address indexed nftContract,\n        address indexed minter,\n        address indexed feeRecipient,\n        address payer,\n        uint256 quantityMinted,\n        uint256 unitMintPrice,\n        uint256 feeBps,\n        uint256 dropStageIndex\n    );\n\n    /**\n     * @dev An event with updated public drop data for an nft contract.\n     */\n    event PublicDropUpdated(\n        address indexed nftContract,\n        PublicDrop publicDrop\n    );\n\n    /**\n     * @dev An event with updated token gated drop stage data\n     *      for an nft contract.\n     */\n    event TokenGatedDropStageUpdated(\n        address indexed nftContract,\n        address indexed allowedNftToken,\n        TokenGatedDropStage dropStage\n    );\n\n    /**\n     * @dev An event with updated allow list data for an nft contract.\n     *\n     * @param nftContract        The nft contract.\n     * @param previousMerkleRoot The previous allow list merkle root.\n     * @param newMerkleRoot      The new allow list merkle root.\n     * @param publicKeyURI       If the allow list is encrypted, the public key\n     *                           URIs that can decrypt the list.\n     *                           Empty if unencrypted.\n     * @param allowListURI       The URI for the allow list.\n     */\n    event AllowListUpdated(\n        address indexed nftContract,\n        bytes32 indexed previousMerkleRoot,\n        bytes32 indexed newMerkleRoot,\n        string[] publicKeyURI,\n        string allowListURI\n    );\n\n    /**\n     * @dev An event with updated drop URI for an nft contract.\n     */\n    event DropURIUpdated(address indexed nftContract, string newDropURI);\n\n    /**\n     * @dev An event with the updated creator payout address for an nft\n     *      contract.\n     */\n    event CreatorPayoutAddressUpdated(\n        address indexed nftContract,\n        address indexed newPayoutAddress\n    );\n\n    /**\n     * @dev An event with the updated allowed fee recipient for an nft\n     *      contract.\n     */\n    event AllowedFeeRecipientUpdated(\n        address indexed nftContract,\n        address indexed feeRecipient,\n        bool indexed allowed\n    );\n\n    /**\n     * @dev An event with the updated validation parameters for server-side\n     *      signers.\n     */\n    event SignedMintValidationParamsUpdated(\n        address indexed nftContract,\n        address indexed signer,\n        SignedMintValidationParams signedMintValidationParams\n    );\n\n    /**\n     * @dev An event with the updated payer for an nft contract.\n     */\n    event PayerUpdated(\n        address indexed nftContract,\n        address indexed payer,\n        bool indexed allowed\n    );\n}\n"
45     },
46     "contracts/lib/SeaDropStructs.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n * @notice A struct defining public drop data.\n *         Designed to fit efficiently in one storage slot.\n *\n * @param mintPrice                The mint price per token. (Up to 1.2m\n *                                 of native token, e.g. ETH, MATIC)\n * @param startTime                The start time, ensure this is not zero.\n * @param endTIme                  The end time, ensure this is not zero.\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed. (The limit for this field is\n *                                 2^16 - 1)\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct PublicDrop {\n    uint80 mintPrice; // 80/256 bits\n    uint48 startTime; // 128/256 bits\n    uint48 endTime; // 176/256 bits\n    uint16 maxTotalMintableByWallet; // 224/256 bits\n    uint16 feeBps; // 240/256 bits\n    bool restrictFeeRecipients; // 248/256 bits\n}\n\n/**\n * @notice A struct defining token gated drop stage data.\n *         Designed to fit efficiently in one storage slot.\n *\n * @param mintPrice                The mint price per token. (Up to 1.2m\n *                                 of native token, e.g.: ETH, MATIC)\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed. (The limit for this field is\n *                                 2^16 - 1)\n * @param startTime                The start time, ensure this is not zero.\n * @param endTime                  The end time, ensure this is not zero.\n * @param dropStageIndex           The drop stage index to emit with the event\n *                                 for analytical purposes. This should be\n *                                 non-zero since the public mint emits\n *                                 with index zero.\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\n *                                 mint within. (The limit for this field is\n *                                 2^16 - 1)\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct TokenGatedDropStage {\n    uint80 mintPrice; // 80/256 bits\n    uint16 maxTotalMintableByWallet; // 96/256 bits\n    uint48 startTime; // 144/256 bits\n    uint48 endTime; // 192/256 bits\n    uint8 dropStageIndex; // non-zero. 200/256 bits\n    uint32 maxTokenSupplyForStage; // 232/256 bits\n    uint16 feeBps; // 248/256 bits\n    bool restrictFeeRecipients; // 256/256 bits\n}\n\n/**\n * @notice A struct defining mint params for an allow list.\n *         An allow list leaf will be composed of `msg.sender` and\n *         the following params.\n *\n *         Note: Since feeBps is encoded in the leaf, backend should ensure\n *         that feeBps is acceptable before generating a proof.\n *\n * @param mintPrice                The mint price per token.\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed.\n * @param startTime                The start time, ensure this is not zero.\n * @param endTime                  The end time, ensure this is not zero.\n * @param dropStageIndex           The drop stage index to emit with the event\n *                                 for analytical purposes. This should be\n *                                 non-zero since the public mint emits with\n *                                 index zero.\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\n *                                 mint within.\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct MintParams {\n    uint256 mintPrice;\n    uint256 maxTotalMintableByWallet;\n    uint256 startTime;\n    uint256 endTime;\n    uint256 dropStageIndex; // non-zero\n    uint256 maxTokenSupplyForStage;\n    uint256 feeBps;\n    bool restrictFeeRecipients;\n}\n\n/**\n * @notice A struct defining token gated mint params.\n *\n * @param allowedNftToken    The allowed nft token contract address.\n * @param allowedNftTokenIds The token ids to redeem.\n */\nstruct TokenGatedMintParams {\n    address allowedNftToken;\n    uint256[] allowedNftTokenIds;\n}\n\n/**\n * @notice A struct defining allow list data (for minting an allow list).\n *\n * @param merkleRoot    The merkle root for the allow list.\n * @param publicKeyURIs If the allowListURI is encrypted, a list of URIs\n *                      pointing to the public keys. Empty if unencrypted.\n * @param allowListURI  The URI for the allow list.\n */\nstruct AllowListData {\n    bytes32 merkleRoot;\n    string[] publicKeyURIs;\n    string allowListURI;\n}\n\n/**\n * @notice A struct defining minimum and maximum parameters to validate for\n *         signed mints, to minimize negative effects of a compromised signer.\n *\n * @param minMintPrice                The minimum mint price allowed.\n * @param maxMaxTotalMintableByWallet The maximum total number of mints allowed\n *                                    by a wallet.\n * @param minStartTime                The minimum start time allowed.\n * @param maxEndTime                  The maximum end time allowed.\n * @param maxMaxTokenSupplyForStage   The maximum token supply allowed.\n * @param minFeeBps                   The minimum fee allowed.\n * @param maxFeeBps                   The maximum fee allowed.\n */\nstruct SignedMintValidationParams {\n    uint80 minMintPrice; // 80/256 bits\n    uint24 maxMaxTotalMintableByWallet; // 104/256 bits\n    uint40 minStartTime; // 144/256 bits\n    uint40 maxEndTime; // 184/256 bits\n    uint40 maxMaxTokenSupplyForStage; // 224/256 bits\n    uint16 minFeeBps; // 240/256 bits\n    uint16 maxFeeBps; // 256/256 bits\n}\n"
48     },
49     "interfaces/ERC721SeaDropStructsErrorsAndEvents.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n  AllowListData,\n  PublicDrop,\n  SignedMintValidationParams,\n  TokenGatedDropStage\n} from \"../contracts/lib/SeaDropStructs.sol\";\n\ninterface ERC721SeaDropStructsErrorsAndEvents {\n  /**\n   * @notice Revert with an error if mint exceeds the max supply.\n   */\n  error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\n\n  /**\n   * @notice Revert with an error if the number of token gated\n   *         allowedNftTokens doesn't match the length of supplied\n   *         drop stages.\n   */\n  error TokenGatedMismatch();\n\n  /**\n   *  @notice Revert with an error if the number of signers doesn't match\n   *          the length of supplied signedMintValidationParams\n   */\n  error SignersMismatch();\n\n  /**\n   * @notice A struct to configure multiple contract options at a time.\n   */\n  struct MultiConfigureStruct {\n    uint256 maxSupply;\n    string baseURI;\n    string contractURI;\n    address seaDropImpl;\n    PublicDrop publicDrop;\n    string dropURI;\n    AllowListData allowListData;\n    address creatorPayoutAddress;\n    bytes32 provenanceHash;\n\n    address[] allowedFeeRecipients;\n    address[] disallowedFeeRecipients;\n\n    address[] allowedPayers;\n    address[] disallowedPayers;\n\n    // Token-gated\n    address[] tokenGatedAllowedNftTokens;\n    TokenGatedDropStage[] tokenGatedDropStages;\n    address[] disallowedTokenGatedAllowedNftTokens;\n\n    // Server-signed\n    address[] signers;\n    SignedMintValidationParams[] signedMintValidationParams;\n    address[] disallowedSigners;\n  }\n}\n"
51     },
52     "interfaces/IDarkEnergy.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./INonFungibleSeaDropToken.sol\";\nimport \"./ERC721SeaDropStructsErrorsAndEvents.sol\";\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IDarkEnergy is INonFungibleSeaDropToken, ERC721SeaDropStructsErrorsAndEvents {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error CallerNotOwnerNorApproved();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * One cannot send a token holding negative energy to a holder of a token\n     * holding positive energy\n     */\n    error NegativeEnergyToPositiveHolder();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error QuantityExceedsLimit();\n\n    /**\n     * The token does not exist.\n     */\n    error QueryForNonExistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error QueryForZeroAddress();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Caller needs a gamePass to proceed\n     */\n    error NoGamePass();\n\n    /**\n     * The game rules aren't consistent\n     */\n    error InvalidGameRules();\n\n    /**\n     * To prevent Owner from overriding fees, Administrator must\n     * first initialize with fee.\n     */\n    error AdministratorMustInitializeWithFee();\n\n    /**\n     * To be thrown in case the max supply was reached and the mint doesn't go\n     * through SeaDrop\n     */\n    error MaxSupplyExceeded();\n\n    /**\n     * To be thrown in case the max supply was reached and the mint doesn't go\n     * through SeaDrop\n     */\n    error OperatorNotAllowed();\n\n    /**\n     * To be thrown in case the max supply was reached and the mint doesn't go\n     * through SeaDrop\n     */\n    error AddressNotHolder();\n\n    /**\n     * To be thrown in case the max supply was reached and the mint doesn't go\n     * through SeaDrop\n     */\n    error GameNotActive();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(\n        uint256 tokenId\n    ) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(\n        uint256 indexed fromTokenId,\n        uint256 toTokenId,\n        address indexed from,\n        address indexed to\n    );\n\n    // =============================================================\n    //                      Marketplace Related\n    // =============================================================\n    /**\n     * @dev Signal to marketplaces that the token has been updated\n     */\n    event MetadataUpdate(uint256 _tokenId);\n\n    /**\n     * @dev Allowed a SeaDrop\n     */\n    event AllowedSeaDrop(address indexed seaDrop);\n\n    /**\n     * @dev Denied a SeaDrop\n     */\n    event DeniedSeaDrop(address indexed seaDrop);\n\n    // =============================================================\n    //                      DarkEnergy-specific\n    // =============================================================\n\n    /**\n     * @dev GamePass earned through minting\n     */\n    event GamePassesGained(uint256 indexed tokenId, uint16 indexed amount);\n\n    /**\n     * @dev Energy updated\n     */\n    event EnergyUpdate(address indexed player, int40 indexed energyDiff);\n\n    /**\n     * @dev Energy doubled\n     */\n    event EnergyDoubled(address indexed player, int40 indexed energy);\n\n    /**\n     * @dev Energy halved\n     */\n    event EnergyHalved(address indexed player, int40 indexed energy);\n\n    /**\n     * @dev No risk game played\n     */\n    event PlayNoRisk(address indexed player);\n\n    /**\n     * @dev High stakes game played\n     */\n    event PlayHighStakes(address indexed player);\n\n    /**\n     * @dev Ordinal won\n     */\n    event OrdinalWon(address indexed player);\n\n    /**\n     * @dev Game rules updated\n     */\n    event GameRulesUpdated(bytes32 indexed oldRules, bytes32 indexed newRules);\n\n    /**\n     * @dev Game rules updated\n     */\n    event OrdinalsVouchersDeployed(address indexed contractAddress);\n\n    /**\n     * @dev Dark Energy minted\n     */\n    event GlitchMint(address indexed to, uint256 indexed energy, uint256 indexed gamePasses);\n\n    /**\n     * @dev Dark Energy minted\n     */\n    event AdminMint(address indexed to, int40 indexed energyDiff, uint16 indexed gamePassesDiff);\n}\n"
54     },
55     "interfaces/INonFungibleSeaDropToken.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    ISeaDropTokenContractMetadata\n} from \"./ISeaDropTokenContractMetadata.sol\";\n\nimport {\n    AllowListData,\n    PublicDrop,\n    TokenGatedDropStage,\n    SignedMintValidationParams\n} from \"../contracts/lib/SeaDropStructs.sol\";\n\ninterface INonFungibleSeaDropToken is ISeaDropTokenContractMetadata {\n    /**\n     * @dev Revert with an error if a contract is not an allowed\n     *      SeaDrop address.\n     */\n    error OnlyAllowedSeaDrop();\n\n    /**\n     * @dev Emit an event when allowed SeaDrop contracts are updated.\n     */\n    event AllowedSeaDropUpdated(address[] allowedSeaDrop);\n\n    /**\n     * @notice An event to signify that a SeaDrop token contract was deployed.\n     */\n    event SeaDropTokenDeployed();\n\n    /**\n     * @notice Update the allowed SeaDrop contracts.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\n     */\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external;\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     *\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\n     *         contracts, the implementation of this function should guard\n     *         against reentrancy. If the implementing token uses\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\n     *         is specified, the token or fee recipients may be able to execute\n     *         another mint in the same transaction via a separate SeaDrop\n     *         contract.\n     *         This is dangerous if an implementing token does not correctly\n     *         update the minterNumMinted and currentTotalSupply values before\n     *         transferring minted tokens, as SeaDrop references these values\n     *         to enforce token limits on a per-wallet and per-stage basis.\n     *\n     * @param minter   The address to mint to.\n     * @param quantity The number of tokens to mint.\n     */\n    function mintSeaDrop(address minter, uint256 quantity) external;\n\n    /**\n     * @notice Returns a set of mint stats for the address.\n     *         This assists SeaDrop in enforcing maxSupply,\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\n     *\n     * @dev    NOTE: Implementing contracts should always update these numbers\n     *         before transferring any tokens with _safeMint() to mitigate\n     *         consequences of malicious onERC721Received() hooks.\n     *\n     * @param minter The minter address.\n     */\n    function getMintStats(address minter)\n        external\n        view\n        returns (\n            uint256 minterNumMinted,\n            uint256 currentTotalSupply,\n            uint256 maxSupply\n        );\n\n    /**\n     * @notice Update the public drop data for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     *         The administrator can only update `feeBps`.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param publicDrop  The public drop data.\n     */\n    function updatePublicDrop(\n        address seaDropImpl,\n        PublicDrop calldata publicDrop\n    ) external;\n\n    /**\n     * @notice Update the allow list data for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(\n        address seaDropImpl,\n        AllowListData calldata allowListData\n    ) external;\n\n    /**\n     * @notice Update the token gated drop stage data for this nft contract\n     *         on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     *         The administrator, when present, must first set `feeBps`.\n     *\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\n     *         simultaneous token gated drop promotions for each other,\n     *         they can be minted by the same actor until\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\n     *         `allowedNftToken` is not running an active drop during the\n     *         `dropStage` time period.\n     *\n     *\n     * @param seaDropImpl     The allowed SeaDrop contract.\n     * @param allowedNftToken The allowed nft token.\n     * @param dropStage       The token gated drop stage data.\n     */\n    function updateTokenGatedDrop(\n        address seaDropImpl,\n        address allowedNftToken,\n        TokenGatedDropStage calldata dropStage\n    ) external;\n\n    /**\n     * @notice Update the drop URI for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param dropURI     The new drop URI.\n     */\n    function updateDropURI(address seaDropImpl, string calldata dropURI)\n        external;\n\n    /**\n     * @notice Update the creator payout address for this nft contract on\n     *         SeaDrop.\n     *         Only the owner can set the creator payout address.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param payoutAddress The new payout address.\n     */\n    function updateCreatorPayoutAddress(\n        address seaDropImpl,\n        address payoutAddress\n    ) external;\n\n    /**\n     * @notice Update the allowed fee recipient for this nft contract\n     *         on SeaDrop.\n     *         Only the administrator can set the allowed fee recipient.\n     *\n     * @param seaDropImpl  The allowed SeaDrop contract.\n     * @param feeRecipient The new fee recipient.\n     */\n    function updateAllowedFeeRecipient(\n        address seaDropImpl,\n        address feeRecipient,\n        bool allowed\n    ) external;\n\n    /**\n     * @notice Update the server-side signers for this nft contract\n     *         on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl                The allowed SeaDrop contract.\n     * @param signer                     The signer to update.\n     * @param signedMintValidationParams Minimum and maximum parameters\n     *                                   to enforce for signed mints.\n     */\n    function updateSignedMintValidationParams(\n        address seaDropImpl,\n        address signer,\n        SignedMintValidationParams memory signedMintValidationParams\n    ) external;\n\n    /**\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\n     *         Only the owner or administrator can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param payer       The payer to update.\n     * @param allowed     Whether the payer is allowed.\n     */\n    function updatePayer(\n        address seaDropImpl,\n        address payer,\n        bool allowed\n    ) external;\n}\n"
57     },
58     "interfaces/ISeaDrop.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    AllowListData,\n    MintParams,\n    PublicDrop,\n    TokenGatedDropStage,\n    TokenGatedMintParams,\n    SignedMintValidationParams\n} from \"../contracts/lib/SeaDropStructs.sol\";\n\nimport { SeaDropErrorsAndEvents } from \"../contracts/lib/SeaDropErrorsAndEvents.sol\";\n\ninterface ISeaDrop is SeaDropErrorsAndEvents {\n    /**\n     * @notice Mint a public drop.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     */\n    function mintPublic(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        uint256 quantity\n    ) external payable;\n\n    /**\n     * @notice Mint from an allow list.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     * @param mintParams       The mint parameters.\n     * @param proof            The proof for the leaf of the allow list.\n     */\n    function mintAllowList(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        uint256 quantity,\n        MintParams calldata mintParams,\n        bytes32[] calldata proof\n    ) external payable;\n\n    /**\n     * @notice Mint with a server-side signature.\n     *         Note that a signature can only be used once.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     * @param mintParams       The mint parameters.\n     * @param salt             The sale for the signed mint.\n     * @param signature        The server-side signature, must be an allowed\n     *                         signer.\n     */\n    function mintSigned(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        uint256 quantity,\n        MintParams calldata mintParams,\n        uint256 salt,\n        bytes calldata signature\n    ) external payable;\n\n    /**\n     * @notice Mint as an allowed token holder.\n     *         This will mark the token id as redeemed and will revert if the\n     *         same token id is attempted to be redeemed twice.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param mintParams       The token gated mint params.\n     */\n    function mintAllowedTokenHolder(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        TokenGatedMintParams calldata mintParams\n    ) external payable;\n\n    /**\n     * @notice Emits an event to notify update of the drop URI.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param dropURI The new drop URI.\n     */\n    function updateDropURI(string calldata dropURI) external;\n\n    /**\n     * @notice Updates the public drop data for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param publicDrop The public drop data.\n     */\n    function updatePublicDrop(PublicDrop calldata publicDrop) external;\n\n    /**\n     * @notice Updates the allow list merkle root for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(AllowListData calldata allowListData) external;\n\n    /**\n     * @notice Updates the token gated drop stage for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\n     *         simultaneous token gated drop promotions for each other,\n     *         they can be minted by the same actor until\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\n     *         `allowedNftToken` is not running an active drop during\n     *         the `dropStage` time period.\n     *\n     * @param allowedNftToken The token gated nft token.\n     * @param dropStage       The token gated drop stage data.\n     */\n    function updateTokenGatedDrop(\n        address allowedNftToken,\n        TokenGatedDropStage calldata dropStage\n    ) external;\n\n    /**\n     * @notice Updates the creator payout address and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param payoutAddress The creator payout address.\n     */\n    function updateCreatorPayoutAddress(address payoutAddress) external;\n\n    /**\n     * @notice Updates the allowed fee recipient and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param feeRecipient The fee recipient.\n     * @param allowed      If the fee recipient is allowed.\n     */\n    function updateAllowedFeeRecipient(address feeRecipient, bool allowed)\n        external;\n\n    /**\n     * @notice Updates the allowed server-side signers and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param signer                     The signer to update.\n     * @param signedMintValidationParams Minimum and maximum parameters\n     *                                   to enforce for signed mints.\n     */\n    function updateSignedMintValidationParams(\n        address signer,\n        SignedMintValidationParams calldata signedMintValidationParams\n    ) external;\n\n    /**\n     * @notice Updates the allowed payer and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param payer   The payer to add or remove.\n     * @param allowed Whether to add or remove the payer.\n     */\n    function updatePayer(address payer, bool allowed) external;\n\n    /**\n     * @notice Returns the public drop data for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getPublicDrop(address nftContract)\n        external\n        view\n        returns (PublicDrop memory);\n\n    /**\n     * @notice Returns the creator payout address for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getCreatorPayoutAddress(address nftContract)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Returns the allow list merkle root for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getAllowListMerkleRoot(address nftContract)\n        external\n        view\n        returns (bytes32);\n\n    /**\n     * @notice Returns if the specified fee recipient is allowed\n     *         for the nft contract.\n     *\n     * @param nftContract  The nft contract.\n     * @param feeRecipient The fee recipient.\n     */\n    function getFeeRecipientIsAllowed(address nftContract, address feeRecipient)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns an enumeration of allowed fee recipients for an\n     *         nft contract when fee recipients are enforced\n     *\n     * @param nftContract The nft contract.\n     */\n    function getAllowedFeeRecipients(address nftContract)\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     * @notice Returns the server-side signers for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getSigners(address nftContract)\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     * @notice Returns the struct of SignedMintValidationParams for a signer.\n     *\n     * @param nftContract The nft contract.\n     * @param signer      The signer.\n     */\n    function getSignedMintValidationParams(address nftContract, address signer)\n        external\n        view\n        returns (SignedMintValidationParams memory);\n\n    /**\n     * @notice Returns the payers for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getPayers(address nftContract)\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     * @notice Returns if the specified payer is allowed\n     *         for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     * @param payer       The payer.\n     */\n    function getPayerIsAllowed(address nftContract, address payer)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns the allowed token gated drop tokens for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getTokenGatedAllowedTokens(address nftContract)\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     * @notice Returns the token gated drop data for the nft contract\n     *         and token gated nft.\n     *\n     * @param nftContract     The nft contract.\n     * @param allowedNftToken The token gated nft token.\n     */\n    function getTokenGatedDrop(address nftContract, address allowedNftToken)\n        external\n        view\n        returns (TokenGatedDropStage memory);\n\n    /**\n     * @notice Returns whether the token id for a token gated drop has been\n     *         redeemed.\n     *\n     * @param nftContract       The nft contract.\n     * @param allowedNftToken   The token gated nft token.\n     * @param allowedNftTokenId The token gated nft token id to check.\n     */\n    function getAllowedNftTokenIdIsRedeemed(\n        address nftContract,\n        address allowedNftToken,\n        uint256 allowedNftTokenId\n    ) external view returns (bool);\n}\n"
60     },
61     "interfaces/ISeaDropTokenContractMetadata.sol": {
62       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport { IERC2981 } from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ninterface ISeaDropTokenContractMetadata is IERC2981 {\n    /**\n     * @notice Throw if the max supply exceeds uint64, a limit\n     *         due to the storage of bit-packed variables in ERC721A.\n     */\n    error CannotExceedMaxSupplyOfUint64(uint256 newMaxSupply);\n\n    /**\n     * @dev Revert with an error when attempting to set the provenance\n     *      hash after the mint has started.\n     */\n    error ProvenanceHashCannotBeSetAfterMintStarted();\n\n    /**\n     * @dev Revert if the royalty basis points is greater than 10_000.\n     */\n    error InvalidRoyaltyBasisPoints(uint256 basisPoints);\n\n    /**\n     * @dev Revert if the royalty address is being set to the zero address.\n     */\n    error RoyaltyAddressCannotBeZeroAddress();\n\n    /**\n     * @dev Emit an event for token metadata reveals/updates,\n     *      according to EIP-4906.\n     *\n     * @param _fromTokenId The start token id.\n     * @param _toTokenId   The end token id.\n     */\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n    /**\n     * @dev Emit an event when the URI for the collection-level metadata\n     *      is updated.\n     */\n    event ContractURIUpdated(string newContractURI);\n\n    /**\n     * @dev Emit an event when the max token supply is updated.\n     */\n    event MaxSupplyUpdated(uint256 newMaxSupply);\n\n    /**\n     * @dev Emit an event with the previous and new provenance hash after\n     *      being updated.\n     */\n    event ProvenanceHashUpdated(bytes32 previousHash, bytes32 newHash);\n\n    /**\n     * @dev Emit an event when the royalties info is updated.\n     */\n    event RoyaltyInfoUpdated(address receiver, uint256 bps);\n\n    /**\n     * @notice A struct defining royalty info for the contract.\n     */\n    struct RoyaltyInfo {\n        address royaltyAddress;\n        uint96 royaltyBps;\n    }\n\n    /**\n     * @notice Sets the base URI for the token metadata and emits an event.\n     *\n     * @param tokenURI The new base URI to set.\n     */\n    function setBaseURI(string calldata tokenURI) external;\n\n    /**\n     * @notice Sets the contract URI for contract metadata.\n     *\n     * @param newContractURI The new contract URI.\n     */\n    function setContractURI(string calldata newContractURI) external;\n\n    /**\n     * @notice Sets the max supply and emits an event.\n     *\n     * @param newMaxSupply The new max supply to set.\n     */\n    function setMaxSupply(uint256 newMaxSupply) external;\n\n    /**\n     * @notice Sets the provenance hash and emits an event.\n     *\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it has not been\n     *         modified after mint started.\n     *\n     *         This function will revert after the first item has been minted.\n     *\n     * @param newProvenanceHash The new provenance hash to set.\n     */\n    function setProvenanceHash(bytes32 newProvenanceHash) external;\n\n    /**\n     * @notice Sets the address and basis points for royalties.\n     *\n     * @param newInfo The struct to configure royalties.\n     */\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external;\n\n    /**\n     * @notice Returns the base URI for token metadata.\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the contract URI.\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the max token supply.\n     */\n    function maxSupply() external view returns (uint256);\n\n    /**\n     * @notice Returns the provenance hash.\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it is unmodified\n     *         after mint has started.\n     */\n    function provenanceHash() external view returns (bytes32);\n\n    /**\n     * @notice Returns the address that receives royalties.\n     */\n    function royaltyAddress() external view returns (address);\n\n    /**\n     * @notice Returns the royalty basis points out of 10_000.\n     */\n    function royaltyBasisPoints() external view returns (uint256);\n}\n"
63     },
64     "libraries/DarkEnergyPackedStruct.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nlibrary DarkEnergyPackedStruct {\n    // =============================================================\n    //                            Structs\n    // =============================================================\n\n    /// @dev All 256 bits from a PlayerData (from right to left)\n    struct PlayerData {\n        bool isHolder;\n        int40 energyAmount;\n        uint16 gamePasses;\n        uint16 mintCount;\n        uint16 mergeCount;\n        uint16 noRiskPlayCount;\n        uint16 noRiskWinCount;\n        uint16 highStakesPlayCount;\n        uint16 highStakesWinCount;\n        uint16 highStakesLossCount;\n        uint32 totalEarned;\n        uint32 totalRugged;\n        uint16 unused;\n        bool flagA;\n        bool flagB;\n        bool flagC;\n        bool flagD;\n        bool flagE;\n        bool flagF;\n        bool flagG;\n    }\n\n    /// @dev All 256 bits from a GameRules (from right to left)\n    struct GameRules {\n        bool isActive;\n        uint16 oddsNoRiskEarn100;\n        uint16 oddsNoRiskEarn300;\n        uint16 oddsNoRiskEarn500;\n        uint16 oddsHighStakesWinOrdinal;\n        uint16 oddsHighStakesLose100;\n        uint16 oddsHighStakesLose300;\n        uint16 oddsHighStakesLose500;\n        uint16 oddsHighStakesLose1000;\n        uint16 oddsHighStakesEarn100;\n        uint16 oddsHighStakesEarn300;\n        uint16 oddsHighStakesEarn500;\n        uint16 oddsHighStakesEarn1000;\n        uint16 oddsHighStakesDoubles;\n        uint16 oddsHighStakesHalves;\n        uint16 oddsGamePassOnMint;\n        uint8 remainingOrdinals;\n        bool flagA;\n        bool flagB;\n        bool flagC;\n        bool flagD;\n        bool flagE;\n        bool flagF;\n        bool flagG;\n    }\n\n    // =============================================================\n    //                 Unpacking by type and offset\n    // =============================================================\n\n    /**\n     * @dev unpack bit [offset] (bool)\n     */\n    function getBool(bytes32 p, uint8 offset) internal pure returns (bool r) {\n        assembly {\n            r := and(shr(offset, p), 1)\n        }\n    }\n\n    /**\n     * @dev unpack bits [offset..offset + 8]\n     */\n    function getUint8(bytes32 p, uint8 offset) internal pure returns (uint8 r) {\n        assembly {\n            r := and(shr(offset, p), 0xFF)\n        }\n    }\n\n    /**\n     * @dev unpack bits [offset..offset + 16]\n     */\n    function getUint16(\n        bytes32 p,\n        uint8 offset\n    ) internal pure returns (uint16 r) {\n        assembly {\n            r := and(shr(offset, p), 0xFFFF)\n        }\n    }\n\n    /**\n     * @dev unpack bits [offset..offset + 32]\n     */\n    function getUint32(\n        bytes32 p,\n        uint8 offset\n    ) internal pure returns (uint32 r) {\n        assembly {\n            r := and(shr(offset, p), 0xFFFFFFFF)\n        }\n    }\n\n    /**\n     * @dev unpack bits[offset..offset + 40]\n     */\n    function getInt40(bytes32 p, uint8 offset) internal pure returns (int40 r) {\n        assembly {\n            r := and(shr(offset, p), 0xFFFFFFFFFF)\n        }\n    }\n\n    // =============================================================\n    //                    Unpacking whole structs\n    // =============================================================\n\n    function playerData(bytes32 p) internal pure returns (PlayerData memory r) {\n        return\n            PlayerData({\n                isHolder: getBool(p, 0),\n                energyAmount: getInt40(p, 1),\n                gamePasses: getUint16(p, 41),\n                mintCount: getUint16(p, 57),\n                mergeCount: getUint16(p, 73),\n                noRiskPlayCount: getUint16(p, 89),\n                noRiskWinCount: getUint16(p, 105),\n                highStakesPlayCount: getUint16(p, 121),\n                highStakesWinCount: getUint16(p, 137),\n                highStakesLossCount: getUint16(p, 153),\n                totalEarned: getUint32(p, 169),\n                totalRugged: getUint32(p, 201),\n                unused: getUint16(p, 169),\n                flagA: getBool(p, 249),\n                flagB: getBool(p, 250),\n                flagC: getBool(p, 251),\n                flagD: getBool(p, 252),\n                flagE: getBool(p, 253),\n                flagF: getBool(p, 254),\n                flagG: getBool(p, 255)\n        });\n    }\n\n    function gameRules(bytes32 p) internal pure returns (GameRules memory r) {\n        return\n            GameRules({\n                isActive: getBool(p, 0),\n                oddsNoRiskEarn100: getUint16(p, 1),\n                oddsNoRiskEarn300: getUint16(p, 17),\n                oddsNoRiskEarn500: getUint16(p, 33),\n                oddsHighStakesWinOrdinal: getUint16(p, 49),\n                oddsHighStakesLose100: getUint16(p, 65),\n                oddsHighStakesLose300: getUint16(p, 81),\n                oddsHighStakesLose500: getUint16(p, 97),\n                oddsHighStakesLose1000: getUint16(p, 113),\n                oddsHighStakesEarn100: getUint16(p, 129),\n                oddsHighStakesEarn300: getUint16(p, 145),\n                oddsHighStakesEarn500: getUint16(p, 161),\n                oddsHighStakesEarn1000: getUint16(p, 177),\n                oddsHighStakesDoubles: getUint16(p, 193),\n                oddsHighStakesHalves: getUint16(p, 209),\n                oddsGamePassOnMint: getUint16(p, 225),\n                remainingOrdinals: getUint8(p, 241),\n                flagA: getBool(p, 249),\n                flagB: getBool(p, 250),\n                flagC: getBool(p, 251),\n                flagD: getBool(p, 252),\n                flagE: getBool(p, 253),\n                flagF: getBool(p, 254),\n                flagG: getBool(p, 255)\n            });\n    }\n\n    // =============================================================\n    //                         Setting Bits\n    // =============================================================\n\n    /**\n     * @dev set bit [{offset}] to {value}\n     */\n    function setBit(\n        bytes32 p,\n        uint8 offset,\n        bool value\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    xor(\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n                        shl(offset, 1)\n                    )\n                ),\n                shl(offset, value)\n            )\n        }\n    }\n\n    /**\n     * @dev set 8 bits to {value} at [{offset}]\n     */\n    function setUint8(\n        bytes32 p,\n        uint8 offset,\n        uint8 value\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    xor(\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n                        shl(offset, 0xFF)\n                    )\n                ),\n                shl(offset, and(value, 0xFF))\n            )\n        }\n    }\n\n    /**\n     * @dev set 16 bits to {value} at [{offset}]\n     */\n    function setUint16(\n        bytes32 p,\n        uint8 offset,\n        uint16 value\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    xor(\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n                        shl(offset, 0xFFFF)\n                    )\n                ),\n                shl(offset, and(value, 0xFFFF))\n            )\n        }\n    }\n\n    /**\n     * @dev set 32 bits to {value} at [{offset}]\n     */\n    function setUint32(\n        bytes32 p,\n        uint8 offset,\n        uint32 value\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    xor(\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n                        shl(offset, 0xFFFFFFFF)\n                    )\n                ),\n                shl(offset, and(value, 0xFFFFFFFF))\n            )\n        }\n    }\n\n    /**\n     * @dev set 40 bits to {value} at [{offset}]\n     */\n    function setInt40(\n        bytes32 p,\n        uint8 offset,\n        int40 value\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    xor(\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n                        shl(offset, 0xFFFFFFFFFF)\n                    )\n                ),\n                shl(offset, and(value, 0xFFFFFFFFFF))\n            )\n        }\n    }\n\n    // =============================================================\n    //                         DarkEnergy-specific\n    // =============================================================\n\n    /**\n     * @dev get _playerData.isHolder\n     */\n    function isHolder(bytes32 p) internal pure returns (bool) {\n        return getBool(p, 0);\n    }\n\n    /**\n     * @dev get _playerData.energyAmount\n     */\n    function getEnergy(bytes32 p) internal pure returns (int40) {\n        return getInt40(p, 1);\n    }\n\n    /**\n     * @dev get _playerData.gamePasses\n     */\n    function getGamePasses(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 41);\n    }\n\n    /**\n     * @dev get _playerData.mintCount\n     */\n    function getMintCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 57);\n    }\n\n    /**\n     * @dev get _playerData.mergeCount\n     */\n    function getMergeCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 73);\n    }\n\n    /**\n     * @dev get _playerData.noRiskPlayCount\n     */\n    function getNoRiskPlayCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 89);\n    }\n\n    /**\n     * @dev get _playerData.noRiskWinCount\n     */\n    function getNoRiskWinCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 105);\n    }\n\n    /**\n     * @dev get _playerData.highStakesPlayCount\n     */\n    function getHighStakesPlayCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 121);\n    }\n\n    /**\n     * @dev get _playerData.highStakesWinCount\n     */\n    function getHighStakesWinCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 137);\n    }\n\n    /**\n     * @dev get _playerData.highStakesLossCount\n     */\n    function getHighStakesLossCount(bytes32 p) internal pure returns (uint16) {\n        return getUint16(p, 153);\n    }\n\n    /**\n     * @dev get _playerData.totalEarned\n     */\n    function getTotalEarned(bytes32 p) internal pure returns (uint32) {\n        return getUint32(p, 169);\n    }\n\n    /**\n     * @dev get _playerData.totalRugged\n     */\n    function getTotalRugged(bytes32 p) internal pure returns (uint32) {\n        return getUint32(p, 201);\n    }\n\n    /**\n     * @dev sets _playerData.isHolder\n     */\n    function setHolder(bytes32 p, bool status) internal pure returns (bytes32 np) {\n        return setBit(p, 0, status);\n    }\n\n    /**\n     * @dev sets _playerData.energyAmount\n     */\n    function setEnergy(bytes32 p, int40 value) internal pure returns (bytes32 np) {\n        return setInt40(p, 1, value);\n    }\n\n    /**\n     * @dev sets _playerData.gamePasses\n     */\n    function setGamePasses(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 41, value);\n    }\n\n    /**\n     * @dev sets _playerData.mintCount\n     */\n    function setMintCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 57, value);\n    }\n\n    /**\n     * @dev sets _playerData.mergeCount\n     */\n    function setMergeCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 73, value);\n    }\n\n    /**\n     * @dev sets _playerData.noRiskPlayCount\n     */\n    function setNoRiskPlayCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 89, value);\n    }\n\n    /**\n     * @dev sets _playerData.noRiskWinCount\n     */\n    function setNoRiskWinCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 105, value);\n    }\n\n    /**\n     * @dev sets _playerData.highStakesPlayCount\n     */\n    function setHighStakesPlayCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 121, value);\n    }\n\n    /**\n     * @dev sets _playerData.highStakesWinCount\n     */\n    function setHighStakesWinCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 137, value);\n    }\n\n    /**\n     * @dev sets _playerData.highStakesLossCount\n     */\n    function setHighStakesLossCount(bytes32 p, uint16 value) internal pure returns (bytes32 np) {\n        return setUint16(p, 153, value);\n    }\n\n    /**\n     * @dev sets _playerData.totalEarned\n     */\n    function setTotalEarned(bytes32 p, uint32 value) internal pure returns (bytes32 np) {\n        return setUint32(p, 169, value);\n    }\n\n    /**\n     * @dev sets _playerData.totalRugged\n     */\n    function setTotalRugged(bytes32 p, uint32 value) internal pure returns (bytes32 np) {\n        return setUint32(p, 201, value);\n    }\n\n    /**\n     * @dev Clears the last 57 bits (isHolder, energyAmount, gamePasses)\n     */\n    function clearHoldingData(bytes32 p) internal pure returns (bytes32 np) {\n        assembly {\n            np := and(\n                p,\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000\n            )\n        }\n    }\n\n    /**\n     * @dev Replace the last 57 bits (isHolder, energyAmount, gamePasses) from\n     *      another packed bytes variable (to be used for transfers)\n     */\n    function setHoldingData(\n        bytes32 p,\n        bytes32 q\n    ) internal pure returns (bytes32 np) {\n        assembly {\n            np := or(\n                and(\n                    p,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000\n                ),\n                and(q, 0x1FFFFFFFFFFFFFF)\n            )\n        }\n    }\n\n    /**\n     * @dev tight-pack a GameRules struct into a uint256\n     */\n    function packGameRules(\n        GameRules calldata\n    ) internal pure returns (bytes32 result) {\n        assembly {\n            result := calldataload(4)\n            result := or(result, shl(1, calldataload(36)))\n            result := or(result, shl(17, calldataload(68)))\n            result := or(result, shl(33, calldataload(100)))\n            result := or(result, shl(49, calldataload(132)))\n            result := or(result, shl(65, calldataload(164)))\n            result := or(result, shl(81, calldataload(196)))\n            result := or(result, shl(97, calldataload(228)))\n            result := or(result, shl(113, calldataload(260)))\n            result := or(result, shl(129, calldataload(292)))\n            result := or(result, shl(145, calldataload(324)))\n            result := or(result, shl(161, calldataload(356)))\n            result := or(result, shl(177, calldataload(388)))\n            result := or(result, shl(193, calldataload(420)))\n            result := or(result, shl(209, calldataload(452)))\n            result := or(result, shl(225, calldataload(484)))\n            result := or(result, shl(241, calldataload(516)))\n            result := or(result, shl(249, calldataload(548)))\n            result := or(result, shl(250, calldataload(580)))\n            result := or(result, shl(251, calldataload(612)))\n            result := or(result, shl(252, calldataload(644)))\n            result := or(result, shl(253, calldataload(676)))\n            result := or(result, shl(254, calldataload(708)))\n            result := or(result, shl(255, calldataload(740)))\n        }\n    }\n}\n"
66     },
67     "libraries/Strings.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n// Added support for int256\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        if (value >= 0) {\n            return toString(uint256(value));\n        }\n        return\n            string(\n                abi.encodePacked(\n                    \"-\",\n                    toString(uint256(-value))\n                )\n            );\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(\n        uint256 value,\n        uint256 length\n    ) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
69     },
70     "libraries/UriEncode.sol": {
71       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nlibrary UriEncode {\n    string internal constant _TABLE = \"0123456789abcdef\";\n\n    function uriEncode(\n        string memory uri\n    ) internal pure returns (string memory) {\n        bytes memory bytesUri = bytes(uri);\n\n        string memory table = _TABLE;\n\n        // Max size is worse case all chars need to be encoded\n        bytes memory result = new bytes(3 * bytesUri.length);\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get the lookup table\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Keep track of the final result size string length\n            let resultSize := 0\n\n            for {\n                let dataPtr := bytesUri\n                let endPtr := add(bytesUri, mload(bytesUri))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // advance 1 byte\n                dataPtr := add(dataPtr, 1)\n                // bytemask out a char\n                let char := and(mload(dataPtr), 255)\n\n                // Check if is valid URI character\n                let isInvalidUriChar := or(\n                    or(\n                        lt(char, 33), // lower than \"!\"\n                        gt(char, 122) // higher than \"z\"\n                    ),\n                    or(\n                        or(\n                            eq(char, 37), // \"%\"\n                            or(\n                                eq(char, 60), // \"<\"\n                                eq(char, 62) // \">\"\n                            )\n                        ),\n                        or(\n                            and(gt(char, 90), lt(char, 95)), // \"[\\]^\"\n                            eq(char, 96) // \"`\"\n                        )\n                    )\n                )\n                if eq(char, 35) { isInvalidUriChar := 1 }\n\n                switch isInvalidUriChar\n                // If is valid uri character copy character over and increment the result\n                case 0 {\n                    mstore8(resultPtr, char)\n                    resultPtr := add(resultPtr, 1)\n                    resultSize := add(resultSize, 1)\n                }\n                // If the char is not a valid uri character, uriencode the character\n                case 1 {\n                    mstore8(resultPtr, 37)\n                    resultPtr := add(resultPtr, 1)\n                    // table[character >> 4] (take the last 4 bits)\n                    mstore8(resultPtr, mload(add(tablePtr, shr(4, char))))\n                    resultPtr := add(resultPtr, 1)\n                    // table & 15 (take the first 4 bits)\n                    mstore8(resultPtr, mload(add(tablePtr, and(char, 15))))\n                    resultPtr := add(resultPtr, 1)\n                    resultSize := add(resultSize, 3)\n                }\n            }\n\n            // Set size of result string in memory\n            mstore(result, resultSize)\n        }\n\n        return string(result);\n    }\n}\n"
72     },
73     "util/OwnableAndAdministrable.sol": {
74       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.19;\n\nimport \"../libraries/DarkEnergyPackedStruct.sol\";\n\ncontract OwnableAndAdministrable {\n    using DarkEnergyPackedStruct for bytes32;\n\n    error MissingRole(address user, uint256 role);\n    error NotOwner(address user);\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n    event RoleUpdated(address indexed user, uint256 indexed role, bool indexed status);\n\n    /**\n     * @dev There is a maximum of 256 roles: each bit says if the role is on or off\n     */\n    mapping(address => bytes32) private _addressRoles;\n\n    /**\n     * @dev There is one owner\n     */\n    address internal _owner;\n\n    function _isOwner(address sender) internal view returns(bool) {\n        return (sender == _owner || sender == address(this));\n    }\n\n    function _hasRole(address sender, uint8 role) internal view returns(bool) {\n        bytes32 roles = _addressRoles[sender];\n        return roles.getBool(role);\n    }\n\n    function _checkOwner(address sender) internal virtual view {\n        if (!_isOwner(sender)) {\n            revert NotOwner(sender);\n        }\n    }\n\n    function _checkRoleOrOwner(address sender, uint8 role) internal virtual view {\n        if (_isOwner(sender)) return;\n        _checkRole(sender, role);\n    }\n\n    function _checkRole(address sender, uint8 role) internal virtual view {\n        if (sender == address(this)) return;\n        bytes32 roles = _addressRoles[sender];\n        bool allowed = roles.getBool(role);\n        if (!allowed) {\n            revert MissingRole(sender, role);\n        }\n    }\n\n    function _setOwner(address newOwner) internal virtual {\n        _owner = newOwner;\n        emit OwnershipTransferred(_owner, newOwner);\n    }\n\n    function _setRole(address user, uint8 role, bool status) internal virtual {\n        _addressRoles[user] = _addressRoles[user].setBit(role, status);\n        emit RoleUpdated(user, role, status);\n    }\n\n    function setRole(address user, uint8 role, bool status) external virtual {\n        _checkOwner(msg.sender);\n        _setRole(user, role, status);\n    }\n\n    function transferOwnership(address newOwner) external virtual {\n        _checkOwner(msg.sender);\n        _setOwner(newOwner);\n    }\n\n    function owner() external virtual view returns(address) {\n        return _owner;\n    }\n}\n"
75     }
76   },
77   "settings": {
78     "viaIR": true,
79     "optimizer": {
80       "enabled": true,
81       "runs": 1
82     },
83     "outputSelection": {
84       "*": {
85         "*": [
86           "evm.bytecode",
87           "evm.deployedBytecode",
88           "devdoc",
89           "userdoc",
90           "metadata",
91           "abi"
92         ]
93       }
94     },
95     "libraries": {}
96   }
97 }}