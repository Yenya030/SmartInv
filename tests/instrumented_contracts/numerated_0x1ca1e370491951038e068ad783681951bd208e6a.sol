1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Minters/BuyCharacters.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../Interfaces/I_TokenCharacter.sol\"; \r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../Models/PaymentsShared.sol\";\r\n\r\ncontract BuyCharacters is Ownable, PaymentsShared {\r\n\r\n    uint256 public constant MAX_MINTABLE = 10000;\r\n    uint256 public TOKEN_PRICE = 0.035 ether;\r\n    uint256 public MINTS_PER_TRANSACTION = 10;\r\n\r\n    uint256 public FREE_MINT_AMOUNT = 3500;\r\n\r\n    I_TokenCharacter tokenCharacter;\r\n\r\n    bool public isSaleLive;\r\n    event SaleLive(bool onSale);\r\n\r\n    constructor(address _tokenCharacterAddress) {\r\n        tokenCharacter = I_TokenCharacter(_tokenCharacterAddress);\r\n    }\r\n\r\n    function buy(uint8 amountToBuy) external payable {\r\n        require(tx.origin == msg.sender, \"EOA only\");\r\n        \r\n        require(isSaleLive, \"Sale is not live\");\r\n        require(amountToBuy <= MINTS_PER_TRANSACTION,\"Too many per transaction\");\r\n\r\n        uint256 totalMinted = tokenCharacter.totalSupply();\r\n        require(totalMinted + amountToBuy <= MAX_MINTABLE,\"Sold out\");\r\n\r\n        uint256 price = 0;\r\n\r\n        if (totalMinted > FREE_MINT_AMOUNT) {\r\n            price = TOKEN_PRICE;\r\n        }\r\n\r\n        require(msg.value >= price * amountToBuy,\"Not enough ETH\");\r\n\r\n        tokenCharacter.Mint(amountToBuy, msg.sender);\r\n        \r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        uint256 totalMinted = tokenCharacter.totalSupply();\r\n        \r\n        if (totalMinted > FREE_MINT_AMOUNT) {\r\n            return TOKEN_PRICE;\r\n        }\r\n\r\n        return 0; //free mint\r\n    }\r\n\r\n    //Variables\r\n    function setPrice(uint256 newPrice) external onlyOwner {\r\n        TOKEN_PRICE = newPrice;\r\n    }\r\n\r\n    function startPublicSale() external onlyOwner {\r\n        isSaleLive = true;\r\n        emit SaleLive(isSaleLive);\r\n    }\r\n\r\n    function stopPublicSale() external onlyOwner ()\r\n    {\r\n        isSaleLive = false;\r\n        emit SaleLive(isSaleLive);\r\n    }\r\n\r\n    function setTransactionLimit(uint256 newAmount) external onlyOwner {\r\n        MINTS_PER_TRANSACTION = newAmount;\r\n    }\r\n\r\n    function setFreeAmount(uint256 newAmount) external onlyOwner {\r\n        FREE_MINT_AMOUNT = newAmount;\r\n    }\r\n\r\n}"
6     },
7     "contracts/Interfaces/I_TokenCharacter.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n//Interface for characters NFT\r\ninterface I_TokenCharacter {\r\n\r\n    function Mint(uint8, address) external; //amount, to\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function setApprovalForAll(address, bool) external;  //address, operator\r\n    function transferFrom(address, address, uint256) external;\r\n    function ownerOf(uint256) external view returns (address); //who owns this token\r\n    function _ownerOf16(uint16) external view returns (address);\r\n\r\n    function addController(address) external;\r\n\r\n}"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "contracts/Models/PaymentsShared.sol": {
14       "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n//simple payments handling for splitting between fixed wallets\r\ncontract PaymentsShared is Ownable, ReentrancyGuard {\r\n\r\n    address WalletA = 0x0939D5c0DAb578ae7DA3cf11bfd4b7e5dc53CD45;\r\n    address WalletB = 0x670c38d686DA822bcc96c565ceE1DD7E007D1544;\r\n    address WalletC = 0x42D2339cA21C7D5df409326068c5CE5975dB5A39;\r\n    address WalletD = 0xBa643BE38D25867E2062890ee5D42aA6879F5586;\r\n\r\n    //payments\r\n    function withdrawAll() external nonReentrant onlyOwner {          \r\n\r\n        uint256 ticks = address(this).balance / 1000;\r\n\r\n        (bool success, ) = WalletA.call{value: ticks * 250}(\"\"); //25%\r\n        require(success, \"Transfer failed.\");\r\n\r\n        payable(WalletB).transfer(ticks * 100); //10%\r\n        payable(WalletC).transfer(ticks * 325); //32.5%\r\n        payable(WalletD).transfer(address(this).balance); //32.5%\r\n    }\r\n\r\n    function withdrawSafety() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n}"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 1000
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}