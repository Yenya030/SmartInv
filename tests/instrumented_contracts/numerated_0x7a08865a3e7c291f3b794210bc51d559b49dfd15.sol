1 {{
2   "language": "Solidity",
3   "sources": {
4     "MainnetRedeemer.sol": {
5       "content": "pragma solidity ^0.8.2;\n\nimport \"IERC721.sol\";\nimport \"IERC1155.sol\";\nimport \"Ownable.sol\";\nimport \"VRFConsumberBase.sol\";\nimport \"IERC1155Burnable.sol\";\n\ncontract TheKlaw is VRFConsumerBaseV2 {\n\tstruct NFT {\n\t\taddress contractAddress;\n\t\tuint256 tokenId;\n\t}\n\n\taddress public immutable GOLDEN_TICKET;\n\tuint256 immutable TICKED_ID;\n\taddress constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n\n\tuint256 totalCount;\n\tmapping(uint256 => NFT) public nfts;\n\tmapping(uint256 => address) public requestIds;\n\tmapping(address => bool) authorised;\n\n\tevent NFTClaimed(address indexed receiver, address indexed tokenAddress, uint256 tokenId);\n\n\tconstructor(address _gold, uint256 _ticketId, address _vrfCoordinator, address _link) VRFConsumerBaseV2(_vrfCoordinator, _link) {\n\t\tGOLDEN_TICKET = _gold;\n\t\tTICKED_ID = _ticketId;\n\t}\n\n\tmodifier isAuthorised() {\n\t\trequire(authorised[msg.sender] || msg.sender == owner());\n        _;\n\t}\n\n\tfunction setAuthorised(address _user, bool _val) external onlyOwner {\n\t\tauthorised[_user] = _val;\n\t}\n\n\tfunction viewNFTs(uint256 _start, uint256 _maxLen) external view returns(NFT[] memory) {\n\t\t// return empty array if _start is out of bounds\n\t\tif (_start >= totalCount)\n\t\t\treturn new NFT[](0);\n\n\t\t// limits _maxLen so we only return existing NFTs \n\t\tif (_start + _maxLen > totalCount)\n\t\t\t_maxLen = totalCount - _start;\n\n\t\tNFT[] memory _nfts = new NFT[](_maxLen);\n\t\tfor (uint256 i = 0; i < _maxLen; i++) {\n\t\t\t_nfts[i] = nfts[i + _start];\n\t\t}\n\t\treturn _nfts;\n\t}\n\n\tfunction depositNFTs(address[] calldata _contracts, uint256[] calldata _tokenIds) external isAuthorised {\n\t\trequire(_contracts.length == _tokenIds.length);\n\t\t\n\t\tuint256 len = _contracts.length;\n\t\tuint256 currentCount = totalCount;\n\t\tfor (uint256 i = 0; i < len; i++) {\n\t\t\tnfts[currentCount++] = NFT(_contracts[i], _tokenIds[i]);\n\t\t}\n\t\ttotalCount = currentCount;\n\t}\n\n\tfunction removeNFTs(uint256[] calldata _nfts) external isAuthorised {\n\t\tuint256 total = totalCount;\n\t\tfor (uint256 i = 0 ; i < _nfts.length; i++) {\n\t\t\taddress nftContract = nfts[_nfts[i]].contractAddress;\n\t\t\tuint256 tokenId = nfts[_nfts[i]].tokenId;\n\n\t\t\tnfts[_nfts[i]] = nfts[total - i - 1];\n\t\t\tdelete nfts[total - i - 1];\n\t\t\tIERC721(nftContract).transferFrom(address(this), owner(), tokenId);\n\t\t}\n\t\ttotalCount -= _nfts.length;\n\t}\n\n\tfunction claimNft() external {\n\t\tuint256 requestId = requestRandomWords();\n\t\trequestIds[requestId] = msg.sender;\n\t\tIERC1155Burnable(GOLDEN_TICKET).burnFor(msg.sender, TICKED_ID, 1);\n\t}\n\n\tfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n\t\taddress receiver = requestIds[requestId];\n\t\tuint256 total = totalCount--;\n\t\tuint256 index = randomWords[0] % total;\n\t\taddress nftContract = nfts[index].contractAddress;\n\t\tuint256 tokenId = nfts[index].tokenId;\n\n\t\tnfts[index] = nfts[total - 1];\n\t\tdelete nfts[total - 1];\n\t\tIERC721(nftContract).transferFrom(address(this), receiver, tokenId);\n\t\temit NFTClaimed(receiver, nftContract, tokenId);\n\t}\n\n\tfunction onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4) {\n\t\treturn TheKlaw.onERC1155Received.selector;\n\t}\n}"
6     },
7     "IERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
9     },
10     "IERC165.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
12     },
13     "IERC1155.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
15     },
16     "Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address internal _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     },
22     "VRFConsumberBase.sol": {
23       "content": "pragma solidity ^0.8.2;\n\nimport \"IVRFCoordinatorV2Interface.sol\";\nimport \"ILink.sol\";\nimport \"Ownable.sol\";\n\nabstract contract VRFConsumerBaseV2 is Ownable {\n\n\tstruct RequestConfig {\n\t\tuint64 subId;\n\t\tuint32 callbackGasLimit;\n\t\tuint16 requestConfirmations;\n\t\tuint32 numWords;\n\t\tbytes32 keyHash;\n\t}\n\n\tRequestConfig public config;\n\tIVRFCoordinatorV2Interface private COORDINATOR;\n\tLinkTokenInterface private LINK;\n\n\n\t/**\n\t* @param _vrfCoordinator address of VRFCoordinator contract\n\t*/\n\t// mainnet coord: 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\n\t// mainnet link:  0x514910771af9ca656af840dff83e8264ecf986ca\n\tconstructor(address _vrfCoordinator, address _link) {\n\t\tCOORDINATOR = IVRFCoordinatorV2Interface(_vrfCoordinator);\n\t\tLINK = LinkTokenInterface(_link);\n\t\t\n\t\tconfig = RequestConfig({\n\t\t\tsubId: 0,\n\t\t\tcallbackGasLimit: 1000000,\n\t\t\trequestConfirmations: 3,\n\t\t\tnumWords: 1,\n\t\t\tkeyHash: 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef\n\t\t});\n\t}\n\n\tfunction setupConfig(uint32 _gasLimit, uint16 _requestConfirmations, uint32 _numWords, bytes32 _keyHash) external onlyOwner {\n\t\tuint64 _subId = config.subId;\n\t\tconfig = RequestConfig({\n\t\t\tsubId: _subId,\n\t\t\tcallbackGasLimit: _gasLimit,\n\t\t\trequestConfirmations: _requestConfirmations,\n\t\t\tnumWords: _numWords,\n\t\t\tkeyHash: _keyHash\n\t\t});\n\t}\n\n\t/**\n\t* @notice fulfillRandomness handles the VRF response. Your contract must\n\t* @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n\t* @notice principles to keep in mind when implementing your fulfillRandomness\n\t* @notice method.\n\t*\n\t* @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n\t* @dev signature, and will call it once it has verified the proof\n\t* @dev associated with the randomness. (It is triggered via a call to\n\t* @dev rawFulfillRandomness, below.)\n\t*\n\t* @param requestId The Id initially returned by requestRandomness\n\t* @param randomWords the VRF output expanded to the requested number of words\n\t*/\n\tfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n\t// rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n\t// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n\t// the origin of the call\n\tfunction rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n\t\trequire (msg.sender == address(COORDINATOR), \"!coordinator\");\n\t\tfulfillRandomWords(requestId, randomWords);\n\t}\n\n\t  // Assumes the subscription is funded sufficiently.\n\tfunction requestRandomWords() internal returns(uint256 requestId) {\n\t\tRequestConfig memory rc = config;\n\t\t// Will revert if subscription is not set and funded.\n\t\trequestId = COORDINATOR.requestRandomWords(\n\t\t\trc.keyHash,\n\t\t\trc.subId,\n\t\t\trc.requestConfirmations,\n\t\t\trc.callbackGasLimit,\n\t\t\trc.numWords\n\t\t);\n\t}\n\n\tfunction topUpSubscription(uint256 amount) external onlyOwner {\n\t\tLINK.transferAndCall(address(COORDINATOR), amount, abi.encode(config.subId));\n\t}\n\n\tfunction withdraw(uint256 amount, address to) external onlyOwner {\n\t\tLINK.transfer(to, amount);\n\t}\n\n\tfunction unsubscribe(address to) external onlyOwner {\n\t\t// Returns funds to this address\n\t\tCOORDINATOR.cancelSubscription(config.subId, to);\n\t\tconfig.subId = 0;\n\t}\n\n\tfunction subscribe() public onlyOwner {\n\t\t// Create a subscription, current subId\n\t\taddress[] memory consumers = new address[](1);\n\t\tconsumers[0] = address(this);\n\t\tconfig.subId = COORDINATOR.createSubscription();\n\t\tCOORDINATOR.addConsumer(config.subId, consumers[0]);\n\t}\n}"
24     },
25     "IVRFCoordinatorV2Interface.sol": {
26       "content": "pragma solidity ^0.8.2;\n\ninterface IVRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}"
27     },
28     "ILink.sol": {
29       "content": "pragma solidity ^0.8.2;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}"
30     },
31     "IERC1155Burnable.sol": {
32       "content": "pragma solidity ^0.8.2;\n\ninterface IERC1155Burnable {\n\tfunction burnFor(address _user, uint256 _tokenId, uint256 _amount) external;\n}"
33     }
34   },
35   "settings": {
36     "evmVersion": "istanbul",
37     "optimizer": {
38       "enabled": true,
39       "runs": 200
40     },
41     "outputSelection": {
42       "*": {
43         "*": [
44           "evm.bytecode",
45           "evm.deployedBytecode",
46           "devdoc",
47           "userdoc",
48           "metadata",
49           "abi"
50         ]
51       }
52     }
53   }
54 }}