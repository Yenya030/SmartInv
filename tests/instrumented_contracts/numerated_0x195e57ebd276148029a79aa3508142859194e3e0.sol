1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "istanbul",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/GSN/Context.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/access/Ownable.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
34     },
35     "@openzeppelin/contracts/math/SafeMath.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
37     },
38     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
40     },
41     "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
43     },
44     "@openzeppelin/contracts/utils/Address.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
46     },
47     "contracts/TulipArt.sol": {
48       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ITulipArt.sol\";\nimport \"./interfaces/ITulipToken.sol\";\nimport \"./libraries/SortitionSumTreeFactory.sol\";\nimport \"./libraries/UniformRandomNumber.sol\";\n\ncontract TulipArt is ITulipArt, Ownable {\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /// @notice We use this enum to identify and enforce the\n    /// states that this contract will go through.\n    enum RoundState {\n        OPEN,\n        DRAWING,\n        CLOSED\n    }\n\n    /// @notice `roundId` is the current round identifier, incremented each round.\n    /// `roundState` is the current state this round is in, progression goes\n    /// from OPEN to DRAWING to CLOSED.\n    struct RoundInfo {\n        uint256 roundId;\n        RoundState roundState;\n    }\n\n    /// @notice `implementation` is the next lottery contract to be implemented.\n    /// `proposedTime` is the time at which this upgrade can happen.\n    struct LotteryCandidate {\n        address implementation;\n        uint256 proposedTime;\n    }\n\n    bytes32 private constant TREE_KEY = keccak256(\"TulipArt/Staking\");\n    uint256 private constant MAX_TREE_LEAVES = 5;\n\n    SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\n\n    address public immutable landToken;\n    address public immutable tulipNFTToken;\n    address public lotteryContract;\n\n    /// The minimum time it has to pass before a lottery candidate can be approved.\n    uint256 public immutable approvalDelay;\n\n    /// The last proposed lottery to switch to.\n    LotteryCandidate public lotteryCandidate;\n\n    /// Store the round info\n    RoundInfo public roundInfo;\n\n    event NewLotteryCandidate(address implementation);\n    event UpgradeLottery(address implementation);\n    event RoundUpdated(uint256 roundId, RoundState roundState);\n    event WinnerSet(address winner, uint256 id);\n\n    /// @notice On contract deployment a new round (1) is created and users can\n    /// deposit tokens from the start.\n    /// @param _landToken: address of the LAND ERC20 token used for staking.\n    /// @param _tulipNFTToken: address of the NFT reward to be minted.\n    /// @param _approvalDelay: time it takes to upgrade a lottery contract.\n    constructor(\n        address _landToken,\n        address _tulipNFTToken,\n        uint256 _approvalDelay\n    ) public {\n        landToken = _landToken;\n        tulipNFTToken = _tulipNFTToken;\n        approvalDelay = _approvalDelay;\n        sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n\n        _createNextRound(1);\n    }\n\n    /// @notice A user can only enter staking during the open phase of a round.\n    /// The tokens are first transfered to this contract and afterwards\n    /// the sortitionSumTree is updated.\n    /// @param _amount: Is the amount of tokens a user wants to stake.\n    function enterStaking(uint256 _amount) external override {\n        require(_amount > 0, \"TulipArt/amounts-0-or-less-not-allowed\");\n        require(\n            roundInfo.roundState == RoundState.OPEN,\n            \"TulipArt/round-not-open\"\n        );\n\n        IERC20(landToken).safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            _amount\n        );\n\n        sortitionSumTrees.set(\n            TREE_KEY,\n            userStake(msg.sender).add(_amount),\n            bytes32(uint256(msg.sender))\n        );\n    }\n\n    /// @notice A user can only leave staking during the open phase of a round.\n    /// Firstly the sortitionSumTree is updated and then the tokens are\n    /// transfered out of this contract.\n    /// @param _amount: Is the amount of tokens a user wants to unstake.\n    function leaveStaking(uint256 _amount) external override {\n        require(_amount > 0, \"TulipArt/amounts-0-or-less-not-allowed\");\n        require(\n            _amount <= userStake(msg.sender),\n            \"TulipArt/insufficient-amount-staked\"\n        );\n        require(\n            roundInfo.roundState == RoundState.OPEN,\n            \"TulipArt/round-not-open\"\n        );\n\n        sortitionSumTrees.set(\n            TREE_KEY,\n            userStake(msg.sender).sub(_amount),\n            bytes32(uint256(msg.sender))\n        );\n\n        IERC20(landToken).safeTransfer(address(msg.sender), _amount);\n    }\n\n    /// @notice The lottery can set the state of this contract to DRAW\n    /// which will disable all functions except `finishDraw()`.\n    /// It will also enable the function `setWinner()` as we are now in\n    /// draw phase.\n    function startDraw() external override onlyLottery {\n        require(totalStaked() > 0, \"TulipArt/no-users\");\n        require(\n            roundInfo.roundState == RoundState.OPEN,\n            \"TulipArt/round-is-not-open\"\n        );\n\n        roundInfo.roundState = RoundState.DRAWING;\n\n        emit RoundUpdated(roundInfo.roundId, RoundState.DRAWING);\n    }\n\n    /// @notice The lottery can set the state of this contract to CLOSED\n    /// to state that this round has finished. This function will\n    /// also create a new round which will enable deposits and\n    /// withdrawals.\n    function finishDraw() external override onlyLottery {\n        require(\n            roundInfo.roundState == RoundState.DRAWING,\n            \"TulipArt/round-is-not-drawing\"\n        );\n\n        roundInfo.roundState = RoundState.CLOSED;\n\n        _createNextRound(totalRounds().add(1));\n\n        emit RoundUpdated(roundInfo.roundId, RoundState.CLOSED);\n    }\n\n    /// @notice We set communicate to the NFT the winner.\n    /// The user can then go and mint the token from the NFT contract.\n    /// @param _winner: address of the winner.\n    function setWinner(address _winner)\n        external\n        override\n        onlyLottery\n    {\n        require(\n            roundInfo.roundState == RoundState.DRAWING,\n            \"TulipArt/round-is-not-drawing\"\n        );\n        uint256 _id = ITulipToken(tulipNFTToken).setTokenWinner(_winner);\n        emit WinnerSet(_winner, _id);\n    }\n\n    /// @notice This function removes tokens sent to this contract. It cannot remove\n    /// the LAND token from this contract.\n    /// @param _token: address of the token to remove from this contract.\n    /// @param _to: address of the location to send this token.\n    /// @param _amount: amount of tokens to remove from this contract.\n    function recoverTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        require(_token != landToken, \"TulipArt/cannot-drain-land-tokens\");\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    /// @notice Returns the user's chance of winning with 6 decimal places or more.\n    /// If a user's chance of winning are 25.3212315673% this function will return\n    /// 25.321231%.\n    /// @param _user: address of a staker.\n    /// @return returns the % chance of victory for this user.\n    function chanceOf(address _user) external view override returns (uint256) {\n        return\n            sortitionSumTrees\n                .stakeOf(TREE_KEY, bytes32(uint256(_user)))\n                .mul(100000000)\n                .div(totalStaked());\n    }\n\n    /// @notice Selects a user using a random number. The random number will\n    /// be uniformly bounded to the total Stake.\n    /// @param randomNumber The random number to use to select a user.\n    /// @return The winner.\n    function draw(uint256 randomNumber)\n        external\n        view\n        override\n        returns (address)\n    {\n        address selected;\n        if (totalStaked() == 0) {\n            selected = address(0);\n        } else {\n            uint256 token = UniformRandomNumber.uniform(\n                randomNumber,\n                totalStaked()\n            );\n            selected = address(\n                uint256(sortitionSumTrees.draw(TREE_KEY, token))\n            );\n        }\n        return selected;\n    }\n\n    /// @notice Sets the candidate for the new lottery to use with this staking\n    /// contract.\n    /// @param _implementation The address of the candidate lottery.\n    function proposeLottery(address _implementation) public onlyOwner {\n        lotteryCandidate = LotteryCandidate({\n            implementation: _implementation,\n            proposedTime: block.timestamp\n        });\n\n        emit NewLotteryCandidate(_implementation);\n    }\n\n    /// @notice It switches the active lottery for the lottery candidate.\n    /// After upgrading, the candidate implementation is set to the 0x00 address,\n    /// and proposedTime to a time happening in +100 years for safety.\n    function upgradeLottery() public onlyOwner {\n        require(\n            roundInfo.roundState == RoundState.OPEN,\n            \"TulipArt/round-not-open\"\n        );\n        require(\n            lotteryCandidate.implementation != address(0),\n            \"TulipArt/there-is-no-candidate\"\n        );\n\n        if (lotteryContract != address(0)) {\n            require(\n                lotteryCandidate.proposedTime.add(approvalDelay) <\n                    block.timestamp,\n                \"TulipArt/delay-has-not-passed\"\n            );\n        }\n\n        emit UpgradeLottery(lotteryCandidate.implementation);\n\n        lotteryContract = lotteryCandidate.implementation;\n        lotteryCandidate.implementation = address(0);\n        lotteryCandidate.proposedTime = 0;\n    }\n\n    /// @return the total rounds that have been played till now.\n    function totalRounds() public view returns (uint256) {\n        return roundInfo.roundId;\n    }\n\n    /// @param _user: address of an account.\n    /// @return returns the total tokens deposited by the user.\n    function userStake(address _user) public view override returns (uint256) {\n        return sortitionSumTrees.stakeOf(TREE_KEY, bytes32(uint256(_user)));\n    }\n\n    /// @return total amount of tokens currently staked in this contract.\n    function totalStaked() public view returns (uint256) {\n        return sortitionSumTrees.total(TREE_KEY);\n    }\n\n    /// @notice internal function to help with the creation of new rounds.\n    /// @param _id: the number of the round that is to be created.\n    function _createNextRound(uint256 _id) internal {\n        roundInfo = RoundInfo({roundId: _id, roundState: RoundState.OPEN});\n        emit RoundUpdated(_id, RoundState.OPEN);\n    }\n\n    /// @notice ensure only a lottery can execute functions with this modifier\n    modifier onlyLottery() {\n        require(msg.sender == lotteryContract, \"TulipArt/error-not-lottery\");\n        _;\n    }\n}\n"
49     },
50     "contracts/interfaces/ITulipArt.sol": {
51       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\ninterface ITulipArt {\n    function enterStaking(uint256 _amount) external;\n\n    function leaveStaking(uint256 _amount) external;\n\n    function setWinner(address _winner) external;\n\n    function startDraw() external;\n\n    function finishDraw() external;\n\n    function chanceOf(address user) external view returns (uint256);\n\n    function userStake(address user) external view returns (uint256);\n\n    function draw(uint256 randomNumber) external view returns (address);\n}\n"
52     },
53     "contracts/interfaces/ITulipToken.sol": {
54       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\ninterface ITulipToken {\n    function setBaseURI(string memory _newURI) external;\n\n    function setDefaultRoyalty(address _royaltyReceiver, uint96 _royaltyFeeNumerator) external;\n\n    function isController(address _controllerAddress)\n        external\n        view\n        returns (bool);\n\n    function changeControllerRole(address _controller, bool _role) external;\n\n    function setTokenWinner(address _winner) external returns (uint256);\n\n    function claimAll() external;\n\n    function burn(uint256 _tokenId) external;\n\n    function recoverTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n"
55     },
56     "contracts/libraries/SortitionSumTreeFactory.sol": {
57       "content": "// SPDX-License-Identifier: UNLICENSED\n/**\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\n *  @auditors: []\n *  @bounties: [<14 days 10 ETH max payout>]\n *  @deployments: []\n */\n\npragma solidity =0.6.12;\n\n/**\n *  @title SortitionSumTreeFactory\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\n *  @dev A factory of trees that keep track of staked values for sortition.\n */\nlibrary SortitionSumTreeFactory {\n    /* Structs */\n\n    struct SortitionSumTree {\n        uint256 K; // The maximum number of childs per node.\n        // We use this to keep track of vacant positions in the tree after removing a leaf.\n        // This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\n        uint256[] stack;\n        uint256[] nodes;\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node,\n        // and means the ID does not have a node.\n        mapping(bytes32 => uint256) IDsToNodeIndexes;\n        mapping(uint256 => bytes32) nodeIndexesToIDs;\n    }\n\n    /* Storage */\n\n    struct SortitionSumTrees {\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\n    }\n\n    /* internal */\n\n    /**\n     *  @dev Create a sortition sum tree at the specified key.\n     *  @param _key The key of the new tree.\n     *  @param _K The number of children each node in the tree should have.\n     */\n    function createTree(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint256 _K\n    ) internal {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        require(tree.K == 0, \"Tree already exists.\");\n        require(_K > 1, \"K must be greater than one.\");\n        tree.K = _K;\n        tree.stack = new uint256[](0);\n        tree.nodes = new uint256[](0);\n        tree.nodes.push(0);\n    }\n\n    /**\n     *  @dev Set a value of a tree.\n     *  @param _key The key of the tree.\n     *  @param _value The new value.\n     *  @param _ID The ID of the value.\n     *  `O(log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function set(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint256 _value,\n        bytes32 _ID\n    ) internal {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\n\n        if (treeIndex == 0) {\n            // No existing node.\n            if (_value != 0) {\n                // Non zero value.\n                // Append.\n                // Add node.\n                if (tree.stack.length == 0) {\n                    // No vacant spots.\n                    // Get the index and append the value.\n                    treeIndex = tree.nodes.length;\n                    tree.nodes.push(_value);\n\n                    // Potentially append a new node and make the parent a sum node.\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\n                        // Is first child.\n                        uint256 parentIndex = treeIndex / tree.K;\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\n                        uint256 newIndex = treeIndex + 1;\n                        tree.nodes.push(tree.nodes[parentIndex]);\n                        delete tree.nodeIndexesToIDs[parentIndex];\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\n                    }\n                } else {\n                    // Some vacant spot.\n                    // Pop the stack and append the value.\n                    treeIndex = tree.stack[tree.stack.length - 1];\n                    tree.stack.pop();\n                    tree.nodes[treeIndex] = _value;\n                }\n\n                // Add label.\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\n\n                updateParents(self, _key, treeIndex, true, _value);\n            }\n        } else {\n            // Existing node.\n            if (_value == 0) {\n                // Zero value.\n                // Remove.\n                // Remember value and set to 0.\n                uint256 value = tree.nodes[treeIndex];\n                tree.nodes[treeIndex] = 0;\n\n                // Push to stack.\n                tree.stack.push(treeIndex);\n\n                // Clear label.\n                delete tree.IDsToNodeIndexes[_ID];\n                delete tree.nodeIndexesToIDs[treeIndex];\n\n                updateParents(self, _key, treeIndex, false, value);\n            } else if (_value != tree.nodes[treeIndex]) {\n                // New, non zero value.\n                // Set.\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\n                uint256 plusOrMinusValue = plusOrMinus\n                    ? _value - tree.nodes[treeIndex]\n                    : tree.nodes[treeIndex] - _value;\n                tree.nodes[treeIndex] = _value;\n\n                updateParents(\n                    self,\n                    _key,\n                    treeIndex,\n                    plusOrMinus,\n                    plusOrMinusValue\n                );\n            }\n        }\n    }\n\n    /* internal Views */\n\n    /**\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree\n     *       is empty and the root node will be returned.\n     *  @param _key The key of the tree to get the leaves from.\n     *  @param _cursor The pagination cursor.\n     *  @param _count The number of items to return.\n     *  @return startIndex The index at which leaves start\n     *  @return values The values of the returned leaves\n     *  @return hasMore Whether there are more for pagination.\n     *  `O(n)` where\n     *  `n` is the maximum number of nodes ever appended.\n     */\n    function queryLeafs(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint256 _cursor,\n        uint256 _count\n    )\n        internal\n        view\n        returns (\n            uint256 startIndex,\n            uint256[] memory values,\n            bool hasMore\n        )\n    {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n\n        // Find the start index.\n        for (uint256 i = 0; i < tree.nodes.length; i++) {\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\n                startIndex = i;\n                break;\n            }\n        }\n\n        // Get the values.\n        uint256 loopStartIndex = startIndex + _cursor;\n        values = new uint256[](\n            loopStartIndex + _count > tree.nodes.length\n                ? tree.nodes.length - loopStartIndex\n                : _count\n        );\n        uint256 valuesIndex = 0;\n        for (uint256 j = loopStartIndex; j < tree.nodes.length; j++) {\n            if (valuesIndex < _count) {\n                values[valuesIndex] = tree.nodes[j];\n                valuesIndex++;\n            } else {\n                hasMore = true;\n                break;\n            }\n        }\n    }\n\n    /**\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts\n     *       if the sum of all values in the tree is 0.\n     *  @param _key The key of the tree.\n     *  @param _drawnNumber The drawn number.\n     *  @return ID The drawn ID.\n     *  `O(k * log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function draw(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint256 _drawnNumber\n    ) internal view returns (bytes32 ID) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint256 treeIndex = 0;\n        uint256 currentDrawnNumber = _drawnNumber % tree.nodes[0];\n\n        while (\n            (tree.K * treeIndex) + 1 < tree.nodes.length // While it still has children.\n        )\n            for (uint256 i = 1; i <= tree.K; i++) {\n                // Loop over children.\n                uint256 nodeIndex = (tree.K * treeIndex) + i;\n                uint256 nodeValue = tree.nodes[nodeIndex];\n\n                if (currentDrawnNumber >= nodeValue)\n                    currentDrawnNumber -= nodeValue; // Go to the next child.\n                else {\n                    // Pick this child.\n                    treeIndex = nodeIndex;\n                    break;\n                }\n            }\n\n        ID = tree.nodeIndexesToIDs[treeIndex];\n    }\n\n    /** @dev Gets a specified ID's associated value.\n     *  @param _key The key of the tree.\n     *  @param _ID The ID of the value.\n     *  @return value The associated value.\n     */\n    function stakeOf(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        bytes32 _ID\n    ) internal view returns (uint256 value) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\n\n        if (treeIndex == 0) value = 0;\n        else value = tree.nodes[treeIndex];\n    }\n\n    function total(SortitionSumTrees storage self, bytes32 _key)\n        internal\n        view\n        returns (uint256)\n    {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        if (tree.nodes.length == 0) {\n            return 0;\n        } else {\n            return tree.nodes[0];\n        }\n    }\n\n    /* Private */\n\n    /**\n     *  @dev Update all the parents of a node.\n     *  @param _key The key of the tree to update.\n     *  @param _treeIndex The index of the node to start from.\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\n     *  @param _value The value to add or substract.\n     *  `O(log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function updateParents(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint256 _treeIndex,\n        bool _plusOrMinus,\n        uint256 _value\n    ) private {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n\n        uint256 parentIndex = _treeIndex;\n        while (parentIndex != 0) {\n            parentIndex = (parentIndex - 1) / tree.K;\n            tree.nodes[parentIndex] = _plusOrMinus\n                ? tree.nodes[parentIndex] + _value\n                : tree.nodes[parentIndex] - _value;\n        }\n    }\n}\n"
58     },
59     "contracts/libraries/UniformRandomNumber.sol": {
60       "content": "// SPDX-License-Identifier: UNLICENSED\n\n/**\nCopyright 2019 PoolTogether LLC\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity =0.6.12;\n\n/**\n * @author Brendan Asselstine\n * @notice A library that uses entropy to select a random number within a bound.  Compensates for modulo bias.\n * @dev Thanks to https://medium.com/hownetworks/dont-waste-cycles-with-modulo-bias-35b6fdafcf94\n */\nlibrary UniformRandomNumber {\n    /// @notice Select a random number without modulo bias using a random seed and upper bound\n    /// @param _entropy The seed for randomness\n    /// @param _upperBound The upper bound of the desired number\n    /// @return A random number less than the _upperBound\n    function uniform(uint256 _entropy, uint256 _upperBound)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(_upperBound > 0, \"UniformRand/min-bound\");\n        uint256 min = -_upperBound % _upperBound;\n        uint256 random = _entropy;\n        while (true) {\n            if (random >= min) {\n                break;\n            }\n            random = uint256(keccak256(abi.encodePacked(random)));\n        }\n        return random % _upperBound;\n    }\n}"
61     }
62   }
63 }}