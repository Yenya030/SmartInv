1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/DemonsPortal.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC721 {\n\n    /**\n * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) external;\n\n}\n\ncontract DemonsPortal is Ownable {\n    event SendThroughPortalEvent(address from, uint demonId, uint buernedHellId, uint keyId);\n\n\n    // Contracts\n    IERC721 private hell;\n    IERC721 private keys;\n\n    // Hells ducks that were turned into demons\n    mapping(uint256 => bool) private _demonIds;\n\n\n    // Burner address\n    address private _burnerAddress = 0x000000000000000000000000000000000000dEaD;\n\n    bool private _isPortalActive = false;\n\n\n    constructor(address hellAddress, address keyAddress) {\n        hell = IERC721(hellAddress);\n        keys = IERC721(keyAddress);\n    }\n\n    function sendThroughPortal(uint256 demonId, uint256 hellId, uint256 keyId) public {\n        require(_isPortalActive, \"Portal is not active.\");\n\n        require(demonId != hellId, \"The tokens must be different\");\n        require(hell.ownerOf(demonId) == msg.sender, \"You must own the requested Demon token.\");\n        require(hell.ownerOf(hellId) == msg.sender, \"You must own the requested Hell token.\");\n        require(keys.ownerOf(keyId) == msg.sender, \"You must own the requested Key token.\");\n\n        require(!_demonIds[demonId], \"Hell duck was already transformed into a demon\");\n\n        // Burn Tokens\n        hell.safeTransferFrom(msg.sender, _burnerAddress, hellId);\n        keys.burn(keyId);\n\n        // Mark the 2 Gen as used\n        _demonIds[demonId] = true;\n\n        emit SendThroughPortalEvent(msg.sender, demonId, hellId, keyId);\n    }\n\n    function flipPortalState() public onlyOwner {\n        _isPortalActive = !_isPortalActive;\n    }\n\n    function setBurnerAddress(address newBurnerAddress) public onlyOwner {\n        _burnerAddress = newBurnerAddress;\n    }\n\n    function burnerAddress() public view returns (address) {\n        return _burnerAddress;\n    }\n\n    function isDemon(uint256 demonId) public view returns (bool) {\n        return _demonIds[demonId];\n    }\n\n    function isPortalActive() public view returns (bool) {\n        return _isPortalActive;\n    }\n\n    function setDemonIds(uint256[] memory demonIds) onlyOwner public {\n        for(uint256 i = 0; i< demonIds.length; i++) {\n            _demonIds[demonIds[i]] = true;\n        }\n    }\n\n    function removeDemonIds(uint256[] memory demonIds) onlyOwner public {\n        for(uint256 i = 0; i<demonIds.length; i++) {\n            _demonIds[demonIds[i]] = false;\n        }\n    }\n}\n\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": false,
17       "runs": 200
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     },
31     "libraries": {}
32   }
33 }}