1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Topia.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IPYESwapFactory.sol\";\nimport \"./interfaces/IPYESwapRouter.sol\";\n\n\ncontract TOPIA is AccessControl, ERC20 {\n    using SafeMath for uint256;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    bytes32 public constant FEE_SETTER_ROLE = keccak256(\"FEE_SETTER_ROLE\");\n\n    // Fees\n    // Add and remove fee types and destinations here as needed\n    struct Fees {\n        uint256 buybackFee;\n    }\n\n    // Transaction fee values\n    // Add and remove fee value types here as needed\n    struct FeeValues {\n        uint256 transferAmount;\n        uint256 buyback;\n    }\n\n    // Token details\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n   \n    // denylist for WALLETS\t\n    mapping (address => bool) public isDenylisted;\n    mapping (address => bool) public isAddressAllowlistedOut;\n    mapping (address => bool) public allowedTransfer;\n    bool public transferRestricted;\n\n    // contract whitelist\n    mapping (address => bool) allowedContracts; \t\n     \n    // Set total supply here\n    uint256 private _tTotal;\n\n    // Tracker for total burned amount\n    uint256 private _bTotal;\n\n    // auto set buyback to false. additional buyback params. blockPeriod acts as a time delay in the shouldAutoBuyback(). Last uint represents last block for buyback occurance.\n    struct Settings {\n        bool autoBuybackEnabled;\n        uint256 autoBuybackCap;\n        uint256 autoBuybackAccumulator;\n        uint256 autoBuybackAmount;\n        uint256 autoBuybackBlockPeriod;\n        uint256 autoBuybackBlockLast;\n        uint256 minimumBuyBackThreshold;\n    }\n\n    // Users states\n    mapping (address => bool) private _isExcludedFromFee;\n\n    // Daily Transfer Limit\n    bool public transferLimitEnabled = true;\n    uint256 public transferLimit = 100 ether;\n    struct DailyTransfer {\n        uint256 startTime;\n        uint256 endTime;\n        uint256 periodTransfers;\n    }\n    mapping (address => DailyTransfer) public DailyTransfers;\n\n    // Outside Swap Pairs\n    mapping (address => bool) private _includeSwapFee;\n\n\n    // Pair Details\n    mapping (uint256 => address) private pairs;\n    mapping (uint256 => address) private tokens;\n    uint256 private pairsLength;\n    mapping (address => bool) public _isPairAddress;\n\n\n    // Set the name, symbol, and decimals here\n    string constant _name = \"TOPIA\";\n    string constant _symbol = \"TOPIA\";\n    uint8 constant _decimals = 18;\n\n    Fees private _defaultFees;\n    Fees private _previousFees;\n    Fees private _emptyFees;\n    Fees public _buyFees;\n    Fees public _sellFees;\n    Fees private _outsideBuyFees;\n    Fees private _outsideSellFees;\n\n    Settings public _buyback;\n\n    IPYESwapRouter public pyeSwapRouter;\n    address public pyeSwapPair;\n    address public WETH;\n    address public constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\n\n    bool public swapEnabled = true;\n    bool inSwap;\n\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n    modifier onlyExchange() {\n        bool isPair = false;\n        for(uint i = 0; i < pairsLength; i++) {\n            if(pairs[i] == msg.sender) isPair = true;\n        }\n        require(\n            msg.sender == address(pyeSwapRouter)\n            || isPair\n            , \"PYE: NOT_ALLOWED\"\n        );\n        _;\n    }\n\n    // @dev: disallows contracts from entering\n    modifier notContract() {\n        require(!_isContract(msg.sender), \"Contract not allowed\");\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\n        _;\n    }\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    // Edit the constructor in order to declare default fees on deployment\n    constructor (address _router, uint256 _buybackFeeBuy, uint256 _buybackFeeSell) ERC20(\"\",\"\") {\n        _setupRole(MINTER_ROLE, msg.sender);\n        _setupRole(BURNER_ROLE, msg.sender);\n        _setupRole(FEE_SETTER_ROLE, msg.sender);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        pyeSwapRouter = IPYESwapRouter(_router);\n        WETH = pyeSwapRouter.WETH();\n        pyeSwapPair = IPYESwapFactory(pyeSwapRouter.factory())\n        .createPair(address(this), WETH, true, address(this));\n\n        tokens[pairsLength] = WETH;\n        pairs[pairsLength] = pyeSwapPair;\n        pairsLength += 1;\n        _isPairAddress[pyeSwapPair] = true;\n\n        _isExcludedFromFee[_msgSender()] = true;\n        _isExcludedFromFee[pyeSwapPair] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_burnAddress] = true;\n        allowedTransfer[_msgSender()] = true;\n        allowedTransfer[address(this)] = true;\n        allowedTransfer[_burnAddress] = true;   \n        isAddressAllowlistedOut[msg.sender] = true; \n        isAddressAllowlistedOut[address(this)] = true;   \n\n        // This should match the struct Fee\n        _defaultFees = Fees(\n            \n            _buybackFeeBuy\n        );\n\n        _buyFees = Fees(\n            \n            _buybackFeeBuy\n        );\n\n        _sellFees = Fees(\n            _buybackFeeSell\n        );\n\n        _outsideBuyFees = Fees(\n            _buybackFeeBuy\n            \n        );\n\n        _outsideSellFees = Fees(\n            _buybackFeeSell\n        );\n\n        transferRestricted = true;\n    }\n\n    // @dev: returns the size of the code of an address. If >0, address is a contract. \n    function _isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n\n    function name() public pure override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function totalBurned() public view returns (uint256) {\n        return _balances[_burnAddress].add(_bTotal);\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        require(msg.sender == tx.origin || allowedContracts[msg.sender], \"Proxy contract not allowed\");\n        if(transferRestricted) { \n            require(allowedTransfer[msg.sender] || allowedTransfer[recipient], \"Transfer not allowed\"); \n        }\n        if (_isContract(msg.sender)) {\n            require(allowedContracts[msg.sender], \"This contract is not approved to interact with TOPIA\");\n        }\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        require(msg.sender == tx.origin || allowedContracts[msg.sender], \"Proxy contract not allowed\");\n        if(transferRestricted) { \n            require(allowedTransfer[sender] || allowedTransfer[recipient], \"Transfer not allowed\"); \n        }\n        if (_isContract(msg.sender)) {\n            require(allowedContracts[msg.sender], \"This contract is not approved to interact with TOPIA\");\n        }\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function excludeFromFee(address account) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _isExcludedFromFee[account] = false;\n    }\n\n    function addOutsideSwapPair(address account) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _includeSwapFee[account] = true;\n    }\n\n    function removeOutsideSwapPair(address account) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _includeSwapFee[account] = false;\n    }\n\n    // Functions to update fees and addresses \n\n    function setBuyFees(uint256 _developmentFee, uint256 _buybackFee) external {\n        require(hasRole(FEE_SETTER_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        require(_developmentFee.add(_buybackFee) <= 2500, \"Fees exceed max limit\");\n       \n        _defaultFees.buybackFee = _buybackFee;\n        _buyFees.buybackFee = _buybackFee;\n    }\n\n    function setSellFees(uint256 _developmentFee, uint256 _buybackFee) external {\n        require(hasRole(FEE_SETTER_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        require(_developmentFee.add(_buybackFee) <= 2500, \"Fees exceed max limit\");\n        \n        _sellFees.buybackFee = _buybackFee;\n    }\n\n    function updateRouterAndPair(address _router, address _pair) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _isExcludedFromFee[pyeSwapPair] = false;\n        pyeSwapRouter = IPYESwapRouter(_router);\n        pyeSwapPair = _pair;\n        WETH = pyeSwapRouter.WETH();\n\n        _isPairAddress[pyeSwapPair] = true;\n        _isExcludedFromFee[pyeSwapPair] = true;\n        allowedContracts[pyeSwapPair] = true;\n        allowedContracts[_router] = true;\n        allowedTransfer[pyeSwapPair] = true;\n        allowedTransfer[_router] = true;\n        isAddressAllowlistedOut[pyeSwapPair] = true;\n        isAddressAllowlistedOut[_router] = true;\n\n        pairs[0] = pyeSwapPair;\n        tokens[0] = WETH;\n    }\n\n    function enablePYESwap() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        allowedContracts[pyeSwapPair] = true;\n        allowedContracts[address(pyeSwapRouter)] = true;\n        allowedTransfer[pyeSwapPair] = true;\n        allowedTransfer[address(pyeSwapRouter)] = true;\n        isAddressAllowlistedOut[pyeSwapPair] = true;\n        isAddressAllowlistedOut[address(pyeSwapRouter)] = true;\n\n    }\n\n    function setTransferLimit(uint256 _amount) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        transferLimit = _amount;\n    }\n\n    function setTransferRestricted(bool _restricted) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        transferRestricted = _restricted;\n    }\n\n    function addGameContract(address _gameAddress) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        grantRole(MINTER_ROLE, _gameAddress);\n        grantRole(BURNER_ROLE, _gameAddress);\n        allowedContracts[_gameAddress] = true;\n        allowedTransfer[_gameAddress] = true;\n    }\n\n    //to receive BNB from pyeRouter when swapping\n    receive() external payable {}\n\n    function _getValues(uint256 tAmount) private view returns (FeeValues memory) {\n        FeeValues memory values = FeeValues(\n            tAmount,\n            calculateFee(tAmount, _defaultFees.buybackFee)\n        );\n\n        values.transferAmount = tAmount.sub(values.buyback);\n        return values;\n    }\n\n    function calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\n        if(_fee == 0) return 0;\n        return _amount.mul(_fee).div(\n            10**4\n        );\n    }\n\n    function removeAllFee() private {\n        _previousFees = _defaultFees;\n        _defaultFees = _emptyFees;\n    }\n\n    function setSellFee() private {\n        _defaultFees = _sellFees;\n    }\n\n    function setOutsideBuyFee() private {\n        _previousFees = _defaultFees;\n        _defaultFees = _outsideBuyFees;\n    }\n\n    function setOutsideSellFee() private {\n        _previousFees = _defaultFees;\n        _defaultFees = _outsideSellFees;\n    }\n\n    function restoreAllFee() private {\n        _defaultFees = _previousFees;\n    }\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(!isDenylisted[to]);\n       \n        if(shouldAutoBuyback(amount)){ triggerAutoBuyback(); }\n\n        //indicates if fee should be deducted from transfer of tokens\n        uint8 takeFee = 0;\n        if(_isPairAddress[to] && from != address(pyeSwapRouter) && !isExcludedFromFee(from)) {\n            require(dailyAllowed(from, amount));\n            takeFee = 1;\n        } else if(_includeSwapFee[from]) {\n            takeFee = 2;\n        } else if(_includeSwapFee[to]) {\n            require(dailyAllowed(from, amount));\n            takeFee = 3;\n        }\n\n        //transfer amount, it will take tax\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function dailyAllowed(address from, uint256 amount) internal returns (bool) {\n        if(!transferLimitEnabled || isAddressAllowlistedOut[from]) {\n            return true;\n        } else if(DailyTransfers[from].endTime < block.timestamp && amount <= transferLimit) {\n            DailyTransfers[from].startTime = block.timestamp;\n            DailyTransfers[from].endTime = block.timestamp + 1 days;\n            DailyTransfers[from].periodTransfers = amount;\n            return true;\n        } else if(DailyTransfers[from].periodTransfers.add(amount) <= transferLimit) {\n            DailyTransfers[from].periodTransfers = DailyTransfers[from].periodTransfers.add(amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _tTotal.sub(balanceOf(_burnAddress)).sub(balanceOf(address(0)));\n    }\n\n    function getTotalFee(address account) public view returns (uint256) {\n        if(_isExcludedFromFee[account]) {\n            return 0;\n        } else {\n        return _defaultFees.buybackFee;\n        }\n    }\n\n    function getFee() public view returns (uint256) {\n        return _defaultFees.buybackFee;\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 amount, uint8 takeFee) private {\n        if(takeFee == 0 || takeFee == 1) {\n            removeAllFee();\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n            _balances[recipient] = _balances[recipient].add(amount);\n\n            emit Transfer(sender, recipient, amount);\n\n            if(takeFee == 0) {\n                restoreAllFee();\n            } else if(takeFee == 1) {\n                setSellFee();\n            }\n        } else {\n            if(takeFee == 2) {\n                setOutsideBuyFee();\n            } else if(takeFee == 3) {\n                setOutsideSellFee();\n            }\n\n            FeeValues memory _values = _getValues(amount);\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n            _balances[recipient] = _balances[recipient].add(_values.transferAmount);\n            _takeFees(_values);\n\n            emit Transfer(sender, recipient, _values.transferAmount);\n            emit Transfer(sender, _burnAddress, _values.buyback);\n\n            restoreAllFee();\n        }\n    }\n\n    function _takeFees(FeeValues memory values) private {\n        _takeFee(values.buyback, _burnAddress);\n    }\n\n    function _takeFee(uint256 tAmount, address recipient) private {\n        if(recipient == address(0)) return;\n        if(tAmount == 0) return;\n\n        _balances[address(this)] = _balances[address(this)].add(tAmount);\n    }\n\n    // This function transfers the fees to the correct addresses. \n    function handleFee(uint256 amount, address token) public onlyExchange {\n        if(amount == 0) {\n            restoreAllFee(); \n        } else {\n            uint256 tokenIndex = _getTokenIndex(token);\n            if(tokenIndex < pairsLength) {\n                uint256 allowanceT = IERC20(token).allowance(msg.sender, address(this));\n                if(allowanceT >= amount) {\n                    IERC20(token).transferFrom(msg.sender, address(this), amount);\n                    if(token != WETH) {\n                        swapToWETH(amount, token);\n                    }\n                    restoreAllFee();\n                }\n            }\n        }\n    }\n\n    function swapToWETH(uint256 amount, address token) internal {\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = WETH;\n\n        IERC20(token).approve(address(pyeSwapRouter), amount);\n        pyeSwapRouter.swapExactTokensForTokens(\n            amount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    // runs check to see if autobuyback should trigger\n    function shouldAutoBuyback(uint256 amount) internal view returns (bool) {\n        return msg.sender != pyeSwapPair\n        && !inSwap\n        && _buyback.autoBuybackEnabled\n        && _buyback.autoBuybackBlockLast + _buyback.autoBuybackBlockPeriod <= block.number // After N blocks from last buyback\n        && IERC20(address(WETH)).balanceOf(address(this)) >= _buyback.autoBuybackAmount\n        && amount >= _buyback.minimumBuyBackThreshold;\n    }\n\n    // triggers auto buyback\n    function triggerAutoBuyback() internal {\n        buyTokens(_buyback.autoBuybackAmount, _burnAddress);\n        _buyback.autoBuybackBlockLast = block.number;\n        _buyback.autoBuybackAccumulator = _buyback.autoBuybackAccumulator.add(_buyback.autoBuybackAmount);\n        if(_buyback.autoBuybackAccumulator > _buyback.autoBuybackCap){ _buyback.autoBuybackEnabled = false; }\n    }\n\n    // logic to purchase tokens\n    function buyTokens(uint256 amount, address to) internal swapping {\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = address(this);\n\n        IERC20(WETH).approve(address(pyeSwapRouter), amount);\n        pyeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amount,\n            0,\n            path,\n            to,\n            block.timestamp\n        );\n    }\n\n    // manually adjust the buyback settings to suit your needs\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period, uint256 _minimumThreshold) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _buyback.autoBuybackEnabled = _enabled;\n        _buyback.autoBuybackCap = _cap;\n        _buyback.autoBuybackAccumulator = 0;\n        _buyback.autoBuybackAmount = _amount;\n        _buyback.autoBuybackBlockPeriod = _period;\n        _buyback.autoBuybackBlockLast = block.number;\n        _buyback.minimumBuyBackThreshold = _minimumThreshold;\n    }\n\n    function _getTokenIndex(address _token) internal view returns (uint256) {\n        uint256 index = pairsLength + 1;\n        for(uint256 i = 0; i < pairsLength; i++) {\n            if(tokens[i] == _token) index = i;\n        }\n\n        return index;\n    }\n\n    function addPair(address _pair, address _token) public {\n        address factory = pyeSwapRouter.factory();\n        require(\n            msg.sender == factory\n            || msg.sender == address(pyeSwapRouter)\n            || msg.sender == address(this)\n        , \"PYE: NOT_ALLOWED\"\n        );\n\n        if(!_checkPairRegistered(_pair)) {\n            _isExcludedFromFee[_pair] = true;\n            _isPairAddress[_pair] = true;\n            allowedContracts[_pair] = true;\n            allowedTransfer[_pair] = true;\n\n            pairs[pairsLength] = _pair;\n            tokens[pairsLength] = _token;\n\n            pairsLength += 1;\n        }\n    }\n\n    function _checkPairRegistered(address _pair) internal view returns (bool) {\n        bool isPair = false;\n        for(uint i = 0; i < pairsLength; i++) {\n            if(pairs[i] == _pair) isPair = true;\n        }\n\n        return isPair;\n    }\n\n    // Rescue bnb that is sent here by mistake\n    function rescueBNB(uint256 amount, address to) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        payable(to).transfer(amount);\n      }\n\n    // Rescue tokens that are sent here by mistake\n    function rescueToken(IERC20 token, uint256 amount, address to) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        if( token.balanceOf(address(this)) < amount ) {\n            amount = token.balanceOf(address(this));\n        }\n        token.transfer(to, amount);\n    }\n\n    /**\t\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\t\n     *\t\n     * Does not update the allowance amount in case of infinite allowance.\t\n     * Revert if not enough allowance is available.\t\n     *\t\n     * Might emit an {Approval} event.\t\n     */\t\n    function _spendAllowance(\t\n        address owner,\t\n        address spender,\t\n        uint256 amount\t\n    ) internal override virtual {\t\n        uint256 currentAllowance = allowance(owner, spender);\t\n        if (currentAllowance != type(uint256).max) {\t\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\t\n            unchecked {\t\n                _approve(owner, spender, currentAllowance - amount);\t\n            }\t\n        }\t\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) override internal {\n        require(account != address(0), 'BEP20: mint to the zero address');\n\n        _tTotal = _tTotal.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) override internal {\t\n        require(account != address(0), 'BEP20: burn from the zero address');\t\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\t\n        _tTotal = _tTotal.sub(amount);\n        _bTotal = _bTotal.add(amount);\t\n        emit Transfer(account, address(0), amount);\t\n    }\n\n    \n    function burnFrom(address _from, uint256 _amount) public {\t\n        require(hasRole(BURNER_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\t\n        _spendAllowance(_from, msg.sender, _amount);\n        _burn(_from, _amount);\t\n        \n    }\t\n\n\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n    function mint(address _to, uint256 _amount) public {\n        require(hasRole(MINTER_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _mint(_to, _amount);\n        \n    }\n\n    function burn(uint256 _amount) public {\n        require(hasRole(BURNER_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        _burn(msg.sender, _amount);\n\n    }\n\n\t\n    //--------------------------------------BEGIN DENYLIST FUNCTIONS---------|\t\n\n    // enter an address to denylist it. This blocks transfers TO that address. Denylisted members can still sell.\t\n    function denylistAddress(address addressToBlacklist) external {\t\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\t\n        require(!isDenylisted[addressToBlacklist] , \"Address is already denylisted!\");\t\n        isDenylisted[addressToBlacklist] = true;\t\n    }\n\n    // enter a currently denylisted address to un-denylist it.\t\n    function removeFromDenylist(address addressToRemove) external {\t\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\t\n        require(isDenylisted[addressToRemove] , \"Address has not been denylisted! Enter an address that is on the denylist.\");\t\n        isDenylisted[addressToRemove] = false;\t\n    }\n\n    /// Functions to allowlist selected wallets\n    function setAllowlistWalletOut(address wallet, bool flag) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        isAddressAllowlistedOut[wallet] = flag;\n    }\n\n    function setAllowedContract(address _contract, bool flag) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"TOPIA: NOT_ALLOWED\");\n        require(_isContract(_contract), \"The address you entered is returning a extcodesize of 0 - please ensure this is a contract and not a wallet!\");\n        allowedContracts[_contract] = flag;\n    }\n\n}"
6     },
7     "contracts/interfaces/IPYESwapRouter.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport './IPYESwapRouter01.sol';\n\ninterface IPYESwapRouter is IPYESwapRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function pairFeeAddress(address pair) external view returns (address);\n    function adminFee() external view returns (uint256);\n    function feeAddressGet() external view returns (address);\n}"
9     },
10     "contracts/interfaces/IPYESwapFactory.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IPYESwapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function pairExist(address pair) external view returns (bool);\n\n    function createPair(address tokenA, address tokenB, bool supportsTokenFee, address feeTaker) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function routerInitialize(address) external;\n    function routerAddress() external view returns (address);\n}"
12     },
13     "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
15     },
16     "@openzeppelin/contracts/access/AccessControl.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
21     },
22     "contracts/interfaces/IPYESwapRouter01.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPYESwapRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Strings.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/access/IAccessControl.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
42     },
43     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
45     }
46   },
47   "settings": {
48     "optimizer": {
49       "enabled": true,
50       "runs": 999999
51     },
52     "outputSelection": {
53       "*": {
54         "*": [
55           "evm.bytecode",
56           "evm.deployedBytecode",
57           "abi"
58         ]
59       }
60     }
61   }
62 }}