1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/TheKoreans1945Minter.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./standards/IERC721G.sol\";\n\ncontract TheKoreans1945Minter is Ownable {\n    event SetNFTWhitelist(address nft, bool status);\n    event SetUserWhitelist(address user, bool status);\n    event Mint(address user, uint256 tokenId);\n    event Airdrop(address[] users, uint256 initialId, uint256 lastId);\n\n    uint256 public constant preMintTime = 1660564800; //15Aug22 12:00PM UTC\n    uint256 public constant wlMintTime = 1660568400; //15Aug22 13:00PM UTC\n    uint256 public constant publicMintTime = 1660654800; //16Aug22 13:00PM UTC\n\n    IERC721G public immutable KOREANS;\n    mapping(address => bool) public nftForPreMint;\n    mapping(address => bool) public isListedNFT;\n    mapping(address => bool) public isListedUser;\n    mapping(address => mapping(address => uint256)) public mintedAmount;\n\n    constructor(IERC721G _KOREANS, address[] memory wlNFTs, address[] memory nftsForPreMint) {\n        KOREANS = _KOREANS;\n\n        uint256 amount = wlNFTs.length;\n        for (uint256 i = 0; i < amount; i++) {\n            isListedNFT[wlNFTs[i]] = true;\n            emit SetNFTWhitelist(wlNFTs[i], true);\n        }\n\n        amount = nftsForPreMint.length;\n        require(amount == 4, \"INVALID_NFTS_FOR_PREMINT\");\n        for (uint256 i = 0; i < amount; i++) {\n            nftForPreMint[nftsForPreMint[i]] = true;\n        }\n    }\n\n    function setNFTForPreMint(address[] calldata nfts, bool status) external onlyOwner {\n        for (uint256 i = 0; i < nfts.length; i++) {\n            nftForPreMint[nfts[i]] = status;\n        }\n    }\n\n    function setNFTWhitelist(address[] calldata nfts, bool status) external onlyOwner {\n        for (uint256 i = 0; i < nfts.length; i++) {\n            isListedNFT[nfts[i]] = status;\n            emit SetNFTWhitelist(nfts[i], status);\n        }\n    }\n\n    function setUserWhitelist(address[] calldata users, bool status) external onlyOwner {\n        for (uint256 i = 0; i < users.length; i++) {\n            isListedUser[users[i]] = status;\n            emit SetUserWhitelist(users[i], status);\n        }\n    }\n\n    function airdrop(address[] calldata users) external onlyOwner {\n        uint256 startId = KOREANS.totalSupply();\n        for (uint256 i = 0; i < users.length; i++) {\n            KOREANS.mint(users[i], startId + i);\n            emit Mint(users[i], startId + i);\n        }\n        emit Airdrop(users, startId, startId + users.length - 1);\n    }\n\n    function mint(address nft) external {\n        if (block.timestamp < preMintTime) {\n            revert(\"NOT_STARTED_YET\");\n        } else if (block.timestamp < wlMintTime) {\n            if (nft == address(0)) {\n                require(isListedUser[msg.sender], \"UNAUTHORIZED\");\n                delete isListedUser[msg.sender];\n            } else {\n                require(KOREANS.totalSupply() < 945);\n                require(nftForPreMint[nft], \"NOT_YET_WITH_THIS_NFT\");\n                uint256 _mintedAmount = mintedAmount[msg.sender][nft]++;\n                require(_mintedAmount == 0, \"ONLY_1_NFT_IN_PREMINT_TIME\");\n                require(_mintedAmount < IERC721(nft).balanceOf(msg.sender), \"OUT_OF_RANGE\");\n            }\n        } else if (block.timestamp < publicMintTime) {\n            if (nft == address(0)) {\n                require(isListedUser[msg.sender], \"UNAUTHORIZED\");\n                delete isListedUser[msg.sender];\n            } else {\n                require(isListedNFT[nft], \"INVALID_NFT_ADDRESS\");\n                require(mintedAmount[msg.sender][nft]++ < IERC721(nft).balanceOf(msg.sender), \"OUT_OF_RANGE\");\n            }\n        }\n\n        uint256 tokenId = KOREANS.totalSupply();\n        KOREANS.mint(msg.sender, tokenId);\n        emit Mint(msg.sender, tokenId);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "contracts/standards/IERC721G.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\n\ninterface IERC721G is IERC721 {\n    event SetBaseURI(string baseURI_);\n\n    function exists(uint256 tokenId) external view returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function setBaseURI(string calldata baseURI_) external;\n\n    function setPause(bool status) external;\n\n    function mint(address to, uint256 tokenId) external;\n\n    function mintBatch(address to, uint256[] calldata tokenIds) external;\n\n    function burn(uint256 tokenId) external;\n\n    function burnBatch(address from, uint256[] calldata tokenIds) external;\n\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata tokenIds\n    ) external;\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/interfaces/IERC721.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}