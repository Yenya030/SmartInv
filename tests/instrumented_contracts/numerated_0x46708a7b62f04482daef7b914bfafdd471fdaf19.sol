1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/esLBRMinterV2.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.17;\r\n/**\r\n * @title esLBRMiner is a stripped down version of Synthetix StakingRewards.sol, to reward esLBR to EUSD minters.\r\n * Differences from the original contract,\r\n * - Get `totalStaked` from totalSupply() in contract EUSD.\r\n * - Get `stakedOf(user)` from getBorrowedOf(user) in contract EUSD.\r\n * - When an address borrowed EUSD amount changes, call the refreshReward method to update rewards to be claimed.\r\n */\r\n\r\nimport \"./ILybra.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IesLBR.sol\";\r\n\r\ninterface Ihelper {\r\n    function getCollateralRate(address user) external view returns (uint256);\r\n}\r\n\r\ninterface IlybraFund {\r\n    function refreshReward(address user) external;\r\n}\r\n\r\ninterface IesLBRBoost {\r\n    function getUserBoost(\r\n        address user,\r\n        uint256 userUpdatedAt,\r\n        uint256 finishAt\r\n    ) external view returns (uint256);\r\n\r\n    function getUnlockTime(address user)\r\n        external\r\n        view\r\n        returns (uint256 unlockTime);\r\n}\r\n\r\ncontract esLBRMinerV2 is Ownable {\r\n    ILybra public immutable lybra;\r\n    Ihelper public helper;\r\n    IesLBRBoost public esLBRBoost;\r\n    IlybraFund public lybraFund;\r\n    address public esLBR;\r\n\r\n    // Duration of rewards to be paid out (in seconds)\r\n    uint256 public duration = 2_592_000;\r\n    // Timestamp of when the rewards finish\r\n    uint256 public finishAt;\r\n    // Minimum of last updated time and reward finish time\r\n    uint256 public updatedAt;\r\n    // Reward to be paid out per second\r\n    uint256 public rewardRate;\r\n    // Sum of (reward rate * dt * 1e18 / total supply)\r\n    uint256 public rewardPerTokenStored;\r\n    // User address => rewardPerTokenStored\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    // User address => rewards to be claimed\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public userUpdatedAt;\r\n    uint256 public extraRate = 50 * 1e18;\r\n    // Currently, the official rebase time for Lido is between 12PM to 13PM UTC.\r\n    uint256 public lockdownPeriod = 12 hours;\r\n\r\n    constructor(\r\n        address _lybra,\r\n        address _helper,\r\n        address _boost,\r\n        address _fund\r\n    ) {\r\n        lybra = ILybra(_lybra);\r\n        helper = Ihelper(_helper);\r\n        esLBRBoost = IesLBRBoost(_boost);\r\n        lybraFund = IlybraFund(_fund);\r\n    }\r\n\r\n    function setEsLBR(address _eslbr) external onlyOwner {\r\n        esLBR = _eslbr;\r\n    }\r\n\r\n    function setExtraRate(uint256 rate) external onlyOwner {\r\n        extraRate = rate;\r\n    }\r\n\r\n    function setLockdownPeriod(uint256 _time) external onlyOwner {\r\n        lockdownPeriod = _time;\r\n    }\r\n\r\n    function setBoost(address _boost) external onlyOwner {\r\n        esLBRBoost = IesLBRBoost(_boost);\r\n    }\r\n\r\n    function setLybraFund(address _fund) external onlyOwner {\r\n        lybraFund = IlybraFund(_fund);\r\n    }\r\n\r\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\r\n        require(finishAt < block.timestamp, \"reward duration not finished\");\r\n        duration = _duration;\r\n    }\r\n\r\n    function totalStaked() internal view returns (uint256) {\r\n        return lybra.totalSupply();\r\n    }\r\n\r\n    function stakedOf(address user) public view returns (uint256) {\r\n        return lybra.getBorrowedOf(user);\r\n    }\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        updatedAt = lastTimeRewardApplicable();\r\n\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n            userUpdatedAt[_account] = block.timestamp;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return _min(finishAt, block.timestamp);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalStaked() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\r\n            totalStaked();\r\n    }\r\n\r\n    /**\r\n     * @dev To limit the behavior of arbitrageurs who mint a large amount of eUSD after stETH rebase and before eUSD interest distribution to earn extra profit,\r\n     * a 1-hour revert during stETH rebase is implemented to eliminate this issue.\r\n     * If the user's collateral ratio is below safeCollateralRate, they are not subject to this restriction.\r\n     */\r\n    function pausedByLido(address _account) public view returns(bool) {\r\n        uint256 collateralRate = helper.getCollateralRate(_account);\r\n        return (block.timestamp - lockdownPeriod) % 1 days < 1 hours &&\r\n            collateralRate >= lybra.safeCollateralRate();\r\n    }\r\n\r\n    /**\r\n     * @notice Update user's claimable reward data and record the timestamp.\r\n     */\r\n    function refreshReward(address _account) external updateReward(_account) {\r\n        if (\r\n            pausedByLido(_account)\r\n        ) {\r\n            revert(\r\n                \"Minting and repaying functions of eUSD are temporarily disabled during stETH rebasing periods.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function getBoost(address _account) public view returns (uint256) {\r\n        uint256 redemptionBoost;\r\n        if (lybra.isRedemptionProvider(_account)) {\r\n            redemptionBoost = extraRate;\r\n        }\r\n        return 100 * 1e18 + redemptionBoost + esLBRBoost.getUserBoost(\r\n            _account,\r\n            userUpdatedAt[_account],\r\n            finishAt\r\n        );\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint256) {\r\n        return\r\n            ((stakedOf(_account) *\r\n                getBoost(_account) *\r\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e38) +\r\n            rewards[_account];\r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        require(\r\n            block.timestamp >= esLBRBoost.getUnlockTime(msg.sender),\r\n            \"Your lock-in period has not ended. You can't claim your esLBR now.\"\r\n        );\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            lybraFund.refreshReward(msg.sender);\r\n            IesLBR(esLBR).mint(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 amount)\r\n        external\r\n        onlyOwner\r\n        updateReward(address(0))\r\n    {\r\n        require(amount > 0, \"amount = 0\");\r\n        if (block.timestamp >= finishAt) {\r\n            rewardRate = amount / duration;\r\n        } else {\r\n            uint256 remainingRewards = (finishAt - block.timestamp) *\r\n                rewardRate;\r\n            rewardRate = (amount + remainingRewards) / duration;\r\n        }\r\n\r\n        require(rewardRate > 0, \"reward rate = 0\");\r\n\r\n        finishAt = block.timestamp + duration;\r\n        updatedAt = block.timestamp;\r\n    }\r\n\r\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n"
6     },
7     "contracts/IesLBR.sol": {
8       "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\ninterface IesLBR {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function mint(address user, uint256 amount) external returns(bool);\r\n    function burn(address user, uint256 amount) external returns(bool);\r\n}"
9     },
10     "contracts/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
12     },
13     "contracts/ILybra.sol": {
14       "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface ILybra {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function totalDepositedEther() external view returns (uint256);\n\n    function safeCollateralRate() external view returns (uint256);\n\n    function redemptionFee() external view returns (uint256);\n\n    function keeperRate() external view returns (uint256);\n\n    function depositedEther(address user) external view returns (uint256);\n\n    function getBorrowedOf(address user) external view returns (uint256);\n\n    function isRedemptionProvider(address user) external view returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function transferShares(\n        address _recipient,\n        uint256 _sharesAmount\n    ) external returns (uint256);\n\n    function getSharesByMintedEUSD(\n        uint256 _EUSDAmount\n    ) external view returns (uint256);\n\n    function getMintedEUSDByShares(\n        uint256 _sharesAmount\n    ) external view returns (uint256);\n}\n"
15     },
16     "contracts/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": true,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}