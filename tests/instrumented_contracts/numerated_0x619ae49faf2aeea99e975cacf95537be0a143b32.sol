1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/KiraAuction.sol": {
5       "content": "// SPDX-License-Identifier: unlicensed\r\npragma solidity 0.8.17;\r\n\r\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\nimport \"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n// import \"openzeppelin-solidity/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./_ecdsa.sol\";\r\n// import ecdsa from solady library\r\ninterface INft {\r\n    function mint(address to, uint8 amount) external;\r\n}\r\n\r\ncontract KiraAuctionHandler is Ownable {\r\n    mapping(address => uint8) alreadyPledgedMercenary;\r\n    mapping(address => uint8) alreadyPledgedEnlisted;\r\n    mapping(address => uint8) alreadyPledgedLastPhase;\r\n\r\n    mapping(address => Bid) bids;\r\n    mapping(address => bool) public alreadyBid;\r\n    mapping(address => bool) public refunded;\r\n    mapping(address => bool) public bidWinner;\r\n    mapping(address => bool) public bidWhitelist;\r\n    address public kiraTreasury;\r\n    address public card;\r\n\r\n    uint256 cutoffValue;\r\n    uint256 minBid;\r\n    uint256 maxBid;\r\n\r\n    uint16 numberOfNfts;\r\n    uint8 state;\r\n    uint8 maxAmountBidPhase;\r\n\r\n    bool paused;\r\n\r\n    struct Phase {\r\n        uint8 maxAmountPerUser;\r\n        bool isOpen;\r\n        uint16 pledgedTotalAmount;\r\n        uint16 supplyAllocated;\r\n        address signer;\r\n        uint256 pledgedTotalEth;\r\n        uint256 price;\r\n    }\r\n\r\n    struct Bid {\r\n        uint256 amount;\r\n        uint256 value;\r\n    }\r\n\r\n    Phase public mercenary;\r\n    Phase public enlisted;\r\n    Phase public lastPhase;\r\n\r\n    event UserBid(address indexed bidder, uint256 amount, uint256 value);\r\n    event userPledge(address indexed user, uint256 amount);\r\n    modifier state1() {\r\n        require(state == 1, \"Bidding hasn't started yet\");\r\n        _;\r\n    }\r\n\r\n    modifier state2() {\r\n        require(state == 2, \"Refunds haven't started yet\");\r\n        _;\r\n    }\r\n\r\n    bool locked;\r\n    modifier nonReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() {\r\n        kiraTreasury = 0x6aD9356B3d0eEE5cA31DD757c95fB5AB67b01c33;\r\n        minBid = 0.069 ether;\r\n        maxBid = 0.099 ether;\r\n        maxAmountBidPhase = 3;\r\n        mercenary = Phase(\r\n            2,\r\n            false,\r\n            0,\r\n            1000,\r\n            0xEAf4E461348Dd23928Bf77F0a3d3E55ea19D335E,\r\n            0,\r\n            0.069 ether\r\n        );\r\n        enlisted = Phase(\r\n            1,\r\n            false,\r\n            0,\r\n            3500,\r\n            0xe9f5ea1Ff626d13cFBE1A7Dc47f40b9443EF2cCC,\r\n            0,\r\n            0.069 ether\r\n        );\r\n        lastPhase = Phase(\r\n            1,\r\n            false,\r\n            0,\r\n            0,\r\n            0x3FB476663d8247ACDAAA9C220D91089ed04144b2,\r\n            0,\r\n            0.069 ether\r\n        );\r\n    }\r\n\r\n    function newBid(uint8 amount) external payable state1 {\r\n        require(!paused, \"Paused\");\r\n        require(msg.sender == tx.origin, \"No Smart Contracts!\");\r\n        require(!alreadyBid[msg.sender], \"You have a bid already\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        uint256 value = msg.value / amount;\r\n        if (!bidWhitelist[msg.sender]) {\r\n            require(value >= minBid, \"Bid amount is too low\");\r\n            require(value <= maxBid, \"Bid amount is too high\");\r\n            require(amount <= maxAmountBidPhase, \"Too many bids\");\r\n        }\r\n        alreadyBid[msg.sender] = true;\r\n        bids[msg.sender] = Bid(amount, value);\r\n        emit UserBid(msg.sender, amount, value);\r\n    }\r\n\r\n    function processUserBid() public nonReentrant {\r\n        require(state >= 2, \"Not in the right state for this action\");\r\n        require(!refunded[msg.sender], \"Refund already claimed\");\r\n        refunded[msg.sender] = true;\r\n        uint256 refundAmount;\r\n        Bid memory userBids = bids[msg.sender];\r\n        require(userBids.amount > 0, \"No bid found\");\r\n        if (!bidWinner[msg.sender]) {\r\n            refundAmount = userBids.amount * userBids.value;\r\n        } else {\r\n            refundAmount = userBids.amount * (userBids.value - cutoffValue);\r\n            INft(card).mint(msg.sender, 1);\r\n        }\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: refundAmount,\r\n            gas: 30000\r\n        }(\"\");\r\n        require(success, \"Refund failed\");\r\n    }\r\n\r\n    function pledgeMercenary(\r\n        uint8 amount,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        INft(card).mint(msg.sender, 1);\r\n        Phase memory m = mercenary;\r\n        require(m.isOpen, \"Not open\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        uint8 numPledged = alreadyPledgedMercenary[msg.sender] + amount;\r\n        require(\r\n            numPledged <= m.maxAmountPerUser,\r\n            \"You would exceed the max amount per user\"\r\n        );\r\n        require(msg.value == amount * m.price, \"Incorrect amount of ETH sent\");\r\n        require(_validateData(msg.sender, signature, m.signer));\r\n        require(\r\n            m.pledgedTotalAmount + amount <= m.supplyAllocated,\r\n            \"Not enough supply left\"\r\n        );\r\n        alreadyPledgedMercenary[msg.sender] = numPledged;\r\n        mercenary.pledgedTotalEth += msg.value;\r\n        mercenary.pledgedTotalAmount += amount;\r\n        emit userPledge(msg.sender, amount);\r\n    }\r\n\r\n    function pledgeEnlisted(\r\n        uint8 amount,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        INft(card).mint(msg.sender, 1);\r\n        Phase memory e = enlisted;\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(e.isOpen, \"Not open\");\r\n        uint8 numPledged = alreadyPledgedEnlisted[msg.sender] + amount;\r\n        require(\r\n            numPledged <= e.maxAmountPerUser,\r\n            \"You would exceed the max amount per user\"\r\n        );\r\n        require(msg.value == amount * e.price, \"Incorrect amount of ETH sent\");\r\n        require(_validateData(msg.sender, signature, e.signer));\r\n        require(\r\n            e.pledgedTotalAmount + amount <= e.supplyAllocated,\r\n            \"Not enough supply left\"\r\n        );\r\n        alreadyPledgedEnlisted[msg.sender] = numPledged;\r\n        enlisted.pledgedTotalEth += msg.value;\r\n        enlisted.pledgedTotalAmount += amount;\r\n        emit userPledge(msg.sender, amount);\r\n    }\r\n\r\n    function pledgeLastPhase(\r\n        uint8 amount,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        INft(card).mint(msg.sender, 1);\r\n        Phase memory l = lastPhase;\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(l.isOpen, \"Not open\");\r\n        uint8 numPledged = alreadyPledgedLastPhase[msg.sender] + amount;\r\n        require(\r\n            numPledged <= l.maxAmountPerUser,\r\n            \"You would exceed the max amount per user\"\r\n        );\r\n        require(msg.value == amount * l.price, \"Incorrect amount of ETH sent\");\r\n        require(_validateData(msg.sender, signature, l.signer));\r\n        require(\r\n            l.pledgedTotalAmount + amount <= l.supplyAllocated,\r\n            \"Not enough supply left\"\r\n        );\r\n        alreadyPledgedLastPhase[msg.sender] = numPledged;\r\n        lastPhase.pledgedTotalEth += msg.value;\r\n        lastPhase.pledgedTotalAmount += amount;\r\n        emit userPledge(msg.sender, amount);\r\n    }\r\n\r\n    function setCard(address _card) external onlyOwner {\r\n        card = _card;\r\n    }\r\n\r\n    function setKiraTreasury(address _kiraTreasury) external onlyOwner {\r\n        require(\r\n            _kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        kiraTreasury = _kiraTreasury;\r\n    }\r\n\r\n    function openBids() external onlyOwner {\r\n        state = 1;\r\n    }\r\n\r\n    function resumeBidPhase() external onlyOwner {\r\n        cutoffValue = 0;\r\n        numberOfNfts = 0;\r\n        state = 1;\r\n    }\r\n\r\n    function finalizeBidPhase(\r\n        uint256 _cutoffValue,\r\n        uint16 _numberOfNfts\r\n    ) external onlyOwner {\r\n        cutoffValue = _cutoffValue;\r\n        numberOfNfts = _numberOfNfts;\r\n        state = 2;\r\n    }\r\n\r\n    function flipPaused() external onlyOwner {\r\n        paused = !paused;\r\n    }\r\n\r\n    function setState(uint8 _state) external onlyOwner {\r\n        state = _state;\r\n    }\r\n\r\n    function setMinMaxBid(uint256 _minBid, uint256 _maxBid) external onlyOwner {\r\n        minBid = _minBid;\r\n        maxBid = _maxBid;\r\n    }\r\n\r\n    function openPhase(uint8 i) external onlyOwner {\r\n        if (i == 1) {\r\n            mercenary.isOpen = true;\r\n        } else if (i == 2) {\r\n            enlisted.isOpen = true;\r\n        } else if (i == 3) {\r\n            lastPhase.isOpen = true;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function editSupplyAllocated(uint8 i, uint16 newSupply) external onlyOwner {\r\n        if (i == 1) {\r\n            mercenary.supplyAllocated = newSupply;\r\n        } else if (i == 2) {\r\n            enlisted.supplyAllocated = newSupply;\r\n        } else if (i == 3) {\r\n            lastPhase.supplyAllocated = newSupply;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function editPrice(uint8 i, uint256 newPrice) external onlyOwner {\r\n        if (i == 1) {\r\n            mercenary.price = newPrice;\r\n        } else if (i == 2) {\r\n            enlisted.price = newPrice;\r\n        } else if (i == 3) {\r\n            lastPhase.price = newPrice;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function editSigner(uint8 i, address newSigner) external onlyOwner {\r\n        if (i == 1) {\r\n            mercenary.signer = newSigner;\r\n        } else if (i == 2) {\r\n            enlisted.signer = newSigner;\r\n        } else if (i == 3) {\r\n            lastPhase.signer = newSigner;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function editMaxAmountPerUser(uint8 i, uint8 newMaxAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (i == 1) {\r\n            mercenary.maxAmountPerUser = newMaxAmount;\r\n        } else if (i == 2) {\r\n            enlisted.maxAmountPerUser = newMaxAmount;\r\n        } else if (i == 3) {\r\n            lastPhase.maxAmountPerUser = newMaxAmount;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function closePhase(uint8 i) external onlyOwner {\r\n        if (i == 1) {\r\n            mercenary.isOpen = false;\r\n        } else if (i == 2) {\r\n            enlisted.isOpen = false;\r\n        } else if (i == 3) {\r\n            lastPhase.isOpen = false;\r\n        } else {\r\n            revert(\"Invalid phase\");\r\n        }\r\n    }\r\n\r\n    function addWinners(address[] calldata winners) external onlyOwner {\r\n        for (uint256 i; i < winners.length;) {\r\n            bidWinner[winners[i]] = true;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function removeWinners(address[] calldata winners) external onlyOwner {\r\n        for (uint256 i; i < winners.length;) {\r\n            bidWinner[winners[i]] = false;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function addBidWhitelist(address[] calldata whitelist) external onlyOwner {\r\n        for (uint256 i; i < whitelist.length;) {\r\n            bidWhitelist[whitelist[i]] = true;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function removeBidWhitelist(address[] calldata whitelist)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i; i < whitelist.length;) {\r\n            bidWhitelist[whitelist[i]] = false;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    // eth/token withdrawal\r\n    function saveTokens(\r\n        IERC20 tokenAddress,\r\n        address walletAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(\r\n            walletAddress != address(0),\r\n            \"walletAddress can't be 0 address\"\r\n        );\r\n        SafeERC20.safeTransfer(\r\n            tokenAddress,\r\n            walletAddress,\r\n            amount == 0 ? tokenAddress.balanceOf(address(this)) : amount\r\n        );\r\n    }\r\n\r\n    // for emergency\r\n    function saveETH() external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: address(this).balance,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    function withdrawETHFromBids() external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        require(\r\n            cutoffValue > 0 && numberOfNfts > 0,\r\n            \"Some values are not set.\"\r\n        );\r\n        uint256 collectedAmount = numberOfNfts * cutoffValue;\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: collectedAmount,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    function withdrawETHFromMercenary() external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: mercenary.pledgedTotalEth,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n        mercenary.pledgedTotalEth = 0;\r\n    }\r\n\r\n    function withdrawETHFromEnlisted() external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: enlisted.pledgedTotalEth,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n        enlisted.pledgedTotalEth = 0;\r\n    }\r\n\r\n    function withdrawETHFromLastPhase() external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: lastPhase.pledgedTotalEth,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n        lastPhase.pledgedTotalEth = 0;\r\n    }\r\n\r\n    // views\r\n    function getBid(address user) external view returns (Bid memory) {\r\n        return bids[user];\r\n    }\r\n\r\n    function getPledgedMercenary(address user) external view returns (uint256) {\r\n        return alreadyPledgedMercenary[user];\r\n    }\r\n\r\n    function getPledgedEnlisted(address user) external view returns (uint256) {\r\n        return alreadyPledgedEnlisted[user];\r\n    }\r\n\r\n    function phaseDetails() external view returns (Phase memory, Phase memory, Phase memory) {\r\n        return (mercenary, enlisted, lastPhase);\r\n    }\r\n\r\n    function bidDetails()\r\n        external\r\n        view\r\n        returns (uint8, uint256, uint256, uint256, uint8, uint16)\r\n    {\r\n        return (maxAmountBidPhase, minBid, maxBid, cutoffValue, state, numberOfNfts);\r\n    }\r\n\r\n    function _validateData(\r\n        address _user,\r\n        bytes calldata signature,\r\n        address signer\r\n    ) internal view returns (bool) {\r\n        bytes32 dataHash = keccak256(abi.encodePacked(_user));\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(dataHash);\r\n\r\n        address receivedAddress = ECDSA.recover(message, signature);\r\n        return (receivedAddress != address(0) && receivedAddress == signer);\r\n    }\r\n\r\n    function saveAmountOfETH(uint256 val) external onlyOwner {\r\n        require(\r\n            kiraTreasury != address(0),\r\n            \"Kira treasury address cannot be 0\"\r\n        );\r\n        (bool success, ) = payable(kiraTreasury).call{\r\n            value: val,\r\n            gas: 50000\r\n        }(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
6     },
7     "openzeppelin-solidity/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
12     },
13     "contracts/_ecdsa.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Gas optimized ECDSA wrapper.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\r\nlibrary ECDSA {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The signature is invalid.\r\n    error InvalidSignature();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The number which `s` must not exceed in order for\r\n    /// the signature to be non-malleable.\r\n    bytes32 private constant _MALLEABILITY_THRESHOLD =\r\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                    RECOVERY OPERATIONS                     */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    // Note: as of the Solady version v0.0.68, these functions will\r\n    // revert upon recovery failure for more safety.\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function recover(bytes32 hash, bytes calldata signature)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            // Directly copy `r` and `s` from the calldata.\r\n            calldatacopy(0x40, signature.offset, 0x40)\r\n            // Store the `hash` in the scratch space.\r\n            mstore(0x00, hash)\r\n            // Compute `v` and store it in the scratch space.\r\n            mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\r\n            pop(\r\n                staticcall(\r\n                    gas(), // Amount of gas left for the transaction.\r\n                    and(\r\n                        // If the signature is exactly 65 bytes in length.\r\n                        eq(signature.length, 65),\r\n                        // If `s` in lower half order, such that the signature is not malleable.\r\n                        lt(mload(0x60), add(_MALLEABILITY_THRESHOLD, 1))\r\n                    ), // Address of `ecrecover`.\r\n                    0x00, // Start of input.\r\n                    0x80, // Size of input.\r\n                    0x00, // Start of output.\r\n                    0x20 // Size of output.\r\n                )\r\n            )\r\n            result := mload(0x00)\r\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n            if iszero(returndatasize()) {\r\n                // Store the function selector of `InvalidSignature()`.\r\n                mstore(0x00, 0x8baa579f)\r\n                // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Restore the zero slot.\r\n            mstore(0x60, 0)\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\r\n    ///\r\n    /// This function only accepts EIP-2098 short form signatures.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\r\n    ///\r\n    /// To be honest, I do not recommend using EIP-2098 signatures\r\n    /// for simplicity, performance, and security reasons. Most if not\r\n    /// all clients support traditional non EIP-2098 signatures by default.\r\n    /// As such, this method is intentionally not fully inlined.\r\n    /// It is merely included for completeness.\r\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns (address result) {\r\n        uint8 v;\r\n        bytes32 s;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            s := shr(1, shl(1, vs))\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        result = recover(hash, v, r, s);\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the signature defined by `v`, `r`, `s`.\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            mstore(0x00, hash)\r\n            mstore(0x20, and(v, 0xff))\r\n            mstore(0x40, r)\r\n            mstore(0x60, s)\r\n            pop(\r\n                staticcall(\r\n                    gas(), // Amount of gas left for the transaction.\r\n                    // If `s` in lower half order, such that the signature is not malleable.\r\n                    lt(s, add(_MALLEABILITY_THRESHOLD, 1)), // Address of `ecrecover`.\r\n                    0x00, // Start of input.\r\n                    0x80, // Size of input.\r\n                    0x00, // Start of output.\r\n                    0x20 // Size of output.\r\n                )\r\n            )\r\n            result := mload(0x00)\r\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n            if iszero(returndatasize()) {\r\n                // Store the function selector of `InvalidSignature()`.\r\n                mstore(0x00, 0x8baa579f)\r\n                // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Restore the zero slot.\r\n            mstore(0x60, 0)\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                   TRY-RECOVER OPERATIONS                   */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    // WARNING!\r\n    // These functions will NOT revert upon recovery failure.\r\n    // Instead, they will return the zero address upon recovery failure.\r\n    // It is critical that the returned address is NEVER compared against\r\n    // a zero address (e.g. an uninitialized address variable).\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function tryRecover(bytes32 hash, bytes calldata signature)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(xor(signature.length, 65)) {\r\n                // Copy the free memory pointer so that we can restore it later.\r\n                let m := mload(0x40)\r\n                // Directly copy `r` and `s` from the calldata.\r\n                calldatacopy(0x40, signature.offset, 0x40)\r\n                // If `s` in lower half order, such that the signature is not malleable.\r\n                if iszero(gt(mload(0x60), _MALLEABILITY_THRESHOLD)) {\r\n                    // Store the `hash` in the scratch space.\r\n                    mstore(0x00, hash)\r\n                    // Compute `v` and store it in the scratch space.\r\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\r\n                    pop(\r\n                        staticcall(\r\n                            gas(), // Amount of gas left for the transaction.\r\n                            0x01, // Address of `ecrecover`.\r\n                            0x00, // Start of input.\r\n                            0x80, // Size of input.\r\n                            0x40, // Start of output.\r\n                            0x20 // Size of output.\r\n                        )\r\n                    )\r\n                    // Restore the zero slot.\r\n                    mstore(0x60, 0)\r\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n                    result := mload(xor(0x60, returndatasize()))\r\n                }\r\n                // Restore the free memory pointer.\r\n                mstore(0x40, m)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\r\n    ///\r\n    /// This function only accepts EIP-2098 short form signatures.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\r\n    ///\r\n    /// To be honest, I do not recommend using EIP-2098 signatures\r\n    /// for simplicity, performance, and security reasons. Most if not\r\n    /// all clients support traditional non EIP-2098 signatures by default.\r\n    /// As such, this method is intentionally not fully inlined.\r\n    /// It is merely included for completeness.\r\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        uint8 v;\r\n        bytes32 s;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            s := shr(1, shl(1, vs))\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        result = tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the signature defined by `v`, `r`, `s`.\r\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            // If `s` in lower half order, such that the signature is not malleable.\r\n            if iszero(gt(s, _MALLEABILITY_THRESHOLD)) {\r\n                // Store the `hash`, `v`, `r`, `s` in the scratch space.\r\n                mstore(0x00, hash)\r\n                mstore(0x20, and(v, 0xff))\r\n                mstore(0x40, r)\r\n                mstore(0x60, s)\r\n                pop(\r\n                    staticcall(\r\n                        gas(), // Amount of gas left for the transaction.\r\n                        0x01, // Address of `ecrecover`.\r\n                        0x00, // Start of input.\r\n                        0x80, // Size of input.\r\n                        0x40, // Start of output.\r\n                        0x20 // Size of output.\r\n                    )\r\n                )\r\n                // Restore the zero slot.\r\n                mstore(0x60, 0)\r\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n                result := mload(xor(0x60, returndatasize()))\r\n            }\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                     HASHING OPERATIONS                     */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\r\n    /// This produces a hash corresponding to the one signed with the\r\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\r\n    /// JSON-RPC method as part of EIP-191.\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Store into scratch space for keccak256.\r\n            mstore(0x20, hash)\r\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\")\r\n            // 0x40 - 0x04 = 0x3c\r\n            result := keccak256(0x04, 0x3c)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\r\n    /// This produces a hash corresponding to the one signed with the\r\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\r\n    /// JSON-RPC method as part of EIP-191.\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            // The length of \"\\x19Ethereum Signed Message:\\n\" is 26 bytes (i.e. 0x1a).\r\n            // If we reserve 2 words, we'll have 64 - 26 = 38 bytes to store the\r\n            // ASCII decimal representation of the length of `s` up to about 2 ** 126.\r\n\r\n            // Instead of allocating, we temporarily copy the 64 bytes before the\r\n            // start of `s` data to some variables.\r\n            let m1 := mload(sub(s, 0x20))\r\n            // The length of `s` is in bytes.\r\n            let sLength := mload(s)\r\n            let ptr := add(s, 0x20)\r\n            let w := not(0)\r\n            // `end` marks the end of the memory which we will compute the keccak256 of.\r\n            let end := add(ptr, sLength)\r\n            // Convert the length of the bytes to ASCII decimal representation\r\n            // and store it into the memory.\r\n            for { let temp := sLength } 1 {} {\r\n                ptr := add(ptr, w) // `sub(ptr, 1)`.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n            // Copy the header over to the memory.\r\n            mstore(sub(ptr, 0x20), \"\\x00\\x00\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n\")\r\n            // Compute the keccak256 of the memory.\r\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\r\n            // Restore the previous memory.\r\n            mstore(s, sLength)\r\n            mstore(sub(s, 0x20), m1)\r\n        }\r\n    }\r\n}"
15     },
16     "openzeppelin-solidity/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
21     },
22     "openzeppelin-solidity/contracts/utils/Address.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 1000
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}