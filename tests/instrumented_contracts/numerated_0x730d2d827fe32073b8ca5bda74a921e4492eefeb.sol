1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ssp/betwixt/sale.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport \"../sale/SaleContract.sol\";\n\ncontract sale is SaleContract {\n    constructor(SaleConfiguration memory config) SaleContract(config) {}\n}\n"
6     },
7     "contracts/ssp/sale/SaleContract.sol": {
8       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport \"./ISaleContract.sol\";\nimport \"../token/IToken.sol\";\nimport \"../extras/recovery/BlackHolePrevention.sol\";\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nstruct SaleConfiguration {\n    uint256 projectID; \n    address token;\n    address payable[] wallets;\n    uint16[] shares;\n\n    uint256 maxMintPerTransaction;      // How many tokens a transaction can mint\n    uint256 maxPresale;                 // Max sold in presale across presale eth\n    uint256 maxPresalePerAddress;       // Limit discounts per address\n    uint256 maxSalePerAddress;\n\n    uint256 presaleStart;\n    uint256 presaleEnd;\n    uint256 saleStart;\n    uint256 saleEnd;\n\n    uint256 fullPrice;\n    address signer;\n}\n\nstruct SaleInfo {\n    SaleConfiguration config;\n    uint256 _userMinted;\n    uint256 _MaxUserMintable;\n    bool    _presaleIsActive;\n    bool    _saleIsActive;\n}\n\n\ncontract SaleContract is ISaleContract, Ownable, BlackHolePrevention {\n    using Strings  for uint256;\n\n    uint256 immutable   public  projectID;\n    IToken  immutable   public  token;\n\n    address payable []  _wallets;\n    uint16[]            _shares;\n    uint256             _maxMintPerTransaction;\n    uint256             _maxPresale;\n    uint256             _maxMintPerAddress;\n    uint256             _maxPresalePerAddress;\n    uint256             _maxSalePerAddress;\n    address             _projectSigner;\n    uint256             _presaleStart;\n    uint256             _presaleEnd;\n    uint256             _saleStart;\n    uint256             _saleEnd;\n    uint256             _fullPrice;\n\n    uint256 immutable   _MaxUserMintable;\n    uint256             _userMinted;\n    mapping(address => uint256) public _mintedByWallet;\n\n\n    event PreSale(address _buyer, address _receiver, uint256 _number_of_items, uint256 _amount);\n    event Sale   (address _buyer, address _receiver, uint256 _number_of_items, uint256 _amount);\n\n    constructor(SaleConfiguration memory config) {\n\n        require(config.projectID > 0, \"Sale: Project id must be higher than 0\");\n        require(config.token != address(0), \"Sale: Token address can not be address(0)\");\n \n        projectID = config.projectID;\n        token = IToken(config.token);\n\n        TokenInfoForSale memory tinfo = token.getTokenInfoForSale();\n        require(config.projectID == tinfo._projectID, \"Sale: Project id must match\");\n\n        // Calculate how many tokens can be minted through the sale contract by normal users\n        _MaxUserMintable = tinfo._maxSupply - tinfo._reservedSupply;\n\n        UpdateSaleConfiguration(config);\n\n        UpdateWalletsAndShares(config.wallets, config.shares);\n    }\n\n    function UpdateSaleConfiguration(SaleConfiguration memory config) public onlyAllowed {\n\n        // How many tokens a transaction can mint\n        _maxMintPerTransaction = config.maxMintPerTransaction;\n\n        // Number of tokens to be sold in presale \n        _maxPresale = config.maxPresale;\n\n        // Limit presale mints per address\n        _maxPresalePerAddress = config.maxPresalePerAddress;\n\n        // Limit sale mints per address ( must include _maxPresalePerAddress value )\n        _maxSalePerAddress = config.maxSalePerAddress;\n\n        _presaleStart   = config.presaleStart;\n        _presaleEnd     = config.presaleEnd;\n        _saleStart      = config.saleStart;\n        _saleEnd        = config.saleEnd;\n\n        _fullPrice      = config.fullPrice;\n\n        // Signed data signer address\n        _projectSigner = config.signer;\n    }\n\n    /**\n     * @dev Admin: Update wallets and shares\n     */\n    function UpdateWalletsAndShares(\n        address payable[] memory _newWallets,\n        uint16[] memory _newShares\n    ) public onlyAllowed {\n        require(_newWallets.length == _newShares.length && _newWallets.length > 0, \"Sale: Must have at least 1 output wallet\");\n        uint16 totalShares = 0;\n        for (uint8 j = 0; j < _newShares.length; j++) {\n            totalShares+= _newShares[j];\n        }\n        require(totalShares == 10000, \"Sale: Shares total must be 10000\");\n        _shares = _newShares;\n        _wallets = _newWallets;\n    }\n\n    /**\n     * @dev Admin mint tokens\n     */\n    function admin_mint(address _destination, uint8 _count) external onlyAllowed {\n        _mintCards(_count, _destination);\n    }\n    \n    /**\n     * @dev Public Sale minting\n     */\n    function mint(uint256 _numberOfCards) external payable {\n        _internalMint(_numberOfCards, msg.sender);\n    }\n\n    /**\n     * @dev Public Sale cross mint\n     */\n    function crossmint(uint256 _numberOfCards, address _receiver) external payable {\n        _internalMint(_numberOfCards, _receiver);\n    }\n\n    /**\n     * @dev Public Sale minting\n     */\n    function _internalMint(uint256 _numberOfCards, address _receiver) internal {\n        require(checkSaleIsActive(),                            \"Sale: Sale is not open\");\n        require(_numberOfCards <= _maxMintPerTransaction,       \"Sale: Over maximum number per transaction\");\n\n        uint256 number_of_items = msg.value / _fullPrice;\n        require(number_of_items == _numberOfCards,              \"Sale: ETH sent does not match items requested\");\n        require(number_of_items * _fullPrice == msg.value,      \"Sale: Incorrect ETH amount sent\");\n\n        uint256 _sold = _mintedByWallet[_receiver];\n        require(_sold < _maxSalePerAddress,                     \"Sale: You have already minted your allowance\");\n        require(_sold + number_of_items <= _maxSalePerAddress,  \"Sale: That would put you over your presale limit\");\n        _mintedByWallet[_receiver]+= number_of_items;\n\n        _mintCards(number_of_items, _receiver);\n        _split(msg.value);\n\n        emit Sale(msg.sender, _receiver, number_of_items, msg.value);\n    }\n\n\n    /**\n     * @dev Internal mint method\n     */\n    function _mintCards(uint256 numberOfCards, address recipient) internal {\n        _userMinted+= numberOfCards;\n        require(\n            _userMinted <= _MaxUserMintable,\n            \"Sale: Exceeds maximum number of user mintable cards\"\n        );\n        token.mintIncrementalCards(numberOfCards, recipient);\n    }\n\n    /**\n     * @dev Mint tokens as specified in the signed payload\n     */\n    struct SignedPayload {\n        uint256 projectID;\n        uint256 chainID;  // 1 mainnet / 4 rinkeby / 11155111 sepolia / 137 polygon / 80001 mumbai\n        bool free;\n        uint16 max_mint;\n        address receiver;\n        uint256 valid_from;\n        uint256 valid_to;\n        uint256 eth_price;\n        uint256 dust_price;\n        bytes signature;\n    }\n\n    function mint_approved(SignedPayload memory _payload, uint256 _numberOfCards) external payable {\n\n        require(_numberOfCards <= _maxMintPerTransaction, \"Sale: Over maximum number per transaction\");\n        require(_numberOfCards + _userMinted <= _maxPresale, \"Sale: Presale maximum reached\");\n\n        // Make sure it can only be called if presale is active\n        require(checkPresaleIsActive(), \"Sale: Presale is not active\");\n\n        // First make sure the received payload was signed by _projectSigner\n        require(verify(_payload), \"Sale: SignedPayload verification failed\");\n\n        // Make sure that msg.sender is actually the intended receiver\n        require(_payload.receiver == msg.sender, \"Sale Verify: Invalid receiver\");\n\n        // Make sure that payload.projectID matches\n        require(_payload.projectID == projectID, \"Sale Verify: Invalid projectID\");\n\n        // Make sure that payload.chainID matches\n        require(_payload.chainID == block.chainid, \"Sale Verify: Invalid chainID\");\n\n        // Make sure in date range\n        require(_payload.valid_from < _payload.valid_to, \"Sale: Invalid from/to range in payload\");\n        require(\n            getBlockTimestamp() >= _payload.valid_from &&\n            getBlockTimestamp() <= _payload.valid_to,\n            \"Sale: Contract time outside from/to range\"\n        );\n\n        uint256 number_of_items = msg.value / _payload.eth_price;\n        require(number_of_items == _numberOfCards, \"Sale: ETH sent does not match items requested\");\n        require(number_of_items * _payload.eth_price == msg.value, \"Sale: Incorrect ETH amount sent\");\n\n        uint256 _presold = _mintedByWallet[msg.sender];\n        require(_presold < _payload.max_mint, \"Sale: You have already minted your allowance\");\n        require(_presold + number_of_items <= _payload.max_mint, \"Sale: That would put you over your presale limit\");\n\n        _mintedByWallet[msg.sender]+= number_of_items;\n\n        // Cards will be minted into the specified receiver\n        _mintCards(number_of_items, msg.sender);\n        _split(msg.value);\n\n        emit PreSale(msg.sender, msg.sender, number_of_items, msg.value);\n    }\n\n    /**\n     * @dev Verify signed payload\n     */\n    function verify(SignedPayload memory info) public view returns (bool) {\n        require(info.signature.length == 65, \"Sale Verify: Invalid signature length\");\n\n        bytes memory encodedPayload = abi.encode(\n            info.projectID,\n            info.chainID,\n            info.free,\n            info.max_mint,\n            info.receiver,\n            info.valid_from,\n            info.valid_to,\n            info.eth_price,\n            info.dust_price\n        );\n\n        bytes32 hash = keccak256(encodedPayload);\n\n        bytes32 sigR;\n        bytes32 sigS;\n        uint8 sigV;\n        bytes memory signature = info.signature;\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        assembly {\n            sigR := mload(add(signature, 0x20))\n            sigS := mload(add(signature, 0x40))\n            sigV := byte(0, mload(add(signature, 0x60)))\n        }\n\n        bytes32 data = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n        address recovered = ecrecover(data, sigV, sigR, sigS);\n        return recovered == _projectSigner;\n    }\n\n    /**\n     * @dev Is presale active?\n     */\n    function checkPresaleIsActive() public view returns (bool) {\n        if ( (_presaleStart <= getBlockTimestamp()) && (_presaleEnd >= getBlockTimestamp())) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Is sale active?\n     */\n    function checkSaleIsActive() public view returns (bool) {\n        if ((_saleStart <= getBlockTimestamp()) && (_saleEnd >= getBlockTimestamp())) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Royalties splitter\n     */\n    receive() external payable {\n        _split(msg.value);\n    }\n\n    /**\n     * @dev Internal output splitter\n     */\n    function _split(uint256 amount) internal {\n        bool sent;\n        uint256 _total;\n\n        for (uint256 j = 0; j < _wallets.length; j++) {\n            uint256 _amount = (amount * _shares[j]) / 10000;\n            if (j == _wallets.length - 1) {\n                _amount = amount - _total;\n            } else {\n                _total += _amount;\n            }\n            (sent,) = _wallets[j].call{value: _amount}(\"\");\n            require(sent, \"Sale: Splitter failed to send ether\");\n        }\n    }\n\n    modifier onlyAllowed() {\n        require(token.isAllowed(msg.sender) || msg.sender == owner(), \"Sale: Unauthorised\");\n        _;\n    }\n\n    function tellEverything() external view returns (SaleInfo memory) {\n        \n        return SaleInfo(\n            SaleConfiguration(\n                projectID,\n                address(token),\n                _wallets,\n                _shares,\n                _maxMintPerTransaction,\n                _maxPresale,\n                _maxPresalePerAddress,\n                _maxSalePerAddress,\n                _presaleStart,\n                _presaleEnd,\n                _saleStart,\n                _saleEnd,\n                _fullPrice,\n                _projectSigner\n            ),\n            _userMinted,\n            _MaxUserMintable,\n            checkPresaleIsActive(),\n            checkSaleIsActive()\n        );\n    }\n\n    function getBlockTimestamp() public view virtual returns(uint256) {\n        return block.timestamp;\n    }\n}"
9     },
10     "contracts/ssp/sale/ISaleContract.sol": {
11       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\n\ninterface ISaleContract {\n\n    function getBlockTimestamp() external view returns(uint256);\n\n}\n"
12     },
13     "contracts/ssp/token/IToken.sol": {
14       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\n\nstruct revealStruct {\n    bytes32 REQUEST_ID;\n    uint256 RANDOM_NUM;\n    uint256 SHIFT;\n    uint256 RANGE_START;\n    uint256 RANGE_END;\n    bool processed;\n}\n\nstruct TokenInfoForSale {\n    uint256 _projectID;\n    uint256 _maxSupply;\n    uint256 _reservedSupply;\n}\n\nstruct TokenInfo {\n    string _name;\n    string _symbol;\n    uint256 _projectID;\n    uint256 _maxSupply;\n    uint256 _mintedSupply;\n    uint256 _mintedReserve;\n    uint256 _reservedSupply;\n    uint256 _giveawaySupply;\n    string _tokenPreRevealURI;\n    string _tokenRevealURI;\n    bool _transferLocked;\n    bool _lastRevealRequested;\n    uint256 _totalSupply;\n    revealStruct[] _reveals;\n}\n\ninterface IToken {\n\n    function mintIncrementalCards(uint256, address) external;\n    function mintReservedCards(uint256, address) external;\n    function mintGiveawayCard(uint256, address) external;\n\n    function setPreRevealURI(string calldata) external;\n    function setRevealURI(string calldata) external;\n\n    function revealAtCurrentSupply() external;\n    function lastReveal() external;\n    function process(uint256, bytes32) external;\n    \n    function uri(uint256) external view returns (uint256);\n    function tokenURI(uint256) external view returns (string memory);\n\n    function setTransferLock(bool) external;\n    function setAllowed(address, bool) external;\n    function isAllowed(address) external view returns(bool);\n\n    function getFirstGiveawayCardId() external view returns (uint256);\n    function tellEverything() external view returns (TokenInfo memory);\n    function getTokenInfoForSale() external view returns (TokenInfoForSale memory);\n}\n"
15     },
16     "contracts/ssp/extras/recovery/BlackHolePrevention.sol": {
17       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BlackHolePrevention is Ownable {\n    // blackhole prevention methods\n    function retrieveETH() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    \n    function retrieveERC20(address _tracker, uint256 amount) external onlyOwner {\n        IERC20(_tracker).transfer(msg.sender, amount);\n    }\n\n    function retrieve721(address _tracker, uint256 id) external onlyOwner {\n        IERC721(_tracker).transferFrom(address(this), msg.sender, id);\n    }\n}"
18     },
19     "@openzeppelin/contracts/utils/Strings.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     },
55     "metadata": {
56       "useLiteralContent": true
57     },
58     "libraries": {}
59   }
60 }}