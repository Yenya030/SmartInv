1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CultOfETH/CultJoin.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// Created by DegenLabs https://degenlabs.one\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../mocks/ERC721A.sol\";\nimport \"../WhitelistV2.sol\";\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CultOfETH is ERC721A, Ownable, ReentrancyGuard, WhitelistV2 {\n\tusing SafeERC20 for IERC20;\n\n\tbool public mintStarted = false;\n\n\tmapping(address => uint256) private minted;\n\taddress private nextLevelContract;\n\n\tuint256 public maxNFTs;\n\tuint256 public maxCanOwn;\n\n\tstring private URI;\n\n\tevent NewLevelAdded(address indexed token);\n\n\tconstructor(\n\t\taddress signatureChecker,\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory _uri,\n\t\tuint256 _maxCanOwn,\n\t\tuint256 _maxNFTs\n\t) ERC721A(_name, _symbol) WhitelistV2(signatureChecker) {\n\t\tmaxCanOwn = _maxCanOwn;\n\t\tmaxNFTs = _maxNFTs;\n\t\tURI = _uri;\n\t}\n\n\tfunction mint(uint256 amount) public nonReentrant notOnBlacklist {\n\t\trequire(mintStarted, \"Not started\");\n\t\trequire(msg.sender == tx.origin, \"Direct only\");\n\t\trequire(minted[msg.sender] + amount <= maxCanOwn, \"Limit reached\");\n\t\trequire(_totalMinted() + amount <= maxNFTs, \"Mint ended\");\n\n\t\tminted[msg.sender] += amount;\n\t\t_safeMint(msg.sender, amount);\n\t}\n\n\tfunction mintWhitelist(\n\t\tuint256 nonce,\n\t\tuint256 amount,\n\t\tuint16 maxAmount,\n\t\tbytes memory signature\n\t) public nonReentrant notOnBlacklist {\n\t\trequire(msg.sender == tx.origin, \"Direct only\");\n\t\trequire(amount != 0, \"Invalid amount\");\n\t\trequire(_totalMinted() + amount <= maxNFTs, \"Amount over the limit\");\n\t\trequire(minted[msg.sender] + amount <= maxAmount, \"Over whitelist limit\");\n\n\t\t_checkWhitelist(msg.sender, maxAmount, nonce, signature);\n\n\t\tminted[msg.sender] += amount;\n\n\t\t_safeMint(msg.sender, amount);\n\t}\n\n\tfunction _baseURI() internal view override returns (string memory) {\n\t\treturn URI;\n\t}\n\n\tfunction totalMinted() public view returns (uint256) {\n\t\treturn _totalMinted();\n\t}\n\n\tfunction totalMintable() public view returns (uint256) {\n\t\treturn maxNFTs;\n\t}\n\n\tfunction sacrificeFromNextLvl(uint256[] memory tokens, address tokenOwner) external {\n\t\trequire(msg.sender == nextLevelContract, \"CultFather: DENIED\");\n\t\trequire(tokens.length > 0, \"CultFather: EMPTY\");\n\n\t\tfor (uint256 i = 0; i < tokens.length; i++) {\n\t\t\trequire(ownerOf(tokens[i]) == tokenOwner, \"CultFather: NOT_OWNER\");\n\t\t}\n\n\t\tfor (uint256 i = 0; i < tokens.length; i++) {\n\t\t\t_burn(tokens[i]);\n\t\t}\n\t}\n\n\t// ONLY OWNER SECTION\n\n\tfunction mintOwner(address _oo, uint256 amount) public onlyOwner {\n\t\trequire(_totalMinted() + amount <= maxNFTs, \"Mint ended\");\n\t\t_safeMint(_oo, amount);\n\t}\n\n\tfunction setNextLevelContract(address _nextLevelContract) external onlyOwner {\n\t\tnextLevelContract = _nextLevelContract;\n\t}\n\n\tfunction addNewLevel(address _newLevel) external onlyOwner {\n\t\temit NewLevelAdded(_newLevel);\n\t}\n\n\tfunction setBaseURI(string memory newBaseURI) external onlyOwner {\n\t\tURI = newBaseURI;\n\t}\n\n\tfunction setMaxCanOwn(uint256 _mo) external onlyOwner {\n\t\tmaxCanOwn = _mo;\n\t}\n\n\tfunction startMint() external onlyOwner {\n\t\tmintStarted = true;\n\t}\n\n\tfunction pauseMint() external onlyOwner {\n\t\tmintStarted = false;\n\t}\n\n\tfunction startWhiteListMint() external onlyOwner {\n\t\t_startWhitelistMint();\n\t}\n\n\tfunction pauseWhiteListMint() external onlyOwner {\n\t\t_pauseWhitelistMint();\n\t}\n\n\tfunction removeFromWhiteList(uint256 nonce) external onlyOwner {\n\t\t_removeFromWhitelist(nonce);\n\t}\n\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n\t\tIERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\n\t}\n\n\tfunction withdraw() public onlyOwner {\n\t\t(bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\n\t\trequire(success);\n\t}\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
9     },
10     "contracts/mocks/ERC721A.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./IERC721A.sol\";\n\n/**\n * @dev ERC721 token receiver interface.\n */\ninterface ERC721A__IERC721Receiver {\n\tfunction onERC721Received(\n\t\taddress operator,\n\t\taddress from,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n\t// Mask of an entry in packed address data.\n\tuint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n\t// The bit position of `numberMinted` in packed address data.\n\tuint256 private constant BITPOS_NUMBER_MINTED = 64;\n\n\t// The bit position of `numberBurned` in packed address data.\n\tuint256 private constant BITPOS_NUMBER_BURNED = 128;\n\n\t// The bit position of `aux` in packed address data.\n\tuint256 private constant BITPOS_AUX = 192;\n\n\t// Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n\tuint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n\t// The bit position of `startTimestamp` in packed ownership.\n\tuint256 private constant BITPOS_START_TIMESTAMP = 160;\n\n\t// The bit mask of the `burned` bit in packed ownership.\n\tuint256 private constant BITMASK_BURNED = 1 << 224;\n\n\t// The bit position of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n\n\t// The bit mask of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n\t// The tokenId of the next token to be minted.\n\tuint256 private _currentIndex;\n\n\t// The number of tokens burned.\n\tuint256 private _burnCounter;\n\n\t// Token name\n\tstring private _name;\n\n\t// Token symbol\n\tstring private _symbol;\n\n\t// Mapping from token ID to ownership details\n\t// An empty struct value does not necessarily mean the token is unowned.\n\t// See `_packedOwnershipOf` implementation for details.\n\t//\n\t// Bits Layout:\n\t// - [0..159]   `addr`\n\t// - [160..223] `startTimestamp`\n\t// - [224]      `burned`\n\t// - [225]      `nextInitialized`\n\tmapping(uint256 => uint256) private _packedOwnerships;\n\n\t// Mapping owner address to address data.\n\t//\n\t// Bits Layout:\n\t// - [0..63]    `balance`\n\t// - [64..127]  `numberMinted`\n\t// - [128..191] `numberBurned`\n\t// - [192..255] `aux`\n\tmapping(address => uint256) private _packedAddressData;\n\n\t// Mapping from token ID to approved address.\n\tmapping(uint256 => address) private _tokenApprovals;\n\n\t// Mapping from owner to operator approvals\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\n\n\tconstructor(string memory name_, string memory symbol_) {\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\t_currentIndex = _startTokenId();\n\t}\n\n\t/**\n\t * @dev Returns the starting token ID.\n\t * To change the starting token ID, please override this function.\n\t */\n\tfunction _startTokenId() internal view virtual returns (uint256) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @dev Returns the next token ID to be minted.\n\t */\n\tfunction _nextTokenId() internal view returns (uint256) {\n\t\treturn _currentIndex;\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens in existence.\n\t * Burned tokens will reduce the count.\n\t * To get the total number of tokens minted, please see `_totalMinted`.\n\t */\n\tfunction totalSupply() public view override returns (uint256) {\n\t\t// Counter underflow is impossible as _burnCounter cannot be incremented\n\t\t// more than `_currentIndex - _startTokenId()` times.\n\t\tunchecked {\n\t\t\treturn _currentIndex - _burnCounter - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total amount of tokens minted in the contract.\n\t */\n\tfunction _totalMinted() internal view returns (uint256) {\n\t\t// Counter underflow is impossible as _currentIndex does not decrement,\n\t\t// and it is initialized to `_startTokenId()`\n\t\tunchecked {\n\t\t\treturn _currentIndex - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens burned.\n\t */\n\tfunction _totalBurned() internal view returns (uint256) {\n\t\treturn _burnCounter;\n\t}\n\n\t/**\n\t * @dev See {IERC165-supportsInterface}.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n\t\t// The interface IDs are constants representing the first 4 bytes of the XOR of\n\t\t// all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\n\t\t// e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\n\t\treturn\n\t\t\tinterfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n\t\t\tinterfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n\t\t\tinterfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n\t}\n\n\t/**\n\t * @dev See {IERC721-balanceOf}.\n\t */\n\tfunction balanceOf(address owner) public view override returns (uint256) {\n\t\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\n\t\treturn _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens minted by `owner`.\n\t */\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens burned by or on behalf of `owner`.\n\t */\n\tfunction _numberBurned(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n\t */\n\tfunction _getAux(address owner) internal view returns (uint64) {\n\t\treturn uint64(_packedAddressData[owner] >> BITPOS_AUX);\n\t}\n\n\t/**\n\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n\t * If there are multiple variables, please pack them into a uint64.\n\t */\n\tfunction _setAux(address owner, uint64 aux) internal {\n\t\tuint256 packed = _packedAddressData[owner];\n\t\tuint256 auxCasted;\n\t\tassembly {\n\t\t\t// Cast aux without masking.\n\t\t\tauxCasted := aux\n\t\t}\n\t\tpacked = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\n\t\t_packedAddressData[owner] = packed;\n\t}\n\n\t/**\n\t * Returns the packed ownership data of `tokenId`.\n\t */\n\tfunction _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n\t\tuint256 curr = tokenId;\n\n\t\tunchecked {\n\t\t\tif (_startTokenId() <= curr)\n\t\t\t\tif (curr < _currentIndex) {\n\t\t\t\t\tuint256 packed = _packedOwnerships[curr];\n\t\t\t\t\t// If not burned.\n\t\t\t\t\tif (packed & BITMASK_BURNED == 0) {\n\t\t\t\t\t\t// Invariant:\n\t\t\t\t\t\t// There will always be an ownership that has an address and is not burned\n\t\t\t\t\t\t// before an ownership that does not have an address and is not burned.\n\t\t\t\t\t\t// Hence, curr will not underflow.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// We can directly compare the packed value.\n\t\t\t\t\t\t// If the address is zero, packed is zero.\n\t\t\t\t\t\twhile (packed == 0) {\n\t\t\t\t\t\t\tpacked = _packedOwnerships[--curr];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn packed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\trevert OwnerQueryForNonexistentToken();\n\t}\n\n\t/**\n\t * Returns the unpacked `TokenOwnership` struct from `packed`.\n\t */\n\tfunction _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n\t\townership.addr = address(uint160(packed));\n\t\townership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\n\t\townership.burned = packed & BITMASK_BURNED != 0;\n\t}\n\n\t/**\n\t * Returns the unpacked `TokenOwnership` struct at `index`.\n\t */\n\tfunction _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnerships[index]);\n\t}\n\n\t/**\n\t * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n\t */\n\tfunction _initializeOwnershipAt(uint256 index) internal {\n\t\tif (_packedOwnerships[index] == 0) {\n\t\t\t_packedOwnerships[index] = _packedOwnershipOf(index);\n\t\t}\n\t}\n\n\t/**\n\t * Gas spent here starts off proportional to the maximum mint batch size.\n\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n\t */\n\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnershipOf(tokenId));\n\t}\n\n\t/**\n\t * @dev See {IERC721-ownerOf}.\n\t */\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\n\t\treturn address(uint160(_packedOwnershipOf(tokenId)));\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-name}.\n\t */\n\tfunction name() public view virtual override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-symbol}.\n\t */\n\tfunction symbol() public view virtual override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-tokenURI}.\n\t */\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n\t\tstring memory baseURI = _baseURI();\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \"\";\n\t}\n\n\t/**\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n\t * by default, can be overriden in child contracts.\n\t */\n\tfunction _baseURI() internal view virtual returns (string memory) {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @dev Casts the address to uint256 without masking.\n\t */\n\tfunction _addressToUint256(address value) private pure returns (uint256 result) {\n\t\tassembly {\n\t\t\tresult := value\n\t\t}\n\t}\n\n\t/**\n\t * @dev Casts the boolean to uint256 without branching.\n\t */\n\tfunction _boolToUint256(bool value) private pure returns (uint256 result) {\n\t\tassembly {\n\t\t\tresult := value\n\t\t}\n\t}\n\n\t/**\n\t * @dev See {IERC721-approve}.\n\t */\n\tfunction approve(address to, uint256 tokenId) public override {\n\t\taddress owner = address(uint160(_packedOwnershipOf(tokenId)));\n\t\tif (to == owner) revert ApprovalToCurrentOwner();\n\n\t\tif (_msgSenderERC721A() != owner)\n\t\t\tif (!isApprovedForAll(owner, _msgSenderERC721A())) {\n\t\t\t\trevert ApprovalCallerNotOwnerNorApproved();\n\t\t\t}\n\n\t\t_tokenApprovals[tokenId] = to;\n\t\temit Approval(owner, to, tokenId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-getApproved}.\n\t */\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\n\t\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n\t\treturn _tokenApprovals[tokenId];\n\t}\n\n\t/**\n\t * @dev See {IERC721-setApprovalForAll}.\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\n\t\tif (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n\t\t_operatorApprovals[_msgSenderERC721A()][operator] = approved;\n\t\temit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n\t}\n\n\t/**\n\t * @dev See {IERC721-isApprovedForAll}.\n\t */\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n\t\treturn _operatorApprovals[owner][operator];\n\t}\n\n\t/**\n\t * @dev See {IERC721-transferFrom}.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\t_transfer(from, to, tokenId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) public virtual override {\n\t\t_transfer(from, to, tokenId);\n\t\tif (to.code.length != 0)\n\t\t\tif (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t}\n\t}\n\n\t/**\n\t * @dev Returns whether `tokenId` exists.\n\t *\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n\t *\n\t * Tokens start existing when they are minted (`_mint`),\n\t */\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\n\t\treturn\n\t\t\t_startTokenId() <= tokenId &&\n\t\t\ttokenId < _currentIndex && // If within bounds,\n\t\t\t_packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\n\t}\n\n\t/**\n\t * @dev Equivalent to `_safeMint(to, quantity, '')`.\n\t */\n\tfunction _safeMint(address to, uint256 quantity) internal {\n\t\t_safeMint(to, quantity, \"\");\n\t}\n\n\t/**\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - If `to` refers to a smart contract, it must implement\n\t *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _safeMint(\n\t\taddress to,\n\t\tuint256 quantity,\n\t\tbytes memory _data\n\t) internal {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are incredibly unrealistic.\n\t\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n\t\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the balance and number minted.\n\t\t\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] =\n\t\t\t\t_addressToUint256(to) |\n\t\t\t\t(block.timestamp << BITPOS_START_TIMESTAMP) |\n\t\t\t\t(_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\n\n\t\t\tuint256 updatedIndex = startTokenId;\n\t\t\tuint256 end = updatedIndex + quantity;\n\n\t\t\tif (to.code.length != 0) {\n\t\t\t\tdo {\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex);\n\t\t\t\t\tif (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n\t\t\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t\t\t}\n\t\t\t\t} while (updatedIndex < end);\n\t\t\t\t// Reentrancy protection\n\t\t\t\tif (_currentIndex != startTokenId) revert();\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex++);\n\t\t\t\t} while (updatedIndex < end);\n\t\t\t}\n\t\t\t_currentIndex = updatedIndex;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _mint(address to, uint256 quantity) internal {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are incredibly unrealistic.\n\t\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n\t\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the balance and number minted.\n\t\t\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] =\n\t\t\t\t_addressToUint256(to) |\n\t\t\t\t(block.timestamp << BITPOS_START_TIMESTAMP) |\n\t\t\t\t(_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\n\n\t\t\tuint256 updatedIndex = startTokenId;\n\t\t\tuint256 end = updatedIndex + quantity;\n\n\t\t\tdo {\n\t\t\t\temit Transfer(address(0), to, updatedIndex++);\n\t\t\t} while (updatedIndex < end);\n\n\t\t\t_currentIndex = updatedIndex;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _transfer(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) private {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\tif (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n\t\tbool isApprovedOrOwner = (_msgSenderERC721A() == from ||\n\t\t\tisApprovedForAll(from, _msgSenderERC721A()) ||\n\t\t\tgetApproved(tokenId) == _msgSenderERC721A());\n\n\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n\t\tif (to == address(0)) revert TransferToZeroAddress();\n\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tdelete _tokenApprovals[tokenId];\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n\t\tunchecked {\n\t\t\t// We can directly increment and decrement the balances.\n\t\t\t--_packedAddressData[from]; // Updates: `balance -= 1`.\n\t\t\t++_packedAddressData[to]; // Updates: `balance += 1`.\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the next owner.\n\t\t\t// - `startTimestamp` to the timestamp of transfering.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] =\n\t\t\t\t_addressToUint256(to) |\n\t\t\t\t(block.timestamp << BITPOS_START_TIMESTAMP) |\n\t\t\t\tBITMASK_NEXT_INITIALIZED;\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, to, tokenId);\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\n\t}\n\n\t/**\n\t * @dev Equivalent to `_burn(tokenId, false)`.\n\t */\n\tfunction _burn(uint256 tokenId) internal virtual {\n\t\t_burn(tokenId, false);\n\t}\n\n\t/**\n\t * @dev Destroys `tokenId`.\n\t * The approval is cleared when the token is burned.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\taddress from = address(uint160(prevOwnershipPacked));\n\n\t\tif (approvalCheck) {\n\t\t\tbool isApprovedOrOwner = (_msgSenderERC721A() == from ||\n\t\t\t\tisApprovedForAll(from, _msgSenderERC721A()) ||\n\t\t\t\tgetApproved(tokenId) == _msgSenderERC721A());\n\n\t\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n\t\t}\n\n\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tdelete _tokenApprovals[tokenId];\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance -= 1`.\n\t\t\t// - `numberBurned += 1`.\n\t\t\t//\n\t\t\t// We can directly decrement the balance, and increment the number burned.\n\t\t\t// This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\n\t\t\t_packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the last owner.\n\t\t\t// - `startTimestamp` to the timestamp of burning.\n\t\t\t// - `burned` to `true`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] =\n\t\t\t\t_addressToUint256(from) |\n\t\t\t\t(block.timestamp << BITPOS_START_TIMESTAMP) |\n\t\t\t\tBITMASK_BURNED |\n\t\t\t\tBITMASK_NEXT_INITIALIZED;\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, address(0), tokenId);\n\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n\t\tunchecked {\n\t\t\t_burnCounter++;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n\t *\n\t * @param from address representing the previous owner of the given token ID\n\t * @param to target address that will receive the tokens\n\t * @param tokenId uint256 ID of the token to be transferred\n\t * @param _data bytes optional data to send along with the call\n\t * @return bool whether the call correctly returned the expected magic value\n\t */\n\tfunction _checkContractOnERC721Received(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) private returns (bool) {\n\t\ttry ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n\t\t\tbytes4 retval\n\t\t) {\n\t\t\treturn retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n\t\t} catch (bytes memory reason) {\n\t\t\tif (reason.length == 0) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t} else {\n\t\t\t\tassembly {\n\t\t\t\t\trevert(add(32, reason), mload(reason))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n\t * And also called before burning one token.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _beforeTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n\t * minting.\n\t * And also called after one token has been burned.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` has been minted for `to`.\n\t * - When `to` is zero, `tokenId` has been burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _afterTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Returns the message sender (defaults to `msg.sender`).\n\t *\n\t * If you are writing GSN compatible contracts, you need to override this function.\n\t */\n\tfunction _msgSenderERC721A() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\t/**\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n\t */\n\tfunction _toString(uint256 value) internal pure returns (string memory ptr) {\n\t\tassembly {\n\t\t\t// The maximum value of a uint256 contains 78 digits (1 byte per digit),\n\t\t\t// but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n\t\t\t// We will need 1 32-byte word to store the length,\n\t\t\t// and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n\t\t\tptr := add(mload(0x40), 128)\n\t\t\t// Update the free memory pointer to allocate.\n\t\t\tmstore(0x40, ptr)\n\n\t\t\t// Cache the end of the memory to calculate the length later.\n\t\t\tlet end := ptr\n\n\t\t\t// We write the string from the rightmost digit to the leftmost digit.\n\t\t\t// The following is essentially a do-while loop that also handles the zero case.\n\t\t\t// Costs a bit more than early returning for the zero case,\n\t\t\t// but cheaper in terms of deployment and overall runtime costs.\n\t\t\tfor {\n\t\t\t\t// Initialize and perform the first pass without check.\n\t\t\t\tlet temp := value\n\t\t\t\t// Move the pointer 1 byte leftwards to point to an empty character slot.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\t// Write the character to the pointer. 48 is the ASCII index of '0'.\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} temp {\n\t\t\t\t// Keep dividing `temp` until zero.\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} {\n\t\t\t\t// Body of the for loop.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t}\n\n\t\t\tlet length := sub(end, ptr)\n\t\t\t// Move the pointer 32 bytes leftwards to make room for the length.\n\t\t\tptr := sub(ptr, 32)\n\t\t\t// Store the length.\n\t\t\tmstore(ptr, length)\n\t\t}\n\t}\n}\n"
12     },
13     "contracts/WhitelistV2.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\ninterface ISignatureChecker {\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4);\n}\n\nabstract contract WhitelistV2 {\n\tbool public mintWhitelistStarted = false;\n\taddress private immutable _signatureChecker;\n\n\tmapping(address => bool) private _blacklist;\n\tBitMaps.BitMap private _usedSignatures;\n\n\tconstructor(address signatureChecker) {\n\t\t_signatureChecker = signatureChecker;\n\t}\n\n\tmodifier notOnBlacklist() {\n\t\trequire(!_blacklist[msg.sender], \"Blacklisted\");\n\n\t\t_;\n\t}\n\n\tfunction _updateBlacklist(address[] memory users, bool[] memory blackListed) internal {\n\t\tuint256 length = users.length;\n\t\trequire(length == blackListed.length);\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\t_blacklist[users[i]] = blackListed[i];\n\t\t}\n\t}\n\n\tfunction _checkWhitelist(\n\t\taddress user,\n\t\tuint16 maxTokensAmount,\n\t\tuint256 nonce,\n\t\tbytes memory signature\n\t) internal view {\n\t\trequire(mintWhitelistStarted, \"Whitelist: NOT_STARTED\");\n\t\trequire(user == msg.sender, \"Whitelist: WRONG_USER\");\n\t\trequire(!BitMaps.get(_usedSignatures, nonce), \"Whitelist: SIG_REMOVED\");\n\n\t\tbytes32 dataHash = keccak256(\n\t\t\tabi.encode(\"DegenLabsWhiteList\", address(this), block.chainid, nonce, user, maxTokensAmount)\n\t\t);\n\n\t\tbytes4 result = ISignatureChecker(_signatureChecker).isValidSignature(dataHash, signature);\n\t\trequire(result == 0x1626ba7e, \"Whitelist: INVALID_SIGNATURE\");\n\t}\n\n\tfunction _removeFromWhitelist(uint256 nonce) internal {\n\t\t// we invalidate signature with that nonce\n\t\tBitMaps.set(_usedSignatures, nonce);\n\t}\n\n\tfunction _startWhitelistMint() internal {\n\t\tmintWhitelistStarted = true;\n\t}\n\n\tfunction _pauseWhitelistMint() internal {\n\t\tmintWhitelistStarted = false;\n\t}\n}\n"
15     },
16     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
27     },
28     "contracts/mocks/IERC721A.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A {\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror ApprovalCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror ApprovalQueryForNonexistentToken();\n\n\t/**\n\t * The caller cannot approve to their own address.\n\t */\n\terror ApproveToCaller();\n\n\t/**\n\t * The caller cannot approve to the current owner.\n\t */\n\terror ApprovalToCurrentOwner();\n\n\t/**\n\t * Cannot query the balance for the zero address.\n\t */\n\terror BalanceQueryForZeroAddress();\n\n\t/**\n\t * Cannot mint to the zero address.\n\t */\n\terror MintToZeroAddress();\n\n\t/**\n\t * The quantity of tokens minted must be more than zero.\n\t */\n\terror MintZeroQuantity();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror OwnerQueryForNonexistentToken();\n\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror TransferCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token must be owned by `from`.\n\t */\n\terror TransferFromIncorrectOwner();\n\n\t/**\n\t * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n\t */\n\terror TransferToNonERC721ReceiverImplementer();\n\n\t/**\n\t * Cannot transfer to the zero address.\n\t */\n\terror TransferToZeroAddress();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror URIQueryForNonexistentToken();\n\n\tstruct TokenOwnership {\n\t\t// The address of the owner.\n\t\taddress addr;\n\t\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\n\t\tuint64 startTimestamp;\n\t\t// Whether the token has been burned.\n\t\tbool burned;\n\t}\n\n\t/**\n\t * @dev Returns the total amount of tokens stored by the contract.\n\t *\n\t * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t// ==============================\n\t//            IERC165\n\t// ==============================\n\n\t/**\n\t * @dev Returns true if this contract implements the interface defined by\n\t * `interfaceId`. See the corresponding\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n\t * to learn more about how these ids are created.\n\t *\n\t * This function call must use less than 30 000 gas.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n\t// ==============================\n\t//            IERC721\n\t// ==============================\n\n\t/**\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n\t */\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n\t */\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\t/**\n\t * @dev Returns the number of tokens in ``owner``'s account.\n\t */\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\n\n\t/**\n\t * @dev Returns the owner of the `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external;\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) external;\n\n\t/**\n\t * @dev Transfers `tokenId` token from `from` to `to`.\n\t *\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) external;\n\n\t/**\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n\t * The approval is cleared when the token is transferred.\n\t *\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n\t *\n\t * Requirements:\n\t *\n\t * - The caller must own the token or be an approved operator.\n\t * - `tokenId` must exist.\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address to, uint256 tokenId) external;\n\n\t/**\n\t * @dev Approve or remove `operator` as an operator for the caller.\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n\t *\n\t * Requirements:\n\t *\n\t * - The `operator` cannot be the caller.\n\t *\n\t * Emits an {ApprovalForAll} event.\n\t */\n\tfunction setApprovalForAll(address operator, bool _approved) external;\n\n\t/**\n\t * @dev Returns the account approved for `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\n\n\t/**\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n\t *\n\t * See {setApprovalForAll}\n\t */\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\t// ==============================\n\t//        IERC721Metadata\n\t// ==============================\n\n\t/**\n\t * @dev Returns the token collection name.\n\t */\n\tfunction name() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the token collection symbol.\n\t */\n\tfunction symbol() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n\t */\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     },
55     "libraries": {}
56   }
57 }}