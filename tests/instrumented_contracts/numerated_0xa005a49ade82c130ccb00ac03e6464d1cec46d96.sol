1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/AmplifiTransistor.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/security/ReentrancyGuard.sol\";\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IAmplifi.sol\";\nimport \"./interfaces/IUniswap.sol\";\nimport \"./Types.sol\";\n\n/**\n * Amplifi\n * Website: https://perpetualyield.io/\n * Telegram: https://t.me/Amplifi_ERC\n * Twitter: https://twitter.com/amplifidefi\n */\ncontract AmplifiTransistor is Ownable, ReentrancyGuard {\n    uint16 public maxMonths = 1;\n    uint16 public maxTransistorsPerMinter = 48;\n    uint256 public gracePeriod = 30 days;\n\n    uint256 public totalTransistors = 0;\n    mapping(uint256 => Types.Transistor) public transistors;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(uint256 => uint256)) public ownedTransistors;\n    mapping(uint256 => uint256) public ownedTransistorsIndex;\n\n    uint256 public creationFee = 0.004 ether;\n    uint256 public renewalFee = 0.004 ether;\n    uint256 public refundFee = 0.12 ether;\n    uint256 public mintPrice = 6e18;\n    uint256 public refundAmount = 6e18;\n    address public burnAddress;\n\n    uint256[20] public rates = [\n        169056603773,\n        151305660376,\n        135418566037,\n        121199616603,\n        108473656860,\n        97083922889,\n        86890110986,\n        77766649332,\n        69601151153,\n        62293030282,\n        55752262102,\n        49898274581,\n        44658955750,\n        39969765396,\n        35772940030,\n        32016781327,\n        28655019287,\n        25646242262,\n        20543281208,\n        17236591470\n    ];\n\n    IAmplifi public immutable amplifi;\n    IUniswapV2Router02 public immutable router;\n    IERC20 public immutable USDC;\n\n    Types.TransistorFeeRecipients public feeRecipients;\n\n    uint16 public claimFee = 600;\n    uint16 public mintBurn = 9_000;\n    uint16 public mintLP = 1_000;\n    // Basis for above fee values\n    uint16 public constant bps = 10_000;\n\n    constructor(\n        IAmplifi _amplifi,\n        IUniswapV2Router02 _router,\n        IERC20 _usdc,\n        address _burnAddress,\n        address _standardFeeRecipient,\n        address _taxRecipient,\n        address _operations,\n        address _developers\n    ) {\n        amplifi = _amplifi;\n        router = _router;\n        USDC = _usdc;\n        burnAddress = _burnAddress;\n\n        feeRecipients = Types.TransistorFeeRecipients(\n            _standardFeeRecipient,\n            _taxRecipient,\n            _standardFeeRecipient,\n            _standardFeeRecipient,\n            _operations,\n            _developers\n        );\n\n        amplifi.approve(address(_router), type(uint256).max);\n    }\n\n    function createTransistor(uint256 _months, uint256 _amountOutMin) external payable nonReentrant returns (uint256) {\n        require(msg.value == getRenewalFeeForMonths(_months) + creationFee, \"Invalid Ether value provided\");\n        chargeFee(feeRecipients.creationFee, msg.value);\n\n        return _createTransistor(_months, _amountOutMin);\n    }\n\n    function createTransistorBatch(\n        uint256 _amount,\n        uint256 _months,\n        uint256 _amountOutMin\n    ) external payable nonReentrant returns (uint256[] memory ids) {\n        require(msg.value == (getRenewalFeeForMonths(_months) + creationFee) * _amount, \"Invalid Ether value provided\");\n        chargeFee(feeRecipients.creationFee, msg.value);\n\n        ids = new uint256[](_amount);\n        for (uint256 i = 0; i < _amount; ) {\n            ids[i] = _createTransistor(_months, _amountOutMin);\n            unchecked {\n                ++i;\n            }\n        }\n        return ids;\n    }\n\n    function _createTransistor(uint256 _months, uint256 _amountOutMin) internal returns (uint256) {\n        require(balanceOf[msg.sender] < maxTransistorsPerMinter, \"Too many transistors\");\n        require(_months > 0 && _months <= maxMonths, \"Must be greater than 0 and less than maxMonths\");\n\n        require(amplifi.transferFrom(msg.sender, address(this), mintPrice), \"Unable to transfer Amplifi\");\n\n        // we can't burn from the contract so we have to send to a special address from which the deployer will then burn\n        amplifi.transfer(burnAddress, (mintPrice * mintBurn) / bps);\n\n        sell((mintPrice * (mintLP / 2)) / bps, _amountOutMin);\n        uint256 usdcBalance = USDC.balanceOf(address(this));\n        USDC.transfer(feeRecipients.creationTax, usdcBalance);\n\n        amplifi.transfer(feeRecipients.creationTax, (mintPrice * (mintLP / 2)) / bps);\n\n        uint256 id;\n        uint256 length;\n        unchecked {\n            id = totalTransistors++;\n            length = balanceOf[msg.sender]++;\n        }\n\n        transistors[id] = Types.Transistor(msg.sender, block.timestamp, block.timestamp + 30 days * _months, 0, 0);\n        ownedTransistors[msg.sender][length] = id;\n        ownedTransistorsIndex[id] = length;\n\n        return id;\n    }\n\n    function renewTransistor(uint256 _id, uint256 _months) external payable nonReentrant {\n        require(msg.value == getRenewalFeeForMonths(_months), \"Invalid Ether value provided\");\n        chargeFee(feeRecipients.renewalFee, msg.value);\n\n        _renewTransistor(_id, _months);\n    }\n\n    function renewTransistorBatch(uint256[] calldata _ids, uint256 _months) external payable nonReentrant {\n        uint256 length = _ids.length;\n        require(msg.value == (getRenewalFeeForMonths(_months)) * length, \"Invalid Ether value provided\");\n        chargeFee(feeRecipients.renewalFee, msg.value);\n\n        for (uint256 i = 0; i < length; ) {\n            _renewTransistor(_ids[i], _months);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _renewTransistor(uint256 _id, uint256 _months) internal {\n        Types.Transistor storage transistor = transistors[_id];\n\n        require(transistor.minter == msg.sender, \"Invalid ownership\");\n        require(transistor.expires + gracePeriod >= block.timestamp, \"Grace period expired or transistor reversed\");\n\n        uint256 monthsLeft = 0;\n        if (block.timestamp > transistor.expires) {\n            monthsLeft = (block.timestamp - transistor.expires) / 30 days;\n        } else {\n            monthsLeft = (transistor.expires - block.timestamp) / 30 days;\n        }\n\n        require(_months + monthsLeft <= maxMonths, \"Too many months\");\n\n        transistor.expires += 30 days * _months;\n    }\n\n    function reverseTransistor(uint256 _id) external payable nonReentrant {\n        Types.Transistor storage transistor = transistors[_id];\n\n        require(transistor.minter == msg.sender, \"Invalid ownership\");\n        require(transistor.expires > block.timestamp, \"Transistor expired\");\n        require(transistor.numClaims == 0, \"Already claimed\");\n        require(msg.value == refundFee, \"Invalid Ether value provided\");\n\n        chargeFee(feeRecipients.reverseFee, msg.value);\n\n        transistor.expires = 0;\n        amplifi.transfer(msg.sender, refundAmount);\n    }\n\n    function claimAMPLIFI(uint256 _id, uint256 _amountOutMin) external nonReentrant {\n        _claimAMPLIFI(_id, _amountOutMin);\n    }\n\n    function claimAMPLIFIBatch(uint256[] calldata _ids, uint256 _amountOutMin) external nonReentrant {\n        uint256 length = _ids.length;\n        for (uint256 i = 0; i < length; ) {\n            _claimAMPLIFI(_ids[i], _amountOutMin);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _claimAMPLIFI(uint256 _id, uint256 _amountOutMin) internal {\n        Types.Transistor storage transistor = transistors[_id];\n        require(transistor.minter == msg.sender, \"Invalid ownership\");\n        require(transistor.expires > block.timestamp, \"Transistor expired or reversed\");\n\n        uint256 amount = getPendingAMPLIFI(_id);\n        amount = takeClaimFee(amount, _amountOutMin);\n        amplifi.transfer(msg.sender, amount);\n\n        transistor.numClaims++;\n        transistor.lastClaimed = block.timestamp;\n    }\n\n    function getPendingAMPLIFI(uint256 _id) public view returns (uint256) {\n        Types.Transistor memory transistor = transistors[_id];\n\n        uint256 rate = transistor.numClaims >= rates.length ? rates[rates.length - 1] : rates[transistor.numClaims];\n        uint256 amount = (block.timestamp - (transistor.numClaims > 0 ? transistor.lastClaimed : transistor.created)) *\n            (rate);\n\n        return amount;\n    }\n\n    function takeClaimFee(uint256 _amount, uint256 _amountOutMin) internal returns (uint256) {\n        uint256 fee = (_amount * claimFee) / bps;\n\n        sell(fee, _amountOutMin);\n\n        uint256 usdcBalance = USDC.balanceOf(address(this));\n\n        USDC.transfer(feeRecipients.claimFeeDevelopers, (usdcBalance * 34) / 100);\n        USDC.transfer(feeRecipients.claimFeeOperations, (usdcBalance * 66) / 100);\n\n        return _amount - fee;\n    }\n\n    function sell(uint256 _amount, uint256 _amountOutMin) internal {\n        address[] memory path = new address[](2);\n        path[0] = address(amplifi);\n        path[1] = address(USDC);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amount,\n            _amountOutMin,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function getRenewalFeeForMonths(uint256 _months) public view returns (uint256) {\n        return renewalFee * _months;\n    }\n\n    function airdropTransistors(address[] calldata _users, uint256[] calldata _months)\n        external\n        onlyOwner\n        returns (uint256[] memory ids)\n    {\n        require(_users.length == _months.length, \"Lengths not aligned\");\n\n        uint256 length = _users.length;\n        ids = new uint256[](length);\n        for (uint256 i = 0; i < length; ) {\n            ids[i] = _airdropTransistor(_users[i], _months[i]);\n            unchecked {\n                ++i;\n            }\n        }\n\n        return ids;\n    }\n\n    function _airdropTransistor(address _user, uint256 _months) internal returns (uint256) {\n        require(_months <= maxMonths, \"Too many months\");\n\n        uint256 id;\n        uint256 length;\n        unchecked {\n            id = totalTransistors++;\n            length = balanceOf[_user]++;\n        }\n\n        transistors[id] = Types.Transistor(_user, block.timestamp, block.timestamp + 30 days * _months, 0, 0);\n        ownedTransistors[_user][length] = id;\n        ownedTransistorsIndex[id] = length;\n\n        return id;\n    }\n\n    function removeTransistor(uint256 _id) external onlyOwner {\n        uint256 lastTransistorIndex = balanceOf[transistors[_id].minter];\n        uint256 transistorIndex = ownedTransistorsIndex[_id];\n\n        if (transistorIndex != lastTransistorIndex) {\n            uint256 lastTransistorId = ownedTransistors[transistors[_id].minter][lastTransistorIndex];\n\n            ownedTransistors[transistors[_id].minter][transistorIndex] = lastTransistorId; // Move the last Transistor to the slot of the to-delete token\n            ownedTransistorsIndex[lastTransistorId] = transistorIndex; // Update the moved Transistor's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete ownedTransistorsIndex[_id];\n        delete ownedTransistors[transistors[_id].minter][lastTransistorIndex];\n\n        balanceOf[transistors[_id].minter]--;\n        totalTransistors--;\n\n        delete transistors[_id];\n    }\n\n    function chargeFee(address _recipient, uint256 _amount) internal {\n        (bool success, ) = _recipient.call{value: _amount}(\"\");\n        require(success, \"Could not send ETH\");\n    }\n\n    function setRates(uint256[] calldata _rates) external onlyOwner {\n        require(_rates.length == rates.length, \"Invalid length\");\n\n        uint256 length = _rates.length;\n        for (uint256 i = 0; i < length; ) {\n            rates[i] = _rates[i];\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function setMintPrice(uint256 _mintPrice) external onlyOwner {\n        mintPrice = _mintPrice;\n    }\n\n    function setMaxMonths(uint16 _maxMonths) external onlyOwner {\n        maxMonths = _maxMonths;\n    }\n\n    function setFees(\n        uint256 _creationFee,\n        uint256 _renewalFee,\n        uint256 _refundFee,\n        uint16 _claimFee,\n        uint16 _mintBurn,\n        uint16 _mintLP\n    ) external onlyOwner {\n        creationFee = _creationFee;\n        renewalFee = _renewalFee;\n        refundFee = _refundFee;\n        claimFee = _claimFee;\n        mintBurn = _mintBurn;\n        mintLP = _mintLP;\n    }\n\n    function setRefundAmounts(uint256 _refundAmount) external onlyOwner {\n        refundAmount = _refundAmount;\n    }\n\n    function setBurnAddress(address _burnAddress) external onlyOwner {\n        burnAddress = _burnAddress;\n    }\n\n    function setFeeRecipients(Types.TransistorFeeRecipients calldata _feeRecipients) external onlyOwner {\n        feeRecipients = _feeRecipients;\n    }\n\n    function setPeriods(uint256 _gracePeriod) external onlyOwner {\n        gracePeriod = _gracePeriod;\n    }\n\n    function withdrawETH(address _recipient) external onlyOwner {\n        (bool success, ) = _recipient.call{value: address(this).balance}(\"\");\n        require(success, \"Could not send ETH\");\n    }\n\n    function withdrawToken(IERC20 _token, address _recipient) external onlyOwner {\n        _token.transfer(_recipient, _token.balanceOf(address(this)));\n    }\n\n    receive() external payable {}\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "src/interfaces/IAmplifi.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\n\ninterface IAmplifi is IERC20 {\n    function burnForAmplifier(address _burnee, uint256 _amount) external returns (bool);\n}\n"
18     },
19     "src/interfaces/IUniswap.sol": {
20       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n}\n"
21     },
22     "src/Types.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nlibrary Types {\n    struct FeeRecipients {\n        address operations;\n        address validatorAcquisition;\n        address PCR;\n        address yield;\n        address xChainValidatorAcquisition;\n        address indexFundPools;\n        address gAMPRewardsPool;\n        address OTCSwap;\n        address rescueFund;\n        address protocolImprovement;\n        address developers;\n    }\n\n    struct Fees {\n        uint16 operations;\n        uint16 validatorAcquisition;\n        uint16 PCR;\n        uint16 yield;\n        uint16 xChainValidatorAcquisition;\n        uint16 indexFundPools;\n        uint16 gAMPRewardsPool;\n        uint16 OTCSwap;\n        uint16 rescueFund;\n        uint16 protocolImprovement;\n        uint16 developers;\n    }\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n        uint256 started;\n        uint256 unlocks;\n    }\n\n    enum FuseProduct {\n        None,\n        OneYear,\n        ThreeYears,\n        FiveYears\n    }\n\n    struct Amplifier {\n        FuseProduct fuseProduct;\n        address minter;\n        uint256 created;\n        uint256 expires;\n        uint256 numClaims;\n        uint256 lastClaimed;\n        uint256 fused;\n        uint256 unlocks;\n        uint256 lastFuseClaimed;\n    }\n\n    struct AmplifierFeeRecipients {\n        address operations;\n        address validatorAcquisition;\n        address developers;\n    }\n\n    struct Transistor {\n        address minter;\n        uint256 created;\n        uint256 expires;\n        uint256 numClaims;\n        uint256 lastClaimed;\n    }\n\n    struct TransistorFeeRecipients {\n        address creationFee;\n        address creationTax;\n        address renewalFee;\n        address reverseFee;\n        address claimFeeOperations;\n        address claimFeeDevelopers;\n    }\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     }
28   },
29   "settings": {
30     "remappings": [
31       "ds-test/=lib/forge-std/lib/ds-test/src/",
32       "forge-std/=lib/forge-std/src/",
33       "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
34       "solenv/=lib/solenv/src/",
35       "solmate/=lib/solmate/src/"
36     ],
37     "optimizer": {
38       "enabled": true,
39       "runs": 200
40     },
41     "metadata": {
42       "bytecodeHash": "ipfs"
43     },
44     "outputSelection": {
45       "*": {
46         "*": [
47           "evm.bytecode",
48           "evm.deployedBytecode",
49           "devdoc",
50           "userdoc",
51           "metadata",
52           "abi"
53         ]
54       }
55     },
56     "evmVersion": "london",
57     "libraries": {}
58   }
59 }}