1 {{
2   "language": "Solidity",
3   "sources": {
4     "Bridge/Bridge.sol": {
5       "content": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity =0.8.17;\n\nimport \"./MasterToken.sol\";\nimport \"./Ownable.sol\";\nimport \"./ERC20Burnable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./EthTokenReciever.sol\";\n\n/**\n * Provides functionality of the HASHI bridge\n */\ncontract Bridge is EthTokenReciever {\n    using SafeERC20 for IERC20;\n\n    bool internal initialized_;\n    bool internal preparedForMigration_;\n\n    mapping(address => bool) public isPeer;\n    uint256 public peersCount;\n\n    /** Substrate proofs used */\n    mapping(bytes32 => bool) public used;\n    mapping(address => bool) public _uniqueAddresses;\n\n    /** White list of ERC-20 ethereum native tokens */\n    mapping(address => bool) public acceptedEthTokens;\n\n    /** White lists of ERC-20 SORA native tokens\n     * We use several representations of the white list for optimisation purposes.\n     */\n    mapping(bytes32 => address) public _sidechainTokens;\n    mapping(address => bytes32) public _sidechainTokensByAddress;\n    address[] public _sidechainTokenAddressArray;\n\n    /**\n     * For XOR and VAL use old token contracts, created for SORA 1 bridge.\n     * Also for XOR and VAL transfers from SORA 2 to Ethereum old bridges will be used.\n     */\n    address public immutable _addressVAL;\n    address public immutable _addressXOR;\n    /** EVM netowrk ID */\n    bytes32 public immutable _networkId;\n\n    event Withdrawal(bytes32 txHash);\n    event Deposit(\n        bytes32 destination,\n        uint256 amount,\n        address token,\n        bytes32 sidechainAsset\n    );\n    event ChangePeers(address peerId, bool removal);\n    event PreparedForMigration();\n    event Migrated(address to);\n\n    /**\n     * Constructor.\n     * @param initialPeers - list of initial bridge validators on substrate side.\n     * @param addressVAL address of VAL token Contract\n     * @param addressXOR address of XOR token Contract\n     * @param networkId id of current EvM network used for bridge purpose.\n     */\n    constructor(\n        address[] memory initialPeers,\n        address[] memory sidechainTokenAddresses,\n        bytes32[] memory sidechainAssetIds,\n        address[] memory erc20Addresses,\n        address addressVAL,\n        address addressXOR,\n        bytes32 networkId\n    ) {\n        require(\n            sidechainAssetIds.length == sidechainTokenAddresses.length,\n            \"Length mismatch\"\n        );\n\n        for (uint256 i; i < initialPeers.length; i++) {\n            addPeer(initialPeers[i]);\n        }\n        _addressXOR = addressXOR;\n        _addressVAL = addressVAL;\n        _networkId = networkId;\n        initialized_ = true;\n\n        acceptedEthTokens[addressXOR] = true;\n        acceptedEthTokens[addressVAL] = true;\n\n        for (uint256 i; i < sidechainTokenAddresses.length; i++) {\n            address tokenAddress = sidechainTokenAddresses[i];\n            bytes32 assetId = sidechainAssetIds[i];\n            _sidechainTokens[assetId] = tokenAddress;\n            _sidechainTokensByAddress[tokenAddress] = assetId;\n            _sidechainTokenAddressArray.push(tokenAddress);\n        }\n        uint256 erc20TokensCount = erc20Addresses.length;\n        for (uint256 i; i < erc20TokensCount; i++) {\n            acceptedEthTokens[erc20Addresses[i]] = true;\n        }\n    }\n\n    modifier shouldBeInitialized() {\n        require(\n            initialized_ == true,\n            \"Contract should be initialized to use this function\"\n        );\n        _;\n    }\n\n    modifier shouldNotBePreparedForMigration() {\n        require(\n            preparedForMigration_ == false,\n            \"Contract should not be prepared for migration to use this function\"\n        );\n        _;\n    }\n\n    modifier shouldBePreparedForMigration() {\n        require(\n            preparedForMigration_ == true,\n            \"Contract should be prepared for migration to use this function\"\n        );\n        _;\n    }\n\n    fallback() external {\n        revert();\n    }\n\n    receive() external payable {\n        revert();\n    }\n\n    /*\n    Used only for migration\n    */\n    function receivePayment() external payable override {}\n\n    /**\n     * Adds new token to whitelist.\n     * Token should not been already added.\n     *\n     * @param newToken new token contract address\n     * @param ticker token ticker (symbol)\n     * @param name token title\n     * @param decimals count of token decimal places\n     * @param txHash transaction hash from sidechain\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function addEthNativeToken(\n        address newToken,\n        string memory ticker,\n        string memory name,\n        uint8 decimals,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized {\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            acceptedEthTokens[newToken] == false,\n            \"ERC20 token is not whitelisted\"\n        );\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        newToken,\n                        ticker,\n                        name,\n                        decimals,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n        acceptedEthTokens[newToken] = true;\n    }\n\n    /**\n     * Preparations for migration to new Bridge contract\n     *\n     * @param salt unique data used for signature\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function prepareForMigration(\n        bytes32 salt,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized shouldNotBePreparedForMigration {\n        require(used[salt] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        \"prepareMigration\",\n                        address(this),\n                        salt,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[salt] = true;\n        preparedForMigration_ = true;\n        emit PreparedForMigration();\n    }\n\n    /**\n     * Shutdown this contract and migrate tokens ownership to the new contract.\n     *\n     * @param salt unique data used for signature generation\n     * @param newContractAddress address of the new bridge contract\n     * @param erc20nativeTokens list of ERC20 tokens with non zero balances for this contract. Can be taken from substrate bridge peers.\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function shutDownAndMigrate(\n        bytes32 salt,\n        address payable newContractAddress,\n        address[] calldata erc20nativeTokens,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized shouldBePreparedForMigration {\n        require(used[salt] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        newContractAddress,\n                        salt,\n                        erc20nativeTokens,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[salt] = true;\n        uint256 sidechainTokensCount = _sidechainTokenAddressArray.length;\n        for (uint256 i; i < sidechainTokensCount; i++) {\n            Ownable token = Ownable(_sidechainTokenAddressArray[i]);\n            token.transferOwnership(newContractAddress);\n        }\n        uint256 erc20nativeTokensCount = erc20nativeTokens.length;\n        for (uint256 i; i < erc20nativeTokensCount; i++) {\n            IERC20 token = IERC20(erc20nativeTokens[i]);\n            token.safeTransfer(\n                newContractAddress,\n                token.balanceOf(address(this))\n            );\n        }\n        EthTokenReciever(newContractAddress).receivePayment{\n            value: address(this).balance\n        }();\n        initialized_ = false;\n        emit Migrated(newContractAddress);\n    }\n\n    /**\n     * Add new token from sidechain to the bridge white list.\n     *\n     * @param name token title\n     * @param symbol token symbol\n     * @param decimals number of decimals\n     * @param sidechainAssetId token id on the sidechain\n     * @param txHash sidechain transaction hash\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function addNewSidechainToken(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        bytes32 sidechainAssetId,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized {\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        name,\n                        symbol,\n                        decimals,\n                        sidechainAssetId,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n        // Create new instance of the token\n        MasterToken tokenInstance = new MasterToken(\n            name,\n            symbol,\n            decimals,\n            address(this),\n            0,\n            sidechainAssetId\n        );\n        address tokenAddress = address(tokenInstance);\n        _sidechainTokens[sidechainAssetId] = tokenAddress;\n        _sidechainTokensByAddress[tokenAddress] = sidechainAssetId;\n        _sidechainTokenAddressArray.push(tokenAddress);\n    }\n\n    /**\n     * Send Ethereum to sidechain.\n     *\n     * @param to destionation address on sidechain.\n     */\n    function sendEthToSidechain(bytes32 to)\n        external\n        payable\n        shouldBeInitialized\n        shouldNotBePreparedForMigration\n    {\n        require(msg.value > 0, \"ETH VALUE SHOULD BE MORE THAN 0\");\n        bytes32 empty;\n        emit Deposit(to, msg.value, address(0x0), empty);\n    }\n\n    /**\n     * Send ERC-20 token to sidechain.\n     *\n     * @param to destination address on the sidechain\n     * @param amount amount to sendERC20ToSidechain\n     * @param tokenAddress contract address of token to send\n     */\n    function sendERC20ToSidechain(\n        bytes32 to,\n        uint256 amount,\n        address tokenAddress\n    ) external shouldBeInitialized shouldNotBePreparedForMigration {\n        IERC20 token = IERC20(tokenAddress);\n\n        bytes32 sidechainAssetId = _sidechainTokensByAddress[tokenAddress];\n        if (\n            sidechainAssetId != \"\" ||\n            _addressVAL == tokenAddress ||\n            _addressXOR == tokenAddress\n        ) {\n            ERC20Burnable mtoken = ERC20Burnable(tokenAddress);\n            mtoken.burnFrom(msg.sender, amount);\n        } else {\n            require(\n                acceptedEthTokens[tokenAddress],\n                \"The Token is not accepted for transfer to sidechain\"\n            );\n            uint256 balanceBefore = token.balanceOf(address(this));\n            token.safeTransferFrom(msg.sender, address(this), amount);\n            uint256 balanceAfter = token.balanceOf(address(this));\n            require(\n                balanceAfter - balanceBefore >= amount,\n                \"Not enough tokens transferred\"\n            );\n        }\n        emit Deposit(to, amount, tokenAddress, sidechainAssetId);\n    }\n\n    /**\n     * Add new peer using peers quorum.\n     *\n     * @param newPeerAddress address of the peer to add\n     * @param txHash tx hash from sidechain\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function addPeerByPeer(\n        address newPeerAddress,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized returns (bool) {\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        \"addPeer\",\n                        newPeerAddress,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n\n        addPeer(newPeerAddress);\n        emit ChangePeers(newPeerAddress, false);\n        return true;\n    }\n\n    /**\n     * Remove peer using peers quorum.\n     *\n     * @param peerAddress address of the peer to remove\n     * @param txHash tx hash from sidechain\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function removePeerByPeer(\n        address peerAddress,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized returns (bool) {\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        \"removePeer\",\n                        peerAddress,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n\n        removePeer(peerAddress);\n        emit ChangePeers(peerAddress, true);\n        return true;\n    }\n\n    /**\n     * Withdraws specified amount of ether or one of ERC-20 tokens to provided sidechain address\n     * @param tokenAddress address of token to withdraw (0 for ether)\n     * @param amount amount of tokens or ether to withdraw\n     * @param to target account address\n     * @param txHash hash of transaction from sidechain\n     * @param from source of transfer\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function receiveByEthereumAssetAddress(\n        address tokenAddress,\n        uint256 amount,\n        address payable to,\n        address from,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized {\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        tokenAddress,\n                        amount,\n                        to,\n                        from,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n\n        if (tokenAddress == address(0)) {\n            // untrusted transfer, relies on provided cryptographic proof\n            to.transfer(amount);\n        } else {\n            IERC20 coin = IERC20(tokenAddress);\n            // untrusted call, relies on provided cryptographic proof\n            coin.safeTransfer(to, amount);\n        }\n        emit Withdrawal(txHash);\n    }\n\n    /**\n     * Mint new Token\n     * @param sidechainAssetId id of sidechainToken to mint\n     * @param amount how much to mint\n     * @param to destination address\n     * @param from sender address\n     * @param txHash hash of transaction from Iroha\n     * @param v array of signatures of tx_hash (v-component)\n     * @param r array of signatures of tx_hash (r-component)\n     * @param s array of signatures of tx_hash (s-component)\n     */\n    function receiveBySidechainAssetId(\n        bytes32 sidechainAssetId,\n        uint256 amount,\n        address to,\n        address from,\n        bytes32 txHash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external shouldBeInitialized {\n        require(\n            _sidechainTokens[sidechainAssetId] != address(0x0),\n            \"Sidechain asset is not registered\"\n        );\n        require(used[txHash] == false, \"txHash already used\");\n        require(\n            checkSignatures(\n                keccak256(\n                    abi.encodePacked(\n                        address(this),\n                        sidechainAssetId,\n                        amount,\n                        to,\n                        from,\n                        txHash,\n                        _networkId\n                    )\n                ),\n                v,\n                r,\n                s\n            ),\n            \"Peer signatures are invalid\"\n        );\n        used[txHash] = true;\n\n        MasterToken tokenInstance = MasterToken(\n            _sidechainTokens[sidechainAssetId]\n        );\n        tokenInstance.mintTokens(to, amount);\n        emit Withdrawal(txHash);\n    }\n\n    /**\n     * Checks given addresses for duplicates and if they are peers signatures\n     * @param hash unsigned data\n     * @param v v-component of signature from hash\n     * @param r r-component of signature from hash\n     * @param s s-component of signature from hash\n     * @return true if all given addresses are correct or false otherwise\n     */\n    function checkSignatures(\n        bytes32 hash,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) private returns (bool) {\n        require(peersCount >= 1, \"peersCount too low\");\n        uint256 signatureCount = v.length;\n        require(\n            signatureCount == r.length,\n            \"signatureCount and r length mismatch\"\n        );\n        require(\n            signatureCount == s.length,\n            \"signatureCount and s length mismatch\"\n        );\n        uint256 needSigs = peersCount - (peersCount - 1) / 3;\n        require(signatureCount >= needSigs, \"not enough signatures\");\n\n        uint256 count;\n        address[] memory recoveredAddresses = new address[](signatureCount);\n        for (uint256 i; i < signatureCount; ++i) {\n            address recoveredAddress = recoverAddress(hash, v[i], r[i], s[i]);\n\n            // not a peer address or not unique\n            if (\n                isPeer[recoveredAddress] != true ||\n                _uniqueAddresses[recoveredAddress] == true\n            ) {\n                continue;\n            }\n            recoveredAddresses[count] = recoveredAddress;\n            unchecked {\n                count = count + 1;\n            }\n            _uniqueAddresses[recoveredAddress] = true;\n        }\n\n        // restore state for future usages\n        for (uint256 i; i < count; ++i) {\n            _uniqueAddresses[recoveredAddresses[i]] = false;\n        }\n\n        return count >= needSigs;\n    }\n\n    /**\n     * Recovers address from a given single signature\n     * @param hash unsigned data\n     * @param v v-component of signature from hash\n     * @param r r-component of signature from hash\n     * @param s s-component of signature from hash\n     * @return address recovered from signature\n     */\n    function recoverAddress(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (address) {\n        bytes32 simple_hash = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n        );\n        address res = ecrecover(simple_hash, v, r, s);\n        return res;\n    }\n\n    /**\n     * Adds new peer to list of signature verifiers.\n     * Internal function\n     * @param newAddress address of new peer\n     */\n    function addPeer(address newAddress) internal returns (uint256) {\n        require(isPeer[newAddress] == false, \"peer already added\");\n        isPeer[newAddress] = true;\n        ++peersCount;\n        return peersCount;\n    }\n\n    function removePeer(address peerAddress) internal {\n        require(isPeer[peerAddress] == true, \"peer does not exists\");\n        isPeer[peerAddress] = false;\n        --peersCount;\n    }\n}\n"
6     },
7     "Bridge/MasterToken.sol": {
8       "content": "// SPDX-License-Identifier: Apache License 2.0\n\npragma solidity =0.8.17;\n\nimport \"./ERC20Detailed.sol\";\nimport \"./ERC20Burnable.sol\";\nimport \"./Ownable.sol\";\n\ncontract MasterToken is ERC20Burnable, ERC20Detailed, Ownable {\n    bytes32 public _sidechainAssetId;\n\n    /**\n     * @dev Constructor that gives the specified address all of existing tokens.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address beneficiary,\n        uint256 supply,\n        bytes32 sidechainAssetId\n    ) ERC20Detailed(name, symbol, decimals) {\n        _sidechainAssetId = sidechainAssetId;\n        _mint(beneficiary, supply);\n    }\n\n    fallback() external {\n        revert();\n    }\n\n    function mintTokens(address beneficiary, uint256 amount) public onlyOwner {\n        _mint(beneficiary, amount);\n    }\n}\n"
9     },
10     "Bridge/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: Apache License 2.0\n\npragma solidity =0.8.17;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Not owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
12     },
13     "Bridge/ERC20Burnable.sol": {
14       "content": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity =0.8.17;\n\nimport \"./ERC20.sol\";\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n"
15     },
16     "Bridge/SafeERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity =0.8.17;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
18     },
19     "Bridge/EthTokenReciever.sol": {
20       "content": "// SPDX-License-Identifier: Apache License 2.0\n\npragma solidity =0.8.17;\n\ninterface EthTokenReciever {\n    function receivePayment() external payable;\n}\n"
21     },
22     "Bridge/ERC20Detailed.sol": {
23       "content": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity =0.8.17;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\nabstract contract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"
24     },
25     "Bridge/IERC20.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.17;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
27     },
28     "Bridge/ERC20.sol": {
29       "content": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity =0.8.17;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender] - value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowed[msg.sender][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowed[msg.sender][spender] - subtractedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from] - value;\n        _balances[to] = _balances[to] + value;\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply + value;\n        _balances[account] = _balances[account] + value;\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply - value;\n        _balances[account] = _balances[account] - value;\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender] - value);\n    }\n}\n"
30     },
31     "Bridge/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity =0.8.17;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
33     }
34   },
35   "settings": {
36     "optimizer": {
37       "enabled": true,
38       "runs": 200
39     },
40     "outputSelection": {
41       "*": {
42         "*": [
43           "evm.bytecode",
44           "evm.deployedBytecode",
45           "devdoc",
46           "userdoc",
47           "metadata",
48           "abi"
49         ]
50       }
51     },
52     "metadata": {
53       "useLiteralContent": true
54     },
55     "libraries": {}
56   }
57 }}