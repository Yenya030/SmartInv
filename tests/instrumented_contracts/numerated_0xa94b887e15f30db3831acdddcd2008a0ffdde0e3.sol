1 pragma solidity ^0.5.2;
2 
3 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
4 
5 interface IntVoteInterface {
6     //When implementing this interface please do not only override function and modifier,
7     //but also to keep the modifiers on the overridden functions.
8     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
9     modifier votable(bytes32 _proposalId) {revert(); _;}
10 
11     event NewProposal(
12         bytes32 indexed _proposalId,
13         address indexed _organization,
14         uint256 _numOfChoices,
15         address _proposer,
16         bytes32 _paramsHash
17     );
18 
19     event ExecuteProposal(bytes32 indexed _proposalId,
20         address indexed _organization,
21         uint256 _decision,
22         uint256 _totalReputation
23     );
24 
25     event VoteProposal(
26         bytes32 indexed _proposalId,
27         address indexed _organization,
28         address indexed _voter,
29         uint256 _vote,
30         uint256 _reputation
31     );
32 
33     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
34     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
35 
36     /**
37      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
38      * generated by calculating keccak256 of a incremented counter.
39      * @param _numOfChoices number of voting choices
40      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
41      * @param _proposer address
42      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
43      * @return proposal's id.
44      */
45     function propose(
46         uint256 _numOfChoices,
47         bytes32 _proposalParameters,
48         address _proposer,
49         address _organization
50         ) external returns(bytes32);
51 
52     function vote(
53         bytes32 _proposalId,
54         uint256 _vote,
55         uint256 _rep,
56         address _voter
57     )
58     external
59     returns(bool);
60 
61     function cancelVote(bytes32 _proposalId) external;
62 
63     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
64 
65     function isVotable(bytes32 _proposalId) external view returns(bool);
66 
67     /**
68      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
69      * @param _proposalId the ID of the proposal
70      * @param _choice the index in the
71      * @return voted reputation for the given choice
72      */
73     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
74 
75     /**
76      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
77      * @return bool true or false
78      */
79     function isAbstainAllow() external pure returns(bool);
80 
81     /**
82      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
83      * @return min - minimum number of choices
84                max - maximum number of choices
85      */
86     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
87 }
88 
89 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
90 
91 /**
92  * @title ERC20 interface
93  * @dev see https://github.com/ethereum/EIPs/issues/20
94  */
95 interface IERC20 {
96     function transfer(address to, uint256 value) external returns (bool);
97 
98     function approve(address spender, uint256 value) external returns (bool);
99 
100     function transferFrom(address from, address to, uint256 value) external returns (bool);
101 
102     function totalSupply() external view returns (uint256);
103 
104     function balanceOf(address who) external view returns (uint256);
105 
106     function allowance(address owner, address spender) external view returns (uint256);
107 
108     event Transfer(address indexed from, address indexed to, uint256 value);
109 
110     event Approval(address indexed owner, address indexed spender, uint256 value);
111 }
112 
113 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
114 
115 interface VotingMachineCallbacksInterface {
116     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
117     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
118 
119     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
120     external
121     returns(bool);
122 
123     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
124     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
125     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
126 }
127 
128 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
129 
130 /**
131  * @title Ownable
132  * @dev The Ownable contract has an owner address, and provides basic authorization control
133  * functions, this simplifies the implementation of "user permissions".
134  */
135 contract Ownable {
136     address private _owner;
137 
138     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
139 
140     /**
141      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
142      * account.
143      */
144     constructor () internal {
145         _owner = msg.sender;
146         emit OwnershipTransferred(address(0), _owner);
147     }
148 
149     /**
150      * @return the address of the owner.
151      */
152     function owner() public view returns (address) {
153         return _owner;
154     }
155 
156     /**
157      * @dev Throws if called by any account other than the owner.
158      */
159     modifier onlyOwner() {
160         require(isOwner());
161         _;
162     }
163 
164     /**
165      * @return true if `msg.sender` is the owner of the contract.
166      */
167     function isOwner() public view returns (bool) {
168         return msg.sender == _owner;
169     }
170 
171     /**
172      * @dev Allows the current owner to relinquish control of the contract.
173      * @notice Renouncing to ownership will leave the contract without an owner.
174      * It will not be possible to call the functions with the `onlyOwner`
175      * modifier anymore.
176      */
177     function renounceOwnership() public onlyOwner {
178         emit OwnershipTransferred(_owner, address(0));
179         _owner = address(0);
180     }
181 
182     /**
183      * @dev Allows the current owner to transfer control of the contract to a newOwner.
184      * @param newOwner The address to transfer ownership to.
185      */
186     function transferOwnership(address newOwner) public onlyOwner {
187         _transferOwnership(newOwner);
188     }
189 
190     /**
191      * @dev Transfers control of the contract to a newOwner.
192      * @param newOwner The address to transfer ownership to.
193      */
194     function _transferOwnership(address newOwner) internal {
195         require(newOwner != address(0));
196         emit OwnershipTransferred(_owner, newOwner);
197         _owner = newOwner;
198     }
199 }
200 
201 // File: @daostack/infra/contracts/Reputation.sol
202 
203 /**
204  * @title Reputation system
205  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
206  * A reputation is use to assign influence measure to a DAO'S peers.
207  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
208  * The Reputation contract maintain a map of address to reputation value.
209  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
210  */
211 
212 contract Reputation is Ownable {
213 
214     uint8 public decimals = 18;             //Number of decimals of the smallest unit
215     // Event indicating minting of reputation to an address.
216     event Mint(address indexed _to, uint256 _amount);
217     // Event indicating burning of reputation for an address.
218     event Burn(address indexed _from, uint256 _amount);
219 
220       /// @dev `Checkpoint` is the structure that attaches a block number to a
221       ///  given value, the block number attached is the one that last changed the
222       ///  value
223     struct Checkpoint {
224 
225     // `fromBlock` is the block number that the value was generated from
226         uint128 fromBlock;
227 
228           // `value` is the amount of reputation at a specific block number
229         uint128 value;
230     }
231 
232       // `balances` is the map that tracks the balance of each address, in this
233       //  contract when the balance changes the block number that the change
234       //  occurred is also included in the map
235     mapping (address => Checkpoint[]) balances;
236 
237       // Tracks the history of the `totalSupply` of the reputation
238     Checkpoint[] totalSupplyHistory;
239 
240     /// @notice Constructor to create a Reputation
241     constructor(
242     ) public
243     {
244     }
245 
246     /// @dev This function makes it easy to get the total number of reputation
247     /// @return The total number of reputation
248     function totalSupply() public view returns (uint256) {
249         return totalSupplyAt(block.number);
250     }
251 
252   ////////////////
253   // Query balance and totalSupply in History
254   ////////////////
255     /**
256     * @dev return the reputation amount of a given owner
257     * @param _owner an address of the owner which we want to get his reputation
258     */
259     function balanceOf(address _owner) public view returns (uint256 balance) {
260         return balanceOfAt(_owner, block.number);
261     }
262 
263       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
264       /// @param _owner The address from which the balance will be retrieved
265       /// @param _blockNumber The block number when the balance is queried
266       /// @return The balance at `_blockNumber`
267     function balanceOfAt(address _owner, uint256 _blockNumber)
268     public view returns (uint256)
269     {
270         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
271             return 0;
272           // This will return the expected balance during normal situations
273         } else {
274             return getValueAt(balances[_owner], _blockNumber);
275         }
276     }
277 
278       /// @notice Total amount of reputation at a specific `_blockNumber`.
279       /// @param _blockNumber The block number when the totalSupply is queried
280       /// @return The total amount of reputation at `_blockNumber`
281     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
282         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
283             return 0;
284           // This will return the expected totalSupply during normal situations
285         } else {
286             return getValueAt(totalSupplyHistory, _blockNumber);
287         }
288     }
289 
290       /// @notice Generates `_amount` reputation that are assigned to `_owner`
291       /// @param _user The address that will be assigned the new reputation
292       /// @param _amount The quantity of reputation generated
293       /// @return True if the reputation are generated correctly
294     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
295         uint256 curTotalSupply = totalSupply();
296         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
297         uint256 previousBalanceTo = balanceOf(_user);
298         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
299         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
300         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
301         emit Mint(_user, _amount);
302         return true;
303     }
304 
305       /// @notice Burns `_amount` reputation from `_owner`
306       /// @param _user The address that will lose the reputation
307       /// @param _amount The quantity of reputation to burn
308       /// @return True if the reputation are burned correctly
309     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
310         uint256 curTotalSupply = totalSupply();
311         uint256 amountBurned = _amount;
312         uint256 previousBalanceFrom = balanceOf(_user);
313         if (previousBalanceFrom < amountBurned) {
314             amountBurned = previousBalanceFrom;
315         }
316         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
317         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
318         emit Burn(_user, amountBurned);
319         return true;
320     }
321 
322   ////////////////
323   // Internal helper functions to query and set a value in a snapshot array
324   ////////////////
325 
326       /// @dev `getValueAt` retrieves the number of reputation at a given block number
327       /// @param checkpoints The history of values being queried
328       /// @param _block The block number to retrieve the value at
329       /// @return The number of reputation being queried
330     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
331         if (checkpoints.length == 0) {
332             return 0;
333         }
334 
335           // Shortcut for the actual value
336         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
337             return checkpoints[checkpoints.length-1].value;
338         }
339         if (_block < checkpoints[0].fromBlock) {
340             return 0;
341         }
342 
343           // Binary search of the value in the array
344         uint256 min = 0;
345         uint256 max = checkpoints.length-1;
346         while (max > min) {
347             uint256 mid = (max + min + 1) / 2;
348             if (checkpoints[mid].fromBlock<=_block) {
349                 min = mid;
350             } else {
351                 max = mid-1;
352             }
353         }
354         return checkpoints[min].value;
355     }
356 
357       /// @dev `updateValueAtNow` used to update the `balances` map and the
358       ///  `totalSupplyHistory`
359       /// @param checkpoints The history of data being updated
360       /// @param _value The new number of reputation
361     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
362         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
363         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
364             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
365             newCheckPoint.fromBlock = uint128(block.number);
366             newCheckPoint.value = uint128(_value);
367         } else {
368             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
369             oldCheckPoint.value = uint128(_value);
370         }
371     }
372 }
373 
374 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
375 
376 /**
377  * @title SafeMath
378  * @dev Unsigned math operations with safety checks that revert on error
379  */
380 library SafeMath {
381     /**
382     * @dev Multiplies two unsigned integers, reverts on overflow.
383     */
384     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
385         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
386         // benefit is lost if 'b' is also tested.
387         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
388         if (a == 0) {
389             return 0;
390         }
391 
392         uint256 c = a * b;
393         require(c / a == b);
394 
395         return c;
396     }
397 
398     /**
399     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
400     */
401     function div(uint256 a, uint256 b) internal pure returns (uint256) {
402         // Solidity only automatically asserts when dividing by 0
403         require(b > 0);
404         uint256 c = a / b;
405         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
406 
407         return c;
408     }
409 
410     /**
411     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
412     */
413     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
414         require(b <= a);
415         uint256 c = a - b;
416 
417         return c;
418     }
419 
420     /**
421     * @dev Adds two unsigned integers, reverts on overflow.
422     */
423     function add(uint256 a, uint256 b) internal pure returns (uint256) {
424         uint256 c = a + b;
425         require(c >= a);
426 
427         return c;
428     }
429 
430     /**
431     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
432     * reverts when dividing by zero.
433     */
434     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
435         require(b != 0);
436         return a % b;
437     }
438 }
439 
440 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
441 
442 /**
443  * @title Standard ERC20 token
444  *
445  * @dev Implementation of the basic standard token.
446  * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
447  * Originally based on code by FirstBlood:
448  * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
449  *
450  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for
451  * all accounts just by listening to said events. Note that this isn't required by the specification, and other
452  * compliant implementations may not do it.
453  */
454 contract ERC20 is IERC20 {
455     using SafeMath for uint256;
456 
457     mapping (address => uint256) private _balances;
458 
459     mapping (address => mapping (address => uint256)) private _allowed;
460 
461     uint256 private _totalSupply;
462 
463     /**
464     * @dev Total number of tokens in existence
465     */
466     function totalSupply() public view returns (uint256) {
467         return _totalSupply;
468     }
469 
470     /**
471     * @dev Gets the balance of the specified address.
472     * @param owner The address to query the balance of.
473     * @return An uint256 representing the amount owned by the passed address.
474     */
475     function balanceOf(address owner) public view returns (uint256) {
476         return _balances[owner];
477     }
478 
479     /**
480      * @dev Function to check the amount of tokens that an owner allowed to a spender.
481      * @param owner address The address which owns the funds.
482      * @param spender address The address which will spend the funds.
483      * @return A uint256 specifying the amount of tokens still available for the spender.
484      */
485     function allowance(address owner, address spender) public view returns (uint256) {
486         return _allowed[owner][spender];
487     }
488 
489     /**
490     * @dev Transfer token for a specified address
491     * @param to The address to transfer to.
492     * @param value The amount to be transferred.
493     */
494     function transfer(address to, uint256 value) public returns (bool) {
495         _transfer(msg.sender, to, value);
496         return true;
497     }
498 
499     /**
500      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
501      * Beware that changing an allowance with this method brings the risk that someone may use both the old
502      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
503      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
504      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
505      * @param spender The address which will spend the funds.
506      * @param value The amount of tokens to be spent.
507      */
508     function approve(address spender, uint256 value) public returns (bool) {
509         require(spender != address(0));
510 
511         _allowed[msg.sender][spender] = value;
512         emit Approval(msg.sender, spender, value);
513         return true;
514     }
515 
516     /**
517      * @dev Transfer tokens from one address to another.
518      * Note that while this function emits an Approval event, this is not required as per the specification,
519      * and other compliant implementations may not emit the event.
520      * @param from address The address which you want to send tokens from
521      * @param to address The address which you want to transfer to
522      * @param value uint256 the amount of tokens to be transferred
523      */
524     function transferFrom(address from, address to, uint256 value) public returns (bool) {
525         _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
526         _transfer(from, to, value);
527         emit Approval(from, msg.sender, _allowed[from][msg.sender]);
528         return true;
529     }
530 
531     /**
532      * @dev Increase the amount of tokens that an owner allowed to a spender.
533      * approve should be called when allowed_[_spender] == 0. To increment
534      * allowed value is better to use this function to avoid 2 calls (and wait until
535      * the first transaction is mined)
536      * From MonolithDAO Token.sol
537      * Emits an Approval event.
538      * @param spender The address which will spend the funds.
539      * @param addedValue The amount of tokens to increase the allowance by.
540      */
541     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
542         require(spender != address(0));
543 
544         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
545         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
546         return true;
547     }
548 
549     /**
550      * @dev Decrease the amount of tokens that an owner allowed to a spender.
551      * approve should be called when allowed_[_spender] == 0. To decrement
552      * allowed value is better to use this function to avoid 2 calls (and wait until
553      * the first transaction is mined)
554      * From MonolithDAO Token.sol
555      * Emits an Approval event.
556      * @param spender The address which will spend the funds.
557      * @param subtractedValue The amount of tokens to decrease the allowance by.
558      */
559     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
560         require(spender != address(0));
561 
562         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
563         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
564         return true;
565     }
566 
567     /**
568     * @dev Transfer token for a specified addresses
569     * @param from The address to transfer from.
570     * @param to The address to transfer to.
571     * @param value The amount to be transferred.
572     */
573     function _transfer(address from, address to, uint256 value) internal {
574         require(to != address(0));
575 
576         _balances[from] = _balances[from].sub(value);
577         _balances[to] = _balances[to].add(value);
578         emit Transfer(from, to, value);
579     }
580 
581     /**
582      * @dev Internal function that mints an amount of the token and assigns it to
583      * an account. This encapsulates the modification of balances such that the
584      * proper events are emitted.
585      * @param account The account that will receive the created tokens.
586      * @param value The amount that will be created.
587      */
588     function _mint(address account, uint256 value) internal {
589         require(account != address(0));
590 
591         _totalSupply = _totalSupply.add(value);
592         _balances[account] = _balances[account].add(value);
593         emit Transfer(address(0), account, value);
594     }
595 
596     /**
597      * @dev Internal function that burns an amount of the token of a given
598      * account.
599      * @param account The account whose tokens will be burnt.
600      * @param value The amount that will be burnt.
601      */
602     function _burn(address account, uint256 value) internal {
603         require(account != address(0));
604 
605         _totalSupply = _totalSupply.sub(value);
606         _balances[account] = _balances[account].sub(value);
607         emit Transfer(account, address(0), value);
608     }
609 
610     /**
611      * @dev Internal function that burns an amount of the token of a given
612      * account, deducting from the sender's allowance for said account. Uses the
613      * internal burn function.
614      * Emits an Approval event (reflecting the reduced allowance).
615      * @param account The account whose tokens will be burnt.
616      * @param value The amount that will be burnt.
617      */
618     function _burnFrom(address account, uint256 value) internal {
619         _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
620         _burn(account, value);
621         emit Approval(account, msg.sender, _allowed[account][msg.sender]);
622     }
623 }
624 
625 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
626 
627 /**
628  * @title Burnable Token
629  * @dev Token that can be irreversibly burned (destroyed).
630  */
631 contract ERC20Burnable is ERC20 {
632     /**
633      * @dev Burns a specific amount of tokens.
634      * @param value The amount of token to be burned.
635      */
636     function burn(uint256 value) public {
637         _burn(msg.sender, value);
638     }
639 
640     /**
641      * @dev Burns a specific amount of tokens from the target address and decrements allowance
642      * @param from address The address which you want to send tokens from
643      * @param value uint256 The amount of token to be burned
644      */
645     function burnFrom(address from, uint256 value) public {
646         _burnFrom(from, value);
647     }
648 }
649 
650 // File: @daostack/arc/contracts/controller/DAOToken.sol
651 
652 /**
653  * @title DAOToken, base on zeppelin contract.
654  * @dev ERC20 compatible token. It is a mintable, burnable token.
655  */
656 
657 contract DAOToken is ERC20, ERC20Burnable, Ownable {
658 
659     string public name;
660     string public symbol;
661     // solhint-disable-next-line const-name-snakecase
662     uint8 public constant decimals = 18;
663     uint256 public cap;
664 
665     /**
666     * @dev Constructor
667     * @param _name - token name
668     * @param _symbol - token symbol
669     * @param _cap - token cap - 0 value means no cap
670     */
671     constructor(string memory _name, string memory _symbol, uint256 _cap)
672     public {
673         name = _name;
674         symbol = _symbol;
675         cap = _cap;
676     }
677 
678     /**
679      * @dev Function to mint tokens
680      * @param _to The address that will receive the minted tokens.
681      * @param _amount The amount of tokens to mint.
682      */
683     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
684         if (cap > 0)
685             require(totalSupply().add(_amount) <= cap);
686         _mint(_to, _amount);
687         return true;
688     }
689 }
690 
691 // File: openzeppelin-solidity/contracts/utils/Address.sol
692 
693 /**
694  * Utility library of inline functions on addresses
695  */
696 library Address {
697     /**
698      * Returns whether the target address is a contract
699      * @dev This function will return false if invoked during the constructor of a contract,
700      * as the code is not actually created until after the constructor finishes.
701      * @param account address of the account to check
702      * @return whether the target address is a contract
703      */
704     function isContract(address account) internal view returns (bool) {
705         uint256 size;
706         // XXX Currently there is no better way to check if there is a contract in an address
707         // than to check the size of the code at that address.
708         // See https://ethereum.stackexchange.com/a/14016/36603
709         // for more details about how this works.
710         // TODO Check this again before the Serenity release, because all addresses will be
711         // contracts then.
712         // solhint-disable-next-line no-inline-assembly
713         assembly { size := extcodesize(account) }
714         return size > 0;
715     }
716 }
717 
718 // File: @daostack/arc/contracts/libs/SafeERC20.sol
719 
720 /*
721 
722 SafeERC20 by daostack.
723 The code is based on a fix by SECBIT Team.
724 
725 USE WITH CAUTION & NO WARRANTY
726 
727 REFERENCE & RELATED READING
728 - https://github.com/ethereum/solidity/issues/4116
729 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
730 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
731 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
732 
733 */
734 pragma solidity ^0.5.2;
735 
736 
737 
738 library SafeERC20 {
739     using Address for address;
740 
741     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
742     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
743     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
744 
745     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
746 
747         // Must be a contract addr first!
748         require(_erc20Addr.isContract());
749 
750         (bool success, bytes memory returnValue) =
751         // solhint-disable-next-line avoid-low-level-calls
752         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
753         // call return false when something wrong
754         require(success);
755         //check return value
756         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
757     }
758 
759     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
760 
761         // Must be a contract addr first!
762         require(_erc20Addr.isContract());
763 
764         (bool success, bytes memory returnValue) =
765         // solhint-disable-next-line avoid-low-level-calls
766         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
767         // call return false when something wrong
768         require(success);
769         //check return value
770         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
771     }
772 
773     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
774 
775         // Must be a contract addr first!
776         require(_erc20Addr.isContract());
777 
778         // safeApprove should only be called when setting an initial allowance,
779         // or when resetting it to zero.
780         require((_value == 0) || (IERC20(_erc20Addr).allowance(msg.sender, _spender) == 0));
781 
782         (bool success, bytes memory returnValue) =
783         // solhint-disable-next-line avoid-low-level-calls
784         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
785         // call return false when something wrong
786         require(success);
787         //check return value
788         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
789     }
790 }
791 
792 // File: @daostack/arc/contracts/controller/Avatar.sol
793 
794 /**
795  * @title An Avatar holds tokens, reputation and ether for a controller
796  */
797 contract Avatar is Ownable {
798     using SafeERC20 for address;
799 
800     string public orgName;
801     DAOToken public nativeToken;
802     Reputation public nativeReputation;
803 
804     event GenericCall(address indexed _contract, bytes _params, bool _success);
805     event SendEther(uint256 _amountInWei, address indexed _to);
806     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
807     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
808     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
809     event ReceiveEther(address indexed _sender, uint256 _value);
810 
811     /**
812     * @dev the constructor takes organization name, native token and reputation system
813     and creates an avatar for a controller
814     */
815     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
816         orgName = _orgName;
817         nativeToken = _nativeToken;
818         nativeReputation = _nativeReputation;
819     }
820 
821     /**
822     * @dev enables an avatar to receive ethers
823     */
824     function() external payable {
825         emit ReceiveEther(msg.sender, msg.value);
826     }
827 
828     /**
829     * @dev perform a generic call to an arbitrary contract
830     * @param _contract  the contract's address to call
831     * @param _data ABI-encoded contract call to call `_contract` address.
832     * @return bool    success or fail
833     *         bytes - the return bytes of the called contract's function.
834     */
835     function genericCall(address _contract, bytes memory _data)
836     public
837     onlyOwner
838     returns(bool success, bytes memory returnValue) {
839       // solhint-disable-next-line avoid-low-level-calls
840         (success, returnValue) = _contract.call(_data);
841         emit GenericCall(_contract, _data, success);
842     }
843 
844     /**
845     * @dev send ethers from the avatar's wallet
846     * @param _amountInWei amount to send in Wei units
847     * @param _to send the ethers to this address
848     * @return bool which represents success
849     */
850     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
851         _to.transfer(_amountInWei);
852         emit SendEther(_amountInWei, _to);
853         return true;
854     }
855 
856     /**
857     * @dev external token transfer
858     * @param _externalToken the token contract
859     * @param _to the destination address
860     * @param _value the amount of tokens to transfer
861     * @return bool which represents success
862     */
863     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
864     public onlyOwner returns(bool)
865     {
866         address(_externalToken).safeTransfer(_to, _value);
867         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
868         return true;
869     }
870 
871     /**
872     * @dev external token transfer from a specific account
873     * @param _externalToken the token contract
874     * @param _from the account to spend token from
875     * @param _to the destination address
876     * @param _value the amount of tokens to transfer
877     * @return bool which represents success
878     */
879     function externalTokenTransferFrom(
880         IERC20 _externalToken,
881         address _from,
882         address _to,
883         uint256 _value
884     )
885     public onlyOwner returns(bool)
886     {
887         address(_externalToken).safeTransferFrom(_from, _to, _value);
888         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
889         return true;
890     }
891 
892     /**
893     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
894     *      on behalf of msg.sender.
895     * @param _externalToken the address of the Token Contract
896     * @param _spender address
897     * @param _value the amount of ether (in Wei) which the approval is referring to.
898     * @return bool which represents a success
899     */
900     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
901     public onlyOwner returns(bool)
902     {
903         address(_externalToken).safeApprove(_spender, _value);
904         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
905         return true;
906     }
907 
908 }
909 
910 // File: @daostack/arc/contracts/universalSchemes/UniversalSchemeInterface.sol
911 
912 contract UniversalSchemeInterface {
913 
914     function updateParameters(bytes32 _hashedParameters) public;
915 
916     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
917 }
918 
919 // File: @daostack/arc/contracts/globalConstraints/GlobalConstraintInterface.sol
920 
921 contract GlobalConstraintInterface {
922 
923     enum CallPhase { Pre, Post, PreAndPost }
924 
925     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
926     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
927     /**
928      * @dev when return if this globalConstraints is pre, post or both.
929      * @return CallPhase enum indication  Pre, Post or PreAndPost.
930      */
931     function when() public returns(CallPhase);
932 }
933 
934 // File: @daostack/arc/contracts/controller/ControllerInterface.sol
935 
936 /**
937  * @title Controller contract
938  * @dev A controller controls the organizations tokens ,reputation and avatar.
939  * It is subject to a set of schemes and constraints that determine its behavior.
940  * Each scheme has it own parameters and operation permissions.
941  */
942 interface ControllerInterface {
943 
944     /**
945      * @dev Mint `_amount` of reputation that are assigned to `_to` .
946      * @param  _amount amount of reputation to mint
947      * @param _to beneficiary address
948      * @return bool which represents a success
949     */
950     function mintReputation(uint256 _amount, address _to, address _avatar)
951     external
952     returns(bool);
953 
954     /**
955      * @dev Burns `_amount` of reputation from `_from`
956      * @param _amount amount of reputation to burn
957      * @param _from The address that will lose the reputation
958      * @return bool which represents a success
959      */
960     function burnReputation(uint256 _amount, address _from, address _avatar)
961     external
962     returns(bool);
963 
964     /**
965      * @dev mint tokens .
966      * @param  _amount amount of token to mint
967      * @param _beneficiary beneficiary address
968      * @param _avatar address
969      * @return bool which represents a success
970      */
971     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
972     external
973     returns(bool);
974 
975   /**
976    * @dev register or update a scheme
977    * @param _scheme the address of the scheme
978    * @param _paramsHash a hashed configuration of the usage of the scheme
979    * @param _permissions the permissions the new scheme will have
980    * @param _avatar address
981    * @return bool which represents a success
982    */
983     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
984     external
985     returns(bool);
986 
987     /**
988      * @dev unregister a scheme
989      * @param _avatar address
990      * @param _scheme the address of the scheme
991      * @return bool which represents a success
992      */
993     function unregisterScheme(address _scheme, address _avatar)
994     external
995     returns(bool);
996 
997     /**
998      * @dev unregister the caller's scheme
999      * @param _avatar address
1000      * @return bool which represents a success
1001      */
1002     function unregisterSelf(address _avatar) external returns(bool);
1003 
1004     /**
1005      * @dev add or update Global Constraint
1006      * @param _globalConstraint the address of the global constraint to be added.
1007      * @param _params the constraint parameters hash.
1008      * @param _avatar the avatar of the organization
1009      * @return bool which represents a success
1010      */
1011     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1012     external returns(bool);
1013 
1014     /**
1015      * @dev remove Global Constraint
1016      * @param _globalConstraint the address of the global constraint to be remove.
1017      * @param _avatar the organization avatar.
1018      * @return bool which represents a success
1019      */
1020     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1021     external  returns(bool);
1022 
1023   /**
1024     * @dev upgrade the Controller
1025     *      The function will trigger an event 'UpgradeController'.
1026     * @param  _newController the address of the new controller.
1027     * @param _avatar address
1028     * @return bool which represents a success
1029     */
1030     function upgradeController(address _newController, Avatar _avatar)
1031     external returns(bool);
1032 
1033     /**
1034     * @dev perform a generic call to an arbitrary contract
1035     * @param _contract  the contract's address to call
1036     * @param _data ABI-encoded contract call to call `_contract` address.
1037     * @param _avatar the controller's avatar address
1038     * @return bool -success
1039     *         bytes  - the return value of the called _contract's function.
1040     */
1041     function genericCall(address _contract, bytes calldata _data, Avatar _avatar)
1042     external
1043     returns(bool, bytes memory);
1044 
1045   /**
1046    * @dev send some ether
1047    * @param _amountInWei the amount of ether (in Wei) to send
1048    * @param _to address of the beneficiary
1049    * @param _avatar address
1050    * @return bool which represents a success
1051    */
1052     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1053     external returns(bool);
1054 
1055     /**
1056     * @dev send some amount of arbitrary ERC20 Tokens
1057     * @param _externalToken the address of the Token Contract
1058     * @param _to address of the beneficiary
1059     * @param _value the amount of ether (in Wei) to send
1060     * @param _avatar address
1061     * @return bool which represents a success
1062     */
1063     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1064     external
1065     returns(bool);
1066 
1067     /**
1068     * @dev transfer token "from" address "to" address
1069     *      One must to approve the amount of tokens which can be spend from the
1070     *      "from" account.This can be done using externalTokenApprove.
1071     * @param _externalToken the address of the Token Contract
1072     * @param _from address of the account to send from
1073     * @param _to address of the beneficiary
1074     * @param _value the amount of ether (in Wei) to send
1075     * @param _avatar address
1076     * @return bool which represents a success
1077     */
1078     function externalTokenTransferFrom(
1079     IERC20 _externalToken,
1080     address _from,
1081     address _to,
1082     uint256 _value,
1083     Avatar _avatar)
1084     external
1085     returns(bool);
1086 
1087     /**
1088     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1089     *      on behalf of msg.sender.
1090     * @param _externalToken the address of the Token Contract
1091     * @param _spender address
1092     * @param _value the amount of ether (in Wei) which the approval is referring to.
1093     * @return bool which represents a success
1094     */
1095     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1096     external
1097     returns(bool);
1098 
1099     /**
1100      * @dev getNativeReputation
1101      * @param _avatar the organization avatar.
1102      * @return organization native reputation
1103      */
1104     function getNativeReputation(address _avatar)
1105     external
1106     view
1107     returns(address);
1108 
1109     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1110 
1111     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1112 
1113     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1114 
1115     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1116 
1117     /**
1118      * @dev globalConstraintsCount return the global constraint pre and post count
1119      * @return uint256 globalConstraintsPre count.
1120      * @return uint256 globalConstraintsPost count.
1121      */
1122     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1123 
1124     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1125 }
1126 
1127 // File: @daostack/arc/contracts/universalSchemes/UniversalScheme.sol
1128 
1129 contract UniversalScheme is Ownable, UniversalSchemeInterface {
1130     bytes32 public hashedParameters; // For other parameters.
1131 
1132     function updateParameters(
1133         bytes32 _hashedParameters
1134     )
1135         public
1136         onlyOwner
1137     {
1138         hashedParameters = _hashedParameters;
1139     }
1140 
1141     /**
1142     *  @dev get the parameters for the current scheme from the controller
1143     */
1144     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1145         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1146         "scheme is not registered");
1147         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1148     }
1149 }
1150 
1151 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1152 
1153 /**
1154  * @title Elliptic curve signature operations
1155  * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
1156  * TODO Remove this library once solidity supports passing a signature to ecrecover.
1157  * See https://github.com/ethereum/solidity/issues/864
1158  */
1159 
1160 library ECDSA {
1161     /**
1162      * @dev Recover signer address from a message by using their signature
1163      * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
1164      * @param signature bytes signature, the signature is generated using web3.eth.sign()
1165      */
1166     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1167         bytes32 r;
1168         bytes32 s;
1169         uint8 v;
1170 
1171         // Check the signature length
1172         if (signature.length != 65) {
1173             return (address(0));
1174         }
1175 
1176         // Divide the signature in r, s and v variables
1177         // ecrecover takes the signature parameters, and the only way to get them
1178         // currently is to use assembly.
1179         // solhint-disable-next-line no-inline-assembly
1180         assembly {
1181             r := mload(add(signature, 0x20))
1182             s := mload(add(signature, 0x40))
1183             v := byte(0, mload(add(signature, 0x60)))
1184         }
1185 
1186         // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
1187         if (v < 27) {
1188             v += 27;
1189         }
1190 
1191         // If the version is correct return the signer address
1192         if (v != 27 && v != 28) {
1193             return (address(0));
1194         } else {
1195             return ecrecover(hash, v, r, s);
1196         }
1197     }
1198 
1199     /**
1200      * toEthSignedMessageHash
1201      * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
1202      * and hash the result
1203      */
1204     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1205         // 32 is the length in bytes of hash,
1206         // enforced by the type signature above
1207         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1208     }
1209 }
1210 
1211 // File: @daostack/infra/contracts/libs/RealMath.sol
1212 
1213 /**
1214  * RealMath: fixed-point math library, based on fractional and integer parts.
1215  * Using uint256 as real216x40, which isn't in Solidity yet.
1216  * 40 fractional bits gets us down to 1E-12 precision, while still letting us
1217  * go up to galaxy scale counting in meters.
1218  * Internally uses the wider uint256 for some math.
1219  *
1220  * Note that for addition, subtraction, and mod (%), you should just use the
1221  * built-in Solidity operators. Functions for these operations are not provided.
1222  *
1223  */
1224 
1225 
1226 library RealMath {
1227 
1228     /**
1229      * How many total bits are there?
1230      */
1231     uint256 constant private REAL_BITS = 256;
1232 
1233     /**
1234      * How many fractional bits are there?
1235      */
1236     uint256 constant private REAL_FBITS = 40;
1237 
1238     /**
1239      * What's the first non-fractional bit
1240      */
1241     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1242 
1243     /**
1244      * Raise a real number to any positive integer power
1245      */
1246     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1247 
1248         uint256 tempRealBase = realBase;
1249         uint256 tempExponent = exponent;
1250 
1251         // Start with the 0th power
1252         uint256 realResult = REAL_ONE;
1253         while (tempExponent != 0) {
1254             // While there are still bits set
1255             if ((tempExponent & 0x1) == 0x1) {
1256                 // If the low bit is set, multiply in the (many-times-squared) base
1257                 realResult = mul(realResult, tempRealBase);
1258             }
1259             // Shift off the low bit
1260             tempExponent = tempExponent >> 1;
1261             // Do the squaring
1262             tempRealBase = mul(tempRealBase, tempRealBase);
1263         }
1264 
1265         // Return the final result.
1266         return uint216(realResult / REAL_ONE);
1267     }
1268 
1269     /**
1270      * Create a real from a rational fraction.
1271      */
1272     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1273         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1274     }
1275 
1276     /**
1277      * Multiply one real by another. Truncates overflows.
1278      */
1279     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1280         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1281         // So we just have to clip off the extra REAL_FBITS fractional bits.
1282         return uint256((uint256(realA) * uint256(realB)) >> REAL_FBITS);
1283     }
1284 
1285     /**
1286      * Divide one real by another real. Truncates overflows.
1287      */
1288     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1289         // We use the reverse of the multiplication trick: convert numerator from
1290         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1291         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1292     }
1293 
1294 }
1295 
1296 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
1297 
1298 interface ProposalExecuteInterface {
1299     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
1300 }
1301 
1302 // File: openzeppelin-solidity/contracts/math/Math.sol
1303 
1304 /**
1305  * @title Math
1306  * @dev Assorted math operations
1307  */
1308 library Math {
1309     /**
1310     * @dev Returns the largest of two numbers.
1311     */
1312     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1313         return a >= b ? a : b;
1314     }
1315 
1316     /**
1317     * @dev Returns the smallest of two numbers.
1318     */
1319     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1320         return a < b ? a : b;
1321     }
1322 
1323     /**
1324     * @dev Calculates the average of two numbers. Since these are integers,
1325     * averages of an even and odd number cannot be represented, and will be
1326     * rounded down.
1327     */
1328     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1329         // (a + b) / 2 can overflow, so we distribute
1330         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1331     }
1332 }
1333 
1334 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
1335 
1336 /**
1337  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1338  */
1339 contract GenesisProtocolLogic is IntVoteInterface {
1340     using SafeMath for uint;
1341     using Math for uint;
1342     using RealMath for uint216;
1343     using RealMath for uint256;
1344     using Address for address;
1345 
1346     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1347     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1348 
1349     //Organization's parameters
1350     struct Parameters {
1351         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1352         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1353         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1354         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1355                                           //to be in an preparation state (stable) before boosted.
1356         uint256 thresholdConst; //constant  for threshold calculation .
1357                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1358         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1359                                    //in the threshold calculation to prevent overflow
1360         uint256 quietEndingPeriod; //quite ending period
1361         uint256 proposingRepReward;//proposer reputation reward.
1362         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1363                                           //voters lose votersReputationLossRatio% of their reputation.
1364         uint256 minimumDaoBounty;
1365         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1366                                //(daoBountyConst * averageBoostDownstakes)/100 .
1367         uint256 activationTime;//the point in time after which proposals can be created.
1368         //if this address is set so only this address is allowed to vote of behalf of someone else.
1369         address voteOnBehalf;
1370     }
1371 
1372     struct Voter {
1373         uint256 vote; // YES(1) ,NO(2)
1374         uint256 reputation; // amount of voter's reputation
1375         bool preBoosted;
1376     }
1377 
1378     struct Staker {
1379         uint256 vote; // YES(1) ,NO(2)
1380         uint256 amount; // amount of staker's stake
1381         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1382     }
1383 
1384     struct Proposal {
1385         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1386         address callbacks;    // should fulfill voting callbacks interface.
1387         ProposalState state;
1388         uint256 winningVote; //the winning vote.
1389         address proposer;
1390         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1391         uint256 currentBoostedVotePeriodLimit;
1392         bytes32 paramsHash;
1393         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1394         uint256 daoBounty;
1395         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1396         uint256 confidenceThreshold;
1397         //The percentage from upper stakes which the caller for the expiration was given.
1398         uint256 expirationCallBountyPercentage;
1399         uint[3] times; //times[0] - submittedTime
1400                        //times[1] - boostedPhaseTime
1401                        //times[2] -preBoostedPhaseTime;
1402         //      vote      reputation
1403         mapping(uint256   =>  uint256    ) votes;
1404         //      vote      reputation
1405         mapping(uint256   =>  uint256    ) preBoostedVotes;
1406         //      address     voter
1407         mapping(address =>  Voter    ) voters;
1408         //      vote        stakes
1409         mapping(uint256   =>  uint256    ) stakes;
1410         //      address  staker
1411         mapping(address  => Staker   ) stakers;
1412     }
1413 
1414     event Stake(bytes32 indexed _proposalId,
1415         address indexed _organization,
1416         address indexed _staker,
1417         uint256 _vote,
1418         uint256 _amount
1419     );
1420 
1421     event Redeem(bytes32 indexed _proposalId,
1422         address indexed _organization,
1423         address indexed _beneficiary,
1424         uint256 _amount
1425     );
1426 
1427     event RedeemDaoBounty(bytes32 indexed _proposalId,
1428         address indexed _organization,
1429         address indexed _beneficiary,
1430         uint256 _amount
1431     );
1432 
1433     event RedeemReputation(bytes32 indexed _proposalId,
1434         address indexed _organization,
1435         address indexed _beneficiary,
1436         uint256 _amount
1437     );
1438 
1439     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1440     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1441     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1442 
1443     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1444     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1445     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1446            //organizationId => organization
1447     mapping(bytes32        => address     ) public organizations;
1448           //organizationId => averageBoostDownstakes
1449     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1450     uint256 constant public NUM_OF_CHOICES = 2;
1451     uint256 constant public NO = 2;
1452     uint256 constant public YES = 1;
1453     uint256 public proposalsCnt; // Total number of proposals
1454     IERC20 public stakingToken;
1455     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1456     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1457 
1458     /**
1459      * @dev Constructor
1460      */
1461     constructor(IERC20 _stakingToken) public {
1462       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1463       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1464       //If such contract address does not exist in the network (e.g ganache)
1465       //the contract will use the _stakingToken param as the
1466       //staking token address.
1467         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1468             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1469         } else {
1470             stakingToken = _stakingToken;
1471         }
1472     }
1473 
1474   /**
1475    * @dev Check that the proposal is votable
1476    * a proposal is votable if it is in one of the following states:
1477    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1478    */
1479     modifier votable(bytes32 _proposalId) {
1480         require(_isVotable(_proposalId));
1481         _;
1482     }
1483 
1484     /**
1485      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1486      * generated by calculating keccak256 of a incremented counter.
1487      * @param _paramsHash parameters hash
1488      * @param _proposer address
1489      * @param _organization address
1490      */
1491     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1492         external
1493         returns(bytes32)
1494     {
1495       // solhint-disable-next-line not-rely-on-time
1496         require(now > parameters[_paramsHash].activationTime, "not active yet");
1497         //Check parameters existence.
1498         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1499         // Generate a unique ID:
1500         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1501         proposalsCnt = proposalsCnt.add(1);
1502          // Open proposal:
1503         Proposal memory proposal;
1504         proposal.callbacks = msg.sender;
1505         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1506 
1507         proposal.state = ProposalState.Queued;
1508         // solhint-disable-next-line not-rely-on-time
1509         proposal.times[0] = now;//submitted time
1510         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1511         proposal.proposer = _proposer;
1512         proposal.winningVote = NO;
1513         proposal.paramsHash = _paramsHash;
1514         if (organizations[proposal.organizationId] == address(0)) {
1515             if (_organization == address(0)) {
1516                 organizations[proposal.organizationId] = msg.sender;
1517             } else {
1518                 organizations[proposal.organizationId] = _organization;
1519             }
1520         }
1521         //calc dao bounty
1522         uint256 daoBounty =
1523         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1524         if (daoBounty < parameters[_paramsHash].minimumDaoBounty) {
1525             proposal.daoBountyRemain = parameters[_paramsHash].minimumDaoBounty;
1526         } else {
1527             proposal.daoBountyRemain = daoBounty;
1528         }
1529         proposal.totalStakes = proposal.daoBountyRemain;
1530         proposals[proposalId] = proposal;
1531         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1532         Staker storage staker = proposals[proposalId].stakers[organizations[proposal.organizationId]];
1533         staker.vote = NO;
1534         staker.amount = proposal.daoBountyRemain;
1535 
1536         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1537         return proposalId;
1538     }
1539 
1540     /**
1541       * @dev executeBoosted try to execute a boosted proposal if it is expired
1542       * @param _proposalId the id of the proposal
1543       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1544      */
1545     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1546         Proposal storage proposal = proposals[_proposalId];
1547         require(proposal.state == ProposalState.Boosted);
1548         require(_execute(_proposalId), "proposal need to expire");
1549         uint256 expirationCallBountyPercentage =
1550         // solhint-disable-next-line not-rely-on-time
1551         (uint(1).add(now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1])).div(15)));
1552         if (expirationCallBountyPercentage > 100) {
1553             expirationCallBountyPercentage = 100;
1554         }
1555         proposal.expirationCallBountyPercentage = expirationCallBountyPercentage;
1556         expirationCallBounty = expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100);
1557         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1558         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1559     }
1560 
1561     /**
1562      * @dev hash the parameters, save them if necessary, and return the hash value
1563      * @param _params a parameters array
1564      *    _params[0] - _queuedVoteRequiredPercentage,
1565      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1566      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1567      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1568      *                  state (stable) before boosted.
1569      *    _params[4] -_thresholdConst
1570      *    _params[5] -_quietEndingPeriod
1571      *    _params[6] -_proposingRepReward
1572      *    _params[7] -_votersReputationLossRatio
1573      *    _params[8] -_minimumDaoBounty
1574      *    _params[9] -_daoBountyConst
1575      *    _params[10] -_activationTime
1576      * @param _voteOnBehalf - authorized to vote on behalf of others.
1577     */
1578     function setParameters(
1579         uint[11] calldata _params, //use array here due to stack too deep issue.
1580         address _voteOnBehalf
1581     )
1582     external
1583     returns(bytes32)
1584     {
1585         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1586         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1587         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1588         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1589         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1590         require(_params[9] > 0, "daoBountyConst should be > 0");
1591 
1592         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1593         //set a limit for power for a given alpha to prevent overflow
1594         uint256 limitExponent = 172;//for alpha less or equal 2
1595         uint256 j = 2;
1596         for (uint256 i = 2000; i < 16000; i = i*2) {
1597             if ((_params[4] > i) && (_params[4] <= i*2)) {
1598                 limitExponent = limitExponent/j;
1599                 break;
1600             }
1601             j++;
1602         }
1603 
1604         parameters[paramsHash] = Parameters({
1605             queuedVoteRequiredPercentage: _params[0],
1606             queuedVotePeriodLimit: _params[1],
1607             boostedVotePeriodLimit: _params[2],
1608             preBoostedVotePeriodLimit: _params[3],
1609             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1610             limitExponentValue:limitExponent,
1611             quietEndingPeriod: _params[5],
1612             proposingRepReward: _params[6],
1613             votersReputationLossRatio:_params[7],
1614             minimumDaoBounty:_params[8],
1615             daoBountyConst:_params[9],
1616             activationTime:_params[10],
1617             voteOnBehalf:_voteOnBehalf
1618         });
1619         return paramsHash;
1620     }
1621 
1622     /**
1623      * @dev redeem a reward for a successful stake, vote or proposing.
1624      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1625      * users to redeem on behalf of someone else.
1626      * @param _proposalId the ID of the proposal
1627      * @param _beneficiary - the beneficiary address
1628      * @return rewards -
1629      *           [0] stakerTokenReward
1630      *           [1] voterReputationReward
1631      *           [2] proposerReputationReward
1632      */
1633      // solhint-disable-next-line function-max-lines,code-complexity
1634     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1635         Proposal storage proposal = proposals[_proposalId];
1636         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1637         "Proposal should be Executed or ExpiredInQueue");
1638         Parameters memory params = parameters[proposal.paramsHash];
1639         uint256 lostReputation;
1640         if (proposal.winningVote == YES) {
1641             lostReputation = proposal.preBoostedVotes[NO];
1642         } else {
1643             lostReputation = proposal.preBoostedVotes[YES];
1644         }
1645         lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1646         //as staker
1647         Staker storage staker = proposal.stakers[_beneficiary];
1648         if (staker.amount > 0) {
1649             if (proposal.state == ProposalState.ExpiredInQueue) {
1650                 //Stakes of a proposal that expires in Queue are sent back to stakers
1651                 rewards[0] = staker.amount;
1652             } else if (staker.vote == proposal.winningVote) {
1653                 uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1654                 uint256 totalStakes = proposal.stakes[YES].add(proposal.stakes[NO]);
1655                 if (staker.vote == YES) {
1656                     uint256 _totalStakes =
1657                     ((totalStakes.mul(100 - proposal.expirationCallBountyPercentage))/100) - proposal.daoBounty;
1658                     rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1659                 } else {
1660                     rewards[0] = (staker.amount.mul(totalStakes))/totalWinningStakes;
1661                     if (organizations[proposal.organizationId] == _beneficiary) {
1662                           //dao redeem it reward
1663                         rewards[0] = rewards[0].sub(proposal.daoBounty);
1664                     }
1665                 }
1666             }
1667             staker.amount = 0;
1668         }
1669         //as voter
1670         Voter storage voter = proposal.voters[_beneficiary];
1671         if ((voter.reputation != 0) && (voter.preBoosted)) {
1672             if (proposal.state == ProposalState.ExpiredInQueue) {
1673               //give back reputation for the voter
1674                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1675             } else if (proposal.winningVote == voter.vote) {
1676                 uint256 preBoostedVotes = proposal.preBoostedVotes[YES].add(proposal.preBoostedVotes[NO]);
1677                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1678                 .add((voter.reputation.mul(lostReputation))/preBoostedVotes);
1679             }
1680             voter.reputation = 0;
1681         }
1682         //as proposer
1683         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1684             rewards[2] = params.proposingRepReward;
1685             proposal.proposer = address(0);
1686         }
1687         if (rewards[0] != 0) {
1688             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1689             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1690             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1691         }
1692         if (rewards[1].add(rewards[2]) != 0) {
1693             VotingMachineCallbacksInterface(proposal.callbacks)
1694             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1695             emit RedeemReputation(
1696             _proposalId,
1697             organizations[proposal.organizationId],
1698             _beneficiary,
1699             rewards[1].add(rewards[2])
1700             );
1701         }
1702     }
1703 
1704     /**
1705      * @dev redeemDaoBounty a reward for a successful stake.
1706      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1707      * users to redeem on behalf of someone else.
1708      * @param _proposalId the ID of the proposal
1709      * @param _beneficiary - the beneficiary address
1710      * @return redeemedAmount - redeem token amount
1711      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1712      */
1713     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1714     public
1715     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1716         Proposal storage proposal = proposals[_proposalId];
1717         require(proposal.state == ProposalState.Executed);
1718         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1719         Staker storage staker = proposal.stakers[_beneficiary];
1720         if (
1721             (staker.amount4Bounty > 0)&&
1722             (staker.vote == proposal.winningVote)&&
1723             (proposal.winningVote == YES)&&
1724             (totalWinningStakes != 0)) {
1725             //as staker
1726                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1727             }
1728         if ((potentialAmount != 0)&&
1729             (VotingMachineCallbacksInterface(proposal.callbacks)
1730             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1731             staker.amount4Bounty = 0;
1732             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1733             require(
1734             VotingMachineCallbacksInterface(proposal.callbacks)
1735             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1736             redeemedAmount = potentialAmount;
1737             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1738         }
1739     }
1740 
1741     /**
1742      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
1743      * @param _proposalId the ID of the proposal
1744      * @return bool true or false.
1745      */
1746     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
1747         Proposal memory proposal = proposals[_proposalId];
1748         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
1749     }
1750 
1751     /**
1752      * @dev threshold return the organization's score threshold which required by
1753      * a proposal to shift to boosted state.
1754      * This threshold is dynamically set and it depend on the number of boosted proposal.
1755      * @param _organizationId the organization identifier
1756      * @param _paramsHash the organization parameters hash
1757      * @return uint256 organization's score threshold.
1758      */
1759     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
1760         uint256 power = orgBoostedProposalsCnt[_organizationId];
1761         Parameters storage params = parameters[_paramsHash];
1762 
1763         if (power > params.limitExponentValue) {
1764             power = params.limitExponentValue;
1765         }
1766 
1767         return params.thresholdConst.pow(power);
1768     }
1769 
1770   /**
1771    * @dev hashParameters returns a hash of the given parameters
1772    */
1773     function getParametersHash(
1774         uint[11] memory _params,//use array here due to stack too deep issue.
1775         address _voteOnBehalf
1776     )
1777         public
1778         pure
1779         returns(bytes32)
1780         {
1781         //double call to keccak256 to avoid deep stack issue when call with too many params.
1782         return keccak256(
1783             abi.encodePacked(
1784             keccak256(
1785             abi.encodePacked(
1786                 _params[0],
1787                 _params[1],
1788                 _params[2],
1789                 _params[3],
1790                 _params[4],
1791                 _params[5],
1792                 _params[6],
1793                 _params[7],
1794                 _params[8],
1795                 _params[9],
1796                 _params[10])
1797             ),
1798             _voteOnBehalf
1799         ));
1800     }
1801 
1802     /**
1803       * @dev execute check if the proposal has been decided, and if so, execute the proposal
1804       * @param _proposalId the id of the proposal
1805       * @return bool true - the proposal has been executed
1806       *              false - otherwise.
1807      */
1808      // solhint-disable-next-line function-max-lines,code-complexity
1809     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
1810         Proposal storage proposal = proposals[_proposalId];
1811         Parameters memory params = parameters[proposal.paramsHash];
1812         Proposal memory tmpProposal = proposal;
1813         uint256 totalReputation =
1814         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
1815         //first divide by 100 to prevent overflow
1816         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
1817         ExecutionState executionState = ExecutionState.None;
1818         uint256 averageDownstakesOfBoosted;
1819         uint256 confidenceThreshold;
1820 
1821         if (proposal.votes[proposal.winningVote] > executionBar) {
1822          // someone crossed the absolute vote execution bar.
1823             if (proposal.state == ProposalState.Queued) {
1824                 executionState = ExecutionState.QueueBarCrossed;
1825             } else if (proposal.state == ProposalState.PreBoosted) {
1826                 executionState = ExecutionState.PreBoostedBarCrossed;
1827             } else {
1828                 executionState = ExecutionState.BoostedBarCrossed;
1829             }
1830             proposal.state = ProposalState.Executed;
1831         } else {
1832             if (proposal.state == ProposalState.Queued) {
1833                 // solhint-disable-next-line not-rely-on-time
1834                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
1835                     proposal.state = ProposalState.ExpiredInQueue;
1836                     proposal.winningVote = NO;
1837                     executionState = ExecutionState.QueueTimeOut;
1838                 } else {
1839                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1840                     if (_score(_proposalId) > confidenceThreshold) {
1841                         //change proposal mode to PreBoosted mode.
1842                         proposal.state = ProposalState.PreBoosted;
1843                         // solhint-disable-next-line not-rely-on-time
1844                         proposal.times[2] = now;
1845                         proposal.confidenceThreshold = confidenceThreshold;
1846                     }
1847                 }
1848             }
1849 
1850             if (proposal.state == ProposalState.PreBoosted) {
1851                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1852               // solhint-disable-next-line not-rely-on-time
1853                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
1854                     if ((_score(_proposalId) > confidenceThreshold) &&
1855                         (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS)) {
1856                        //change proposal mode to Boosted mode.
1857                         proposal.state = ProposalState.Boosted;
1858                        // solhint-disable-next-line not-rely-on-time
1859                         proposal.times[1] = now;
1860                         orgBoostedProposalsCnt[proposal.organizationId]++;
1861                        //add a value to average -> average = average + ((value - average) / nbValues)
1862                         averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1863                         // solium-disable-next-line indentation
1864                         averagesDownstakesOfBoosted[proposal.organizationId] =
1865                             uint256(int256(averageDownstakesOfBoosted) +
1866                             ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
1867                             int256(orgBoostedProposalsCnt[proposal.organizationId])));
1868                     }
1869                 } else { //check the Confidence level is stable
1870                     uint256 proposalScore = _score(_proposalId);
1871                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
1872                         proposal.state = ProposalState.Queued;
1873                     } else if (proposal.confidenceThreshold > proposalScore) {
1874                         proposal.confidenceThreshold = confidenceThreshold;
1875                     }
1876                 }
1877             }
1878         }
1879 
1880         if ((proposal.state == ProposalState.Boosted) ||
1881             (proposal.state == ProposalState.QuietEndingPeriod)) {
1882             // solhint-disable-next-line not-rely-on-time
1883             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
1884                 proposal.state = ProposalState.Executed;
1885                 executionState = ExecutionState.BoostedTimeOut;
1886             }
1887         }
1888 
1889         if (executionState != ExecutionState.None) {
1890             if ((executionState == ExecutionState.BoostedTimeOut) ||
1891                 (executionState == ExecutionState.BoostedBarCrossed)) {
1892                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
1893                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
1894                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
1895                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
1896                 if (boostedProposals == 0) {
1897                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
1898                 } else {
1899                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1900                     averagesDownstakesOfBoosted[proposal.organizationId] =
1901                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
1902                 }
1903             }
1904             emit ExecuteProposal(
1905             _proposalId,
1906             organizations[proposal.organizationId],
1907             proposal.winningVote,
1908             totalReputation
1909             );
1910             emit GPExecuteProposal(_proposalId, executionState);
1911             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
1912             proposal.daoBounty = proposal.daoBountyRemain;
1913         }
1914         if (tmpProposal.state != proposal.state) {
1915             emit StateChange(_proposalId, proposal.state);
1916         }
1917         return (executionState != ExecutionState.None);
1918     }
1919 
1920     /**
1921      * @dev staking function
1922      * @param _proposalId id of the proposal
1923      * @param _vote  NO(2) or YES(1).
1924      * @param _amount the betting amount
1925      * @return bool true - the proposal has been executed
1926      *              false - otherwise.
1927      */
1928     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
1929         // 0 is not a valid vote.
1930         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
1931         require(_amount > 0, "staking amount should be >0");
1932 
1933         if (_execute(_proposalId)) {
1934             return true;
1935         }
1936         Proposal storage proposal = proposals[_proposalId];
1937 
1938         if ((proposal.state != ProposalState.PreBoosted) &&
1939             (proposal.state != ProposalState.Queued)) {
1940             return false;
1941         }
1942 
1943         // enable to increase stake only on the previous stake vote
1944         Staker storage staker = proposal.stakers[_staker];
1945         if ((staker.amount > 0) && (staker.vote != _vote)) {
1946             return false;
1947         }
1948 
1949         uint256 amount = _amount;
1950         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
1951         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
1952         staker.amount = staker.amount.add(amount);
1953         //This is to prevent average downstakes calculation overflow
1954         //Note that any how GEN cap is 100000000 ether.
1955         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
1956         require(proposal.totalStakes <= 0x100000000000000000000000000000000, "total stakes is too high");
1957 
1958         if (_vote == YES) {
1959             staker.amount4Bounty = staker.amount4Bounty.add(amount);
1960         }
1961         staker.vote = _vote;
1962 
1963         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
1964         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
1965         return _execute(_proposalId);
1966     }
1967 
1968     /**
1969      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
1970      * @param _proposalId id of the proposal
1971      * @param _voter used in case the vote is cast for someone else
1972      * @param _vote a value between 0 to and the proposal's number of choices.
1973      * @param _rep how many reputation the voter would like to stake for this vote.
1974      *         if  _rep==0 so the voter full reputation will be use.
1975      * @return true in case of proposal execution otherwise false
1976      * throws if proposal is not open or if it has been executed
1977      * NB: executes the proposal if a decision has been reached
1978      */
1979      // solhint-disable-next-line function-max-lines,code-complexity
1980     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
1981         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
1982         if (_execute(_proposalId)) {
1983             return true;
1984         }
1985 
1986         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
1987         Proposal storage proposal = proposals[_proposalId];
1988 
1989         // Check voter has enough reputation:
1990         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
1991         require(reputation > 0, "_voter must have reputation");
1992         require(reputation >= _rep, "reputation >= _rep");
1993         uint256 rep = _rep;
1994         if (rep == 0) {
1995             rep = reputation;
1996         }
1997         // If this voter has already voted, return false.
1998         if (proposal.voters[_voter].reputation != 0) {
1999             return false;
2000         }
2001         // The voting itself:
2002         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2003         //check if the current winningVote changed or there is a tie.
2004         //for the case there is a tie the current winningVote set to NO.
2005         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2006             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2007             proposal.winningVote == YES)) {
2008             if (proposal.state == ProposalState.Boosted &&
2009             // solhint-disable-next-line not-rely-on-time
2010                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2011                 proposal.state == ProposalState.QuietEndingPeriod) {
2012                 //quietEndingPeriod
2013                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2014                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2015                     proposal.state = ProposalState.QuietEndingPeriod;
2016                 }
2017                 // solhint-disable-next-line not-rely-on-time
2018                 proposal.times[1] = now;
2019             }
2020             proposal.winningVote = _vote;
2021         }
2022         proposal.voters[_voter] = Voter({
2023             reputation: rep,
2024             vote: _vote,
2025             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2026         });
2027         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2028             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2029             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2030             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2031         }
2032         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2033         return _execute(_proposalId);
2034     }
2035 
2036     /**
2037      * @dev _score return the proposal score (Confidence level)
2038      * For dual choice proposal S = (S+)/(S-)
2039      * @param _proposalId the ID of the proposal
2040      * @return uint256 proposal score.
2041      */
2042     function _score(bytes32 _proposalId) internal view returns(uint256) {
2043         Proposal storage proposal = proposals[_proposalId];
2044         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2045         return proposal.stakes[YES]/proposal.stakes[NO];
2046     }
2047 
2048     /**
2049       * @dev _isVotable check if the proposal is votable
2050       * @param _proposalId the ID of the proposal
2051       * @return bool true or false
2052     */
2053     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2054         ProposalState pState = proposals[_proposalId].state;
2055         return ((pState == ProposalState.PreBoosted)||
2056                 (pState == ProposalState.Boosted)||
2057                 (pState == ProposalState.QuietEndingPeriod)||
2058                 (pState == ProposalState.Queued)
2059         );
2060     }
2061 }
2062 
2063 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2064 
2065 /**
2066  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2067  */
2068 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2069     using ECDSA for bytes32;
2070 
2071     // Digest describing the data the user signs according EIP 712.
2072     // Needs to match what is passed to Metamask.
2073     bytes32 public constant DELEGATION_HASH_EIP712 =
2074     keccak256(abi.encodePacked(
2075     "address GenesisProtocolAddress",
2076     "bytes32 ProposalId",
2077     "uint256 Vote",
2078     "uint256 AmountToStake",
2079     "uint256 Nonce"
2080     ));
2081 
2082     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2083 
2084     /**
2085      * @dev Constructor
2086      */
2087     constructor(IERC20 _stakingToken)
2088     public
2089     // solhint-disable-next-line no-empty-blocks
2090     GenesisProtocolLogic(_stakingToken) {
2091     }
2092 
2093     /**
2094      * @dev staking function
2095      * @param _proposalId id of the proposal
2096      * @param _vote  NO(2) or YES(1).
2097      * @param _amount the betting amount
2098      * @return bool true - the proposal has been executed
2099      *              false - otherwise.
2100      */
2101     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2102         return _stake(_proposalId, _vote, _amount, msg.sender);
2103     }
2104 
2105     /**
2106      * @dev stakeWithSignature function
2107      * @param _proposalId id of the proposal
2108      * @param _vote  NO(2) or YES(1).
2109      * @param _amount the betting amount
2110      * @param _nonce nonce value ,it is part of the signature to ensure that
2111               a signature can be received only once.
2112      * @param _signatureType signature type
2113               1 - for web3.eth.sign
2114               2 - for eth_signTypedData according to EIP #712.
2115      * @param _signature  - signed data by the staker
2116      * @return bool true - the proposal has been executed
2117      *              false - otherwise.
2118      */
2119     function stakeWithSignature(
2120         bytes32 _proposalId,
2121         uint256 _vote,
2122         uint256 _amount,
2123         uint256 _nonce,
2124         uint256 _signatureType,
2125         bytes calldata _signature
2126         )
2127         external
2128         returns(bool)
2129         {
2130         // Recreate the digest the user signed
2131         bytes32 delegationDigest;
2132         if (_signatureType == 2) {
2133             delegationDigest = keccak256(
2134                 abi.encodePacked(
2135                     DELEGATION_HASH_EIP712, keccak256(
2136                         abi.encodePacked(
2137                         address(this),
2138                         _proposalId,
2139                         _vote,
2140                         _amount,
2141                         _nonce)
2142                     )
2143                 )
2144             );
2145         } else {
2146             delegationDigest = keccak256(
2147                         abi.encodePacked(
2148                         address(this),
2149                         _proposalId,
2150                         _vote,
2151                         _amount,
2152                         _nonce)
2153                     ).toEthSignedMessageHash();
2154         }
2155         address staker = delegationDigest.recover(_signature);
2156         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2157         require(staker != address(0), "staker address cannot be 0");
2158         require(stakesNonce[staker] == _nonce);
2159         stakesNonce[staker] = stakesNonce[staker].add(1);
2160         return _stake(_proposalId, _vote, _amount, staker);
2161     }
2162 
2163     /**
2164      * @dev voting function
2165      * @param _proposalId id of the proposal
2166      * @param _vote NO(2) or YES(1).
2167      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2168      * @param _voter voter address
2169      * @return bool true - the proposal has been executed
2170      *              false - otherwise.
2171      */
2172     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2173     external
2174     votable(_proposalId)
2175     returns(bool) {
2176         Proposal storage proposal = proposals[_proposalId];
2177         Parameters memory params = parameters[proposal.paramsHash];
2178         address voter;
2179         if (params.voteOnBehalf != address(0)) {
2180             require(msg.sender == params.voteOnBehalf);
2181             voter = _voter;
2182         } else {
2183             voter = msg.sender;
2184         }
2185         return internalVote(_proposalId, voter, _vote, _amount);
2186     }
2187 
2188   /**
2189    * @dev Cancel the vote of the msg.sender.
2190    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2191    * This function is here in order to comply to the IntVoteInterface .
2192    */
2193     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2194        //this is not allowed
2195         return;
2196     }
2197 
2198     /**
2199       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2200       * @param _proposalId the id of the proposal
2201       * @return bool true - the proposal has been executed
2202       *              false - otherwise.
2203      */
2204     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2205         return _execute(_proposalId);
2206     }
2207 
2208   /**
2209     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2210     * @return uint256 that contains number of choices
2211     */
2212     function getNumberOfChoices(bytes32) external view returns(uint256) {
2213         return NUM_OF_CHOICES;
2214     }
2215 
2216     /**
2217       * @dev getProposalTimes returns proposals times variables.
2218       * @param _proposalId id of the proposal
2219       * @return proposals times array
2220       */
2221     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2222         return proposals[_proposalId].times;
2223     }
2224 
2225     /**
2226      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2227      * @param _proposalId the ID of the proposal
2228      * @param _voter the address of the voter
2229      * @return uint256 vote - the voters vote
2230      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2231      */
2232     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2233         Voter memory voter = proposals[_proposalId].voters[_voter];
2234         return (voter.vote, voter.reputation);
2235     }
2236 
2237     /**
2238     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2239     * @param _proposalId the ID of the proposal
2240     * @param _choice the index in the
2241     * @return voted reputation for the given choice
2242     */
2243     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2244         return proposals[_proposalId].votes[_choice];
2245     }
2246 
2247     /**
2248     * @dev isVotable check if the proposal is votable
2249     * @param _proposalId the ID of the proposal
2250     * @return bool true or false
2251     */
2252     function isVotable(bytes32 _proposalId) external view returns(bool) {
2253         return _isVotable(_proposalId);
2254     }
2255 
2256     /**
2257     * @dev proposalStatus return the total votes and stakes for a given proposal
2258     * @param _proposalId the ID of the proposal
2259     * @return uint256 preBoostedVotes YES
2260     * @return uint256 preBoostedVotes NO
2261     * @return uint256 total stakes YES
2262     * @return uint256 total stakes NO
2263     */
2264     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2265         return (
2266                 proposals[_proposalId].preBoostedVotes[YES],
2267                 proposals[_proposalId].preBoostedVotes[NO],
2268                 proposals[_proposalId].stakes[YES],
2269                 proposals[_proposalId].stakes[NO]
2270         );
2271     }
2272 
2273   /**
2274     * @dev getProposalOrganization return the organizationId for a given proposal
2275     * @param _proposalId the ID of the proposal
2276     * @return bytes32 organization identifier
2277     */
2278     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2279         return (proposals[_proposalId].organizationId);
2280     }
2281 
2282     /**
2283       * @dev getStaker return the vote and stake amount for a given proposal and staker
2284       * @param _proposalId the ID of the proposal
2285       * @param _staker staker address
2286       * @return uint256 vote
2287       * @return uint256 amount
2288     */
2289     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2290         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2291     }
2292 
2293     /**
2294       * @dev voteStake return the amount stakes for a given proposal and vote
2295       * @param _proposalId the ID of the proposal
2296       * @param _vote vote number
2297       * @return uint256 stake amount
2298     */
2299     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2300         return proposals[_proposalId].stakes[_vote];
2301     }
2302 
2303   /**
2304     * @dev voteStake return the winningVote for a given proposal
2305     * @param _proposalId the ID of the proposal
2306     * @return uint256 winningVote
2307     */
2308     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2309         return proposals[_proposalId].winningVote;
2310     }
2311 
2312     /**
2313       * @dev voteStake return the state for a given proposal
2314       * @param _proposalId the ID of the proposal
2315       * @return ProposalState proposal state
2316     */
2317     function state(bytes32 _proposalId) external view returns(ProposalState) {
2318         return proposals[_proposalId].state;
2319     }
2320 
2321    /**
2322     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2323     * @return bool true or false
2324     */
2325     function isAbstainAllow() external pure returns(bool) {
2326         return false;
2327     }
2328 
2329     /**
2330      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2331      * @return min - minimum number of choices
2332                max - maximum number of choices
2333      */
2334     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2335         return (YES, NO);
2336     }
2337 
2338     /**
2339      * @dev score return the proposal score
2340      * @param _proposalId the ID of the proposal
2341      * @return uint256 proposal score.
2342      */
2343     function score(bytes32 _proposalId) public view returns(uint256) {
2344         return  _score(_proposalId);
2345     }
2346 }
2347 
2348 // File: @daostack/arc/contracts/votingMachines/VotingMachineCallbacks.sol
2349 
2350 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2351 
2352     struct ProposalInfo {
2353         uint256 blockNumber; // the proposal's block number
2354         Avatar avatar; // the proposal's avatar
2355         address votingMachine;
2356     }
2357 
2358     modifier onlyVotingMachine(bytes32 _proposalId) {
2359         require(msg.sender == proposalsInfo[_proposalId].votingMachine, "only VotingMachine");
2360         _;
2361     }
2362 
2363             //proposalId ->     ProposalInfo
2364     mapping(bytes32      =>     ProposalInfo    ) public proposalsInfo;
2365 
2366     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2367     external
2368     onlyVotingMachine(_proposalId)
2369     returns(bool)
2370     {
2371         Avatar avatar = proposalsInfo[_proposalId].avatar;
2372         if (avatar == Avatar(0)) {
2373             return false;
2374         }
2375         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2376     }
2377 
2378     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2379     external
2380     onlyVotingMachine(_proposalId)
2381     returns(bool)
2382     {
2383         Avatar avatar = proposalsInfo[_proposalId].avatar;
2384         if (avatar == Avatar(0)) {
2385             return false;
2386         }
2387         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2388     }
2389 
2390     function stakingTokenTransfer(
2391         IERC20 _stakingToken,
2392         address _beneficiary,
2393         uint256 _amount,
2394         bytes32 _proposalId)
2395     external
2396     onlyVotingMachine(_proposalId)
2397     returns(bool)
2398     {
2399         Avatar avatar = proposalsInfo[_proposalId].avatar;
2400         if (avatar == Avatar(0)) {
2401             return false;
2402         }
2403         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2404     }
2405 
2406     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2407         Avatar avatar = proposalsInfo[_proposalId].avatar;
2408         if (proposalsInfo[_proposalId].avatar == Avatar(0)) {
2409             return 0;
2410         }
2411         return _stakingToken.balanceOf(address(avatar));
2412     }
2413 
2414     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2415         ProposalInfo memory proposal = proposalsInfo[_proposalId];
2416         if (proposal.avatar == Avatar(0)) {
2417             return 0;
2418         }
2419         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2420     }
2421 
2422     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2423         ProposalInfo memory proposal = proposalsInfo[_proposalId];
2424         if (proposal.avatar == Avatar(0)) {
2425             return 0;
2426         }
2427         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2428     }
2429 }
2430 
2431 // File: @daostack/arc/contracts/universalSchemes/SchemeRegistrar.sol
2432 
2433 /**
2434  * @title A registrar for Schemes for organizations
2435  * @dev The SchemeRegistrar is used for registering and unregistering schemes at organizations
2436  */
2437 
2438 contract SchemeRegistrar is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2439     event NewSchemeProposal(
2440         address indexed _avatar,
2441         bytes32 indexed _proposalId,
2442         address indexed _intVoteInterface,
2443         address _scheme,
2444         bytes32 _parametersHash,
2445         bytes4 _permissions,
2446         string _descriptionHash
2447     );
2448 
2449     event RemoveSchemeProposal(address indexed _avatar,
2450         bytes32 indexed _proposalId,
2451         address indexed _intVoteInterface,
2452         address _scheme,
2453         string _descriptionHash
2454     );
2455 
2456     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
2457     event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);
2458 
2459     // a SchemeProposal is a  proposal to add or remove a scheme to/from the an organization
2460     struct SchemeProposal {
2461         address scheme; //
2462         bool addScheme; // true: add a scheme, false: remove a scheme.
2463         bytes32 parametersHash;
2464         bytes4 permissions;
2465     }
2466 
2467     // A mapping from the organization (Avatar) address to the saved data of the organization:
2468     mapping(address=>mapping(bytes32=>SchemeProposal)) public organizationsProposals;
2469 
2470     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2471     struct Parameters {
2472         bytes32 voteRegisterParams;
2473         bytes32 voteRemoveParams;
2474         IntVoteInterface intVote;
2475     }
2476 
2477     mapping(bytes32=>Parameters) public parameters;
2478 
2479     /**
2480     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2481     * @param _proposalId the ID of the voting in the voting machine
2482     * @param _param a parameter of the voting result, 1 yes and 2 is no.
2483     */
2484     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
2485         Avatar avatar = proposalsInfo[_proposalId].avatar;
2486         SchemeProposal memory proposal = organizationsProposals[address(avatar)][_proposalId];
2487         require(proposal.scheme != address(0));
2488         delete organizationsProposals[address(avatar)][_proposalId];
2489         emit ProposalDeleted(address(avatar), _proposalId);
2490         if (_param == 1) {
2491 
2492           // Define controller and get the params:
2493             ControllerInterface controller = ControllerInterface(avatar.owner());
2494 
2495           // Add a scheme:
2496             if (proposal.addScheme) {
2497                 require(controller.registerScheme(
2498                         proposal.scheme,
2499                         proposal.parametersHash,
2500                         proposal.permissions,
2501                         address(avatar))
2502                 );
2503             }
2504           // Remove a scheme:
2505             if (!proposal.addScheme) {
2506                 require(controller.unregisterScheme(proposal.scheme, address(avatar)));
2507             }
2508         }
2509         emit ProposalExecuted(address(avatar), _proposalId, _param);
2510         return true;
2511     }
2512 
2513     /**
2514     * @dev hash the parameters, save them if necessary, and return the hash value
2515     */
2516     function setParameters(
2517         bytes32 _voteRegisterParams,
2518         bytes32 _voteRemoveParams,
2519         IntVoteInterface _intVote
2520     ) public returns(bytes32)
2521     {
2522         bytes32 paramsHash = getParametersHash(_voteRegisterParams, _voteRemoveParams, _intVote);
2523         parameters[paramsHash].voteRegisterParams = _voteRegisterParams;
2524         parameters[paramsHash].voteRemoveParams = _voteRemoveParams;
2525         parameters[paramsHash].intVote = _intVote;
2526         return paramsHash;
2527     }
2528 
2529     function getParametersHash(
2530         bytes32 _voteRegisterParams,
2531         bytes32 _voteRemoveParams,
2532         IntVoteInterface _intVote
2533     ) public pure returns(bytes32)
2534     {
2535         return keccak256(abi.encodePacked(_voteRegisterParams, _voteRemoveParams, _intVote));
2536     }
2537 
2538     /**
2539     * @dev create a proposal to register a scheme
2540     * @param _avatar the address of the organization the scheme will be registered for
2541     * @param _scheme the address of the scheme to be registered
2542     * @param _parametersHash a hash of the configuration of the _scheme
2543     * @param _permissions the permission of the scheme to be registered
2544     * @param _descriptionHash proposal's description hash
2545     * @return a proposal Id
2546     * @dev NB: not only proposes the vote, but also votes for it
2547     */
2548     function proposeScheme(
2549         Avatar _avatar,
2550         address _scheme,
2551         bytes32 _parametersHash,
2552         bytes4 _permissions,
2553         string memory _descriptionHash
2554     )
2555     public
2556     returns(bytes32)
2557     {
2558         // propose
2559         require(_scheme != address(0), "scheme cannot be zero");
2560         Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];
2561 
2562         bytes32 proposalId = controllerParams.intVote.propose(
2563             2,
2564             controllerParams.voteRegisterParams,
2565             msg.sender,
2566             address(_avatar)
2567         );
2568 
2569         SchemeProposal memory proposal = SchemeProposal({
2570             scheme: _scheme,
2571             parametersHash: _parametersHash,
2572             addScheme: true,
2573             permissions: _permissions
2574         });
2575         emit NewSchemeProposal(
2576             address(_avatar),
2577             proposalId,
2578             address(controllerParams.intVote),
2579             _scheme, _parametersHash,
2580             _permissions,
2581             _descriptionHash
2582         );
2583         organizationsProposals[address(_avatar)][proposalId] = proposal;
2584         proposalsInfo[proposalId] = ProposalInfo({
2585             blockNumber:block.number,
2586             avatar:_avatar,
2587             votingMachine:address(controllerParams.intVote)
2588         });
2589         return proposalId;
2590     }
2591 
2592     /**
2593     * @dev propose to remove a scheme for a controller
2594     * @param _avatar the address of the controller from which we want to remove a scheme
2595     * @param _scheme the address of the scheme we want to remove
2596     * @param _descriptionHash proposal description hash
2597     * NB: not only registers the proposal, but also votes for it
2598     */
2599     function proposeToRemoveScheme(Avatar _avatar, address _scheme, string memory _descriptionHash)
2600     public
2601     returns(bytes32)
2602     {
2603         require(_scheme != address(0), "scheme cannot be zero");
2604         bytes32 paramsHash = getParametersFromController(_avatar);
2605         Parameters memory params = parameters[paramsHash];
2606 
2607         IntVoteInterface intVote = params.intVote;
2608         bytes32 proposalId = intVote.propose(2, params.voteRemoveParams, msg.sender, address(_avatar));
2609         organizationsProposals[address(_avatar)][proposalId].scheme = _scheme;
2610         emit RemoveSchemeProposal(address(_avatar), proposalId, address(intVote), _scheme, _descriptionHash);
2611         proposalsInfo[proposalId] = ProposalInfo({
2612             blockNumber:block.number,
2613             avatar:_avatar,
2614             votingMachine:address(params.intVote)
2615         });
2616         return proposalId;
2617     }
2618 }