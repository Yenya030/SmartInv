1 pragma solidity ^0.4.16;
2 /*
3 
4     GOeureka SimpleAudit Smart Contract
5     
6     This contract stores a client and supplier reference between customers and 
7     hotels on the blockchain for audit log purposes
8     
9     bytes32 goeureka_audit_ref 
10     - a blockchain reference ID generated by goeureka
11     
12     string reference
13     - a hash of two reference code from supplier and goeureka
14 
15 */
16 contract SimpleAudit {
17     
18     struct Audit {
19         string reference;        // a hash of two reference code from supplier and goeureka
20         bool exist;              // checks if the reference exists
21     }
22     
23     address creator;
24     mapping(bytes32 => Audit) public records;
25     
26     constructor() public {
27         creator = msg.sender;
28     }
29     
30     modifier onlyOwner {
31         require(
32             msg.sender == creator, "Only owner can call this function."
33         );
34         _;
35     }
36     
37     modifier noEdit(bytes32 goeureka_audit_ref) {
38         
39         require(
40             records[goeureka_audit_ref].exist == false, 
41             "Already set, audit log cannot be modified"
42         );
43         _;
44     }
45 
46     function set(bytes32 goeureka_audit_ref, string reference) 
47         onlyOwner 
48         noEdit(goeureka_audit_ref) 
49         public {
50             records[goeureka_audit_ref].reference = reference;
51             records[goeureka_audit_ref].exist = true;
52     }
53 
54     function get(bytes32 goeureka_audit_ref) public constant returns (string) {
55         return records[goeureka_audit_ref].reference;
56     }
57     
58 }