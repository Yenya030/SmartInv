1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Armory.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./token/ERC1155/ERC1155.sol\";\nimport \"./utils/ERC2981.sol\";\nimport \"./utils/IERC165.sol\";\nimport \"./utils/Ownable.sol\";\nimport \"./utils/ECDSA.sol\";\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n//                                                                         //\n//    ██╗░░░██╗░█████╗░██╗░░░░░██╗░░██╗░█████╗░██╗░░░░░██╗░░░░░░█████╗░    //\n//    ██║░░░██║██╔══██╗██║░░░░░██║░░██║██╔══██╗██║░░░░░██║░░░░░██╔══██╗    //\n//    ╚██╗░██╔╝███████║██║░░░░░███████║███████║██║░░░░░██║░░░░░███████║    //\n//    ░╚████╔╝░██╔══██║██║░░░░░██╔══██║██╔══██║██║░░░░░██║░░░░░██╔══██║    //\n//    ░░╚██╔╝░░██║░░██║███████╗██║░░██║██║░░██║███████╗███████╗██║░░██║    //\n//    ░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░╚═╝    //\n//                                                                         //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n\n/**\n * Subset of the IOperatorFilterRegistry with only the methods that the main minting contract will call.\n * The owner of the collection is able to manage the registry subscription on the contract's behalf\n */\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(\n        address registrant,\n        address operator\n    ) external returns (bool);\n}\n\ncontract ValhallaReserve is ERC1155, Ownable, ERC2981 {\n    using ECDSA for bytes32;\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    // Compiler will pack this into a 256bit word.\n    struct SaleData {\n        // unitPrice for each token for the general sale\n        uint96 price;\n        // Optional value to prevent a transaction from buying too much supply\n        uint64 txLimit;\n        // startTime for the sale of the tokens\n        uint48 startTimestamp;\n        // endTime for the sale of the tokens\n        uint48 endTimestamp;\n    }\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // Address that houses the implemention to check if operators are allowed or not\n    address public operatorFilterRegistryAddress;\n    // Address this contract verifies with the registryAddress for allowed operators.\n    address public filterRegistrant;\n\n    // Address used for the mintSignature method\n    address public signer;\n    // Used to quickly invalidate batches of signatures if needed.\n    uint256 public signatureVersion;\n    // Mapping that shows if a tier is active or not\n    mapping(uint256 => mapping(string => bool)) public isTierActive;\n    mapping(bytes32 => bool) public signatureUsed;\n    \n    // For tokens that are open to a general sale.\n    mapping(uint256 => SaleData) public generalSaleData;\n\n    // Mapping of owner-approved contracts that can burn the user's tokens during a transaction\n    mapping(address => mapping(uint256 => bool)) public approvedBurners;\n\n    // =============================================================\n    //                            Events\n    // =============================================================\n\n    event MintOpen(\n        uint256 indexed tokenId,\n        uint256 startTimestamp,\n        uint256 endTimestamp,\n        uint256 price,\n        uint256 txLimit\n    );\n    event MintClosed(uint256 indexed tokenId);\n\n    // =============================================================\n    //                          Constructor\n    // =============================================================\n\n    constructor () {\n        _setName(\"ValhallaReserve\");\n        _setSymbol(\"RSRV\");\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC1155, ERC2981) returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            ERC1155.supportsInterface(interfaceId) ||\n            ERC2981.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Allows the owner to set a new name for the collection.\n     */\n    function setName(string memory name) external onlyOwner {\n        _setName(name);\n    }\n\n    /**\n     * @dev Allows the owner to set a new symbol for the collection.\n     */\n    function setSymbol(string memory symbol) external onlyOwner {\n        _setSymbol(symbol);\n    }\n\n    /**\n     * @dev Allows the owner to add a new tokenId if it does not already exist.\n     * \n     * @param tokenId TokenId that will get created\n     * @param tokenMintLimit Token Supply for the tokenId. If 0, the supply is capped at uint64 max.\n     * @param uri link pointing to the token metadata\n     */\n    function addTokenId(uint256 tokenId, uint64 tokenMintLimit, string calldata uri) external onlyOwner {\n        _addTokenId(tokenId, tokenMintLimit, uri);\n    }\n\n    /**\n     * @dev Allows the owner to set a new token URI for a single tokenId.\n     * \n     * This tokenId must have already been added by `addTokenId`\n     */\n    function updateTokenURI(uint256 tokenId, string calldata uri) external onlyOwner {\n        _updateMetadata(tokenId, uri);\n    }\n\n    /**\n     * @dev Token supply can be set, but can ONLY BE LOWERED. It also cannot be lower than the current supply.\n     *\n     * This logic is gauranteed by the {_setTokenMintLimit} method\n     */\n    function setTokenMintLimit(uint256 tokenId, uint64 tokenMintLimit) external onlyOwner {\n        _setTokenMintLimit(tokenId, tokenMintLimit);\n    }\n \n    // =============================================================\n    //                           IERC2981\n    // =============================================================\n\n    /**\n     * @notice Allows the owner to set default royalties following EIP-2981 royalty standard.\n     */\n    function setDefaultRoyalty(\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyOwner {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    // =============================================================\n    //                 Operator Filter Registry\n    // =============================================================\n\n    /**\n     * @dev Stops operators from being added as an approved address to transfer.\n     * @param operator the address a wallet is trying to grant approval to.\n     */\n    function _beforeApproval(address operator) internal virtual override {\n        if (operatorFilterRegistryAddress.code.length > 0) {\n            if (\n                !IOperatorFilterRegistry(operatorFilterRegistryAddress)\n                    .isOperatorAllowed(filterRegistrant, operator)\n            ) {\n                revert OperatorNotAllowed();\n            }\n        }\n        super._beforeApproval(operator);\n    }\n\n    /**\n     * @dev Stops operators that are not approved from doing transfers.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        if (operatorFilterRegistryAddress.code.length > 0) {\n            if (\n                !IOperatorFilterRegistry(operatorFilterRegistryAddress)\n                    .isOperatorAllowed(filterRegistrant, msg.sender)\n            ) {\n                revert OperatorNotAllowed();\n            }\n        }\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @notice Allows the owner to set a new registrant contract.\n     */\n    function setOperatorFilterRegistryAddress(\n        address registryAddress\n    ) external onlyOwner {\n        operatorFilterRegistryAddress = registryAddress;\n    }\n\n    /**\n     * @notice Allows the owner to set a new registrant address.\n     */\n    function setFilterRegistrant(address newRegistrant) external onlyOwner {\n        filterRegistrant = newRegistrant;\n    }\n\n    // =============================================================\n    //                        Token Minting\n    // =============================================================\n\n    /**\n     * @dev This function does a best effort to Owner mint. If a given tokenId is\n     * over the token supply amount, it will mint as many are available and stop at the limit.\n     * This is necessary so that a given transaction does not fail if another public mint\n     * transaction happens to take place just before this one that would cause the amount of\n     * minted tokens to go over a token limit.\n     */\n    function mintDev(\n        address[] calldata receivers,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) external onlyOwner {\n        if (\n            receivers.length != tokenIds.length ||\n            receivers.length != amounts.length\n        ) {\n            revert ArrayLengthMismatch();\n        }\n\n        for (uint256 i = 0; i < receivers.length; ) {\n            uint256 buyLimit = _remainingSupply(tokenIds[i]);\n\n            if (buyLimit != 0) {\n                if (amounts[i] > buyLimit) {\n                    _mint(receivers[i], tokenIds[i], buyLimit, \"\");\n                } else {\n                    _mint(receivers[i], tokenIds[i], amounts[i], \"\");\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Allows the owner to change the active version of their signatures, this also\n     * allows a simple invalidation of all signatures they have created on old versions.\n     */\n    function setSigner(address signer_) external onlyOwner {\n        signer = signer_;\n    }\n\n    /**\n     * @notice Allows the owner to change the active version of their signatures, this also\n     * allows a simple invalidation of all signatures they have created on old versions.\n     */\n    function setSignatureVersion(uint256 version) external onlyOwner {\n        signatureVersion = version;\n    }\n\n    /**\n     * @notice Allows owner to sets if a certain tier is active or not.\n     */\n    function setIsTierActive(\n        uint256 tokenId,\n        string memory tier,\n        bool active\n    ) external onlyOwner {\n        isTierActive[tokenId][tier] = active;\n    }\n    \n    /**\n     * @dev With the correct hash signed by the owner, a wallet can mint at\n     * a unit price up to the quantity specified.\n     */\n    function mintSignature(\n        string memory tier,\n        uint256 tokenId,\n        uint256 unitPrice,\n        uint256 version,\n        uint256 nonce,\n        uint256 amount,\n        uint256 buyAmount,\n        bytes memory sig\n    ) external payable {\n        _verifyTokenMintLimit(tokenId, buyAmount);\n        if (!isTierActive[tokenId][tier]) revert TierNotActive();\n        if (buyAmount > amount || buyAmount == 0) revert InvalidSignatureBuyAmount();\n        if (version != signatureVersion) revert InvalidSignatureVersion();\n        uint256 totalPrice = unitPrice * buyAmount;\n        if (msg.value != totalPrice) revert IncorrectMsgValue();\n\n        bytes32 hash = ECDSA.toEthSignedMessageHash(\n            keccak256(\n                abi.encode(\n                    tier,\n                    address(this),\n                    tokenId,\n                    unitPrice,\n                    version,\n                    nonce,\n                    amount,\n                    msg.sender\n                )\n            )\n        );\n\n        if (signatureUsed[hash]) revert SignatureAlreadyUsed();\n        signatureUsed[hash] = true;\n        if (hash.recover(sig) != signer) revert InvalidSignature();\n\n        _mint(_msgSender(), tokenId, buyAmount, \"\");\n    }\n\n    /**\n     * @dev Allows the owner to open the {mint} method for a certain tokenId\n     * this method is to allow buyers to save gas on minting by not requiring a signature.\n     */\n    function openMint(\n        uint256 tokenId,\n        uint96 price,\n        uint48 startTimestamp,\n        uint48 endTimestamp,\n        uint64 txLimit\n    ) external onlyOwner {\n        if(!exists(tokenId)) revert NonExistentToken();\n        generalSaleData[tokenId].price = price;\n        generalSaleData[tokenId].startTimestamp = startTimestamp;\n        generalSaleData[tokenId].endTimestamp = endTimestamp;\n        generalSaleData[tokenId].txLimit = txLimit;\n\n        emit MintOpen(\n            tokenId,\n            startTimestamp,\n            endTimestamp,\n            price,\n            txLimit\n        );\n    }\n\n    /**\n     * @dev Allows the owner to close the {generalMint} method to the public for a certain tokenId.\n     */\n    function closeMint(uint256 tokenId) external onlyOwner {\n        delete generalSaleData[tokenId];\n        emit MintClosed(tokenId);\n    }\n\n    /**\n     * @dev Allows any user to buy a certain tokenId. This buy transaction is still limited by the\n     * wallet mint limit, token supply limit, and transaction limit set for the tokenId. These are\n     * all considered primary sales and will be split according to the withdrawal splits defined in the contract.\n     */\n    function mint(uint256 tokenId, uint256 buyAmount) external payable {\n        _verifyTokenMintLimit(tokenId, buyAmount);\n        if (block.timestamp < generalSaleData[tokenId].startTimestamp) revert MintNotActive();\n        if (block.timestamp > generalSaleData[tokenId].endTimestamp) revert MintNotActive();\n        if (\n            generalSaleData[tokenId].txLimit != 0 &&\n            buyAmount > generalSaleData[tokenId].txLimit\n        ) {\n            revert OverTransactionLimit();\n        }\n\n        if (msg.value != generalSaleData[tokenId].price * buyAmount) revert IncorrectMsgValue();\n        _mint(_msgSender(), tokenId, buyAmount, \"\");\n    }\n\n    // =============================================================\n    //                        Token Burning\n    // =============================================================\n\n    /**\n     * @dev Owner can allow or pause holders from burning tokens of a certain\n     * tokenId on without an intermediary contract.\n     */\n    function setBurnable(uint256 tokenId, bool burnable) external onlyOwner {\n        _setBurnable(tokenId, burnable);\n    }\n\n    /**\n     * @dev Allows token owners to burn tokens if self-burn is enabled for that token.\n     */\n    function burn(uint256 tokenId, uint256 amount) external {\n        if(!_isSelfBurnable(tokenId)) revert NotSelfBurnable();\n        _burn(msg.sender, tokenId, amount);\n    }\n\n    /**\n     * @dev Owner can allow for certain contract addresses to burn tokens for users.\n     * \n     * If this is an EOA, the approvedBurn transaction will revert.\n     */\n    function setApprovedBurner(\n        address burner, \n        uint256 tokenId, \n        bool approved\n    ) external onlyOwner {\n        approvedBurners[burner][tokenId] = approved;\n    }\n\n    /**\n     * @dev Allows token owners to burn their tokens through owner-approved burner contracts.\n     */\n    function approvedBurn(address spender, uint256 tokenId, uint256 amount) external {\n        if (!approvedBurners[msg.sender][tokenId]) revert SenderNotApprovedBurner();\n        if (tx.origin == msg.sender) revert NotContractAccount();\n        _burn(spender, tokenId, amount);\n    }\n\n    // =============================================================\n    //                        Miscellaneous\n    // =============================================================\n\n    /**\n     * @notice Allows owner to withdraw a specified amount of ETH to a specified address.\n     */\n    function withdraw(\n        address withdrawAddress,\n        uint256 amount\n    ) external onlyOwner {\n        unchecked {\n            if (amount > address(this).balance) {\n                amount = address(this).balance;\n            }\n        }\n\n        if (!_transferETH(withdrawAddress, amount)) revert WithdrawFailed();\n    }\n\n    /**\n     * @notice Internal function to transfer ETH to a specified address.\n     */\n    function _transferETH(address to, uint256 value) internal returns (bool) {\n        (bool success, ) = to.call{ value: value, gas: 30000 }(new bytes(0));\n        return success;\n    }\n    \n    error IncorrectMsgValue();\n    error InvalidSignature();\n    error InvalidSignatureBuyAmount();\n    error InvalidSignatureVersion();\n    error MintNotActive();\n    error NotContractAccount();\n    error NotSelfBurnable();\n    error OperatorNotAllowed();\n    error OverTransactionLimit();\n    error SenderNotApprovedBurner();\n    error SignatureAlreadyUsed();\n    error TierNotActive();\n    error WithdrawFailed();\n}"
6     },
7     "contracts/token/ERC1155/ERC1155.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * There are some modifications compared to the originial OpenZepplin implementation\n * that give the collection owner mint limits for their tokenIds. It also has been\n * adjusted to have a max supply of uint64 of any tokenId for gas optimization.\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is IERC1155 {\n    using Address for address;\n    using Strings for uint256;\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenAddressData {\n        // Limited to uint64 to save gas fees.\n        uint64 balance;\n        // Keeps track of mint count for a user of a tokenId.\n        uint64 numMinted;\n        // Keeps track of burn count for a user of a tokenId.\n        uint64 numBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenSupplyData {\n        // Keeps track of mint count of a tokenId.\n        uint64 numMinted;\n        // Keeps track of burn count of a tokenId.\n        uint64 numBurned;\n        // Keeps track of maximum supply of a tokenId.\n        uint64 tokenMintLimit;\n        // If the token is self-burnable or not\n        bool burnable;\n    }\n\n    // =============================================================\n    //                            Constants\n    // =============================================================\n\n    uint64 public MAX_TOKEN_SUPPLY = (1 << 64) - 1;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // Used to enable the uri method\n    mapping(uint256 => string) public tokenMetadata;\n\n    // Saves all the token mint/burn data and mint limitations.\n    mapping(uint256 => TokenSupplyData) private _tokenData;\n\n    // Mapping from token ID to account balances, mints, and burns\n    mapping(uint256 => mapping(address => TokenAddressData)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // =============================================================\n    //                            EVENTS\n    // =============================================================\n\n    event NewTokenAdded(\n        uint256 indexed tokenId,\n        uint256 tokenMintLimit,\n        string tokenURI\n    );\n    event TokenURIChanged(uint256 tokenId, string newTokenURI);\n    event TokenMintLimitChanged(uint256 tokenId, uint64 newMintLimit);\n    event NameChanged(string name);\n    event SymbolChanged(string symbol);\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor() {}\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0xd9b67a26 || // ERC165 interface ID for ERC1155.\n            interfaceId == 0x0e89341c; // ERC165 interface ID for ERC1155MetadatURI.\n    }\n\n    // =============================================================\n    //                    IERC1155MetadataURI\n    // =============================================================\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev updates the name of the collection\n     */\n    function _setName(string memory _newName) internal {\n        _name = _newName;\n        emit NameChanged(_newName);\n    }\n\n    /**\n     * @dev updates the symbol of the collection\n     */\n    function _setSymbol(string memory _newSymbol) internal {\n        _symbol = _newSymbol;\n        emit SymbolChanged(_newSymbol);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 tokenId) public view returns (string memory) {\n        if (!exists(tokenId)) revert NonExistentToken();\n        return tokenMetadata[tokenId];\n    }\n\n    /**\n     * @dev Allows the owner to change the metadata for a tokenId but NOT the mint limits.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must have already been added.\n     * - `metadata` must not be length 0.\n     */\n    function _updateMetadata(uint256 tokenId, string calldata metadata)\n        internal\n    {\n        if (!exists(tokenId)) revert NonExistentToken();\n        if (bytes(metadata).length == 0) revert InvalidMetadata();\n        tokenMetadata[tokenId] = metadata;\n\n        emit TokenURIChanged(tokenId, metadata);\n    }\n\n    // =============================================================\n    //                          IERC1155\n    // =============================================================\n\n    /**\n     * @dev Returns if a tokenId has been added to the collection yet.\n     */\n    function exists(uint256 tokenId) public view returns (bool) {\n        return bytes(tokenMetadata[tokenId]).length > 0;\n    }\n\n    /**\n     * @dev Allows the owner to add a tokenId to the collection with the specificed\n     * metadata and mint limits. MintLimit of 0 will be treated as uint64 max.\n     * \n     * NOTE: MINT LIMITS CANNOT BE INCREASED\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not have been added yet.\n     * - `metadata` must not be length 0.\n     *\n     * @param tokenId of the new addition to the colleciton\n     * @param tokenMintLimit the most amount of tokens that can ever be minted\n     * @param metadata for the new collection when calling uri\n     */\n    function _addTokenId(\n        uint256 tokenId,\n        uint64 tokenMintLimit,\n        string calldata metadata\n    ) internal {\n        if (exists(tokenId)) revert TokenAlreadyExists();\n        if (bytes(metadata).length == 0) revert InvalidMetadata();\n        tokenMetadata[tokenId] = metadata;\n        _tokenData[tokenId].tokenMintLimit = tokenMintLimit;\n        if (tokenMintLimit == 0) {\n            _tokenData[tokenId].tokenMintLimit = MAX_TOKEN_SUPPLY;\n        }\n        emit NewTokenAdded(tokenId, tokenMintLimit, metadata);\n    }\n\n    /**\n     * @dev Token supply can be set, but can ONLY BE LOWERED. Cannot be lower than the current supply.\n     */\n    function _setTokenMintLimit(\n        uint256 tokenId, \n        uint64 tokenMintLimit\n    ) internal {\n        if (_tokenData[tokenId].numMinted > tokenMintLimit) revert InvalidMintLimit();\n        if (tokenMintLimit == 0) revert InvalidMintLimit();\n        _tokenData[tokenId].tokenMintLimit = tokenMintLimit;\n        emit TokenMintLimitChanged(tokenId, tokenMintLimit);\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        if (account == address(0)) revert BalanceQueryForZeroAddress();\n        return _balances[id][account].balance;\n    }\n\n    /**\n     * @dev returns the total amount of tokens of a certain tokenId are in circulation.\n     */\n    function totalSupply(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (!exists(tokenId)) revert NonExistentToken();\n        return _tokenData[tokenId].numMinted - _tokenData[tokenId].numBurned;\n    }\n\n    /**\n     * @dev returns the total amount of tokens of a certain tokenId that were ever minted.\n     */\n    function totalMinted(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (!exists(tokenId)) revert NonExistentToken();\n        return _tokenData[tokenId].numMinted;\n    }\n\n    /**\n     * @dev returns the total amount of tokens of a certain tokenId that have gotten burned.\n     */\n    function totalBurned(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (!exists(tokenId)) revert NonExistentToken();\n        return _tokenData[tokenId].numBurned;\n    }\n\n    /**\n     * @dev Returns how much an address has minted of a certain id\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function totalMintedByAddress(address account, uint256 id)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (account == address(0)) revert BalanceQueryForZeroAddress();\n        return _balances[id][account].numMinted;\n    }\n\n    /**\n     * @dev Returns how much an address has minted of a certain id\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function totalBurnedByAddress(address account, uint256 id)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (account == address(0)) revert BalanceQueryForZeroAddress();\n        return _balances[id][account].numBurned;\n    }\n\n    /**\n     * @dev Returns how many tokens are still available to mint\n     *\n     * Requirements:\n     *\n     * - `tokenId` must already exist.\n     */\n    function remainingSupply(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        if (!exists(tokenId)) revert NonExistentToken();\n        return _remainingSupply(tokenId);\n    }\n\n    /**\n     * @dev Returns how many tokens are still available to mint\n     */\n    function _remainingSupply(uint256 tokenId)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            _tokenData[tokenId].tokenMintLimit - _tokenData[tokenId].numMinted;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        if (accounts.length != ids.length) revert ArrayLengthMismatch();\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSenderERC1155(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev Verifies if a certain tokenId can still mint `buyAmount` more tokens of a certain id.\n     */\n    function _verifyTokenMintLimit(uint256 tokenId, uint256 buyAmount)\n        internal\n        view\n    {\n        if (\n            _tokenData[tokenId].numMinted + buyAmount >\n            _tokenData[tokenId].tokenMintLimit\n        ) {\n            revert OverTokenLimit();\n        }\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        if (from != _msgSenderERC1155() && !isApprovedForAll(from, _msgSenderERC1155())) {\n            revert NotOwnerOrApproved();\n        }\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes memory data\n    ) public virtual override {\n        if (from != _msgSenderERC1155() && !isApprovedForAll(from, _msgSenderERC1155())) {\n            revert NotOwnerOrApproved();\n        }\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(\n            operator,\n            from,\n            to,\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            data\n        );\n\n        if (_balances[id][from].balance < amount) {\n            revert InsufficientTokenBalance();\n        }\n        // to balance can never overflow because there is a cap on minting\n        unchecked {\n            _balances[id][from].balance -= uint64(amount);\n            _balances[id][to].balance += uint64(amount);\n        }\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes memory data\n    ) internal virtual {\n        if (ids.length != amounts.length) revert ArrayLengthMismatch();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            if (_balances[id][from].balance < amount) {\n                revert InsufficientTokenBalance();\n            }\n            // to balance can never overflow because there is a cap on minting\n            unchecked {\n                _balances[id][from].balance -= uint64(amount);\n                _balances[id][to].balance += uint64(amount);\n                \n                ++i;\n            }\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(\n            operator,\n            from,\n            to,\n            ids,\n            amounts,\n            data\n        );\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * NOTE: In order to save gas fees when there are many transactions nearing the mint limit of a tokenId,\n     * we do NOT call `_verifyTokenMintLimit` and instead leave it to the external method to do this check.\n     * This allows the queued transactions that were too late to mint the token to error as cheaply as possible.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) revert MintToZeroAddress();\n        if (!exists(id)) revert NonExistentToken();\n\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(\n            operator,\n            address(0),\n            to,\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            data\n        );\n\n        unchecked {\n            _tokenData[id].numMinted += uint64(amount);\n            _balances[id][to].balance += uint64(amount);\n            _balances[id][to].numMinted += uint64(amount);\n        }\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(\n            operator,\n            address(0),\n            to,\n            id,\n            amount,\n            data\n        );\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) internal virtual {\n        if (to == address(0)) revert MintToZeroAddress();\n        if (ids.length != amounts.length) revert ArrayLengthMismatch();\n\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ) {\n            _verifyTokenMintLimit(ids[i], amounts[i]);\n            // The token mint limit verification prevents potential overflow/underflow\n            unchecked {\n                _tokenData[ids[i]].numMinted += uint64(amounts[i]);\n                _balances[ids[i]][to].balance += uint64(amounts[i]);\n                _balances[ids[i]][to].numMinted += uint64(amounts[i]);\n                \n                ++i;\n            }\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(\n            operator,\n            address(0),\n            to,\n            ids,\n            amounts,\n            data\n        );\n    }\n\n    /**\n     * @dev Allow or stop holders from self-burning tokens of a certain tokenId.\n     */\n    function _setBurnable(uint256 tokenId, bool burnable) internal {\n        _tokenData[tokenId].burnable = burnable;\n    }\n\n    /**\n     * @dev returns if a tokenId is self-burnable.\n     */\n    function _isSelfBurnable(uint256 tokenId) internal view returns (bool) {\n        return _tokenData[tokenId].burnable;\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from` \n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        if (from == address(0)) revert BurnFromZeroAddress();\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(\n            operator,\n            from,\n            address(0),\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            \"\"\n        );\n\n        uint256 fromBalance = _balances[id][from].balance;\n        if (fromBalance < amount) revert InsufficientTokenBalance();\n        unchecked {\n            _balances[id][from].numBurned += uint64(amount);\n            _balances[id][from].balance = uint64(fromBalance - amount);\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) internal virtual {\n        if (from == address(0)) revert BurnFromZeroAddress();\n        if (ids.length != amounts.length) revert ArrayLengthMismatch();\n\n        address operator = _msgSenderERC1155();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; ) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from].balance;\n            if (fromBalance < amount) revert InsufficientTokenBalance();\n            unchecked {\n                _balances[id][from].numBurned += uint64(amount);\n                _balances[id][from].balance = uint64(fromBalance - amount);\n\n                ++i;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        _beforeApproval(operator);\n        if (owner == operator) revert ApprovalToCurrentOwner();\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n\n    /**\n     * @dev Hook that is called before any approval for a token or wallet\n     *      \n     * `approvedAddr` - the address a wallet is trying to grant approval to.\n     */\n    function _beforeApproval(address approvedAddr) internal virtual {}\n    \n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert TransferToNonERC721ReceiverImplementer();\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155BatchReceived(\n                    operator,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\n                ) {\n                    revert TransferToNonERC721ReceiverImplementer();\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n        }\n    }\n\n    /**\n     * @dev helper method to turn a uint256 variable into a 1-length array we can pass into uint256[] variables\n     */\n    function _asSingletonArray(uint256 element)\n        private\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC1155() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    error ApprovalToCurrentOwner();\n    error ArrayLengthMismatch();\n    error BalanceQueryForZeroAddress();\n    error BurnFromZeroAddress();\n    error InsufficientTokenBalance();\n    error InvalidMetadata();\n    error InvalidMintLimit();\n    error MintToZeroAddress();\n    error NonExistentToken();\n    error NotOwnerOrApproved();\n    error OverTokenLimit();\n    error TokenAlreadyExists();\n    error TransferToNonERC721ReceiverImplementer();\n    error TransferToZeroAddress();\n}\n"
9     },
10     "contracts/token/ERC1155/IERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(\n        address indexed account,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
12     },
13     "contracts/token/ERC1155/IERC1155MetadataURI.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
15     },
16     "contracts/token/ERC1155/IERC1155Receiver.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
18     },
19     "contracts/utils/Address.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
21     },
22     "contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "contracts/utils/ECDSA.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}"
27     },
28     "contracts/utils/ERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
30     },
31     "contracts/utils/ERC2981.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}"
33     },
34     "contracts/utils/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "contracts/utils/IERC2981.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * ERC165 bytes to add to interface array - set in parent contract\n     * implementing this standard\n     *\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n     * _registerInterface(_INTERFACE_ID_ERC2981);\n     */\n\n    /**\n     * @notice Called with the sale price to determine how much royalty\n     *          is owed and to whom.\n     * @param _tokenId - the NFT asset queried for royalty information\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\n     * @return receiver - address of who should be sent the royalty payment\n     * @return royaltyAmount - the royalty payment amount for _salePrice\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
39     },
40     "contracts/utils/Ownable.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\nerror CallerNotOwner();\nerror OwnerNotZero();\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address internal _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) revert CallerNotOwner();\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert OwnerNotZero();\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
42     },
43     "contracts/utils/Strings.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
45     }
46   },
47   "settings": {
48     "optimizer": {
49       "enabled": true,
50       "runs": 1000
51     },
52     "outputSelection": {
53       "*": {
54         "*": [
55           "evm.bytecode",
56           "evm.deployedBytecode",
57           "devdoc",
58           "userdoc",
59           "metadata",
60           "abi"
61         ]
62       }
63     },
64     "libraries": {}
65   }
66 }}