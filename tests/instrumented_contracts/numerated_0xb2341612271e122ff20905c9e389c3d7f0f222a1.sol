1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/NounSettlement.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title FOMO Nouns Settlement Contract\n/// @author forager\n\npragma solidity 0.8.9;\n\nimport { INounsAuctionHouse } from './interfaces/INounsAuctionHouse.sol';\n\n\ncontract NounSettlement {\n  address payable public fomoExecutor;\n  address payable public immutable nounsDaoTreasury;\n  address public immutable fomoMultisig;\n  INounsAuctionHouse public immutable auctionHouse;\n\n  uint256 public maxPriorityFee = 40 * 10**9; // Prevents malicious actor burning all the ETH on gas\n  uint256 private immutable OVERHEAD_GAS = 21000; // Handles gas outside gasleft checks, rounded up from ~20,254 in testing\n\n\n  constructor(address _fomoExecutor, address _nounsDaoTreasury, address _nounsAuctionHouseAddress, address _fomoMultisig) {\n    fomoExecutor = payable(_fomoExecutor);\n    nounsDaoTreasury = payable(_nounsDaoTreasury);\n    fomoMultisig = _fomoMultisig;\n    auctionHouse = INounsAuctionHouse(_nounsAuctionHouseAddress);\n  }\n\n\n  /**\n    Events for key actions or parameter updates\n   */\n\n  /// @notice Contract funds withdrawn to the Nouns Treasury\n  event FundsPulled(address _to, uint256 _amount);\n\n  /// @notice FOMO Executor EOA moved to a new address\n  event ExecutorChanged(address _newExecutor);\n\n  /// @notice Maximum priority fee for refunds updated\n  event MaxPriorityFeeChanged(uint256 _newMaxPriorityFee);\n\n\n  /**\n    Custom modifiers to handle access and refund\n   */\n  modifier onlyMultisig() {\n    require(msg.sender == fomoMultisig, \"Only callable by FOMO Multsig\");\n    _;\n  }\n\n  modifier onlyFOMO() {\n    require(msg.sender == fomoExecutor, \"Only callable by FOMO Nouns executor\");\n    _;\n  }\n\n  modifier refundGas() { // Executor must be EOA\n    uint256 startGas = gasleft();\n    require(tx.gasprice <= block.basefee + maxPriorityFee, \"Gas price above current reasonable limit\");\n    _;\n    uint256 endGas = gasleft();\n\n    uint256 totalGasCost = tx.gasprice * (startGas - endGas + OVERHEAD_GAS);\n    fomoExecutor.transfer(totalGasCost);\n  }\n\n\n  /**\n    Fund management to allow donations and liquidation\n   */\n\n  /// @notice Donate funds to cover auction settlement gas fees\n  function donateFunds() external payable { }\n  receive() external payable { }\n  fallback() external payable { }\n\n  /// @notice Pull all funds from contract into the Nouns DAO Treasury\n  function pullFunds() external onlyMultisig {\n    uint256 balance = address(this).balance;\n    (bool sent, ) = nounsDaoTreasury.call{value: balance}(\"\");\n    require(sent, \"Funds removal failed.\");\n    emit FundsPulled(nounsDaoTreasury, balance);\n  }\n\n\n  /**\n    Change addresses or limits for the contract execution\n   */\n  \n  /// @notice Change address for the FOMO Executor EOA that can request gas refunds\n  function changeExecutorAddress(address _newFomoExecutor) external onlyMultisig {\n    fomoExecutor = payable(_newFomoExecutor);\n    emit ExecutorChanged(fomoExecutor);\n  }\n\n  /// @notice Update the maximum allowed priority fee (in wei) for refunds\n  function changeMaxPriorityFee(uint256 _newMaxPriorityFee) external onlyMultisig {\n    maxPriorityFee = _newMaxPriorityFee;\n    emit MaxPriorityFeeChanged(maxPriorityFee);\n  }\n\n\n  /**\n    Settle the Auction & Mint the Desired Nouns\n   */\n\n  /// @notice Settle auction ensuring desired hash is used to generate the new Noun\n  function settleAuction(bytes32 _desiredHash) public {\n    bytes32 lastHash = blockhash(block.number - 1); // Only settle if desired Noun would be minted\n    require(lastHash == _desiredHash, \"Prior blockhash did not match intended hash\");\n    \n    auctionHouse.settleCurrentAndCreateNewAuction();\n  }\n\n  /// @notice Settle auction, as with settleAuction, AND refund gas to caller\n  function settleAuctionWithRefund(bytes32 _desiredHash) external refundGas onlyFOMO {\n    settleAuction(_desiredHash);\n  }\n}"
6     },
7     "contracts/interfaces/INounsAuctionHouse.sol": {
8       "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title Interface for Noun Auction Houses\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\ninterface INounsAuctionHouse {\n    struct Auction {\n        // ID for the Noun (ERC721 token ID)\n        uint256 nounId;\n        // The current highest bid amount\n        uint256 amount;\n        // The time that the auction started\n        uint256 startTime;\n        // The time that the auction is scheduled to end\n        uint256 endTime;\n        // The address of the current highest bid\n        address payable bidder;\n        // Whether or not the auction has been settled\n        bool settled;\n    }\n\n    event AuctionCreated(uint256 indexed nounId, uint256 startTime, uint256 endTime);\n\n    event AuctionBid(uint256 indexed nounId, address sender, uint256 value, bool extended);\n\n    event AuctionExtended(uint256 indexed nounId, uint256 endTime);\n\n    event AuctionSettled(uint256 indexed nounId, address winner, uint256 amount);\n\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\n\n    event AuctionReservePriceUpdated(uint256 reservePrice);\n\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\n\n    function settleAuction() external;\n\n    function settleCurrentAndCreateNewAuction() external;\n\n    function createBid(uint256 nounId) external payable;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function setTimeBuffer(uint256 timeBuffer) external;\n\n    function setReservePrice(uint256 reservePrice) external;\n\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\n}\n"
9     }
10   },
11   "settings": {
12     "optimizer": {
13       "enabled": false,
14       "runs": 200
15     },
16     "outputSelection": {
17       "*": {
18         "*": [
19           "evm.bytecode",
20           "evm.deployedBytecode",
21           "devdoc",
22           "userdoc",
23           "metadata",
24           "abi"
25         ]
26       }
27     },
28     "libraries": {}
29   }
30 }}