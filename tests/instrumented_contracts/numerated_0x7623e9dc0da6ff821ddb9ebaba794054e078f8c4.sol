1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
21     },
22     "src/EarlyAdopterPool.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract EarlyAdopterPool is Ownable, ReentrancyGuard, Pausable {\n    using Math for uint256;\n\n    struct UserDepositInfo {\n        uint256 depositTime;\n        uint256 etherBalance;\n        uint256 totalERC20Balance;\n    }\n\n    //--------------------------------------------------------------------------------------\n    //---------------------------------  STATE-VARIABLES  ----------------------------------\n    //--------------------------------------------------------------------------------------\n\n    //After a certain time, claiming funds is not allowed and users will need to simply withdraw\n    uint256 public claimDeadline;\n\n    //Time when depositing closed and will be used for calculating reards\n    uint256 public endTime;\n\n    address private immutable rETH; // 0xae78736Cd615f374D3085123A210448E74Fc6393;\n    address private immutable wstETH; // 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address private immutable sfrxETH; // 0xac3e018457b222d93114458476f3e3416abbe38f;\n    address private immutable cbETH; // 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704;\n\n    //Future contract which funds will be sent to on claim (Most likely LP)\n    address public claimReceiverContract;\n\n    //Status of claims, 1 means claiming is open\n    uint8 public claimingOpen;\n\n    //user address => token address = balance\n    mapping(address => mapping(address => uint256)) public userToErc20Balance;\n    mapping(address => UserDepositInfo) public depositInfo;\n\n    IERC20 rETHInstance;\n    IERC20 wstETHInstance;\n    IERC20 sfrxETHInstance;\n    IERC20 cbETHInstance;\n\n    //--------------------------------------------------------------------------------------\n    //-------------------------------------  EVENTS  ---------------------------------------\n    //--------------------------------------------------------------------------------------\n\n    event DepositERC20(address indexed sender, uint256 amount);\n    event DepositEth(address indexed sender, uint256 amount);\n    event Withdrawn(address indexed sender);\n    event ClaimReceiverContractSet(address indexed receiverAddress);\n    event ClaimingOpened(uint256 deadline);\n    event Fundsclaimed(\n        address indexed user,\n        uint256 indexed pointsAccumulated\n    );\n    event ERC20TVLUpdated(\n        uint256 rETHBal,\n        uint256 wstETHBal,\n        uint256 sfrxETHBal,\n        uint256 cbETHBal,\n        uint256 ETHBal,\n        uint256 tvl\n    );\n\n    event EthTVLUpdated(uint256 ETHBal, uint256 tvl);\n\n    /// @notice Allows ether to be sent to this contract\n    receive() external payable {}\n\n    //--------------------------------------------------------------------------------------\n    //----------------------------------  CONSTRUCTOR   ------------------------------------\n    //--------------------------------------------------------------------------------------\n\n    /// @notice Sets state variables needed for future functions\n    /// @param _rETH address of the rEth contract to receive\n    /// @param _wstETH address of the wstEth contract to receive\n    /// @param _sfrxETH address of the sfrxEth contract to receive\n    /// @param _cbETH address of the _cbEth contract to receive\n    constructor(\n        address _rETH,\n        address _wstETH,\n        address _sfrxETH,\n        address _cbETH\n    ) {\n        rETH = _rETH;\n        wstETH = _wstETH;\n        sfrxETH = _sfrxETH;\n        cbETH = _cbETH;\n\n        rETHInstance = IERC20(_rETH);\n        wstETHInstance = IERC20(_wstETH);\n        sfrxETHInstance = IERC20(_sfrxETH);\n        cbETHInstance = IERC20(_cbETH);\n    }\n\n    //--------------------------------------------------------------------------------------\n    //----------------------------  STATE-CHANGING FUNCTIONS  ------------------------------\n    //--------------------------------------------------------------------------------------\n\n    /// @notice deposits ERC20 tokens into contract\n    /// @dev User must have approved contract before\n    /// @param _erc20Contract erc20 token contract being deposited\n    /// @param _amount amount of the erc20 token being deposited\n    function deposit(address _erc20Contract, uint256 _amount)\n        external\n        OnlyCorrectAmount(_amount)\n        DepositingOpen\n        whenNotPaused\n    {\n        require(\n            (_erc20Contract == rETH ||\n                _erc20Contract == sfrxETH ||\n                _erc20Contract == wstETH ||\n                _erc20Contract == cbETH),\n            \"Unsupported token\"\n        );\n\n        depositInfo[msg.sender].depositTime = block.timestamp;\n        depositInfo[msg.sender].totalERC20Balance += _amount;\n        userToErc20Balance[msg.sender][_erc20Contract] += _amount;\n        require(IERC20(_erc20Contract).transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\n\n        emit DepositERC20(msg.sender, _amount);\n        emit ERC20TVLUpdated(\n            rETHInstance.balanceOf(address(this)),\n            wstETHInstance.balanceOf(address(this)),\n            sfrxETHInstance.balanceOf(address(this)),\n            cbETHInstance.balanceOf(address(this)),\n            address(this).balance,\n            getContractTVL()\n        );\n    }\n\n    /// @notice deposits Ether into contract\n    function depositEther()\n        external\n        payable\n        OnlyCorrectAmount(msg.value)\n        DepositingOpen\n        whenNotPaused\n    {\n        depositInfo[msg.sender].depositTime = block.timestamp;\n        depositInfo[msg.sender].etherBalance += msg.value;\n\n        emit DepositEth(msg.sender, msg.value);\n        emit EthTVLUpdated(address(this).balance, getContractTVL());\n    }\n\n    /// @notice withdraws all funds from pool for the user calling\n    /// @dev no points allocated to users who withdraw\n    function withdraw() public nonReentrant {\n        require(depositInfo[msg.sender].depositTime != 0, \"No deposit stored\");\n        transferFunds(0);\n        emit Withdrawn(msg.sender);\n    }\n\n    /// @notice Transfers users funds to a new contract such as LP\n    /// @dev can only call once receiver contract is ready and claiming is open\n    function claim() public nonReentrant {\n        require(claimingOpen == 1, \"Claiming not open\");\n        require(\n            claimReceiverContract != address(0),\n            \"Claiming address not set\"\n        );\n        require(block.timestamp <= claimDeadline, \"Claiming is complete\");\n        require(depositInfo[msg.sender].depositTime != 0, \"No deposit stored\");\n\n        uint256 pointsRewarded = calculateUserPoints(msg.sender);\n        transferFunds(1);\n\n        emit Fundsclaimed(msg.sender, pointsRewarded);\n    }\n\n    /// @notice Sets claiming to be open, to allow users to claim their points\n    /// @param _claimDeadline the amount of time in days until claiming will close\n    function setClaimingOpen(uint256 _claimDeadline) public onlyOwner {        \n        claimDeadline = block.timestamp + (_claimDeadline * 86400);\n        claimingOpen = 1;\n        endTime = block.timestamp;\n\n        emit ClaimingOpened(claimDeadline);\n    }\n\n    /// @notice Set the contract which will receive claimed funds\n    /// @param _receiverContract contract address for where claiming will send the funds\n    function setClaimReceiverContract(address _receiverContract)\n        public\n        onlyOwner\n    {\n        require(_receiverContract != address(0), \"Cannot set as address zero\");\n        claimReceiverContract = _receiverContract;\n\n        emit ClaimReceiverContractSet(_receiverContract);\n    }\n\n    /// @notice Calculates how many points a user currently has owed to them\n    /// @return the amount of points a user currently has accumulated\n    function calculateUserPoints(address _user) public view returns (uint256) {\n        uint256 lengthOfDeposit;\n\n        if (claimingOpen == 0) {\n            lengthOfDeposit = block.timestamp - depositInfo[_user].depositTime;\n        } else {\n            lengthOfDeposit = endTime - depositInfo[_user].depositTime;\n        }\n\n        //Scaled by 1000, therefore, 1005 would be 1.005\n        uint256 userMultiplier = Math.min(\n            2000,\n            1000 + ((lengthOfDeposit * 10) / 2592) / 10\n        );\n        uint256 totalUserBalance = depositInfo[_user].etherBalance +\n            depositInfo[_user].totalERC20Balance;\n\n        //Formula for calculating points total\n        return\n            ((Math.sqrt(totalUserBalance) * lengthOfDeposit) *\n                userMultiplier) / 1e14;\n    }\n\n    //Pauses the contract\n    function pauseContract() external onlyOwner {\n        _pause();\n    }\n\n    //Unpauses the contract\n    function unPauseContract() external onlyOwner {\n        _unpause();\n    }\n\n    //--------------------------------------------------------------------------------------\n    //--------------------------------  INTERNAL FUNCTIONS  --------------------------------\n    //--------------------------------------------------------------------------------------\n\n    /// @notice Transfers funds to relevant parties and updates data structures\n    /// @param _identifier identifies which contract function called the function\n    function transferFunds(uint256 _identifier) internal {\n        uint256 rETHbal = userToErc20Balance[msg.sender][rETH];\n        uint256 wstETHbal = userToErc20Balance[msg.sender][wstETH];\n        uint256 sfrxEthbal = userToErc20Balance[msg.sender][sfrxETH];\n        uint256 cbEthBal = userToErc20Balance[msg.sender][cbETH];\n\n        uint256 ethBalance = depositInfo[msg.sender].etherBalance;\n\n        depositInfo[msg.sender].depositTime = 0;\n        depositInfo[msg.sender].totalERC20Balance = 0;\n        depositInfo[msg.sender].etherBalance = 0;\n\n        userToErc20Balance[msg.sender][rETH] = 0;\n        userToErc20Balance[msg.sender][wstETH] = 0;\n        userToErc20Balance[msg.sender][sfrxETH] = 0;\n        userToErc20Balance[msg.sender][cbETH] = 0;\n\n        address receiver;\n\n        if (_identifier == 0) {\n            receiver = msg.sender;\n        } else {\n            receiver = claimReceiverContract;\n        }\n\n        require(rETHInstance.transfer(receiver, rETHbal), \"Transfer failed\");\n        require(wstETHInstance.transfer(receiver, wstETHbal), \"Transfer failed\");\n        require(sfrxETHInstance.transfer(receiver, sfrxEthbal), \"Transfer failed\");\n        require(cbETHInstance.transfer(receiver, cbEthBal), \"Transfer failed\");\n\n        (bool sent, ) = receiver.call{value: ethBalance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    //--------------------------------------------------------------------------------------\n    //-------------------------------------     GETTERS  ------------------------------------\n    //--------------------------------------------------------------------------------------\n\n    /// @dev Returns the total value locked of all currencies in contract\n    function getContractTVL() public view returns (uint256 tvl) {\n        tvl = (rETHInstance.balanceOf(address(this)) +\n            wstETHInstance.balanceOf(address(this)) +\n            sfrxETHInstance.balanceOf(address(this)) +\n            cbETHInstance.balanceOf(address(this)) +\n            address(this).balance);\n    }\n\n    function getUserTVL(address _user)\n        public\n        view\n        returns (\n            uint256 rETHBal,\n            uint256 wstETHBal,\n            uint256 sfrxETHBal,\n            uint256 cbETHBal,\n            uint256 ethBal,\n            uint256 totalBal\n        )\n    {\n        rETHBal = userToErc20Balance[_user][rETH];\n        wstETHBal = userToErc20Balance[_user][wstETH];\n        sfrxETHBal = userToErc20Balance[_user][sfrxETH];\n        cbETHBal = userToErc20Balance[_user][cbETH];\n        ethBal = depositInfo[_user].etherBalance;\n        totalBal = (rETHBal + wstETHBal + sfrxETHBal + cbETHBal + ethBal);\n    }\n\n    //--------------------------------------------------------------------------------------\n    //-------------------------------------  MODIFIERS  ------------------------------------\n    //--------------------------------------------------------------------------------------\n\n    modifier OnlyCorrectAmount(uint256 _amount) {\n        require(\n            _amount >= 0.1 ether && _amount <= 100 ether,\n            \"Incorrect Deposit Amount\"\n        );\n        _;\n    }\n\n    modifier DepositingOpen() {\n        require(claimingOpen == 0, \"Depositing closed\");\n        _;\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "remappings": [
28       "@openzeppelin/=lib/openzeppelin-contracts/",
29       "ds-test/=lib/forge-std/lib/ds-test/src/",
30       "forge-std/=lib/forge-std/src/",
31       "murky/=lib/murky/src/",
32       "openzeppelin-contracts/=lib/openzeppelin-contracts/"
33     ],
34     "optimizer": {
35       "enabled": true,
36       "runs": 200
37     },
38     "metadata": {
39       "bytecodeHash": "ipfs"
40     },
41     "outputSelection": {
42       "*": {
43         "*": [
44           "evm.bytecode",
45           "evm.deployedBytecode",
46           "devdoc",
47           "userdoc",
48           "metadata",
49           "abi"
50         ]
51       }
52     },
53     "evmVersion": "london",
54     "libraries": {}
55   }
56 }}