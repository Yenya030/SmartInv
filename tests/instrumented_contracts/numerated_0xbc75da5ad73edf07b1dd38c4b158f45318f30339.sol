1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
9     },
10     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
27     },
28     "@openzeppelin/contracts/token/common/ERC2981.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Strings.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
45     },
46     "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
48     },
49     "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
51     },
52     "operator-filter-registry/src/OperatorFilterer.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
54     },
55     "operator-filter-registry/src/lib/Constants.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
57     },
58     "project:/contracts/interfaces/IRights.sol": {
59       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\n\ninterface IRights {\n    event AdminAdded(address indexed admin);\n    event AdminDefined(address indexed admin, address indexed contractHash);\n    event AdminRemoved(address indexed admin);\n    event AdminCleared(address indexed admin, address indexed contractHash);\n\n    /**\n@notice Add a new admin for the Rigths contract\n@param admin_ New admin address\n*/\n\n    function addAdmin(address admin_) external;\n\n    /**\n@notice Add a new admin for the any other contract\n@param contract_ Contract address packed into address\n@param admin_ New admin address\n*/\n\n    function addAdmin(address contract_, address admin_) external;\n\n    /**\n@notice Remove the existing admin from the Rigths contract\n@param admin_ Admin address\n*/\n\n    function removeAdmin(address admin_) external;\n\n    /**\n@notice Add a new admin for the any other contract\n@param contract_ Contract address packed into address\n@param admin_ New admin address\n*/\n\n    function removeAdmin(address contract_, address admin_) external;\n\n    /**\n@notice Get the rights for the contract for the caller\n@param contract_ Contract address packed into address\n@return have rights or not\n*/\n    function haveRights(address contract_) external view returns (bool);\n\n    /**\n@notice Get the rights for the contract\n@param contract_ Contract address packed into address\n@param admin_ Admin address\n@return have rights or not\n*/\n    function haveRights(address contract_, address admin_)\n        external\n        view\n        returns (bool);\n}\n"
60     },
61     "project:/contracts/lib/Structures.sol": {
62       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\npragma solidity 0.8.17;\n\n/**\n * @dev Collection of structures\n */\nlibrary Structures {\n    struct ActorData {\n        uint256 adultTime;\n        uint256 bornTime;\n        string kidTokenUriHash;\n        string adultTokenUriHash;\n        uint16[10] props;\n        uint8 childs;\n        uint8 childsPossible;\n        bool sex;\n        bool born;\n        bool immaculate;\n        uint16 rank;\n        address initialOwner;\n    }\n\n    struct Item {\n        uint256 class;\n        uint256 model;\n        uint256 location;\n        uint8 slots;\n        uint16[10] props;\n        string uri;\n    }\n\n    struct ItemType {\n        uint256 class;\n        uint256 model;\n        string uri;\n    }\n\n    struct LootBox {\n        uint256 price;\n        uint16 total;\n        uint16 available;\n        bool paused;\n        bool deleted;\n        string uri;\n        LootBoxItem[] items;\n    }\n\n    struct LootBoxItem {\n        uint256 class;\n        uint256 model;\n        uint8 slots;\n        uint16 promilles;\n        uint16[10] props;\n    }\n\n    struct Estate {\n        address lender;\n        uint256 location;\n        uint8 estateType;\n        uint256 parent;\n        uint256 coordinates;\n    }\n\n    struct Villa {\n        uint256 location;\n        uint256 fraction;\n    }\n\n    struct ManageAction {\n        address target;\n        address author;\n        uint256 expiration;\n        bytes4 signature;\n        bytes data;\n        bool executed;\n    }\n\n    struct InvestorData {\n        address investor;\n        uint256 promille;\n    }\n\n    struct Benefit {\n        uint256 price;\n        uint256 from;\n        uint256 until;\n        uint16 id;\n        uint16 amount;\n        uint8 level;\n        uint8 issued;\n    }\n}\n"
63     },
64     "project:/contracts/persons/MysteryBox.sol": {
65       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./interfaces/IPotions.sol\";\nimport \"./interfaces/IBenefits.sol\";\nimport \"./interfaces/IMysteryBox.sol\";\nimport \"../utils/Claimable.sol\";\nimport \"../utils/EIP2981.sol\";\nimport \"../utils/GuardExtension.sol\";\nimport {\n    OperatorFiltererERC721,\n    ERC721\n} from \"../utils/OperatorFiltererERC721.sol\";\n\ncontract MysteryBox is\n    GuardExtension,\n    OperatorFiltererERC721,\n    EIP2981,\n    Claimable,\n    IMysteryBox\n{\n    using Address for address;\n    using Address for address payable;\n    using Strings for uint256;\n    uint256 private _tokenIds;\n    uint256 private _total;\n    uint256 private _commonLimit;\n    uint256 private _rareLimit;\n    uint256 private _commonPrice;\n    uint256 private _rarePrice;\n    uint256 private _rarePriceIncrease;\n    mapping(address => uint256) private _commonIssued;\n    mapping(address => uint256) private _rareIssued;\n    IPotions private _potion;\n    IBenefits private _benefits;\n    mapping(address => uint256) private _commonLimits;\n    mapping(address => uint256) private _rareLimits;\n    mapping(uint256 => bool) private _rare;\n    string private constant INCORRECT_PRICE = \"MysteryBox: incorrect price\";\n    string private constant SOLD_OUT = \"MysteryBox: sold out\";\n    string private constant NO_MORE_RARE =\n        \"MysteryBox: no more rare tokens allowed for user\";\n    string private constant NO_MORE_COMMON =\n        \"MysteryBox: no more common tokens allowed for user\";\n    string private constant SOLD_OUT_RARE = \"MysteryBox: sold out rare tokens\";\n    string private constant SOLD_OUT_COMMON =\n        \"MysteryBox: sold out common tokens\";\n    string private constant WRONG_OWNER = \"MysteryBox: wrong owner\";\n    string private constant WRONG_ID = \"MysteryBox: wrong id\";\n    string private constant SAME_VALUE = \"MysteryBox: same value\";\n    string private constant ZERO_ADDRESS = \"MysteryBox: zero address\";\n    string private constant BASE_META_HASH =\n        \"ipfs://QmVUH44vewH4iF93gSMez3qB4dUxc7DowXPztiG3uRXFWS/\";\n\n    /// @notice validate the id\n    modifier correctId(uint256 id_) {\n        require(_exists(id_), WRONG_ID);\n        _;\n    }\n\n    /**\n@notice Constructor\n@param name_ The name\n@param symbol_ The symbol\n@param rights_ The rights address\n@param potion_ The potion address\n@param benefits_ The benefits address\n@param commonLimit_ The maximum number of the common potions saled for one account\n@param rareLimit_ The maximum number of the rare potions saled for one account\n@param commonPrice_ The price of the common potion\n@param rarePrice_ The price of the rare potion\n@param rarePriceIncrease_ The increase of the price for each bought rare box\n*/\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address rights_,\n        address potion_,\n        address benefits_,\n        uint256 commonLimit_,\n        uint256 rareLimit_,\n        uint256 commonPrice_,\n        uint256 rarePrice_,\n        uint256 rarePriceIncrease_\n    ) Guard() ERC721(name_, symbol_) GuardExtension(rights_) {\n        require(potion_ != address(0), ZERO_ADDRESS);\n        require(benefits_ != address(0), ZERO_ADDRESS);\n\n        _commonLimit = commonLimit_;\n        _rareLimit = rareLimit_;\n        _commonPrice = commonPrice_;\n        _rarePrice = rarePrice_;\n        _rarePriceIncrease = rarePriceIncrease_;\n        _potion = IPotions(potion_);\n        _benefits = IBenefits(benefits_);\n        emit CommonLimitDefined(_commonLimit);\n        emit CommonPriceDefined(_commonPrice);\n        emit RareLimitDefined(_rareLimit);\n        emit RarePriceDefined(_rarePrice);\n        emit RarePriceIncreaseDefined(_rarePriceIncrease);\n    }\n\n    /**\n@notice Get a total amount of issued tokens\n@return The number of tokens minted\n*/\n    function total() external view override returns (uint256) {\n        return _total;\n    }\n\n    /**\n@notice Set the maximum amount of the common potions saled for one account\n@param value_ New amount\n*/\n    function setCommonLimit(uint256 value_) external override haveRights {\n        _commonLimit = value_;\n        emit CommonLimitDefined(value_);\n    }\n\n    /**\n@notice Set the price of the common potions for the account\n@param value_ New price\n*/\n    function setCommonPrice(uint256 value_) external override haveRights {\n        _commonPrice = value_;\n        emit CommonPriceDefined(value_);\n    }\n\n    /**\n@notice Set new address of Potion contract\n@param value_ New address value\n*/\n    function setPotion(address value_) external haveRights {\n        require(address(_potion) != value_, SAME_VALUE);\n        require(value_ != address(0), ZERO_ADDRESS);\n        _potion = IPotions(value_);\n    }\n\n    /**\n@notice Set new address of Benefits contract\n@param value_ New address value\n*/\n    function setBenefits(address value_) external haveRights {\n        require(address(_benefits) != value_, SAME_VALUE);\n        require(value_ != address(0), ZERO_ADDRESS);\n        _benefits = IBenefits(value_);\n    }\n\n    /**\n@notice Set the maximum amount of the rare potions saled for one account\n@param value_ New amount\n*/\n    function setRareLimit(uint256 value_) external override haveRights {\n        _rareLimit = value_;\n        emit RareLimitDefined(value_);\n    }\n\n    /**\n@notice Set the maximum amount of the common potions saled for one account\n@param value_ New amount\n*/\n    function setRarePrice(uint256 value_) external override haveRights {\n        _rarePrice = value_;\n        emit RarePriceDefined(value_);\n    }\n\n    /**\n@notice Set the increase of the rare price\n@param value_ New amount\n*/\n    function setRarePriceIncrease(uint256 value_) external override haveRights {\n        _rarePriceIncrease = value_;\n        emit RarePriceIncreaseDefined(_rarePriceIncrease);\n    }\n\n    /**\n@notice Get the current rare price\n@return Current rare price level\n*/\n    function getRarePrice() external view override returns (uint256) {\n        return _rarePrice;\n    }\n\n    /**\n@notice Get the amount of the tokens account can buy\n@return The two uint's - amount of the common potions and amount of the rare potions\n*/\n\n    function getIssued(address account_)\n        external\n        view\n        override\n        returns (uint256, uint256)\n    {\n        return (_commonIssued[account_], _rareIssued[account_]);\n    }\n\n    /**\n@notice Create the packed id with rare or not (admin only)\n@param target_ The box owner\n@param rare_ The rarity flag\n@return The new box id\n*/\n    function create(address target_, bool rare_)\n        external\n        override\n        haveRights\n        returns (uint256)\n    {\n        return _create(target_, rare_ ? 1 : 0);\n    }\n\n    function _create(address account_, uint8 level_) private returns (uint256) {\n        return _create(account_, level_, account_, 0, false, 0);\n    }\n\n    /**\n    @notice Get the rarity of the box\n    @param tokenId_ The id of the token\n    @return The rarity flag\n    */\n    function rarity(uint256 tokenId_)\n        external\n        view\n        override\n        correctId(tokenId_)\n        returns (bool)\n    {\n        return _rare[tokenId_];\n    }\n\n    /**\n@notice Deposit the funds (payable function)\n*/\n    function deposit() external payable override haveRights {}\n\n    /**\n@notice Receive the funds and give the box with rarity according to the amount of funds transferred\nLook the event to get the ID (receive functions cannot return values)\n*/\n    receive() external payable {\n        (\n            address target,\n            uint256 benId,\n            uint256 price,\n            uint16 tokenId,\n            uint8 level,\n            bool isBenFound\n        ) = _benefits.get(msg.sender, 0, msg.value);\n\n        // found benefit with custom price\n        if (price > 0) {\n            require(price == msg.value, INCORRECT_PRICE);\n            if (target == address(0) && level == 0) {\n                require(_commonLimit > _commonIssued[msg.sender], NO_MORE_COMMON);\n            }\n            // here the first reserved item must be\n            _create(msg.sender, level, target, benId, isBenFound, tokenId);\n            return;\n        }\n        require(\n            _rarePrice == msg.value || _commonPrice == msg.value,\n            INCORRECT_PRICE\n        );\n\n        if (isBenFound) {\n            if (level > 0) {\n                require(_rarePrice == msg.value, INCORRECT_PRICE);\n                _create(msg.sender, level, target, benId, isBenFound, tokenId);\n            } else {\n                require(_commonPrice == msg.value, INCORRECT_PRICE);\n                _create(\n                    msg.sender,\n                    level,\n                    target,\n                    benId,\n                    isBenFound,\n                    tokenId == 0 ? _tokenIds : tokenId\n                );\n            }\n            return;\n        }\n\n        // nothing found, let's check ordinary\n        if (_rarePrice == msg.value) {\n            _create(msg.sender, level, target, benId, false, tokenId);\n        } else {\n            require(_commonLimit > _commonIssued[msg.sender], NO_MORE_COMMON);\n            _create(msg.sender, level, target, benId, false, tokenId);\n        }\n    }\n\n    function _create(\n        address account_,\n        uint8 level_,\n        address benTarget_,\n        uint256 benId_,\n        bool benIsFound_,\n        uint256 newTokenId_\n    ) private returns (uint256) {\n        bool isRare = level_ > 0;\n        if (isRare && newTokenId_ != 1) {\n            _rarePrice = _rarePrice + _rarePriceIncrease;\n        }\n        IBenefits benefits = _benefits;\n        if (isRare) {\n            require(_rareLimit > _rareIssued[account_], NO_MORE_RARE);\n            require(_potion.decreaseAmount(true), SOLD_OUT_RARE);\n            _rareIssued[account_] = _rareIssued[account_] + 1;\n        } else {\n            require(_potion.decreaseAmount(false), SOLD_OUT_COMMON);\n            _commonIssued[account_] = _commonIssued[account_] + 1;\n        }\n        uint256 newId = newTokenId_ == 0 ? _tokenIds : newTokenId_;\n        if (newTokenId_ == 0) {\n            do {\n                newId = newId + 1;\n            } while (benefits.denied(newId));\n            _tokenIds = newId;\n        }\n\n        _rare[newId] = isRare;\n        _mint(account_, newId);\n        if (benIsFound_) {\n            benefits.set(benTarget_, benId_);\n        }\n        emit Created(account_, newId, isRare);\n        _total += 1;\n        return newId;\n    }\n\n    /**\n@notice Open the packed box \n@param id_ The box id\n@return The new potion id\n*/\n    function open(uint256 id_)\n        external\n        override\n        correctId(id_)\n        returns (uint256)\n    {\n        require(ownerOf(id_) == msg.sender, WRONG_OWNER);\n        uint256 newId = _potion.create(msg.sender, _rare[id_], id_);\n        delete _rare[id_];\n        _burn(id_);\n        emit Opened(msg.sender, newId);\n        return newId;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 id_)\n        public\n        view\n        override(ERC721, IERC721Metadata)\n        correctId(id_)\n        returns (string memory)\n    {\n        if (id_ < 12) {\n            return\n                string(\n                    abi.encodePacked(\n                        BASE_META_HASH,\n                        \"legendary/\",\n                        id_.toString(),\n                        \"/meta.json\"\n                    )\n                );\n        } else {\n            return\n                string(\n                    abi.encodePacked(\n                        BASE_META_HASH,\n                        \"mystery/\",\n                        id_.toString(),\n                        \"/meta.json\"\n                    )\n                );\n        }\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721, ERC2981)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
66     },
67     "project:/contracts/persons/interfaces/IBenefits.sol": {
68       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\n\nimport \"../../lib/Structures.sol\";\n\ninterface IBenefits {\n    event BenefitAdded(\n        address indexed target,\n        uint256 from,\n        uint256 to,\n        uint256 price,\n        uint16 id,\n        uint16 amount,\n        uint8 level\n    );\n    event BenefitUsed(address indexed target, uint256 id);\n    event BenefitsCleared(address indexed target);\n\n    /**\n@notice Add a new benefit \n@param target_ target address \n@param price_ Price of the token\n@param id_ The token id \n@param amount_ The tokens amount\n@param level_ The locked tokens level\n@param from_ The timestamp of start of rule usage\n@param until_ The timestamp of end of rule usage\n*/\n\n    function add(\n        address target_,\n        uint256 price_,\n        uint16 id_,\n        uint16 amount_,\n        uint8 level_,\n        uint256 from_,\n        uint256 until_\n    ) external;\n\n    /**\n@notice Clear user's benefits for the contract \n@param target_ target address \n*/\n    function clear(address target_) external;\n\n    /**\n@notice Check denied id \n@param current_ current id \n*/\n    function denied(uint256 current_) external view returns (bool);\n\n    /**\n@notice Get available user benefit \n@param target_ target address \n@param current_ current tested token id\n@param price_ the received price\n@return benefit id, benefit price, benefit token id, benefit level  (all items can be 0)\n*/\n    function get(\n        address target_,\n        uint256 current_,\n        uint256 price_\n    )\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint16,\n            uint8,\n            bool // is fenefit found\n        );\n\n    /** \n@notice Set  user benefit \n@param target_ target address \n@param id_ benefit id\n*/\n    function set(address target_, uint256 id_) external;\n\n    /**\n@notice Read specific benefit \n@param target_ target address \n@param id_  benefit id\n@return benefit \n*/\n    function read(address target_, uint256 id_)\n        external\n        view\n        returns (Structures.Benefit memory);\n\n    /**\n@notice Read total count of users received benefits \n@return count \n*/\n    function totalReceivers() external view returns (uint256);\n\n    /**\n@notice Read list of the addresses received benefits \n@return addresses \n*/\n    function listReceivers() external view returns (address[] memory);\n}\n"
69     },
70     "project:/contracts/persons/interfaces/IMysteryBox.sol": {
71       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"../../utils/interfaces/IClaimableFunds.sol\";\n\ninterface IMysteryBox is IERC721Metadata, IClaimableFunds {\n    event Created(address indexed owner, uint256 indexed id, bool indexed rare);\n    event Opened(address indexed owner, uint256 indexed id);\n    event CommonLimitDefined(uint256 commonLimit);\n    event CommonPriceDefined(uint256 commonPrice);\n    event RareLimitDefined(uint256 rareLimit);\n    event RarePriceDefined(uint256 rarePrice);\n    event RarePriceIncreaseDefined(uint256 rarePriceIncrease);\n\n    /**\n@notice Get a total amount of issued tokens\n@return The number of tokens minted\n*/\n\n    function total() external view returns (uint256);\n\n    /**\n@notice Set the maximum amount of the common potions saled for one account\n@param value_ New amount\n*/\n    function setCommonLimit(uint256 value_) external;\n\n    /**\n@notice Set the price of the common potions for the account\n@param value_ New price\n*/\n    function setCommonPrice(uint256 value_) external;\n\n    /**\n@notice Set the maximum amount of the rare potions saled for one account\n@param value_ New amount\n*/\n    function setRareLimit(uint256 value_) external;\n\n    /**\n@notice Set the maximum amount of the common potions saled for one account\n@param value_ New amount\n*/\n    function setRarePrice(uint256 value_) external;\n\n    /**\n@notice Set the increase of the rare price\n@param value_ New amount\n*/\n    function setRarePriceIncrease(uint256 value_) external;\n\n    /**\n@notice Get the amount of the tokens account can buy\n@return The two uint's - amount of the common potions and amount of the rare potions\n*/\n\n    /**\n@notice Get the current rare price\n@return Current rare price level\n*/\n    function getRarePrice() external view returns (uint256);\n\n    function getIssued(address account_)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n@notice Create the packed id with rare or not (admin only)\n@param target_ The box owner\n@param rare_ The rarity flag\n@return The new box id\n*/\n    function create(address target_, bool rare_) external returns (uint256);\n\n    /**\n@notice Get the rarity of the box\n@param tokenId_ The id of the token\n@return The rarity flag\n*/\n    function rarity(uint256 tokenId_) external view returns (bool);\n\n    /**\n@notice Deposit the funds (payable function)\n*/\n    function deposit() external payable;\n\n    /**\n@notice Open the packed box \n@param id_ The box id\n@return The new potion id\n*/\n    function open(uint256 id_) external returns (uint256);\n}\n"
72     },
73     "project:/contracts/persons/interfaces/IPotions.sol": {
74       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IPotions is IERC721Metadata {\n    event Created(address indexed owner, uint256 indexed id, uint256 indexed level);\n    event Opened(address indexed owner, uint256 indexed id);\n    event ChildsDefined(uint256 indexed childs);\n    event TokenUriDefined(uint256 indexed id, string tokenUri);\n\n    /**\n@notice Get a total amount of issued tokens\n@return The number of tokens minted\n*/\n\n    function total() external view returns (uint256);\n\n    /**\n@notice Get the amount of the actors remains to be created\n@return The current value\n*/\n    function unissued() external view returns (uint256);\n\n    /**\n@notice Get the level of the potion\n@param id_ potion id\n@return The level of the potion\n*/\n    function level(uint256 id_) external view returns (uint256);\n\n    /**\n@notice Set the maximum amount of the childs for the woman actor\n@param childs_ New childs amount\n*/\n    function setChilds(uint256 childs_) external;\n\n    /**\n@notice Get the current  maximum amount of the childs\n@return The current value\n*/\n    function getChilds() external view returns (uint256);\n\n    /**\n@notice Open the packed id with the random values\n@param id_ The pack id\n@return The new actor id\n*/\n    function open(uint256 id_) external returns (uint256);\n\n    /**\n@notice return max potion level\n@return The max potion level (1-based)\n*/\n\n    function getMaxLevel() external view returns (uint256);\n\n    /**\n@notice Create the potion by box (rare or not)\n@param target The potion owner\n@param rare The rarity sign\n@param id_ The id of a new token\n@return The new pack id\n*/\n    function create(\n        address target,\n        bool rare,\n        uint256 id_\n    ) external returns (uint256);\n\n    /**\n@notice Create the packed potion with desired level (admin only)\n@param target The pack owner\n@param level The pack level\n@param id_ The id of a new token\n@return The new pack id\n*/\n    function createPotion(\n        address target,\n        uint256 level,\n        uint256 id_\n    ) external returns (uint256);\n\n    /**\n@notice get the last pack for the address\n@param target The  owner \n@return The  pack id\n*/\n    function getLast(address target) external view returns (uint256);\n\n    /**\n@notice Decrease the amount of the common or rare tokens or fails\n*/\n    function decreaseAmount(bool rare) external returns (bool);\n\n    /**\n    @notice Set an uri for the token\n    @param id_ token id\n    @param metadataHash_ ipfs hash of the metadata\n    */\n    function setMetadataHash(uint256 id_, string calldata metadataHash_)\n        external;\n}\n"
75     },
76     "project:/contracts/utils/Claimable.sol": {
77       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IClaimableFunds.sol\";\nimport \"./Guard.sol\";\n\nabstract contract Claimable is Guard, ReentrancyGuard, IClaimableFunds {\n    /**\n    @notice Returns the amount of funds available to claim\n    @param asset_ Asset to withdraw, 0x0 - is native coin (eth)\n    */\n    function availableToClaim(\n        address, /*owner_*/\n        address asset_\n    ) external view returns (uint256) {\n        if (asset_ == address(0x0)) {\n            return address(this).balance;\n        } else {\n            return IERC20(asset_).balanceOf(address(this));\n        }\n    }\n\n    /**\n    @notice Claim funds\n    @param asset_ Asset to withdraw, 0x0 - is native coin (eth)\n    @param target_ The target for the withdrawal \n    @param amount_ The amount of \n    */\n    function claimFunds(\n        address asset_,\n        address payable target_,\n        uint256 amount_\n    ) external haveRights nonReentrant {\n        require(target_ != address(0), \"ZERO ADDRESS\");\n        if (asset_ == address(0x0)) {\n            (bool sent, ) = target_.call{value: amount_}(\"\");\n            require(sent, \"Can't sent\");\n        } else {\n            require(\n                IERC20(asset_).transfer(target_, amount_),\n                \"CANNOT TRANSFER\"\n            );\n        }\n    }\n}\n"
78     },
79     "project:/contracts/utils/EIP2981.sol": {
80       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport \"./Guard.sol\";\n\n/**\n@title The royalties base contract\n@author Ilya A. Shlyakhovoy\n@notice This contract manage properties of the game actor, including birth and childhood.\nThe new actor comes from the Breed or Box contracts\n */\n\nabstract contract EIP2981 is ERC2981, Guard {\n    event FeeChanged(\n        address indexed receiver,\n        uint96 collectionOwnerFeeNumerator,\n        uint96 firstOwnerFeeNumerator\n    );\n\n    struct AdditionalRoyaltyInfo {\n        uint96 collectionOwnerFeeNumerator;\n        uint96 firstOwnerFeeNumerator;\n    }\n\n    AdditionalRoyaltyInfo private _additionalDefaultRoyaltyInfo;\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function feeDenominator() external pure returns (uint96) {\n        return _feeDenominator();\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `collectionOwnerFeeNumerator` + `firstOwnerFeeNumerator` cannot be greater than the fee denominator.\n     */\n    function setDefaultRoyalty(\n        address receiver,\n        uint96 collectionOwnerFeeNumerator,\n        uint96 firstOwnerFeeNumerator\n    ) external haveRights {\n        _setDefaultRoyalty(\n            receiver,\n            collectionOwnerFeeNumerator + firstOwnerFeeNumerator\n        );\n\n        _additionalDefaultRoyaltyInfo = _additionalDefaultRoyaltyInfo = AdditionalRoyaltyInfo(\n            collectionOwnerFeeNumerator,\n            firstOwnerFeeNumerator\n        );\n        emit FeeChanged(\n            receiver,\n            collectionOwnerFeeNumerator,\n            firstOwnerFeeNumerator\n        );\n    }\n\n    /**\n     * @dev Returns amount of shares which should receive each party.\n     */\n    function additionalDefaultRoyaltyInfo()\n        external\n        view\n        returns (AdditionalRoyaltyInfo memory)\n    {\n        return _additionalDefaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function deleteDefaultRoyalty() external haveRights {\n        _deleteDefaultRoyalty();\n        delete _additionalDefaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) external haveRights {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function resetTokenRoyalty(uint256 tokenId) external haveRights {\n        _resetTokenRoyalty(tokenId);\n    }\n}\n"
81     },
82     "project:/contracts/utils/Guard.sol": {
83       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\nimport \"../interfaces/IRights.sol\";\n\nabstract contract Guard {\n    string constant NO_RIGHTS = \"Guard: No rights\";\n\n    /// @notice only if person with rights calls the contract\n    modifier haveRights() {\n        require(_rights().haveRights(address(this), msg.sender), NO_RIGHTS);\n        _;\n    }\n\n    /// @notice only if someone with rights calls the contract\n    modifier haveRightsPerson(address who_) {\n        require(_rights().haveRights(address(this), who_), NO_RIGHTS);\n        _;\n    }\n\n    /// @notice only if person with rights calls the function\n    modifier haveRightsExt(address target_, address who_) {\n        require(_rights().haveRights(target_, who_), NO_RIGHTS);\n        _;\n    }\n\n    function _rights() internal view virtual returns (IRights);\n\n    function setRights(address rights_) external virtual;\n}\n"
84     },
85     "project:/contracts/utils/GuardExtension.sol": {
86       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Ilya A. Shlyakhovoy\n// Email: is@unicsoft.com\n\npragma solidity 0.8.17;\nimport \"../interfaces/IRights.sol\";\nimport \"../utils/Guard.sol\";\n\ncontract GuardExtension is Guard {\n    IRights private _rightsContract;\n\n    string private constant SAME_VALUE = \"Guard: same value\";\n    string private constant ZERO_ADDRESS = \"Guard: zero address\";\n\n    constructor(address rights_) {\n        require(rights_ != address(0), ZERO_ADDRESS);\n        _rightsContract = IRights(rights_);\n    }\n\n    function _rights() internal view virtual override returns (IRights) {\n        return _rightsContract;\n    }\n\n    function setRights(address rights_) external virtual override haveRights {\n        require(address(_rightsContract) != rights_, SAME_VALUE);\n        _rightsContract = IRights(rights_);\n    }\n}\n"
87     },
88     "project:/contracts/utils/OperatorFiltererERC721.sol": {
89       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Bohdan Malkevych\n// Email: bm@unicsoft.com\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\n\nabstract contract OperatorFiltererERC721 is\n    ERC721,\n    DefaultOperatorFilterer,\n    Ownable\n{\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n     */\n    function approve(address operator, uint256 tokenId)\n        public\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n}\n"
90     },
91     "project:/contracts/utils/interfaces/IClaimableFunds.sol": {
92       "content": "// SPDX-License-Identifier: PROPRIERTARY\n\n// Author: Bohdan Malkevych\n// Email: bm@unicsoft.com\n\npragma solidity 0.8.17;\n\n/**\n@notice Interface created to standardize claiming funds by AggregationFunds contract\n*/\ninterface IClaimableFunds {\n    /**\n    @notice Claim funds\n    @param asset_ Asset to withdraw, 0x0 - is native coin (eth)\n    @param target_ The target for the withdrawal \n    @param amount_ The amount of \n    */\n    function claimFunds(\n        address asset_,\n        address payable target_,\n        uint256 amount_\n    ) external;\n\n    /**\n    @notice Returns the amount of funds available to claim\n    @param owner_ Address of the owner of the asset\n    @param asset_ Asset to withdraw, 0x0 - is native coin (eth)\n    */\n    function availableToClaim(address owner_, address asset_)\n        external\n        view\n        returns (uint256);\n}\n"
93     }
94   },
95   "settings": {
96     "remappings": [],
97     "optimizer": {
98       "enabled": true,
99       "runs": 200
100     },
101     "viaIR": true,
102     "evmVersion": "london",
103     "outputSelection": {
104       "*": {
105         "*": [
106           "evm.bytecode",
107           "evm.deployedBytecode",
108           "abi"
109         ]
110       }
111     }
112   }
113 }}