1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ETHSale.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&BBBBBBBGG&@@@@@@@@@&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P!:          :P@@@@&P7^.        .^?G&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@&J.            :#@@@#7.                  :Y&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@&!              Y@@@B:                        !&@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@P               B@@@~                            J@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@J               B@@&.                              ~@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@G               7@@@.                                7@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@.               &@@Y                                  #@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@&               .@@@&##########&&&&&&&&&&&#############@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@&               .@@@@@@@@@@@@@@#B######&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@.               &@@@@@@@@@@@@@B~         .:!5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@B               !@@@@@@@@@@@@@@@&!            .7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@Y               G@@@@@@@@@@@@@@@@B.             ^#@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@G               B@@@@@@@@@@@@@@@@@:              7@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@?              J@@@@@@@@@@@@@@@@@.              ^@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@5:            .B@@@@@@@@@@@@@@@B               ~@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G7^.         :P@@@@@@@@@@@@@@:               #@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#######BB&@@@@@@@@@@@@@7               J@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?               J@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@.                                 ^@@@:               B@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@Y                                 G@@#               ^@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@!                               Y@@@:              .@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@Y                             P@@@^              ~@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@&~                         !&@@&.             :B@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@&?.                   .J&@@@?             !B@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#Y~.           :!5&@@@#7          .^JB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BGGGB#&@@@@@@@@BPGGGGGGB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./common/SaleCommon.sol\";\n\ncontract ETHSale is AccessControl, SaleCommon {\n    struct Sale {\n        uint256 id;\n        uint256 volume;\n        uint256 presale;\n        uint256 starttime; // to start immediately, set starttime = 0\n        uint256 endtime;\n        bool active;\n        bytes32 merkleRoot; // Merkle root of the entrylist Merkle tree, 0x00 for non-merkle sale\n        uint256 maxQuantity;\n        uint256 price; // in Wei, where 10^18 Wei = 1 ETH\n        uint256 startTokenIndex;\n        uint256 maxPLOTs;\n        uint256 mintedPLOTs;\n    }\n\n    Sale[] public sales;\n    mapping(uint256 => mapping(address => uint256)) public minted; // sale ID => account => quantity\n\n    /// @notice Constructor\n    /// @param _plot Storyverse Plot contract\n    constructor(address _plot) SaleCommon(_plot) {}\n\n    /// @notice Get the current sale\n    /// @return Current sale\n    function currentSale() public view returns (Sale memory) {\n        require(sales.length > 0, \"no current sale\");\n        return sales[sales.length - 1];\n    }\n\n    /// @notice Get the current sale ID\n    /// @return Current sale ID\n    function currentSaleId() public view returns (uint256) {\n        require(sales.length > 0, \"no current sale\");\n        return sales.length - 1;\n    }\n\n    /// @notice Checks if the provided token ID parameters are likely to overlap a previous or current sale\n    /// @param _startTokenIndex Token index to start the sale from\n    /// @param _maxPLOTs Maximum number of PLOTs that can be minted in this sale\n    /// @return valid_ If the current token ID range paramters are likely safe\n    function isSafeTokenIdRange(uint256 _startTokenIndex, uint256 _maxPLOTs)\n        external\n        view\n        returns (bool valid_)\n    {\n        return _isSafeTokenIdRange(_startTokenIndex, _maxPLOTs, sales.length);\n    }\n\n    function _checkSafeTokenIdRange(\n        uint256 _startTokenIndex,\n        uint256 _maxPLOTs,\n        uint256 _maxSaleId\n    ) internal view {\n        // If _maxSaleId is passed in as the current sale ID, then\n        // the check will skip the current sale ID in _isSafeTokenIdRange()\n        // since in that case _maxSaleId == sales.length - 1\n        require(\n            _isSafeTokenIdRange(_startTokenIndex, _maxPLOTs, _maxSaleId),\n            \"overlapping token ID range\"\n        );\n    }\n\n    function _isSafeTokenIdRange(\n        uint256 _startTokenIndex,\n        uint256 _maxPLOTs,\n        uint256 _maxSaleId\n    ) internal view returns (bool valid_) {\n        if (_maxPLOTs == 0) {\n            return true;\n        }\n\n        for (uint256 i = 0; i < _maxSaleId; i++) {\n            // if no minted PLOTs in sale, ignore\n            if (sales[i].mintedPLOTs == 0) {\n                continue;\n            }\n\n            uint256 saleStartTokenIndex = sales[i].startTokenIndex;\n            uint256 saleMintedPLOTs = sales[i].mintedPLOTs;\n\n            if (_startTokenIndex < saleStartTokenIndex) {\n                // start index is less than the sale's start token index, so ensure\n                // it doesn't extend into the sale's range if max PLOTs are minted\n                if (_startTokenIndex + _maxPLOTs - 1 >= saleStartTokenIndex) {\n                    return false;\n                }\n            } else {\n                // start index greater than or equal to the sale's start token index, so ensure\n                // it starts after the sale's start token index + the number of PLOTs minted\n                if (_startTokenIndex <= saleStartTokenIndex + saleMintedPLOTs - 1) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /// @notice Adds a new sale\n    /// @param _volume Volume of the sale\n    /// @param _presale Presale of the sale\n    /// @param _starttime Start time of the sale\n    /// @param _endtime End time of the sale\n    /// @param _active Whether the sale is active\n    /// @param _merkleRoot Merkle root of the entry list Merkle tree, 0x00 for non-merkle sale\n    /// @param _maxQuantity Maximum number of PLOTs per account that can be sold\n    /// @param _price Price of each PLOT\n    /// @param _startTokenIndex Token index to start the sale from\n    /// @param _maxPLOTs Maximum number of PLOTs that can be minted in this sale\n    function addSale(\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _starttime,\n        uint256 _endtime,\n        bool _active,\n        bytes32 _merkleRoot,\n        uint256 _maxQuantity,\n        uint256 _price,\n        uint256 _startTokenIndex,\n        uint256 _maxPLOTs\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = sales.length;\n\n        checkTokenParameters(_volume, _presale, _startTokenIndex);\n\n        _checkSafeTokenIdRange(_startTokenIndex, _maxPLOTs, saleId);\n\n        Sale memory sale = Sale({\n            id: saleId,\n            volume: _volume,\n            presale: _presale,\n            starttime: _starttime,\n            endtime: _endtime,\n            active: _active,\n            merkleRoot: _merkleRoot,\n            maxQuantity: _maxQuantity,\n            price: _price,\n            startTokenIndex: _startTokenIndex,\n            maxPLOTs: _maxPLOTs,\n            mintedPLOTs: 0\n        });\n\n        sales.push(sale);\n\n        emit SaleAdded(msg.sender, saleId);\n    }\n\n    /// @notice Updates the current sale\n    /// @param _volume Volume of the sale\n    /// @param _presale Presale of the sale\n    /// @param _starttime Start time of the sale\n    /// @param _endtime End time of the sale\n    /// @param _active Whether the sale is active\n    /// @param _merkleRoot Merkle root of the entry list Merkle tree, 0x00 for non-merkle sale\n    /// @param _maxQuantity Maximum number of PLOTs per account that can be sold\n    /// @param _price Price of each PLOT\n    /// @param _startTokenIndex Token index to start the sale from\n    /// @param _maxPLOTs Maximum number of PLOTs that can be minted in this sale\n    function updateSale(\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _starttime,\n        uint256 _endtime,\n        bool _active,\n        bytes32 _merkleRoot,\n        uint256 _maxQuantity,\n        uint256 _price,\n        uint256 _startTokenIndex,\n        uint256 _maxPLOTs\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n\n        checkTokenParameters(_volume, _presale, _startTokenIndex);\n        _checkSafeTokenIdRange(_startTokenIndex, _maxPLOTs, saleId);\n\n        Sale memory sale = Sale({\n            id: saleId,\n            volume: _volume,\n            presale: _presale,\n            starttime: _starttime,\n            endtime: _endtime,\n            active: _active,\n            merkleRoot: _merkleRoot,\n            maxQuantity: _maxQuantity,\n            price: _price,\n            startTokenIndex: _startTokenIndex,\n            maxPLOTs: _maxPLOTs,\n            mintedPLOTs: sales[saleId].mintedPLOTs\n        });\n\n        sales[saleId] = sale;\n\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the volume of the current sale\n    /// @param _volume Volume of the sale\n    function updateSaleVolume(uint256 _volume) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n\n        checkTokenParameters(_volume, sales[saleId].presale, sales[saleId].startTokenIndex);\n\n        sales[saleId].volume = _volume;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the presale of the current sale\n    /// @param _presale Presale of the sale\n    function updateSalePresale(uint256 _presale) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n\n        checkTokenParameters(sales[saleId].volume, _presale, sales[saleId].startTokenIndex);\n\n        sales[saleId].presale = _presale;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the start time of the current sale\n    /// @param _starttime Start time of the sale\n    function updateSaleStarttime(uint256 _starttime) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].starttime = _starttime;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the end time of the current sale\n    /// @param _endtime End time of the sale\n    function updateSaleEndtime(uint256 _endtime) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].endtime = _endtime;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the active status of the current sale\n    /// @param _active Whether the sale is active\n    function updateSaleActive(bool _active) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].active = _active;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the merkle root of the current sale\n    /// @param _merkleRoot Merkle root of the entry list Merkle tree, 0x00 for non-merkle sale\n    function updateSaleMerkleRoot(bytes32 _merkleRoot) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].merkleRoot = _merkleRoot;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the max quantity of the current sale\n    /// @param _maxQuantity Maximum number of PLOTs per account that can be sold\n    function updateSaleMaxQuantity(uint256 _maxQuantity) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].maxQuantity = _maxQuantity;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the price of each PLOT for the current sale\n    /// @param _price Price of each PLOT\n    function updateSalePrice(uint256 _price) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n        sales[saleId].price = _price;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the start token index of the current sale\n    /// @param _startTokenIndex Token index to start the sale from\n    function updateSaleStartTokenIndex(uint256 _startTokenIndex)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        uint256 saleId = currentSaleId();\n\n        _checkSafeTokenIdRange(_startTokenIndex, sales[saleId].maxPLOTs, saleId);\n        checkTokenParameters(sales[saleId].volume, sales[saleId].presale, _startTokenIndex);\n\n        sales[saleId].startTokenIndex = _startTokenIndex;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    /// @notice Updates the  of the current sale\n    /// @param _maxPLOTs Maximum number of PLOTs that can be minted in this sale\n    function updateSaleMaxPLOTs(uint256 _maxPLOTs) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 saleId = currentSaleId();\n\n        _checkSafeTokenIdRange(sales[saleId].startTokenIndex, _maxPLOTs, saleId);\n\n        sales[saleId].maxPLOTs = _maxPLOTs;\n        emit SaleUpdated(msg.sender, saleId);\n    }\n\n    function _mintTo(\n        address _to,\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _startTokenIndex,\n        uint256 _quantity\n    ) internal {\n        require(_quantity > 0, \"quantity must be greater than 0\");\n\n        for (uint256 i = 0; i < _quantity; i++) {\n            uint256 tokenIndex = _startTokenIndex + i;\n            uint256 tokenId = buildTokenId(_volume, _presale, tokenIndex);\n\n            IStoryversePlot(plot).safeMint(_to, tokenId);\n        }\n\n        emit Minted(msg.sender, _to, _quantity, msg.value);\n    }\n\n    /// @notice Mints new tokens in exchange for ETH\n    /// @param _to Owner of the newly minted token\n    /// @param _quantity Quantity of tokens to mint\n    function mintTo(address _to, uint256 _quantity) external payable nonReentrant {\n        Sale memory sale = currentSale();\n\n        // only proceed if no merkle root is set\n        require(sale.merkleRoot == bytes32(0), \"merkle sale requires valid proof\");\n\n        // check sale validity\n        require(sale.active, \"sale is inactive\");\n        require(block.timestamp >= sale.starttime, \"sale has not started\");\n        require(block.timestamp < sale.endtime, \"sale has ended\");\n\n        // validate payment and authorized quantity\n        require(msg.value == sale.price * _quantity, \"incorrect payment for quantity and price\");\n        require(\n            minted[sale.id][msg.sender] + _quantity <= sale.maxQuantity,\n            \"exceeds allowed quantity\"\n        );\n\n        // check sale supply\n        require(sale.mintedPLOTs + _quantity <= sale.maxPLOTs, \"insufficient supply\");\n\n        sales[sale.id].mintedPLOTs += _quantity;\n        minted[sale.id][msg.sender] += _quantity;\n\n        _mintTo(\n            _to,\n            sale.volume,\n            sale.presale,\n            sale.startTokenIndex + sale.mintedPLOTs,\n            _quantity\n        );\n    }\n\n    /// @notice Mints new tokens in exchange for ETH based on the sale's entry list\n    /// @param _proof Merkle proof to validate the caller is on the sale's entry list\n    /// @param _maxQuantity Max quantity that the caller can mint\n    /// @param _to Owner of the newly minted token\n    /// @param _quantity Quantity of tokens to mint\n    function entryListMintTo(\n        bytes32[] calldata _proof,\n        uint256 _maxQuantity,\n        address _to,\n        uint256 _quantity\n    ) external payable nonReentrant {\n        Sale memory sale = currentSale();\n\n        // validate merkle proof\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _maxQuantity));\n        require(MerkleProof.verify(_proof, sale.merkleRoot, leaf), \"invalid proof\");\n\n        // check sale validity\n        require(sale.active, \"sale is inactive\");\n        require(block.timestamp >= sale.starttime, \"sale has not started\");\n        require(block.timestamp < sale.endtime, \"sale has ended\");\n\n        // validate payment and authorized quantity\n        require(msg.value == sale.price * _quantity, \"incorrect payment for quantity and price\");\n        require(\n            minted[sale.id][msg.sender] + _quantity <= Math.max(sale.maxQuantity, _maxQuantity),\n            \"exceeds allowed quantity\"\n        );\n\n        // check sale supply\n        require(sale.mintedPLOTs + _quantity <= sale.maxPLOTs, \"insufficient supply\");\n\n        sales[sale.id].mintedPLOTs += _quantity;\n        minted[sale.id][msg.sender] += _quantity;\n\n        _mintTo(\n            _to,\n            sale.volume,\n            sale.presale,\n            sale.startTokenIndex + sale.mintedPLOTs,\n            _quantity\n        );\n    }\n\n    /// @notice Administrative mint function within the constraints of the current sale, skipping some checks\n    /// @param _to Owner of the newly minted token\n    /// @param _quantity Quantity of tokens to mint\n    function adminSaleMintTo(address _to, uint256 _quantity) external onlyRole(MINTER_ROLE) {\n        Sale memory sale = currentSale();\n\n        // check sale supply\n        require(sale.mintedPLOTs + _quantity <= sale.maxPLOTs, \"insufficient supply\");\n\n        sales[sale.id].mintedPLOTs += _quantity;\n        minted[sale.id][msg.sender] += _quantity;\n\n        _mintTo(\n            _to,\n            sale.volume,\n            sale.presale,\n            sale.startTokenIndex + sale.mintedPLOTs,\n            _quantity\n        );\n    }\n\n    /// @notice Administrative mint function\n    /// @param _to Owner of the newly minted token\n    /// @param _quantity Quantity of tokens to mint\n    function adminMintTo(\n        address _to,\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _startTokenIndex,\n        uint256 _quantity\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        // add a sale (clobbering any current sale) to ensure token ranges\n        // are respected and recorded\n        addSale(\n            _volume,\n            _presale,\n            block.timestamp,\n            block.timestamp,\n            false,\n            bytes32(0),\n            0,\n            2**256 - 1,\n            _startTokenIndex,\n            _quantity\n        );\n\n        // record the sale as fully minted\n        sales[sales.length - 1].mintedPLOTs = _quantity;\n\n        _mintTo(_to, _volume, _presale, _startTokenIndex, _quantity);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/AccessControl.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/math/Math.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
15     },
16     "contracts/common/SaleCommon.sol": {
17       "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IStoryversePlot.sol\";\n\ncontract SaleCommon is AccessControl, ReentrancyGuard {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    address public plot;\n\n    /// @notice Emitted when a new sale is added to the contract\n    /// @param who Admin that created the sale\n    /// @param saleId Sale ID, will be the current sale\n    event SaleAdded(address who, uint256 saleId);\n\n    /// @notice Emitted when the current sale is updated\n    /// @param who Admin that updated the sale\n    /// @param saleId Sale ID, will be the current sale\n    event SaleUpdated(address who, uint256 saleId);\n\n    /// @notice Emitted when new tokens are sold and minted\n    /// @param who Purchaser (payer) for the tokens\n    /// @param to Owner of the newly minted tokens\n    /// @param quantity Quantity of tokens minted\n    /// @param amount Amount paid in Wei\n    event Minted(address who, address to, uint256 quantity, uint256 amount);\n\n    /// @notice Emitted when funds are withdrawn from the contract\n    /// @param to Recipient of the funds\n    /// @param amount Amount sent in Wei\n    event FundsWithdrawn(address to, uint256 amount);\n\n    /// @notice Constructor\n    /// @param _plot Storyverse Plot contract\n    constructor(address _plot) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n\n        plot = _plot;\n    }\n\n    function checkTokenParameters(\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _tokenIndex\n    ) internal pure {\n        require(_volume > 0 && _volume < 2**10, \"invalid volume\");\n        require(_presale < 2**2, \"invalid presale\");\n        require(_tokenIndex < 2**32, \"invalid token index\");\n    }\n\n    function buildTokenId(\n        uint256 _volume,\n        uint256 _presale,\n        uint256 _tokenIndex\n    ) public view returns (uint256 tokenId_) {\n        checkTokenParameters(_volume, _presale, _tokenIndex);\n\n        uint256 superSecretSpice = uint256(\n            keccak256(\n                abi.encodePacked(\n                    (0x4574c8c75d6e88acd28f7e467dac97b5c60c3838d9dad993900bdf402152228e ^\n                        uint256(blockhash(block.number - 1))) + _tokenIndex\n                )\n            )\n        ) & 0xffffffff;\n\n        tokenId_ = (_volume << 245) | (_presale << 243) | (superSecretSpice << 211) | _tokenIndex;\n\n        return tokenId_;\n    }\n\n    /// @notice Decode a token ID into its component parts\n    /// @param _tokenId Token ID\n    /// @return volume_ Volume of the sale\n    /// @return presale_ Presale of the sale\n    /// @return superSecretSpice_ Super secret spice\n    /// @return tokenIndex_ Token index\n    function decodeTokenId(uint256 _tokenId)\n        external\n        pure\n        returns (\n            uint256 volume_,\n            uint256 presale_,\n            uint256 superSecretSpice_,\n            uint256 tokenIndex_\n        )\n    {\n        volume_ = (_tokenId >> 245) & 0x3ff;\n        presale_ = (_tokenId >> 243) & 0x3;\n        superSecretSpice_ = (_tokenId >> 211) & 0xffffffff;\n        tokenIndex_ = _tokenId & 0xffffffff;\n\n        return (volume_, presale_, superSecretSpice_, tokenIndex_);\n    }\n\n    /// @notice Withdraw funds from the contract\n    /// @param _to Recipient of the funds\n    /// @param _amount Amount sent, in Wei\n    function withdrawFunds(address payable _to, uint256 _amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        nonReentrant\n    {\n        require(_amount <= address(this).balance, \"not enough funds\");\n        _to.transfer(_amount);\n        emit FundsWithdrawn(_to, _amount);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/access/IAccessControl.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Strings.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
36     },
37     "contracts/interfaces/IStoryversePlot.sol": {
38       "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity ~0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@imtbl/imx-contracts/contracts/IMintable.sol\";\nimport \"./IExtensionManager.sol\";\n\ninterface IStoryversePlot is\n    IERC2981Upgradeable,\n    IERC721MetadataUpgradeable,\n    IAccessControlUpgradeable,\n    IMintable\n{\n    /// @notice Emitted when a new extension manager is set\n    /// @param who Admin that set the extension manager\n    /// @param extensionManager New extension manager contract\n    event ExtensionManagerSet(address indexed who, address indexed extensionManager);\n\n    /// @notice Emitted when a new Immutable X is set\n    /// @param who Admin that set the extension manager\n    /// @param imx New Immutable X address\n    event IMXSet(address indexed who, address indexed imx);\n\n    /// @notice Emitted when a new token is minted and a blueprint is set\n    /// @param to Owner of the newly minted token\n    /// @param tokenId Token ID that was minted\n    /// @param blueprint Blueprint extracted from the blob\n    event AssetMinted(address to, uint256 tokenId, bytes blueprint);\n\n    /// @notice Emitted when the new base URI is set\n    /// @param who Admin that set the base URI\n    event BaseURISet(address indexed who);\n\n    /// @notice Emitted when funds are withdrawn from the contract\n    /// @param to Recipient of the funds\n    /// @param amount Amount sent in Wei\n    event FundsWithdrawn(address to, uint256 amount);\n\n    /// @notice Get the base URI\n    /// @return uri_ Base URI\n    function baseURI() external returns (string memory uri_);\n\n    /// @notice Get the extension manager\n    /// @return extensionManager_ Extension manager\n    function extensionManager() external returns (IExtensionManager extensionManager_);\n\n    /// @notice Get the Immutable X address\n    /// @return imx_ Immutable X address\n    function imx() external returns (address imx_);\n\n    /// @notice Get the blueprint for a token ID\n    /// @param _tokenId Token ID\n    /// @return blueprint_ Blueprint\n    function blueprints(uint256 _tokenId) external returns (bytes memory blueprint_);\n\n    /// @notice Sets a new extension manager\n    /// @param _extensionManager New extension manager\n    function setExtensionManager(address _extensionManager) external;\n\n    /// @notice Mint a new token\n    /// @param _to Owner of the newly minted token\n    /// @param _tokenId Token ID\n    function safeMint(address _to, uint256 _tokenId) external;\n\n    /// @notice Sets a base URI\n    /// @param _uri Base URI\n    function setBaseURI(string calldata _uri) external;\n\n    /// @notice Get PLOT data for the token ID\n    /// @param _tokenId Token ID\n    /// @param _in Input data\n    /// @return out_ Output data\n    function getPLOTData(uint256 _tokenId, bytes memory _in) external returns (bytes memory out_);\n\n    /// @notice Sets PLOT data for the token ID\n    /// @param _tokenId Token ID\n    /// @param _in Input data\n    /// @return out_ Output data\n    function setPLOTData(uint256 _tokenId, bytes memory _in) external returns (bytes memory out_);\n\n    /// @notice Pays for PLOT data of the token ID\n    /// @param _tokenId Token ID\n    /// @param _in Input data\n    /// @return out_ Output data\n    function payPLOTData(uint256 _tokenId, bytes memory _in)\n        external\n        payable\n        returns (bytes memory out_);\n\n    /// @notice Get data\n    /// @param _in Input data\n    /// @return out_ Output data\n    function getData(bytes memory _in) external returns (bytes memory out_);\n\n    /// @notice Sets data\n    /// @param _in Input data\n    /// @return out_ Output data\n    function setData(bytes memory _in) external returns (bytes memory out_);\n\n    /// @notice Pays for data\n    /// @param _in Input data\n    /// @return out_ Output data\n    function payData(bytes memory _in) external payable returns (bytes memory out_);\n\n    /// @notice Transfers the ownership of the contract\n    /// @param newOwner New owner of the contract\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Sets the Immutable X address\n    /// @param _imx New Immutable X\n    function setIMX(address _imx) external;\n\n    /// @notice Withdraw funds from the contract\n    /// @param _to Recipient of the funds\n    /// @param _amount Amount sent, in Wei\n    function withdrawFunds(address payable _to, uint256 _amount) external;\n}\n"
39     },
40     "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
42     },
43     "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
45     },
46     "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
48     },
49     "@imtbl/imx-contracts/contracts/IMintable.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IMintable {\n    function mintFor(\n        address to,\n        uint256 quantity,\n        bytes calldata mintingBlob\n    ) external;\n}\n"
51     },
52     "contracts/interfaces/IExtensionManager.sol": {
53       "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity ~0.8.13;\n\ninterface IExtensionManager {\n    function beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external;\n\n    function afterTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external;\n\n    function beforeTokenApprove(address _to, uint256 _tokenId) external;\n\n    function afterTokenApprove(address _to, uint256 _tokenId) external;\n\n    function beforeApproveAll(address _operator, bool _approved) external;\n\n    function afterApproveAll(address _operator, bool _approved) external;\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory uri_);\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address royaltyReceiver_, uint256 royaltyAmount_);\n\n    function getPLOTData(uint256 _tokenId, bytes memory _in)\n        external\n        view\n        returns (bytes memory out_);\n\n    function setPLOTData(uint256 _tokenId, bytes memory _in) external returns (bytes memory out_);\n\n    function payPLOTData(uint256 _tokenId, bytes memory _in)\n        external\n        payable\n        returns (bytes memory out_);\n\n    function getData(bytes memory _in) external view returns (bytes memory out_);\n\n    function setData(bytes memory _in) external returns (bytes memory out_);\n\n    function payData(bytes memory _in) external payable returns (bytes memory out_);\n}\n"
54     },
55     "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
57     },
58     "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 1000
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "libraries": {}
80   }
81 }}