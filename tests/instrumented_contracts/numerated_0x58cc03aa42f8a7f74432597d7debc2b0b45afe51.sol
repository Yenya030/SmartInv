1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/EstateStaking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n/**\r\n      _____                    _____                    _____                            _____                    _____                _____                    _____                _____                    _____                    _____          \r\n     /\\    \\                  /\\    \\                  /\\    \\                          /\\    \\                  /\\    \\              /\\    \\                  /\\    \\              /\\    \\                  /\\    \\                  /\\    \\         \r\n    /::\\    \\                /::\\____\\                /::\\    \\                        /::\\    \\                /::\\    \\            /::\\    \\                /::\\    \\            /::\\    \\                /::\\    \\                /::\\    \\        \r\n    \\:::\\    \\              /:::/    /               /::::\\    \\                      /::::\\    \\              /::::\\    \\           \\:::\\    \\              /::::\\    \\           \\:::\\    \\              /::::\\    \\              /::::\\    \\       \r\n     \\:::\\    \\            /:::/    /               /::::::\\    \\                    /::::::\\    \\            /::::::\\    \\           \\:::\\    \\            /::::::\\    \\           \\:::\\    \\            /::::::\\    \\            /::::::\\    \\      \r\n      \\:::\\    \\          /:::/    /               /:::/\\:::\\    \\                  /:::/\\:::\\    \\          /:::/\\:::\\    \\           \\:::\\    \\          /:::/\\:::\\    \\           \\:::\\    \\          /:::/\\:::\\    \\          /:::/\\:::\\    \\     \r\n       \\:::\\    \\        /:::/____/               /:::/__\\:::\\    \\                /:::/__\\:::\\    \\        /:::/__\\:::\\    \\           \\:::\\    \\        /:::/__\\:::\\    \\           \\:::\\    \\        /:::/__\\:::\\    \\        /:::/__\\:::\\    \\    \r\n       /::::\\    \\      /::::\\    \\              /::::\\   \\:::\\    \\              /::::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\          /::::\\    \\      /::::\\   \\:::\\    \\          /::::\\    \\      /::::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\   \r\n      /::::::\\    \\    /::::::\\    \\   _____    /::::::\\   \\:::\\    \\            /::::::\\   \\:::\\    \\    ___\\:::\\   \\:::\\    \\        /::::::\\    \\    /::::::\\   \\:::\\    \\        /::::::\\    \\    /::::::\\   \\:::\\    \\    ___\\:::\\   \\:::\\    \\  \r\n     /:::/\\:::\\    \\  /:::/\\:::\\    \\ /\\    \\  /:::/\\:::\\   \\:::\\    \\          /:::/\\:::\\   \\:::\\    \\  /\\   \\:::\\   \\:::\\    \\      /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\    \\      /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\    \\  /\\   \\:::\\   \\:::\\    \\ \r\n    /:::/  \\:::\\____\\/:::/  \\:::\\    /::\\____\\/:::/__\\:::\\   \\:::\\____\\        /:::/__\\:::\\   \\:::\\____\\/::\\   \\:::\\   \\:::\\____\\    /:::/  \\:::\\____\\/:::/  \\:::\\   \\:::\\____\\    /:::/  \\:::\\____\\/:::/__\\:::\\   \\:::\\____\\/::\\   \\:::\\   \\:::\\____\\\r\n   /:::/    \\::/    /\\::/    \\:::\\  /:::/    /\\:::\\   \\:::\\   \\::/    /        \\:::\\   \\:::\\   \\::/    /\\:::\\   \\:::\\   \\::/    /   /:::/    \\::/    /\\::/    \\:::\\  /:::/    /   /:::/    \\::/    /\\:::\\   \\:::\\   \\::/    /\\:::\\   \\:::\\   \\::/    /\r\n  /:::/    / \\/____/  \\/____/ \\:::\\/:::/    /  \\:::\\   \\:::\\   \\/____/          \\:::\\   \\:::\\   \\/____/  \\:::\\   \\:::\\   \\/____/   /:::/    / \\/____/  \\/____/ \\:::\\/:::/    /   /:::/    / \\/____/  \\:::\\   \\:::\\   \\/____/  \\:::\\   \\:::\\   \\/____/ \r\n /:::/    /                    \\::::::/    /    \\:::\\   \\:::\\    \\               \\:::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\      /:::/    /                    \\::::::/    /   /:::/    /            \\:::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\     \r\n/:::/    /                      \\::::/    /      \\:::\\   \\:::\\____\\               \\:::\\   \\:::\\____\\       \\:::\\   \\:::\\____\\    /:::/    /                      \\::::/    /   /:::/    /              \\:::\\   \\:::\\____\\       \\:::\\   \\:::\\____\\    \r\n\\::/    /                       /:::/    /        \\:::\\   \\::/    /                \\:::\\   \\::/    /        \\:::\\  /:::/    /    \\::/    /                       /:::/    /    \\::/    /                \\:::\\   \\::/    /        \\:::\\  /:::/    /    \r\n \\/____/                       /:::/    /          \\:::\\   \\/____/                  \\:::\\   \\/____/          \\:::\\/:::/    /      \\/____/                       /:::/    /      \\/____/                  \\:::\\   \\/____/          \\:::\\/:::/    /     \r\n                              /:::/    /            \\:::\\    \\                       \\:::\\    \\               \\::::::/    /                                    /:::/    /                                 \\:::\\    \\               \\::::::/    /      \r\n                             /:::/    /              \\:::\\____\\                       \\:::\\____\\               \\::::/    /                                    /:::/    /                                   \\:::\\____\\               \\::::/    /       \r\n                             \\::/    /                \\::/    /                        \\::/    /                \\::/    /                                     \\::/    /                                     \\::/    /                \\::/    /        \r\n                              \\/____/                  \\/____/                          \\/____/                  \\/____/                                       \\/____/                                       \\/____/                  \\/____/         \r\n\r\n * @title EstatesStaking\r\n * EstatesStaking - a contract for staking The Estates ERC-721 Tokens\r\n */\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./IEstateStaking.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IEstate {\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n\tfunction estateGeneration(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\ninterface IEquity {\r\n    function grantEquity(address to, uint256 amount) external;\r\n}\r\n\r\ncontract EstateStaking is IEstateStaking, Ownable, ERC721Holder {\r\n    IEstate public estatesContract;\r\n    IEquity public equityContract;\r\n\r\n\t// || ADMIN SWITCHES ||\r\n\t// Halt staking\r\n\tbool stakingEnabled = true;\r\n\t// Grant equity while staked\r\n    bool grantEquity = true;\r\n\t// Minimum staking period of 7 days\r\n    uint64 public LOCK_IN = 604800;\r\n\r\n\t// || YIELD ||\r\n\t// Daily rate of award per level 1 estate\r\n    uint256 public BASE_RATE = 10 ether;\r\n    // Yield tracking\r\n    mapping(address => uint256) public unclaimedRewards;\r\n    mapping(address => uint256) public lastUpdate;\r\n\tevent RewardGranted(address user, uint256 amount);\t\r\n\r\n\t// || USER BALANCES ||\r\n    // NFT tokenId to time staked and owner's address.\r\n    mapping(uint64 => StakedToken) public stakes;\r\n\t// Gen balances per owner (necessary as different gens give different rewards)\r\n\tstruct genBalance {\r\n\t\tuint gen1;\r\n\t\tuint gen2;\r\n\t\tuint gen3;\r\n\t\tuint gen4;\r\n\t}\r\n\tmapping (address => genBalance) public generationBalance;\r\n\r\n\t// || BREED FROM STAKED ||\r\n\tevent Upgraded(uint256 newEstate, uint256 parent1, uint256 parent2);\r\n\r\n    constructor(\r\n        address _estatesContract,\r\n        address _equityContract,\r\n        address _ownerAddress\r\n    ) {\r\n        require(_estatesContract != address(0),\"nft contract cannot be 0x0\");\r\n        require(_equityContract != address(0),\"equity contract cannot be 0x0\");\r\n        estatesContract = IEstate(_estatesContract);\r\n        equityContract = IEquity(_equityContract);\r\n        if (_ownerAddress != msg.sender) {\r\n            transferOwnership(_ownerAddress);\r\n        }\r\n    }\r\n\r\n\t/** *********************************** **/\r\n\t/** ********* RewardFunctions ****** **/\r\n\t/** *********************************** **/\r\n\r\n    function getPendingReward(address user) internal view returns (uint256) {\r\n        // gen2 yields 2.4 gen1\r\n\t\t// gen3 yields 2.5 gen2\r\n\t\t// gen4 yields 2.6 gen3 \r\n\t\tuint dayrate = (generationBalance[user].gen1 + (generationBalance[user].gen2*12/5) + (generationBalance[user].gen3*6) + (generationBalance[user].gen4*78/5));\r\n        // return weighted estates held * rate *days since last updated\r\n        return (dayrate * BASE_RATE * (block.timestamp - lastUpdate[user])) / 86400;\r\n    }\r\n\r\n\t// Update yield ledger\r\n    function updateRewardAndTimestamp(address user) internal {\r\n        if (user != address(0)) {\r\n            unclaimedRewards[user] += getPendingReward(user);\r\n            lastUpdate[user] = block.timestamp;\r\n        }\r\n    }\r\n\r\n\tfunction withdrawEquity() public {\r\n\t\trequire(grantEquity, \"Withdrawing equity has been paused.\");\r\n\t\tuint256 reward = unclaimedRewards[msg.sender] +  getPendingReward(msg.sender);\r\n\t\tequityContract.grantEquity(msg.sender, reward);\r\n\t\t// reset rewards to zero\r\n\t\tunclaimedRewards[msg.sender] = 0;\r\n\t\tlastUpdate[msg.sender] = block.timestamp;\r\n\t\temit RewardGranted(msg.sender,reward);\r\n\t}\r\n\r\n\t/** *********************************** **/\r\n\t/** ********* Staking Functions ****** **/\r\n\t/** *********************************** **/\r\n\r\n    function setStake(uint64 tokenId, address user) external {\t\r\n\t\trequire(stakingEnabled, \"Staking has been paused.\");\r\n        require(\r\n            msg.sender == address(estatesContract),\r\n            \"Only estates contract set stake\"\r\n        );\t\t\r\n\t\tupdateRewardAndTimestamp(user);\r\n\t\t// assign owner and timestamp to this token\r\n        stakes[tokenId] = StakedToken(user, uint64(block.timestamp));\r\n\t\t// update generation balance for user\r\n\t\tuint gen = estatesContract.estateGeneration(tokenId);\r\n\t\t// this is awkward I know...\r\n\t\tif (gen == 0){\r\n\t\t\tgenerationBalance[user].gen1 += 1;\r\n\t\t} else if (gen == 1){\r\n\t\t\tgenerationBalance[user].gen2 += 1;\r\n\t\t} else if (gen == 2){\r\n\t\t\tgenerationBalance[user].gen3 += 1;\r\n\t\t} else {\r\n\t\t\tgenerationBalance[user].gen4 += 1;\r\n\t\t}\r\n\t\temit StartStake(user, tokenId);\r\n    }\r\n\r\n    function setGroupStake(uint64[] memory tokenIds, address user) external {\t\r\n\t\trequire(stakingEnabled, \"Staking has been paused.\");\r\n        require(\r\n            msg.sender == address(estatesContract),\r\n            \"Only estates contract set stake\"\r\n        );\t\t\r\n\t\tupdateRewardAndTimestamp(user);\r\n\t\tfor (uint64 i = 0; i < tokenIds.length; ++i) {\r\n\t\t\t// assign owner and timestamp to this token\r\n\t\t\tstakes[tokenIds[i]] = StakedToken(user, uint64(block.timestamp));\r\n\t\t\t// update generation balance for user\r\n\t\t\tuint gen = estatesContract.estateGeneration(tokenIds[i]);\r\n\t\t\t// this is awkward I know...\r\n\t\t\tif (gen == 0){\r\n\t\t\t\tgenerationBalance[user].gen1 += 1;\r\n\t\t\t} else if (gen == 1){\r\n\t\t\t\tgenerationBalance[user].gen2 += 1;\r\n\t\t\t} else if (gen == 2){\r\n\t\t\t\tgenerationBalance[user].gen3 += 1;\r\n\t\t\t} else {\r\n\t\t\t\tgenerationBalance[user].gen4 += 1;\r\n\t\t\t}\r\n\t\t\temit StartStake(user, tokenIds[i]);\r\n\t\t}\r\n    }\r\n\r\n\t// slightly cheaper version of setStake that assumes the token has already been transferred to the staking contract and is gen1 \r\n\tfunction stakeMint(uint256 firstTokenId, address user, uint256 _vol) public {\r\n        require(\r\n            msg.sender == address(estatesContract),\r\n            \"Only estates contract can mint to stake\"\r\n        );\r\n\t\tupdateRewardAndTimestamp(user);\r\n\t\tfor (uint256 i=0; i<_vol; ++i) {\r\n\t\t\tstakes[uint64(firstTokenId+i)] = StakedToken(user, uint64(block.timestamp));\r\n\t\t\temit StartStake(user, uint64(firstTokenId+i));\r\n\t\t}\r\n\t\tgenerationBalance[user].gen1 += _vol;\t\r\n\t}\r\n\r\n    function unstake(uint64 tokenId) internal {\r\n        require(stakes[tokenId].user != address(0), \"TokenId not staked\");\r\n        require(stakes[tokenId].user == msg.sender,\"Sender didn't stake token\");\r\n        uint64 stakeLength = uint64(block.timestamp) - stakes[tokenId].timeStaked;\r\n        require(stakeLength > LOCK_IN, \"Can not remove token until lock-in period is over\");\r\n\r\n\t\t// update gen balance\r\n\t\tuint gen = estatesContract.estateGeneration(tokenId);\r\n\t\tif (gen == 0){\r\n\t\t\tgenerationBalance[msg.sender].gen1 -= 1;\r\n\t\t} else if (gen == 1){\r\n\t\t\tgenerationBalance[msg.sender].gen2 -= 1;\r\n\t\t} else if (gen == 2){\r\n\t\t\tgenerationBalance[msg.sender].gen3 -= 1;\r\n\t\t} else {\r\n\t\t\tgenerationBalance[msg.sender].gen4 -= 1;\r\n\t\t}\t\t\r\n        \r\n\t\tdelete stakes[tokenId];\r\n        estatesContract.safeTransferFrom(address(this),msg.sender,uint256(tokenId));\r\n\t\temit Unstake(msg.sender,tokenId,stakeLength);\r\n    }\r\n\r\n\tfunction singleUnstake(uint64 tokenId) public override {\r\n        // withdraw any unclaimed rewards\r\n\t\tif (grantEquity) {\r\n            withdrawEquity();\r\n        } else {\r\n\t\t\tupdateRewardAndTimestamp(msg.sender);\r\n\t\t}\r\n\t\tunstake(tokenId);\r\n\t}\r\n\r\n    function groupUnstake(uint64[] memory tokenIds) external override {\r\n        // withdraw any unclaimed rewards\r\n\t\tif (grantEquity) {\r\n            withdrawEquity();\r\n        } else {\r\n\t\t\tupdateRewardAndTimestamp(msg.sender);\r\n\t\t}\t\t\r\n        for (uint64 i = 0; i < tokenIds.length; ++i) {\r\n            unstake(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n\t/** *********************************** **/\r\n\t/** ********* View Functions ****** **/\r\n\t/** *********************************** **/\r\n\r\n\tfunction getTokenOwner(uint64 tokenId) external view returns (address) {\r\n\t\treturn stakes[uint64(tokenId)].user;\r\n\t}\t\r\n\r\n\t// NEVER CALL THIS ON CHAIN, VERY EXPENSIVE\r\n    function viewStakes(address _address) public view returns (uint256[] memory)\r\n    {\r\n        uint256[] memory _tokens = new uint256[](18750);\r\n        uint256 tookCount = 0;\r\n        for (uint64 i = 0; i < 18750; i++) {\r\n            if (stakes[i].user == _address) {\r\n                _tokens[tookCount] = i;\r\n                tookCount++;\r\n            }\r\n        }\r\n        uint256[] memory trimmedResult = new uint256[](tookCount);\r\n        for (uint256 j = 0; j < trimmedResult.length; j++) {\r\n            trimmedResult[j] = _tokens[j];\r\n        }\r\n        return trimmedResult;\r\n    }\r\n\r\n\t// Gets COMBINED balance of UNSTAKED and STAKED estates, useful for collabland etc\r\n    function balanceOf(address _address) external view returns (uint256)\r\n    {\r\n        return estatesContract.balanceOf(_address) + viewStakes(_address).length;\r\n    }\r\n\r\n    function getTotalUnclaimed(address user)\r\n        external\r\n        view\r\n        returns (uint256 unclaimed)\t{\r\n\t\t\treturn unclaimedRewards[user] + getPendingReward(user);\r\n\t\t}\r\n\r\n\t/** *********************************** **/\r\n\t/** ********* Owner Functions ****** **/\r\n\t/** *********************************** **/\r\n\r\n\t// Enable or disable staking\r\n    function setStaking(bool _enable) external onlyOwner {\r\n        stakingEnabled = _enable;\r\n    }\r\n\r\n\t// Enable or disable equity granting\r\n    function setGrantEquity(bool _grant) external onlyOwner {\r\n        grantEquity = _grant;\r\n    }\r\n\r\n\t// Set the lockin period for staking\r\n    function setLockIn(uint64 _lockin) external onlyOwner {\r\n        LOCK_IN = _lockin;\r\n    }\r\n\r\n\t// Set the base rate for rewards\r\n    function setBaseRate(uint256 _rate) external onlyOwner {\r\n        BASE_RATE = 1 ether * _rate;\r\n    } \r\n\r\n\t// Set Estates contract\r\n    function setEstatesContract(address _address) external onlyOwner {\r\n        estatesContract = IEstate(_address);\r\n    }\r\n\r\n\t// Set $Equity contract\r\n    function setEquityContract(address _address) external onlyOwner {\r\n        equityContract = IEquity(_address);\r\n    }\t\t    \r\n}"
6     },
7     "contracts/IEstateStaking.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n\r\ninterface IEstateStaking is IERC721Receiver {\r\n    struct StakedToken {\r\n        address user;\r\n        uint64 timeStaked;\r\n    }\r\n\r\n    /// @notice Emits when a user stakes their NFT.\r\n    /// @param owner the wallet address of the owner of the NFT being staked.\r\n    /// @param tokenId the tokenId of the Estates NFT being staked.\r\n    event StartStake(address indexed owner, uint64 tokenId);\r\n\r\n    /// @notice Emits when a user unstakes their NFT.\r\n    /// @param owner the wallet address of the owner of the NFT being unstaked.\r\n    /// @param tokenId the tokenId of the Estates NFT being unstaked.\r\n    /// @param duration the duration the NFT was staked for.\r\n    event Unstake(\r\n        address indexed owner,\r\n        uint64 tokenId,\r\n        uint64 duration\r\n    );\r\n\r\n    /// @notice Retrieves a user's NFT from the staking contract\r\n    /// @param tokenId the tokenId of the staked NFT\r\n    function singleUnstake(uint64 tokenId) external;\r\n\r\n    /// @notice Unstakes serveral of a user's NFTs\r\n    /// @param tokenIds the tokenId of the NFT to be staked\r\n    function groupUnstake(uint64[] memory tokenIds) external;\r\n}"
9     },
10     "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 1000
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}