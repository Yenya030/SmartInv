1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
9     },
10     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
21     },
22     "src/IExternalFilter.sol": {
23       "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\ninterface IExternalFilter is IERC165 {\n  /**\n   * @notice Pools can nominate an external contract to approve whether NFT IDs are accepted.\n   * This is typically used to implement some kind of dynamic block list, e.g. stolen NFTs.\n   * @param collection NFT contract address\n   * @param nftIds List of NFT IDs to check\n   * @return allowed True if swap (pool buys) is allowed\n   */\n  function areNFTsAllowed(address collection, uint256[] calldata nftIds, bytes calldata context)\n    external\n    returns (bool allowed);\n}\n"
24     },
25     "src/MarkedNFTFilter.sol": {
26       "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\nimport {IExternalFilter} from \"./IExternalFilter.sol\";\n\ncontract MarkedNFTFilter is Ownable, ERC165, IExternalFilter {\n  using BitMaps for BitMaps.BitMap;\n\n  mapping(address => BitMaps.BitMap) private collections;\n  mapping(address => uint256) private markedCount;\n  mapping(address => bool) private enabled;\n\n  /**\n   * @notice Pools can nominate an external contract to approve whether NFT IDs are accepted.\n   * This is typically used to implement some kind of dynamic block list, e.g. stolen NFTs.\n   * @param collection NFT contract address\n   * @param nftIds List of NFT IDs to check\n   * @return allowed True if swap (pool buys) is allowed\n   */\n  function areNFTsAllowed(address collection, uint256[] calldata nftIds, bytes calldata /* context */) external view returns (bool allowed) {\n    if (!enabled[collection]) {\n      return true;\n    }\n\n    uint256 length = nftIds.length;\n\n    // this is a blacklist, so if we did not index the collection, it's allowed\n    for (uint256 i; i < length;) {\n      if (collections[collection].get(nftIds[i])) {\n        return false;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @notice Returns marked NFTs in the same positions as the input array\n   * @param collection NFT contract address\n   * @param nftIds List of NFT IDs to check\n   * @return marked bool[] of marked NFTs\n   */\n  function getMarkedNFTs(address collection, uint256[] calldata nftIds) external view returns (bool[] memory marked) {\n    uint256 length = nftIds.length;\n    marked = new bool[](length);\n\n    for (uint256 i; i < length;) {\n      if (collections[collection].get(nftIds[i])) {\n        marked[i] = true;\n      }\n      else {\n        marked[i] = false;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    return marked;\n  }\n\n  function getMarkedCount(address collection) external view returns (uint256 count) {\n    return markedCount[collection];\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165, IERC165) returns (bool) {\n    return interfaceId == type(IExternalFilter).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  function updateMarkedNFTs(address collection, uint256[] calldata toMark, uint256[] calldata toUnmark) public onlyOwner {\n    markIds(collection, toMark);\n    unmarkIds(collection, toUnmark);\n  }\n\n  function markIds(address collection, uint256[] calldata nftIds) public onlyOwner {\n    uint256 length = nftIds.length;\n\n    for (uint256 i; i < length;) {\n      if (!collections[collection].get(nftIds[i])) {\n        collections[collection].set(nftIds[i]);\n        markedCount[collection]++;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  function unmarkIds(address collection, uint256[] calldata nftIds) public onlyOwner {\n    uint256 length = nftIds.length;\n\n    for (uint256 i; i < length;) {\n      if (collections[collection].get(nftIds[i])) {\n        collections[collection].unset(nftIds[i]);\n        markedCount[collection]--;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  function isEnabled(address collection) external view returns (bool) {\n    return enabled[collection];\n  }\n\n  function disableCollections(address[] calldata toDisable) public onlyOwner {\n    uint256 length = toDisable.length;\n\n    for (uint256 i; i < length;) {\n      // we cannot free the BitMap, so just set this flag to false\n      delete enabled[toDisable[i]];\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  function enableCollections(address[] calldata toEnable) public onlyOwner {\n    uint256 length = toEnable.length;\n\n    for (uint256 i; i < length;) {\n      enabled[toEnable[i]] = true;\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  function toggleCollections(address[] calldata toEnable, address[] calldata toDisable) public onlyOwner {\n    enableCollections(toEnable);\n    disableCollections(toDisable);\n  }\n}\n"
27     }
28   },
29   "settings": {
30     "remappings": [
31       "@openzeppelin/=lib/openzeppelin-contracts/",
32       "ds-test/=lib/forge-std/lib/ds-test/src/",
33       "forge-std/=lib/forge-std/src/",
34       "openzeppelin-contracts/=lib/openzeppelin-contracts/"
35     ],
36     "optimizer": {
37       "enabled": true,
38       "runs": 200
39     },
40     "metadata": {
41       "bytecodeHash": "ipfs",
42       "appendCBOR": true
43     },
44     "outputSelection": {
45       "*": {
46         "*": [
47           "evm.bytecode",
48           "evm.deployedBytecode",
49           "devdoc",
50           "userdoc",
51           "metadata",
52           "abi"
53         ]
54       }
55     },
56     "evmVersion": "london",
57     "libraries": {}
58   }
59 }}