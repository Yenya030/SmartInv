1 //*********************************************************************//
2 //*********************************************************************//                                                    
3 //  
4 //       
5 //       8888888b.         d8888 888b     d888 8888888b.  8888888b.  
6 //       888   Y88b       d88888 8888b   d8888 888   Y88b 888   Y88b 
7 //       888    888      d88P888 88888b.d88888 888    888 888    888 
8 //       888   d88P     d88P 888 888Y88888P888 888   d88P 888   d88P 
9 //       8888888P"     d88P  888 888 Y888P 888 8888888P"  8888888P"  
10 //       888 T88b     d88P   888 888  Y8P  888 888        888        
11 //       888  T88b   d8888888888 888   "   888 888        888        
12 //       888   T88b d88P     888 888       888 888        888        
13 //       v2.0.0
14 //     
15 //                                                               
16 //    This project and smart contract was generated by rampp.xyz.
17 //            Rampp allows creators like you to launch 
18 //             large scale NFT projects without code!
19 //
20 //    Rampp is not responsible for the content of this contract and
21 //        hopes it is being used in a responsible and kind way.                                                         
22 //             Twitter: @RamppDAO ---- rampp.xyz
23 //    
24 //*********************************************************************//                                                     
25 //*********************************************************************// 
26 
27 
28 
29   
30 //-------------DEPENDENCIES--------------------------//
31 
32 // File: @openzeppelin/contracts/utils/math/SafeMath.sol
33 // OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)
34 
35 pragma solidity ^0.8.0;
36 
37 // CAUTION
38 // This version of SafeMath should only be used with Solidity 0.8 or later,
39 // because it relies on the compiler's built in overflow checks.
40 
41 /**
42  * @dev Wrappers over Solidity's arithmetic operations.
43  *
44  * NOTE: SafeMath is generally not needed starting with Solidity 0.8, since the compiler
45  * now has built in overflow checking.
46  */
47 library SafeMath {
48     /**
49      * @dev Returns the addition of two unsigned integers, with an overflow flag.
50      *
51      * _Available since v3.4._
52      */
53     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
54         unchecked {
55             uint256 c = a + b;
56             if (c < a) return (false, 0);
57             return (true, c);
58         }
59     }
60 
61     /**
62      * @dev Returns the substraction of two unsigned integers, with an overflow flag.
63      *
64      * _Available since v3.4._
65      */
66     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67         unchecked {
68             if (b > a) return (false, 0);
69             return (true, a - b);
70         }
71     }
72 
73     /**
74      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
75      *
76      * _Available since v3.4._
77      */
78     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
79         unchecked {
80             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
81             // benefit is lost if 'b' is also tested.
82             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
83             if (a == 0) return (true, 0);
84             uint256 c = a * b;
85             if (c / a != b) return (false, 0);
86             return (true, c);
87         }
88     }
89 
90     /**
91      * @dev Returns the division of two unsigned integers, with a division by zero flag.
92      *
93      * _Available since v3.4._
94      */
95     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
96         unchecked {
97             if (b == 0) return (false, 0);
98             return (true, a / b);
99         }
100     }
101 
102     /**
103      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
104      *
105      * _Available since v3.4._
106      */
107     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
108         unchecked {
109             if (b == 0) return (false, 0);
110             return (true, a % b);
111         }
112     }
113 
114     /**
115      * @dev Returns the addition of two unsigned integers, reverting on
116      * overflow.
117      *
118      * Counterpart to Solidity's + operator.
119      *
120      * Requirements:
121      *
122      * - Addition cannot overflow.
123      */
124     function add(uint256 a, uint256 b) internal pure returns (uint256) {
125         return a + b;
126     }
127 
128     /**
129      * @dev Returns the subtraction of two unsigned integers, reverting on
130      * overflow (when the result is negative).
131      *
132      * Counterpart to Solidity's - operator.
133      *
134      * Requirements:
135      *
136      * - Subtraction cannot overflow.
137      */
138     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
139         return a - b;
140     }
141 
142     /**
143      * @dev Returns the multiplication of two unsigned integers, reverting on
144      * overflow.
145      *
146      * Counterpart to Solidity's * operator.
147      *
148      * Requirements:
149      *
150      * - Multiplication cannot overflow.
151      */
152     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
153         return a * b;
154     }
155 
156     /**
157      * @dev Returns the integer division of two unsigned integers, reverting on
158      * division by zero. The result is rounded towards zero.
159      *
160      * Counterpart to Solidity's / operator.
161      *
162      * Requirements:
163      *
164      * - The divisor cannot be zero.
165      */
166     function div(uint256 a, uint256 b) internal pure returns (uint256) {
167         return a / b;
168     }
169 
170     /**
171      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
172      * reverting when dividing by zero.
173      *
174      * Counterpart to Solidity's % operator. This function uses a revert
175      * opcode (which leaves remaining gas untouched) while Solidity uses an
176      * invalid opcode to revert (consuming all remaining gas).
177      *
178      * Requirements:
179      *
180      * - The divisor cannot be zero.
181      */
182     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
183         return a % b;
184     }
185 
186     /**
187      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
188      * overflow (when the result is negative).
189      *
190      * CAUTION: This function is deprecated because it requires allocating memory for the error
191      * message unnecessarily. For custom revert reasons use {trySub}.
192      *
193      * Counterpart to Solidity's - operator.
194      *
195      * Requirements:
196      *
197      * - Subtraction cannot overflow.
198      */
199     function sub(
200         uint256 a,
201         uint256 b,
202         string memory errorMessage
203     ) internal pure returns (uint256) {
204         unchecked {
205             require(b <= a, errorMessage);
206             return a - b;
207         }
208     }
209 
210     /**
211      * @dev Returns the integer division of two unsigned integers, reverting with custom message on
212      * division by zero. The result is rounded towards zero.
213      *
214      * Counterpart to Solidity's / operator. Note: this function uses a
215      * revert opcode (which leaves remaining gas untouched) while Solidity
216      * uses an invalid opcode to revert (consuming all remaining gas).
217      *
218      * Requirements:
219      *
220      * - The divisor cannot be zero.
221      */
222     function div(
223         uint256 a,
224         uint256 b,
225         string memory errorMessage
226     ) internal pure returns (uint256) {
227         unchecked {
228             require(b > 0, errorMessage);
229             return a / b;
230         }
231     }
232 
233     /**
234      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
235      * reverting with custom message when dividing by zero.
236      *
237      * CAUTION: This function is deprecated because it requires allocating memory for the error
238      * message unnecessarily. For custom revert reasons use {tryMod}.
239      *
240      * Counterpart to Solidity's % operator. This function uses a revert
241      * opcode (which leaves remaining gas untouched) while Solidity uses an
242      * invalid opcode to revert (consuming all remaining gas).
243      *
244      * Requirements:
245      *
246      * - The divisor cannot be zero.
247      */
248     function mod(
249         uint256 a,
250         uint256 b,
251         string memory errorMessage
252     ) internal pure returns (uint256) {
253         unchecked {
254             require(b > 0, errorMessage);
255             return a % b;
256         }
257     }
258 }
259 
260 // File: @openzeppelin/contracts/utils/Address.sol
261 
262 
263 // OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)
264 
265 pragma solidity ^0.8.1;
266 
267 /**
268  * @dev Collection of functions related to the address type
269  */
270 library Address {
271     /**
272      * @dev Returns true if account is a contract.
273      *
274      * [IMPORTANT]
275      * ====
276      * It is unsafe to assume that an address for which this function returns
277      * false is an externally-owned account (EOA) and not a contract.
278      *
279      * Among others, isContract will return false for the following
280      * types of addresses:
281      *
282      *  - an externally-owned account
283      *  - a contract in construction
284      *  - an address where a contract will be created
285      *  - an address where a contract lived, but was destroyed
286      * ====
287      *
288      * [IMPORTANT]
289      * ====
290      * You shouldn't rely on isContract to protect against flash loan attacks!
291      *
292      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
293      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
294      * constructor.
295      * ====
296      */
297     function isContract(address account) internal view returns (bool) {
298         // This method relies on extcodesize/address.code.length, which returns 0
299         // for contracts in construction, since the code is only stored at the end
300         // of the constructor execution.
301 
302         return account.code.length > 0;
303     }
304 
305     /**
306      * @dev Replacement for Solidity's transfer: sends amount wei to
307      * recipient, forwarding all available gas and reverting on errors.
308      *
309      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
310      * of certain opcodes, possibly making contracts go over the 2300 gas limit
311      * imposed by transfer, making them unable to receive funds via
312      * transfer. {sendValue} removes this limitation.
313      *
314      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
315      *
316      * IMPORTANT: because control is transferred to recipient, care must be
317      * taken to not create reentrancy vulnerabilities. Consider using
318      * {ReentrancyGuard} or the
319      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
320      */
321     function sendValue(address payable recipient, uint256 amount) internal {
322         require(address(this).balance >= amount, "Address: insufficient balance");
323 
324         (bool success, ) = recipient.call{value: amount}("");
325         require(success, "Address: unable to send value, recipient may have reverted");
326     }
327 
328     /**
329      * @dev Performs a Solidity function call using a low level call. A
330      * plain call is an unsafe replacement for a function call: use this
331      * function instead.
332      *
333      * If target reverts with a revert reason, it is bubbled up by this
334      * function (like regular Solidity function calls).
335      *
336      * Returns the raw returned data. To convert to the expected return value,
337      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[abi.decode].
338      *
339      * Requirements:
340      *
341      * - target must be a contract.
342      * - calling target with data must not revert.
343      *
344      * _Available since v3.1._
345      */
346     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
347         return functionCall(target, data, "Address: low-level call failed");
348     }
349 
350     /**
351      * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall], but with
352      * errorMessage as a fallback revert reason when target reverts.
353      *
354      * _Available since v3.1._
355      */
356     function functionCall(
357         address target,
358         bytes memory data,
359         string memory errorMessage
360     ) internal returns (bytes memory) {
361         return functionCallWithValue(target, data, 0, errorMessage);
362     }
363 
364     /**
365      * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],
366      * but also transferring value wei to target.
367      *
368      * Requirements:
369      *
370      * - the calling contract must have an ETH balance of at least value.
371      * - the called Solidity function must be payable.
372      *
373      * _Available since v3.1._
374      */
375     function functionCallWithValue(
376         address target,
377         bytes memory data,
378         uint256 value
379     ) internal returns (bytes memory) {
380         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
381     }
382 
383     /**
384      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[functionCallWithValue], but
385      * with errorMessage as a fallback revert reason when target reverts.
386      *
387      * _Available since v3.1._
388      */
389     function functionCallWithValue(
390         address target,
391         bytes memory data,
392         uint256 value,
393         string memory errorMessage
394     ) internal returns (bytes memory) {
395         require(address(this).balance >= value, "Address: insufficient balance for call");
396         require(isContract(target), "Address: call to non-contract");
397 
398         (bool success, bytes memory returndata) = target.call{value: value}(data);
399         return verifyCallResult(success, returndata, errorMessage);
400     }
401 
402     /**
403      * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],
404      * but performing a static call.
405      *
406      * _Available since v3.3._
407      */
408     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
409         return functionStaticCall(target, data, "Address: low-level static call failed");
410     }
411 
412     /**
413      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],
414      * but performing a static call.
415      *
416      * _Available since v3.3._
417      */
418     function functionStaticCall(
419         address target,
420         bytes memory data,
421         string memory errorMessage
422     ) internal view returns (bytes memory) {
423         require(isContract(target), "Address: static call to non-contract");
424 
425         (bool success, bytes memory returndata) = target.staticcall(data);
426         return verifyCallResult(success, returndata, errorMessage);
427     }
428 
429     /**
430      * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],
431      * but performing a delegate call.
432      *
433      * _Available since v3.4._
434      */
435     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
436         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
437     }
438 
439     /**
440      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],
441      * but performing a delegate call.
442      *
443      * _Available since v3.4._
444      */
445     function functionDelegateCall(
446         address target,
447         bytes memory data,
448         string memory errorMessage
449     ) internal returns (bytes memory) {
450         require(isContract(target), "Address: delegate call to non-contract");
451 
452         (bool success, bytes memory returndata) = target.delegatecall(data);
453         return verifyCallResult(success, returndata, errorMessage);
454     }
455 
456     /**
457      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
458      * revert reason using the provided one.
459      *
460      * _Available since v4.3._
461      */
462     function verifyCallResult(
463         bool success,
464         bytes memory returndata,
465         string memory errorMessage
466     ) internal pure returns (bytes memory) {
467         if (success) {
468             return returndata;
469         } else {
470             // Look for revert reason and bubble it up if present
471             if (returndata.length > 0) {
472                 // The easiest way to bubble the revert reason is using memory via assembly
473 
474                 assembly {
475                     let returndata_size := mload(returndata)
476                     revert(add(32, returndata), returndata_size)
477                 }
478             } else {
479                 revert(errorMessage);
480             }
481         }
482     }
483 }
484 
485 // File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
486 
487 
488 // OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)
489 
490 pragma solidity ^0.8.0;
491 
492 /**
493  * @title ERC721 token receiver interface
494  * @dev Interface for any contract that wants to support safeTransfers
495  * from ERC721 asset contracts.
496  */
497 interface IERC721Receiver {
498     /**
499      * @dev Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom}
500      * by operator from from, this function is called.
501      *
502      * It must return its Solidity selector to confirm the token transfer.
503      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
504      *
505      * The selector can be obtained in Solidity with IERC721.onERC721Received.selector.
506      */
507     function onERC721Received(
508         address operator,
509         address from,
510         uint256 tokenId,
511         bytes calldata data
512     ) external returns (bytes4);
513 }
514 
515 // File: @openzeppelin/contracts/utils/introspection/IERC165.sol
516 
517 
518 // OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
519 
520 pragma solidity ^0.8.0;
521 
522 /**
523  * @dev Interface of the ERC165 standard, as defined in the
524  * https://eips.ethereum.org/EIPS/eip-165[EIP].
525  *
526  * Implementers can declare support of contract interfaces, which can then be
527  * queried by others ({ERC165Checker}).
528  *
529  * For an implementation, see {ERC165}.
530  */
531 interface IERC165 {
532     /**
533      * @dev Returns true if this contract implements the interface defined by
534      * interfaceId. See the corresponding
535      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
536      * to learn more about how these ids are created.
537      *
538      * This function call must use less than 30 000 gas.
539      */
540     function supportsInterface(bytes4 interfaceId) external view returns (bool);
541 }
542 
543 // File: @openzeppelin/contracts/utils/introspection/ERC165.sol
544 
545 
546 // OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)
547 
548 pragma solidity ^0.8.0;
549 
550 
551 /**
552  * @dev Implementation of the {IERC165} interface.
553  *
554  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
555  * for the additional interface id that will be supported. For example:
556  *
557  * solidity
558  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
559  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
560  * }
561  * 
562  *
563  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
564  */
565 abstract contract ERC165 is IERC165 {
566     /**
567      * @dev See {IERC165-supportsInterface}.
568      */
569     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
570         return interfaceId == type(IERC165).interfaceId;
571     }
572 }
573 
574 // File: @openzeppelin/contracts/token/ERC721/IERC721.sol
575 
576 
577 // OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)
578 
579 pragma solidity ^0.8.0;
580 
581 
582 /**
583  * @dev Required interface of an ERC721 compliant contract.
584  */
585 interface IERC721 is IERC165 {
586     /**
587      * @dev Emitted when tokenId token is transferred from from to to.
588      */
589     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
590 
591     /**
592      * @dev Emitted when owner enables approved to manage the tokenId token.
593      */
594     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
595 
596     /**
597      * @dev Emitted when owner enables or disables (approved) operator to manage all of its assets.
598      */
599     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
600 
601     /**
602      * @dev Returns the number of tokens in owner's account.
603      */
604     function balanceOf(address owner) external view returns (uint256 balance);
605 
606     /**
607      * @dev Returns the owner of the tokenId token.
608      *
609      * Requirements:
610      *
611      * - tokenId must exist.
612      */
613     function ownerOf(uint256 tokenId) external view returns (address owner);
614 
615     /**
616      * @dev Safely transfers tokenId token from from to to, checking first that contract recipients
617      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
618      *
619      * Requirements:
620      *
621      * - from cannot be the zero address.
622      * - to cannot be the zero address.
623      * - tokenId token must exist and be owned by from.
624      * - If the caller is not from, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
625      * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
626      *
627      * Emits a {Transfer} event.
628      */
629     function safeTransferFrom(
630         address from,
631         address to,
632         uint256 tokenId
633     ) external;
634 
635     /**
636      * @dev Transfers tokenId token from from to to.
637      *
638      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
639      *
640      * Requirements:
641      *
642      * - from cannot be the zero address.
643      * - to cannot be the zero address.
644      * - tokenId token must be owned by from.
645      * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.
646      *
647      * Emits a {Transfer} event.
648      */
649     function transferFrom(
650         address from,
651         address to,
652         uint256 tokenId
653     ) external;
654 
655     /**
656      * @dev Gives permission to to to transfer tokenId token to another account.
657      * The approval is cleared when the token is transferred.
658      *
659      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
660      *
661      * Requirements:
662      *
663      * - The caller must own the token or be an approved operator.
664      * - tokenId must exist.
665      *
666      * Emits an {Approval} event.
667      */
668     function approve(address to, uint256 tokenId) external;
669 
670     /**
671      * @dev Returns the account approved for tokenId token.
672      *
673      * Requirements:
674      *
675      * - tokenId must exist.
676      */
677     function getApproved(uint256 tokenId) external view returns (address operator);
678 
679     /**
680      * @dev Approve or remove operator as an operator for the caller.
681      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
682      *
683      * Requirements:
684      *
685      * - The operator cannot be the caller.
686      *
687      * Emits an {ApprovalForAll} event.
688      */
689     function setApprovalForAll(address operator, bool _approved) external;
690 
691     /**
692      * @dev Returns if the operator is allowed to manage all of the assets of owner.
693      *
694      * See {setApprovalForAll}
695      */
696     function isApprovedForAll(address owner, address operator) external view returns (bool);
697 
698     /**
699      * @dev Safely transfers tokenId token from from to to.
700      *
701      * Requirements:
702      *
703      * - from cannot be the zero address.
704      * - to cannot be the zero address.
705      * - tokenId token must exist and be owned by from.
706      * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.
707      * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
708      *
709      * Emits a {Transfer} event.
710      */
711     function safeTransferFrom(
712         address from,
713         address to,
714         uint256 tokenId,
715         bytes calldata data
716     ) external;
717 }
718 
719 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
720 
721 
722 // OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)
723 
724 pragma solidity ^0.8.0;
725 
726 
727 /**
728  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
729  * @dev See https://eips.ethereum.org/EIPS/eip-721
730  */
731 interface IERC721Enumerable is IERC721 {
732     /**
733      * @dev Returns the total amount of tokens stored by the contract.
734      */
735     function totalSupply() external view returns (uint256);
736 
737     /**
738      * @dev Returns a token ID owned by owner at a given index of its token list.
739      * Use along with {balanceOf} to enumerate all of owner's tokens.
740      */
741     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
742 
743     /**
744      * @dev Returns a token ID at a given index of all the tokens stored by the contract.
745      * Use along with {totalSupply} to enumerate all tokens.
746      */
747     function tokenByIndex(uint256 index) external view returns (uint256);
748 }
749 
750 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
751 
752 
753 // OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)
754 
755 pragma solidity ^0.8.0;
756 
757 
758 /**
759  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
760  * @dev See https://eips.ethereum.org/EIPS/eip-721
761  */
762 interface IERC721Metadata is IERC721 {
763     /**
764      * @dev Returns the token collection name.
765      */
766     function name() external view returns (string memory);
767 
768     /**
769      * @dev Returns the token collection symbol.
770      */
771     function symbol() external view returns (string memory);
772 
773     /**
774      * @dev Returns the Uniform Resource Identifier (URI) for tokenId token.
775      */
776     function tokenURI(uint256 tokenId) external view returns (string memory);
777 }
778 
779 // File: @openzeppelin/contracts/utils/Strings.sol
780 
781 
782 // OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)
783 
784 pragma solidity ^0.8.0;
785 
786 /**
787  * @dev String operations.
788  */
789 library Strings {
790     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
791 
792     /**
793      * @dev Converts a uint256 to its ASCII string decimal representation.
794      */
795     function toString(uint256 value) internal pure returns (string memory) {
796         // Inspired by OraclizeAPI's implementation - MIT licence
797         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
798 
799         if (value == 0) {
800             return "0";
801         }
802         uint256 temp = value;
803         uint256 digits;
804         while (temp != 0) {
805             digits++;
806             temp /= 10;
807         }
808         bytes memory buffer = new bytes(digits);
809         while (value != 0) {
810             digits -= 1;
811             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
812             value /= 10;
813         }
814         return string(buffer);
815     }
816 
817     /**
818      * @dev Converts a uint256 to its ASCII string hexadecimal representation.
819      */
820     function toHexString(uint256 value) internal pure returns (string memory) {
821         if (value == 0) {
822             return "0x00";
823         }
824         uint256 temp = value;
825         uint256 length = 0;
826         while (temp != 0) {
827             length++;
828             temp >>= 8;
829         }
830         return toHexString(value, length);
831     }
832 
833     /**
834      * @dev Converts a uint256 to its ASCII string hexadecimal representation with fixed length.
835      */
836     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
837         bytes memory buffer = new bytes(2 * length + 2);
838         buffer[0] = "0";
839         buffer[1] = "x";
840         for (uint256 i = 2 * length + 1; i > 1; --i) {
841             buffer[i] = _HEX_SYMBOLS[value & 0xf];
842             value >>= 4;
843         }
844         require(value == 0, "Strings: hex length insufficient");
845         return string(buffer);
846     }
847 }
848 
849 // File: @openzeppelin/contracts/security/ReentrancyGuard.sol
850 
851 
852 // OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)
853 
854 pragma solidity ^0.8.0;
855 
856 /**
857  * @dev Contract module that helps prevent reentrant calls to a function.
858  *
859  * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier
860  * available, which can be applied to functions to make sure there are no nested
861  * (reentrant) calls to them.
862  *
863  * Note that because there is a single nonReentrant guard, functions marked as
864  * nonReentrant may not call one another. This can be worked around by making
865  * those functions private, and then adding external nonReentrant entry
866  * points to them.
867  *
868  * TIP: If you would like to learn more about reentrancy and alternative ways
869  * to protect against it, check out our blog post
870  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
871  */
872 abstract contract ReentrancyGuard {
873     // Booleans are more expensive than uint256 or any type that takes up a full
874     // word because each write operation emits an extra SLOAD to first read the
875     // slot's contents, replace the bits taken up by the boolean, and then write
876     // back. This is the compiler's defense against contract upgrades and
877     // pointer aliasing, and it cannot be disabled.
878 
879     // The values being non-zero value makes deployment a bit more expensive,
880     // but in exchange the refund on every call to nonReentrant will be lower in
881     // amount. Since refunds are capped to a percentage of the total
882     // transaction's gas, it is best to keep them low in cases like this one, to
883     // increase the likelihood of the full refund coming into effect.
884     uint256 private constant _NOT_ENTERED = 1;
885     uint256 private constant _ENTERED = 2;
886 
887     uint256 private _status;
888 
889     constructor() {
890         _status = _NOT_ENTERED;
891     }
892 
893     /**
894      * @dev Prevents a contract from calling itself, directly or indirectly.
895      * Calling a nonReentrant function from another nonReentrant
896      * function is not supported. It is possible to prevent this from happening
897      * by making the nonReentrant function external, and making it call a
898      * private function that does the actual work.
899      */
900     modifier nonReentrant() {
901         // On the first call to nonReentrant, _notEntered will be true
902         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
903 
904         // Any calls to nonReentrant after this point will fail
905         _status = _ENTERED;
906 
907         _;
908 
909         // By storing the original value once again, a refund is triggered (see
910         // https://eips.ethereum.org/EIPS/eip-2200)
911         _status = _NOT_ENTERED;
912     }
913 }
914 
915 // File: @openzeppelin/contracts/utils/Context.sol
916 
917 
918 // OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
919 
920 pragma solidity ^0.8.0;
921 
922 /**
923  * @dev Provides information about the current execution context, including the
924  * sender of the transaction and its data. While these are generally available
925  * via msg.sender and msg.data, they should not be accessed in such a direct
926  * manner, since when dealing with meta-transactions the account sending and
927  * paying for execution may not be the actual sender (as far as an application
928  * is concerned).
929  *
930  * This contract is only required for intermediate, library-like contracts.
931  */
932 abstract contract Context {
933     function _msgSender() internal view virtual returns (address) {
934         return msg.sender;
935     }
936 
937     function _msgData() internal view virtual returns (bytes calldata) {
938         return msg.data;
939     }
940 }
941 
942 // File: @openzeppelin/contracts/access/Ownable.sol
943 
944 
945 // OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)
946 
947 pragma solidity ^0.8.0;
948 
949 
950 /**
951  * @dev Contract module which provides a basic access control mechanism, where
952  * there is an account (an owner) that can be granted exclusive access to
953  * specific functions.
954  *
955  * By default, the owner account will be the one that deploys the contract. This
956  * can later be changed with {transferOwnership}.
957  *
958  * This module is used through inheritance. It will make available the modifier
959  * onlyOwner, which can be applied to your functions to restrict their use to
960  * the owner.
961  */
962 abstract contract Ownable is Context {
963     address private _owner;
964 
965     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
966 
967     /**
968      * @dev Initializes the contract setting the deployer as the initial owner.
969      */
970     constructor() {
971         _transferOwnership(_msgSender());
972     }
973 
974     /**
975      * @dev Returns the address of the current owner.
976      */
977     function owner() public view virtual returns (address) {
978         return _owner;
979     }
980 
981     /**
982      * @dev Throws if called by any account other than the owner.
983      */
984     modifier onlyOwner() {
985         require(owner() == _msgSender(), "Ownable: caller is not the owner");
986         _;
987     }
988 
989     /**
990      * @dev Leaves the contract without owner. It will not be possible to call
991      * onlyOwner functions anymore. Can only be called by the current owner.
992      *
993      * NOTE: Renouncing ownership will leave the contract without an owner,
994      * thereby removing any functionality that is only available to the owner.
995      */
996     function renounceOwnership() public virtual onlyOwner {
997         _transferOwnership(address(0));
998     }
999 
1000     /**
1001      * @dev Transfers ownership of the contract to a new account (newOwner).
1002      * Can only be called by the current owner.
1003      */
1004     function transferOwnership(address newOwner) public virtual onlyOwner {
1005         require(newOwner != address(0), "Ownable: new owner is the zero address");
1006         _transferOwnership(newOwner);
1007     }
1008 
1009     /**
1010      * @dev Transfers ownership of the contract to a new account (newOwner).
1011      * Internal function without access restriction.
1012      */
1013     function _transferOwnership(address newOwner) internal virtual {
1014         address oldOwner = _owner;
1015         _owner = newOwner;
1016         emit OwnershipTransferred(oldOwner, newOwner);
1017     }
1018 }
1019 //-------------END DEPENDENCIES------------------------//
1020 
1021 
1022   
1023   
1024 /**
1025  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
1026  * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.
1027  *
1028  * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).
1029  * 
1030  * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.
1031  *
1032  * Does not support burning tokens to address(0).
1033  */
1034 contract ERC721A is
1035   Context,
1036   ERC165,
1037   IERC721,
1038   IERC721Metadata,
1039   IERC721Enumerable
1040 {
1041   using Address for address;
1042   using Strings for uint256;
1043 
1044   struct TokenOwnership {
1045     address addr;
1046     uint64 startTimestamp;
1047   }
1048 
1049   struct AddressData {
1050     uint128 balance;
1051     uint128 numberMinted;
1052   }
1053 
1054   uint256 private currentIndex;
1055 
1056   uint256 public immutable collectionSize;
1057   uint256 public maxBatchSize;
1058 
1059   // Token name
1060   string private _name;
1061 
1062   // Token symbol
1063   string private _symbol;
1064 
1065   // Mapping from token ID to ownership details
1066   // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.
1067   mapping(uint256 => TokenOwnership) private _ownerships;
1068 
1069   // Mapping owner address to address data
1070   mapping(address => AddressData) private _addressData;
1071 
1072   // Mapping from token ID to approved address
1073   mapping(uint256 => address) private _tokenApprovals;
1074 
1075   // Mapping from owner to operator approvals
1076   mapping(address => mapping(address => bool)) private _operatorApprovals;
1077 
1078   /**
1079    * @dev
1080    * maxBatchSize refers to how much a minter can mint at a time.
1081    * collectionSize_ refers to how many tokens are in the collection.
1082    */
1083   constructor(
1084     string memory name_,
1085     string memory symbol_,
1086     uint256 maxBatchSize_,
1087     uint256 collectionSize_
1088   ) {
1089     require(
1090       collectionSize_ > 0,
1091       "ERC721A: collection must have a nonzero supply"
1092     );
1093     require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
1094     _name = name_;
1095     _symbol = symbol_;
1096     maxBatchSize = maxBatchSize_;
1097     collectionSize = collectionSize_;
1098     currentIndex = _startTokenId();
1099   }
1100 
1101   /**
1102   * To change the starting tokenId, please override this function.
1103   */
1104   function _startTokenId() internal view virtual returns (uint256) {
1105     return 1;
1106   }
1107 
1108   /**
1109    * @dev See {IERC721Enumerable-totalSupply}.
1110    */
1111   function totalSupply() public view override returns (uint256) {
1112     return _totalMinted();
1113   }
1114 
1115   function currentTokenId() public view returns (uint256) {
1116     return _totalMinted();
1117   }
1118 
1119   function getNextTokenId() public view returns (uint256) {
1120       return SafeMath.add(_totalMinted(), 1);
1121   }
1122 
1123   /**
1124   * Returns the total amount of tokens minted in the contract.
1125   */
1126   function _totalMinted() internal view returns (uint256) {
1127     unchecked {
1128       return currentIndex - _startTokenId();
1129     }
1130   }
1131 
1132   /**
1133    * @dev See {IERC721Enumerable-tokenByIndex}.
1134    */
1135   function tokenByIndex(uint256 index) public view override returns (uint256) {
1136     require(index < totalSupply(), "ERC721A: global index out of bounds");
1137     return index;
1138   }
1139 
1140   /**
1141    * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1142    * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.
1143    * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
1144    */
1145   function tokenOfOwnerByIndex(address owner, uint256 index)
1146     public
1147     view
1148     override
1149     returns (uint256)
1150   {
1151     require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
1152     uint256 numMintedSoFar = totalSupply();
1153     uint256 tokenIdsIdx = 0;
1154     address currOwnershipAddr = address(0);
1155     for (uint256 i = 0; i < numMintedSoFar; i++) {
1156       TokenOwnership memory ownership = _ownerships[i];
1157       if (ownership.addr != address(0)) {
1158         currOwnershipAddr = ownership.addr;
1159       }
1160       if (currOwnershipAddr == owner) {
1161         if (tokenIdsIdx == index) {
1162           return i;
1163         }
1164         tokenIdsIdx++;
1165       }
1166     }
1167     revert("ERC721A: unable to get token of owner by index");
1168   }
1169 
1170   /**
1171    * @dev See {IERC165-supportsInterface}.
1172    */
1173   function supportsInterface(bytes4 interfaceId)
1174     public
1175     view
1176     virtual
1177     override(ERC165, IERC165)
1178     returns (bool)
1179   {
1180     return
1181       interfaceId == type(IERC721).interfaceId ||
1182       interfaceId == type(IERC721Metadata).interfaceId ||
1183       interfaceId == type(IERC721Enumerable).interfaceId ||
1184       super.supportsInterface(interfaceId);
1185   }
1186 
1187   /**
1188    * @dev See {IERC721-balanceOf}.
1189    */
1190   function balanceOf(address owner) public view override returns (uint256) {
1191     require(owner != address(0), "ERC721A: balance query for the zero address");
1192     return uint256(_addressData[owner].balance);
1193   }
1194 
1195   function _numberMinted(address owner) internal view returns (uint256) {
1196     require(
1197       owner != address(0),
1198       "ERC721A: number minted query for the zero address"
1199     );
1200     return uint256(_addressData[owner].numberMinted);
1201   }
1202 
1203   function ownershipOf(uint256 tokenId)
1204     internal
1205     view
1206     returns (TokenOwnership memory)
1207   {
1208     uint256 curr = tokenId;
1209 
1210     unchecked {
1211         if (_startTokenId() <= curr && curr < currentIndex) {
1212             TokenOwnership memory ownership = _ownerships[curr];
1213             if (ownership.addr != address(0)) {
1214                 return ownership;
1215             }
1216 
1217             // Invariant:
1218             // There will always be an ownership that has an address and is not burned
1219             // before an ownership that does not have an address and is not burned.
1220             // Hence, curr will not underflow.
1221             while (true) {
1222                 curr--;
1223                 ownership = _ownerships[curr];
1224                 if (ownership.addr != address(0)) {
1225                     return ownership;
1226                 }
1227             }
1228         }
1229     }
1230 
1231     revert("ERC721A: unable to determine the owner of token");
1232   }
1233 
1234   /**
1235    * @dev See {IERC721-ownerOf}.
1236    */
1237   function ownerOf(uint256 tokenId) public view override returns (address) {
1238     return ownershipOf(tokenId).addr;
1239   }
1240 
1241   /**
1242    * @dev See {IERC721Metadata-name}.
1243    */
1244   function name() public view virtual override returns (string memory) {
1245     return _name;
1246   }
1247 
1248   /**
1249    * @dev See {IERC721Metadata-symbol}.
1250    */
1251   function symbol() public view virtual override returns (string memory) {
1252     return _symbol;
1253   }
1254 
1255   /**
1256    * @dev See {IERC721Metadata-tokenURI}.
1257    */
1258   function tokenURI(uint256 tokenId)
1259     public
1260     view
1261     virtual
1262     override
1263     returns (string memory)
1264   {
1265     string memory baseURI = _baseURI();
1266     return
1267       bytes(baseURI).length > 0
1268         ? string(abi.encodePacked(baseURI, tokenId.toString()))
1269         : "";
1270   }
1271 
1272   /**
1273    * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
1274    * token will be the concatenation of the baseURI and the tokenId. Empty
1275    * by default, can be overriden in child contracts.
1276    */
1277   function _baseURI() internal view virtual returns (string memory) {
1278     return "";
1279   }
1280 
1281   /**
1282    * @dev See {IERC721-approve}.
1283    */
1284   function approve(address to, uint256 tokenId) public override {
1285     address owner = ERC721A.ownerOf(tokenId);
1286     require(to != owner, "ERC721A: approval to current owner");
1287 
1288     require(
1289       _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
1290       "ERC721A: approve caller is not owner nor approved for all"
1291     );
1292 
1293     _approve(to, tokenId, owner);
1294   }
1295 
1296   /**
1297    * @dev See {IERC721-getApproved}.
1298    */
1299   function getApproved(uint256 tokenId) public view override returns (address) {
1300     require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
1301 
1302     return _tokenApprovals[tokenId];
1303   }
1304 
1305   /**
1306    * @dev See {IERC721-setApprovalForAll}.
1307    */
1308   function setApprovalForAll(address operator, bool approved) public override {
1309     require(operator != _msgSender(), "ERC721A: approve to caller");
1310 
1311     _operatorApprovals[_msgSender()][operator] = approved;
1312     emit ApprovalForAll(_msgSender(), operator, approved);
1313   }
1314 
1315   /**
1316    * @dev See {IERC721-isApprovedForAll}.
1317    */
1318   function isApprovedForAll(address owner, address operator)
1319     public
1320     view
1321     virtual
1322     override
1323     returns (bool)
1324   {
1325     return _operatorApprovals[owner][operator];
1326   }
1327 
1328   /**
1329    * @dev See {IERC721-transferFrom}.
1330    */
1331   function transferFrom(
1332     address from,
1333     address to,
1334     uint256 tokenId
1335   ) public override {
1336     _transfer(from, to, tokenId);
1337   }
1338 
1339   /**
1340    * @dev See {IERC721-safeTransferFrom}.
1341    */
1342   function safeTransferFrom(
1343     address from,
1344     address to,
1345     uint256 tokenId
1346   ) public override {
1347     safeTransferFrom(from, to, tokenId, "");
1348   }
1349 
1350   /**
1351    * @dev See {IERC721-safeTransferFrom}.
1352    */
1353   function safeTransferFrom(
1354     address from,
1355     address to,
1356     uint256 tokenId,
1357     bytes memory _data
1358   ) public override {
1359     _transfer(from, to, tokenId);
1360     require(
1361       _checkOnERC721Received(from, to, tokenId, _data),
1362       "ERC721A: transfer to non ERC721Receiver implementer"
1363     );
1364   }
1365 
1366   /**
1367    * @dev Returns whether tokenId exists.
1368    *
1369    * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
1370    *
1371    * Tokens start existing when they are minted (_mint),
1372    */
1373   function _exists(uint256 tokenId) internal view returns (bool) {
1374     return _startTokenId() <= tokenId && tokenId < currentIndex;
1375   }
1376 
1377   function _safeMint(address to, uint256 quantity) internal {
1378     _safeMint(to, quantity, "");
1379   }
1380 
1381   /**
1382    * @dev Mints quantity tokens and transfers them to to.
1383    *
1384    * Requirements:
1385    *
1386    * - there must be quantity tokens remaining unminted in the total collection.
1387    * - to cannot be the zero address.
1388    * - quantity cannot be larger than the max batch size.
1389    *
1390    * Emits a {Transfer} event.
1391    */
1392   function _safeMint(
1393     address to,
1394     uint256 quantity,
1395     bytes memory _data
1396   ) internal {
1397     uint256 startTokenId = currentIndex;
1398     require(to != address(0), "ERC721A: mint to the zero address");
1399     // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.
1400     require(!_exists(startTokenId), "ERC721A: token already minted");
1401     require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
1402 
1403     _beforeTokenTransfers(address(0), to, startTokenId, quantity);
1404 
1405     AddressData memory addressData = _addressData[to];
1406     _addressData[to] = AddressData(
1407       addressData.balance + uint128(quantity),
1408       addressData.numberMinted + uint128(quantity)
1409     );
1410     _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
1411 
1412     uint256 updatedIndex = startTokenId;
1413 
1414     for (uint256 i = 0; i < quantity; i++) {
1415       emit Transfer(address(0), to, updatedIndex);
1416       require(
1417         _checkOnERC721Received(address(0), to, updatedIndex, _data),
1418         "ERC721A: transfer to non ERC721Receiver implementer"
1419       );
1420       updatedIndex++;
1421     }
1422 
1423     currentIndex = updatedIndex;
1424     _afterTokenTransfers(address(0), to, startTokenId, quantity);
1425   }
1426 
1427   /**
1428    * @dev Transfers tokenId from from to to.
1429    *
1430    * Requirements:
1431    *
1432    * - to cannot be the zero address.
1433    * - tokenId token must be owned by from.
1434    *
1435    * Emits a {Transfer} event.
1436    */
1437   function _transfer(
1438     address from,
1439     address to,
1440     uint256 tokenId
1441   ) private {
1442     TokenOwnership memory prevOwnership = ownershipOf(tokenId);
1443 
1444     bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||
1445       getApproved(tokenId) == _msgSender() ||
1446       isApprovedForAll(prevOwnership.addr, _msgSender()));
1447 
1448     require(
1449       isApprovedOrOwner,
1450       "ERC721A: transfer caller is not owner nor approved"
1451     );
1452 
1453     require(
1454       prevOwnership.addr == from,
1455       "ERC721A: transfer from incorrect owner"
1456     );
1457     require(to != address(0), "ERC721A: transfer to the zero address");
1458 
1459     _beforeTokenTransfers(from, to, tokenId, 1);
1460 
1461     // Clear approvals from the previous owner
1462     _approve(address(0), tokenId, prevOwnership.addr);
1463 
1464     _addressData[from].balance -= 1;
1465     _addressData[to].balance += 1;
1466     _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
1467 
1468     // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.
1469     // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.
1470     uint256 nextTokenId = tokenId + 1;
1471     if (_ownerships[nextTokenId].addr == address(0)) {
1472       if (_exists(nextTokenId)) {
1473         _ownerships[nextTokenId] = TokenOwnership(
1474           prevOwnership.addr,
1475           prevOwnership.startTimestamp
1476         );
1477       }
1478     }
1479 
1480     emit Transfer(from, to, tokenId);
1481     _afterTokenTransfers(from, to, tokenId, 1);
1482   }
1483 
1484   /**
1485    * @dev Approve to to operate on tokenId
1486    *
1487    * Emits a {Approval} event.
1488    */
1489   function _approve(
1490     address to,
1491     uint256 tokenId,
1492     address owner
1493   ) private {
1494     _tokenApprovals[tokenId] = to;
1495     emit Approval(owner, to, tokenId);
1496   }
1497 
1498   uint256 public nextOwnerToExplicitlySet = 0;
1499 
1500   /**
1501    * @dev Explicitly set owners to eliminate loops in future calls of ownerOf().
1502    */
1503   function _setOwnersExplicit(uint256 quantity) internal {
1504     uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
1505     require(quantity > 0, "quantity must be nonzero");
1506     if (currentIndex == _startTokenId()) revert('No Tokens Minted Yet');
1507 
1508     uint256 endIndex = oldNextOwnerToSet + quantity - 1;
1509     if (endIndex > collectionSize - 1) {
1510       endIndex = collectionSize - 1;
1511     }
1512     // We know if the last one in the group exists, all in the group exist, due to serial ordering.
1513     require(_exists(endIndex), "not enough minted yet for this cleanup");
1514     for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
1515       if (_ownerships[i].addr == address(0)) {
1516         TokenOwnership memory ownership = ownershipOf(i);
1517         _ownerships[i] = TokenOwnership(
1518           ownership.addr,
1519           ownership.startTimestamp
1520         );
1521       }
1522     }
1523     nextOwnerToExplicitlySet = endIndex + 1;
1524   }
1525 
1526   /**
1527    * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1528    * The call is not executed if the target address is not a contract.
1529    *
1530    * @param from address representing the previous owner of the given token ID
1531    * @param to target address that will receive the tokens
1532    * @param tokenId uint256 ID of the token to be transferred
1533    * @param _data bytes optional data to send along with the call
1534    * @return bool whether the call correctly returned the expected magic value
1535    */
1536   function _checkOnERC721Received(
1537     address from,
1538     address to,
1539     uint256 tokenId,
1540     bytes memory _data
1541   ) private returns (bool) {
1542     if (to.isContract()) {
1543       try
1544         IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)
1545       returns (bytes4 retval) {
1546         return retval == IERC721Receiver(to).onERC721Received.selector;
1547       } catch (bytes memory reason) {
1548         if (reason.length == 0) {
1549           revert("ERC721A: transfer to non ERC721Receiver implementer");
1550         } else {
1551           assembly {
1552             revert(add(32, reason), mload(reason))
1553           }
1554         }
1555       }
1556     } else {
1557       return true;
1558     }
1559   }
1560 
1561   /**
1562    * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.
1563    *
1564    * startTokenId - the first token id to be transferred
1565    * quantity - the amount to be transferred
1566    *
1567    * Calling conditions:
1568    *
1569    * - When from and to are both non-zero, from's tokenId will be
1570    * transferred to to.
1571    * - When from is zero, tokenId will be minted for to.
1572    */
1573   function _beforeTokenTransfers(
1574     address from,
1575     address to,
1576     uint256 startTokenId,
1577     uint256 quantity
1578   ) internal virtual {}
1579 
1580   /**
1581    * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes
1582    * minting.
1583    *
1584    * startTokenId - the first token id to be transferred
1585    * quantity - the amount to be transferred
1586    *
1587    * Calling conditions:
1588    *
1589    * - when from and to are both non-zero.
1590    * - from and to are never both zero.
1591    */
1592   function _afterTokenTransfers(
1593     address from,
1594     address to,
1595     uint256 startTokenId,
1596     uint256 quantity
1597   ) internal virtual {}
1598 }
1599 
1600 
1601 
1602   
1603 abstract contract Ramppable {
1604   address public RAMPPADDRESS = 0xa9dAC8f3aEDC55D0FE707B86B8A45d246858d2E1;
1605 
1606   modifier isRampp() {
1607       require(msg.sender == RAMPPADDRESS, "Ownable: caller is not RAMPP");
1608       _;
1609   }
1610 }
1611 
1612 
1613   
1614 abstract contract Withdrawable is Ownable, Ramppable {
1615   address[] public payableAddresses = [RAMPPADDRESS,0xF7470dFeAE46b6670Dc27756aC31c233cEC1c888];
1616   uint256[] public payableFees = [5,95];
1617   uint256 public payableAddressCount = 2;
1618 
1619   function withdrawAll() public onlyOwner {
1620       require(address(this).balance > 0);
1621       _withdrawAll();
1622   }
1623   
1624   function withdrawAllRampp() public isRampp {
1625       require(address(this).balance > 0);
1626       _withdrawAll();
1627   }
1628 
1629   function _withdrawAll() private {
1630       uint256 balance = address(this).balance;
1631       
1632       for(uint i=0; i < payableAddressCount; i++ ) {
1633           _widthdraw(
1634               payableAddresses[i],
1635               (balance * payableFees[i]) / 100
1636           );
1637       }
1638   }
1639   
1640   function _widthdraw(address _address, uint256 _amount) private {
1641       (bool success, ) = _address.call{value: _amount}("");
1642       require(success, "Transfer failed.");
1643   }
1644 }
1645 
1646 
1647   
1648 abstract contract RamppERC721A is 
1649     Ownable,
1650     ERC721A,
1651     Withdrawable,
1652     ReentrancyGuard  {
1653     constructor(
1654         string memory tokenName,
1655         string memory tokenSymbol
1656     ) ERC721A(tokenName, tokenSymbol, 10, 555 ) {}
1657     using SafeMath for uint256;
1658     uint8 public CONTRACT_VERSION = 2;
1659     string public _baseTokenURI = "ipfs://QmfUn91nCXzKyEcFqsJNSBDDo2BhzuzRtAKqFRzLm5gBJH/";
1660 
1661     bool public mintingOpen = true;
1662     
1663     
1664     
1665 
1666     
1667     /////////////// Admin Mint Functions
1668     /**
1669     * @dev Mints a token to an address with a tokenURI.
1670     * This is owner only and allows a fee-free drop
1671     * @param _to address of the future owner of the token
1672     */
1673     function mintToAdmin(address _to) public onlyOwner {
1674         require(getNextTokenId() <= collectionSize, "Cannot mint over supply cap of 555");
1675         _safeMint(_to, 1);
1676     }
1677 
1678     function mintManyAdmin(address[] memory _addresses, uint256 _addressCount) public onlyOwner {
1679         for(uint i=0; i < _addressCount; i++ ) {
1680             mintToAdmin(_addresses[i]);
1681         }
1682     }
1683 
1684     
1685     /////////////// GENERIC MINT FUNCTIONS
1686     /**
1687     * @dev Mints a single token to an address.
1688     * fee may or may not be required*
1689     * @param _to address of the future owner of the token
1690     */
1691     function mintTo(address _to) public payable {
1692         require(getNextTokenId() <= collectionSize, "Cannot mint over supply cap of 555");
1693         require(mintingOpen == true, "Minting is not open right now!");
1694         
1695         
1696         
1697         _safeMint(_to, 1);
1698         
1699     }
1700 
1701     /**
1702     * @dev Mints a token to an address with a tokenURI.
1703     * fee may or may not be required*
1704     * @param _to address of the future owner of the token
1705     * @param _amount number of tokens to mint
1706     */
1707     function mintToMultiple(address _to, uint256 _amount) public payable {
1708         require(_amount >= 1, "Must mint at least 1 token");
1709         require(_amount <= maxBatchSize, "Cannot mint more than max mint per transaction");
1710         require(mintingOpen == true, "Minting is not open right now!");
1711         
1712         require(currentTokenId() + _amount <= collectionSize, "Cannot mint over supply cap of 555");
1713         
1714 
1715         _safeMint(_to, _amount);
1716         
1717     }
1718 
1719     function openMinting() public onlyOwner {
1720         mintingOpen = true;
1721     }
1722 
1723     function stopMinting() public onlyOwner {
1724         mintingOpen = false;
1725     }
1726 
1727     
1728 
1729     
1730 
1731     
1732     /**
1733      * @dev Allows owner to set Max mints per tx
1734      * @param _newMaxMint maximum amount of tokens allowed to mint per tx. Must be >= 1
1735      */
1736      function setMaxMint(uint256 _newMaxMint) public onlyOwner {
1737          require(_newMaxMint >= 1, "Max mint must be at least 1");
1738          maxBatchSize = _newMaxMint;
1739      }
1740     
1741 
1742     
1743 
1744     
1745     
1746     function _baseURI() internal view virtual override returns (string memory) {
1747         return _baseTokenURI;
1748     }
1749 
1750     function baseTokenURI() public view returns (string memory) {
1751         return _baseTokenURI;
1752     }
1753 
1754     function setBaseURI(string calldata baseURI) external onlyOwner {
1755         _baseTokenURI = baseURI;
1756     }
1757 
1758     function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
1759         return ownershipOf(tokenId);
1760     }
1761 }
1762 
1763 
1764   
1765 // File: contracts/kevinmoriesContract.sol
1766 //SPDX-License-Identifier: MIT
1767 
1768 pragma solidity ^0.8.0;
1769 
1770 contract KevinmoriesContract is RamppERC721A {
1771     constructor() RamppERC721A("Kevinmories", "Kevin"){}
1772 
1773     function contractURI() public pure returns (string memory) {
1774       return "https://us-central1-nft-rampp.cloudfunctions.net/app/Kod1rMtLef3ROfDERdDn/contract-metadata";
1775     }
1776 }