1 {{
2   "language": "Solidity",
3   "sources": {
4     "BalloonBurn.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"./IManifoldERC1155.sol\";\nimport \"./IBurnExtension.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BalloonBurn is Ownable {\n    IManifoldERC1155 public balloonContract =\n        IManifoldERC1155(0x1386f70A946Cf9F06E32190cFB2F4F4f18365b87);\n    IBurnExtension public balloonBurn = IBurnExtension(0xfa1B15dF09c2944a91A2F9F10A6133090d4119BD);\n\n    uint256 pinkBurnIndex = 561955056;\n    uint256 blackBurnIndex = 547537136;\n    uint256 blueBurnIndex = 547496176;\n    uint256 greenBurnIndex = 547492080;\n\n    uint256 public ticketTokenId = 2;\n    uint256 public pinkBalloonTokenId = 3;\n    uint256 public blackBalloonTokenId = 4;\n    uint256 public blueBalloonTokenId = 5;\n    uint256 public greenBalloonTokenId = 6;\n\n    uint256[] public ticketTokenIds;\n\n    bool public enabled;\n\n    constructor() {\n        enabled = false;\n\n        ticketTokenIds = new uint256[](1);\n        ticketTokenIds[0] = ticketTokenId;\n    }\n\n    event BalloonMint(\n        address indexed user,\n        uint32 pinkBalloons,\n        uint32 blackBalloons,\n        uint32 blueBalloons,\n        uint32 greenBalloons\n    );\n\n    function burnAndMint(\n        uint32 pinkBalloons,\n        uint32 blackBalloons,\n        uint32 blueBalloons,\n        uint32 greenBalloons\n    ) external {\n        require(enabled, \"BalloonBurn: Contract is not enabled\");\n        require(\n            pinkBalloons + blackBalloons + blueBalloons + greenBalloons > 0,\n            \"BalloonBurn: You must burn at least one ticket\"\n        );\n\n        uint256[] memory ticketAmounts = new uint256[](1);\n        ticketAmounts[0] = pinkBalloons + blackBalloons + blueBalloons + greenBalloons;\n        balloonContract.burn(msg.sender, ticketTokenIds, ticketAmounts);\n\n        address[] memory addresses = new address[](1);\n        addresses[0] = msg.sender;\n        if (pinkBalloons > 0) {\n            uint32[] memory pinkBalloonsArr = new uint32[](1);\n            pinkBalloonsArr[0] = pinkBalloons;\n            balloonBurn.airdrop(\n                address(balloonContract),\n                pinkBurnIndex,\n                addresses,\n                pinkBalloonsArr\n            );\n        }\n        if (blackBalloons > 0) {\n            uint32[] memory blackBalloonsArr = new uint32[](1);\n            blackBalloonsArr[0] = blackBalloons;\n            balloonBurn.airdrop(\n                address(balloonContract),\n                blackBurnIndex,\n                addresses,\n                blackBalloonsArr\n            );\n        }\n        if (blueBalloons > 0) {\n            uint32[] memory blueBalloonsArr = new uint32[](1);\n            blueBalloonsArr[0] = blueBalloons;\n            balloonBurn.airdrop(\n                address(balloonContract),\n                blueBurnIndex,\n                addresses,\n                blueBalloonsArr\n            );\n        }\n        if (greenBalloons > 0) {\n            uint32[] memory greenBalloonsArr = new uint32[](1);\n            greenBalloonsArr[0] = greenBalloons;\n            balloonBurn.airdrop(\n                address(balloonContract),\n                greenBurnIndex,\n                addresses,\n                greenBalloonsArr\n            );\n        }\n\n        emit BalloonMint(msg.sender, pinkBalloons, blackBalloons, blueBalloons, greenBalloons);\n    }\n\n    function setEnabled(bool newState) external onlyOwner {\n        enabled = newState;\n    }\n\n    function getInfo(\n        address user\n    )\n        public\n        view\n        returns (\n            uint256 ticketAmount,\n            uint256 balance,\n            bool hasApproved,\n            bool isEnabled,\n            uint256 pinkBalloonAmount,\n            uint256 blackBalloonAmount,\n            uint256 blueBalloonAmount,\n            uint256 greenBalloonAmount,\n            uint256 pinkBalloonTotalAmount,\n            uint256 blackBalloonTotalAmount,\n            uint256 blueBalloonTotalAmount,\n            uint256 greenBalloonTotalAmount\n        )\n    {\n        if (user == address(0)) {\n            ticketAmount = 0;\n            hasApproved = false;\n            balance = 0;\n\n            pinkBalloonAmount = 0;\n            blackBalloonAmount = 0;\n            blueBalloonAmount = 0;\n            greenBalloonAmount = 0;\n        } else {\n            ticketAmount = balloonContract.balanceOf(user, ticketTokenId);\n            hasApproved = balloonContract.isApprovedForAll(user, address(this));\n            balance = payable(user).balance;\n\n            pinkBalloonAmount = balloonContract.balanceOf(user, pinkBalloonTokenId);\n            blackBalloonAmount = balloonContract.balanceOf(user, blackBalloonTokenId);\n            blueBalloonAmount = balloonContract.balanceOf(user, blueBalloonTokenId);\n            greenBalloonAmount = balloonContract.balanceOf(user, greenBalloonTokenId);\n        }\n\n        isEnabled = enabled;\n\n        pinkBalloonTotalAmount = balloonContract.totalSupply(pinkBalloonTokenId);\n        blackBalloonTotalAmount = balloonContract.totalSupply(blackBalloonTokenId);\n        blueBalloonTotalAmount = balloonContract.totalSupply(blueBalloonTokenId);\n        greenBalloonTotalAmount = balloonContract.totalSupply(greenBalloonTokenId);\n    }\n}\n"
6     },
7     "IBurnExtension.sol": {
8       "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\ninterface IBurnExtension {\n    function airdrop(\n        address creatorContractAddress,\n        uint256 index,\n        address[] calldata recipients,\n        uint32[] calldata amounts\n    ) external;\n}\n"
9     },
10     "IManifoldERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IManifoldERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function mintBaseExisting(\n        address[] calldata to,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) external;\n\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) external;\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 200
27     },
28     "evmVersion": "paris",
29     "remappings": [],
30     "libraries": {},
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     }
43   }
44 }}