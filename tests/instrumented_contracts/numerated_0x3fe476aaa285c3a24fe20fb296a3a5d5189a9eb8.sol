1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "london",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/access/AccessControl.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
34     },
35     "@openzeppelin/contracts/access/IAccessControl.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
37     },
38     "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
40     },
41     "@openzeppelin/contracts/security/Pausable.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
43     },
44     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
46     },
47     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
49     },
50     "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
52     },
53     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
54       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
55     },
56     "@openzeppelin/contracts/utils/Address.sol": {
57       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
58     },
59     "@openzeppelin/contracts/utils/Context.sol": {
60       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
61     },
62     "@openzeppelin/contracts/utils/Strings.sol": {
63       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
64     },
65     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
66       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
67     },
68     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
69       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
70     },
71     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
72       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
73     },
74     "@openzeppelin/contracts/utils/math/Math.sol": {
75       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
76     },
77     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
78       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
79     },
80     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
81       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
82     },
83     "contracts/Controller.sol": {
84       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Staking.sol\";\nimport \"./StakingStorage.sol\";\nimport \"./Converter.sol\";\nimport \"./EnergyStorage.sol\";\nimport \"./helpers/PermissionControl.sol\";\nimport \"./helpers/Util.sol\";\n\n/**\n * @dev ASM Genome Mining - Registry contract\n * @notice We use this contract to manage contracts addresses\n * @notice when we need to update some of them.\n */\ncontract Controller is Util, PermissionControl {\n    Staking private _stakingLogic;\n    StakingStorage private _astoStorage;\n    StakingStorage private _lpStorage;\n    Converter private _converterLogic;\n    EnergyStorage private _energyStorage;\n    EnergyStorage private _lbaEnergyStorage;\n    IERC20 private _astoToken;\n    IERC20 private _lpToken;\n    address private _dao;\n    address private _multisig;\n\n    bool private _initialized;\n\n    uint256 public constant ASTO_TOKEN_ID = 0;\n    uint256 public constant LP_TOKEN_ID = 1;\n\n    event ContractUpgraded(uint256 timestamp, string contractName, address oldAddress, address newAddress);\n\n    constructor(address multisig) {\n        if (!_isContract(multisig)) revert InvalidInput(INVALID_MULTISIG);\n        /**\n         * MULTISIG_ROLE is ONLY used for:\n         * - initalisation controller\n         * - setting periods (mining cycles) for the Converter contract\n         */\n        _grantRole(MULTISIG_ROLE, multisig);\n        _grantRole(DAO_ROLE, multisig);\n        _multisig = multisig;\n    }\n\n    function init(\n        address dao,\n        address astoToken,\n        address astoStorage,\n        address lpToken,\n        address lpStorage,\n        address stakingLogic,\n        address converterLogic,\n        address energyStorage,\n        address lbaEnergyStorage\n    ) external onlyRole(MULTISIG_ROLE) {\n        if (!_initialized) {\n            if (!_isContract(dao)) revert InvalidInput(INVALID_DAO);\n            if (!_isContract(astoToken)) revert InvalidInput(INVALID_ASTO_CONTRACT);\n            if (!_isContract(astoStorage)) revert InvalidInput(INVALID_STAKING_STORAGE);\n            if (!_isContract(lpToken)) revert InvalidInput(INVALID_LP_CONTRACT);\n            if (!_isContract(lpStorage)) revert InvalidInput(INVALID_STAKING_STORAGE);\n            if (!_isContract(stakingLogic)) revert InvalidInput(INVALID_STAKING_LOGIC);\n            if (!_isContract(converterLogic)) revert InvalidInput(INVALID_CONVERTER_LOGIC);\n            if (!_isContract(energyStorage)) revert InvalidInput(INVALID_ENERGY_STORAGE);\n            if (!_isContract(lbaEnergyStorage)) revert InvalidInput(INVALID_ENERGY_STORAGE);\n            _clearRole(DAO_ROLE);\n            _grantRole(DAO_ROLE, dao);\n\n            // Saving addresses on init:\n            _dao = dao;\n            _astoToken = IERC20(astoToken);\n            _astoStorage = StakingStorage(astoStorage);\n            _lpToken = IERC20(lpToken);\n            _lpStorage = StakingStorage(lpStorage);\n            _stakingLogic = Staking(stakingLogic);\n            _converterLogic = Converter(converterLogic);\n            _energyStorage = EnergyStorage(energyStorage);\n            _lbaEnergyStorage = EnergyStorage(lbaEnergyStorage);\n\n            // Initializing contracts\n            _upgradeContracts(\n                astoToken,\n                astoStorage,\n                lpToken,\n                lpStorage,\n                stakingLogic,\n                converterLogic,\n                energyStorage,\n                lbaEnergyStorage\n            );\n            _initialized = true;\n        }\n    }\n\n    /** ----------------------------------\n     * ! Private functions | Setters\n     * ----------------------------------- */\n\n    /**\n     * @notice Each contract has own params to initialize\n     * @notice Contracts with no address specified will be skipped\n     * @dev Internal functions, can be called from constructor OR\n     * @dev after authentication by the public function `upgradeContracts()`\n     */\n    function _upgradeContracts(\n        address astoToken,\n        address astoStorage,\n        address lpToken,\n        address lpStorage,\n        address stakingLogic,\n        address converterLogic,\n        address energyStorage,\n        address lbaEnergyStorage\n    ) internal {\n        if (_isContract(astoToken)) _setAstoToken(astoToken);\n        if (_isContract(astoStorage)) _setAstoStorage(astoStorage);\n        if (_isContract(lpToken)) _setLpToken(lpToken);\n        if (_isContract(lpStorage)) _setLpStorage(lpStorage);\n        if (_isContract(stakingLogic)) _setStakingLogic(stakingLogic);\n        if (_isContract(energyStorage)) _setEnergyStorage(energyStorage);\n        if (_isContract(lbaEnergyStorage)) _setLBAEnergyStorage(lbaEnergyStorage);\n        if (_isContract(converterLogic)) _setConverterLogic(converterLogic);\n        _setController(address(this));\n    }\n\n    function _setDao(address dao) internal {\n        _dao = dao;\n        _clearRole(DAO_ROLE);\n        _grantRole(DAO_ROLE, dao);\n        _grantRole(MULTISIG_ROLE, dao);\n        _stakingLogic.setDao(dao);\n        _converterLogic.setDao(dao);\n    }\n\n    function _setMultisig(address multisig) internal {\n        _multisig = multisig;\n        _clearRole(MULTISIG_ROLE);\n        _grantRole(MULTISIG_ROLE, multisig);\n        _grantRole(MULTISIG_ROLE, _dao);\n        _converterLogic.setMultisig(multisig, _dao);\n    }\n\n    function _setController(address newContract) internal {\n        _stakingLogic.setController(newContract);\n        _astoStorage.setController(newContract);\n        _lpStorage.setController(newContract);\n        _converterLogic.setController(newContract);\n        _energyStorage.setController(newContract);\n        _lbaEnergyStorage.setController(newContract);\n        emit ContractUpgraded(block.timestamp, \"Controller\", address(this), newContract);\n    }\n\n    function _setStakingLogic(address newContract) internal {\n        // revoke consumer role to old staking storage contract\n        if (_isContract(address(_stakingLogic))) {\n            _astoStorage.removeConsumer(address(_stakingLogic));\n            _lpStorage.removeConsumer(address(_stakingLogic));\n        }\n\n        uint256 lockedAsto = _stakingLogic.totalStakedAmount(ASTO_TOKEN_ID);\n        uint256 lockedLp = _stakingLogic.totalStakedAmount(LP_TOKEN_ID);\n\n        _stakingLogic = Staking(newContract);\n        _stakingLogic.init(\n            address(_dao),\n            IERC20(_astoToken),\n            address(_astoStorage),\n            IERC20(_lpToken),\n            address(_lpStorage),\n            lockedAsto,\n            lockedLp\n        );\n        _astoStorage.addConsumer(newContract);\n        _lpStorage.addConsumer(newContract);\n        emit ContractUpgraded(block.timestamp, \"Staking Logic\", address(this), newContract);\n    }\n\n    function _setAstoToken(address newContract) internal {\n        _astoToken = IERC20(newContract);\n        emit ContractUpgraded(block.timestamp, \"ASTO Token\", address(this), newContract);\n    }\n\n    function _setAstoStorage(address newContract) internal {\n        _astoStorage = StakingStorage(newContract);\n        _astoStorage.init(address(_stakingLogic));\n        emit ContractUpgraded(block.timestamp, \"ASTO Staking Storage\", address(this), newContract);\n    }\n\n    function _setLpToken(address newContract) internal {\n        _lpToken = IERC20(newContract);\n        emit ContractUpgraded(block.timestamp, \"LP Token\", address(this), newContract);\n    }\n\n    function _setLpStorage(address newContract) internal {\n        _lpStorage = StakingStorage(newContract);\n        _lpStorage.init(address(_stakingLogic));\n        emit ContractUpgraded(block.timestamp, \"LP Staking Storage\", address(this), newContract);\n    }\n\n    function _setConverterLogic(address newContract) internal {\n        // revoke consumer role to old energy storage contract\n        if (_isContract(address(_converterLogic))) {\n            _lbaEnergyStorage.removeConsumer(address(_converterLogic));\n            _energyStorage.removeConsumer(address(_converterLogic));\n        }\n\n        _converterLogic = Converter(newContract);\n        _converterLogic.init(\n            address(_dao),\n            address(_multisig),\n            address(_energyStorage),\n            address(_lbaEnergyStorage),\n            address(_stakingLogic)\n        );\n        _lbaEnergyStorage.addConsumer(newContract);\n        _energyStorage.addConsumer(newContract);\n        emit ContractUpgraded(block.timestamp, \"Converter Logic\", address(this), newContract);\n    }\n\n    function _setEnergyStorage(address newContract) internal {\n        _energyStorage = EnergyStorage(newContract);\n        _energyStorage.init(address(_converterLogic));\n        emit ContractUpgraded(block.timestamp, \"Energy Storage\", address(this), newContract);\n    }\n\n    function _setLBAEnergyStorage(address newContract) internal {\n        _lbaEnergyStorage = EnergyStorage(newContract);\n        _lbaEnergyStorage.init(address(_converterLogic));\n        emit ContractUpgraded(block.timestamp, \"LBA Energy Storage\", address(this), newContract);\n    }\n\n    /** ----------------------------------\n     * ! External functions | Manager Role\n     * ----------------------------------- */\n\n    /**\n     * @notice The way to upgrade contracts\n     * @notice Only Manager address (_dao wallet) has access to upgrade\n     * @notice All parameters are optional\n     */\n    function upgradeContracts(\n        address astoToken,\n        address astoStorage,\n        address lpToken,\n        address lpStorage,\n        address stakingLogic,\n        address converterLogic,\n        address energyStorage,\n        address lbaEnergyStorage\n    ) external onlyRole(DAO_ROLE) {\n        _upgradeContracts(\n            astoToken,\n            astoStorage,\n            lpToken,\n            lpStorage,\n            stakingLogic,\n            converterLogic,\n            energyStorage,\n            lbaEnergyStorage\n        );\n    }\n\n    function setDao(address dao) external onlyRole(DAO_ROLE) {\n        _setDao(dao);\n    }\n\n    function setMultisig(address multisig) external onlyRole(DAO_ROLE) {\n        _setMultisig(multisig);\n    }\n\n    function setController(address newContract) external onlyRole(DAO_ROLE) {\n        _setController(newContract);\n    }\n\n    function setStakingLogic(address newContract) external onlyRole(DAO_ROLE) {\n        _setStakingLogic(newContract);\n    }\n\n    function setAstoStorage(address newContract) external onlyRole(DAO_ROLE) {\n        _setAstoStorage(newContract);\n    }\n\n    function setLpStorage(address newContract) external onlyRole(DAO_ROLE) {\n        _setLpStorage(newContract);\n    }\n\n    function setConverterLogic(address newContract) external onlyRole(DAO_ROLE) {\n        _setConverterLogic(newContract);\n    }\n\n    function setEnergyStorage(address newContract) external onlyRole(DAO_ROLE) {\n        _setEnergyStorage(newContract);\n    }\n\n    function setLBAEnergyStorage(address newContract) external onlyRole(DAO_ROLE) {\n        _setLBAEnergyStorage(newContract);\n    }\n\n    // DAO and MULTISIG can call this function\n    function pause() external onlyRole(MULTISIG_ROLE) {\n        if (!_stakingLogic.paused()) {\n            _stakingLogic.pause();\n        }\n\n        if (!_converterLogic.paused()) {\n            _converterLogic.pause();\n        }\n    }\n\n    // DAO and MULTISIG can call this function\n    function unpause() external onlyRole(MULTISIG_ROLE) {\n        if (_stakingLogic.paused()) {\n            _stakingLogic.unpause();\n        }\n\n        if (_converterLogic.paused()) {\n            _converterLogic.unpause();\n        }\n    }\n\n    /** ----------------------------------\n     * ! Public functions | Getters\n     * ----------------------------------- */\n\n    function getController() external view returns (address) {\n        return address(this);\n    }\n\n    function getDao() external view returns (address) {\n        return _dao;\n    }\n\n    function getMultisig() external view returns (address) {\n        return _multisig;\n    }\n\n    function getStakingLogic() external view returns (address) {\n        return address(_stakingLogic);\n    }\n\n    function getAstoStorage() external view returns (address) {\n        return address(_astoStorage);\n    }\n\n    function getLpStorage() external view returns (address) {\n        return address(_lpStorage);\n    }\n\n    function getConverterLogic() external view returns (address) {\n        return address(_converterLogic);\n    }\n\n    function getEnergyStorage() external view returns (address) {\n        return address(_energyStorage);\n    }\n\n    function getLBAEnergyStorage() external view returns (address) {\n        return address(_lbaEnergyStorage);\n    }\n}\n"
85     },
86     "contracts/Converter.sol": {
87       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./Staking.sol\";\nimport \"./EnergyStorage.sol\";\nimport \"./helpers/IConverter.sol\";\nimport \"./helpers/IStaking.sol\";\nimport \"./helpers/TimeConstants.sol\";\nimport \"./helpers/Util.sol\";\nimport \"./helpers/PermissionControl.sol\";\nimport \"./interfaces/ILiquidityBootstrapAuction.sol\";\n\n/**\n * @dev ASM Genome Mining - Converter Logic contract\n *\n * This contracts provides functionality for ASTO Energy calculation and conversion.\n * Energy is calculated based on the token staking history from staking contract and multipliers pre-defined for ASTO and LP tokens.\n * Eenrgy can be consumed on multiple purposes.\n */\ncontract Converter is IConverter, IStaking, Util, PermissionControl, Pausable {\n    using SafeMath for uint256;\n\n    bool private _initialized = false;\n\n    uint256 public periodIdCounter = 0;\n    // PeriodId start from 1\n    mapping(uint256 => Period) public periods;\n\n    Staking public stakingLogic_;\n    ILiquidityBootstrapAuction public lba_;\n    EnergyStorage public energyStorage_;\n    EnergyStorage public lbaEnergyStorage_;\n\n    uint256 public constant ASTO_TOKEN_ID = 0;\n    uint256 public constant LP_TOKEN_ID = 1;\n\n    uint256 private _lbaEnergyStartTime;\n    uint256 public lbaEnergyFinishTime;\n\n    event EnergyUsed(address indexed addr, uint256 amount);\n    event LBAEnergyUsed(address indexed addr, uint256 amount);\n    event PeriodAdded(uint256 time, uint256 indexed periodId, Period period);\n    event PeriodUpdated(uint256 time, uint256 indexed periodId, Period period);\n\n    constructor(\n        address controller,\n        address lba,\n        Period[] memory _periods,\n        uint256 lbaEnergyStartTime,\n        uint256 _lbaEnergyFinishTime\n    ) {\n        if (!_isContract(controller)) revert ContractError(INVALID_CONTROLLER);\n        if (!_isContract(lba)) revert ContractError(INVALID_LBA_CONTRACT);\n        lba_ = ILiquidityBootstrapAuction(lba);\n        _grantRole(CONTROLLER_ROLE, controller);\n        _addPeriods(_periods);\n        _lbaEnergyStartTime = lbaEnergyStartTime;\n        lbaEnergyFinishTime = _lbaEnergyFinishTime;\n        _pause();\n    }\n\n    /** ----------------------------------\n     * ! Business logic\n     * ----------------------------------- */\n\n    /**\n     * @dev Get consumed energy amount for address `addr`\n     *\n     * @param addr The wallet address to get consumed energy for\n     * @return Consumed energy amount\n     */\n    function getConsumedEnergy(address addr) public view nonZero(addr) returns (uint256) {\n        return energyStorage_.consumedAmount(addr);\n    }\n\n    /**\n     * @dev Get consumed LBA energy amount for address `addr`\n     *\n     * @param addr The wallet address to get consumed energy for\n     * @return Consumed energy amount\n     */\n    function getConsumedLBAEnergy(address addr) public view nonZero(addr) returns (uint256) {\n        return lbaEnergyStorage_.consumedAmount(addr);\n    }\n\n    /**\n     * @dev Calculate the energy for `addr` based on the staking history  before the endTime of specified period\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount\n     */\n    function calculateEnergy(address addr, uint256 periodId) public view returns (uint256) {\n        uint256 astoEnergyAmount = calculateAstoEnergy(addr, periodId);\n        uint256 lpEnergyAmount = calculateLpEnergy(addr, periodId);\n\n        return (astoEnergyAmount + lpEnergyAmount);\n    }\n\n    /**\n     * @dev Calculate the energy for `addr` based on the staking history  before the endTime of specified period\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount\n     */\n    function calculateAstoEnergy(address addr, uint256 periodId)\n        public\n        view\n        nonZero(addr)\n        validPeriodId(periodId)\n        returns (uint256)\n    {\n        Period memory period = getPeriod(periodId);\n        Stake[] memory astoHistory = stakingLogic_.getHistory(ASTO_TOKEN_ID, addr, period.endTime);\n\n        return _calculateEnergyForToken(astoHistory, period.astoMultiplier, period.endTime);\n    }\n\n    /**\n     * @dev Calculate the energy for `addr` based on the staking history  before the endTime of specified period\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount\n     */\n    function calculateLpEnergy(address addr, uint256 periodId)\n        public\n        view\n        nonZero(addr)\n        validPeriodId(periodId)\n        returns (uint256)\n    {\n        Period memory period = getPeriod(periodId);\n        Stake[] memory lpHistory = stakingLogic_.getHistory(LP_TOKEN_ID, addr, period.endTime);\n\n        return _calculateEnergyForToken(lpHistory, period.lpMultiplier, period.endTime);\n    }\n\n    /**\n     * @dev Calculate the energy for specific staked token\n     *\n     * @param history The staking history for the staked token\n     * @param multiplier The multiplier for staked token\n     * @param periodEndTime Only calculate energy generated before periodEndTime\n     * @return total energy amount for the token\n     */\n    function _calculateEnergyForToken(\n        Stake[] memory history,\n        uint256 multiplier,\n        uint256 periodEndTime\n    ) internal view returns (uint256) {\n        uint256 total = 0;\n\n        uint256 _time = currentTime() < periodEndTime ? currentTime() : periodEndTime;\n        for (uint256 i = history.length; i > 0; --i) {\n            Stake memory stake = history[i - 1];\n            if (_time < stake.time) continue;\n\n            bool lastIndex = i == history.length;\n            uint256 elapsedTime = lastIndex ? _time.sub(stake.time) : history[i].time.sub(stake.time);\n\n            total = total.add(elapsedTime.mul(stake.amount).mul(multiplier));\n        }\n        return total.div(SECONDS_PER_DAY);\n    }\n\n    /**\n     * @dev Calculate available energy generated by keeping LP tokens in LBA contract\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount\n     */\n    function calculateAvailableLBAEnergy(address addr, uint256 periodId) public view returns (uint256) {\n        uint256 lbaEnergyStartTime = getLBAEnergyStartTime();\n        if (currentTime() < lbaEnergyStartTime) return 0;\n\n        Period memory period = getPeriod(periodId);\n        uint256 elapsedTimeInPeriod = currentTime() < period.endTime ? currentTime() : period.endTime;\n        uint256 finishTime = elapsedTimeInPeriod < lbaEnergyFinishTime ? elapsedTimeInPeriod : lbaEnergyFinishTime;\n        uint256 elapsedTime = finishTime - lbaEnergyStartTime;\n        uint256 dailyLbaEnergyAmount = getDailyLBAEnergyProduction(addr, periodId);\n\n        return elapsedTime.mul(dailyLbaEnergyAmount).div(SECONDS_PER_DAY);\n    }\n\n    function isLBAEnergyFinished() public view returns (bool) {\n        return currentTime() > lbaEnergyFinishTime;\n    }\n\n    /**\n     * @dev Get a daily estimation of energy production for ASTO\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount (per day)\n     */\n    function getDailyASTOEnergyProduction(address addr, uint256 periodId) public view nonZero(addr) returns (uint256) {\n        Period memory period = getPeriod(periodId);\n        Stake[] memory history = stakingLogic_.getHistory(ASTO_TOKEN_ID, addr, period.endTime);\n        return history.length > 0 ? history[history.length - 1].amount.mul(period.astoMultiplier) : 0;\n    }\n\n    /**\n     * @dev Get a daily estimation of energy production for ASTO-USDC Uniswap LP token\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount (per day)\n     */\n    function getDailyLPEnergyProduction(address addr, uint256 periodId) public view nonZero(addr) returns (uint256) {\n        Period memory period = getPeriod(periodId);\n        Stake[] memory history = stakingLogic_.getHistory(LP_TOKEN_ID, addr, period.endTime);\n        return history.length > 0 ? history[history.length - 1].amount.mul(period.lpMultiplier) : 0;\n    }\n\n    /**\n     * @dev Get a daily estimate of LBA energy production\n     *\n     * @param addr The wallet address to calculated for\n     * @param periodId The period id for energy calculation\n     * @return energy amount (per day)\n     */\n    function getDailyLBAEnergyProduction(address addr, uint256 periodId) public view nonZero(addr) returns (uint256) {\n        Period memory period = getPeriod(periodId);\n        return lba_.claimableLPAmount(addr).mul(period.lbaLPMultiplier);\n    }\n\n    /**\n     * @dev Get the energy amount available for address `addr`\n     *\n     * @param addr The wallet address to get energy for\n     * @param periodId The period id for energy calculation\n     * @return Energy amount available\n     */\n    function getEnergy(address addr, uint256 periodId) public view virtual returns (uint256) {\n        if (stakingLogic_.lbaMigrated(addr)) {\n            uint256 generatedEnergy = calculateEnergy(addr, periodId);\n            uint256 consumedEnergy = getConsumedEnergy(addr) + getConsumedLBAEnergy(addr);\n            uint256 remainingEnergy = generatedEnergy > consumedEnergy ? generatedEnergy - consumedEnergy : 0;\n            return remainingEnergy;\n        } else {\n            // for LBA participants who didn't migrate LP, still use the old calculation logic that\n            // totalAE = AE remaing from staking + AE remaining from LBA LP\n            uint256 generatedEnergy = calculateEnergy(addr, periodId);\n            uint256 consumedEnergy = getConsumedEnergy(addr);\n            uint256 remainingEnergy = generatedEnergy > consumedEnergy ? generatedEnergy - consumedEnergy : 0;\n            return remainingEnergy + getRemainingLBAEnergy(addr, periodId);\n        }\n    }\n\n    /**\n     * @dev Get the energy amount available for address `addr` within current period\n     *\n     * @param addr The wallet address to get energy for\n     * @return Energy amount available\n     */\n    function getEnergyForCurrentPeriod(address addr) public view returns (uint256) {\n        uint256 periodId = getCurrentPeriodId();\n        return periodId > 0 ? getEnergy(addr, periodId) : 0;\n    }\n\n    /**\n     * @dev Get remaining LBA energy amount available for address `addr` to spend\n     *\n     * @param addr The wallet address to get energy for\n     * @param periodId The period id for energy calculation\n     * @return Energy amount remaining\n     */\n    function getRemainingLBAEnergy(address addr, uint256 periodId) public view returns (uint256) {\n        uint256 availableEnergy = calculateAvailableLBAEnergy(addr, periodId);\n        uint256 consumedEnergy = getConsumedLBAEnergy(addr);\n        if (availableEnergy > 0 && availableEnergy > consumedEnergy) return availableEnergy - consumedEnergy;\n        return 0;\n    }\n\n    /**\n     * @dev Consume energy generated before the endTime of period `periodId`\n     * @dev Energy accumulated by keeping LP tokens in LBA contract will be consumed first\n     *\n     * @param addr The wallet address to consume from\n     * @param periodId The period id for energy consumption\n     * @param amount The amount of energy to consume\n     */\n    function useEnergy(\n        address addr,\n        uint256 periodId,\n        uint256 amount\n    ) external whenNotPaused onlyRole(CONSUMER_ROLE) validPeriodId(periodId) nonZero(addr) {\n        if (amount > getEnergy(addr, periodId)) revert InvalidInput(WRONG_AMOUNT);\n\n        uint256 remainingLBAEnergy = getRemainingLBAEnergy(addr, periodId);\n        uint256 lbaEnergyToSpend = Math.min(amount, remainingLBAEnergy);\n\n        // use LBA energy first\n        if (lbaEnergyToSpend > 0) {\n            lbaEnergyStorage_.increaseConsumedAmount(addr, lbaEnergyToSpend);\n            emit LBAEnergyUsed(addr, lbaEnergyToSpend);\n        }\n\n        uint256 energyToSpend = amount - lbaEnergyToSpend;\n        if (energyToSpend > 0) {\n            energyStorage_.increaseConsumedAmount(addr, energyToSpend);\n            emit EnergyUsed(addr, energyToSpend);\n        }\n    }\n\n    /** ----------------------------------\n     * ! Getters\n     * ----------------------------------- */\n\n    /**\n     * @dev Get period data by period id `periodId`\n     *\n     * @param periodId The id of period to get\n     * @return a Period struct\n     */\n    function getPeriod(uint256 periodId) public view validPeriodId(periodId) returns (Period memory) {\n        return periods[periodId];\n    }\n\n    /**\n     * @notice Get the current period based on current timestamp\n     *\n     * @return current period data\n     */\n    function getCurrentPeriod() external view returns (Period memory) {\n        return periods[getCurrentPeriodId()];\n    }\n\n    /**\n     * @notice Get the current period id based on current timestamp\n     *\n     * @return current periodId\n     */\n    function getCurrentPeriodId() public view returns (uint256) {\n        for (uint256 index = 1; index <= periodIdCounter; ++index) {\n            Period memory p = periods[index];\n            if (currentTime() >= uint256(p.startTime) && currentTime() < uint256(p.endTime)) {\n                return index;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Get the current periodId based on current timestamp\n     * @dev Can be overridden by child contracts\n     *\n     * @return current timestamp\n     */\n    function currentTime() public view virtual returns (uint256) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp;\n    }\n\n    function getLBAEnergyStartTime() public view returns (uint256) {\n        return _lbaEnergyStartTime > 0 ? _lbaEnergyStartTime : lba_.lpTokenReleaseTime();\n    }\n\n    /** ----------------------------------\n     * ! Administration         | Manager\n     * ----------------------------------- */\n\n    /**\n     * @dev Add new periods\n     * @dev Only dao contract has the permission to call this function\n     *\n     * @param _periods The list of periods to be added\n     */\n    function addPeriods(Period[] memory _periods) external onlyRole(MANAGER_ROLE) {\n        _addPeriods(_periods);\n    }\n\n    /**\n     * @notice Update LBA energy finish time. Stop generating AE if curremt time > `finishTime`.\n     * @param finishTime The finish time to be set\n     */\n    function setLBAEnergyFinishTime(uint256 finishTime) external onlyRole(MANAGER_ROLE) {\n        lbaEnergyFinishTime = finishTime;\n    }\n\n    /**\n     * @notice Update staking logic contract address\n     * @param newContract The new staking logic contract address.\n     */\n    function setStakingLogic(address newContract) external onlyRole(MANAGER_ROLE) {\n        stakingLogic_ = Staking(newContract);\n    }\n\n    /**\n     * @dev Add a new period\n     * @dev Only dao contract has the permission to call this function\n     *\n     * @param period The period instance to add\n     */\n    function addPeriod(Period memory period) external onlyRole(MANAGER_ROLE) {\n        _addPeriod(period);\n    }\n\n    /**\n     * @dev Update a period\n     * @dev Only dao contract has the permission to call this function\n     *\n     * @param periodId The period id to update\n     * @param period The period data to update\n     */\n    function updatePeriod(uint256 periodId, Period memory period) external onlyRole(MANAGER_ROLE) {\n        _updatePeriod(periodId, period);\n    }\n\n    /**\n     * @dev Add new periods\n     * @dev This is a private function, can only be called in this contract\n     *\n     * @param _periods The list of periods to be added\n     */\n    function _addPeriods(Period[] memory _periods) internal {\n        for (uint256 i = 0; i < _periods.length; ++i) {\n            _addPeriod(_periods[i]);\n        }\n    }\n\n    /**\n     * @dev Add a new period\n     * @dev This is an internal function\n     *\n     * @param period The period instance to add\n     */\n    function _addPeriod(Period memory period) internal {\n        periods[++periodIdCounter] = period;\n        emit PeriodAdded(currentTime(), periodIdCounter, period);\n    }\n\n    /**\n     * @dev Update a period\n     * @dev This is an internal function\n     *\n     * @param periodId The period id to update\n     * @param period The period data to update\n     */\n    function _updatePeriod(uint256 periodId, Period memory period) internal validPeriodId(periodId) {\n        periods[periodId] = period;\n        emit PeriodUpdated(currentTime(), periodId, period);\n    }\n\n    /** ----------------------------------\n     * ! Administration       | CONTROLLER\n     * ----------------------------------- */\n\n    /**\n     * @dev Initialize the contract:\n     * @dev only controller is allowed to call this function\n     *\n     * @param dao The dao contract address\n     * @param energyStorage The energy storage contract address\n     * @param stakingLogic The staking logic contrct address\n     */\n    function init(\n        address dao,\n        address multisig,\n        address energyStorage,\n        address lbaEnergyStorage,\n        address stakingLogic\n    ) external onlyRole(CONTROLLER_ROLE) {\n        if (!_initialized) {\n            if (!_isContract(energyStorage)) revert ContractError(INVALID_ENERGY_STORAGE);\n            if (!_isContract(lbaEnergyStorage)) revert ContractError(INVALID_LBA_ENERGY_STORAGE);\n            if (!_isContract(stakingLogic)) revert ContractError(INVALID_STAKING_LOGIC);\n\n            stakingLogic_ = Staking(stakingLogic);\n            energyStorage_ = EnergyStorage(energyStorage);\n            lbaEnergyStorage_ = EnergyStorage(lbaEnergyStorage);\n\n            _grantRole(DAO_ROLE, dao);\n            _grantRole(MULTISIG_ROLE, multisig);\n            _grantRole(MANAGER_ROLE, multisig);\n\n            _initialized = true;\n        }\n    }\n\n    /**\n     * @dev Update the DAO contract address\n     * @dev only Controller is allowed to change the address of DAO contract\n     */\n    function setDao(address newDao) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(DAO_ROLE);\n        _grantRole(DAO_ROLE, newDao);\n    }\n\n    /**\n     * @dev Update the Multisig contract address\n     * @dev only Controller is allowed to change the address of Multisig contract\n     */\n    function setMultisig(address newMultisig, address dao) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(MULTISIG_ROLE);\n        _grantRole(MULTISIG_ROLE, newMultisig);\n        _grantRole(MULTISIG_ROLE, dao);\n    }\n\n    /**\n     * @dev Update the Controller contract address\n     * @dev only controller is allowed to call this function\n     */\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(CONTROLLER_ROLE);\n        _grantRole(CONTROLLER_ROLE, newController);\n    }\n\n    /**\n     * @dev Pause the contract\n     * @dev only controller is allowed to call this function\n     */\n    function pause() external onlyRole(CONTROLLER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract\n     * @dev only controller is allowed to call this function\n     */\n    function unpause() external onlyRole(CONTROLLER_ROLE) {\n        _unpause();\n    }\n\n    modifier nonZero(address addr) {\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\n        _;\n    }\n    modifier validPeriodId(uint256 periodId) {\n        if (periodId == 0 || periodId > periodIdCounter) revert InvalidInput(WRONG_PERIOD_ID);\n        _;\n    }\n}\n"
88     },
89     "contracts/EnergyStorage.sol": {
90       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./helpers/Util.sol\";\nimport \"./helpers/PermissionControl.sol\";\n\n/**\n * @dev ASM Genome Mining - Energy Storage contract\n *\n * Store consumed energy amount for each address.\n * This contract will be called from Converter logic contract (Converter.sol)\n */\ncontract EnergyStorage is Util, PermissionControl {\n    bool private _initialized = false;\n    mapping(address => uint256) public consumedAmount;\n\n    constructor(address controller) {\n        if (!_isContract(controller)) revert ContractError(INVALID_CONTROLLER);\n        _grantRole(CONTROLLER_ROLE, controller);\n    }\n\n    /**\n     * @dev Increase consumed energy for address `addr`\n     * @dev can only be called by Converter\n     *\n     * @param addr The wallet address which consumed the energy\n     * @param amount The amount of consumed energy\n     */\n    function increaseConsumedAmount(address addr, uint256 amount) external onlyRole(CONSUMER_ROLE) {\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\n        consumedAmount[addr] += amount;\n    }\n\n    /** ----------------------------------\n     * ! Admin functions\n     * ----------------------------------- */\n\n    /**\n     * @dev Initialize the contract:\n     * @dev only controller is allowed to call this function\n     *\n     * @param converterLogic Converter logic contract address\n     */\n    function init(address converterLogic) external onlyRole(CONTROLLER_ROLE) {\n        if (!_initialized) {\n            if (!_isContract(converterLogic)) revert ContractError(INVALID_CONVERTER_LOGIC);\n\n            _grantRole(CONSUMER_ROLE, converterLogic);\n            _initialized = true;\n        }\n    }\n\n    /**\n     * @dev Update the Controller contract address\n     * @dev only controller is allowed to call this function\n     */\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(CONTROLLER_ROLE);\n        _grantRole(CONTROLLER_ROLE, newController);\n    }\n}\n"
91     },
92     "contracts/Staking.sol": {
93       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./helpers/IStaking.sol\";\nimport \"./helpers/TimeConstants.sol\";\n\nimport \"./Controller.sol\";\nimport \"./helpers/Util.sol\";\nimport \"./StakingStorage.sol\";\nimport \"./helpers/PermissionControl.sol\";\n\n/**\n * @dev ASM Genome Mining - Staking Logic contract\n */\n\ncontract Staking is IStaking, Util, PermissionControl, Pausable {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    bool private _initialized = false;\n\n    uint256 public constant ASTO_TOKEN_ID = 0;\n    uint256 public constant LP_TOKEN_ID = 1;\n\n    uint256 public lbaStakeTime;\n    address private _signer;\n\n    /**\n     * `_token`:  tokenId => token contract address\n     * `_token`:  tokenId => token name\n     * `_storage`:  tokenId => storage contract address\n     *\n     * IDs: 0 for ASTO, 1 for LP tokens, see `init()` below\n     */\n    mapping(uint256 => IERC20) private _token;\n    mapping(uint256 => string) private _tokenName;\n    mapping(uint256 => StakingStorage) private _storage;\n    mapping(uint256 => uint256) public totalStakedAmount;\n    mapping(address => bool) public lbaMigrated;\n\n    constructor(\n        address controller,\n        address signer,\n        uint256 _lbaStakeTime\n    ) {\n        if (!_isContract(controller)) revert InvalidInput(INVALID_CONTROLLER);\n        _signer = signer;\n        lbaStakeTime = _lbaStakeTime;\n        _grantRole(CONTROLLER_ROLE, controller);\n        _pause();\n    }\n\n    /** ----------------------------------\n     * ! Administration          | dao\n     * ----------------------------------- */\n\n    /**\n     * @notice Withdraw tokens left in the contract to specified address\n     * @param tokenId - ID of token to stake\n     * @param recipient recipient of the transfer\n     * @param amount Token amount to withdraw\n     */\n    function withdraw(\n        uint256 tokenId,\n        address recipient,\n        uint256 amount\n    ) external onlyRole(DAO_ROLE) {\n        if (!_isContract(address(_token[tokenId]))) revert InvalidInput(WRONG_TOKEN);\n        if (address(recipient) == address(0)) revert InvalidInput(WRONG_ADDRESS);\n        if (_token[tokenId].balanceOf(address(this)) < amount) revert InvalidInput(INSUFFICIENT_BALANCE);\n\n        _token[tokenId].safeTransfer(recipient, amount);\n    }\n\n    /**\n     * @notice Update LP stake time used for LBA migration\n     * @dev This function can only to called from contracts or wallets with DAO_ROLE\n     * @param _time LBA LP stake time, it should be the same as lpTokenReleaseTime in LBA contract\n     */\n    function setLBAStakeTime(uint256 _time) external onlyRole(DAO_ROLE) {\n        lbaStakeTime = _time;\n    }\n\n    /**\n     * @notice Update token contract address\n     * @dev This function can only to called from contracts or wallets with DAO_ROLE\n     * @param tokenId The token id to update\n     * @param tokenAddress New contract address for the token\n     */\n    function setTokenAddress(uint256 tokenId, address tokenAddress) external onlyRole(DAO_ROLE) {\n        if (!_isContract(tokenAddress)) revert InvalidInput(WRONG_TOKEN);\n        _token[tokenId] = IERC20(tokenAddress);\n    }\n\n    /**\n     * @notice Set signer to `signer`\n     * @dev This function can only to called from contracts or wallets with DAO_ROLE\n     * @param signer The new signer address to update\n     */\n    function setSigner(address signer) external onlyRole(DAO_ROLE) {\n        _signer = signer;\n    }\n\n    /** ----------------------------------\n     * ! Administration       | CONTROLLER\n     * ----------------------------------- */\n\n    /**\n     * @dev Setting up persmissions for this contract:\n     * @dev only DAO contract is allowed to call admin functions\n     * @dev only controller is allowed to update permissions - to reduce amount of DAO votings\n     *\n     * @param astoToken ASTO Token contract address\n     * @param lpToken LP Token contract address\n     * @param astoStorage ASTO staking storage contract address\n     * @param lpStorage LP staking storage contract address\n     */\n    function init(\n        address dao,\n        IERC20 astoToken,\n        address astoStorage,\n        IERC20 lpToken,\n        address lpStorage,\n        uint256 totalStakedAsto,\n        uint256 totalStakedLp\n    ) external onlyRole(CONTROLLER_ROLE) {\n        if (!_initialized) {\n            _token[0] = astoToken;\n            _storage[0] = StakingStorage(astoStorage);\n            _tokenName[0] = \"ASTO\";\n\n            _token[1] = lpToken;\n            _storage[1] = StakingStorage(lpStorage);\n            _tokenName[1] = \"ASTO/USDC Uniswap V2 LP\";\n\n            _clearRole(DAO_ROLE);\n            _grantRole(DAO_ROLE, dao);\n\n            _clearRole(MULTISIG_ROLE);\n            _grantRole(MULTISIG_ROLE, dao);\n\n            totalStakedAmount[ASTO_TOKEN_ID] = totalStakedAsto;\n            totalStakedAmount[LP_TOKEN_ID] = totalStakedLp;\n\n            _initialized = true;\n        }\n    }\n\n    /**\n     * @dev Update the DAO contract address\n     * @dev only controller is allowed to set new DAO contract\n     */\n    function setDao(address newDao) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(DAO_ROLE);\n        _grantRole(DAO_ROLE, newDao);\n    }\n\n    /**\n     * @dev Update the Controller contract address\n     * @dev only controller is allowed to call this function\n     */\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(CONTROLLER_ROLE);\n        _grantRole(CONTROLLER_ROLE, newController);\n    }\n\n    /**\n     * @dev Pause the contract\n     * @dev only controller is allowed to call this function\n     */\n    function pause() external onlyRole(CONTROLLER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract\n     * @dev only controller is allowed to call this function\n     */\n    function unpause() external onlyRole(CONTROLLER_ROLE) {\n        _unpause();\n    }\n\n    /** ----------------------------------\n     * ! Business logic\n     * ----------------------------------- */\n\n    /**\n     * @notice Save user's stake\n     *\n     * @notice Staking is a process of locking your tokens in this contract.\n     * @notice Details of the stake are to be stored and used for calculations\n     * @notice what time your tokens are stay staked.\n     *\n     * @dev Prerequisite:\n     * @dev - amount of tokens to stake should be approved by user.\n     * @dev - this contract should have a `CONSUMER_ROLE` to call\n     * @dev   the storage's `updateHistory()` function.\n     *\n     * @dev Depending on tokenId passed, it:\n     * @dev 1. transfers tokens from user to this contract\n     * @dev 2. calls an appropriate token storage and saves time and amount of stake.\n     *\n     * @dev Emit `UnStaked` event on success: with token name, user address, timestamp, amount\n     *\n     * @param tokenId - ID of token to stake\n     * @param amount - amount of tokens to stake\n     */\n    function stake(uint256 tokenId, uint256 amount) external whenNotPaused {\n        if (tokenId > 1) revert InvalidInput(WRONG_TOKEN);\n        if (amount == 0) revert InvalidInput(WRONG_AMOUNT);\n        address user = msg.sender;\n        uint256 tokenBalance = _token[tokenId].balanceOf(user);\n        if (amount > tokenBalance) revert InvalidInput(INSUFFICIENT_BALANCE);\n\n        _token[tokenId].safeTransferFrom(user, address(this), amount);\n\n        uint256 lastStakeId = _storage[tokenId].getUserLastStakeId(user);\n        uint256 stakeBalance = (_storage[tokenId].getStake(user, lastStakeId)).amount;\n        uint256 newAmount = stakeBalance + amount;\n        _storage[tokenId].updateHistory(user, newAmount);\n        totalStakedAmount[tokenId] += amount;\n\n        emit Staked(_tokenName[tokenId], user, block.timestamp, amount);\n    }\n\n    /**\n     * @notice Stake on behalf of `staker`.\n     * @notice This function can be used for auto-staking from consumer contracts on behalf of users\n     * @param staker - User wallet address. It should be the wallet which a consumer contract or account stake tokens for\n     * @param tokenId - ID of token to stake\n     * @param amount - amount of tokens to stake\n     */\n    function stakeFor(\n        address staker,\n        uint256 tokenId,\n        uint256 amount\n    ) external whenNotPaused onlyRole(CONSUMER_ROLE) {\n        if (tokenId > 1) revert InvalidInput(WRONG_TOKEN);\n        if (amount == 0) revert InvalidInput(WRONG_AMOUNT);\n\n        uint256 tokenBalance = _token[tokenId].balanceOf(msg.sender);\n        if (amount > tokenBalance) revert InvalidInput(INSUFFICIENT_BALANCE);\n\n        _token[tokenId].safeTransferFrom(msg.sender, address(this), amount);\n\n        uint256 lastStakeId = _storage[tokenId].getUserLastStakeId(staker);\n        uint256 stakeBalance = (_storage[tokenId].getStake(staker, lastStakeId)).amount;\n        uint256 newAmount = stakeBalance + amount;\n        _storage[tokenId].updateHistory(staker, newAmount);\n        totalStakedAmount[tokenId] += amount;\n\n        emit Staked(_tokenName[tokenId], staker, block.timestamp, amount);\n    }\n\n    /**\n     * @notice Migrate user's LBA LP tokens to staking contract\n     * @param amount The LP token amount to be migrated, it should be the same amount with claimed LP tokens from LBA contract\n     * @param signature Signature will be used for user and amount verification.\n              It should be generated from backend with correct LP token amount from Transfer event.\n     */\n    function migrateAuctionLP(uint256 amount, bytes calldata signature) external whenNotPaused {\n        address user = msg.sender;\n        if (lbaMigrated[user]) revert InvalidInput(ALREADY_MIGRATED);\n        if (!validateSignature(_hash(msg.sender, amount), signature)) revert InvalidInput(INVALID_SIGNATURE);\n\n        _token[LP_TOKEN_ID].safeTransferFrom(user, address(this), amount);\n        _storage[LP_TOKEN_ID].migrateLBAHistory(user, amount, lbaStakeTime);\n\n        lbaMigrated[user] = true;\n        totalStakedAmount[LP_TOKEN_ID] += amount;\n\n        emit Staked(_tokenName[LP_TOKEN_ID], user, lbaStakeTime, amount);\n    }\n\n    /**\n     * @notice Migrate users' stake history from the old contract after upgrading the Staking contract to a new version\n     * @dev This function can only to called from contracts or wallets with DAO_ROLE\n     * @param tokenId The token id for migration. `0` for ASTO and `1` for LP token.\n     * @param addresses The list of user wallet address to be migrated.\n     */\n    function migrateHistory(uint256 tokenId, address[] calldata addresses) external onlyRole(DAO_ROLE) {\n        _storage[tokenId].migrateStakeHistory(addresses);\n    }\n\n    /**\n     * @notice Encode arguments to generate a hash, which will be used for validating signatures\n     * @dev This function can only be called inside the contract\n     * @param user The user wallet address, to verify the signature can only be used by the wallet\n     * @param amount The LP token amount to be migrated\n     * @return Encoded hash\n     */\n    function _hash(address user, uint256 amount) internal pure returns (bytes32) {\n        return keccak256(abi.encode(user, amount));\n    }\n\n    /**\n     * @notice Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     * @dev This function can only be called inside the contract\n     * @param hash The encoded hash used for signature\n     * @param token The signature passed from the caller\n     * @return The recovered address\n     */\n    function _recover(bytes32 hash, bytes memory token) internal pure returns (address) {\n        return hash.toEthSignedMessageHash().recover(token);\n    }\n\n    /**\n     * @notice To validate the `signature` is signed by the _signer\n     * @param hash The encoded hash used for signature\n     * @param token The signature passed from the caller\n     * @return Verification result\n     */\n    function validateSignature(bytes32 hash, bytes memory token) public view returns (bool) {\n        return (_recover(hash, token) == _signer);\n    }\n\n    /**\n     * @notice Unstake user's stake\n     *\n     * @notice Unstaking is a process of getting back previously staked tokens.\n     * @notice Users can unlock their tokens any time.\n     *\n     * @dev No prerequisites\n     * @dev Users can unstake only their own, previously staked  tokens\n     * @dev Emit `UnStaked` event on success: with token name, user address, timestamp, amount\n     *\n     * @param tokenId - ID of token to stake\n     * @param amount - amount of tokens to stake\n     */\n    function unstake(uint256 tokenId, uint256 amount) external whenNotPaused {\n        if (!_isContract(address(_token[tokenId]))) revert InvalidInput(WRONG_TOKEN);\n        if (amount == 0) revert InvalidInput(WRONG_AMOUNT);\n\n        address user = msg.sender;\n        uint256 id = _storage[tokenId].getUserLastStakeId(user);\n        if (id == 0) revert InvalidInput(NO_STAKES);\n        uint256 userBalance = (_storage[tokenId].getStake(user, id)).amount;\n        if (amount > userBalance) revert InvalidInput(INSUFFICIENT_BALANCE);\n\n        uint256 newAmount = userBalance - amount;\n        _storage[tokenId].updateHistory(user, newAmount);\n        totalStakedAmount[tokenId] -= amount;\n\n        _token[tokenId].safeTransfer(user, amount);\n\n        emit UnStaked(_tokenName[tokenId], user, block.timestamp, amount);\n    }\n\n    /**\n     * @notice Returns the total amount of tokens staked by all users\n     *\n     * @param tokenId ASTO - 0, LP - 1\n     * @return amount of tokens staked in the contract, uint256\n     */\n    function getTotalValueLocked(uint256 tokenId) external view returns (uint256) {\n        return totalStakedAmount[tokenId];\n    }\n\n    /** ----------------------------------\n     * ! Getters\n     * ----------------------------------- */\n\n    /**\n     * @notice Returns address of the token storage contract\n     *\n     * @param tokenId ASTO - 0, LP - 1\n     * @return address of the token storage contract\n     */\n    function getStorageAddress(uint256 tokenId) external view returns (address) {\n        return address(_storage[tokenId]);\n    }\n\n    /**\n     * @notice Returns address of the token contract\n     *\n     * @param tokenId ASTO - 0, LP - 1\n     * @return address of the token contract\n     */\n    function getTokenAddress(uint256 tokenId) external view returns (address) {\n        return address(_token[tokenId]);\n    }\n\n    /**\n     * @notice Returns the staking history of user\n     *\n     * @param tokenId ASTO - 0, LP - 1\n     * @param addr user wallet address\n     * @param endTime until what time tokens were staked\n     * @return sorted list of stakes, for each stake: { time, amount },\n     *         starting with earliest\n     */\n    function getHistory(\n        uint256 tokenId,\n        address addr,\n        uint256 endTime\n    ) external view returns (Stake[] memory) {\n        return _storage[tokenId].getHistory(addr, endTime);\n    }\n}\n"
94     },
95     "contracts/StakingStorage.sol": {
96       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./helpers/IStaking.sol\";\nimport \"./helpers/TimeConstants.sol\";\nimport \"./Controller.sol\";\nimport \"./Staking.sol\";\nimport \"./helpers/Util.sol\";\nimport \"./helpers/PermissionControl.sol\";\n\n/**\n * @dev ASM Genome Mining - Staking Storage contract\n */\ncontract StakingStorage is IStaking, ReentrancyGuard, PermissionControl, Util, Pausable {\n    bool private _initialized = false;\n\n    // Incrementing stake Id used to record history\n    mapping(address => uint256) public stakeIds;\n    // Store stake history per each address keyed by stake Id\n    mapping(address => mapping(uint256 => Stake)) public stakeHistory;\n\n    StakingStorage public oldContract;\n\n    constructor(address controller, address _oldContract) {\n        if (!_isContract(controller)) revert InvalidInput(INVALID_CONTROLLER);\n        if (_isContract(_oldContract)) oldContract = StakingStorage(_oldContract);\n        _grantRole(CONTROLLER_ROLE, controller);\n    }\n\n    /** ----------------------------------\n     * ! Business logic\n     * ----------------------------------- */\n\n    /**\n     * @notice Saving stakes into storage.\n     * @notice Function can be called only manager\n     *\n     * @param addr - user address\n     * @param amount - amount of tokens to stake\n     * @return stakeID\n     */\n    function updateHistory(address addr, uint256 amount) external onlyRole(CONSUMER_ROLE) returns (uint256) {\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\n\n        uint128 time = uint128(currentTime());\n        Stake memory newStake = Stake(time, amount);\n        uint256 userStakeId = ++stakeIds[addr]; // ++i cheaper than i++, so, stakeHistory[addr] starts from 1\n        stakeHistory[addr][userStakeId] = newStake;\n        return userStakeId;\n    }\n\n    /**\n     * @notice Migrate LBA LP staking history for `addr`\n     * @dev This function can only to called from contracts or wallets with CONSUMER_ROLE\n     * @param addr The user wallet address for the migration.\n     * @param amount The LP token amount to be migrated. It should be verified in caller contract with CONSUMER_ROLE.\n     * @param stakeTime The stake time for LBA LP tokens.\n     */\n    function migrateLBAHistory(\n        address addr,\n        uint256 amount,\n        uint256 stakeTime\n    ) external onlyRole(CONSUMER_ROLE) {\n        uint256 lastStakeId = stakeIds[addr];\n\n        for (uint256 i = lastStakeId; i > 0; --i) {\n            Stake memory existingStake = stakeHistory[addr][i];\n            Stake memory newStake = Stake(existingStake.time, existingStake.amount + amount);\n            stakeHistory[addr][i + 1] = newStake;\n        }\n\n        // LBA LP staking should be the first one in staking history\n        stakeHistory[addr][1] = Stake(stakeTime, amount);\n        ++stakeIds[addr];\n    }\n\n    /**\n     * @notice Migrate user's stake history from old contract after upgrading Staking contract to a new version\n     * @dev This function can only to called from contracts or wallets with CONSUMER_ROLE\n     * @param addresses The list of user wallet address to be migrated.\n     */\n    function migrateStakeHistory(address[] calldata addresses) external nonReentrant onlyRole(CONSUMER_ROLE) {\n        for (uint256 i = 0; i < addresses.length; ++i) {\n            address addr = addresses[i];\n            if (stakeIds[addr] > 0) {\n                continue; // already migrated\n            }\n\n            uint256 lastStakeId = oldContract.getUserLastStakeId(addr);\n            if (lastStakeId == 0) {\n                continue;\n            }\n\n            for (uint256 j = 1; j < lastStakeId + 1; ++j) {\n                stakeHistory[addr][j] = oldContract.getStake(addr, j);\n            }\n            stakeIds[addr] = lastStakeId;\n        }\n    }\n\n    /** ----------------------------------\n     * ! Getters\n     * ----------------------------------- */\n\n    function getHistory(address addr, uint256 endTime) external view returns (Stake[] memory) {\n        uint256 totalStakes = stakeIds[addr];\n\n        Stake[] memory stakes = new Stake[](totalStakes); // suboptimal - it could be larger than needed, when endTime is lesser than current time\n\n        // stakeHistory[addr] starts from 1, see `updateHistory`\n        for (uint256 i = 1; i < totalStakes + 1; i++) {\n            Stake memory stake = stakeHistory[addr][i];\n            if (stake.time <= endTime) stakes[i - 1] = stake;\n            else {\n                // shortening array before returning\n                Stake[] memory res = new Stake[](i - 1);\n                for (uint256 j = 0; j < res.length; j++) res[j] = stakes[j];\n                return res;\n            }\n        }\n        return stakes;\n    }\n\n    function getStake(address addr, uint256 id) external view returns (Stake memory) {\n        return stakeHistory[addr][id];\n    }\n\n    function getUserLastStakeId(address addr) external view returns (uint256) {\n        return stakeIds[addr];\n    }\n\n    /**\n     * @notice Get the current periodId based on current timestamp\n     * @dev Can be overridden by child contracts\n     *\n     * @return current timestamp\n     */\n    function currentTime() public view virtual returns (uint256) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp;\n    }\n\n    /** ----------------------------------\n     * ! Administration       | CONTROLLER\n     * ----------------------------------- */\n\n    /**\n     * @dev Setting up persmissions for this contract:\n     * @dev only Consumer is allowed to save into this storage\n     * @dev only Controller is allowed to update permissions - to reduce amount of DAO votings\n     * @dev\n     *\n     * @param controller Controller contract address\n     * @param stakingLogic Staking contract address\n     */\n    function init(address stakingLogic) external onlyRole(CONTROLLER_ROLE) {\n        if (!_initialized) {\n            _grantRole(CONSUMER_ROLE, stakingLogic);\n            _initialized = true;\n        }\n    }\n\n    /**\n     * @dev Update the Controller contract address\n     * @dev only controller is allowed to call this function\n     */\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\n        _clearRole(CONTROLLER_ROLE);\n        _grantRole(CONTROLLER_ROLE, newController);\n    }\n\n    function setOldContract(address _oldContract) external onlyRole(CONTROLLER_ROLE) {\n        oldContract = StakingStorage(_oldContract);\n    }\n}\n"
97     },
98     "contracts/helpers/IConverter.sol": {
99       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Interface for Converter\n */\ninterface IConverter {\n    struct Period {\n        uint128 startTime;\n        uint128 endTime;\n        uint128 astoMultiplier;\n        uint128 lpMultiplier;\n        uint128 lbaLPMultiplier;\n    }\n}\n"
100     },
101     "contracts/helpers/IStaking.sol": {
102       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev For testing purpose\n */\ninterface IStaking {\n    event Staked(string tokenName, address indexed staker, uint256 timestamp, uint256 amount);\n    event UnStaked(string tokenName, address indexed staker, uint256 timestamp, uint256 amount);\n\n    struct Stake {\n        uint256 time; // Time for precise calculations\n        uint256 amount; // New amount on every new (un)stake\n    }\n}\n"
103     },
104     "contracts/helpers/PermissionControl.sol": {
105       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\n\n/**\n * @dev ASM Genome Mining - PermissionControl contract\n */\n\nbytes32 constant CONTROLLER_ROLE = keccak256(\"CONTROLLER_ROLE\");\nbytes32 constant MULTISIG_ROLE = keccak256(\"MULTISIG_ROLE\");\nbytes32 constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\nbytes32 constant DAO_ROLE = keccak256(\"DAO_ROLE\");\nbytes32 constant CONSUMER_ROLE = keccak256(\"CONSUMER_ROLE\");\n\nstring constant MISSING_ROLE = \"Missing required role\";\n\ncontract PermissionControl is AccessControlEnumerable {\n    error AccessDenied(string errMsg);\n\n    /**\n     * @dev Modifier that checks that an account has at least one role in `roles`.\n     * Reverts with a standardized message.\n     */\n    modifier eitherRole(bytes32[2] memory roles) {\n        if (!hasRole(roles[0], _msgSender()) && !hasRole(roles[1], _msgSender())) {\n            revert AccessDenied(MISSING_ROLE);\n        }\n        _;\n    }\n\n    /**\n     * @dev Revoke all members to `role`\n     * @dev Internal function without access restriction.\n     */\n    function _clearRole(bytes32 role) internal {\n        uint256 count = getRoleMemberCount(role);\n        for (uint256 i = count; i > 0; i--) {\n            _revokeRole(role, getRoleMember(role, i - 1));\n        }\n    }\n\n    /**\n     * @dev Grant CONSUMER_ROLE to `addr`.\n     * @dev Can only be called from Controller or Multisig\n     */\n    function addConsumer(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\n        _grantRole(CONSUMER_ROLE, addr);\n    }\n\n    /**\n     * @dev Revoke CONSUMER_ROLE to `addr`.\n     * @dev Can only be called from Controller or Multisig\n     */\n    function removeConsumer(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\n        _revokeRole(CONSUMER_ROLE, addr);\n    }\n\n    /**\n     * @dev Grant MANAGER_ROLE to `addr`.\n     * @dev Can only be called from Controller or Multisig\n     */\n    function addManager(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\n        _grantRole(MANAGER_ROLE, addr);\n    }\n\n    /**\n     * @dev Revoke MANAGER_ROLE to `addr`.\n     * @dev Can only be called from Controller or Multisig\n     */\n    function removeManager(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\n        _revokeRole(MANAGER_ROLE, addr);\n    }\n}\n"
106     },
107     "contracts/helpers/TimeConstants.sol": {
108       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev ASM Genome Mining - Time constants we use\n */\n\nuint256 constant DAYS_PER_WEEK = 7;\nuint256 constant HOURS_PER_DAY = 24;\nuint256 constant MINUTES_PER_HOUR = 60;\nuint256 constant SECONDS_PER_MINUTE = 60;\nuint256 constant SECONDS_PER_HOUR = 3600;\nuint256 constant SECONDS_PER_DAY = 86400;\nuint256 constant SECONDS_PER_WEEK = 604800;\n"
109     },
110     "contracts/helpers/Util.sol": {
111       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev ASM Genome Mining - Utility contract\n */\ncontract Util {\n    error InvalidInput(string errMsg);\n    error ContractError(string errMsg);\n\n    bytes32 constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    string constant ALREADY_INITIALIZED = \"Already initialized\";\n    string constant ALREADY_MIGRATED = \"Already migrated\";\n    string constant INVALID_MULTISIG = \"Invalid multisig\";\n    string constant INVALID_SIGNATURE = \"Invalid signature\";\n    string constant INVALID_SIGNER = \"Invalid signer\";\n    string constant INVALID_DAO = \"Invalid DAO\";\n    string constant INVALID_CONTROLLER = \"Invalid Controller\";\n    string constant INVALID_STAKING_LOGIC = \"Invalid Staking Logic\";\n    string constant INVALID_STAKING_STORAGE = \"Invalid Staking Storage\";\n    string constant INVALID_CONVERTER_LOGIC = \"Invalid Converter Logic\";\n    string constant INVALID_ENERGY_STORAGE = \"Invalid Energy Storage\";\n    string constant INVALID_LBA_ENERGY_STORAGE = \"Invalid LBA Energy Storage\";\n    string constant INVALID_ASTO_CONTRACT = \"Invalid ASTO\";\n    string constant INVALID_LP_CONTRACT = \"Invalid LP\";\n    string constant INVALID_LBA_CONTRACT = \"Invalid LBA\";\n    string constant WRONG_ADDRESS = \"Wrong or missed wallet address\";\n    string constant WRONG_AMOUNT = \"Wrong or missed amount\";\n    string constant WRONG_PERIOD_ID = \"Wrong periodId\";\n    string constant WRONG_TOKEN = \"Token not allowed for staking\";\n    string constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    string constant INSUFFICIENT_STAKED_AMOUNT = \"Requested amount is greater than a stake\";\n    string constant NO_STAKES = \"No stakes yet\";\n\n    /**\n     * @notice Among others, `isContract` will return false for the following\n     * @notice types of addresses:\n     * @notice  - an externally-owned account\n     * @notice  - a contract in construction\n     * @notice  - an address where a contract will be created\n     * @notice  - an address where a contract lived, but was destroyed\n     *\n     * @dev Attention!\n     * @dev if _isContract() called from the constructor,\n     * @dev addr.code.length will be equal to 0, and\n     * @dev this function will return false.\n     *\n     */\n    function _isContract(address addr) internal view returns (bool) {\n        return addr.code.length > 0;\n    }\n}\n"
112     },
113     "contracts/interfaces/ILiquidityBootstrapAuction.sol": {
114       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface ILiquidityBootstrapAuction {\n    function claimableLPAmount(address) external view returns (uint256);\n\n    function lpTokenReleaseTime() external view returns (uint256);\n}\n"
115     }
116   }
117 }}