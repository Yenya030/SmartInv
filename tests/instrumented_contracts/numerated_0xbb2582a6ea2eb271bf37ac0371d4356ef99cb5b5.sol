1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/HumanianStaking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/// @title The Humanians Staking\r\n/// @author MilkyTaste @ Ao Collaboration Ltd.\r\n/// https://thehumanians.com\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n\r\ncontract HumanianStaking is Ownable {\r\n    IERC721Enumerable public immutable humanians;\r\n    bool public stakingActive = false;\r\n\r\n    struct StakedInfo {\r\n        address owner;\r\n        uint64 stakedAt;\r\n    }\r\n\r\n    mapping(uint256 => StakedInfo) public tokenStakedInfo;\r\n\r\n    constructor(address humanians_) {\r\n        humanians = IERC721Enumerable(humanians_);\r\n    }\r\n\r\n    /**\r\n     * Stake.\r\n     * @param tokenIds The tokens to be staked.\r\n     */\r\n    function stake(uint256[] memory tokenIds) external {\r\n        require(stakingActive, \"HumanianStaking: Staking not active\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            humanians.transferFrom(msg.sender, address(this), tokenId);\r\n            tokenStakedInfo[tokenId] = StakedInfo(msg.sender, uint64(block.timestamp));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unstake.\r\n     * @param tokenIds The tokens to be unstaked.\r\n     */\r\n    function unstake(uint256[] memory tokenIds) external {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            StakedInfo memory info = tokenStakedInfo[tokenId];\r\n            require(info.owner == msg.sender, \"HumanianStaking: Only owner can unstake\");\r\n            delete tokenStakedInfo[tokenId];\r\n            // Send it back\r\n            humanians.transferFrom(address(this), msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    //\r\n    // Admin\r\n    //\r\n\r\n    /**\r\n     * Enable/disable staking.\r\n     * @param stakingActive_ The new staking state.\r\n     */\r\n    function setStakingActive(bool stakingActive_) external onlyOwner {\r\n        stakingActive = stakingActive_;\r\n    }\r\n\r\n    /**\r\n     * Recover a staked token in an emergency situation.\r\n     * @param tokenId The token to unstake.\r\n     * @param to The address to send the token to.\r\n     * @notice This method will only be called in emergency situations.\r\n     */\r\n    function emergencyUnstake(uint256 tokenId, address to) external onlyOwner {\r\n        delete tokenStakedInfo[tokenId];\r\n        humanians.transferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    //\r\n    // Views\r\n    //\r\n\r\n    /**\r\n     * Get owner of staked token.\r\n     * @param tokenId The token Id address to query.\r\n     */\r\n    function getTokenOwner(uint256 tokenId) public view returns (address) {\r\n        return tokenStakedInfo[tokenId].owner;\r\n    }\r\n\r\n    /**\r\n     * Get timestamp of when the token was staked.\r\n     * @param tokenId The token Id address to query.\r\n     */\r\n    function getStakedAt(uint256 tokenId) public view returns (uint64) {\r\n        return tokenStakedInfo[tokenId].stakedAt;\r\n    }\r\n\r\n    /**\r\n     * List all the staked tokens owned by the given address.\r\n     * @param owner The owner address to query.\r\n     */\r\n    function listStakedTokensOfOwner(address owner) public view returns (uint256[] memory) {\r\n        uint256 supply = humanians.totalSupply();\r\n        uint256[] memory tokenIds = new uint256[](supply);\r\n        uint256 count = 0;\r\n        for (uint256 tokenId = 0; tokenId < supply; tokenId++) {\r\n            if (getTokenOwner(tokenId) == owner) {\r\n                tokenIds[count] = tokenId;\r\n                count++;\r\n            }\r\n        }\r\n        return resizeArray(tokenIds, count);\r\n    }\r\n\r\n    /**\r\n     * List all the staked token start times owned by the given address.\r\n     * @param owner The owner address to query.\r\n     */\r\n    function listStakedAtTimesOfOwner(address owner) external view returns (uint256[] memory) {\r\n        uint256[] memory tokenIds = listStakedTokensOfOwner(owner);\r\n        uint256[] memory stakedAts = new uint256[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            stakedAts[i] = getStakedAt(tokenIds[i]);\r\n        }\r\n        return stakedAts;\r\n    }\r\n\r\n    /**\r\n     * Helper function to resize an array.\r\n     */\r\n    function resizeArray(uint256[] memory input, uint256 length) internal pure returns (uint256[] memory) {\r\n        uint256[] memory output = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            output[i] = input[i];\r\n        }\r\n        return output;\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     }
22   },
23   "settings": {
24     "metadata": {
25       "bytecodeHash": "none"
26     },
27     "optimizer": {
28       "enabled": true,
29       "runs": 800
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}