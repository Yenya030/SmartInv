1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/BondlyLaunchpad.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/////////////////////////////////////////////////\n//  ____                        _   _          //\n// | __ )    ___    _ __     __| | | |  _   _  //\n// |  _ \\   / _ \\  | '_ \\   / _` | | | | | | | //\n// | |_) | | (_) | | | | | | (_| | | | | |_| | //\n// |____/   \\___/  |_| |_|  \\__,_| |_|  \\__, | //\n//                                      |___/  //\n/////////////////////////////////////////////////\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract BondlyLaunchPad is Ownable {\n    using SafeERC20 for IERC20;\n    using MerkleProof for bytes32[];\n\n    uint256 public _currentCardId = 0;\n    address payable public _salesperson;\n    bool public _saleStarted = false;\n\n    struct Card {\n        uint256 cardId;\n        uint256 tokenId;\n        uint256 totalAmount;\n        uint256 currentAmount;\n        uint256 basePrice;\n        uint256 saleNumber;\n        address contractAddress;\n        address paymentToken;\n        bool isFinished;\n    }\n\n    struct History {\n        mapping(uint256 => mapping(address => uint256)) purchasedHistories; // cardId -> wallet -> amount\n    }\n\n    // Events\n    event CreateCard(\n        address indexed _from,\n        uint256 _cardId,\n        address indexed _contractAddress,\n        uint256 _tokenId,\n        uint256 _totalAmount,\n        uint256 _basePrice,\n        uint256 _saleNumber,\n        address paymentToken\n    );\n\n    event PurchaseCard(address indexed _from, uint256 _cardId, uint256 _amount);\n    event CardChanged(uint256 _cardId);\n\n    mapping(uint256 => Card) public _cards;\n    mapping(uint256 => mapping(uint256 => uint256)) public _cardLimitsPerWallet;\n    mapping(uint256 => mapping(uint256 => uint256)) public _saleLimitsPerWallet;\n    mapping(uint256 => mapping(uint256 => uint256)) public _saleTierTimes;\n    mapping(uint256 => uint256) public _saleTierQuantity;\n    mapping(address => bool) public _blacklist;\n    mapping(uint256 => bytes32) public _whitelistRoot;\n    mapping(uint256 => bool) public _salePublicCheck;\n\n    History private _cardHistory;\n    History private _saleHistory;\n\n    constructor() {\n        _salesperson = payable(msg.sender);\n    }\n\n    function setSalesPerson(address payable newSalesPerson) external onlyOwner {\n        _salesperson = newSalesPerson;\n    }\n\n    function startSale() external onlyOwner {\n        _saleStarted = true;\n    }\n\n    function stopSale() external onlyOwner {\n        _saleStarted = false;\n    }\n\n    function createCard(\n        address _contractAddress,\n        uint256 _tokenId,\n        uint256 _totalAmount,\n        uint256 _saleNumber,\n        address _paymentTokenAddress,\n        uint256 _basePrice,\n        uint256[] calldata _limitsPerWallet\n    ) external onlyOwner {\n        IERC1155 _contract = IERC1155(_contractAddress);\n        require(\n            _contract.balanceOf(_salesperson, _tokenId) >= _totalAmount,\n            \"Initial supply cannot be more than available supply\"\n        );\n        require(\n            _contract.isApprovedForAll(_salesperson, address(this)) == true,\n            \"Contract must be whitelisted by owner\"\n        );\n        uint256 _id = _getNextCardID();\n        _incrementCardId();\n        Card memory _newCard;\n        _newCard.cardId = _id;\n        _newCard.contractAddress = _contractAddress;\n        _newCard.tokenId = _tokenId;\n        _newCard.totalAmount = _totalAmount;\n        _newCard.currentAmount = _totalAmount;\n        _newCard.basePrice = _basePrice;\n        _newCard.paymentToken = _paymentTokenAddress;\n        _newCard.saleNumber = _saleNumber;\n        _newCard.isFinished = false;\n\n        _cards[_id] = _newCard;\n\n        _setCardLimitsPerWallet(_id, _limitsPerWallet);\n\n        emit CreateCard(\n            msg.sender,\n            _id,\n            _contractAddress,\n            _tokenId,\n            _totalAmount,\n            _basePrice,\n            _saleNumber,\n            _paymentTokenAddress\n        );\n    }\n\n    function isEligbleToBuy(\n        uint256 _cardId,\n        uint256 tier,\n        bytes32[] calldata whitelistProof\n    ) public view returns (uint256) {\n        if (_blacklist[msg.sender] == true) return 0;\n\n        if (_saleStarted == false) return 0;\n\n        Card memory _currentCard = _cards[_cardId];\n\n        if (_salePublicCheck[_currentCard.saleNumber]) {\n            if (\n                !verifyWhitelist(\n                    msg.sender,\n                    _currentCard.saleNumber,\n                    tier,\n                    whitelistProof\n                )\n            ) {\n                return 0;\n            }\n        } else {\n            if (\n                tier != 0 &&\n                !verifyWhitelist(\n                    msg.sender,\n                    _currentCard.saleNumber,\n                    tier,\n                    whitelistProof\n                )\n            ) {\n                return 0;\n            }\n        }\n\n        uint256 startTime = _saleTierTimes[_currentCard.saleNumber][tier];\n\n        if (startTime != 0 && block.timestamp >= startTime) {\n            uint256 _currentCardBoughtAmount = _cardHistory.purchasedHistories[\n                _cardId\n            ][msg.sender];\n            uint256 _cardLimitPerWallet = _cardLimitsPerWallet[_cardId][tier];\n\n            if (_currentCardBoughtAmount >= _cardLimitPerWallet) return 0;\n\n            uint256 _currentSaleBoughtAmount = _saleHistory.purchasedHistories[\n                _currentCard.saleNumber\n            ][msg.sender];\n            uint256 _saleLimitPerWallet = _saleLimitsPerWallet[\n                _currentCard.saleNumber\n            ][tier];\n            if (_currentSaleBoughtAmount >= _saleLimitPerWallet) return 0;\n\n            uint256 _cardAvailableForPurchase = _cardLimitPerWallet -\n                _currentCardBoughtAmount;\n            uint256 _saleAvailableForPurchase = _saleLimitPerWallet -\n                _currentSaleBoughtAmount;\n\n            uint256 _availableForPurchase = _cardAvailableForPurchase >\n                _saleAvailableForPurchase\n                ? _saleAvailableForPurchase\n                : _cardAvailableForPurchase;\n\n            if (_currentCard.currentAmount <= _availableForPurchase)\n                return _currentCard.currentAmount;\n\n            return _availableForPurchase;\n        }\n\n        return 0;\n    }\n\n    function purchaseNFT(\n        uint256 _cardId,\n        uint256 _amount,\n        uint256 tier,\n        bytes32[] calldata whitelistProof\n    ) external payable {\n        require(_blacklist[msg.sender] == false, \"you are blocked\");\n\n        require(_saleStarted == true, \"Sale stopped\");\n\n        Card memory _currentCard = _cards[_cardId];\n        require(_currentCard.isFinished == false, \"Card is finished\");\n\n        if (_salePublicCheck[_currentCard.saleNumber]) {\n            require(\n                verifyWhitelist(\n                    msg.sender,\n                    _currentCard.saleNumber,\n                    tier,\n                    whitelistProof\n                ),\n                \"Invalid proof for whitelist\"\n            );\n        } else {\n            if (tier != 0) {\n                require(\n                    verifyWhitelist(\n                        msg.sender,\n                        _currentCard.saleNumber,\n                        tier,\n                        whitelistProof\n                    ),\n                    \"Invalid proof for whitelist\"\n                );\n            }\n        }\n\n        {\n            uint256 startTime = _saleTierTimes[_currentCard.saleNumber][tier];\n            require(\n                startTime != 0 && startTime <= block.timestamp,\n                \"wait for sale start\"\n            );\n        }\n        require(\n            _amount != 0 && _currentCard.currentAmount >= _amount,\n            \"Order exceeds the max number of available NFTs\"\n        );\n        uint256 _availableForPurchase;\n        {\n            uint256 _currentCardBoughtAmount = _cardHistory.purchasedHistories[\n                _cardId\n            ][msg.sender];\n            uint256 _cardLimitPerWallet = _cardLimitsPerWallet[_cardId][tier];\n\n            uint256 _currentSaleBoughtAmount = _saleHistory.purchasedHistories[\n                _currentCard.saleNumber\n            ][msg.sender];\n            uint256 _saleLimitPerWallet = _saleLimitsPerWallet[\n                _currentCard.saleNumber\n            ][tier];\n\n            require(\n                _currentCardBoughtAmount < _cardLimitPerWallet &&\n                    _currentSaleBoughtAmount < _saleLimitPerWallet,\n                \"Order exceeds the max limit of NFTs per wallet\"\n            );\n\n            uint256 _cardAvailableForPurchase = _cardLimitPerWallet -\n                _currentCardBoughtAmount;\n            uint256 _saleAvailableForPurchase = _saleLimitPerWallet -\n                _currentSaleBoughtAmount;\n\n            _availableForPurchase = _cardAvailableForPurchase >\n                _saleAvailableForPurchase\n                ? _saleAvailableForPurchase\n                : _cardAvailableForPurchase;\n\n            if (_availableForPurchase > _amount) {\n                _availableForPurchase = _amount;\n            }\n\n            _cards[_cardId].currentAmount =\n                _cards[_cardId].currentAmount -\n                _availableForPurchase;\n\n            _cardHistory.purchasedHistories[_cardId][msg.sender] =\n                _currentCardBoughtAmount +\n                _availableForPurchase;\n\n            _saleHistory.purchasedHistories[_currentCard.saleNumber][\n                msg.sender\n            ] = _currentSaleBoughtAmount + _availableForPurchase;\n        }\n        uint256 _price = _currentCard.basePrice * _availableForPurchase;\n\n        require(\n            _currentCard.paymentToken == address(0) ||\n                IERC20(_currentCard.paymentToken).allowance(\n                    msg.sender,\n                    address(this)\n                ) >=\n                _price,\n            \"Need to Approve payment\"\n        );\n\n        if (_currentCard.paymentToken == address(0)) {\n            require(msg.value >= _price, \"Not enough funds to purchase\");\n            uint256 overPrice = msg.value - _price;\n            _salesperson.transfer(_price);\n\n            if (overPrice > 0) payable(msg.sender).transfer(overPrice);\n        } else {\n            IERC20(_currentCard.paymentToken).transferFrom(\n                msg.sender,\n                _salesperson,\n                _price\n            );\n        }\n\n        IERC1155(_currentCard.contractAddress).safeTransferFrom(\n            _salesperson,\n            msg.sender,\n            _currentCard.tokenId,\n            _availableForPurchase,\n            \"\"\n        );\n\n        emit PurchaseCard(msg.sender, _cardId, _availableForPurchase);\n    }\n\n    function _getNextCardID() private view returns (uint256) {\n        return _currentCardId + 1;\n    }\n\n    function _incrementCardId() private {\n        _currentCardId++;\n    }\n\n    function cancelCard(uint256 _cardId) external onlyOwner {\n        _cards[_cardId].isFinished = true;\n\n        emit CardChanged(_cardId);\n    }\n\n    function setTier(\n        uint256 _saleNumber,\n        uint256 _tier,\n        uint256 _startTime\n    ) external onlyOwner {\n        if (_tier + 1 > _saleTierQuantity[_saleNumber]) {\n            _saleTierQuantity[_saleNumber] = _tier + 1;\n        }\n        _saleTierTimes[_saleNumber][_tier] = _startTime;\n    }\n\n    function setTiers(uint256 _saleNumber, uint256[] calldata _startTimes)\n        external\n        onlyOwner\n    {\n        if (_startTimes.length > _saleTierQuantity[_saleNumber]) {\n            _saleTierQuantity[_saleNumber] = _startTimes.length;\n        }\n        for (uint256 i = 0; i < _startTimes.length; i++) {\n            _saleTierTimes[_saleNumber][i] = _startTimes[i];\n        }\n    }\n\n    function setSaleLimitPerWallet(\n        uint256 _saleNumber,\n        uint256 _tier,\n        uint256 _limitPerWallet\n    ) external onlyOwner {\n        if (_tier + 1 > _saleTierQuantity[_saleNumber]) {\n            _saleTierQuantity[_saleNumber] = _tier + 1;\n        }\n        _saleLimitsPerWallet[_saleNumber][_tier] = _limitPerWallet;\n    }\n\n    function setSaleLimitsPerWallet(\n        uint256 _saleNumber,\n        uint256[] calldata _limitsPerWallet\n    ) external onlyOwner {\n        if (_limitsPerWallet.length > _saleTierQuantity[_saleNumber]) {\n            _saleTierQuantity[_saleNumber] = _limitsPerWallet.length;\n        }\n        for (uint256 i = 0; i < _limitsPerWallet.length; i++) {\n            _saleLimitsPerWallet[_saleNumber][i] = _limitsPerWallet[i];\n        }\n    }\n\n    function setCardLimitPerWallet(\n        uint256 _cardNumber,\n        uint256 _tier,\n        uint256 _limitPerWallet\n    ) external onlyOwner {\n        uint256 saleNumber = _cards[_cardNumber].saleNumber;\n        if (_tier + 1 > _saleTierQuantity[saleNumber]) {\n            _saleTierQuantity[saleNumber] = _tier + 1;\n        }\n        _cardLimitsPerWallet[_cardNumber][_tier] = _limitPerWallet;\n    }\n\n    function _setCardLimitsPerWallet(\n        uint256 _cardNumber,\n        uint256[] calldata _limitsPerWallet\n    ) private {\n        uint256 saleNumber = _cards[_cardNumber].saleNumber;\n        if (_limitsPerWallet.length > _saleTierQuantity[saleNumber]) {\n            _saleTierQuantity[saleNumber] = _limitsPerWallet.length;\n        }\n        for (uint256 i = 0; i < _limitsPerWallet.length; i++) {\n            _cardLimitsPerWallet[_cardNumber][i] = _limitsPerWallet[i];\n        }\n    }\n\n    function setCardLimitsPerWallet(\n        uint256 _cardNumber,\n        uint256[] calldata _limitsPerWallet\n    ) external onlyOwner {\n        _setCardLimitsPerWallet(_cardNumber, _limitsPerWallet);\n    }\n\n    function setCardsLimitsPerWallet(\n        uint256[] calldata _cardNumbers,\n        uint256[][] calldata _limitsPerWallet\n    ) external onlyOwner {\n        require(\n            _cardNumbers.length == _limitsPerWallet.length,\n            \"Array input size mismatch\"\n        );\n        for (uint256 i = 0; i < _cardNumbers.length; i++) {\n            _setCardLimitsPerWallet(_cardNumbers[i], _limitsPerWallet[i]);\n        }\n    }\n\n    function resumeCard(uint256 _cardId) external onlyOwner {\n        _cards[_cardId].isFinished = false;\n\n        emit CardChanged(_cardId);\n    }\n\n    function setCardPrice(uint256 _cardId, uint256 _newPrice)\n        external\n        onlyOwner\n    {\n        _cards[_cardId].basePrice = _newPrice;\n\n        emit CardChanged(_cardId);\n    }\n\n    function setCardPaymentToken(uint256 _cardId, address _newAddr)\n        external\n        onlyOwner\n    {\n        _cards[_cardId].paymentToken = _newAddr;\n\n        emit CardChanged(_cardId);\n    }\n\n    function setCardSaleNumber(uint256 _cardId, uint256 _saleNumber)\n        external\n        onlyOwner\n    {\n        _cards[_cardId].saleNumber = _saleNumber;\n\n        emit CardChanged(_cardId);\n    }\n\n    function addBlackListAddress(address addr) external onlyOwner {\n        _blacklist[addr] = true;\n    }\n\n    function batchAddBlackListAddress(address[] calldata addr)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addr.length; i++) {\n            _blacklist[addr[i]] = true;\n        }\n    }\n\n    function removeBlackListAddress(address addr) external onlyOwner {\n        _blacklist[addr] = false;\n    }\n\n    function batchRemoveBlackListAddress(address[] calldata addr)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addr.length; i++) {\n            _blacklist[addr[i]] = false;\n        }\n    }\n\n    function setWhitelistRoot(uint256 saleNumber, bytes32 merkleRoot)\n        external\n        onlyOwner\n    {\n        _whitelistRoot[saleNumber] = merkleRoot;\n    }\n\n    function setWhitelistRoots(\n        uint256[] calldata saleNumbers,\n        bytes32[] calldata merkleRoots\n    ) external onlyOwner {\n        require(\n            saleNumbers.length == merkleRoots.length,\n            \"Array input size mismatch\"\n        );\n        for (uint256 i = 0; i < saleNumbers.length; i++) {\n            _whitelistRoot[saleNumbers[i]] = merkleRoots[i];\n        }\n    }\n\n    function setPublicCheck(uint256 saleNumber, bool isCheck)\n        external\n        onlyOwner\n    {\n        _salePublicCheck[saleNumber] = isCheck;\n    }\n\n    function setPublicChecks(\n        uint256[] calldata saleNumbers,\n        bool[] calldata isCheck\n    ) external onlyOwner {\n        require(\n            saleNumbers.length == isCheck.length,\n            \"Array input size mismatch\"\n        );\n        for (uint256 i = 0; i < saleNumbers.length; i++) {\n            _salePublicCheck[saleNumbers[i]] = isCheck[i];\n        }\n    }\n\n    function isCardCompleted(uint256 _cardId) public view returns (bool) {\n        return _cards[_cardId].isFinished;\n    }\n\n    function isCardFree(uint256 _cardId) public view returns (bool) {\n        return _cards[_cardId].basePrice == 0;\n    }\n\n    function getCardContract(uint256 _cardId) public view returns (address) {\n        return _cards[_cardId].contractAddress;\n    }\n\n    function getCardPaymentContract(uint256 _cardId)\n        public\n        view\n        returns (address)\n    {\n        return _cards[_cardId].paymentToken;\n    }\n\n    function getCardTokenId(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].tokenId;\n    }\n\n    function getTierTimes(uint256 saleNumber)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory times = new uint256[](_saleTierQuantity[saleNumber]);\n        for (uint256 i = 0; i < times.length; i++) {\n            times[i] = _saleTierTimes[saleNumber][i];\n        }\n        return times;\n    }\n\n    function getSaleLimitsPerWallet(uint256 saleNumber)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory limits = new uint256[](_saleTierQuantity[saleNumber]);\n        for (uint256 i = 0; i < limits.length; i++) {\n            limits[i] = _saleLimitsPerWallet[saleNumber][i];\n        }\n        return limits;\n    }\n\n    function getCardLimitsPerWallet(uint256 cardNumber)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 saleNumber = _cards[cardNumber].saleNumber;\n        uint256[] memory limits = new uint256[](_saleTierQuantity[saleNumber]);\n        for (uint256 i = 0; i < limits.length; i++) {\n            limits[i] = _cardLimitsPerWallet[cardNumber][i];\n        }\n        return limits;\n    }\n\n    function getCardTotalAmount(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].totalAmount;\n    }\n\n    function getCardCurrentAmount(uint256 _cardId)\n        public\n        view\n        returns (uint256)\n    {\n        return _cards[_cardId].currentAmount;\n    }\n\n    function getAllCardsPerSale(uint256 saleNumber)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 count;\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (_cards[i].saleNumber == saleNumber) {\n                count++;\n            }\n        }\n\n        uint256[] memory cardIds = new uint256[](count);\n        count = 0;\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (_cards[i].saleNumber == saleNumber) {\n                cardIds[count] = i;\n                count++;\n            }\n        }\n\n        return cardIds;\n    }\n\n    function getAllCardsPerContract(address _contractAddr)\n        public\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        uint256 count;\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (_cards[i].contractAddress == _contractAddr) {\n                count++;\n            }\n        }\n\n        uint256[] memory cardIds = new uint256[](count);\n        uint256[] memory tokenIds = new uint256[](count);\n        count = 0;\n\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (_cards[i].contractAddress == _contractAddr) {\n                cardIds[count] = i;\n                tokenIds[count] = _cards[i].tokenId;\n                count++;\n            }\n        }\n\n        return (cardIds, tokenIds);\n    }\n\n    function getActiveCardsPerContract(address _contractAddr)\n        public\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        uint256 count;\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (\n                _cards[i].contractAddress == _contractAddr &&\n                _cards[i].isFinished == false\n            ) {\n                count++;\n            }\n        }\n\n        uint256[] memory cardIds = new uint256[](count);\n        uint256[] memory tokenIds = new uint256[](count);\n        count = 0;\n\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (\n                _cards[i].contractAddress == _contractAddr &&\n                _cards[i].isFinished == false\n            ) {\n                cardIds[count] = i;\n                tokenIds[count] = _cards[i].tokenId;\n                count++;\n            }\n        }\n\n        return (cardIds, tokenIds);\n    }\n\n    function getClosedCardsPerContract(address _contractAddr)\n        public\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        uint256 count;\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (\n                _cards[i].contractAddress == _contractAddr &&\n                _cards[i].isFinished\n            ) {\n                count++;\n            }\n        }\n\n        uint256[] memory cardIds = new uint256[](count);\n        uint256[] memory tokenIds = new uint256[](count);\n        count = 0;\n\n        for (uint256 i = 1; i <= _currentCardId; i++) {\n            if (\n                _cards[i].contractAddress == _contractAddr &&\n                _cards[i].isFinished\n            ) {\n                cardIds[count] = i;\n                tokenIds[count] = _cards[i].tokenId;\n                count++;\n            }\n        }\n\n        return (cardIds, tokenIds);\n    }\n\n    function getCardBasePrice(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].basePrice;\n    }\n\n    function getCardURL(uint256 _cardId) public view returns (string memory) {\n        return\n            IERC1155MetadataURI(_cards[_cardId].contractAddress).uri(\n                _cards[_cardId].tokenId\n            );\n    }\n\n    function collect(address _token) external onlyOwner {\n        if (_token == address(0)) {\n            payable(msg.sender).transfer(address(this).balance);\n        } else {\n            uint256 amount = IERC20(_token).balanceOf(address(this));\n            IERC20(_token).transfer(msg.sender, amount);\n        }\n    }\n\n    function verifyWhitelist(\n        address user,\n        uint256 saleNumber,\n        uint256 tier,\n        bytes32[] calldata whitelistProof\n    ) public view returns (bool) {\n        bytes32 leaf = keccak256(abi.encodePacked(user, saleNumber, tier));\n        return whitelistProof.verify(_whitelistRoot[saleNumber], leaf);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Address.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     }
34   },
35   "settings": {
36     "optimizer": {
37       "enabled": true,
38       "runs": 500,
39       "details": {
40         "orderLiterals": true,
41         "deduplicate": true,
42         "cse": true,
43         "yul": true,
44         "yulDetails": {
45           "stackAllocation": true
46         }
47       }
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}