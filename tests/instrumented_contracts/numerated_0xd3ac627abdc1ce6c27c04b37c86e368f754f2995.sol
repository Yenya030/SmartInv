1 pragma solidity ^0.4.25;
2 
3 /**
4   Gradual.pro - Плавно растущий и долго живущий умножитель БЕЗ КИТОВ!, который возвращает 121% от вашего депозита!
5 
6   Маленький лимит на депозит избавляет от проблем с КИТАМИ, которые очень сильно тормозили предыдущую версию контракта и значительно продлевает срок его жизни!
7 
8   Автоматические выплаты!
9   Полные отчеты о потраченых на рекламу средствах в группе!
10   Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!
11   Создан и проверен профессионалами!
12   Код полностью документирован на русском языке, каждая строчка понятна!
13 
14   Вебсайт: http://gradual.pro/
15   Группа в телеграмме: https://t.me/gradualpro
16 
17   1. Пошлите любую ненулевую сумму на адрес контракта
18      - сумма от 0.01 до 2 ETH
19      - gas limit минимум 250000
20      - вы встанете в очередь
21   2. Немного подождите
22   3. ...
23   4. PROFIT! Вам пришло 121% от вашего депозита.
24 
25   Как это возможно?
26   1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от
27      новых инвесторов до тех пор, пока не получит 121% от своего депозита
28   2. Выплаты могут приходить несколькими частями или все сразу
29   3. Как только вы получаете 121% от вашего депозита, вы удаляетесь из очереди
30   4. Вы можете делать несколько депозитов сразу
31   5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления
32      сразу же направляются на выплаты
33 
34      Таким образом, последние платят первым, и инвесторы, достигшие выплат 121% от депозита,
35      удаляются из очереди, уступая место остальным
36 
37               новый инвестор --|            совсем новый инвестор --|
38                  инвестор5     |                новый инвестор      |
39                  инвестор4     |     =======>      инвестор5        |
40                  инвестор3     |                   инвестор4        |
41  (част. выплата) инвестор2    <|                   инвестор3        |
42 (полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 121%)
43 
44 */
45 
46 contract GradualPro {
47     // Адрес кошелька первого проекта для продвижения очереди
48     address constant private FIRST_SUPPORT = 0xf8F04b23dACE12841343ecf0E06124354515cc42;
49 
50     // Адрес кошелька для оплаты технической поддержки информационных каналов
51     address constant private TECH_SUPPORT = 0x988f1a2fb17414c95f45E2DAaaA40509F5C9088c;
52 
53     // Процент депозита на первый проект 4%
54     uint constant public FIRST_PERCENT = 4;
55 
56     // Процент депозита на тех поддержку 1%
57     uint constant public TECH_PERCENT = 1;
58     
59     // Процент выплат всем участникам
60     uint constant public MULTIPLIER = 121;
61 
62     // Максимальная сумма депозита = 2 эфира, чтобы каждый смог учавстовать и киты не тормозили и не пугали вкладчиков
63     uint constant public MAX_LIMIT = 2 ether;
64 
65     // Структура Deposit содержит информацию о депозите
66     struct Deposit {
67         address depositor; // Владелец депозита
68         uint128 deposit;   // Сумма депозита
69         uint128 expect;    // Сумма выплаты (моментально 121% от депозита)
70     }
71 
72     // Очередь
73     Deposit[] private queue;
74 
75     // Номер обрабатываемого депозита, можно следить в разделе Read contract
76     uint public currentReceiverIndex = 0;
77 
78     // Данная функция получает все депозиты, сохраняет их и производит моментальные выплаты
79     function () public payable {
80         // Если сумма депозита больше нуля
81         if(msg.value > 0){
82             // Проверяем минимальный лимит газа 220 000, иначе отменяем депозит и возвращаем деньги вкладчику
83             require(gasleft() >= 220000, "We require more gas!");
84 
85             // Проверяем максимальную сумму вклада
86             require(msg.value <= MAX_LIMIT, "Deposit is too big");
87 
88             // Добавляем депозит в очередь, записываем что ему нужно выплатить 121% от суммы депозита
89             queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value * MULTIPLIER / 100)));
90 
91             // Отправляем процент на продвижение проекта
92             uint ads = msg.value * FIRST_PERCENT / 100;
93             require(FIRST_SUPPORT.call.value(ads).gas(gasleft())());
94 
95             // Отправляем процент на техническую поддержку проекта
96             uint tech = msg.value * TECH_PERCENT / 100;
97             TECH_SUPPORT.transfer(tech);
98 
99             // Вызываем функцию оплаты первому в очереди депозиту
100             pay();
101         }
102     }
103 
104     // Фукнция используется для оплаты первым в очереди депозитам
105     // Каждая новая транзация обрабатывает от 1 до 4+ вкладчиков в начале очереди 
106     // В зависимости от оставшегося газа
107     function pay() private {
108         // Попытаемся послать все деньги имеющиеся на контракте первым в очереди вкладчикам
109         uint128 money = uint128(address(this).balance);
110 
111         // Проходим по всей очереди
112         for(uint i = 0; i < queue.length; i++) {
113 
114             uint idx = currentReceiverIndex + i;  // Достаем номер первого в очереди депозита
115 
116             Deposit storage dep = queue[idx]; // Достаем информацию о первом депозите
117 
118             if(money >= dep.expect) {  // Если у нас есть достаточно денег для полной выплаты, то выплачиваем ему все
119                 dep.depositor.transfer(dep.expect); // Отправляем ему деньги
120                 money -= dep.expect; // Обновляем количество оставшихся денег
121 
122                 // депозит был полностью выплачен, удаляем его
123                 delete queue[idx];
124             } else {
125                 // Попадаем сюда, если у нас не достаточно денег выплатить все, а лишь часть
126                 dep.depositor.transfer(money); // Отправляем все оставшееся
127                 dep.expect -= money;       // Обновляем количество оставшихся денег
128                 break;                     // Выходим из цикла
129             }
130 
131             if (gasleft() <= 50000)         // Проверяем если еще остался газ, и если его нет, то выходим из цикла
132                 break;                     //  Следующий вкладчик осуществит выплату следующим в очереди
133         }
134 
135         currentReceiverIndex += i; // Обновляем номер депозита ставшего первым в очереди
136     }
137 
138     // Показывает информацию о депозите по его номеру (idx), можно следить в разделе Read contract
139     // Вы можете получить номер депозита  (idx) вызвав функцию getDeposits()
140     function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){
141         Deposit storage dep = queue[idx];
142         return (dep.depositor, dep.deposit, dep.expect);
143     }
144 
145     // Показывает количество вкладов определенного инвестора
146     function getDepositsCount(address depositor) public view returns (uint) {
147         uint c = 0;
148         for(uint i=currentReceiverIndex; i<queue.length; ++i){
149             if(queue[i].depositor == depositor)
150                 c++;
151         }
152         return c;
153     }
154 
155     // Показывает все депозиты (index, deposit, expect) определенного инвестора, можно следить в разделе Read contract
156     function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {
157         uint c = getDepositsCount(depositor);
158 
159         idxs = new uint[](c);
160         deposits = new uint128[](c);
161         expects = new uint128[](c);
162 
163         if(c > 0) {
164             uint j = 0;
165             for(uint i=currentReceiverIndex; i<queue.length; ++i){
166                 Deposit storage dep = queue[i];
167                 if(dep.depositor == depositor){
168                     idxs[j] = i;
169                     deposits[j] = dep.deposit;
170                     expects[j] = dep.expect;
171                     j++;
172                 }
173             }
174         }
175     }
176     
177     // Показывает длинну очереди, можно следить в разделе Read contract
178     function getQueueLength() public view returns (uint) {
179         return queue.length - currentReceiverIndex;
180     }
181 
182 }