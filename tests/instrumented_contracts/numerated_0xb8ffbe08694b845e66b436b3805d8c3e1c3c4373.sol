1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Escrow.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from \"./interfaces/IERC20.sol\";\nimport { IERC721 } from \"./interfaces/IERC721.sol\";\nimport { IERC1155 } from \"./interfaces/IERC1155.sol\";\nimport { IERC721Receiver } from \"./interfaces/IERC721Receiver.sol\";\nimport { IERC1155Receiver } from \"./interfaces/IERC1155Receiver.sol\";\n\nimport { IERC165 } from \"./interfaces/IERC165.sol\";\nimport { EscrowOwnable } from \"./utils/EscrowOwnable.sol\";\nimport { Context } from \"./oz-simplified/Context.sol\";\nimport { Initializable } from \"./oz-simplified/Initializable.sol\";\n\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\n\nimport { Errors } from \"./library/errors/Errors.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Escrow is IEscrow, IERC165, IERC721Receiver, IERC1155Receiver, EscrowOwnable {\n    struct PrizeToken {\n        uint256 tokenId;\n        address token;\n        uint8 tokenType;\n        uint16 quantity;\n    }\n\n    uint8 constant TYPE_ERC721 = 2;\n    uint8 constant TYPE_ERC1155 = 3;\n\n    IERC20 private _currencyContract;\n\n    uint256 private _lastId;\n\n    mapping(uint256 => PrizeToken[]) private _prizes;\n    mapping(uint256 => address) private _claims;\n\n    constructor(address currency) {\n        // confirm currency is a contract\n        if (currency.code.length == 0) {\n            revert Errors.NotAContract();\n        }\n        _currencyContract = IERC20(currency);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\n        return (\n            interfaceId == type(IEscrow).interfaceId\n            || interfaceId == type(IERC721Receiver).interfaceId\n            || interfaceId == type(IERC1155Receiver).interfaceId\n            || interfaceId == type(IERC165).interfaceId\n        );\n    }\n\n    function updateCurrency(address newCurrencyAddress) external onlyOwner {\n       if (newCurrencyAddress.code.length == 0) {\n            revert Errors.NotAContract();\n        }\n        _currencyContract = IERC20(newCurrencyAddress);\n    }\n\n    function currencyBalance() public view returns (uint256) {\n        return _currencyContract.balanceOf(address(this));\n    }\n\n    function deposit(address spender, uint256 amount) public onlyAuthorized {\n        _currencyContract.transferFrom(spender, address(this), amount);\n\n        emit Deposit(amount, spender);\n    }\n\n    function withdraw(address recipient, uint256 amount) public onlyAuthorized {\n        _currencyContract.transfer(recipient, amount);\n\n        emit Withdrawal(amount, recipient);\n    }\n\n    function getPrizeInfo(uint256 claimId) public view returns (PrizeToken[] memory) {\n        return _prizes[claimId];\n    }\n\n    function addPrize(\n        address[] calldata tokens,\n        uint256[] calldata tokenIds,\n        uint8[] calldata tokenTypes,\n        uint16[] calldata quantities\n    ) public onlyAuthorized {\n        uint256 arrayLength = tokens.length;\n        if (\n            arrayLength != tokenIds.length\n            || arrayLength != tokenTypes.length\n            || arrayLength != quantities.length\n        ) {\n            revert Errors.ArrayMismatch();\n        }\n\n        uint256 claimId = ++_lastId;\n\n        for (uint256 i = 0; i < arrayLength;) {\n            PrizeToken storage prize = _prizes[claimId].push();\n            prize.token = tokens[i];\n            prize.tokenId = tokenIds[i];\n            prize.tokenType = tokenTypes[i];\n            prize.quantity = quantities[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _transferPrize(claimId, msg.sender, address(this));\n\n        emit PrizeAdded(claimId);\n    }\n\n    function removePrize(uint256 claimId, address to) public onlyAuthorized {\n        _transferPrize(claimId, address(this), to);\n\n        // delete the PrizeToken array to get a gas refund\n        // iterating to delete each struct costs more than we save\n        delete _prizes[claimId];\n\n        emit PrizeRemoved(claimId, to);\n    }\n\n    function authorizeClaim(uint256 claimId, address claimant) public onlyAuthorized {\n        if ( _prizes[ claimId ].length == 0) {\n            revert Errors.AlreadyClaimed(claimId);\n        }\n\n        _claims[claimId] = claimant;\n\n        emit ClaimAuthorized(claimId, claimant);\n    }\n\n    function authorizedClaimant(uint256 claimId) public view returns (address) {\n        return _claims[claimId];\n    }\n\n    function claim(uint256 claimId, address destination) public {\n        _claim(claimId, msg.sender, destination);\n    }\n\n    function claimFor(address claimant, uint256 claimId, address destination) onlyAuthorized public {\n        _claim(claimId, claimant, destination);\n    }\n\n    function _claim(uint256 claimId, address claimant, address recipient) internal {\n       if (claimant != _claims[claimId]) {\n            revert Errors.BadSender(_claims[claimId], claimant);\n        }\n\n        _transferPrize(claimId, address(this), recipient);\n        emit PrizeReceived(claimId, recipient);\n\n        // cancel the authorization and receive a gas refund\n        _claims[claimId] = address(0);\n\n        // delete the PrizeToken array to get a gas refund\n        // iterating to delete each struct costs more than we save\n        delete _prizes[claimId];\n    }\n\n    function _transferPrize(uint256 claimId, address from, address to) internal {\n        PrizeToken[] memory prize = _prizes[claimId];\n\n        for (uint256 i = 0; i < prize.length;) {\n            if (prize[i].tokenType == TYPE_ERC721) {\n                IERC721 ct = IERC721(prize[i].token);\n                ct.safeTransferFrom(from, to, prize[i].tokenId);\n            } else if (prize[i].tokenType == TYPE_ERC1155) {\n                IERC1155 ct = IERC1155(prize[i].token);\n                ct.safeTransferFrom(from, to, prize[i].tokenId, prize[i].quantity, new bytes(0));\n            } else {\n                revert Errors.InvalidTokenType();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function onERC721Received(\n        address, // operator,\n        address from,\n        uint256, // tokenId,\n        bytes calldata // data\n    ) public view returns (bytes4 selector) {\n        // for safety, only allow transfer of ERC721 tokens from the banker\n        if (banker() == from) {\n            selector = IERC721Receiver.onERC721Received.selector;\n        }\n    }\n\n    function onERC1155Received(\n        address, // operator,\n        address from,\n        uint256, // id,\n        uint256, // value,\n        bytes calldata // data\n    ) public view returns (bytes4 selector) {\n        // for safety, only allow transfer of ERC1155 tokens from the banker\n        if (banker() == from) {\n            selector = IERC1155Receiver.onERC1155Received.selector;\n        }\n    }\n\n    function onERC1155BatchReceived(\n        address, // operator,\n        address from,\n        uint256[] calldata, // ids,\n        uint256[] calldata, // values,\n        bytes calldata // data\n    ) public view returns (bytes4 selector) {\n        // for safety, only allow transfer of ERC1155 tokens from the banker\n        if (banker() == from) {\n            selector = IERC1155Receiver.onERC1155BatchReceived.selector;\n        }\n    }\n}\n"
6     },
7     "contracts/interfaces/IERC1155.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
9     },
10     "contracts/interfaces/IERC1155Receiver.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
12     },
13     "contracts/interfaces/IERC165.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
15     },
16     "contracts/interfaces/IERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
18     },
19     "contracts/interfaces/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either\n     * {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
21     },
22     "contracts/interfaces/IERC721Receiver.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will\n     * be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
24     },
25     "contracts/interfaces/IEscrow.sol": {
26       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\ninterface IEscrow {\n    event Withdrawal(uint256 indexed amount, address indexed withdrawer);\n    event Deposit(uint256 indexed amount, address indexed depositer);\n    event ClaimAuthorized(uint256 indexed claimId, address indexed claimant);\n    event PrizeAdded(uint256 indexed claimId);\n    event PrizeRemoved(uint256 indexed claimId, address indexed recipient);\n    event PrizeReceived(uint256 indexed claimId, address indexed recipient);\n\n    function currencyBalance() external returns (uint256);\n\n    function deposit(address spender, uint256 amount) external;\n\n    function withdraw(address recipient, uint256 amount) external;\n\n    function authorizeClaim(uint256 claimId, address claimant) external;\n\n    function claimFor(address claimant, uint256 claimId, address recipient) external;\n}\n"
27     },
28     "contracts/library/errors/Errors.sol": {
29       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.4 <0.9.0;\n\nlibrary Errors {\n    error LinkError();\n    error ArrayMismatch();\n    error OutOfRange(uint256 value);\n    error OutOfRangeSigned(int256 value);\n    error UnsignedOverflow(uint256 value);\n    error SignedOverflow(int256 value);\n    error DuplicateCall();\n\n    error NotAContract();\n    error InterfaceNotSupported();\n    error NotInitialized();\n    error AlreadyInitialized();\n    error BadSender(address expected, address caller);\n    error AddressTarget(address target);\n    error UserPermissions();\n\n    error InvalidHash();\n    error InvalidSignature();\n    error InvalidSignatureLength();\n    error InvalidSignatureS();\n\n    error InsufficientBalance(uint256 available, uint256 required);\n    error InsufficientSupply(uint256 supply, uint256 available, int256 requested);  // 0x5437b336\n    error InsufficientAvailable(uint256 available, uint256 requested);\n    error InvalidToken(uint256 tokenId);                                            // 0x925d6b18\n    error TokenNotMintable(uint256 tokenId);\n    error InvalidTokenType();\n\n    error ERC1155Receiver();\n\n    error ContractPaused();\n\n    error PaymentFailed(uint256 amount);\n    error IncorrectPayment(uint256 required, uint256 provided);                     // 0x0d35e921\n\terror TooManyForTransaction(uint256 mintLimit, uint256 amount);\n\n    error AuctionInactive(uint256 auctionId);\n    error AuctionActive(uint256 auctionId);\n    error InvalidBid(uint256 auctionId, uint256 amount);\n    error BidTooLow(uint256 auctionId, uint256 bid, uint256 minBid);\n    error AuctionClosed(uint256 auctionId);\n    error AuctionInExtendedBidding(uint256 auctionId);\n    error AuctionAborted(uint256 auctionId);\n\n    error AlreadyClaimed(uint256 lotId);\n}\n"
30     },
31     "contracts/oz-simplified/Context.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\nimport { Initializable } from \"./Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
33     },
34     "contracts/oz-simplified/Initializable.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport { Errors } from \"../library/errors/Errors.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n        if (!_initializing && _initialized) revert Errors.AlreadyInitialized();\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
36     },
37     "contracts/utils/EscrowOwnable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport { Errors } from \"../library/errors/Errors.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there are two accounts (an owner and a proxy) that can be granted exclusive\n * access to specific functions. Only the owner can set the proxy.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract EscrowOwnable {\n    address private _owner;\n    address private _proxy;\n    address private _banker;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Returns the address of the current proxy.\n     */\n    function proxy() public view virtual returns (address) {\n        return _proxy;\n    }\n\n    /**\n     * @dev Returns the address of the current proxy.\n     */\n    function banker() public view virtual returns (address) {\n        return _banker;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (owner() != msg.sender) revert Errors.UserPermissions();\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the proxy or the owner.\n     */\n    modifier onlyAuthorized() {\n        if (\n            proxy() != msg.sender &&\n            banker() != msg.sender &&\n            owner() != msg.sender\n        ) revert Errors.UserPermissions();\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert Errors.AddressTarget(newOwner);\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Sets the proxy for the contract to a new account (`newProxy`).\n     * Can only be called by the current owner.\n     */\n    function setProxy(address newProxy) public virtual onlyOwner {\n        _proxy = newProxy;\n    }\n\n    /**\n     * @dev Sets the proxy for the contract to a new account (`newProxy`).\n     * Can only be called by the current owner.\n     */\n    function setBanker(address newBanker) public virtual onlyOwner {\n        _banker = newBanker;\n    }\n\n    function _setOwner(address newOwner) internal {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
39     }
40   },
41   "settings": {
42     "optimizer": {
43       "enabled": true,
44       "runs": 200
45     },
46     "outputSelection": {
47       "*": {
48         "*": [
49           "evm.bytecode",
50           "evm.deployedBytecode",
51           "devdoc",
52           "userdoc",
53           "metadata",
54           "abi"
55         ]
56       }
57     },
58     "libraries": {}
59   }
60 }}