1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/DenDekaDenOmikuji.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.17;\r\n/* \r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@...........................................................................@@\r\n* @@@...........................................................................@@\r\n* @@@@........................................................................*@@@\r\n* @@@@@......................................................................@@@@@\r\n* @@@@@@#...................................................................@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@*...............@@@@@@@@............@@@@@@@@%...........@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@..............%@@@@@@@.............@@@@@@@,............@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@............@@@@@@@&............/@@@@@@@............/@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@..........@@@@@@@*............@@@@@@@@............*@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@.......,@@@@@@@.............@@@@@@@%............(@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@............/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@%...............................,@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@.................................@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@.................................@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@...............................@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@.............................@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,............/@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(............%@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@............,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(............%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(...........@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.........@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#.......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.... @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 電殿神伝 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DenDekaDen @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Do you believe? @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ JD & BH @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n*/\r\n\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/utils/Base64.sol';\r\nimport '@openzeppelin/contracts/utils/Strings.sol';\r\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\r\n\r\ncontract DenDekaDenOmikuji is Ownable, ERC721 { \r\n  // Libraries\r\n  using Strings for uint256;\r\n\r\n  // For random attribute, use:\r\n  // tokenId, timestamp, and donation amount\r\n  struct TraitSeeds {\r\n    uint256 timestamp;\r\n    // how much was donated during mint -- used for better probabilities\r\n    uint256 donationAmount;\r\n  }\r\n\r\n  // CONSTANTS\r\n  uint8 constant NUM_CHARACTERS = 7;\r\n  uint16 constant OMIKUJI_PER_CHARACTER = 108;\r\n\r\n  // 0.07ETH is donation boost!\r\n  // If you donate 0.07ETH or greater, your luck probabilities are boosted!\r\n  uint256 constant DONATION_BOOST_THRESHOLD = 70000000000000000;\r\n\r\n  /******* MINTING DATA *******/\r\n\r\n  // track omikuji minter per character\r\n  uint8[NUM_CHARACTERS] ascendingCharacterMints;\r\n  // need to track team mints too\r\n  uint8[NUM_CHARACTERS] descendingCharacterMints;\r\n\r\n\r\n  // track GODLY tokenId for each character\r\n  // IMPORTANT: defaults to 0 so NO TOKEN should have id of 0\r\n  uint256[NUM_CHARACTERS] public godlyTokens;\r\n\r\n  // storage of seeds for calculating traits\r\n  mapping(uint256 /* tokenId */ => TraitSeeds) tokenTraitSeeds;\r\n\r\n  // record ifa wallet has already minted a character\r\n  mapping(address => mapping(uint8 /* characterId */ => uint256)) addressCharacterMints;\r\n\r\n  // WHITELIST props\r\n  bytes32 whitelistMerkleRoot;\r\n  // JAPAN 2023-01-01 00:00:00 TIMESTAMP\r\n  uint256 whitelistMintStartTime = 1672498800;\r\n  // JAPAN 2023-01-01 07:30:00 TIMESTAMP\r\n  uint256 mainMintStartTime = 1672525800;\r\n  // whitelist mint records\r\n  mapping(address /* user */ => bool) whitelistAddressMints;\r\n  // team mint merkle root\r\n  bytes32 teamMerkleRoot;\r\n  // Team mints capped at 35\r\n  uint256 teamMintsRemaining = 35;\r\n\r\n  /******* ATTRIBUTE PROBABILITIES *********/\r\n\r\n  // base attributes do not include \"very good\"\r\n  uint8[] baseAttributeProbabilities = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3];\r\n\r\n  // special attribute probabilities includes \"very good\"\r\n  uint8[] specialAttributeProbabilities = [0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4];\r\n\r\n  // Very good most likely, then great, then good -- godly boosted on mint\r\n  uint8[] boostAttributeProbabilities = [2, 3, 3, 3, 3, 4, 4, 4];\r\n\r\n  // METADATA PROPS\r\n  string _baseImgUri = \"https://dendekaden.s3.ap-northeast-1.amazonaws.com/\";\r\n  bool _imgUriLocked = false;\r\n  string constant DESCRIPTION = 'Sacred lots drawn by the First Believers, and held by the most ardent Devotees of ';\r\n  string constant EXTERNAL_URL = 'https://www.dendekaden.com/';\r\n  string[] fortuneCategories = [\r\n    '2. LOVE',\r\n    '3. BENEFACTOR',\r\n    '4. BUSINESS',\r\n    '5. ACADEMICS',\r\n    '6. DISPUTES',\r\n    '7. TRAVEL',\r\n    '8. HEALTH',\r\n    '9. WISH'\r\n  ];\r\n \r\n  string[] characterNames = [\r\n    // 吉祥天\r\n    'Megna',\r\n    // 弁財天\r\n    'Bene',\r\n    // 大黒天\r\n    'Yoa',\r\n    // 恵比寿こひる\r\n    'Kohiru',\r\n    // 毘沙門天\r\n    'Hisato',\r\n    // 布袋\r\n    'Taylor',\r\n    // 寿老人\r\n    'Momo'\r\n  ];\r\n\r\n  string[][] fortuneValues = [\r\n    // LOVE\r\n    [\r\n      // 告白しらく待て\r\n      '\\xe5\\x91\\x8a\\xe7\\x99\\xbd\\xe3\\x81\\x97\\xe3\\x81\\xb0\\xe3\\x82\\x89\\xe3\\x81\\x8f\\xe5\\xbe\\x85\\xe3\\x81\\xa6',\r\n      // 今叶わずとも縁あり\r\n      '\\xe4\\xbb\\x8a\\xe5\\x8f\\xb6\\xe3\\x82\\x8f\\xe3\\x81\\x9a\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe7\\xb8\\x81\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 歳に囚われる必要なし\r\n      '\\xe6\\xad\\xb3\\xe3\\x81\\xab\\xe5\\x9b\\x9a\\xe3\\x82\\x8f\\xe3\\x82\\x8c\\xe3\\x82\\x8b\\xe5\\xbf\\x85\\xe8\\xa6\\x81\\xe3\\x81\\xaa\\xe3\\x81\\x97',\r\n      // 良い人既に近くに\r\n      '\\xe8\\x89\\xaf\\xe3\\x81\\x84\\xe4\\xba\\xba\\xe6\\x97\\xa2\\xe3\\x81\\xab\\xe8\\xbf\\x91\\xe3\\x81\\x8f\\xe3\\x81\\xab'\r\n    ],\r\n    // BENEFACTOR\r\n    [\r\n      // たよりなし\r\n      '\\xe3\\x81\\x9f\\xe3\\x82\\x88\\xe3\\x82\\x8a\\xe3\\x81\\xaa\\xe3\\x81\\x97',\r\n      // 来るとも遅し 往きて利あり\r\n      '\\xe6\\x9d\\xa5\\xe3\\x82\\x8b\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe9\\x81\\x85\\xe3\\x81\\x97\\x20\\xe5\\xbe\\x80\\xe3\\x81\\x8d\\xe3\\x81\\xa6\\xe5\\x88\\xa9\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 来る\r\n      '\\xe6\\x9d\\xa5\\xe3\\x82\\x8b',\r\n      // 来たる つれあり\r\n      '\\xe6\\x9d\\xa5\\xe3\\x81\\x9f\\xe3\\x82\\x8b\\x20\\xe3\\x81\\xa4\\xe3\\x82\\x8c\\xe3\\x81\\x82\\xe3\\x82\\x8a'\r\n    ],\r\n    // BUSINESS\r\n    [\r\n      // 堅実さを取り戻せ\r\n      '\\xe5\\xa0\\x85\\xe5\\xae\\x9f\\xe3\\x81\\x95\\xe3\\x82\\x92\\xe5\\x8f\\x96\\xe3\\x82\\x8a\\xe6\\x88\\xbb\\xe3\\x81\\x9b',\r\n      // 利益少し焦るな　後になれば益あり\r\n      '\\xe5\\x88\\xa9\\xe7\\x9b\\x8a\\xe5\\xb0\\x91\\xe3\\x81\\x97\\xe7\\x84\\xa6\\xe3\\x82\\x8b\\xe3\\x81\\xaa\\xe3\\x80\\x80\\xe5\\xbe\\x8c\\xe3\\x81\\xab\\xe3\\x81\\xaa\\xe3\\x82\\x8c\\xe3\\x81\\xb0\\xe7\\x9b\\x8a\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 利益たしかなり\r\n      '\\xe5\\x88\\xa9\\xe7\\x9b\\x8a\\xe3\\x81\\x9f\\xe3\\x81\\x97\\xe3\\x81\\x8b\\xe3\\x81\\xaa\\xe3\\x82\\x8a',\r\n      // 十分幸福\r\n      '\\xe5\\x8d\\x81\\xe5\\x88\\x86\\xe5\\xb9\\xb8\\xe7\\xa6\\x8f'\r\n    ],\r\n    // ACADEMICS\r\n    [\r\n      // 今回は諦め切り替えるべし\r\n      '\\xe4\\xbb\\x8a\\xe5\\x9b\\x9e\\xe3\\x81\\xaf\\xe8\\xab\\xa6\\xe3\\x82\\x81\\xe5\\x88\\x87\\xe3\\x82\\x8a\\xe6\\x9b\\xbf\\xe3\\x81\\x88\\xe3\\x82\\x8b\\xe3\\x81\\xb9\\xe3\\x81\\x97',\r\n      // 伸びる時努力せよ\r\n      '\\xe4\\xbc\\xb8\\xe3\\x81\\xb3\\xe3\\x82\\x8b\\xe6\\x99\\x82\\xe5\\x8a\\xaa\\xe5\\x8a\\x9b\\xe3\\x81\\x9b\\xe3\\x82\\x88',\r\n      // 努力しただけ力になる\r\n      '\\xe5\\x8a\\xaa\\xe5\\x8a\\x9b\\xe3\\x81\\x97\\xe3\\x81\\x9f\\xe3\\x81\\xa0\\xe3\\x81\\x91\\xe5\\x8a\\x9b\\xe3\\x81\\xab\\xe3\\x81\\xaa\\xe3\\x82\\x8b',\r\n      // 歩み遅くとも着実に実る\r\n      '\\xe6\\xad\\xa9\\xe3\\x81\\xbf\\xe9\\x81\\x85\\xe3\\x81\\x8f\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe7\\x9d\\x80\\xe5\\xae\\x9f\\xe3\\x81\\xab\\xe5\\xae\\x9f\\xe3\\x82\\x8b'\r\n    ],\r\n    // DISPUTES\r\n    [\r\n      // 争いごと負けなり\r\n      '\\xe4\\xba\\x89\\xe3\\x81\\x84\\xe3\\x81\\x94\\xe3\\x81\\xa8\\xe8\\xb2\\xa0\\xe3\\x81\\x91\\xe3\\x81\\xaa\\xe3\\x82\\x8a',\r\n      // 勝ち退くが利\r\n      '\\xe5\\x8b\\x9d\\xe3\\x81\\xa1\\xe9\\x80\\x80\\xe3\\x81\\x8f\\xe3\\x81\\x8c\\xe5\\x88\\xa9',\r\n      // よろしさわぐな\r\n      '\\xe3\\x82\\x88\\xe3\\x82\\x8d\\xe3\\x81\\x97\\xe3\\x81\\x95\\xe3\\x82\\x8f\\xe3\\x81\\x90\\xe3\\x81\\xaa',\r\n      // 心和やかにして吉\r\n      '\\xe5\\xbf\\x83\\xe5\\x92\\x8c\\xe3\\x82\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xab\\xe3\\x81\\x97\\xe3\\x81\\xa6\\xe5\\x90\\x89'\r\n    ],\r\n    // TRAVEL\r\n    [\r\n      // かえりはほど知れず\r\n      '\\xe3\\x81\\x8b\\xe3\\x81\\x88\\xe3\\x82\\x8a\\xe3\\x81\\xaf\\xe3\\x81\\xbb\\xe3\\x81\\xa9\\xe7\\x9f\\xa5\\xe3\\x82\\x8c\\xe3\\x81\\x9a',\r\n      // して良いが無理避けよ\r\n      '\\xe3\\x81\\x97\\xe3\\x81\\xa6\\xe8\\x89\\xaf\\xe3\\x81\\x84\\xe3\\x81\\x8c\\xe7\\x84\\xa1\\xe7\\x90\\x86\\xe9\\x81\\xbf\\xe3\\x81\\x91\\xe3\\x82\\x88',\r\n      // 遠くはいかぬが利\r\n      '\\xe9\\x81\\xa0\\xe3\\x81\\x8f\\xe3\\x81\\xaf\\xe3\\x81\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xac\\xe3\\x81\\x8c\\xe5\\x88\\xa9',\r\n      // 快調に進む\r\n      '\\xe5\\xbf\\xab\\xe8\\xaa\\xbf\\xe3\\x81\\xab\\xe9\\x80\\xb2\\xe3\\x82\\x80'\r\n    ],\r\n    // HEALTH\r\n    [\r\n      // 医師はしっかり選べ\r\n      '\\xe5\\x8c\\xbb\\xe5\\xb8\\xab\\xe3\\x81\\xaf\\xe3\\x81\\x97\\xe3\\x81\\xa3\\xe3\\x81\\x8b\\xe3\\x82\\x8a\\xe9\\x81\\xb8\\xe3\\x81\\xb9',\r\n      // 早く医師に診せろ\r\n      '\\xe6\\x97\\xa9\\xe3\\x81\\x8f\\xe5\\x8c\\xbb\\xe5\\xb8\\xab\\xe3\\x81\\xab\\xe8\\xa8\\xba\\xe3\\x81\\x9b\\xe3\\x82\\x8d',\r\n      // 異変感じたら休め\r\n      '\\xe7\\x95\\xb0\\xe5\\xa4\\x89\\xe6\\x84\\x9f\\xe3\\x81\\x98\\xe3\\x81\\x9f\\xe3\\x82\\x89\\xe4\\xbc\\x91\\xe3\\x82\\x81',\r\n      // 心穏やかに過ごせ 快方に向かう\r\n      '\\xe5\\xbf\\x83\\xe7\\xa9\\x8f\\xe3\\x82\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xab\\xe9\\x81\\x8e\\xe3\\x81\\x94\\xe3\\x81\\x9b\\x20\\xe5\\xbf\\xab\\xe6\\x96\\xb9\\xe3\\x81\\xab\\xe5\\x90\\x91\\xe3\\x81\\x8b\\xe3\\x81\\x86'\r\n    ],\r\n    // WISH\r\n    [\r\n      // 障りあり\r\n      '\\xe9\\x9a\\x9c\\xe3\\x82\\x8a\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 焦るな機は来る\r\n      '\\xe7\\x84\\xa6\\xe3\\x82\\x8b\\xe3\\x81\\xaa\\xe6\\xa9\\x9f\\xe3\\x81\\xaf\\xe6\\x9d\\xa5\\xe3\\x82\\x8b',\r\n      // 多く望まなければ叶う\r\n      '\\xe5\\xa4\\x9a\\xe3\\x81\\x8f\\xe6\\x9c\\x9b\\xe3\\x81\\xbe\\xe3\\x81\\xaa\\xe3\\x81\\x91\\xe3\\x82\\x8c\\xe3\\x81\\xb0\\xe5\\x8f\\xb6\\xe3\\x81\\x86',\r\n      // 力合わせればきっと叶う\r\n      '\\xe5\\x8a\\x9b\\xe5\\x90\\x88\\xe3\\x82\\x8f\\xe3\\x81\\x9b\\xe3\\x82\\x8c\\xe3\\x81\\xb0\\xe3\\x81\\x8d\\xe3\\x81\\xa3\\xe3\\x81\\xa8\\xe5\\x8f\\xb6\\xe3\\x81\\x86'\r\n    ]\r\n  ];\r\n\r\n  string[][] specialFortuneValues = [\r\n    // LOVE\r\n    [\r\n      // 告白しばらく待て\r\n      '\\xe5\\x91\\x8a\\xe7\\x99\\xbd\\xe3\\x81\\x97\\xe3\\x81\\xb0\\xe3\\x82\\x89\\xe3\\x81\\x8f\\xe5\\xbe\\x85\\xe3\\x81\\xa6',\r\n      // 今叶わずとも縁あり\r\n      '\\xe4\\xbb\\x8a\\xe5\\x8f\\xb6\\xe3\\x82\\x8f\\xe3\\x81\\x9a\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe7\\xb8\\x81\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 歳に囚われる必要なし\r\n      '\\xe6\\xad\\xb3\\xe3\\x81\\xab\\xe5\\x9b\\x9a\\xe3\\x82\\x8f\\xe3\\x82\\x8c\\xe3\\x82\\x8b\\xe5\\xbf\\x85\\xe8\\xa6\\x81\\xe3\\x81\\xaa\\xe3\\x81\\x97',\r\n      // 良い人既に近くに\r\n      '\\xe8\\x89\\xaf\\xe3\\x81\\x84\\xe4\\xba\\xba\\xe6\\x97\\xa2\\xe3\\x81\\xab\\xe8\\xbf\\x91\\xe3\\x81\\x8f\\xe3\\x81\\xab',\r\n      // 迷うことなかれ 心に決めた人が最上\r\n      '\\xe8\\xbf\\xb7\\xe3\\x81\\x86\\xe3\\x81\\x93\\xe3\\x81\\xa8\\xe3\\x81\\xaa\\xe3\\x81\\x8b\\xe3\\x82\\x8c\\x20\\xe5\\xbf\\x83\\xe3\\x81\\xab\\xe6\\xb1\\xba\\xe3\\x82\\x81\\xe3\\x81\\x9f\\xe4\\xba\\xba\\xe3\\x81\\x8c\\xe6\\x9c\\x80\\xe4\\xb8\\x8a',\r\n      // 愛せよ 全て叶う\r\n      '\\xe6\\x84\\x9b\\xe3\\x81\\x9b\\xe3\\x82\\x88\\x20\\xe5\\x85\\xa8\\xe3\\x81\\xa6\\xe5\\x8f\\xb6\\xe3\\x81\\x86'\r\n    ],\r\n    // BENEFACTOR\r\n    [\r\n      // たよりなし\r\n      '\\xe3\\x81\\x9f\\xe3\\x82\\x88\\xe3\\x82\\x8a\\xe3\\x81\\xaa\\xe3\\x81\\x97',\r\n      // 来るとも遅し 往きて利あり\r\n      '\\xe6\\x9d\\xa5\\xe3\\x82\\x8b\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe9\\x81\\x85\\xe3\\x81\\x97\\x20\\xe5\\xbe\\x80\\xe3\\x81\\x8d\\xe3\\x81\\xa6\\xe5\\x88\\xa9\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 来る\r\n      '\\xe6\\x9d\\xa5\\xe3\\x82\\x8b',\r\n      // 来たる つれあり\r\n      '\\xe6\\x9d\\xa5\\xe3\\x81\\x9f\\xe3\\x82\\x8b\\x20\\xe3\\x81\\xa4\\xe3\\x82\\x8c\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 来る 驚くことあり\r\n      '\\xe6\\x9d\\xa5\\xe3\\x82\\x8b\\x20\\xe9\\xa9\\x9a\\xe3\\x81\\x8f\\xe3\\x81\\x93\\xe3\\x81\\xa8\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 来て喜びの奏こだまする\r\n      '\\xe6\\x9d\\xa5\\xe3\\x81\\xa6\\xe5\\x96\\x9c\\xe3\\x81\\xb3\\xe3\\x81\\xae\\xe5\\xa5\\x8f\\xe3\\x81\\x93\\xe3\\x81\\xa0\\xe3\\x81\\xbe\\xe3\\x81\\x99\\xe3\\x82\\x8b'\r\n    ],\r\n    // BUSINESS\r\n    [\r\n      // 堅実さを取り戻せ\r\n      '\\xe5\\xa0\\x85\\xe5\\xae\\x9f\\xe3\\x81\\x95\\xe3\\x82\\x92\\xe5\\x8f\\x96\\xe3\\x82\\x8a\\xe6\\x88\\xbb\\xe3\\x81\\x9b',\r\n      // 利益少し焦るな　後になれば益あり\r\n      '\\xe5\\x88\\xa9\\xe7\\x9b\\x8a\\xe5\\xb0\\x91\\xe3\\x81\\x97\\xe7\\x84\\xa6\\xe3\\x82\\x8b\\xe3\\x81\\xaa\\xe3\\x80\\x80\\xe5\\xbe\\x8c\\xe3\\x81\\xab\\xe3\\x81\\xaa\\xe3\\x82\\x8c\\xe3\\x81\\xb0\\xe7\\x9b\\x8a\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 利益たしかなり\r\n      '\\xe5\\x88\\xa9\\xe7\\x9b\\x8a\\xe3\\x81\\x9f\\xe3\\x81\\x97\\xe3\\x81\\x8b\\xe3\\x81\\xaa\\xe3\\x82\\x8a',\r\n      // 十分幸福\r\n      '\\xe5\\x8d\\x81\\xe5\\x88\\x86\\xe5\\xb9\\xb8\\xe7\\xa6\\x8f',\r\n      // 御神徳により隆昌する\r\n      '\\xe5\\xbe\\xa1\\xe7\\xa5\\x9e\\xe5\\xbe\\xb3\\xe3\\x81\\xab\\xe3\\x82\\x88\\xe3\\x82\\x8a\\xe9\\x9a\\x86\\xe6\\x98\\x8c\\xe3\\x81\\x99\\xe3\\x82\\x8b',\r\n      // 夜動かばおおいに利あり\r\n      '\\xe5\\xa4\\x9c\\xe5\\x8b\\x95\\xe3\\x81\\x8b\\xe3\\x81\\xb0\\xe3\\x81\\x8a\\xe3\\x81\\x8a\\xe3\\x81\\x84\\xe3\\x81\\xab\\xe5\\x88\\xa9\\xe3\\x81\\x82\\xe3\\x82\\x8a'\r\n    ],\r\n    // ACADEMICS\r\n    [\r\n      // 今回は諦め切り替えるべし\r\n      '\\xe4\\xbb\\x8a\\xe5\\x9b\\x9e\\xe3\\x81\\xaf\\xe8\\xab\\xa6\\xe3\\x82\\x81\\xe5\\x88\\x87\\xe3\\x82\\x8a\\xe6\\x9b\\xbf\\xe3\\x81\\x88\\xe3\\x82\\x8b\\xe3\\x81\\xb9\\xe3\\x81\\x97',\r\n      // 伸びる時努力せよ\r\n      '\\xe4\\xbc\\xb8\\xe3\\x81\\xb3\\xe3\\x82\\x8b\\xe6\\x99\\x82\\xe5\\x8a\\xaa\\xe5\\x8a\\x9b\\xe3\\x81\\x9b\\xe3\\x82\\x88',\r\n      // 努力しただけ力になる\r\n      '\\xe5\\x8a\\xaa\\xe5\\x8a\\x9b\\xe3\\x81\\x97\\xe3\\x81\\x9f\\xe3\\x81\\xa0\\xe3\\x81\\x91\\xe5\\x8a\\x9b\\xe3\\x81\\xab\\xe3\\x81\\xaa\\xe3\\x82\\x8b',\r\n      // 歩み遅くとも着実に実る\r\n      '\\xe6\\xad\\xa9\\xe3\\x81\\xbf\\xe9\\x81\\x85\\xe3\\x81\\x8f\\xe3\\x81\\xa8\\xe3\\x82\\x82\\xe7\\x9d\\x80\\xe5\\xae\\x9f\\xe3\\x81\\xab\\xe5\\xae\\x9f\\xe3\\x82\\x8b',\r\n      // 自信持てよろししかない\r\n      '\\xe8\\x87\\xaa\\xe4\\xbf\\xa1\\xe6\\x8c\\x81\\xe3\\x81\\xa6\\xe3\\x82\\x88\\xe3\\x82\\x8d\\xe3\\x81\\x97\\xe3\\x81\\x97\\xe3\\x81\\x8b\\xe3\\x81\\xaa\\xe3\\x81\\x84',\r\n      // 信心すればどこまでも伸びる\r\n      '\\xe4\\xbf\\xa1\\xe5\\xbf\\x83\\xe3\\x81\\x99\\xe3\\x82\\x8c\\xe3\\x81\\xb0\\xe3\\x81\\xa9\\xe3\\x81\\x93\\xe3\\x81\\xbe\\xe3\\x81\\xa7\\xe3\\x82\\x82\\xe4\\xbc\\xb8\\xe3\\x81\\xb3\\xe3\\x82\\x8b'\r\n    ],\r\n    // DISPUTES\r\n    [\r\n      // 争いごと負けなり\r\n      '\\xe4\\xba\\x89\\xe3\\x81\\x84\\xe3\\x81\\x94\\xe3\\x81\\xa8\\xe8\\xb2\\xa0\\xe3\\x81\\x91\\xe3\\x81\\xaa\\xe3\\x82\\x8a',\r\n      // 勝ち退くが利\r\n      '\\xe5\\x8b\\x9d\\xe3\\x81\\xa1\\xe9\\x80\\x80\\xe3\\x81\\x8f\\xe3\\x81\\x8c\\xe5\\x88\\xa9',\r\n      // よろしさわぐな\r\n      '\\xe3\\x82\\x88\\xe3\\x82\\x8d\\xe3\\x81\\x97\\xe3\\x81\\x95\\xe3\\x82\\x8f\\xe3\\x81\\x90\\xe3\\x81\\xaa',\r\n      // 心和やかにして吉\r\n      '\\xe5\\xbf\\x83\\xe5\\x92\\x8c\\xe3\\x82\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xab\\xe3\\x81\\x97\\xe3\\x81\\xa6\\xe5\\x90\\x89',\r\n      // 勝負に利あり\r\n      '\\xe5\\x8b\\x9d\\xe8\\xb2\\xa0\\xe3\\x81\\xab\\xe5\\x88\\xa9\\xe3\\x81\\x82\\xe3\\x82\\x8a',\r\n      // 不言実行にて勝つことやすし\r\n      '\\xe4\\xb8\\x8d\\xe8\\xa8\\x80\\xe5\\xae\\x9f\\xe8\\xa1\\x8c\\xe3\\x81\\xab\\xe3\\x81\\xa6\\xe5\\x8b\\x9d\\xe3\\x81\\xa4\\xe3\\x81\\x93\\xe3\\x81\\xa8\\xe3\\x82\\x84\\xe3\\x81\\x99\\xe3\\x81\\x97'\r\n    ],\r\n    // TRAVEL\r\n    [\r\n      // かえりはほど知れず\r\n      '\\xe3\\x81\\x8b\\xe3\\x81\\x88\\xe3\\x82\\x8a\\xe3\\x81\\xaf\\xe3\\x81\\xbb\\xe3\\x81\\xa9\\xe7\\x9f\\xa5\\xe3\\x82\\x8c\\xe3\\x81\\x9a',\r\n      // して良いが無理避けよ\r\n      '\\xe3\\x81\\x97\\xe3\\x81\\xa6\\xe8\\x89\\xaf\\xe3\\x81\\x84\\xe3\\x81\\x8c\\xe7\\x84\\xa1\\xe7\\x90\\x86\\xe9\\x81\\xbf\\xe3\\x81\\x91\\xe3\\x82\\x88',\r\n      // 遠くはいかぬが利\r\n      '\\xe9\\x81\\xa0\\xe3\\x81\\x8f\\xe3\\x81\\xaf\\xe3\\x81\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xac\\xe3\\x81\\x8c\\xe5\\x88\\xa9',\r\n      // 快調に進む\r\n      '\\xe5\\xbf\\xab\\xe8\\xaa\\xbf\\xe3\\x81\\xab\\xe9\\x80\\xb2\\xe3\\x82\\x80',\r\n      // 場所に執着するな いけうまくいく\r\n      '\\xe5\\xa0\\xb4\\xe6\\x89\\x80\\xe3\\x81\\xab\\xe5\\x9f\\xb7\\xe7\\x9d\\x80\\xe3\\x81\\x99\\xe3\\x82\\x8b\\xe3\\x81\\xaa\\x20\\xe3\\x81\\x84\\xe3\\x81\\x91\\xe3\\x81\\x86\\xe3\\x81\\xbe\\xe3\\x81\\x8f\\xe3\\x81\\x84\\xe3\\x81\\x8f',\r\n      // 御神徳により成功しかない\r\n      '\\xe5\\xbe\\xa1\\xe7\\xa5\\x9e\\xe5\\xbe\\xb3\\xe3\\x81\\xab\\xe3\\x82\\x88\\xe3\\x82\\x8a\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe3\\x81\\x97\\xe3\\x81\\x8b\\xe3\\x81\\xaa\\xe3\\x81\\x84'\r\n    ],\r\n    // HEALTH\r\n    [\r\n      // 医師はしっかり選べ\r\n      '\\xe5\\x8c\\xbb\\xe5\\xb8\\xab\\xe3\\x81\\xaf\\xe3\\x81\\x97\\xe3\\x81\\xa3\\xe3\\x81\\x8b\\xe3\\x82\\x8a\\xe9\\x81\\xb8\\xe3\\x81\\xb9',\r\n      // 早く医師に診せろ\r\n      '\\xe6\\x97\\xa9\\xe3\\x81\\x8f\\xe5\\x8c\\xbb\\xe5\\xb8\\xab\\xe3\\x81\\xab\\xe8\\xa8\\xba\\xe3\\x81\\x9b\\xe3\\x82\\x8d',\r\n      // 異変感じたら休め\r\n      '\\xe7\\x95\\xb0\\xe5\\xa4\\x89\\xe6\\x84\\x9f\\xe3\\x81\\x98\\xe3\\x81\\x9f\\xe3\\x82\\x89\\xe4\\xbc\\x91\\xe3\\x82\\x81',\r\n      // 心穏やかに過ごせ 快方に向かう\r\n      '\\xe5\\xbf\\x83\\xe7\\xa9\\x8f\\xe3\\x82\\x84\\xe3\\x81\\x8b\\xe3\\x81\\xab\\xe9\\x81\\x8e\\xe3\\x81\\x94\\xe3\\x81\\x9b\\x20\\xe5\\xbf\\xab\\xe6\\x96\\xb9\\xe3\\x81\\xab\\xe5\\x90\\x91\\xe3\\x81\\x8b\\xe3\\x81\\x86',\r\n      // 技術信ぜよ必ず治る\r\n      '\\xe6\\x8a\\x80\\xe8\\xa1\\x93\\xe4\\xbf\\xa1\\xe3\\x81\\x9c\\xe3\\x82\\x88\\xe5\\xbf\\x85\\xe3\\x81\\x9a\\xe6\\xb2\\xbb\\xe3\\x82\\x8b',\r\n      // 御神徳により全て治る\r\n      '\\xe5\\xbe\\xa1\\xe7\\xa5\\x9e\\xe5\\xbe\\xb3\\xe3\\x81\\xab\\xe3\\x82\\x88\\xe3\\x82\\x8a\\xe5\\x85\\xa8\\xe3\\x81\\xa6\\xe6\\xb2\\xbb\\xe3\\x82\\x8b'\r\n    ]\r\n  ];\r\n\r\n  string[] overallFortune = [\r\n    // 凶\r\n    '\\xe5\\x87\\xb6',\r\n    // 末吉\r\n    '\\xe6\\x9c\\xab\\xe5\\x90\\x89',\r\n    // 吉\r\n    '\\xe5\\x90\\x89',\r\n    // 中吉\r\n    '\\xe4\\xb8\\xad\\xe5\\x90\\x89',\r\n    // 大吉\r\n    '\\xe5\\xa4\\xa7\\xe5\\x90\\x89',\r\n    // 大大吉\r\n    '\\xe5\\xa4\\xa7\\xe5\\xa4\\xa7\\xe5\\x90\\x89'\r\n  ];\r\n\r\n  // Beneficiary address\r\n  address beneficiary;\r\n\r\n  constructor() ERC721('DenDekaDen Genesis Omikuji', '$DDD') {\r\n    beneficiary = owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Check mints remaining per character\r\n   *\r\n   * Returns entire array for less rpc calls on frontend. Can't just return\r\n   * mintsPerCharacter because it is a storage pointer.\r\n   */\r\n  function characterMintsRemaining() public view returns (uint256[] memory) {\r\n    uint256[] memory mintsRemaining = new uint256[](NUM_CHARACTERS);\r\n    for (uint8 i = 0; i < NUM_CHARACTERS; i++) {\r\n      mintsRemaining[i] = characterMintsRemaining(i);\r\n    }\r\n    return mintsRemaining;\r\n  }\r\n\r\n   /**\r\n   * @dev Check mints remaining per character\r\n   *\r\n   * Returns entire array for less rpc calls on frontend. Can't just return\r\n   * mintsPerCharacter because it is a storage pointer.\r\n   */\r\n  function characterMintsRemaining(uint8 characterId) private view returns (uint256) {\r\n    return OMIKUJI_PER_CHARACTER - ascendingCharacterMints[characterId] - descendingCharacterMints[characterId];\r\n  }\r\n\r\n  /**\r\n   * @dev Check mint eligability for address\r\n   * \r\n   * Returns:\r\n   *  - 0 if not eligable\r\n   *  - 1 if main mint\r\n   *  - 2 if whitelist\r\n   *  - 3 if teammint\r\n   */\r\n  function mintEligability(address user, bytes32[] calldata proof) public view returns (uint8) {\r\n    // first check if main mint is open\r\n    if(mainMintStartTime <= block.timestamp) {\r\n      return 1;\r\n    }\r\n\r\n    bytes32 leaf = keccak256(abi.encodePacked(user));\r\n    \r\n    if(whitelistMintStartTime <= block.timestamp) {\r\n      // check whitelist\r\n      if (MerkleProof.verify(proof, whitelistMerkleRoot, leaf)) {\r\n        return 2;\r\n      }\r\n    }\r\n    // now check team whitelist\r\n    if (MerkleProof.verify(proof, teamMerkleRoot, leaf)) {\r\n      return 3;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n \r\n  /**\r\n   * @dev Set the whitelist root\r\n   */\r\n  function setWhitelistRoot(bytes32 root) public onlyOwner {\r\n    whitelistMerkleRoot = root;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the team whitelist root\r\n   */\r\n  function setTeamMerkleRoot(bytes32 root) public onlyOwner {\r\n    teamMerkleRoot = root;\r\n  }\r\n\r\n  function setBeneficiary(address _beneficiary) public onlyOwner {\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the whitelist and mint start times\r\n   *\r\n   * NOTE: can be used to close mint if need be\r\n   */\r\n  function setMintTimes(uint256 whitelistStart, uint256 mintStart) public onlyOwner {\r\n    whitelistMintStartTime = whitelistStart;\r\n    mainMintStartTime = mintStart;\r\n  }\r\n\r\n  /**\r\n   * @dev Public mint function\r\n   *\r\n   * If time is before open mint, will call whitelist mint, otherwise will call\r\n   * normal mint.\r\n   *\r\n   * Cannot mint if not before start time.\r\n   *\r\n   * Requirements:\r\n   *  - cannot\r\n   */\r\n  function mint(uint8 characterId, bytes32[] memory proof) public payable returns (uint256 tokenId) {\r\n    // Check if should be whitelist or normal mint\r\n\r\n    // if past normal mint time, do normal mint\r\n    if (mainMintStartTime <= block.timestamp) {\r\n      return _mint(characterId, true);\r\n    } else if (whitelistMintStartTime <= block.timestamp) {\r\n      // if during normal whitelist period, no need to decrement team mints\r\n      if(_validateWhitelist(proof, whitelistMerkleRoot, true) || _validateWhitelist(proof, teamMerkleRoot, false)) {\r\n        return _mint(characterId, true);\r\n      }\r\n    } else {\r\n      if(_validateWhitelist(proof, teamMerkleRoot, false)) {\r\n        return _teamMint(characterId);\r\n      }\r\n    }\r\n    revert(\"DDDO: Not eligable or already whitelist minted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Whitelist mint\r\n   *\r\n   * Requirements:\r\n   *  - only allow ONE mint per whitelist address\r\n   */\r\n  function _validateWhitelist(bytes32[] memory proof, bytes32 root, bool oneLimit) private returns (bool) {\r\n    // ensure wallet owns no tokens\r\n    if(whitelistAddressMints[msg.sender]) {\r\n      return false;\r\n    }\r\n\r\n    // Check if address exists in merkle tree\r\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n    if(!MerkleProof.verify(proof, root, leaf)){\r\n      return false;\r\n    }\r\n\r\n    // mark account as having minted\r\n    if(oneLimit) {\r\n      whitelistAddressMints[msg.sender] = true;\r\n    }\r\n    \r\n    // mint if qualifies\r\n    return true;\r\n\r\n  }\r\n\r\n   /**\r\n   * @dev Team Mint function\r\n   *\r\n   * Team can mint a limited number of tokens.\r\n   * Team tokens CANNOT be godly tokens.\r\n   */\r\n  function _teamMint(uint8 characterId) private returns (uint256) {\r\n    // check we still have mints remaining\r\n    require(teamMintsRemaining > 0, 'DDDO: No more team mints');\r\n    \r\n    teamMintsRemaining -= 1;\r\n\r\n    return _mint(characterId, false);\r\n  }\r\n\r\n  function ownerCharacters(address owner) public view returns (uint256[] memory) {\r\n    uint256[] memory characters = new uint256[](NUM_CHARACTERS);\r\n\r\n    for (uint8 i = 0; i < NUM_CHARACTERS; i++) {\r\n      characters[i] = addressCharacterMints[owner][i];\r\n    }\r\n\r\n    return characters;\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new omikuji based on character provided\r\n   *\r\n   * Requirements:\r\n   *  - must not be called from contract\r\n   *  - must be valid character\r\n   *  - character must have available omikuji\r\n   *  - must not already own omikuji from this character\r\n   */\r\n  function _mint(uint8 characterId, bool ascending) private returns (uint256) {\r\n    // only allow mint from user address, not bot\r\n    require(tx.origin == msg.sender, 'DDDO: must be wallet');\r\n\r\n    // ensure does not already own this character omikuji\r\n    require(addressCharacterMints[msg.sender][characterId] == 0, \"DDDO: Only 1 omikuji per chara\");\r\n\r\n    // get next token id -- will revert if too many tokens minted for character\r\n    uint256 tokenId = nextTokenIdForCharacter(characterId, ascending);\r\n\r\n    // store seed variables used to calculate attributes\r\n    // on mint, jsut store blockNum + blockHash (?) with tokenId & donation?\r\n    uint256 timestamp = block.timestamp;\r\n    TraitSeeds storage seeds = tokenTraitSeeds[tokenId];\r\n    seeds.timestamp = timestamp;\r\n    seeds.donationAmount = msg.value;\r\n\r\n    // if we do not have a godly token for this character, ~randomly see if godly token\r\n    // NOTE: team mints CANNOT be godly tokens because they progress in descending order\r\n    if (ascending && godlyTokens[characterId] == 0) {\r\n      // if we do not have a godly token within first 107 mints, force 108 mint to be godly\r\n      uint256 mintsRemaining = characterMintsRemaining(characterId);\r\n      if (mintsRemaining == 0) {\r\n        godlyTokens[characterId] = tokenId;\r\n      } else {\r\n        uint256 godlyModulo = mintsRemaining;\r\n\r\n        // if donation is above threshold, boost probability to 20% or better\r\n        if (msg.value >= DONATION_BOOST_THRESHOLD) {\r\n          godlyModulo = godlyModulo > 5 ? 5 : godlyModulo;\r\n        }\r\n\r\n        // Roll for godly trait calculation here to test\r\n        uint256 randRoll = uint256(keccak256(abi.encodePacked(tokenId, msg.sender, timestamp))) % godlyModulo;\r\n\r\n        // If matches godlyModulo, we have found godly token!\r\n        if (randRoll == 0) {\r\n          godlyTokens[characterId] = tokenId;\r\n        }\r\n      }\r\n    }\r\n\r\n    // mint token\r\n    super._mint(msg.sender, tokenId);\r\n\r\n\r\n    // record this address has minted this character\r\n    addressCharacterMints[msg.sender][characterId] = tokenId;\r\n\r\n    return tokenId;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Generate the random attributes of a given token\r\n   * \r\n   * Depends on when and how minted, so pseudo random.\r\n   * \r\n   * NOTE: this is public because likely will use these values in the future.\r\n   * \r\n   * Traits are:\r\n   * \r\n   * LOVE\r\n   * BENEFACTOR\r\n   * BUSINESS\r\n   * ACADEMICS\r\n   * DISPUTES\r\n   * TRAVEL\r\n   * HEALTH\r\n   * WISH -- no special -- last idx in arr\r\n   */\r\n  function _generatePseudoRandomAttributes(uint256 tokenId) public view returns (uint8[] memory) {\r\n\r\n    uint256 characterId = characterIdFromToken(tokenId);\r\n\r\n    // in total 8 traits to derive from tokenId, timestamp, blockhash\r\n    uint8[] memory attributes = new uint8[](8);\r\n    TraitSeeds memory seeds = tokenTraitSeeds[tokenId];\r\n    bytes memory baseSeed = abi.encodePacked(seeds.timestamp, seeds.donationAmount, tokenId);\r\n\r\n    for (uint256 i = 0; i < 8; i++) {\r\n      uint8[] memory traitProbabilities;\r\n\r\n      // check if should use special traits\r\n      if (i == characterId) {\r\n        // check if godly token\r\n        if (godlyTokens[i] == tokenId) {\r\n          traitProbabilities = new uint8[](1);\r\n          traitProbabilities[0] = 5;\r\n        } else {\r\n          // check if should use boost or special probabilities\r\n          if (seeds.donationAmount >= DONATION_BOOST_THRESHOLD) {\r\n            traitProbabilities = boostAttributeProbabilities;\r\n          } else {\r\n            traitProbabilities = specialAttributeProbabilities;\r\n          }\r\n        }\r\n      } else {\r\n        // use base attribute probabilities\r\n        traitProbabilities = baseAttributeProbabilities;\r\n      }\r\n\r\n      // generate random seed\r\n      uint256 randSeed = uint256(keccak256(abi.encodePacked(baseSeed, i)));\r\n      uint8 traitBucket = traitProbabilities[randSeed % traitProbabilities.length];\r\n      attributes[i] = traitBucket;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n\r\n  function attributesJson(uint256 tokenId, uint8[] memory wishAttrs) public view returns (bytes memory) {\r\n    // check if has soul fragment\r\n    // subtract one because tokens are 1 indexed\r\n    uint256 characterId = characterIdFromToken(tokenId);\r\n\r\n    // put together metadata\r\n    bytes memory attributes = '[';\r\n\r\n    // add in character name\r\n    attributes = abi.encodePacked(attributes, attributeJson('0. SOUL', characterNames[characterId]));\r\n\r\n    // loop through all fortune categories\r\n    for (uint8 i = 0; i < wishAttrs.length; i++) {\r\n      bytes memory attr;\r\n      // check if special attribute for character\r\n      if (i == characterId) {\r\n        attr = attributeJson(fortuneCategories[i], specialFortuneValues[i][wishAttrs[i]]);\r\n        attr = abi.encodePacked(attr, ',', attributeJson('1. FORTUNE', overallFortune[wishAttrs[i]]));\r\n      } else {\r\n        // not special category, so use normal odds\r\n        attr = attributeJson(fortuneCategories[i], fortuneValues[i][wishAttrs[i]]);\r\n      }\r\n\r\n      attributes = abi.encodePacked(\r\n        // add comma if not the first entry for json correct formatting\r\n        attributes,\r\n        ',',\r\n        attr\r\n      );\r\n    }\r\n\r\n    // add in soul fragment\r\n    attributes = abi.encodePacked(attributes, ',', attributeJson('Epoch', 'First Believers'));\r\n\r\n    // close attributes\r\n    attributes = abi.encodePacked(attributes, ']');\r\n\r\n    return attributes;\r\n  }\r\n\r\n  function attributeJson(string memory traitType, string memory traitValue) internal pure returns (bytes memory) {\r\n    return\r\n      abi.encodePacked(\r\n        '{',\r\n        abi.encodePacked('\"trait_type\": \"', traitType, '\",'),\r\n        abi.encodePacked('\"value\": \"', traitValue, '\"'),\r\n        '}'\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev create the image uri for resources\r\n   *\r\n   * Image is based on the luck level of the special attribute of the character.\r\n   *\r\n   */\r\n  function _generateImgUri(uint256 characterId, uint8 luckLevel) internal view returns (string memory) {\r\n    return\r\n      string(\r\n        abi.encodePacked(_baseImgUri, uint256(characterId).toString(), '_', uint256(luckLevel).toString(), '.png')\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Set a new uri for images so we can transition to IPFS\r\n   *\r\n   * If URI is locked, can never be changed.\r\n   */\r\n  function setImgUri(string calldata _uri) external onlyOwner {\r\n    require(!_imgUriLocked, 'DDDO: Img Uri is locked!');\r\n    _baseImgUri = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Lock the image URI so forever immutable\r\n   *\r\n   * NOTE: Can ONLY be called once, be sure images are correct\r\n   */\r\n  function lockImgUri() public onlyOwner {\r\n    _imgUriLocked = true;\r\n  }\r\n\r\n  /////////////// TOKEN ID UTILITY FUNCTIONS //////////////////\r\n\r\n  /**\r\n   * @dev Calculates the next Id\r\n   */\r\n  function nextTokenIdForCharacter(uint8 characterId, bool ascending) internal returns (uint256) {\r\n    // ensure valid character\r\n    require(characterId < NUM_CHARACTERS, 'DDDO: Invalid character id!');\r\n\r\n    // check can still mint for this character\r\n    require(characterMintsRemaining(characterId) > 0, 'DDDO: No more omikuji available');\r\n\r\n    uint16 tokenOffset;\r\n    if(ascending) {\r\n      // mint from bottom up -- increment first so 1 indexed\r\n      ascendingCharacterMints[characterId] += 1;\r\n      tokenOffset = ascendingCharacterMints[characterId];\r\n    } else {\r\n      // mint from top down -- increment after so ids are 1 indexed\r\n      tokenOffset = OMIKUJI_PER_CHARACTER - descendingCharacterMints[characterId];\r\n      descendingCharacterMints[characterId] += 1;\r\n    }\r\n\r\n    // derive tokenId\r\n    // NOTE: we add 1 here because NO TOKEN should have ID of 0 (for godly attribute check), so 1 indexed\r\n    return characterId * OMIKUJI_PER_CHARACTER + tokenOffset;\r\n  }\r\n\r\n  function characterIdFromToken(uint256 tokenId) internal pure returns (uint256) {\r\n    // subtract 1 because ids start at 1\r\n    return ((tokenId - 1) / OMIKUJI_PER_CHARACTER);\r\n  }\r\n\r\n  function tokenNumberForCharacter(uint256 tokenId) internal pure returns (uint256) {\r\n    // subtract 1 because ids start at 1\r\n    return (tokenId - 1) % OMIKUJI_PER_CHARACTER;\r\n  }\r\n\r\n  function withdraw() public {\r\n    beneficiary.call{ value: address(this).balance }('');\r\n  }\r\n\r\n  /**\r\n   * @dev Get OnChainMetadata for token\r\n   */\r\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n    _requireMinted(tokenId);\r\n    return getTokenURI(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Generate metadata for each token.\r\n   * \r\n   * All attributes are onchain, images can be moved to ipfs when ready.\r\n   */\r\n  function getTokenURI(uint256 tokenId) public view returns (string memory) {\r\n    // 1 index characterID and character token\r\n    uint256 characterId = characterIdFromToken(tokenId);\r\n    uint256 characterToken = tokenNumberForCharacter(tokenId) + 1;\r\n    uint8[] memory attributes = _generatePseudoRandomAttributes(tokenId);\r\n    bytes memory tokenNameFormat = abi.encodePacked((characterToken < 10 ? '00' : (characterToken < 100 ? '0' : '')), characterToken.toString());\r\n\r\n    bytes memory dataURI = abi.encodePacked(\r\n      '{',\r\n      '\"name\": \"',\r\n      characterNames[characterId],\r\n      \"'s Fortune #\", tokenNameFormat,     \r\n      '\",',\r\n      '\"description\": \"',\r\n      DESCRIPTION, characterNames[characterId], '.',\r\n      '\",',\r\n      '\"external_url\": \"',\r\n      EXTERNAL_URL,\r\n      '\",',\r\n      '\"image\": \"',\r\n      _generateImgUri(characterId, attributes[characterId]),\r\n      '\",',\r\n      '\"attributes\": ',\r\n      attributesJson(tokenId, attributes),\r\n      '}'\r\n    );\r\n    return string(abi.encodePacked('data:application/json;base64,', Base64.encode(dataURI)));\r\n  }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Base64.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Address.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": true,
47       "runs": 200
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}