1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/AccessControl.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/IAccessControl.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
9     },
10     "@openzeppelin/contracts/security/Pausable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
27     },
28     "@openzeppelin/contracts/utils/math/Math.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Strings.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
33     },
34     "contracts/helpers/Errors.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\n/**\n * @dev Xeno Mining - Error definition contract\n */\ncontract Errors {\n    error InvalidInput(string errMsg);\n    string constant INVALID_WITHDRAWAL = \"Invalid Withdrawal contract\";\n    string constant INVALID_MANAGER = \"Invalid Manager contract\";\n    string constant INVALID_SIGNER = \"Invalid signer address\";\n    string constant INVALID_MINTER = \"Invalid Minter contract\";\n    string constant INVALID_SIGNATURE = \"Invalid signature\";\n    string constant INVALID_CURRENCY = \"Invalid currency\";\n    string constant INVALID_ADDRESS = \"Invalid wallet address\";\n    string constant INVALID_AMOUNT = \"Invalid amount\";\n\n    error UpgradeError(string errMsg);\n    string constant WRONG_XENO_CONTRACT = \"Wrong Xeno contract\";\n    string constant WRONG_COUPON_CLIPPER_CONTRACT = \"Wrong Coupon Clipper contract\";\n\n    error AccessError(string errMsg);\n    string constant WRONG_TOKEN_ID = \"Wrong token ID\";\n    string constant WRONG_TOKEN_OWNER = \"Wrong token owner\";\n    string constant WRONG_HASH = \"Wrong hash\";\n    string constant NOT_ASSIGNED = \"Address not assigned\";\n\n    error PaymentError(string errMsg, uint256 requiredAmount, uint256 receivedAmount);\n    string constant INSUFFICIENT_FUNDS = \"Insufficient funds\";\n    string constant NO_PAYMENT_RECEIVED = \"No payment received\";\n    string constant NO_PAYMENT_RECOGNIZED = \"MintType/Currency not recognized\";\n    string constant CURRENCY_DOES_NOT_SUIT_TYPE = \"Currency doesn't suit type\";\n    string constant MINT_TYPE_IS_NOT_SUPPORTED = \"MintType isn't supported\";\n\n    error MintingError(string errMsg);\n    string constant MINTING_DISABLED = \"Minting disabled\";\n    string constant COUNT_TOO_LOW = \"Count must be greater than 0\";\n    string constant TOTAL_SUPPLY_EXCEEDED = \"Total supply exceeded\";\n    string constant PRESALE_SUPPLY_EXCEEDED = \"Presale supply exceeded\";\n    string constant ALLOW_LIST_COUPON_INVALID = \"Allow list coupon invalid\";\n    string constant INVALID_MINTER_ADDRESS = \"Minter address invalid\";\n\n    error ManagementError(string errMsg);\n    string constant CANT_SEND = \"Failed to send Ether\";\n    string constant CANT_REMOVE_SENDER = \"Can't remove sender\";\n\n    error CouponVerification(string errMsg, address errAddress);\n    error CouponValidation(string errMsg);\n    string constant INVALID_SIGNER_ADDRESS = \"Invalid coupon signer address\";\n    string constant EXPIRED_COUPON = \"Coupon has expired\";\n    string constant COUNT_LIMIT_REACHED = \"Coupon limit reached\";\n}\n"
36     },
37     "contracts/helpers/Permissions.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\n/**\n * @dev Xeno Mining - Roles\n */\nbytes32 constant MULTISIG_ROLE = keccak256(\"MULTISIG_ROLE\");\nbytes32 constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\nbytes32 constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n"
39     },
40     "contracts/interfaces/ICouponClipper.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nstruct Signature {\n  bytes32 r;\n  bytes32 s;\n  uint8 v;\n}\n\nstruct Coupon {\n    mapping(address => uint256) claimerCount;\n}\n\ninterface ICouponClipper is IERC165 {\n    function getCouponUsage(uint16 couponId, address claimer) external view returns (uint256);\n\n    function decodeCoupon(bytes memory coupon) \n    external \n    pure \n    returns (uint16 couponId, address allowedClaimer, uint16 maxCount, uint256 value, uint256 expiry);\n\n    function getCouponIssuer() external view returns (address);\n\n    function clipCoupon(address claimer, uint256 count, Signature memory signature, bytes memory coupon) external returns (uint256);\n}\n"
42     },
43     "contracts/interfaces/IXeno.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\npragma solidity 0.8.16;\n\ninterface IXeno is IERC165 {\n    function pause() external;\n\n    function unpause() external;\n\n    function safeMint(address, uint256) external returns (uint256[] memory);\n\n    function setBaseURI(string calldata) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function setMinter(address newMinter) external;\n\n    function getMinter() external view returns (address);\n\n    function setDefaultRoyalty(address, uint96) external;\n}\n"
45     },
46     "contracts/interfaces/IXenoMinter.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./ICouponClipper.sol\";\n\ninterface IXenoMinter is IERC165 {\n    function mint(\n        address to,\n        uint256 count\n    ) external payable returns (uint256[] memory);\n\n    function couponMint(\n        address to,\n        uint256 count,\n        Signature memory signature,\n        bytes memory coupon\n    ) external payable returns (uint256[] memory);\n\n    function allowListMint(\n        address to,\n        uint256 count,\n        Signature memory signature,\n        bytes memory coupon\n    ) external payable returns (uint256[] memory);\n\n    function paperMint(address _to, uint256 _quantity) external payable;\n\n    function checkGeneralSaleActive(uint256 quantity, uint256 value) external view returns (string memory);\n\n    function checkAllowListSaleActive(uint256 quantity, uint256 value) external view returns (string memory);\n\n    function withdrawEth(uint256 amount) external;\n\n    function upgradeXenoContract(address) external;\n\n    function addManager(address) external;\n\n    function removeManager(address) external;\n\n    function setWithdrawalAddress(address _newWithdrawal) external;\n\n    function getWithdrawalAddress() external view returns (address);\n\n    function setPhasePrices(uint64[3] calldata prices) external;\n\n    function getPhasePrice(uint64 index) external view returns (uint64);\n\n    function calculatePrice(uint256 count) external view returns (uint256);\n\n    function getPresaleCount() external view returns (uint256);\n\n    function setPresaleAvailability(uint256 amount) external;\n\n    function setGeneralSaleActive(bool active) external;\n\n    function setPresaleActive(bool active) external;\n\n    function setPaperAddresses(address[] memory addresses) external;\n\n    function setAllowListSaleActive(bool active) external;\n\n    function generalSaleActive() external view returns (bool);\n\n    function presaleActive() external view returns (bool);\n\n    function allowListSaleActive() external view returns (bool);\n}\n"
48     },
49     "contracts/XenoMinter.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./interfaces/IXenoMinter.sol\";\nimport \"./interfaces/IXeno.sol\";\nimport \"./interfaces/ICouponClipper.sol\";\n\nimport \"./helpers/Errors.sol\";\nimport \"./helpers/Permissions.sol\";\n\n/**\n * @dev Xeno Mining - Xeno Minter contract\n * @notice Mint Xeno NFTs\n */\ncontract XenoMinter is IXenoMinter, Errors, AccessControl, ReentrancyGuard, Pausable {\n    using ECDSA for bytes32;\n\n    address private _withdrawal; // Dogface owned wallet, used for withdrawing ETHs\n\n    uint16 public constant MAX_SUPPLY = 4018;\n\n    IXeno public xeno_;\n    ICouponClipper public couponClipper_;\n\n    uint64[3] private _phasePrice = [\n        200000000000000000, // PHASE 1: 0.2 ETH\n        300000000000000000, // PHASE 2: 0.3 ETH\n        500000000000000000 // PHASE 3: 0.5 ETH\n    ];\n\n    address[] private _paperWallets;\n\n    uint256 private _presaleCount;\n    uint256 private _presaleMaxAmount = 1000;\n\n    bool private _presaleActive = false;\n    bool private _generalSaleActive = false;\n    bool private _allowListSaleActive = false;\n\n    event Minted(address indexed to, uint256[] tokenId);\n    event ContractUpgraded(uint256 timestamp, string indexed contractName, address oldAddress, address newAddress);\n    event SignerUpdated(address indexed manager, address newSigner);\n    event Withdraw(address indexed manager, address to, uint256 amount);\n\n    constructor(\n        address manager,\n        address withdrawal,\n        address xeno,\n        address couponClipper\n    ) {\n        if (manager == address(0)) revert InvalidInput(INVALID_MANAGER);\n        if (withdrawal == address(0)) revert InvalidInput(INVALID_WITHDRAWAL);\n        if (xeno == address(0)) revert InvalidInput(WRONG_XENO_CONTRACT);\n        if (couponClipper == address(0)) revert InvalidInput(INVALID_ADDRESS);\n\n        _withdrawal = withdrawal;\n\n        _grantRole(MANAGER_ROLE, manager);\n        _grantRole(MULTISIG_ROLE, withdrawal);\n\n        xeno_ = IXeno(xeno);\n        couponClipper_ = ICouponClipper(couponClipper);\n\n        if (!xeno_.supportsInterface(type(IXeno).interfaceId)) revert UpgradeError(WRONG_XENO_CONTRACT);\n        if (!couponClipper_.supportsInterface(type(ICouponClipper).interfaceId)) revert UpgradeError(WRONG_COUPON_CLIPPER_CONTRACT);\n\n        _pause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(IERC165, AccessControl)\n    returns (bool)\n    {\n        return\n        interfaceId == type(IXenoMinter).interfaceId ||\n        interfaceId == type(IERC165).interfaceId ||\n        interfaceId == type(AccessControl).interfaceId || \n        super.supportsInterface(interfaceId);\n    }\n\n    /** ----------------------------------\n     * ! Minting functions\n     * ----------------------------------- */\n\n    /**\n     * @notice Minting a new Xeno token\n     * @dev This function can only be called inside the contract\n     * @param to to which address to mint a new token\n     * @param count number of tokens to mint\n     */\n    function mint(\n        address to,\n        uint256 count\n    ) external payable nonZeroAddress(to) whenNotPaused isSaleEnabled(_generalSaleActive) doesNotExceedSupply(count) returns (uint256[] memory){\n        uint256 cost = this.calculatePrice(count);\n        return _mint(to, count, cost);\n    }\n\n    /**\n     * @notice Minting a new Xeno token using a coupon\n     * @param to to which address to mint a new token\n     * @param count number of tokens to mint\n     * @param signature signature of the coupon\n     * @param coupon coupon data\n     */\n    function couponMint(\n        address to,\n        uint256 count,\n        Signature memory signature,\n        bytes memory coupon\n    ) external payable nonZeroAddress(to) whenNotPaused doesNotExceedPresaleSupply(count) returns (uint256[] memory){\n        uint256 cost = couponClipper_.clipCoupon(to, count, signature, coupon);\n\n        // If the mint is free then it is a presale\n        if(cost == 0) {\n            if(!_presaleActive) revert MintingError(MINTING_DISABLED);\n            _presaleCount = _presaleCount + count;\n        }\n\n        return _mint(to, count, cost);\n    }\n\n    /**\n     * @notice Minting a new Xeno token using an allow list coupon\n     * @param to to which address to mint a new token\n     * @param count number of tokens to mint\n     * @param signature signature of the coupon\n     * @param coupon coupon data\n     */\n    function allowListMint(\n        address to,\n        uint256 count,\n        Signature memory signature,\n        bytes memory coupon\n    ) external payable nonZeroAddress(to) whenNotPaused isSaleEnabled(_allowListSaleActive) doesNotExceedSupply(count) returns (uint256[] memory){\n        uint256 costCheck = couponClipper_.clipCoupon(to, count, signature, coupon);\n\n        // Allow list coupons will have a cost of 10 ETH per token. Bit of a hack but it works.\n        if(costCheck != count * 10000000000000000000) revert MintingError(ALLOW_LIST_COUPON_INVALID);\n\n        uint256 cost = this.calculatePrice(count);\n\n        return _mint(to, count, cost);\n    }\n\n    function paperMint(address _to, uint256 _quantity) isPaper external payable {\n        uint256 cost = this.calculatePrice(_quantity);\n        _mint(_to, _quantity, cost);\n    }\n\n    function checkGeneralSaleActive(uint256 quantity, uint256 value) external view whenNotPaused doesNotExceedSupply(quantity) isSaleEnabled(_generalSaleActive) returns (string memory) {\n        uint256 cost = this.calculatePrice(quantity);\n        if(value < cost) return \"INSUFFICIENT_FUNDS\";\n        return \"\";\n    }\n\n    function checkAllowListSaleActive(uint256 quantity, uint256 value) external view whenNotPaused doesNotExceedSupply(quantity) isSaleEnabled(_allowListSaleActive) returns (string memory) {\n        uint256 cost = this.calculatePrice(quantity);\n        if(value < cost) return \"INSUFFICIENT_FUNDS\";\n        return \"\";\n    }\n\n    /**\n     * @notice Minting a new Xeno token using a coupon\n     * @dev This function can only be called inside the contract\n     * @param to to which address to mint a new token\n     * @param count number of tokens to mint\n     * @param cost calculated cost of the mint\n     */\n    function _mint(\n        address to,\n        uint256 count,\n        uint256 cost\n    ) internal returns (uint256[] memory) {\n        if(msg.value < cost) revert PaymentError(INSUFFICIENT_FUNDS, msg.value, cost);\n        return xeno_.safeMint(to, count);\n    }\n\n    /**\n     * @notice Calculate the total price for the mint\n     * @param count Number of tokens to mint\n     */\n    function calculatePrice(uint256 count) external view returns (uint256) {\n        uint256 price = 0;\n        uint256 totalSupply = xeno_.totalSupply();\n        for (uint256 i = 0; i < count; i++) {\n            if (totalSupply + i < 1003) {\n                price += _phasePrice[0];\n            } else if (totalSupply + i < 2000) {\n                price += _phasePrice[1];\n            } else if (totalSupply + i <= 4018) {\n                price += _phasePrice[2];\n            } else {\n                revert MintingError(TOTAL_SUPPLY_EXCEEDED);\n            }\n        }\n        return price;\n    }\n\n    /** ----------------------------------\n     * ! Sales functions\n     * ----------------------------------- */\n\n    function setPhasePrices(uint64[3] calldata prices) external onlyRole(MANAGER_ROLE) {\n        _phasePrice = prices;\n    }\n\n    function getPhasePrice(uint64 index) external view returns (uint64) {\n        return _phasePrice[index];\n    }\n\n    function getPresaleCount() external view returns (uint256) {\n        return _presaleCount;\n    }\n\n    function setPresaleAvailability(uint256 amount) external onlyRole(MANAGER_ROLE) {\n        if(amount < _presaleCount || amount > MAX_SUPPLY) revert InvalidInput(INVALID_AMOUNT);\n        _presaleMaxAmount = amount;\n    }\n\n    function setGeneralSaleActive(bool active) external onlyRole(MANAGER_ROLE) {\n        _generalSaleActive = active;\n    }\n\n    function setPresaleActive(bool active) external onlyRole(MANAGER_ROLE) {\n        _presaleActive = active;\n    }\n\n    function setAllowListSaleActive(bool active) external onlyRole(MANAGER_ROLE) {\n        _allowListSaleActive = active;\n    }\n\n    function generalSaleActive() external view returns (bool) {\n        return _generalSaleActive;\n    }\n\n    function presaleActive() external view returns (bool) {\n        return _presaleActive;\n    }\n\n    function allowListSaleActive() external view returns (bool) {\n        return _allowListSaleActive;\n    }\n\n    /** ----------------------------------\n     * ! Manager functions      | UPGRADES\n     * ----------------------------------- */\n\n    /**\n     * @notice Upgrade Xeno contract address\n     * @dev This function can only be called from contracts or wallets with MANAGER_ROLE\n     * @param newContract Address of the new contract\n     */\n    function upgradeXenoContract(address newContract) external onlyRole(MANAGER_ROLE) {\n        if (newContract == address(0)) revert InvalidInput(INVALID_ADDRESS);\n\n        address oldContract = address(xeno_);\n        xeno_ = IXeno(newContract);\n        if (!xeno_.supportsInterface(type(IXeno).interfaceId)) revert UpgradeError(WRONG_XENO_CONTRACT);\n\n        emit ContractUpgraded(block.timestamp, \"Xeno\", oldContract, newContract);\n    }\n\n    /**\n     * @notice Upgrade Coupon Clipper contract address\n     * @dev This function can only be called from contracts or wallets with MANAGER_ROLE\n     * @param newContract Address of the new contract\n     */\n    function upgradeCouponClipperContract(address newContract) external onlyRole(MANAGER_ROLE) {\n        if (newContract == address(0)) revert InvalidInput(INVALID_ADDRESS);\n\n        address oldContract = address(couponClipper_);\n        couponClipper_ = ICouponClipper(newContract);\n        if (!couponClipper_.supportsInterface(type(ICouponClipper).interfaceId)) revert UpgradeError(WRONG_COUPON_CLIPPER_CONTRACT);\n\n        emit ContractUpgraded(block.timestamp, \"CouponClipper\", oldContract, newContract);\n    }\n\n    /** ----------------------------------\n     * ! Admin functions\n     * ----------------------------------- */\n\n    /**\n     * @notice Add a manager address (contract or wallet) to manage this contract\n     * @dev This function can only to called from contracts or wallets with MANAGER_ROLE\n     * @param newManager The new manager address to be granted\n     */\n    function addManager(address newManager) external onlyRole(MANAGER_ROLE) {\n        if (newManager == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        _grantRole(MANAGER_ROLE, newManager);\n    }\n\n    /**\n * @notice Set manager address (contract or wallet) to manage this contract\n     * @dev This function can only to called from contracts or wallets with MANAGER_ROLE\n     * @param manager The manager address to be revoked, can not be the same as the caller\n     */\n    function removeManager(address manager) external onlyRole(MANAGER_ROLE) {\n        if (manager == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        if (manager == msg.sender) revert ManagementError(CANT_REMOVE_SENDER);\n        _revokeRole(MANAGER_ROLE, manager);\n    }\n\n    /**\n     * @notice Set a new withdrawal address\n     * @param _newWithdrawal The new withdrawal address\n     */\n    function setWithdrawalAddress(address _newWithdrawal) external onlyRole(MANAGER_ROLE) {\n        if (_newWithdrawal == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        _withdrawal = _newWithdrawal;\n    }\n\n    /**\n     * @notice get the withdrawal address\n     */\n    function getWithdrawalAddress() external view returns (address) {\n        return _withdrawal;\n    }\n\n    /**\n     * @notice Set paper wallet addresses for minting\n     * @param addresses the paper wallet addresses array\n     */\n    function setPaperAddresses(address[] memory addresses) external onlyRole(MANAGER_ROLE) {\n        _paperWallets = addresses;\n    }\n\n    /**\n     * @notice Pause the minting process\n     */\n    function pause() external onlyRole(MANAGER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @notice Pause the minting process\n     */\n    function unpause() external onlyRole(MANAGER_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @notice Withdraw ETH from the contract to withdrawal address\n     * @dev only MANAGER_ROLE can call this function\n     * @param amount Token amount to withdraw\n     */\n    function withdrawEth(uint256 amount) external onlyRole(MANAGER_ROLE) {\n        if (amount == 0) revert InvalidInput(INVALID_AMOUNT);\n        (bool sent, ) = _withdrawal.call{value: amount}(\"\");\n        if (!sent) revert ManagementError(CANT_SEND);\n    }\n\n    /** ----------------------------------\n     * ! Modifiers\n     * ----------------------------------- */\n    modifier nonZeroAddress(address addr) {\n        if (addr == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        else _;\n    }\n\n    modifier doesNotExceedPresaleSupply(uint256 count) {\n        if ((_presaleCount + count) > (_presaleMaxAmount)) revert MintingError(PRESALE_SUPPLY_EXCEEDED);\n        else _;\n    }\n\n    modifier doesNotExceedSupply(uint256 count) {\n        if ((xeno_.totalSupply() + count) > (MAX_SUPPLY - _presaleMaxAmount)) revert MintingError(TOTAL_SUPPLY_EXCEEDED);\n        else _;\n    }\n\n    modifier isSaleEnabled(bool enabled) {\n        if(!enabled) revert MintingError(MINTING_DISABLED);\n        else _;\n    }\n\n    modifier isPaper() {\n        bool valid = false;\n        for (uint i=0; i < _paperWallets.length; i++) {\n            if (msg.sender == _paperWallets[i]) {\n                valid = true;\n                break;\n            }\n        }\n        if(!valid) revert MintingError(INVALID_MINTER_ADDRESS);\n        else _;\n    }\n}\n"
51     }
52   },
53   "settings": {
54     "metadata": {
55       "bytecodeHash": "none"
56     },
57     "optimizer": {
58       "enabled": true,
59       "runs": 200
60     },
61     "outputSelection": {
62       "*": {
63         "*": [
64           "evm.bytecode",
65           "evm.deployedBytecode",
66           "devdoc",
67           "userdoc",
68           "metadata",
69           "abi"
70         ]
71       }
72     },
73     "libraries": {}
74   }
75 }}