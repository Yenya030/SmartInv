1 {{
2   "language": "Solidity",
3   "sources": {
4     "KEEK.sol": {
5       "content": "/*                 cHONKNMgmoo                                                                                  \r\n\t\t\t\t   NNM   \"3NMNMggy                            gNMNNMg_     ggMp     moo         qMMp   cHONkggy \r\n\t\t\t\t  -NNE       j2MMNNgggjj_                     NNNMNMMM_    MNNMp    NMM&        gMMP   gNMMNNNNy\r\n\t\t\t\t   MMg,jqqgMMMMMMNNMMNMMMNMggqyj              MNM  NNM:   jNN lML   \"NNM  gNgy jNNM    MNNl MNN\"\r\n\t\t\t\t   gNNNNMM9?:            '?9NNMMMgq_          NMNNNNM\"    gNN lNM,   MNMgMNMNMggNM&    MNNNNNNy \r\n\t_chONKMMNMMNNNNNMPl                        '9NNNMg_       MMMNNMMg    NMNMMMNg   9MMNMM&NMNMMNl    NMNP9MMM;\r\n   gMMN99?\"\"\"\"qNNMR.                               ?MNNgy    -MMN  MNN)  jMMN33MMNy   NNNM&  NMMM&    (NNM  3NNM\r\n   NNM      jgMNO                                     MMMMj  :MMN  dMNM  dNM&  JMM&   3MN&    3MN\"    7NM&   3NM\r\n   7NMg    gMNP                                        'MMNg  ?0l   ?9l  \"\"\"\"  '\"\"\"                              \r\n\t?NNgj gMN\"                                           9NNp             ,                                     \r\n\t  9MMNNN\"                                             3MNy          jNM&                                    \r\n\t\tgNN\"                                               NMN         qMNNF                                    \r\n   mooMMNN&                                                :NN&      gMMMN\"                                     \r\njMMMMNMNNN                                           jggy   MOO      '23                                        \r\nNNM    MM&               cgqg            qg&        gMMMNM  9MM                                                 \r\nNMgy  _NME              MOONMM          gNNMNg      MKEEKM  7MN~                                                \r\n 9NMggJMM\\              NNNMMM          \"\"  '\"       \"?3\"   :MN)                                                \r\n   9MMNNM:               \"\"\"\"                               :MMC                                                \r\n\t  3NMC                                                   MNp                          https://www.gmcafe.io/\r\n\t   MOO                                                   N*/\r\n/// @author raffy.eth\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts@4.8.2/access/Ownable.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts@4.8.2/utils/introspection/IERC165.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts@4.8.2/token/ERC721/IERC721.sol\";\r\nimport {IERC721Metadata} from \"@openzeppelin/contracts@4.8.2/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport {IERC721Receiver} from \"@openzeppelin/contracts@4.8.2/token/ERC721/IERC721Receiver.sol\";\r\nimport {IERC2981} from \"@openzeppelin/contracts@4.8.2/interfaces/IERC2981.sol\";\r\nimport {DefaultOperatorFilterer} from \"operator-filter-registry@1.4.1/src/DefaultOperatorFilterer.sol\";\r\n\r\ninterface KEEKURI {\r\n\tfunction render(uint256 td, uint256 od) external view returns (string memory uri);\r\n}\r\n\r\ncontract KEEK is Ownable, IERC165, IERC721, IERC721Metadata, IERC2981, DefaultOperatorFilterer {\r\n\r\n\tfunction supportsInterface(bytes4 x) external pure returns (bool) {\r\n\t\treturn x == type(IERC165).interfaceId         // 0x01ffc9a7 \r\n\t\t    || x == type(IERC721).interfaceId         // 0x80ac58cd\r\n\t\t    || x == type(IERC721Metadata).interfaceId // 0x5b5e139f\r\n\t\t    || x == type(IERC2981).interfaceId        // 0x2a55205a\r\n\t\t\t|| x == 0x7f5828d0  // https://eips.ethereum.org/EIPS/eip-173  (Ownable)\r\n\t\t    || x == 0x49064906; // https://eips.ethereum.org/EIPS/eip-4906 (Metadata Update Extension)\r\n\t}\r\n\r\n\tevent MetadataUpdate(uint256 token);\r\n\r\n\t// pref packing:\r\n\t// 0000000FFF 12 token\r\n\t// 000000F000  4 pref\r\n\t// 0000FF0000  8 mint\r\n\t// FFFF000000 16 index\r\n\tevent SetPref(uint256 packed);\r\n\tevent Locked(uint256 token);\r\n\tevent Unlocked(uint256 token);\r\n\tevent UnlockAttempt(uint256 token);\r\n\tevent MerkleRootChanged();\r\n\r\n\terror InvalidInput();\r\n\terror InvalidReceiver();\r\n\terror InvalidLockState();\r\n\terror NotAllowed();\r\n\r\n\t// token allocation:\r\n\t// 001-300  moo direct     300\r\n\t// 301-333  moo custom      33\r\n\t// 334-337  FND (4)          4\r\n\t// 338-345  team(4) x2       8\r\n\t// 346-353  barista(4) x2    8\r\n\t// 354-386  treasury        33\r\n\t// 387      audit            1\r\n\t// 388-XXX  mintable      2946\r\n\t// Total[{300, 33, 4, 8, 8, 33, 1, 2946}] = 3333\r\n\tuint256 constant DROPPED_SUPPLY = 387;\r\n\r\n\t// mint data packing:\r\n\tuint256 constant MD_PREFABLE_BIT    =        0x0000000000000000000000000000000000000000000000000000000000000001; // 1\r\n\tuint256 constant MD_MINTABLE_SHIFT  = 1;  // 0x0000000000000000000000000000000000000000000000000000000000011110     4\r\n\tuint256 constant MD_INDEX_SHIFT\t\t= 5;  // 0x0000000000000000000000000000000011111111111111111111111111100000     X\r\n\tuint256 constant MD_MINTABLE_MASK   = 0xF;\r\n\r\n\t// owner balance packing:\r\n\t//               OB_OWNED_SHIFT     =  0; // 0x0000000000000000000000000000000000000000000000000000000000000FFF    12\r\n\tuint256 constant OB_MINTED_SHIFT    = 12; // 0x0000000000000000000000000000000000000000000000000000000000FFF000    12\r\n\tuint256 constant OB_RESERVATION_BIT =        0x0000000000000000000000000000000000000000000000000000000001000000; // 1\r\n\tuint256 constant OB_PUBLIC_BIT      =        0x0000000000000000000000000000000000000000000000000000000002000000; // 1\r\n\tuint256 constant OB_ACQUIRE_SHIFT   = 26; // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE000000     X\r\n\tuint256 constant OB_OWNED_MASK      = 0xFFF;\r\n\tuint256 constant OB_MINTED_MASK     = 0xFFF;\r\n\tuint256 constant OB_ACQUIRE_1       = (1 << OB_ACQUIRE_SHIFT) | 1;\r\n\tuint256 constant OB_MINT_1          = (1 << OB_MINTED_SHIFT) | 1;\r\n\r\n\t// token data packing:\r\n\t// FoldList[Plus, 0, {160, 32, 32, 15, 1, 4, 12}] = {0, 160, 192, 224, 239, 240, 244, 256}\r\n\t//               TD_OWNER_SHIFT    =   0; // 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF   160\r\n\tuint256 constant TD_BLOCK_SHIFT    = 160; // 0x0000000000000000FFFFFFFF0000000000000000000000000000000000000000    32\r\n\tuint256 constant TD_TRANSFER_SHIFT = 192; // 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000    32\r\n\tuint256 constant TD_TAG_SHIFT      = 224; // 0x00007FFF00000000000000000000000000000000000000000000000000000000    15\r\n\tuint256 constant TD_LOCK_BIT       =         0x0000800000000000000000000000000000000000000000000000000000000000; // 1\r\n\tuint256 constant TD_PREF_SHIFT     = 240; // 0x000F000000000000000000000000000000000000000000000000000000000000     4\r\n\tuint256 constant TD_TOKEN_SHIFT    = 244; // 0xFFF0000000000000000000000000000000000000000000000000000000000000    12\r\n\r\n\tuint256 constant TD_TAG_MASK       = 0x7FFF; // 15\r\n\tuint256 constant TD_PREF_PICK      = 0x8;    // 1000 (influence bit)\r\n\tuint256 constant TD_PREF_MASK      = 0xF;    // 1111 (+3 choices)\r\n\tuint256 constant TD_TOKEN_MASK     = 0xFFF;  // 12\r\n\tuint256 constant TD_COPY_MASK      = (TD_TOKEN_MASK << TD_TOKEN_SHIFT) | (TD_PREF_MASK << TD_PREF_SHIFT);\r\n\t\r\n\tstruct Unlock {\r\n\t\tbytes32 hash;  // hash of your password\r\n\t\tuint256 price; // recovery price you set\r\n\t}\r\n\r\n\tmapping (address => uint256) _ownerBalance;\r\n\tmapping (uint256 => uint256) _tokenData;\r\n\tmapping (uint256 => Unlock)  _tokenUnlock;\r\n\tmapping (uint256 => address) _tokenApproval;\r\n\tmapping (address => mapping(address => bool)) _operatorApprovals;\r\n\r\n\taddress constant TEAM_MULTISIG = 0xa050F07d0a880B7C9389A782250d6848bA433854;\r\n\tfunction withdraw() external {\r\n\t\tuint256 b = address(this).balance;\r\n\t\tif (b == 0) revert InvalidInput();\r\n\t\tuint256 p = b / 20; // 5%\r\n\t\tpayable(0xf29c7Db01873Db03D7dE5d0F238b1E08d0c7EDD8).transfer(p);      // eoa: raffy\r\n\t\tpayable(0x6A1e88B4ef7098347F078ebC4D8fBFc064dEfb8A).transfer(p);      // eoa: loop \r\n\t\tpayable(0xDb513d3d4bd419A7c3AD24e363B3B6E8CCACB67E).transfer(p << 1); // eoa: jane \r\n\t\tpayable(0xb23Db186161bA869C06fAED618d0a0263bDB75C3).transfer(p << 2); // eoa: ben\r\n\t\tpayable(TEAM_MULTISIG).transfer(b - (p << 3));\r\n\t}\r\n\r\n\tstring public name = \"Good Morning Cafe: Keekusaurs\";\r\n\tstring public symbol = \"KEEK\";\r\n\r\n\tbool _prefsLocked;\r\n\tbytes32 _merkleRoot;\r\n\tuint256 _mintPrice = 0.06 ether;\r\n\tuint256 _supply;\r\n\tuint256 _maxSupply = 3333;\r\n\tuint256 _lastToken = DROPPED_SUPPLY;\r\n\tuint256 _publicMax;\r\n\r\n\taddress public _tokenURIContract;\r\n\tstring public _tokenURIPrefix = \"https://api.gmcafe.io/metadata/keek/\";\r\n\tstring public _tokenURISuffix = \".json\";\r\n\taddress _royaltyReceiver = TEAM_MULTISIG;\r\n\tuint256 _royaltyNumer = 50_000; // 5%\r\n\tuint256 constant ROYALTY_DENOM = 1_000_000;\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _supply;\r\n\t}\r\n\t\r\n\t// metadata\r\n\tfunction setTokenURIContract(address addr) onlyOwner public {\r\n\t\t_tokenURIContract = addr;\r\n\t}\r\n\tfunction setTokenURIPrefix(string calldata prefix) onlyOwner public {\r\n\t\t_tokenURIPrefix = prefix;\r\n\t}\r\n\tfunction setTokenURISuffix(string calldata suffix) onlyOwner public {\r\n\t\t_tokenURISuffix = suffix;\r\n\t}\r\n\tfunction tokenURI(uint256 token) public view returns (string memory uri) {\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tif (td == 0) revert InvalidInput(); // ERC721\r\n\t\tif (_tokenURIContract != address(0)) {\r\n\t\t\taddress owner = address(uint160(td));\r\n\t\t\turi = KEEKURI(_tokenURIContract).render(td, _ownerBalance[owner]);\r\n\t\t}\r\n\t\tif (bytes(uri).length == 0) {\r\n\t\t\tbytes memory prefix = bytes(_tokenURIPrefix);\r\n\t\t\tbytes memory suffix = bytes(_tokenURISuffix);\r\n\t\t\tunchecked {\r\n\t\t\t\turi = new string(prefix.length + 4 + suffix.length); // \"3333\"\r\n\t\t\t}\r\n\t\t\tuint256 ptr;\r\n\t\t\tassembly {\r\n\t\t\t\tptr := uri\r\n\t\t\t}\r\n\t\t\tptr = _appendBytes(ptr, prefix);\r\n\t\t\tuint256 len = token >= 100 ? token >= 1000 ? 4 : 3 : token >= 10 ? 2 : 1;\r\n\t\t\tptr = _appendInt(ptr, token, len);\r\n\t\t\tptr = _appendBytes(ptr, suffix);\r\n\t\t\tassembly {\r\n\t\t\t\tmstore(uri, sub(ptr, uri)) // truncate\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\tfunction _appendBytes(uint256 ptr, bytes memory data) private pure returns (uint256 dst) {\r\n\t\tuint256 src;\r\n\t\tassembly {\r\n\t\t\tsrc := data\r\n\t\t\tdst := add(ptr, mload(data)) // truncate\r\n\t\t}\r\n\t\twhile (ptr < dst) {\r\n\t\t\tassembly {\r\n\t\t\t\tptr := add(ptr, 32)\r\n\t\t\t\tsrc := add(src, 32)\r\n\t\t\t\tmstore(ptr, mload(src))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction _appendInt(uint256 ptr, uint256 value, uint256 len) private pure returns (uint256 dst) {\r\n\t\tuint256 bits = len << 3;\r\n\t\tuint256 buf;\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i; i < bits; i += 8) {\r\n\t\t\t\tuint256 x = value % 10;\r\n\t\t\t\tbuf |= (48 + x) << i;\r\n\t\t\t\tvalue /= 10;\r\n\t\t\t}\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tdst := add(ptr, len)\r\n\t\t\tmstore(dst, or(shl(bits, mload(ptr)), buf)) \r\n\t\t}\r\n\t}\r\n\r\n\t// royalties\r\n\tfunction setRoyaltyInfo(address receiver, uint256 numer) onlyOwner external {\r\n\t\tif (numer > (receiver == address(0) ? 0 : ROYALTY_DENOM)) revert InvalidInput();\r\n\t\t_royaltyReceiver = receiver;\r\n\t\t_royaltyNumer = numer;\r\n\t}\r\n\tfunction getRoyaltyInfo() external view returns (address receiver, uint256 numer, uint256 denom) {\r\n\t\treceiver = _royaltyReceiver;\r\n\t\tnumer = _royaltyNumer;\r\n\t\tdenom = ROYALTY_DENOM;\r\n\t}\r\n\tfunction royaltyInfo(uint256, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n\t\treceiver = _royaltyReceiver;\r\n\t\troyaltyAmount = (salePrice * _royaltyNumer) / ROYALTY_DENOM;\r\n\t}\r\n\r\n\t// tagging\r\n\tfunction setTag(uint256 token, uint256 tag) external {\r\n\t\tif (tag > TD_TAG_MASK) revert InvalidInput(); // too large\r\n\t\tuint256 td = _tokenData[token];\r\n\t\t_requireApprovedSender(address(uint160(td)), token);\r\n\t\tuint256 tag0 = (td >> TD_TAG_SHIFT) & TD_TAG_MASK;\r\n\t\tif (tag0 == tag) revert InvalidInput(); // no change\r\n\t\t_tokenData[token] = td ^ ((tag ^ tag0) << TD_TAG_SHIFT);\r\n\t}\r\n\r\n\t// locking\r\n\tfunction isKeekLocked(uint256 token) external view returns (bool) {\r\n\t\treturn _isLocked(_tokenData[token]);\r\n\t}\r\n\tfunction _isLocked(uint256 td) private pure returns (bool) {\r\n\t\treturn (td & TD_LOCK_BIT) > 0;\r\n\t}\r\n\tfunction makePasswordHash(uint256 token, string memory password) pure public returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(token, password));\r\n\t}\r\n\tfunction lockKeek(uint256 token, uint256 price, bytes32 hash) external {\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tif (_isLocked(td)) revert InvalidLockState(); // already locked\r\n\t\t_requireApprovedSender(address(uint160(td)), token); \r\n\t\tif (price > 0) { // password only applies when non-zero\r\n\t\t\t_tokenUnlock[token] = Unlock({hash: hash, price: price});\r\n\t\t}\r\n\t\t_tokenData[token] = td | TD_LOCK_BIT;\r\n\t\temit Locked(token);\r\n\t\temit MetadataUpdate(token);\r\n\t}\r\n\tfunction unlockKeek(uint256 token, string memory password, address transfer) payable public {\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tif (!_isLocked(td)) revert InvalidLockState(); // not locked\r\n\t\taddress owner = address(uint160(td));\r\n\t\t_requireApprovedSender(owner, token); \r\n\t\tUnlock storage unlock = _tokenUnlock[token];\r\n\t\tuint256 price = unlock.price;\r\n\t\tif (price > 0) { // must satisfy one of the following:\r\n\t\t\tif (msg.value == 0) { // check password\r\n\t\t\t\tif (unlock.hash != makePasswordHash(token, password)) { // wrong password\r\n\t\t\t\t\temit UnlockAttempt(token);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else if (msg.value < price) { // check price\r\n\t\t\t\trevert InvalidLockState(); // not enough\r\n\t\t\t}\r\n\t\t\tdelete _tokenUnlock[token]; // clear storage\r\n\t\t}\r\n\t\t_tokenData[token] = td ^ TD_LOCK_BIT; // clear lock\r\n\t\temit Unlocked(token);\r\n\t\temit MetadataUpdate(token);\r\n\t\tif (transfer != address(0)) {\r\n\t\t\tsafeTransferFrom(owner, transfer, token, ''); // could be a contract\r\n\t\t}\r\n\t}\r\n\tfunction rescueKeek(uint256 token) onlyOwner public {\r\n\t\t// if the keek was locked and the owner gave this contract approval,\r\n\t\t// admin can break the lock and obtain the keek\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tif (!_isLocked(td)) revert InvalidLockState(); // not locked\r\n\t\taddress owner = address(uint160(td));\r\n\t\tif (!isApprovedForAll(owner, address(this)) && _tokenApproval[token] != address(this)) revert NotAllowed();\r\n\t\tdelete _tokenUnlock[token]; // clear storage\r\n\t\t_tokenData[token] = td ^ TD_LOCK_BIT; // clear lock\r\n\t\temit Unlocked(token);\r\n\t\temit MetadataUpdate(token);\r\n\t\tif (owner != msg.sender) { \r\n\t\t\t_approvedTransfer(owner, msg.sender, token); \r\n\t\t}\r\n\t}\r\n\r\n\t// minting\r\n\tfunction reduceSupply(uint256 supply) onlyOwner external {\r\n\t\tif (supply >= _maxSupply) revert InvalidInput(); // must decrease\r\n\t\tif (supply < _lastToken) revert InvalidInput(); // too low\r\n\t\t_maxSupply = supply;\r\n\t}\r\n\tfunction setMintPrice(uint256 priceWei) onlyOwner external {\r\n\t\t_mintPrice = priceWei;\r\n\t}\r\n\tfunction setMerkleRoot(bytes32 hash) onlyOwner external {\r\n\t\t_merkleRoot = hash;\r\n\t\temit MerkleRootChanged();\r\n\t}\r\n\tfunction setPublicMax(uint256 max) onlyOwner external {\r\n\t\t_publicMax = max;\r\n\t}\r\n\tfunction getMintInfo() external view returns (\r\n\t\tuint256 price, uint256 supply, uint256 dropped, \r\n\t\tuint256 minted, uint256 publicMax, bool prefsLocked\r\n\t) {\r\n\t\tprice = _mintPrice;\r\n\t\tsupply = _maxSupply;\r\n\t\tminted = _lastToken - DROPPED_SUPPLY;\r\n\t\tdropped = _supply - minted;\r\n\t\tpublicMax = _publicMax;\r\n\t\tprefsLocked = _prefsLocked;\r\n\t}\r\n\tfunction hasMinted(uint256 md, address minter) external view returns (bool) {\r\n\t\tuint256 index = md >> MD_INDEX_SHIFT;\r\n\t\treturn (_ownerBalance[minter] & (index > 0 ? OB_RESERVATION_BIT : OB_PUBLIC_BIT)) > 0;\r\n\t}\r\n\tfunction mintKeeks(bytes32[] calldata proof, uint256 md, uint256[] calldata prefs) external payable {\r\n\t\tunchecked {\r\n\t\t\trequire(msg.sender == tx.origin, \"only eoa\"); \r\n\t\t\tuint256 index = md >> MD_INDEX_SHIFT;\t\t\t\r\n\t\t\tbool prefable;\r\n\t\t\tuint256 ob = _ownerBalance[msg.sender];\r\n\t\t\tuint256 bit;\r\n\t\t\tif (index > 0) {\r\n\t\t\t\tbit = OB_RESERVATION_BIT;\r\n\t\t\t\tprefable = (md & MD_PREFABLE_BIT) > 0; // only reservations can have prefs \r\n\t\t\t} else { \r\n\t\t\t\tbit = OB_PUBLIC_BIT;\r\n\t\t\t}\r\n\t\t\trequire((ob & bit) == 0, \"already minted\");\r\n\t\t\tob |= bit; // mark minted\r\n\t\t\tuint256 mintable; // mint limit\r\n\t\t\tif (md == 0) { // proof = <ignored>, index = 0, prefable = false\r\n\t\t\t\tmintable = _publicMax;\r\n\t\t\t} else {\r\n\t\t\t\tmintable = (md >> MD_MINTABLE_SHIFT) & MD_MINTABLE_MASK; \r\n\t\t\t\tbytes32 node = keccak256(abi.encodePacked(msg.sender, md));\r\n\t\t\t\tfor (uint256 i; i < proof.length; i++) {\r\n\t\t\t\t\tbytes32 b = proof[i];\r\n\t\t\t\t\tnode = b < node ? keccak256(abi.encodePacked(b, node)) : keccak256(abi.encodePacked(node, b));\r\n\t\t\t\t}\r\n\t\t\t\trequire(node == _merkleRoot, \"bad proof\");\r\n\t\t\t}\r\n\t\t\trequire(prefs.length <= mintable, \"bad quantity\");\r\n\t\t\tuint256 token = _lastToken;\r\n\t\t\tuint256 avail = min(_maxSupply - token, prefs.length); // prevent overmint\r\n\t\t\trequire(avail > 0, \"max supply\");\r\n\t\t\tuint256 value = _mintPrice * avail;\r\n\t\t\trequire(msg.value >= value, \"bad value\");\r\n\t\t\t_supply += avail; // update supply\r\n\t\t\t_lastToken = token + avail; // update mint index\r\n\t\t\t_ownerBalance[msg.sender] = ob + OB_MINT_1 * avail; // +owned/minted\r\n\t\t\tfor (uint256 i; i < avail; i++) {\r\n\t\t\t\t++token;\r\n\t\t\t\tuint256 pref;\r\n\t\t\t\tif (prefable) {\r\n\t\t\t\t\tpref = prefs[i] & TD_PREF_MASK;\r\n\t\t\t\t\tif (pref >= TD_PREF_PICK) {\r\n\t\t\t\t\t\temit SetPref((index << 24) | (i << 16) | (pref << 12) | token);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t_mint(token, msg.sender, pref);\t\r\n\t\t\t}\r\n\t\t\tuint256 refund = msg.value - value;\r\n\t\t\tif (refund > 0) {\r\n\t\t\t\tpayable(msg.sender).transfer(refund);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction airdropKeeks(uint256[] calldata recs) onlyOwner external {\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i; i < recs.length; i++) {\r\n\t\t\t\tuint256 rec = recs[i];\r\n\t\t\t\taddress owner = address(uint160(rec));\r\n\t\t\t\tif (owner == address(0)) revert InvalidInput();\r\n\t\t\t\tuint256 token = rec >> 160;\r\n\t\t\t\tif (token == 0 || token > DROPPED_SUPPLY) revert InvalidInput();\r\n\t\t\t\tif (_tokenData[token] > 0) revert NotAllowed();\r\n\t\t\t\t_mint(token, owner, 0);\t\t\r\n\t\t\t\t_ownerBalance[owner] += OB_MINT_1; // +owned/minted\r\n\t\t\t}\r\n\t\t}\r\n\t\t_supply += recs.length;\r\n\t}\r\n\tfunction _mint(uint256 token, address owner, uint256 pref) private {\r\n\t\t_tokenData[token] = (token << TD_TOKEN_SHIFT)\r\n\t\t\t| (pref << TD_PREF_SHIFT)\r\n\t\t\t| (block.number << TD_BLOCK_SHIFT) \r\n\t\t\t| uint160(owner);\r\n\t\temit Transfer(address(0), owner, token);\r\n\t}\r\n\r\n\t// airdrop preferences\r\n\tfunction lockPrefs() onlyOwner external {\r\n\t\tif (_prefsLocked) revert InvalidInput(); // already locked\r\n\t\t_prefsLocked = true;\r\n\t}\r\n\tfunction setPref(uint256 token, uint256 pref) external {\r\n\t\tif (_prefsLocked) revert NotAllowed();\r\n\t\tif (token > DROPPED_SUPPLY) revert NotAllowed();\r\n\t\tif (pref < TD_PREF_PICK || pref > TD_PREF_MASK) revert InvalidInput();\r\n\t\t_requireApprovedSender(msg.sender, token);\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tuint256 pref0 = (td >> TD_PREF_SHIFT) & TD_PREF_MASK;\r\n\t\tif (pref0 > 0) revert NotAllowed();\t\t\r\n\t\t_tokenData[token] = td | (pref << TD_PREF_SHIFT);\r\n\t\temit SetPref((pref << 12) | token);\r\n\t}\r\n\r\n\t// transfer\r\n\tfunction safeTransferFrom(address from, address to, uint256 token) external {\r\n\t\tsafeTransferFrom(from, to, token, '');\r\n\t}\r\n\tfunction safeTransferFrom(address from, address to, uint256 token, bytes memory data) public {\r\n\t\ttransferFrom(from, to, token);\r\n\t\tif (to.code.length > 0) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(msg.sender, from, token, data) returns (bytes4 ret) {\r\n\t\t\t\trequire(ret == IERC721Receiver.onERC721Received.selector);\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) {\r\n\t\t\t\t\trevert InvalidReceiver();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassembly {\r\n\t\t\t\t\t\trevert(add(reason, 32), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction transferFrom(address from, address to, uint256 token) onlyAllowedOperator(from) public {\r\n\t\tif (to == address(0)) revert InvalidReceiver(); // ERC721\r\n\t\t_requireApprovedSender(from, token); // from is owner\r\n\t\t_approvedTransfer(from, to, token);\r\n\t}\r\n\tfunction _approvedTransfer(address from, address to, uint256 token) private {\r\n\t\tif (to == from) revert InvalidReceiver(); // block transfer to self\r\n\t\tuint256 td = _tokenData[token];\r\n\t\tif (address(uint160(td)) != from) revert NotAllowed(); // not owned by from\r\n\t\trequire(!_isLocked(td), \"Keek is Locked\"); // use string because user-facing error\r\n\t\tdelete _tokenApproval[token]; // clear token approval\r\n\t\tunchecked {\r\n\t\t\tuint256 transfers = uint32((td >> TD_TRANSFER_SHIFT) + 1);\r\n\t\t\t_tokenData[token] = td & TD_COPY_MASK  // keep token and pref\r\n\t\t\t\t| (block.number << TD_BLOCK_SHIFT) // current block\r\n\t\t\t\t| (transfers << TD_TRANSFER_SHIFT) // updated transfer count\r\n\t\t\t\t| uint160(to);                     // new owner\r\n\t\t\t_ownerBalance[from]--;                 // -owned \r\n\t\t\t_ownerBalance[to] += OB_ACQUIRE_1;     // +owned/acquire\r\n\t\t}\r\n\t\temit Transfer(from, to, token);\r\n\t}\r\n\r\n\t// getters\r\n\tfunction balanceOf(address owner) external view returns (uint256) {\r\n\t\tif (owner == address(0)) revert InvalidInput(); // ERC721\r\n\t\treturn _ownerBalance[owner] & OB_OWNED_MASK;\r\n\t}\r\n\tfunction ownerOf(uint256 token) public view returns (address) {\r\n\t\treturn address(uint160(_tokenData[token]));\r\n\t}\r\n\tfunction getOwnerInfo(address owner) external view returns (\r\n\t\tuint16 owned, uint16 minted, uint256 acquired, \r\n\t\tbool mintedReservation, bool mintedPublic\r\n\t) {\r\n\t\tuint256 ob = _ownerBalance[owner];\r\n\t\towned = uint16(ob & OB_OWNED_MASK);\r\n\t\tminted = uint16((ob >> OB_MINTED_SHIFT) & OB_MINTED_MASK);\r\n\t\tacquired = ob >> OB_ACQUIRE_SHIFT;\r\n\t\tmintedReservation = (ob & OB_RESERVATION_BIT) > 0;\r\n\t\tmintedPublic = (ob & OB_PUBLIC_BIT) > 0;\r\n\t}\r\n\tfunction getKeekInfo(uint256 token) external view returns (\r\n\t\taddress owner, uint32 transfers, uint32 block0, uint32 blocksHeld, \r\n\t\tbool isLocked, uint16 tag, uint8 pref, uint256 unlockPrice\r\n\t) {\r\n\t\tunchecked {\r\n\t\t\tuint256 td = _tokenData[token];\r\n\t\t\tif (td == 0) revert InvalidInput();\r\n\t\t\towner = address(uint160(td));\r\n\t\t\ttransfers = uint32(td >> TD_TRANSFER_SHIFT);\r\n\t\t\tblock0 = uint32(td >> TD_BLOCK_SHIFT);\r\n\t\t\tblocksHeld = uint32(block.number - block0);\r\n\t\t\ttag = uint16((td >> TD_TAG_SHIFT) & TD_TAG_MASK);\r\n\t\t\tpref = uint8((td >> TD_PREF_SHIFT) & TD_PREF_MASK);\r\n\t\t\tisLocked = _isLocked(td);\r\n\t\t\tif (isLocked) {\r\n\t\t\t\tunlockPrice = _tokenUnlock[token].price;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// note: this is 0-based\r\n\tfunction keeksFromSlice(uint256 offset, uint256 size) external view returns (bytes32[] memory keeks) {\r\n\t\tunchecked {\r\n\t\t\tuint256 max = _maxSupply;\r\n\t\t\tif (offset < max) { // require valid index\r\n\t\t\t\tsize = min(offset + size, max) - offset; // truncate\r\n\t\t\t} else {\r\n\t\t\t\tsize = 0; // invalid\r\n\t\t\t}\r\n\t\t\tkeeks = new bytes32[](size);\r\n\t\t\tfor (uint256 i; i < size; ) { // just dumb memcpy\r\n\t\t\t\tkeeks[i++] = bytes32(_tokenData[++offset]); \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// approvals\r\n\tfunction _requireApprovedSender(address owner, uint256 token) private view {\r\n\t\tif (owner != msg.sender && !isApprovedForAll(owner, msg.sender) && _tokenApproval[token] != msg.sender) {\r\n\t\t\trevert NotAllowed();\r\n\t\t}\r\n\t}\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\tfunction setApprovalForAll(address operator, bool approved) onlyAllowedOperatorApproval(operator) external {\r\n\t\tif (operator == msg.sender) revert NotAllowed(); // owner is always approved\r\n\t\t_operatorApprovals[msg.sender][operator] = approved;\r\n\t\temit ApprovalForAll(msg.sender, operator, approved);\r\n\t}\r\n\tfunction getApproved(uint256 token) external view returns (address) {\r\n\t\tif (_tokenData[token] == 0) revert InvalidInput(); // ERC721\r\n\t\treturn _tokenApproval[token];\r\n\t}\r\n\tfunction approve(address operator, uint256 token) onlyAllowedOperatorApproval(operator) external {\r\n\t\taddress owner = address(uint160(_tokenData[token]));\r\n\t\tif (owner != msg.sender && !isApprovedForAll(owner, msg.sender)) revert NotAllowed();\r\n\t\t_tokenApproval[token] = operator;\r\n\t\temit Approval(owner, operator, token);\r\n\t}\r\n\r\n\t// helper\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n}"
6     },
7     "operator-filter-registry@1.4.1/src/DefaultOperatorFilterer.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
9     },
10     "@openzeppelin/contracts@4.8.2/interfaces/IERC2981.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
12     },
13     "@openzeppelin/contracts@4.8.2/token/ERC721/IERC721Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "@openzeppelin/contracts@4.8.2/token/ERC721/extensions/IERC721Metadata.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
18     },
19     "@openzeppelin/contracts@4.8.2/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts@4.8.2/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts@4.8.2/access/Ownable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
27     },
28     "operator-filter-registry@1.4.1/src/lib/Constants.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
30     },
31     "operator-filter-registry@1.4.1/src/OperatorFilterer.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts@4.8.2/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     },
37     "operator-filter-registry@1.4.1/src/IOperatorFilterRegistry.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
39     }
40   },
41   "settings": {
42     "optimizer": {
43       "enabled": true,
44       "runs": 333
45     },
46     "outputSelection": {
47       "*": {
48         "*": [
49           "evm.bytecode",
50           "evm.deployedBytecode",
51           "devdoc",
52           "userdoc",
53           "metadata",
54           "abi"
55         ]
56       }
57     }
58   }
59 }}