1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/StakeFroggies.sol": {
5       "content": "// Froggy Friends by Fonzy & Mayan (www.froggyfriendsnft.com) Stake Froggies\r\n\r\n//...................................................@@@@@........................\r\n//.......................%@@@@@@@@@*.............@@@@#///(@@@@@...................\r\n//....................@@@&(//(//(/(@@@.........&@@////////////@@@.................\r\n//....................@@@//////////////@@@@@@@@@@@@/////@@@@/////@@@..............\r\n//..................%@@/////@@@@@(////////////////////%@@@@/////#@@...............\r\n//..................@@%//////@@@#///////////////////////////////@@@...............\r\n//..................@@@/////////////////////////////////////////@@@@..............\r\n//..................@@(///////////////(///////////////(////////////@@@............\r\n//...............*@@/(///////////////&@@@@@@(//(@@@@@@/////////////#@@............\r\n//...............@@////////////////////////(%&&%(///////////////////@@@...........\r\n//..............@@@/////////////////////////////////////////////////&@@...........\r\n//..............@@(/////////////////////////////////////////////////@@#...........\r\n//..............@@@////////////////////////////////////////////////@@@............\r\n//...............@@@/////////////////////////////////////////////#@@/.............\r\n//................&@@@//////////////////////////////////////////@@@...............\r\n//..................*@@@%////////////////////////////////////@@@@.................\r\n//...............@@@@///////////////////////////////////////(@@@..................\r\n//............%@@@////////////////............/////////////////@@@................\r\n//..........%@@#/////////////..................... (/////////////@@@..............\r\n//.........@@@////////////............................////////////@@@.............\r\n//........@@(///////(@@@................................(@@&///////&@@............\r\n//.......@@////////@@@....................................@@@///////@@@...........\r\n//......@@@///////@@@.......................................@@///////@@%..........\r\n//.....(@@///////@@@.........................................@@/////(/@@..........\r\n\r\n// Development help from Lexi\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ninterface IFroggyFriends {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IRibbit {\r\n    function mint(address add, uint256 amount) external;\r\n}\r\n\r\ninterface IErc20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IRibbitItem {\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function isBoost(uint256 id) external view returns (bool);\r\n    function boostPercentage(uint256 id) external view returns (uint256);\r\n}\r\n\r\ncontract StakeFroggies is IERC721Receiver, Ownable {\r\n    using Strings for uint256;\r\n    IFroggyFriends froggyFriends;\r\n    IRibbit ribbit;\r\n    IErc20 ierc20;\r\n    IRibbitItem ribbitItem;\r\n    bool public started = true;\r\n    bytes32 public root = 0x339f267449a852acfbd5c472061a8fc4941769c9a3a9784778e7e95f9bb8f18d;\r\n    uint256[] public rewardTiers = [20, 30, 40, 75, 150];\r\n    mapping(uint256 => mapping(address => uint256)) private idToStartingTime;\r\n    mapping(address => uint256[]) froggiesStaked;\r\n    mapping(uint256 => uint256) idTokenRate;\r\n    mapping(uint256 => address) idToStaker;\r\n    mapping(uint256 => bool) boosted;\r\n    mapping(uint256 => uint256) defaultRate;\r\n    mapping(uint256 => uint256) boostedRate;\r\n\r\n    constructor(address _froggyFriends) {\r\n        froggyFriends = IFroggyFriends(_froggyFriends);\r\n    }\r\n\r\n    function isValid(bytes32[] memory proof, string memory numstr) internal view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(numstr));\r\n        return MerkleProof.verify(proof, root, leaf);\r\n    }\r\n\r\n    function getTokenRewardRate(uint256 froggyId, bytes32[] memory proof) public view returns (uint256) {\r\n        for (uint256 i; i < rewardTiers.length; i++) {\r\n            string memory numstring = string(abi.encodePacked(froggyId.toString(), rewardTiers[i].toString()));\r\n\r\n            if (isValid(proof, numstring) == true) {\r\n                return rewardTiers[i];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function stake(uint256[] memory froggyIds, bytes32[][] memory proof) external {\r\n        require(started == true, \"$RIBBIT staking paused\");\r\n        uint256[] memory _froggyIds = new uint256[](froggyIds.length);\r\n        _froggyIds = froggyIds;\r\n        for (uint256 i; i < _froggyIds.length; i++) {\r\n            require(froggyFriends.ownerOf(_froggyIds[i]) == msg.sender, \"Not your Froggy Friend\");\r\n            idToStartingTime[_froggyIds[i]][msg.sender] = block.timestamp;\r\n            froggyFriends.transferFrom(msg.sender, address(this), _froggyIds[i]);\r\n            idToStaker[_froggyIds[i]] = msg.sender;\r\n            idTokenRate[_froggyIds[i]] = getTokenRewardRate(_froggyIds[i], proof[i]);\r\n            froggiesStaked[msg.sender].push(_froggyIds[i]);\r\n        }\r\n    }\r\n\r\n    function unStake(uint256[] memory froggyIds) external {\r\n        uint256[] memory _froggyIds = new uint256[](froggyIds.length);\r\n        _froggyIds = froggyIds;\r\n        for (uint256 i; i < _froggyIds.length; i++) {\r\n            require(idToStaker[_froggyIds[i]] == msg.sender, \"Not your Froggy Friend\");\r\n            froggyFriends.transferFrom(address(this), msg.sender, _froggyIds[i]);\r\n            for (uint256 j; j < froggiesStaked[msg.sender].length; j++) {\r\n                if (froggiesStaked[msg.sender][j] == _froggyIds[i]) {\r\n                    froggiesStaked[msg.sender][j] = froggiesStaked[msg.sender][froggiesStaked[msg.sender].length - 1];\r\n                    froggiesStaked[msg.sender].pop();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            uint256 current;\r\n            uint256 reward;\r\n            delete idToStaker[_froggyIds[i]];\r\n            if (idToStartingTime[_froggyIds[i]][msg.sender] > 0) {\r\n                if (boosted[_froggyIds[i]] == false) {\r\n                    uint256 rate = idTokenRate[_froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[_froggyIds[i]][msg.sender];\r\n                    reward = ((rate * 10**18) * current) / 86400;\r\n                    ribbit.mint(msg.sender, reward);\r\n                    idToStartingTime[_froggyIds[i]][msg.sender] = 0;\r\n                }\r\n\r\n                if (boosted[_froggyIds[i]] == true) {\r\n                    uint256 rate = boostedRate[_froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[_froggyIds[i]][msg.sender];\r\n                    reward = (((rate * 10**18) / 1000) * current) / 86400;\r\n                    ribbit.mint(msg.sender, reward);\r\n                    idToStartingTime[_froggyIds[i]][msg.sender] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRewardTierAndRoot(uint256[] memory newRewardTier, bytes32 newRoot) public onlyOwner {\r\n        rewardTiers = newRewardTier;\r\n        root = newRoot;\r\n    }\r\n\r\n    function setStakingState(bool state) public onlyOwner {\r\n        started = state;\r\n    }\r\n\r\n    function setRibbitAddress(address add) public onlyOwner {\r\n        ribbit = IRibbit(add);\r\n    }\r\n\r\n    function setRibbitItemContract(address add) public onlyOwner {\r\n        ribbitItem = IRibbitItem(add);\r\n    }\r\n\r\n    function pairFriend(uint256 froggyId, bytes32[] memory proof, uint256 friend) public {\r\n        require(ribbitItem.balanceOf(msg.sender, friend) > 0, \"Friend not owned\");\r\n        require(ribbitItem.isBoost(friend) == true, \"$RIBBIT item is not a Friend\");\r\n        require(boosted[froggyId] == false, \"Friend already paired\");\r\n        require(froggyFriends.ownerOf(froggyId) == msg.sender, \"Not your Froggy Friend\");\r\n        boosted[froggyId] = true;\r\n        uint256 rate = getTokenRewardRate(froggyId, proof);\r\n        defaultRate[froggyId] = rate;\r\n        boostedRate[froggyId] = rate * 1000 + (ribbitItem.boostPercentage(friend) * rate * 1000) / 100;\r\n        ribbitItem.burn(msg.sender, friend, 1);\r\n    }\r\n\r\n    function unpairFriend(uint256 froggyId) public {\r\n        require(boosted[froggyId] == true, \"Friend is not paired\");\r\n        require(froggyFriends.ownerOf(froggyId) == msg.sender, \"Not your Froggy Friend\");\r\n        boosted[froggyId] = false;\r\n        boostedRate[froggyId] = 0;\r\n        idTokenRate[froggyId] = defaultRate[froggyId];\r\n    }\r\n\r\n    function claim() public {\r\n        require(froggiesStaked[msg.sender].length > 0, \"No froggies staked\");\r\n        uint256[] memory froggyIds = new uint256[](froggiesStaked[msg.sender].length);\r\n        froggyIds = froggiesStaked[msg.sender];\r\n\r\n        uint256 current;\r\n        uint256 reward;\r\n        uint256 rewardbal;\r\n        for (uint256 i; i < froggyIds.length; i++) {\r\n            if (idToStartingTime[froggyIds[i]][msg.sender] > 0) {\r\n                if (boosted[froggyIds[i]] == false) {\r\n                    uint256 rate = idTokenRate[froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[froggyIds[i]][msg.sender];\r\n                    reward = ((rate * 10**18) * current) / 86400;\r\n                    rewardbal += reward;\r\n                    idToStartingTime[froggyIds[i]][msg.sender] = block.timestamp;\r\n                }\r\n\r\n                if (boosted[froggyIds[i]] == true) {\r\n                    uint256 rate = boostedRate[froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[froggyIds[i]][msg.sender];\r\n                    reward = (((rate * 10**18) / 1000) * current) / 86400;\r\n                    rewardbal += reward;\r\n                    idToStartingTime[froggyIds[i]][msg.sender] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        ribbit.mint(msg.sender, rewardbal);\r\n    }\r\n\r\n    function balance(uint256 froggyId) public view returns (uint256) {\r\n        uint256 current;\r\n        uint256 reward;\r\n\r\n        if (idToStartingTime[froggyId][msg.sender] > 0) {\r\n            if (boosted[froggyId] == false) {\r\n                uint256 rate = idTokenRate[froggyId];\r\n                current = block.timestamp - idToStartingTime[froggyId][msg.sender];\r\n                reward = ((rate * 10**18) * current) / 86400;\r\n            }\r\n\r\n            if (boosted[froggyId] == true) {\r\n                uint256 rate = boostedRate[froggyId];\r\n                current = block.timestamp - idToStartingTime[froggyId][msg.sender];\r\n                reward = (((rate * 10**18) / 1000) * current) / 86400;\r\n            }\r\n\r\n            return reward;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        uint256[] memory froggyIds = new uint256[](froggiesStaked[account].length);\r\n        froggyIds = froggiesStaked[account];\r\n\r\n        uint256 current;\r\n        uint256 reward;\r\n        uint256 rewardbal;\r\n        for (uint256 i; i < froggyIds.length; i++) {\r\n            if (idToStartingTime[froggyIds[i]][account] > 0) {\r\n                if (boosted[froggyIds[i]] == false) {\r\n                    uint256 rate = idTokenRate[froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[froggyIds[i]][account];\r\n                    reward = ((rate * 10**18) * current) / 86400;\r\n                    rewardbal += reward;\r\n                }\r\n\r\n                if (boosted[froggyIds[i]] == true) {\r\n                    uint256 rate = boostedRate[froggyIds[i]];\r\n                    current = block.timestamp - idToStartingTime[froggyIds[i]][account];\r\n                    reward = (((rate * 10**18) / 1000) * current) / 86400;\r\n                    rewardbal += reward;\r\n                }\r\n            }\r\n        }\r\n        return rewardbal;\r\n    }\r\n\r\n    function deposits(address account) public view returns (uint256[] memory) {\r\n        return froggiesStaked[account];\r\n    }\r\n\r\n    function withdrawerc20(address add, address to) public onlyOwner {\r\n        ierc20 = IErc20(add);\r\n        ierc20.transfer(to, ierc20.balanceOf(address(this)));\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": true,
26       "runs": 800
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     },
40     "libraries": {}
41   }
42 }}