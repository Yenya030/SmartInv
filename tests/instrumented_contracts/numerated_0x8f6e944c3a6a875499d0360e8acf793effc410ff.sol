1 
2 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
3 
4 pragma solidity ^0.5.4;
5 
6 interface IntVoteInterface {
7     //When implementing this interface please do not only override function and modifier,
8     //but also to keep the modifiers on the overridden functions.
9     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
10     modifier votable(bytes32 _proposalId) {revert(); _;}
11 
12     event NewProposal(
13         bytes32 indexed _proposalId,
14         address indexed _organization,
15         uint256 _numOfChoices,
16         address _proposer,
17         bytes32 _paramsHash
18     );
19 
20     event ExecuteProposal(bytes32 indexed _proposalId,
21         address indexed _organization,
22         uint256 _decision,
23         uint256 _totalReputation
24     );
25 
26     event VoteProposal(
27         bytes32 indexed _proposalId,
28         address indexed _organization,
29         address indexed _voter,
30         uint256 _vote,
31         uint256 _reputation
32     );
33 
34     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
35     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
36 
37     /**
38      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
39      * generated by calculating keccak256 of a incremented counter.
40      * @param _numOfChoices number of voting choices
41      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
42      * @param _proposer address
43      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
44      * @return proposal's id.
45      */
46     function propose(
47         uint256 _numOfChoices,
48         bytes32 _proposalParameters,
49         address _proposer,
50         address _organization
51         ) external returns(bytes32);
52 
53     function vote(
54         bytes32 _proposalId,
55         uint256 _vote,
56         uint256 _rep,
57         address _voter
58     )
59     external
60     returns(bool);
61 
62     function cancelVote(bytes32 _proposalId) external;
63 
64     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
65 
66     function isVotable(bytes32 _proposalId) external view returns(bool);
67 
68     /**
69      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
70      * @param _proposalId the ID of the proposal
71      * @param _choice the index in the
72      * @return voted reputation for the given choice
73      */
74     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
75 
76     /**
77      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
78      * @return bool true or false
79      */
80     function isAbstainAllow() external pure returns(bool);
81 
82     /**
83      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
84      * @return min - minimum number of choices
85                max - maximum number of choices
86      */
87     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
88 }
89 
90 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
91 
92 pragma solidity ^0.5.4;
93 
94 interface ProposalExecuteInterface {
95     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
96 }
97 
98 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
99 
100 pragma solidity ^0.5.2;
101 
102 /**
103  * @title Ownable
104  * @dev The Ownable contract has an owner address, and provides basic authorization control
105  * functions, this simplifies the implementation of "user permissions".
106  */
107 contract Ownable {
108     address private _owner;
109 
110     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111 
112     /**
113      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
114      * account.
115      */
116     constructor () internal {
117         _owner = msg.sender;
118         emit OwnershipTransferred(address(0), _owner);
119     }
120 
121     /**
122      * @return the address of the owner.
123      */
124     function owner() public view returns (address) {
125         return _owner;
126     }
127 
128     /**
129      * @dev Throws if called by any account other than the owner.
130      */
131     modifier onlyOwner() {
132         require(isOwner());
133         _;
134     }
135 
136     /**
137      * @return true if `msg.sender` is the owner of the contract.
138      */
139     function isOwner() public view returns (bool) {
140         return msg.sender == _owner;
141     }
142 
143     /**
144      * @dev Allows the current owner to relinquish control of the contract.
145      * It will not be possible to call the functions with the `onlyOwner`
146      * modifier anymore.
147      * @notice Renouncing ownership will leave the contract without an owner,
148      * thereby removing any functionality that is only available to the owner.
149      */
150     function renounceOwnership() public onlyOwner {
151         emit OwnershipTransferred(_owner, address(0));
152         _owner = address(0);
153     }
154 
155     /**
156      * @dev Allows the current owner to transfer control of the contract to a newOwner.
157      * @param newOwner The address to transfer ownership to.
158      */
159     function transferOwnership(address newOwner) public onlyOwner {
160         _transferOwnership(newOwner);
161     }
162 
163     /**
164      * @dev Transfers control of the contract to a newOwner.
165      * @param newOwner The address to transfer ownership to.
166      */
167     function _transferOwnership(address newOwner) internal {
168         require(newOwner != address(0));
169         emit OwnershipTransferred(_owner, newOwner);
170         _owner = newOwner;
171     }
172 }
173 
174 // File: @daostack/infra/contracts/Reputation.sol
175 
176 pragma solidity ^0.5.4;
177 
178 
179 
180 /**
181  * @title Reputation system
182  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
183  * A reputation is use to assign influence measure to a DAO'S peers.
184  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
185  * The Reputation contract maintain a map of address to reputation value.
186  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
187  */
188 
189 contract Reputation is Ownable {
190 
191     uint8 public decimals = 18;             //Number of decimals of the smallest unit
192     // Event indicating minting of reputation to an address.
193     event Mint(address indexed _to, uint256 _amount);
194     // Event indicating burning of reputation for an address.
195     event Burn(address indexed _from, uint256 _amount);
196 
197       /// @dev `Checkpoint` is the structure that attaches a block number to a
198       ///  given value, the block number attached is the one that last changed the
199       ///  value
200     struct Checkpoint {
201 
202     // `fromBlock` is the block number that the value was generated from
203         uint128 fromBlock;
204 
205           // `value` is the amount of reputation at a specific block number
206         uint128 value;
207     }
208 
209       // `balances` is the map that tracks the balance of each address, in this
210       //  contract when the balance changes the block number that the change
211       //  occurred is also included in the map
212     mapping (address => Checkpoint[]) balances;
213 
214       // Tracks the history of the `totalSupply` of the reputation
215     Checkpoint[] totalSupplyHistory;
216 
217     /// @notice Constructor to create a Reputation
218     constructor(
219     ) public
220     {
221     }
222 
223     /// @dev This function makes it easy to get the total number of reputation
224     /// @return The total number of reputation
225     function totalSupply() public view returns (uint256) {
226         return totalSupplyAt(block.number);
227     }
228 
229   ////////////////
230   // Query balance and totalSupply in History
231   ////////////////
232     /**
233     * @dev return the reputation amount of a given owner
234     * @param _owner an address of the owner which we want to get his reputation
235     */
236     function balanceOf(address _owner) public view returns (uint256 balance) {
237         return balanceOfAt(_owner, block.number);
238     }
239 
240       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
241       /// @param _owner The address from which the balance will be retrieved
242       /// @param _blockNumber The block number when the balance is queried
243       /// @return The balance at `_blockNumber`
244     function balanceOfAt(address _owner, uint256 _blockNumber)
245     public view returns (uint256)
246     {
247         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
248             return 0;
249           // This will return the expected balance during normal situations
250         } else {
251             return getValueAt(balances[_owner], _blockNumber);
252         }
253     }
254 
255       /// @notice Total amount of reputation at a specific `_blockNumber`.
256       /// @param _blockNumber The block number when the totalSupply is queried
257       /// @return The total amount of reputation at `_blockNumber`
258     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
259         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
260             return 0;
261           // This will return the expected totalSupply during normal situations
262         } else {
263             return getValueAt(totalSupplyHistory, _blockNumber);
264         }
265     }
266 
267       /// @notice Generates `_amount` reputation that are assigned to `_owner`
268       /// @param _user The address that will be assigned the new reputation
269       /// @param _amount The quantity of reputation generated
270       /// @return True if the reputation are generated correctly
271     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
272         uint256 curTotalSupply = totalSupply();
273         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
274         uint256 previousBalanceTo = balanceOf(_user);
275         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
276         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
277         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
278         emit Mint(_user, _amount);
279         return true;
280     }
281 
282       /// @notice Burns `_amount` reputation from `_owner`
283       /// @param _user The address that will lose the reputation
284       /// @param _amount The quantity of reputation to burn
285       /// @return True if the reputation are burned correctly
286     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
287         uint256 curTotalSupply = totalSupply();
288         uint256 amountBurned = _amount;
289         uint256 previousBalanceFrom = balanceOf(_user);
290         if (previousBalanceFrom < amountBurned) {
291             amountBurned = previousBalanceFrom;
292         }
293         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
294         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
295         emit Burn(_user, amountBurned);
296         return true;
297     }
298 
299   ////////////////
300   // Internal helper functions to query and set a value in a snapshot array
301   ////////////////
302 
303       /// @dev `getValueAt` retrieves the number of reputation at a given block number
304       /// @param checkpoints The history of values being queried
305       /// @param _block The block number to retrieve the value at
306       /// @return The number of reputation being queried
307     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
308         if (checkpoints.length == 0) {
309             return 0;
310         }
311 
312           // Shortcut for the actual value
313         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
314             return checkpoints[checkpoints.length-1].value;
315         }
316         if (_block < checkpoints[0].fromBlock) {
317             return 0;
318         }
319 
320           // Binary search of the value in the array
321         uint256 min = 0;
322         uint256 max = checkpoints.length-1;
323         while (max > min) {
324             uint256 mid = (max + min + 1) / 2;
325             if (checkpoints[mid].fromBlock<=_block) {
326                 min = mid;
327             } else {
328                 max = mid-1;
329             }
330         }
331         return checkpoints[min].value;
332     }
333 
334       /// @dev `updateValueAtNow` used to update the `balances` map and the
335       ///  `totalSupplyHistory`
336       /// @param checkpoints The history of data being updated
337       /// @param _value The new number of reputation
338     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
339         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
340         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
341             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
342             newCheckPoint.fromBlock = uint128(block.number);
343             newCheckPoint.value = uint128(_value);
344         } else {
345             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
346             oldCheckPoint.value = uint128(_value);
347         }
348     }
349 }
350 
351 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
352 
353 pragma solidity ^0.5.2;
354 
355 /**
356  * @title ERC20 interface
357  * @dev see https://eips.ethereum.org/EIPS/eip-20
358  */
359 interface IERC20 {
360     function transfer(address to, uint256 value) external returns (bool);
361 
362     function approve(address spender, uint256 value) external returns (bool);
363 
364     function transferFrom(address from, address to, uint256 value) external returns (bool);
365 
366     function totalSupply() external view returns (uint256);
367 
368     function balanceOf(address who) external view returns (uint256);
369 
370     function allowance(address owner, address spender) external view returns (uint256);
371 
372     event Transfer(address indexed from, address indexed to, uint256 value);
373 
374     event Approval(address indexed owner, address indexed spender, uint256 value);
375 }
376 
377 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
378 
379 pragma solidity ^0.5.2;
380 
381 /**
382  * @title SafeMath
383  * @dev Unsigned math operations with safety checks that revert on error
384  */
385 library SafeMath {
386     /**
387      * @dev Multiplies two unsigned integers, reverts on overflow.
388      */
389     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
390         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
391         // benefit is lost if 'b' is also tested.
392         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
393         if (a == 0) {
394             return 0;
395         }
396 
397         uint256 c = a * b;
398         require(c / a == b);
399 
400         return c;
401     }
402 
403     /**
404      * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
405      */
406     function div(uint256 a, uint256 b) internal pure returns (uint256) {
407         // Solidity only automatically asserts when dividing by 0
408         require(b > 0);
409         uint256 c = a / b;
410         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
411 
412         return c;
413     }
414 
415     /**
416      * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
417      */
418     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
419         require(b <= a);
420         uint256 c = a - b;
421 
422         return c;
423     }
424 
425     /**
426      * @dev Adds two unsigned integers, reverts on overflow.
427      */
428     function add(uint256 a, uint256 b) internal pure returns (uint256) {
429         uint256 c = a + b;
430         require(c >= a);
431 
432         return c;
433     }
434 
435     /**
436      * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
437      * reverts when dividing by zero.
438      */
439     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
440         require(b != 0);
441         return a % b;
442     }
443 }
444 
445 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
446 
447 pragma solidity ^0.5.2;
448 
449 
450 
451 /**
452  * @title Standard ERC20 token
453  *
454  * @dev Implementation of the basic standard token.
455  * https://eips.ethereum.org/EIPS/eip-20
456  * Originally based on code by FirstBlood:
457  * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
458  *
459  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for
460  * all accounts just by listening to said events. Note that this isn't required by the specification, and other
461  * compliant implementations may not do it.
462  */
463 contract ERC20 is IERC20 {
464     using SafeMath for uint256;
465 
466     mapping (address => uint256) private _balances;
467 
468     mapping (address => mapping (address => uint256)) private _allowed;
469 
470     uint256 private _totalSupply;
471 
472     /**
473      * @dev Total number of tokens in existence
474      */
475     function totalSupply() public view returns (uint256) {
476         return _totalSupply;
477     }
478 
479     /**
480      * @dev Gets the balance of the specified address.
481      * @param owner The address to query the balance of.
482      * @return A uint256 representing the amount owned by the passed address.
483      */
484     function balanceOf(address owner) public view returns (uint256) {
485         return _balances[owner];
486     }
487 
488     /**
489      * @dev Function to check the amount of tokens that an owner allowed to a spender.
490      * @param owner address The address which owns the funds.
491      * @param spender address The address which will spend the funds.
492      * @return A uint256 specifying the amount of tokens still available for the spender.
493      */
494     function allowance(address owner, address spender) public view returns (uint256) {
495         return _allowed[owner][spender];
496     }
497 
498     /**
499      * @dev Transfer token to a specified address
500      * @param to The address to transfer to.
501      * @param value The amount to be transferred.
502      */
503     function transfer(address to, uint256 value) public returns (bool) {
504         _transfer(msg.sender, to, value);
505         return true;
506     }
507 
508     /**
509      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
510      * Beware that changing an allowance with this method brings the risk that someone may use both the old
511      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
512      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
513      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
514      * @param spender The address which will spend the funds.
515      * @param value The amount of tokens to be spent.
516      */
517     function approve(address spender, uint256 value) public returns (bool) {
518         _approve(msg.sender, spender, value);
519         return true;
520     }
521 
522     /**
523      * @dev Transfer tokens from one address to another.
524      * Note that while this function emits an Approval event, this is not required as per the specification,
525      * and other compliant implementations may not emit the event.
526      * @param from address The address which you want to send tokens from
527      * @param to address The address which you want to transfer to
528      * @param value uint256 the amount of tokens to be transferred
529      */
530     function transferFrom(address from, address to, uint256 value) public returns (bool) {
531         _transfer(from, to, value);
532         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
533         return true;
534     }
535 
536     /**
537      * @dev Increase the amount of tokens that an owner allowed to a spender.
538      * approve should be called when _allowed[msg.sender][spender] == 0. To increment
539      * allowed value is better to use this function to avoid 2 calls (and wait until
540      * the first transaction is mined)
541      * From MonolithDAO Token.sol
542      * Emits an Approval event.
543      * @param spender The address which will spend the funds.
544      * @param addedValue The amount of tokens to increase the allowance by.
545      */
546     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
547         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
548         return true;
549     }
550 
551     /**
552      * @dev Decrease the amount of tokens that an owner allowed to a spender.
553      * approve should be called when _allowed[msg.sender][spender] == 0. To decrement
554      * allowed value is better to use this function to avoid 2 calls (and wait until
555      * the first transaction is mined)
556      * From MonolithDAO Token.sol
557      * Emits an Approval event.
558      * @param spender The address which will spend the funds.
559      * @param subtractedValue The amount of tokens to decrease the allowance by.
560      */
561     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
562         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
563         return true;
564     }
565 
566     /**
567      * @dev Transfer token for a specified addresses
568      * @param from The address to transfer from.
569      * @param to The address to transfer to.
570      * @param value The amount to be transferred.
571      */
572     function _transfer(address from, address to, uint256 value) internal {
573         require(to != address(0));
574 
575         _balances[from] = _balances[from].sub(value);
576         _balances[to] = _balances[to].add(value);
577         emit Transfer(from, to, value);
578     }
579 
580     /**
581      * @dev Internal function that mints an amount of the token and assigns it to
582      * an account. This encapsulates the modification of balances such that the
583      * proper events are emitted.
584      * @param account The account that will receive the created tokens.
585      * @param value The amount that will be created.
586      */
587     function _mint(address account, uint256 value) internal {
588         require(account != address(0));
589 
590         _totalSupply = _totalSupply.add(value);
591         _balances[account] = _balances[account].add(value);
592         emit Transfer(address(0), account, value);
593     }
594 
595     /**
596      * @dev Internal function that burns an amount of the token of a given
597      * account.
598      * @param account The account whose tokens will be burnt.
599      * @param value The amount that will be burnt.
600      */
601     function _burn(address account, uint256 value) internal {
602         require(account != address(0));
603 
604         _totalSupply = _totalSupply.sub(value);
605         _balances[account] = _balances[account].sub(value);
606         emit Transfer(account, address(0), value);
607     }
608 
609     /**
610      * @dev Approve an address to spend another addresses' tokens.
611      * @param owner The address that owns the tokens.
612      * @param spender The address that will spend the tokens.
613      * @param value The number of tokens that can be spent.
614      */
615     function _approve(address owner, address spender, uint256 value) internal {
616         require(spender != address(0));
617         require(owner != address(0));
618 
619         _allowed[owner][spender] = value;
620         emit Approval(owner, spender, value);
621     }
622 
623     /**
624      * @dev Internal function that burns an amount of the token of a given
625      * account, deducting from the sender's allowance for said account. Uses the
626      * internal burn function.
627      * Emits an Approval event (reflecting the reduced allowance).
628      * @param account The account whose tokens will be burnt.
629      * @param value The amount that will be burnt.
630      */
631     function _burnFrom(address account, uint256 value) internal {
632         _burn(account, value);
633         _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
634     }
635 }
636 
637 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
638 
639 pragma solidity ^0.5.2;
640 
641 
642 /**
643  * @title Burnable Token
644  * @dev Token that can be irreversibly burned (destroyed).
645  */
646 contract ERC20Burnable is ERC20 {
647     /**
648      * @dev Burns a specific amount of tokens.
649      * @param value The amount of token to be burned.
650      */
651     function burn(uint256 value) public {
652         _burn(msg.sender, value);
653     }
654 
655     /**
656      * @dev Burns a specific amount of tokens from the target address and decrements allowance
657      * @param from address The account whose tokens will be burned.
658      * @param value uint256 The amount of token to be burned.
659      */
660     function burnFrom(address from, uint256 value) public {
661         _burnFrom(from, value);
662     }
663 }
664 
665 // File: contracts/controller/DAOToken.sol
666 
667 pragma solidity ^0.5.4;
668 
669 
670 
671 
672 
673 /**
674  * @title DAOToken, base on zeppelin contract.
675  * @dev ERC20 compatible token. It is a mintable, burnable token.
676  */
677 
678 contract DAOToken is ERC20, ERC20Burnable, Ownable {
679 
680     string public name;
681     string public symbol;
682     // solhint-disable-next-line const-name-snakecase
683     uint8 public constant decimals = 18;
684     uint256 public cap;
685 
686     /**
687     * @dev Constructor
688     * @param _name - token name
689     * @param _symbol - token symbol
690     * @param _cap - token cap - 0 value means no cap
691     */
692     constructor(string memory _name, string memory _symbol, uint256 _cap)
693     public {
694         name = _name;
695         symbol = _symbol;
696         cap = _cap;
697     }
698 
699     /**
700      * @dev Function to mint tokens
701      * @param _to The address that will receive the minted tokens.
702      * @param _amount The amount of tokens to mint.
703      */
704     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
705         if (cap > 0)
706             require(totalSupply().add(_amount) <= cap);
707         _mint(_to, _amount);
708         return true;
709     }
710 }
711 
712 // File: openzeppelin-solidity/contracts/utils/Address.sol
713 
714 pragma solidity ^0.5.2;
715 
716 /**
717  * Utility library of inline functions on addresses
718  */
719 library Address {
720     /**
721      * Returns whether the target address is a contract
722      * @dev This function will return false if invoked during the constructor of a contract,
723      * as the code is not actually created until after the constructor finishes.
724      * @param account address of the account to check
725      * @return whether the target address is a contract
726      */
727     function isContract(address account) internal view returns (bool) {
728         uint256 size;
729         // XXX Currently there is no better way to check if there is a contract in an address
730         // than to check the size of the code at that address.
731         // See https://ethereum.stackexchange.com/a/14016/36603
732         // for more details about how this works.
733         // TODO Check this again before the Serenity release, because all addresses will be
734         // contracts then.
735         // solhint-disable-next-line no-inline-assembly
736         assembly { size := extcodesize(account) }
737         return size > 0;
738     }
739 }
740 
741 // File: contracts/libs/SafeERC20.sol
742 
743 /*
744 
745 SafeERC20 by daostack.
746 The code is based on a fix by SECBIT Team.
747 
748 USE WITH CAUTION & NO WARRANTY
749 
750 REFERENCE & RELATED READING
751 - https://github.com/ethereum/solidity/issues/4116
752 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
753 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
754 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
755 
756 */
757 pragma solidity ^0.5.4;
758 
759 
760 
761 library SafeERC20 {
762     using Address for address;
763 
764     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
765     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
766     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
767 
768     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
769 
770         // Must be a contract addr first!
771         require(_erc20Addr.isContract());
772 
773         (bool success, bytes memory returnValue) =
774         // solhint-disable-next-line avoid-low-level-calls
775         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
776         // call return false when something wrong
777         require(success);
778         //check return value
779         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
780     }
781 
782     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
783 
784         // Must be a contract addr first!
785         require(_erc20Addr.isContract());
786 
787         (bool success, bytes memory returnValue) =
788         // solhint-disable-next-line avoid-low-level-calls
789         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
790         // call return false when something wrong
791         require(success);
792         //check return value
793         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
794     }
795 
796     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
797 
798         // Must be a contract addr first!
799         require(_erc20Addr.isContract());
800 
801         // safeApprove should only be called when setting an initial allowance,
802         // or when resetting it to zero.
803         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
804 
805         (bool success, bytes memory returnValue) =
806         // solhint-disable-next-line avoid-low-level-calls
807         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
808         // call return false when something wrong
809         require(success);
810         //check return value
811         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
812     }
813 }
814 
815 // File: contracts/controller/Avatar.sol
816 
817 pragma solidity ^0.5.4;
818 
819 
820 
821 
822 
823 
824 
825 /**
826  * @title An Avatar holds tokens, reputation and ether for a controller
827  */
828 contract Avatar is Ownable {
829     using SafeERC20 for address;
830 
831     string public orgName;
832     DAOToken public nativeToken;
833     Reputation public nativeReputation;
834 
835     event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
836     event SendEther(uint256 _amountInWei, address indexed _to);
837     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
838     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
839     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
840     event ReceiveEther(address indexed _sender, uint256 _value);
841     event MetaData(string _metaData);
842 
843     /**
844     * @dev the constructor takes organization name, native token and reputation system
845     and creates an avatar for a controller
846     */
847     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
848         orgName = _orgName;
849         nativeToken = _nativeToken;
850         nativeReputation = _nativeReputation;
851     }
852 
853     /**
854     * @dev enables an avatar to receive ethers
855     */
856     function() external payable {
857         emit ReceiveEther(msg.sender, msg.value);
858     }
859 
860     /**
861     * @dev perform a generic call to an arbitrary contract
862     * @param _contract  the contract's address to call
863     * @param _data ABI-encoded contract call to call `_contract` address.
864     * @param _value value (ETH) to transfer with the transaction
865     * @return bool    success or fail
866     *         bytes - the return bytes of the called contract's function.
867     */
868     function genericCall(address _contract, bytes memory _data, uint256 _value)
869     public
870     onlyOwner
871     returns(bool success, bytes memory returnValue) {
872       // solhint-disable-next-line avoid-call-value
873         (success, returnValue) = _contract.call.value(_value)(_data);
874         emit GenericCall(_contract, _data, _value, success);
875     }
876 
877     /**
878     * @dev send ethers from the avatar's wallet
879     * @param _amountInWei amount to send in Wei units
880     * @param _to send the ethers to this address
881     * @return bool which represents success
882     */
883     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
884         _to.transfer(_amountInWei);
885         emit SendEther(_amountInWei, _to);
886         return true;
887     }
888 
889     /**
890     * @dev external token transfer
891     * @param _externalToken the token contract
892     * @param _to the destination address
893     * @param _value the amount of tokens to transfer
894     * @return bool which represents success
895     */
896     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
897     public onlyOwner returns(bool)
898     {
899         address(_externalToken).safeTransfer(_to, _value);
900         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
901         return true;
902     }
903 
904     /**
905     * @dev external token transfer from a specific account
906     * @param _externalToken the token contract
907     * @param _from the account to spend token from
908     * @param _to the destination address
909     * @param _value the amount of tokens to transfer
910     * @return bool which represents success
911     */
912     function externalTokenTransferFrom(
913         IERC20 _externalToken,
914         address _from,
915         address _to,
916         uint256 _value
917     )
918     public onlyOwner returns(bool)
919     {
920         address(_externalToken).safeTransferFrom(_from, _to, _value);
921         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
922         return true;
923     }
924 
925     /**
926     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
927     *      on behalf of msg.sender.
928     * @param _externalToken the address of the Token Contract
929     * @param _spender address
930     * @param _value the amount of ether (in Wei) which the approval is referring to.
931     * @return bool which represents a success
932     */
933     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
934     public onlyOwner returns(bool)
935     {
936         address(_externalToken).safeApprove(_spender, _value);
937         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
938         return true;
939     }
940 
941     /**
942     * @dev metaData emits an event with a string, should contain the hash of some meta data.
943     * @param _metaData a string representing a hash of the meta data
944     * @return bool which represents a success
945     */
946     function metaData(string memory _metaData) public onlyOwner returns(bool) {
947         emit MetaData(_metaData);
948         return true;
949     }
950 
951 
952 }
953 
954 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
955 
956 pragma solidity ^0.5.4;
957 
958 
959 contract UniversalSchemeInterface {
960 
961     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
962     
963 }
964 
965 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
966 
967 pragma solidity ^0.5.4;
968 
969 
970 contract GlobalConstraintInterface {
971 
972     enum CallPhase { Pre, Post, PreAndPost }
973 
974     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
975     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
976     /**
977      * @dev when return if this globalConstraints is pre, post or both.
978      * @return CallPhase enum indication  Pre, Post or PreAndPost.
979      */
980     function when() public returns(CallPhase);
981 }
982 
983 // File: contracts/controller/ControllerInterface.sol
984 
985 pragma solidity ^0.5.4;
986 
987 
988 
989 /**
990  * @title Controller contract
991  * @dev A controller controls the organizations tokens ,reputation and avatar.
992  * It is subject to a set of schemes and constraints that determine its behavior.
993  * Each scheme has it own parameters and operation permissions.
994  */
995 interface ControllerInterface {
996 
997     /**
998      * @dev Mint `_amount` of reputation that are assigned to `_to` .
999      * @param  _amount amount of reputation to mint
1000      * @param _to beneficiary address
1001      * @return bool which represents a success
1002     */
1003     function mintReputation(uint256 _amount, address _to, address _avatar)
1004     external
1005     returns(bool);
1006 
1007     /**
1008      * @dev Burns `_amount` of reputation from `_from`
1009      * @param _amount amount of reputation to burn
1010      * @param _from The address that will lose the reputation
1011      * @return bool which represents a success
1012      */
1013     function burnReputation(uint256 _amount, address _from, address _avatar)
1014     external
1015     returns(bool);
1016 
1017     /**
1018      * @dev mint tokens .
1019      * @param  _amount amount of token to mint
1020      * @param _beneficiary beneficiary address
1021      * @param _avatar address
1022      * @return bool which represents a success
1023      */
1024     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1025     external
1026     returns(bool);
1027 
1028   /**
1029    * @dev register or update a scheme
1030    * @param _scheme the address of the scheme
1031    * @param _paramsHash a hashed configuration of the usage of the scheme
1032    * @param _permissions the permissions the new scheme will have
1033    * @param _avatar address
1034    * @return bool which represents a success
1035    */
1036     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1037     external
1038     returns(bool);
1039 
1040     /**
1041      * @dev unregister a scheme
1042      * @param _avatar address
1043      * @param _scheme the address of the scheme
1044      * @return bool which represents a success
1045      */
1046     function unregisterScheme(address _scheme, address _avatar)
1047     external
1048     returns(bool);
1049 
1050     /**
1051      * @dev unregister the caller's scheme
1052      * @param _avatar address
1053      * @return bool which represents a success
1054      */
1055     function unregisterSelf(address _avatar) external returns(bool);
1056 
1057     /**
1058      * @dev add or update Global Constraint
1059      * @param _globalConstraint the address of the global constraint to be added.
1060      * @param _params the constraint parameters hash.
1061      * @param _avatar the avatar of the organization
1062      * @return bool which represents a success
1063      */
1064     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1065     external returns(bool);
1066 
1067     /**
1068      * @dev remove Global Constraint
1069      * @param _globalConstraint the address of the global constraint to be remove.
1070      * @param _avatar the organization avatar.
1071      * @return bool which represents a success
1072      */
1073     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1074     external  returns(bool);
1075 
1076   /**
1077     * @dev upgrade the Controller
1078     *      The function will trigger an event 'UpgradeController'.
1079     * @param  _newController the address of the new controller.
1080     * @param _avatar address
1081     * @return bool which represents a success
1082     */
1083     function upgradeController(address _newController, Avatar _avatar)
1084     external returns(bool);
1085 
1086     /**
1087     * @dev perform a generic call to an arbitrary contract
1088     * @param _contract  the contract's address to call
1089     * @param _data ABI-encoded contract call to call `_contract` address.
1090     * @param _avatar the controller's avatar address
1091     * @param _value value (ETH) to transfer with the transaction
1092     * @return bool -success
1093     *         bytes  - the return value of the called _contract's function.
1094     */
1095     function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)
1096     external
1097     returns(bool, bytes memory);
1098 
1099   /**
1100    * @dev send some ether
1101    * @param _amountInWei the amount of ether (in Wei) to send
1102    * @param _to address of the beneficiary
1103    * @param _avatar address
1104    * @return bool which represents a success
1105    */
1106     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1107     external returns(bool);
1108 
1109     /**
1110     * @dev send some amount of arbitrary ERC20 Tokens
1111     * @param _externalToken the address of the Token Contract
1112     * @param _to address of the beneficiary
1113     * @param _value the amount of ether (in Wei) to send
1114     * @param _avatar address
1115     * @return bool which represents a success
1116     */
1117     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1118     external
1119     returns(bool);
1120 
1121     /**
1122     * @dev transfer token "from" address "to" address
1123     *      One must to approve the amount of tokens which can be spend from the
1124     *      "from" account.This can be done using externalTokenApprove.
1125     * @param _externalToken the address of the Token Contract
1126     * @param _from address of the account to send from
1127     * @param _to address of the beneficiary
1128     * @param _value the amount of ether (in Wei) to send
1129     * @param _avatar address
1130     * @return bool which represents a success
1131     */
1132     function externalTokenTransferFrom(
1133     IERC20 _externalToken,
1134     address _from,
1135     address _to,
1136     uint256 _value,
1137     Avatar _avatar)
1138     external
1139     returns(bool);
1140 
1141     /**
1142     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1143     *      on behalf of msg.sender.
1144     * @param _externalToken the address of the Token Contract
1145     * @param _spender address
1146     * @param _value the amount of ether (in Wei) which the approval is referring to.
1147     * @return bool which represents a success
1148     */
1149     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1150     external
1151     returns(bool);
1152 
1153     /**
1154     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1155     * @param _metaData a string representing a hash of the meta data
1156     * @param _avatar Avatar
1157     * @return bool which represents a success
1158     */
1159     function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);
1160 
1161     /**
1162      * @dev getNativeReputation
1163      * @param _avatar the organization avatar.
1164      * @return organization native reputation
1165      */
1166     function getNativeReputation(address _avatar)
1167     external
1168     view
1169     returns(address);
1170 
1171     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1172 
1173     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1174 
1175     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1176 
1177     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1178 
1179     /**
1180      * @dev globalConstraintsCount return the global constraint pre and post count
1181      * @return uint256 globalConstraintsPre count.
1182      * @return uint256 globalConstraintsPost count.
1183      */
1184     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1185 
1186     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1187 }
1188 
1189 // File: contracts/universalSchemes/UniversalScheme.sol
1190 
1191 pragma solidity ^0.5.4;
1192 
1193 
1194 
1195 
1196 
1197 contract UniversalScheme is UniversalSchemeInterface {
1198     /**
1199     *  @dev get the parameters for the current scheme from the controller
1200     */
1201     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1202         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1203         "scheme is not registered");
1204         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1205     }
1206 }
1207 
1208 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1209 
1210 pragma solidity ^0.5.2;
1211 
1212 /**
1213  * @title Elliptic curve signature operations
1214  * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
1215  * TODO Remove this library once solidity supports passing a signature to ecrecover.
1216  * See https://github.com/ethereum/solidity/issues/864
1217  */
1218 
1219 library ECDSA {
1220     /**
1221      * @dev Recover signer address from a message by using their signature
1222      * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
1223      * @param signature bytes signature, the signature is generated using web3.eth.sign()
1224      */
1225     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1226         // Check the signature length
1227         if (signature.length != 65) {
1228             return (address(0));
1229         }
1230 
1231         // Divide the signature in r, s and v variables
1232         bytes32 r;
1233         bytes32 s;
1234         uint8 v;
1235 
1236         // ecrecover takes the signature parameters, and the only way to get them
1237         // currently is to use assembly.
1238         // solhint-disable-next-line no-inline-assembly
1239         assembly {
1240             r := mload(add(signature, 0x20))
1241             s := mload(add(signature, 0x40))
1242             v := byte(0, mload(add(signature, 0x60)))
1243         }
1244 
1245         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
1246         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
1247         // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
1248         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
1249         //
1250         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
1251         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
1252         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
1253         // these malleable signatures as well.
1254         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
1255             return address(0);
1256         }
1257 
1258         if (v != 27 && v != 28) {
1259             return address(0);
1260         }
1261 
1262         // If the signature is valid (and not malleable), return the signer address
1263         return ecrecover(hash, v, r, s);
1264     }
1265 
1266     /**
1267      * toEthSignedMessageHash
1268      * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
1269      * and hash the result
1270      */
1271     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1272         // 32 is the length in bytes of hash,
1273         // enforced by the type signature above
1274         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1275     }
1276 }
1277 
1278 // File: @daostack/infra/contracts/libs/RealMath.sol
1279 
1280 pragma solidity ^0.5.4;
1281 
1282 /**
1283  * RealMath: fixed-point math library, based on fractional and integer parts.
1284  * Using uint256 as real216x40, which isn't in Solidity yet.
1285  * Internally uses the wider uint256 for some math.
1286  *
1287  * Note that for addition, subtraction, and mod (%), you should just use the
1288  * built-in Solidity operators. Functions for these operations are not provided.
1289  *
1290  */
1291 
1292 
1293 library RealMath {
1294 
1295     /**
1296      * How many total bits are there?
1297      */
1298     uint256 constant private REAL_BITS = 256;
1299 
1300     /**
1301      * How many fractional bits are there?
1302      */
1303     uint256 constant private REAL_FBITS = 40;
1304 
1305     /**
1306      * What's the first non-fractional bit
1307      */
1308     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1309 
1310     /**
1311      * Raise a real number to any positive integer power
1312      */
1313     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1314 
1315         uint256 tempRealBase = realBase;
1316         uint256 tempExponent = exponent;
1317 
1318         // Start with the 0th power
1319         uint256 realResult = REAL_ONE;
1320         while (tempExponent != 0) {
1321             // While there are still bits set
1322             if ((tempExponent & 0x1) == 0x1) {
1323                 // If the low bit is set, multiply in the (many-times-squared) base
1324                 realResult = mul(realResult, tempRealBase);
1325             }
1326                 // Shift off the low bit
1327             tempExponent = tempExponent >> 1;
1328             if (tempExponent != 0) {
1329                 // Do the squaring
1330                 tempRealBase = mul(tempRealBase, tempRealBase);
1331             }
1332         }
1333 
1334         // Return the final result.
1335         return realResult;
1336     }
1337 
1338     /**
1339      * Create a real from a rational fraction.
1340      */
1341     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1342         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1343     }
1344 
1345     /**
1346      * Multiply one real by another. Truncates overflows.
1347      */
1348     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1349         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1350         // So we just have to clip off the extra REAL_FBITS fractional bits.
1351         uint256 res = realA * realB;
1352         require(res/realA == realB, "RealMath mul overflow");
1353         return (res >> REAL_FBITS);
1354     }
1355 
1356     /**
1357      * Divide one real by another real. Truncates overflows.
1358      */
1359     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1360         // We use the reverse of the multiplication trick: convert numerator from
1361         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1362         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1363     }
1364 
1365 }
1366 
1367 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
1368 
1369 pragma solidity ^0.5.4;
1370 
1371 
1372 interface VotingMachineCallbacksInterface {
1373     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
1374     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
1375 
1376     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
1377     external
1378     returns(bool);
1379 
1380     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
1381     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
1382     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
1383 }
1384 
1385 // File: openzeppelin-solidity/contracts/math/Math.sol
1386 
1387 pragma solidity ^0.5.2;
1388 
1389 /**
1390  * @title Math
1391  * @dev Assorted math operations
1392  */
1393 library Math {
1394     /**
1395      * @dev Returns the largest of two numbers.
1396      */
1397     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1398         return a >= b ? a : b;
1399     }
1400 
1401     /**
1402      * @dev Returns the smallest of two numbers.
1403      */
1404     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1405         return a < b ? a : b;
1406     }
1407 
1408     /**
1409      * @dev Calculates the average of two numbers. Since these are integers,
1410      * averages of an even and odd number cannot be represented, and will be
1411      * rounded down.
1412      */
1413     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1414         // (a + b) / 2 can overflow, so we distribute
1415         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1416     }
1417 }
1418 
1419 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
1420 
1421 pragma solidity ^0.5.4;
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 
1432 
1433 /**
1434  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1435  */
1436 contract GenesisProtocolLogic is IntVoteInterface {
1437     using SafeMath for uint256;
1438     using Math for uint256;
1439     using RealMath for uint216;
1440     using RealMath for uint256;
1441     using Address for address;
1442 
1443     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1444     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1445 
1446     //Organization's parameters
1447     struct Parameters {
1448         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1449         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1450         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1451         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1452                                           //to be in an preparation state (stable) before boosted.
1453         uint256 thresholdConst; //constant  for threshold calculation .
1454                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1455         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1456                                    //in the threshold calculation to prevent overflow
1457         uint256 quietEndingPeriod; //quite ending period
1458         uint256 proposingRepReward;//proposer reputation reward.
1459         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1460                                           //voters lose votersReputationLossRatio% of their reputation.
1461         uint256 minimumDaoBounty;
1462         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1463                                //(daoBountyConst * averageBoostDownstakes)/100 .
1464         uint256 activationTime;//the point in time after which proposals can be created.
1465         //if this address is set so only this address is allowed to vote of behalf of someone else.
1466         address voteOnBehalf;
1467     }
1468 
1469     struct Voter {
1470         uint256 vote; // YES(1) ,NO(2)
1471         uint256 reputation; // amount of voter's reputation
1472         bool preBoosted;
1473     }
1474 
1475     struct Staker {
1476         uint256 vote; // YES(1) ,NO(2)
1477         uint256 amount; // amount of staker's stake
1478         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1479     }
1480 
1481     struct Proposal {
1482         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1483         address callbacks;    // should fulfill voting callbacks interface.
1484         ProposalState state;
1485         uint256 winningVote; //the winning vote.
1486         address proposer;
1487         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1488         uint256 currentBoostedVotePeriodLimit;
1489         bytes32 paramsHash;
1490         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1491         uint256 daoBounty;
1492         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1493         uint256 confidenceThreshold;
1494         //The percentage from upper stakes which the caller for the expiration was given.
1495         uint256 expirationCallBountyPercentage;
1496         uint[3] times; //times[0] - submittedTime
1497                        //times[1] - boostedPhaseTime
1498                        //times[2] -preBoostedPhaseTime;
1499         bool daoRedeemItsWinnings;
1500         //      vote      reputation
1501         mapping(uint256   =>  uint256    ) votes;
1502         //      vote      reputation
1503         mapping(uint256   =>  uint256    ) preBoostedVotes;
1504         //      address     voter
1505         mapping(address =>  Voter    ) voters;
1506         //      vote        stakes
1507         mapping(uint256   =>  uint256    ) stakes;
1508         //      address  staker
1509         mapping(address  => Staker   ) stakers;
1510     }
1511 
1512     event Stake(bytes32 indexed _proposalId,
1513         address indexed _organization,
1514         address indexed _staker,
1515         uint256 _vote,
1516         uint256 _amount
1517     );
1518 
1519     event Redeem(bytes32 indexed _proposalId,
1520         address indexed _organization,
1521         address indexed _beneficiary,
1522         uint256 _amount
1523     );
1524 
1525     event RedeemDaoBounty(bytes32 indexed _proposalId,
1526         address indexed _organization,
1527         address indexed _beneficiary,
1528         uint256 _amount
1529     );
1530 
1531     event RedeemReputation(bytes32 indexed _proposalId,
1532         address indexed _organization,
1533         address indexed _beneficiary,
1534         uint256 _amount
1535     );
1536 
1537     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1538     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1539     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1540     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
1541 
1542     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1543     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1544     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1545            //organizationId => organization
1546     mapping(bytes32        => address     ) public organizations;
1547           //organizationId => averageBoostDownstakes
1548     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1549     uint256 constant public NUM_OF_CHOICES = 2;
1550     uint256 constant public NO = 2;
1551     uint256 constant public YES = 1;
1552     uint256 public proposalsCnt; // Total number of proposals
1553     IERC20 public stakingToken;
1554     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1555     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1556 
1557     /**
1558      * @dev Constructor
1559      */
1560     constructor(IERC20 _stakingToken) public {
1561       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1562       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1563       //If such contract address does not exist in the network (e.g ganache)
1564       //the contract will use the _stakingToken param as the
1565       //staking token address.
1566         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1567             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1568         } else {
1569             stakingToken = _stakingToken;
1570         }
1571     }
1572 
1573   /**
1574    * @dev Check that the proposal is votable
1575    * a proposal is votable if it is in one of the following states:
1576    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1577    */
1578     modifier votable(bytes32 _proposalId) {
1579         require(_isVotable(_proposalId));
1580         _;
1581     }
1582 
1583     /**
1584      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1585      * generated by calculating keccak256 of a incremented counter.
1586      * @param _paramsHash parameters hash
1587      * @param _proposer address
1588      * @param _organization address
1589      */
1590     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1591         external
1592         returns(bytes32)
1593     {
1594       // solhint-disable-next-line not-rely-on-time
1595         require(now > parameters[_paramsHash].activationTime, "not active yet");
1596         //Check parameters existence.
1597         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1598         // Generate a unique ID:
1599         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1600         proposalsCnt = proposalsCnt.add(1);
1601          // Open proposal:
1602         Proposal memory proposal;
1603         proposal.callbacks = msg.sender;
1604         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1605 
1606         proposal.state = ProposalState.Queued;
1607         // solhint-disable-next-line not-rely-on-time
1608         proposal.times[0] = now;//submitted time
1609         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1610         proposal.proposer = _proposer;
1611         proposal.winningVote = NO;
1612         proposal.paramsHash = _paramsHash;
1613         if (organizations[proposal.organizationId] == address(0)) {
1614             if (_organization == address(0)) {
1615                 organizations[proposal.organizationId] = msg.sender;
1616             } else {
1617                 organizations[proposal.organizationId] = _organization;
1618             }
1619         }
1620         //calc dao bounty
1621         uint256 daoBounty =
1622         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1623         if (daoBounty < parameters[_paramsHash].minimumDaoBounty) {
1624             proposal.daoBountyRemain = parameters[_paramsHash].minimumDaoBounty;
1625         } else {
1626             proposal.daoBountyRemain = daoBounty;
1627         }
1628         proposal.totalStakes = proposal.daoBountyRemain;
1629         proposals[proposalId] = proposal;
1630         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1631 
1632         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1633         return proposalId;
1634     }
1635 
1636     /**
1637       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
1638       * @param _proposalId the id of the proposal
1639       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1640      */
1641     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1642         Proposal storage proposal = proposals[_proposalId];
1643         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
1644         "proposal state in not Boosted nor QuietEndingPeriod");
1645         require(_execute(_proposalId), "proposal need to expire");
1646         uint256 expirationCallBountyPercentage =
1647         // solhint-disable-next-line not-rely-on-time
1648         (uint(1).add(now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1])).div(15)));
1649         if (expirationCallBountyPercentage > 100) {
1650             expirationCallBountyPercentage = 100;
1651         }
1652         proposal.expirationCallBountyPercentage = expirationCallBountyPercentage;
1653         expirationCallBounty = expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100);
1654         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1655         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1656     }
1657 
1658     /**
1659      * @dev hash the parameters, save them if necessary, and return the hash value
1660      * @param _params a parameters array
1661      *    _params[0] - _queuedVoteRequiredPercentage,
1662      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1663      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1664      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1665      *                  state (stable) before boosted.
1666      *    _params[4] -_thresholdConst
1667      *    _params[5] -_quietEndingPeriod
1668      *    _params[6] -_proposingRepReward
1669      *    _params[7] -_votersReputationLossRatio
1670      *    _params[8] -_minimumDaoBounty
1671      *    _params[9] -_daoBountyConst
1672      *    _params[10] -_activationTime
1673      * @param _voteOnBehalf - authorized to vote on behalf of others.
1674     */
1675     function setParameters(
1676         uint[11] calldata _params, //use array here due to stack too deep issue.
1677         address _voteOnBehalf
1678     )
1679     external
1680     returns(bytes32)
1681     {
1682         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1683         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1684         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1685         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1686         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1687         require(_params[9] > 0, "daoBountyConst should be > 0");
1688 
1689         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1690         //set a limit for power for a given alpha to prevent overflow
1691         uint256 limitExponent = 172;//for alpha less or equal 2
1692         uint256 j = 2;
1693         for (uint256 i = 2000; i < 16000; i = i*2) {
1694             if ((_params[4] > i) && (_params[4] <= i*2)) {
1695                 limitExponent = limitExponent/j;
1696                 break;
1697             }
1698             j++;
1699         }
1700 
1701         parameters[paramsHash] = Parameters({
1702             queuedVoteRequiredPercentage: _params[0],
1703             queuedVotePeriodLimit: _params[1],
1704             boostedVotePeriodLimit: _params[2],
1705             preBoostedVotePeriodLimit: _params[3],
1706             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1707             limitExponentValue:limitExponent,
1708             quietEndingPeriod: _params[5],
1709             proposingRepReward: _params[6],
1710             votersReputationLossRatio:_params[7],
1711             minimumDaoBounty:_params[8],
1712             daoBountyConst:_params[9],
1713             activationTime:_params[10],
1714             voteOnBehalf:_voteOnBehalf
1715         });
1716         return paramsHash;
1717     }
1718 
1719     /**
1720      * @dev redeem a reward for a successful stake, vote or proposing.
1721      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1722      * users to redeem on behalf of someone else.
1723      * @param _proposalId the ID of the proposal
1724      * @param _beneficiary - the beneficiary address
1725      * @return rewards -
1726      *           [0] stakerTokenReward
1727      *           [1] voterReputationReward
1728      *           [2] proposerReputationReward
1729      */
1730      // solhint-disable-next-line function-max-lines,code-complexity
1731     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1732         Proposal storage proposal = proposals[_proposalId];
1733         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1734         "Proposal should be Executed or ExpiredInQueue");
1735         Parameters memory params = parameters[proposal.paramsHash];
1736         uint256 lostReputation;
1737         if (proposal.winningVote == YES) {
1738             lostReputation = proposal.preBoostedVotes[NO];
1739         } else {
1740             lostReputation = proposal.preBoostedVotes[YES];
1741         }
1742         lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1743         //as staker
1744         Staker storage staker = proposal.stakers[_beneficiary];
1745         uint256 totalStakes = proposal.stakes[NO].add(proposal.stakes[YES]);
1746         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1747 
1748         if (staker.amount > 0) {
1749             uint256 totalStakesLeftAfterCallBounty =
1750             totalStakes.sub(proposal.expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100));
1751             if (proposal.state == ProposalState.ExpiredInQueue) {
1752                 //Stakes of a proposal that expires in Queue are sent back to stakers
1753                 rewards[0] = staker.amount;
1754             } else if (staker.vote == proposal.winningVote) {
1755                 if (staker.vote == YES) {
1756                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
1757                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
1758                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1759                     }
1760                 } else {
1761                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
1762                 }
1763             }
1764             staker.amount = 0;
1765         }
1766             //dao redeem its winnings
1767         if (proposal.daoRedeemItsWinnings == false &&
1768             _beneficiary == organizations[proposal.organizationId] &&
1769             proposal.state != ProposalState.ExpiredInQueue &&
1770             proposal.winningVote == NO) {
1771             rewards[0] =
1772             rewards[0].add((proposal.daoBounty.mul(totalStakes))/totalWinningStakes).sub(proposal.daoBounty);
1773             proposal.daoRedeemItsWinnings = true;
1774         }
1775 
1776         //as voter
1777         Voter storage voter = proposal.voters[_beneficiary];
1778         if ((voter.reputation != 0) && (voter.preBoosted)) {
1779             if (proposal.state == ProposalState.ExpiredInQueue) {
1780               //give back reputation for the voter
1781                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1782             } else if (proposal.winningVote == voter.vote) {
1783                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1784                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
1785             }
1786             voter.reputation = 0;
1787         }
1788         //as proposer
1789         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1790             rewards[2] = params.proposingRepReward;
1791             proposal.proposer = address(0);
1792         }
1793         if (rewards[0] != 0) {
1794             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1795             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1796             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1797         }
1798         if (rewards[1].add(rewards[2]) != 0) {
1799             VotingMachineCallbacksInterface(proposal.callbacks)
1800             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1801             emit RedeemReputation(
1802             _proposalId,
1803             organizations[proposal.organizationId],
1804             _beneficiary,
1805             rewards[1].add(rewards[2])
1806             );
1807         }
1808     }
1809 
1810     /**
1811      * @dev redeemDaoBounty a reward for a successful stake.
1812      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1813      * users to redeem on behalf of someone else.
1814      * @param _proposalId the ID of the proposal
1815      * @param _beneficiary - the beneficiary address
1816      * @return redeemedAmount - redeem token amount
1817      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1818      */
1819     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1820     public
1821     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1822         Proposal storage proposal = proposals[_proposalId];
1823         require(proposal.state == ProposalState.Executed);
1824         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1825         Staker storage staker = proposal.stakers[_beneficiary];
1826         if (
1827             (staker.amount4Bounty > 0)&&
1828             (staker.vote == proposal.winningVote)&&
1829             (proposal.winningVote == YES)&&
1830             (totalWinningStakes != 0)) {
1831             //as staker
1832                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1833             }
1834         if ((potentialAmount != 0)&&
1835             (VotingMachineCallbacksInterface(proposal.callbacks)
1836             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1837             staker.amount4Bounty = 0;
1838             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1839             require(
1840             VotingMachineCallbacksInterface(proposal.callbacks)
1841             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1842             redeemedAmount = potentialAmount;
1843             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1844         }
1845     }
1846 
1847     /**
1848      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
1849      * @param _proposalId the ID of the proposal
1850      * @return bool true or false.
1851      */
1852     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
1853         Proposal memory proposal = proposals[_proposalId];
1854         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
1855     }
1856 
1857     /**
1858      * @dev threshold return the organization's score threshold which required by
1859      * a proposal to shift to boosted state.
1860      * This threshold is dynamically set and it depend on the number of boosted proposal.
1861      * @param _organizationId the organization identifier
1862      * @param _paramsHash the organization parameters hash
1863      * @return uint256 organization's score threshold as real number.
1864      */
1865     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
1866         uint256 power = orgBoostedProposalsCnt[_organizationId];
1867         Parameters storage params = parameters[_paramsHash];
1868 
1869         if (power > params.limitExponentValue) {
1870             power = params.limitExponentValue;
1871         }
1872 
1873         return params.thresholdConst.pow(power);
1874     }
1875 
1876   /**
1877    * @dev hashParameters returns a hash of the given parameters
1878    */
1879     function getParametersHash(
1880         uint[11] memory _params,//use array here due to stack too deep issue.
1881         address _voteOnBehalf
1882     )
1883         public
1884         pure
1885         returns(bytes32)
1886         {
1887         //double call to keccak256 to avoid deep stack issue when call with too many params.
1888         return keccak256(
1889             abi.encodePacked(
1890             keccak256(
1891             abi.encodePacked(
1892                 _params[0],
1893                 _params[1],
1894                 _params[2],
1895                 _params[3],
1896                 _params[4],
1897                 _params[5],
1898                 _params[6],
1899                 _params[7],
1900                 _params[8],
1901                 _params[9],
1902                 _params[10])
1903             ),
1904             _voteOnBehalf
1905         ));
1906     }
1907 
1908     /**
1909       * @dev execute check if the proposal has been decided, and if so, execute the proposal
1910       * @param _proposalId the id of the proposal
1911       * @return bool true - the proposal has been executed
1912       *              false - otherwise.
1913      */
1914      // solhint-disable-next-line function-max-lines,code-complexity
1915     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
1916         Proposal storage proposal = proposals[_proposalId];
1917         Parameters memory params = parameters[proposal.paramsHash];
1918         Proposal memory tmpProposal = proposal;
1919         uint256 totalReputation =
1920         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
1921         //first divide by 100 to prevent overflow
1922         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
1923         ExecutionState executionState = ExecutionState.None;
1924         uint256 averageDownstakesOfBoosted;
1925         uint256 confidenceThreshold;
1926 
1927         if (proposal.votes[proposal.winningVote] > executionBar) {
1928          // someone crossed the absolute vote execution bar.
1929             if (proposal.state == ProposalState.Queued) {
1930                 executionState = ExecutionState.QueueBarCrossed;
1931             } else if (proposal.state == ProposalState.PreBoosted) {
1932                 executionState = ExecutionState.PreBoostedBarCrossed;
1933             } else {
1934                 executionState = ExecutionState.BoostedBarCrossed;
1935             }
1936             proposal.state = ProposalState.Executed;
1937         } else {
1938             if (proposal.state == ProposalState.Queued) {
1939                 // solhint-disable-next-line not-rely-on-time
1940                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
1941                     proposal.state = ProposalState.ExpiredInQueue;
1942                     proposal.winningVote = NO;
1943                     executionState = ExecutionState.QueueTimeOut;
1944                 } else {
1945                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1946                     if (_score(_proposalId) > confidenceThreshold) {
1947                         //change proposal mode to PreBoosted mode.
1948                         proposal.state = ProposalState.PreBoosted;
1949                         // solhint-disable-next-line not-rely-on-time
1950                         proposal.times[2] = now;
1951                         proposal.confidenceThreshold = confidenceThreshold;
1952                     }
1953                 }
1954             }
1955 
1956             if (proposal.state == ProposalState.PreBoosted) {
1957                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1958               // solhint-disable-next-line not-rely-on-time
1959                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
1960                     if ((_score(_proposalId) > confidenceThreshold) &&
1961                         (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS)) {
1962                        //change proposal mode to Boosted mode.
1963                         proposal.state = ProposalState.Boosted;
1964                        // solhint-disable-next-line not-rely-on-time
1965                         proposal.times[1] = now;
1966                         orgBoostedProposalsCnt[proposal.organizationId]++;
1967                        //add a value to average -> average = average + ((value - average) / nbValues)
1968                         averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1969                         // solium-disable-next-line indentation
1970                         averagesDownstakesOfBoosted[proposal.organizationId] =
1971                             uint256(int256(averageDownstakesOfBoosted) +
1972                             ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
1973                             int256(orgBoostedProposalsCnt[proposal.organizationId])));
1974                     }
1975                 } else { //check the Confidence level is stable
1976                     uint256 proposalScore = _score(_proposalId);
1977                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
1978                         proposal.state = ProposalState.Queued;
1979                     } else if (proposal.confidenceThreshold > proposalScore) {
1980                         proposal.confidenceThreshold = confidenceThreshold;
1981                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
1982                     }
1983                 }
1984             }
1985         }
1986 
1987         if ((proposal.state == ProposalState.Boosted) ||
1988             (proposal.state == ProposalState.QuietEndingPeriod)) {
1989             // solhint-disable-next-line not-rely-on-time
1990             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
1991                 proposal.state = ProposalState.Executed;
1992                 executionState = ExecutionState.BoostedTimeOut;
1993             }
1994         }
1995 
1996         if (executionState != ExecutionState.None) {
1997             if ((executionState == ExecutionState.BoostedTimeOut) ||
1998                 (executionState == ExecutionState.BoostedBarCrossed)) {
1999                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
2000                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
2001                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2002                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2003                 if (boostedProposals == 0) {
2004                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2005                 } else {
2006                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2007                     averagesDownstakesOfBoosted[proposal.organizationId] =
2008                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2009                 }
2010             }
2011             emit ExecuteProposal(
2012             _proposalId,
2013             organizations[proposal.organizationId],
2014             proposal.winningVote,
2015             totalReputation
2016             );
2017             emit GPExecuteProposal(_proposalId, executionState);
2018             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2019             proposal.daoBounty = proposal.daoBountyRemain;
2020         }
2021         if (tmpProposal.state != proposal.state) {
2022             emit StateChange(_proposalId, proposal.state);
2023         }
2024         return (executionState != ExecutionState.None);
2025     }
2026 
2027     /**
2028      * @dev staking function
2029      * @param _proposalId id of the proposal
2030      * @param _vote  NO(2) or YES(1).
2031      * @param _amount the betting amount
2032      * @return bool true - the proposal has been executed
2033      *              false - otherwise.
2034      */
2035     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2036         // 0 is not a valid vote.
2037         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2038         require(_amount > 0, "staking amount should be >0");
2039 
2040         if (_execute(_proposalId)) {
2041             return true;
2042         }
2043         Proposal storage proposal = proposals[_proposalId];
2044 
2045         if ((proposal.state != ProposalState.PreBoosted) &&
2046             (proposal.state != ProposalState.Queued)) {
2047             return false;
2048         }
2049 
2050         // enable to increase stake only on the previous stake vote
2051         Staker storage staker = proposal.stakers[_staker];
2052         if ((staker.amount > 0) && (staker.vote != _vote)) {
2053             return false;
2054         }
2055 
2056         uint256 amount = _amount;
2057         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2058         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2059         staker.amount = staker.amount.add(amount);
2060         //This is to prevent average downstakes calculation overflow
2061         //Note that any how GEN cap is 100000000 ether.
2062         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2063         require(proposal.totalStakes <= 0x100000000000000000000000000000000, "total stakes is too high");
2064 
2065         if (_vote == YES) {
2066             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2067         }
2068         staker.vote = _vote;
2069 
2070         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2071         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2072         return _execute(_proposalId);
2073     }
2074 
2075     /**
2076      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2077      * @param _proposalId id of the proposal
2078      * @param _voter used in case the vote is cast for someone else
2079      * @param _vote a value between 0 to and the proposal's number of choices.
2080      * @param _rep how many reputation the voter would like to stake for this vote.
2081      *         if  _rep==0 so the voter full reputation will be use.
2082      * @return true in case of proposal execution otherwise false
2083      * throws if proposal is not open or if it has been executed
2084      * NB: executes the proposal if a decision has been reached
2085      */
2086      // solhint-disable-next-line function-max-lines,code-complexity
2087     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2088         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2089         if (_execute(_proposalId)) {
2090             return true;
2091         }
2092 
2093         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2094         Proposal storage proposal = proposals[_proposalId];
2095 
2096         // Check voter has enough reputation:
2097         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2098         require(reputation > 0, "_voter must have reputation");
2099         require(reputation >= _rep, "reputation >= _rep");
2100         uint256 rep = _rep;
2101         if (rep == 0) {
2102             rep = reputation;
2103         }
2104         // If this voter has already voted, return false.
2105         if (proposal.voters[_voter].reputation != 0) {
2106             return false;
2107         }
2108         // The voting itself:
2109         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2110         //check if the current winningVote changed or there is a tie.
2111         //for the case there is a tie the current winningVote set to NO.
2112         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2113             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2114             proposal.winningVote == YES)) {
2115             if (proposal.state == ProposalState.Boosted &&
2116             // solhint-disable-next-line not-rely-on-time
2117                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2118                 proposal.state == ProposalState.QuietEndingPeriod) {
2119                 //quietEndingPeriod
2120                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2121                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2122                     proposal.state = ProposalState.QuietEndingPeriod;
2123                 }
2124                 // solhint-disable-next-line not-rely-on-time
2125                 proposal.times[1] = now;
2126             }
2127             proposal.winningVote = _vote;
2128         }
2129         proposal.voters[_voter] = Voter({
2130             reputation: rep,
2131             vote: _vote,
2132             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2133         });
2134         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2135             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2136             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2137             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2138         }
2139         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2140         return _execute(_proposalId);
2141     }
2142 
2143     /**
2144      * @dev _score return the proposal score (Confidence level)
2145      * For dual choice proposal S = (S+)/(S-)
2146      * @param _proposalId the ID of the proposal
2147      * @return uint256 proposal score as real number.
2148      */
2149     function _score(bytes32 _proposalId) internal view returns(uint256) {
2150         Proposal storage proposal = proposals[_proposalId];
2151         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2152         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2153     }
2154 
2155     /**
2156       * @dev _isVotable check if the proposal is votable
2157       * @param _proposalId the ID of the proposal
2158       * @return bool true or false
2159     */
2160     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2161         ProposalState pState = proposals[_proposalId].state;
2162         return ((pState == ProposalState.PreBoosted)||
2163                 (pState == ProposalState.Boosted)||
2164                 (pState == ProposalState.QuietEndingPeriod)||
2165                 (pState == ProposalState.Queued)
2166         );
2167     }
2168 }
2169 
2170 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2171 
2172 pragma solidity ^0.5.4;
2173 
2174 
2175 
2176 
2177 /**
2178  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2179  */
2180 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2181     using ECDSA for bytes32;
2182 
2183     // Digest describing the data the user signs according EIP 712.
2184     // Needs to match what is passed to Metamask.
2185     bytes32 public constant DELEGATION_HASH_EIP712 =
2186     keccak256(abi.encodePacked(
2187     "address GenesisProtocolAddress",
2188     "bytes32 ProposalId",
2189     "uint256 Vote",
2190     "uint256 AmountToStake",
2191     "uint256 Nonce"
2192     ));
2193 
2194     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2195 
2196     /**
2197      * @dev Constructor
2198      */
2199     constructor(IERC20 _stakingToken)
2200     public
2201     // solhint-disable-next-line no-empty-blocks
2202     GenesisProtocolLogic(_stakingToken) {
2203     }
2204 
2205     /**
2206      * @dev staking function
2207      * @param _proposalId id of the proposal
2208      * @param _vote  NO(2) or YES(1).
2209      * @param _amount the betting amount
2210      * @return bool true - the proposal has been executed
2211      *              false - otherwise.
2212      */
2213     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2214         return _stake(_proposalId, _vote, _amount, msg.sender);
2215     }
2216 
2217     /**
2218      * @dev stakeWithSignature function
2219      * @param _proposalId id of the proposal
2220      * @param _vote  NO(2) or YES(1).
2221      * @param _amount the betting amount
2222      * @param _nonce nonce value ,it is part of the signature to ensure that
2223               a signature can be received only once.
2224      * @param _signatureType signature type
2225               1 - for web3.eth.sign
2226               2 - for eth_signTypedData according to EIP #712.
2227      * @param _signature  - signed data by the staker
2228      * @return bool true - the proposal has been executed
2229      *              false - otherwise.
2230      */
2231     function stakeWithSignature(
2232         bytes32 _proposalId,
2233         uint256 _vote,
2234         uint256 _amount,
2235         uint256 _nonce,
2236         uint256 _signatureType,
2237         bytes calldata _signature
2238         )
2239         external
2240         returns(bool)
2241         {
2242         // Recreate the digest the user signed
2243         bytes32 delegationDigest;
2244         if (_signatureType == 2) {
2245             delegationDigest = keccak256(
2246                 abi.encodePacked(
2247                     DELEGATION_HASH_EIP712, keccak256(
2248                         abi.encodePacked(
2249                         address(this),
2250                         _proposalId,
2251                         _vote,
2252                         _amount,
2253                         _nonce)
2254                     )
2255                 )
2256             );
2257         } else {
2258             delegationDigest = keccak256(
2259                         abi.encodePacked(
2260                         address(this),
2261                         _proposalId,
2262                         _vote,
2263                         _amount,
2264                         _nonce)
2265                     ).toEthSignedMessageHash();
2266         }
2267         address staker = delegationDigest.recover(_signature);
2268         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2269         require(staker != address(0), "staker address cannot be 0");
2270         require(stakesNonce[staker] == _nonce);
2271         stakesNonce[staker] = stakesNonce[staker].add(1);
2272         return _stake(_proposalId, _vote, _amount, staker);
2273     }
2274 
2275     /**
2276      * @dev voting function
2277      * @param _proposalId id of the proposal
2278      * @param _vote NO(2) or YES(1).
2279      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2280      * @param _voter voter address
2281      * @return bool true - the proposal has been executed
2282      *              false - otherwise.
2283      */
2284     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2285     external
2286     votable(_proposalId)
2287     returns(bool) {
2288         Proposal storage proposal = proposals[_proposalId];
2289         Parameters memory params = parameters[proposal.paramsHash];
2290         address voter;
2291         if (params.voteOnBehalf != address(0)) {
2292             require(msg.sender == params.voteOnBehalf);
2293             voter = _voter;
2294         } else {
2295             voter = msg.sender;
2296         }
2297         return internalVote(_proposalId, voter, _vote, _amount);
2298     }
2299 
2300   /**
2301    * @dev Cancel the vote of the msg.sender.
2302    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2303    * This function is here in order to comply to the IntVoteInterface .
2304    */
2305     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2306        //this is not allowed
2307         return;
2308     }
2309 
2310     /**
2311       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2312       * @param _proposalId the id of the proposal
2313       * @return bool true - the proposal has been executed
2314       *              false - otherwise.
2315      */
2316     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2317         return _execute(_proposalId);
2318     }
2319 
2320   /**
2321     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2322     * @return uint256 that contains number of choices
2323     */
2324     function getNumberOfChoices(bytes32) external view returns(uint256) {
2325         return NUM_OF_CHOICES;
2326     }
2327 
2328     /**
2329       * @dev getProposalTimes returns proposals times variables.
2330       * @param _proposalId id of the proposal
2331       * @return proposals times array
2332       */
2333     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2334         return proposals[_proposalId].times;
2335     }
2336 
2337     /**
2338      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2339      * @param _proposalId the ID of the proposal
2340      * @param _voter the address of the voter
2341      * @return uint256 vote - the voters vote
2342      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2343      */
2344     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2345         Voter memory voter = proposals[_proposalId].voters[_voter];
2346         return (voter.vote, voter.reputation);
2347     }
2348 
2349     /**
2350     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2351     * @param _proposalId the ID of the proposal
2352     * @param _choice the index in the
2353     * @return voted reputation for the given choice
2354     */
2355     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2356         return proposals[_proposalId].votes[_choice];
2357     }
2358 
2359     /**
2360     * @dev isVotable check if the proposal is votable
2361     * @param _proposalId the ID of the proposal
2362     * @return bool true or false
2363     */
2364     function isVotable(bytes32 _proposalId) external view returns(bool) {
2365         return _isVotable(_proposalId);
2366     }
2367 
2368     /**
2369     * @dev proposalStatus return the total votes and stakes for a given proposal
2370     * @param _proposalId the ID of the proposal
2371     * @return uint256 preBoostedVotes YES
2372     * @return uint256 preBoostedVotes NO
2373     * @return uint256 total stakes YES
2374     * @return uint256 total stakes NO
2375     */
2376     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2377         return (
2378                 proposals[_proposalId].preBoostedVotes[YES],
2379                 proposals[_proposalId].preBoostedVotes[NO],
2380                 proposals[_proposalId].stakes[YES],
2381                 proposals[_proposalId].stakes[NO]
2382         );
2383     }
2384 
2385   /**
2386     * @dev getProposalOrganization return the organizationId for a given proposal
2387     * @param _proposalId the ID of the proposal
2388     * @return bytes32 organization identifier
2389     */
2390     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2391         return (proposals[_proposalId].organizationId);
2392     }
2393 
2394     /**
2395       * @dev getStaker return the vote and stake amount for a given proposal and staker
2396       * @param _proposalId the ID of the proposal
2397       * @param _staker staker address
2398       * @return uint256 vote
2399       * @return uint256 amount
2400     */
2401     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2402         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2403     }
2404 
2405     /**
2406       * @dev voteStake return the amount stakes for a given proposal and vote
2407       * @param _proposalId the ID of the proposal
2408       * @param _vote vote number
2409       * @return uint256 stake amount
2410     */
2411     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2412         return proposals[_proposalId].stakes[_vote];
2413     }
2414 
2415   /**
2416     * @dev voteStake return the winningVote for a given proposal
2417     * @param _proposalId the ID of the proposal
2418     * @return uint256 winningVote
2419     */
2420     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2421         return proposals[_proposalId].winningVote;
2422     }
2423 
2424     /**
2425       * @dev voteStake return the state for a given proposal
2426       * @param _proposalId the ID of the proposal
2427       * @return ProposalState proposal state
2428     */
2429     function state(bytes32 _proposalId) external view returns(ProposalState) {
2430         return proposals[_proposalId].state;
2431     }
2432 
2433    /**
2434     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2435     * @return bool true or false
2436     */
2437     function isAbstainAllow() external pure returns(bool) {
2438         return false;
2439     }
2440 
2441     /**
2442      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2443      * @return min - minimum number of choices
2444                max - maximum number of choices
2445      */
2446     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2447         return (YES, NO);
2448     }
2449 
2450     /**
2451      * @dev score return the proposal score
2452      * @param _proposalId the ID of the proposal
2453      * @return uint256 proposal score.
2454      */
2455     function score(bytes32 _proposalId) public view returns(uint256) {
2456         return  _score(_proposalId);
2457     }
2458 }
2459 
2460 // File: contracts/votingMachines/VotingMachineCallbacks.sol
2461 
2462 pragma solidity ^0.5.4;
2463 
2464 
2465 
2466 
2467 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2468 
2469     struct ProposalInfo {
2470         uint256 blockNumber; // the proposal's block number
2471         Avatar avatar; // the proposal's avatar
2472     }
2473 
2474     modifier onlyVotingMachine(bytes32 _proposalId) {
2475         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
2476         _;
2477     }
2478 
2479     // VotingMaching  ->  proposalId  ->  ProposalInfo
2480     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
2481 
2482     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2483     external
2484     onlyVotingMachine(_proposalId)
2485     returns(bool)
2486     {
2487         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2488         if (avatar == Avatar(0)) {
2489             return false;
2490         }
2491         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2492     }
2493 
2494     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2495     external
2496     onlyVotingMachine(_proposalId)
2497     returns(bool)
2498     {
2499         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2500         if (avatar == Avatar(0)) {
2501             return false;
2502         }
2503         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2504     }
2505 
2506     function stakingTokenTransfer(
2507         IERC20 _stakingToken,
2508         address _beneficiary,
2509         uint256 _amount,
2510         bytes32 _proposalId)
2511     external
2512     onlyVotingMachine(_proposalId)
2513     returns(bool)
2514     {
2515         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2516         if (avatar == Avatar(0)) {
2517             return false;
2518         }
2519         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2520     }
2521 
2522     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2523         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2524         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
2525             return 0;
2526         }
2527         return _stakingToken.balanceOf(address(avatar));
2528     }
2529 
2530     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2531         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2532         if (proposal.avatar == Avatar(0)) {
2533             return 0;
2534         }
2535         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2536     }
2537 
2538     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2539         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2540         if (proposal.avatar == Avatar(0)) {
2541             return 0;
2542         }
2543         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2544     }
2545 }
2546 
2547 // File: contracts/universalSchemes/UpgradeScheme.sol
2548 
2549 pragma solidity ^0.5.4;
2550 
2551 
2552 
2553 
2554 
2555 
2556 /**
2557  * @title A scheme to manage the upgrade of an organization.
2558  * @dev The scheme is used to upgrade the controller of an organization to a new controller.
2559  */
2560 
2561 contract UpgradeScheme is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2562 
2563     event NewUpgradeProposal(
2564         address indexed _avatar,
2565         bytes32 indexed _proposalId,
2566         address indexed _intVoteInterface,
2567         address _newController,
2568         string _descriptionHash
2569     );
2570 
2571     event ChangeUpgradeSchemeProposal(
2572         address indexed _avatar,
2573         bytes32 indexed _proposalId,
2574         address indexed _intVoteInterface,
2575         address _newUpgradeScheme,
2576         bytes32 _params,
2577         string _descriptionHash
2578     );
2579 
2580     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
2581     event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);
2582 
2583     // Details of an upgrade proposal:
2584     struct UpgradeProposal {
2585         address upgradeContract; // Either the new controller we upgrade to, or the new upgrading scheme.
2586         bytes32 params; // Params for the new upgrading scheme.
2587         uint256 proposalType; // 1: Upgrade controller, 2: change upgrade scheme.
2588     }
2589 
2590     // A mapping from the organization's (Avatar) address to the saved data of the organization:
2591     mapping(address=>mapping(bytes32=>UpgradeProposal)) public organizationsProposals;
2592 
2593     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2594     struct Parameters {
2595         bytes32 voteParams;
2596         IntVoteInterface intVote;
2597     }
2598 
2599     mapping(bytes32=>Parameters) public parameters;
2600 
2601     /**
2602     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2603     * @param _proposalId the ID of the voting in the voting machine
2604     * @param _param a parameter of the voting result, 1 yes and 2 is no.
2605     */
2606     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
2607         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2608         UpgradeProposal memory proposal = organizationsProposals[address(avatar)][_proposalId];
2609         require(proposal.proposalType != 0);
2610         delete organizationsProposals[address(avatar)][_proposalId];
2611         emit ProposalDeleted(address(avatar), _proposalId);
2612         // Check if vote was successful:
2613         if (_param == 1) {
2614 
2615         // Define controller and get the params:
2616             ControllerInterface controller = ControllerInterface(avatar.owner());
2617         // Upgrading controller:
2618             if (proposal.proposalType == 1) {
2619                 require(controller.upgradeController(proposal.upgradeContract, avatar));
2620             }
2621 
2622         // Changing upgrade scheme:
2623             if (proposal.proposalType == 2) {
2624                 bytes4 permissions = controller.getSchemePermissions(address(this), address(avatar));
2625                 require(
2626                 controller.registerScheme(proposal.upgradeContract, proposal.params, permissions, address(avatar))
2627                 );
2628                 if (proposal.upgradeContract != address(this)) {
2629                     require(controller.unregisterSelf(address(avatar)));
2630                 }
2631             }
2632         }
2633         emit ProposalExecuted(address(avatar), _proposalId, _param);
2634         return true;
2635     }
2636 
2637     /**
2638     * @dev hash the parameters, save them if necessary, and return the hash value
2639     */
2640     function setParameters(
2641         bytes32 _voteParams,
2642         IntVoteInterface _intVote
2643     ) public returns(bytes32)
2644     {
2645         bytes32 paramsHash = getParametersHash(_voteParams, _intVote);
2646         parameters[paramsHash].voteParams = _voteParams;
2647         parameters[paramsHash].intVote = _intVote;
2648         return paramsHash;
2649     }
2650 
2651     /**
2652     * @dev return a hash of the given parameters
2653     */
2654     function getParametersHash(
2655         bytes32 _voteParams,
2656         IntVoteInterface _intVote
2657     ) public pure returns(bytes32)
2658     {
2659         return  (keccak256(abi.encodePacked(_voteParams, _intVote)));
2660     }
2661 
2662     /**
2663     * @dev propose an upgrade of the organization's controller
2664     * @param _avatar avatar of the organization
2665     * @param _newController address of the new controller that is being proposed
2666     * @param _descriptionHash proposal description hash
2667     * @return an id which represents the proposal
2668     */
2669     function proposeUpgrade(Avatar _avatar, address _newController, string memory _descriptionHash)
2670         public
2671         returns(bytes32)
2672     {
2673         Parameters memory params = parameters[getParametersFromController(_avatar)];
2674         bytes32 proposalId = params.intVote.propose(2, params.voteParams, msg.sender, address(_avatar));
2675         UpgradeProposal memory proposal = UpgradeProposal({
2676             proposalType: 1,
2677             upgradeContract: _newController,
2678             params: bytes32(0)
2679         });
2680         organizationsProposals[address(_avatar)][proposalId] = proposal;
2681         emit NewUpgradeProposal(
2682         address(_avatar),
2683         proposalId,
2684         address(params.intVote),
2685         _newController,
2686         _descriptionHash
2687         );
2688         proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({
2689             blockNumber:block.number,
2690             avatar:_avatar
2691         });
2692         return proposalId;
2693     }
2694 
2695     /**
2696     * @dev propose to replace this scheme by another upgrading scheme
2697     * @param _avatar avatar of the organization
2698     * @param _scheme address of the new upgrading scheme
2699     * @param _params the parameters of the new upgrading scheme
2700     * @param _descriptionHash proposal description hash
2701     * @return an id which represents the proposal
2702     */
2703     function proposeChangeUpgradingScheme(
2704         Avatar _avatar,
2705         address _scheme,
2706         bytes32 _params,
2707         string memory _descriptionHash
2708     )
2709         public
2710         returns(bytes32)
2711     {
2712         Parameters memory params = parameters[getParametersFromController(_avatar)];
2713         IntVoteInterface intVote = params.intVote;
2714         bytes32 proposalId = intVote.propose(2, params.voteParams, msg.sender, address(_avatar));
2715         require(organizationsProposals[address(_avatar)][proposalId].proposalType == 0);
2716 
2717         UpgradeProposal memory proposal = UpgradeProposal({
2718             proposalType: 2,
2719             upgradeContract: _scheme,
2720             params: _params
2721         });
2722         organizationsProposals[address(_avatar)][proposalId] = proposal;
2723 
2724         emit ChangeUpgradeSchemeProposal(
2725             address(_avatar),
2726             proposalId,
2727             address(params.intVote),
2728             _scheme,
2729             _params,
2730             _descriptionHash
2731         );
2732         proposalsInfo[address(intVote)][proposalId] = ProposalInfo({
2733             blockNumber:block.number,
2734             avatar:_avatar
2735         });
2736         return proposalId;
2737     }
2738 }
