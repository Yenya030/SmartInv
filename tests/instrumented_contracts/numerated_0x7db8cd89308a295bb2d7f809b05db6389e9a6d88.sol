1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
21     },
22     "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
30     },
31     "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
33     },
34     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
36     },
37     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
39     },
40     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
42     },
43     "lib/operator-filter-registry/src/DefaultOperatorFilterer.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n */\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
45     },
46     "lib/operator-filter-registry/src/IOperatorFilterRegistry.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
48     },
49     "lib/operator-filter-registry/src/OperatorFilterer.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
51     },
52     "src/ERC721Y.sol": {
53       "content": "// SPDX-License-Identifier: Unlicense\n// Creator: 0xYeety/YEETY.eth - Co-Founder/CTO, Virtue Labs\n\npragma solidity ^0.8.17;\n\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Address.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Context.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\n\ncontract ERC721Y is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using Address for address;\n    using Strings for uint256;\n\n    uint256 private currentIndex = 1;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Base URI\n    string internal _basedURI;\n    string internal _preRevealURI;\n\n    mapping(uint => uint) private _availableTokens;\n    uint256 private _numAvailableTokens;\n    uint256 immutable _maxSupply;\n\n    struct MintInfo {\n        address minter;\n        uint64 timeMinted;\n    }\n\n    struct TokenInfo {\n        address owner;\n        uint96 auxData;\n    }\n\n    mapping(uint256 => MintInfo) private _minters;\n//    mapping(uint256 => address) private _ownerships;\n    mapping(uint256 => TokenInfo) private _ownerships;\n    mapping(address => uint256) private _balances;\n    mapping(uint256 => MintInfo) private _mintOrdering;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 maxTokens_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _maxSupply = maxTokens_;\n        _numAvailableTokens = maxTokens_;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n    **/\n    function totalSupply() public view override returns (uint256) {\n        return _maxSupply - _numAvailableTokens;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        require(index > 0, \"i0\");\n        uint256 pseudoIndex = index - 1;\n        uint256 supply = totalSupply();\n        require(pseudoIndex < supply, \"g\");\n        uint256 curIndex = 0;\n        for (uint256 i = 0; i < _maxSupply; i++) {\n            if (_ownerships[i].owner != address(0)) {\n                if (curIndex == pseudoIndex) {\n//                    return i;\n                    return (i + 1);\n                }\n                curIndex++;\n            }\n        }\n        revert(\"u\");\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        require(index < balanceOf(owner), \"b\");\n        uint256 curIndex = 0;\n        for (uint256 i = 0; i < _maxSupply; i++) {\n            if (_ownerships[i].owner == owner) {\n                if (curIndex == index) {\n//                    return i;\n                    return (i + 1);\n                }\n                curIndex++;\n            }\n        }\n        revert(\"u\");\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n        interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        interfaceId == type(IERC721Enumerable).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"0\");\n        return uint256(_balances[owner]);\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"e\");\n        return _ownerships[tokenId - 1].owner;\n    }\n\n    function gadOf(uint256 tokenId) internal view returns (uint256) {\n        require(_exists(tokenId), \"e\");\n        return uint256(_ownerships[tokenId - 1].auxData);\n    }\n\n    function setGAD(uint256 tokenId, uint256 newGAD) internal {\n        require(ownerOf(tokenId) == msg.sender, \"e\");\n        _ownerships[tokenId - 1].auxData = uint96(newGAD);\n    }\n\n    /**\n     * @dev gets the address that minted a token\n    **/\n    function minterOf(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"e\");\n        return _minters[tokenId - 1].minter;\n    }\n\n    function mintedAt(uint256 tokenId) public view returns (uint64) {\n        require(_exists(tokenId), \"e\");\n        return _minters[tokenId - 1].timeMinted;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"z\");\n\n        if (bytes(_basedURI).length > 0) {\n            return string(abi.encodePacked(_basedURI, \"/\", tokenId.toString(), \".json\"));\n        }\n        else {\n            return _preRevealURI;\n        }\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `basedURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function basedURI() public view virtual returns (string memory) {\n        return _basedURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBasedURI(string memory basedURI_) internal virtual {\n        _basedURI = basedURI_;\n    }\n\n    function preRevealURI() public view virtual returns (string memory) {\n        return _preRevealURI;\n    }\n\n    function _setPreRevealURI(string memory preRevealURI_) internal virtual {\n        _preRevealURI = preRevealURI_;\n    }\n\n    /**\n    * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Y.ownerOf(tokenId);\n        require(to != owner, \"o\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"a\"\n        );\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"a\");\n        return _tokenApprovals[tokenId - 1];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"a\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function setApprovalForSelf(address operator, bool approved) internal {\n        _operatorApprovals[address(this)][operator] = approved;\n        emit ApprovalForAll(address(this), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"z\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        if (tokenId == 0) { return false; }\n        return (_ownerships[tokenId - 1].owner != address(0));\n    }\n\n    /******************/\n\n    function _mintIdWithoutBalanceUpdate(address to, uint256 tokenId, uint256 gad) private {\n        _ownerships[tokenId].owner = to;\n        _ownerships[tokenId].auxData = uint96(gad);\n        _minters[tokenId].minter = to;\n        _minters[tokenId].timeMinted = uint64(block.timestamp);\n        emit Transfer(address(0), to, tokenId + 1);\n    }\n\n    function _mintRandom(address to, uint _quantity, uint256 gad) internal virtual returns (uint256[] memory) {\n        require(to != address(0), \"0\");\n        require(_quantity > 0, \"1\");\n\n        uint256[] memory toReturn = new uint256[](_quantity);\n\n        uint updatedNumAvailableTokens = _numAvailableTokens;\n\n        uint256 randomNum;\n        for (uint256 i = 0; i < _quantity; i++) { // Do this ++ unchecked?\n            uint256 modPos = i%16;\n            if (modPos == 0) {\n                randomNum = getRandomAvailableTokenId(to, updatedNumAvailableTokens);\n            }\n\n            uint256 randomIndex = (randomNum>>(modPos*16)) % updatedNumAvailableTokens;\n            uint256 tokenId = getAvailableTokenAtIndex(randomIndex, updatedNumAvailableTokens);\n\n            _mintIdWithoutBalanceUpdate(to, tokenId, gad);\n            toReturn[i] = (tokenId + 1);\n            updatedNumAvailableTokens--;\n        }\n\n        _numAvailableTokens = updatedNumAvailableTokens;\n        _balances[to] += _quantity;\n\n        _mintOrdering[currentIndex].minter = to;\n        _mintOrdering[currentIndex].timeMinted = uint64(block.timestamp);\n        currentIndex += _quantity;\n\n        return toReturn;\n    }\n\n    function getRandomAvailableTokenId(\n        address to,\n        uint updatedNumAvailableTokens\n    ) internal view returns (uint256) {\n        uint256 randomNum = uint256(\n            keccak256(\n                abi.encode(\n                    to,\n                    tx.gasprice,\n                    block.number,\n                    block.timestamp,\n                    block.difficulty,\n                    blockhash(block.number - 1),\n                    address(this),\n                    updatedNumAvailableTokens\n                )\n            )\n        );\n        return randomNum;\n//        uint256 randomIndex = randomNum % updatedNumAvailableTokens;\n//        return getAvailableTokenAtIndex(randomIndex, updatedNumAvailableTokens);\n    }\n\n    // Implements https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle. Code taken from CryptoPhunksV2\n    function getAvailableTokenAtIndex(\n        uint256 indexToUse,\n        uint256 updatedNumAvailableTokens\n    ) internal returns (uint256) {\n        uint256 valAtIndex = _availableTokens[indexToUse];\n        uint256 result;\n        if (valAtIndex == 0) {\n            // This means the index itself is still an available token\n            result = indexToUse;\n        } else {\n            // This means the index itself is not an available token, but the val at that index is.\n            result = valAtIndex;\n        }\n\n        uint256 lastIndex = updatedNumAvailableTokens - 1;\n        if (indexToUse != lastIndex) {\n            // Replace the value at indexToUse, now that it's been used.\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\n            uint256 lastValInArray = _availableTokens[lastIndex];\n            if (lastValInArray == 0) {\n                // This means the index itself is still an available token\n                _availableTokens[indexToUse] = lastIndex;\n            } else {\n                // This means the index itself is not an available token, but the val at that index is.\n                _availableTokens[indexToUse] = lastValInArray;\n                // Gas refund courtsey of @dievardump\n                delete _availableTokens[lastIndex];\n            }\n        }\n\n        return result;\n    }\n\n    function getMintOrderInfoByIndex(uint256 index) private view returns (MintInfo memory) {\n        if (index > totalSupply()) {\n            return _mintOrdering[0];\n        }\n\n        for (uint256 i = index; i > 0; i--) {\n            if (_mintOrdering[i].minter != address(0)) {\n                return _mintOrdering[i];\n            }\n        }\n\n        return _mintOrdering[0];\n\n//        revert(\"u\");\n    }\n\n    function getMinterByOrderIndex(uint256 index) public view returns (address) {\n        MintInfo memory info = getMintOrderInfoByIndex(index);\n        return info.minter;\n    }\n\n    function getMintTimeByOrderIndex(uint256 index) public view returns (uint64) {\n        MintInfo memory info = getMintOrderInfoByIndex(index);\n        return info.timeMinted;\n    }\n\n    /******************/\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        address prevOwnership = ownerOf(tokenId);\n\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership ||\n        getApproved(tokenId) == _msgSender() ||\n        isApprovedForAll(prevOwnership, _msgSender()));\n\n        require(isApprovedOrOwner, \"a\");\n        require(prevOwnership == from, \"o\");\n        require(to != address(0), \"0\");\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _ownerships[tokenId - 1].owner = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId - 1] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /******************/\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"z\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
54     },
55     "src/Skelephunks.sol": {
56       "content": "// SPDX-License-Identifier: Unlicense\n// Creator: 0xYeety/YEETY.eth - Co-Founder/CTO, Virtue Labs\n\n// * ————————————————————————————————————————————————————————————————————————————————— *\n// |                                                                                   |\n// |    SSSSS K    K EEEEEE L      EEEEEE PPPPP  H    H U    U N     N K    K  SSSSS   |\n// |   S      K   K  E      L      E      P    P H    H U    U N N   N K   K  S        |\n// |    SSSS  KKKK   EEE    L      EEE    PPPPP  HHHHHH U    U N  N  N KKKK    SSSS    |\n// |        S K   K  E      L      E      P      H    H U    U N   N N K   K       S   |\n// |   SSSSS  K    K EEEEEE LLLLLL EEEEEE P      H    H  UUUU  N     N K    K SSSSS    |\n// |                                                                                   |\n// | * AN ETHEREUM-BASED INDENTITY PLATFORM BROUGHT TO YOU BY NEUROMANTIC INDUSTRIES * |\n// |                                                                                   |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@                              |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@                              |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,,,,,@@@                           |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,@@@@@@,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,@@@@@@,,,,,,,,,,,,,,,,,@@@                        |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,,,,,@@@                           |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,@@@@@@@                           |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@@@@                           |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@@@@                           |\n// |                             @@@@,,,,,,,,,,,,,,,,@@@@,,,@@@                        |\n// |                                 @@@@@@@@@@@@@@@@,,,,@@@                           |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                              @@@,,,,@@@                           |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                                                                   |\n// |  * ————————————————————————————————————————————————————————————————————\n\npragma solidity ^0.8.17;\n\nimport \"./ERC721Y.sol\";\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"lib/operator-filter-registry/src/DefaultOperatorFilterer.sol\";\n\ncontract Skelephunks is ERC721Y, Ownable, DefaultOperatorFilterer {\n    using Address for address;\n    using Strings for uint256;\n    string public PROVENANCE;\n    bool provenanceSet;\n\n    mapping(address => uint256) public numMinted;\n\n    mapping(uint256 => string) private _gdToPath;\n\n    /*************************************************************************/\n    /*** PAYMENT VARIABLES (Start) *******************************************/\n    address[] public payees;\n    mapping(address => uint256) private paymentInfo;\n    uint256 totalReceived = 0;\n    mapping(address => uint256) amountsWithdrawn;\n    bool canEmergencyWithdrawTokens = true;\n\n    modifier onlyPayee() {\n        _isPayee();\n        _;\n    }\n    function _isPayee() internal view virtual {\n        require(paymentInfo[msg.sender] > 0, \"not a payee\");\n    }\n    function isPayee(address addr) public view returns (bool) {\n        return (paymentInfo[addr] > 0);\n    }\n    /*** PAYMENT VARIABLES (End) *******************************************/\n    /***********************************************************************/\n\n    uint256 public mintPrice = 0.033 ether;\n    uint256 private maxPaidTokens = 10;\n\n    enum MintStatus {\n        PreMint,\n        Phunks,\n        AllowList,\n        Public,\n        PublicExtended,\n        ReserveOnly,\n        Finished\n    }\n\n    MintStatus public mintStatus = MintStatus.PreMint;\n    bool public paused = false;\n\n    uint256 public maxPossibleSupply = 9999;\n    uint256 public maxMintableSupply = 6666;\n    uint256 public numMintedRegular = 0;\n    uint256 public maxReserveSupply = 3333;\n    uint256 public numMintedReserve = 0;\n    uint256 private _maxMintsPerWallet;\n\n    string collectionDescription = \"Skelephunks is a universal, adaptive PFP for the Ethereum community.\";\n    string collectionImg = \"\";\n    string externalLink = \"https://skelephunks.com\";\n\n//    mapping(uint256 => uint256) private _genderDirection;\n\n    bytes32 public phunksMerkleRoot = 0x2df951fbc5be4633d24a81d65bfa4cf92133f3ada0d2a884f39955bd22444b24;\n    uint256 public maxPhunkClaims = 105;\n\n    bytes32 public merkleRoot = 0xdb815420d65ef8b0dec059847253b71b167965c78bd17b5a961dc8688ded7cfd;\n    uint256 public maxAllowlistClaims = 1561;\n\n    mapping(address => uint256) private _claimsInfo;\n    mapping(address => uint256) private _claimTypes;\n\n    function phunkClaimsMade() public view returns (uint256) {\n        return _claimsInfo[address(0)]%(1<<128);\n    }\n\n    function allowlistClaimsMade() public view returns (uint256) {\n        return _claimsInfo[address(0)]>>128;\n    }\n\n    function phunkListClaimed(address addr) public view returns (bool) {\n        require(addr != address(0), \"0\");\n        return ((_claimsInfo[addr]%2) == 1);\n    }\n\n    function allowlistClaimed(address addr) public view returns (bool) {\n        require(addr != address(0), \"0\");\n        return ((_claimsInfo[addr]>>1) == 1);\n    }\n\n    mapping(address => bool) private _reserveAuths;\n    address public keysContract;\n    uint256 public keyRedemptionAmt = 3;\n\n    modifier onlyReserveAuth() {\n        require(getReserveAuthStatus(msg.sender), \"ra\");\n        _;\n    }\n\n    bool private royaltySwitch = true;\n    modifier onlyAllowedOperator(address from) virtual override {\n        if (royaltySwitch) {\n            if (from != msg.sender) {\n                _checkFilterOperator(msg.sender);\n            }\n        }\n        _;\n    }\n    modifier onlyAllowedOperatorApproval(address operator) virtual override {\n        if (royaltySwitch) {\n            _checkFilterOperator(operator);\n        }\n        _;\n    }\n\n    bool public preMintLocked = false;\n\n    //////////\n\n    constructor (\n        string memory name_,\n        string memory symbol_,\n        uint256 maxMintsPerWallet_,\n        address[] memory payees_,\n        uint256[] memory basisPoints_\n    ) ERC721Y(name_, symbol_, maxPossibleSupply) {\n        _maxMintsPerWallet = maxMintsPerWallet_;\n\n        require(payees_.length == basisPoints_.length, \"l\");\n        payees = payees_;\n        for (uint256 i = 0; i < payees_.length; i++) {\n            paymentInfo[payees_[i]] = basisPoints_[i];\n        }\n\n        _gdToPath[0] = \"phunk/male\";\n        _gdToPath[1] = \"phunk/female\";\n        _gdToPath[2] = \"punk/male\";\n        _gdToPath[3] = \"punk/female\";\n    }\n\n    //////////\n\n    function flipPaused() public onlyOwner {\n        paused = !paused;\n    }\n\n    function setMintStatus(MintStatus newMintStatus) public onlyOwner {\n        require(newMintStatus != MintStatus.PreMint && mintStatus != MintStatus.Finished, \"ms\");\n        mintStatus = newMintStatus;\n    }\n\n    function preMint(\n        address[] calldata recipients,\n        uint256[] calldata numsToMint,\n        uint256[] calldata gds,\n        bool lock\n    ) public onlyOwner {\n        require(!preMintLocked, \"pml\");\n        for (uint256 i = 0; i < numsToMint.length; i++) {\n            require(gds[i] < 4, \"bad gad\");\n            _mintMain(recipients[i], numsToMint[i], 0, gds[i], false);\n        }\n        preMintLocked = lock;\n    }\n\n    function min(uint256 x, uint256 y) private pure returns (uint256) {\n        if (x < y) {\n            return x;\n        }\n\n        return y;\n    }\n\n    function _mintClaimsMade(address minter) private view returns (uint256) {\n        return _claimTypes[minter]%(1<<128);\n    }\n\n    function _otherClaimsMade(address minter) private view returns (uint256) {\n        return _claimTypes[minter]>>128;\n    }\n\n    function totalClaimsMade(address minter) public view returns (uint256) {\n        return _mintClaimsMade(minter) + _otherClaimsMade(minter);\n    }\n\n    function phunkClaimsRemain() public view returns (bool) {\n        return (phunkClaimsMade() < maxPhunkClaims);\n    }\n\n    function eligibleForPhunk(\n        address minter,\n        bytes32[] calldata _proof\n    ) public view returns (bool) {\n        return ((!(phunkListClaimed(minter))) && MerkleProof.verify(\n            _proof, phunksMerkleRoot, keccak256(abi.encodePacked(minter))\n        ) && phunkClaimsRemain());\n    }\n\n    function allowlistClaimsRemain() public view returns (bool) {\n        return (allowlistClaimsMade() < maxAllowlistClaims);\n    }\n\n    function eligibleForAllowlist(\n        address minter,\n        bytes32[] calldata _proof\n    ) public view returns (bool) {\n        return (MerkleProof.verify(\n            _proof, merkleRoot, keccak256(abi.encodePacked(minter))\n        ) && allowlistClaimsRemain());\n    }\n\n    //////////\n\n    function maxMintsInternal(\n        address wallet,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) private view returns (uint256) {\n        uint256 mms = maxMintableSupply;\n        uint256 nmr = numMintedRegular;\n        uint256 _mmpw = _maxMintsPerWallet;\n\n        bool efp = eligibleForPhunk(wallet, _phunkProof);\n        bool efal = eligibleForAllowlist(wallet, _alProof);\n\n        if (mintStatus == MintStatus.PreMint) {\n            return 0;\n        }\n        else if (mintStatus == MintStatus.Phunks) {\n            return (efp ? 1 : 0);\n        }\n        else if (mintStatus == MintStatus.AllowList) {\n            if (efal) {\n                return min(_mmpw - numMinted[wallet], mms - nmr);\n            }\n            else if (efp) { return 1; }\n            else { return 0; }\n        }\n        else if (mintStatus == MintStatus.Public) {\n            return min(_mmpw - numMinted[wallet], mms - nmr);\n        }\n        else if (mintStatus == MintStatus.PublicExtended) {\n            return (mms - nmr);\n        }\n        else if (mintStatus == MintStatus.ReserveOnly) {\n            return (efal ? 1 : 0) +\n            (efp ? 1 : 0);\n        }\n\n        return 0;\n    }\n\n    function maxMintsPerWallet(\n        address wallet,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) public view returns (uint256) {\n        return min(100, maxMintsInternal(wallet, _phunkProof, _alProof));\n    }\n\n    function walletCanMint(\n        address wallet,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) public view returns (bool) {\n        return (maxMintsPerWallet(wallet, _phunkProof, _alProof) > 0);\n    }\n\n    function _generalGetNumFree(\n        address wallet,\n        uint256 quantity,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) private view returns (uint256) {\n        uint256 toReturn;\n\n        if (quantity == maxMintsPerWallet(wallet, _phunkProof, _alProof)) {\n            toReturn = 3 - _mintClaimsMade(wallet);\n            toReturn = min(toReturn, quantity);\n        }\n        else {\n            toReturn = (eligibleForPhunk(wallet, _phunkProof) ? 1 : 0) +\n                ((eligibleForAllowlist(wallet, _alProof) && (!(allowlistClaimed(wallet)))) ? 1 : 0);\n            toReturn = min(toReturn, quantity);\n        }\n\n        return toReturn;\n    }\n\n    function getNumFree(\n        address wallet,\n        uint256 quantity,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) public view returns (uint256) {\n        bool efp = eligibleForPhunk(wallet, _phunkProof);\n        uint256 ggnf = _generalGetNumFree(wallet, quantity, _phunkProof, _alProof);\n\n        if (mintStatus == MintStatus.PreMint) {\n            return 0;\n        }\n        else if (mintStatus == MintStatus.Phunks) {\n            return (efp ? 1 : 0);\n        }\n        else if (mintStatus == MintStatus.AllowList) {\n            if (eligibleForAllowlist(wallet, _alProof)) {\n                return ggnf;\n            }\n            else if (efp) { return 1; }\n            else { return 0; }\n        }\n        else if (mintStatus == MintStatus.Public || mintStatus == MintStatus.PublicExtended) {\n            return ggnf;\n        }\n        else if (mintStatus == MintStatus.ReserveOnly) {\n            return maxMintsInternal(wallet, _phunkProof, _alProof);\n        }\n\n        return 0;\n    }\n\n    function getMintCost(\n        address wallet,\n        uint256 quantity,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) public view returns (uint256) {\n        uint256 numFree = getNumFree(wallet, quantity, _phunkProof, _alProof);\n\n        return mintPrice*(quantity - numFree);\n    }\n\n    //////////\n\n    function _mintMain(address _to, uint256 _quantity, uint256 _numFree, uint256 _gd, bool isReserve) private {\n        require(!paused, \"p\");\n        require(_gd < 4, \"v\");\n\n        _mintRandom(_to, _quantity, _gd);\n\n        numMinted[_to] += _quantity;\n\n        if (isReserve) {\n            numMintedReserve += _quantity;\n        }\n        else {\n            numMintedRegular += _quantity - _numFree;\n            numMintedReserve += _numFree;\n        }\n\n        if (numMintedRegular == maxMintableSupply) {\n            mintStatus = MintStatus.ReserveOnly;\n        }\n\n        if (mintStatus == MintStatus.ReserveOnly) {\n            if (numMintedReserve == maxReserveSupply) {\n                mintStatus = MintStatus.Finished;\n            }\n        }\n    }\n\n    function mint(\n        uint256 _quantity,\n        uint256 genderDirection,\n        bytes32[] calldata _phunkProof,\n        bytes32[] calldata _alProof\n    ) public payable {\n        require(msg.sender == tx.origin, \"no contracts fam\");\n        uint256 numFree = getNumFree(msg.sender, _quantity, _phunkProof, _alProof);\n        require(msg.value == mintPrice*(_quantity - numFree), \"poor\");\n        require(_quantity <= maxMintsPerWallet(msg.sender, _phunkProof, _alProof), \"mmpw\");\n        require(numMintedRegular + (_quantity - numFree) <= maxMintableSupply, \"mms\");\n        require(numMintedReserve + numFree <= maxReserveSupply, \"mrs\");\n\n        uint256 numFreeCopy = numFree;\n        if (numFreeCopy > 0) {\n            if (eligibleForPhunk(msg.sender, _phunkProof)) {\n                _claimsInfo[msg.sender] += 1;\n                _claimTypes[msg.sender] += 1;\n                numFreeCopy -= 1;\n\n                _claimsInfo[address(0)] += 1;\n            }\n        }\n        if (numFreeCopy > 0) {\n            if (eligibleForAllowlist(msg.sender, _alProof) && (!allowlistClaimed(msg.sender))) {\n                _claimsInfo[msg.sender] += 2;\n                _claimTypes[msg.sender] += 1;\n                numFreeCopy -= 1;\n\n                _claimsInfo[address(0)] += 1<<128;\n            }\n        }\n        _claimTypes[msg.sender] += numFreeCopy;\n\n\n        totalReceived += msg.value;\n        _mintMain(msg.sender, _quantity, numFree, genderDirection, false);\n    }\n\n    function mintReserve(\n        address _to,\n        uint256 _quantity,\n        uint256 genderDirection\n    ) public onlyReserveAuth {\n        _mintReserve(_to, _quantity, genderDirection);\n    }\n\n    function redeemKeyForSkelephunks(\n        uint256 keyId,\n        uint256 genderDirection\n    ) public {\n        require(msg.sender == tx.origin, \"no contracts fam\");\n        _mintReserve(msg.sender, keyRedemptionAmt, genderDirection);\n        SkeleKeysProto(keysContract).redeemKey(keyId);\n    }\n\n    function _mintReserve(\n        address _to,\n        uint256 _quantity,\n        uint256 genderDirection\n    ) private {\n        _mintMain(_to, _quantity, 0, genderDirection, true);\n        _claimTypes[_to] += (_quantity<<128);\n    }\n\n    //////////\n\n    function setMintPrice(uint256 _mintPrice) public onlyOwner {\n        mintPrice = _mintPrice;\n    }\n\n    function setMaxMintsPerWallet(uint256 __maxMintsPerWallet) public onlyOwner {\n        _maxMintsPerWallet = __maxMintsPerWallet;\n    }\n\n    function setMerkleRoots(\n        bytes32 _newPhunksMerkleRoot,\n        bytes32 _newAllowlistMerkleRoot\n    ) public onlyOwner {\n        phunksMerkleRoot = _newPhunksMerkleRoot;\n        merkleRoot = _newAllowlistMerkleRoot;\n    }\n\n    //////////\n\n    function getGenderAndDirection(uint256 tokenId) public view returns (uint256) {\n        return gadOf(tokenId);\n    }\n\n    function setGenderAndDirection(uint256 tokenId, uint256 gender, uint256 direction) public {\n        require(gender < 2 && direction < 2, \"v\");\n        setGAD(tokenId, direction*2 + gender);\n    }\n\n    //////////\n\n    function setKeysContract(address keysAddr) public onlyOwner {\n        setReserveAuthStatus(keysContract, false);\n        keysContract = keysAddr;\n        setReserveAuthStatus(keysContract, true);\n    }\n\n    function setReserveAuthStatus(address addr, bool isAuthorized) public onlyOwner {\n        _reserveAuths[addr] = isAuthorized;\n    }\n\n    function getReserveAuthStatus(address addr) public view returns (bool) {\n        return _reserveAuths[addr];\n    }\n\n    function setKeyRedemptionAmt(uint256 _newAmt) public onlyOwner {\n        keyRedemptionAmt = _newAmt;\n    }\n\n    //////////\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"z\");\n\n        if (bytes(_basedURI).length > 0) {\n            return string(\n                abi.encodePacked(\n                    _basedURI, \"/\", _gdToPath[getGenderAndDirection(tokenId)], \"/\",\n                    tokenId.toString()));\n        }\n        else {\n            return _preRevealURI;\n        }\n    }\n\n    function setPreRevealURI(string memory preRevealURI_) public onlyOwner {\n        _setPreRevealURI(preRevealURI_);\n    }\n\n    function setBasedURI(string memory basedURI_) public onlyOwner {\n        _setBasedURI(basedURI_);\n    }\n\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        require(!provenanceSet);\n        PROVENANCE = provenanceHash;\n        provenanceSet = true;\n    }\n\n    //////////\n\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(\n        address operator,\n        uint256 tokenId\n    ) public override onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    //////////\n\n    function setCollectionDescription(string memory _collectionDescription) public onlyOwner {\n        collectionDescription = _collectionDescription;\n    }\n\n    function setCollectionImg(string memory _collectionImg) public onlyOwner {\n        collectionImg = _collectionImg;\n    }\n\n    function setExternalLink(string memory _externalLink) public onlyOwner {\n        externalLink = _externalLink;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(\n            abi.encodePacked(\n                \"data:application/json;utf8,{\\\"name\\\":\\\"\", name(),\"\\\",\",\n                \"\\\"description\\\":\\\"\", collectionDescription, \"\\\",\",\n                \"\\\"image\\\":\\\"\", collectionImg, \"\\\",\",\n                \"\\\"external_link\\\":\\\"\", externalLink, \"\\\",\",\n                \"\\\"seller_fee_basis_points\\\":666,\\\"fee_recipient\\\":\\\"\",\n                uint256(uint160(address(this))).toHexString(), \"\\\"}\"\n            )\n        );\n    }\n\n    function flipRoyaltySwitch() public onlyOwner {\n        royaltySwitch = !royaltySwitch;\n    }\n\n    /*********************************************************************/\n    /*** PAYMENT LOGIC (Start) *******************************************/\n    receive() external payable {\n        totalReceived += msg.value;\n    }\n\n    function withdraw() public onlyPayee {\n        uint256 totalForPayee = (totalReceived/10000)*paymentInfo[msg.sender];\n        uint256 toWithdraw = totalForPayee - amountsWithdrawn[msg.sender];\n        amountsWithdrawn[msg.sender] = totalForPayee;\n        (bool success, ) = payable(msg.sender).call{value: toWithdraw}(\"\");\n        require(success, \"Payment failed!\");\n    }\n\n    function emergencyWithdraw() external onlyOwner {\n        uint256 toWithdraw = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value: toWithdraw}(\"\");\n        require(success, \"Payment failed!\");\n    }\n\n    function withdrawTokens(address tokenAddress) external onlyPayee {\n        for (uint256 i = 0; i < payees.length; i++) {\n            IERC20(tokenAddress).transfer(\n                payees[i],\n                (IERC20(tokenAddress).balanceOf(address(this))/10000)*paymentInfo[payees[i]]\n            );\n        }\n    }\n\n    function disableEWT() public onlyOwner {\n        canEmergencyWithdrawTokens = false;\n    }\n\n    function emergencyWithdrawTokens(address tokenAddress) external onlyOwner {\n        require(canEmergencyWithdrawTokens, \"!ew\");\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n    /*** PAYMENT LOGIC (End) *******************************************/\n    /*******************************************************************/\n}\n\n////////////////////\n\nabstract contract ERC721Proto {\n    function balanceOf(address owner) public view virtual returns (uint256);\n}\n\n//////////\n\nabstract contract SkeleKeysProto {\n    function redeemKey(uint256 keyId) public virtual;\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
57     }
58   },
59   "settings": {
60     "remappings": [
61       "ds-test/=lib/operator-filter-registry/lib/forge-std/lib/ds-test/src/",
62       "erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
63       "forge-std/=lib/operator-filter-registry/lib/forge-std/src/",
64       "openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/contracts/",
65       "openzeppelin-contracts/=lib/operator-filter-registry/lib/openzeppelin-contracts/contracts/",
66       "operator-filter-registry/=lib/operator-filter-registry/src/"
67     ],
68     "optimizer": {
69       "enabled": true,
70       "runs": 200
71     },
72     "metadata": {
73       "bytecodeHash": "ipfs"
74     },
75     "outputSelection": {
76       "*": {
77         "*": [
78           "evm.bytecode",
79           "evm.deployedBytecode",
80           "devdoc",
81           "userdoc",
82           "metadata",
83           "abi"
84         ]
85       }
86     },
87     "evmVersion": "london",
88     "libraries": {}
89   }
90 }}