1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "london",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/access/Ownable.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/security/Pausable.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
34     },
35     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
37     },
38     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
40     },
41     "@openzeppelin/contracts/utils/Context.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
43     },
44     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
46     },
47     "contracts/GnGOffering.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./IGnGOffering.sol\";\n\ncontract GnGOffering is IGnGOffering, Ownable, Pausable {\n    mapping(address => bool) public supportedERC721Collections;\n    mapping(address => bool) public supportedERC1155Collections;\n\n    uint256 public maxAmountPerTx = 15;\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\n\n    constructor(address[] memory _supportedERC721Collections, address[] memory _supportedERC1155Collections) {\n        _addERC721Collections(_supportedERC721Collections);\n        _addERC1155Collections(_supportedERC1155Collections);\n    }\n\n    /**\n     * @dev Offer the NFTs in supported ERC721 & ERC1155 collections to burn.\n     * @dev The collections need to be approved by the owner first.\n     * @dev `collections`, `tokenIds` and `amounts` should be in same length.\n     * @param collections The list of contract addresses to offer\n     * @param tokenIds The list of tokenIds for each collections to offer\n     * @param amounts The list of amounts for each token to offer\n     */\n    function offer(\n        address[] calldata collections,\n        uint256[][] calldata tokenIds,\n        uint256[][] calldata amounts\n    ) external whenNotPaused {\n        if (collections.length != tokenIds.length) revert InvalidInput(\"Invalid tokenIds length.\");\n        if (collections.length != amounts.length) revert InvalidInput(\"Invalid amounts length.\");\n\n        uint256 totalAmount = 0;\n        uint256 maxAmount = maxAmountPerTx;\n\n        for (uint256 i = 0; i < collections.length; ) {\n            address collection = collections[i];\n            uint256[] memory tokenIdList = tokenIds[i];\n            uint256[] memory amountList = amounts[i];\n\n            if (supportedERC721Collections[collection]) {\n                totalAmount += tokenIdList.length;\n                if (totalAmount > maxAmount) revert InvalidInput(\"Invalid amounts total.\");\n\n                _burnERC721(msg.sender, collection, tokenIdList);\n            } else if (supportedERC1155Collections[collection]) {\n                for (uint256 j = 0; j < amountList.length; ) {\n                    totalAmount += amountList[j];\n                    if (totalAmount > maxAmount) revert InvalidInput(\"Invalid amounts total.\");\n\n                    unchecked {\n                        j++;\n                    }\n                }\n                _burnERC1155(msg.sender, collection, tokenIdList, amountList);\n            } else {\n                revert InvalidInput(\"Unsupported collection.\");\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        if (totalAmount == 0) revert InvalidInput(\"Total amount cannot be zero.\");\n\n        emit AmountOffered(msg.sender, totalAmount);\n    }\n\n    /**\n     * @dev Transfer user's ERC721 tokens from `from` to burn address\n     * @dev This is an internal function can only be called from this contract\n     * @param from address representing the owner of the given NFTs\n     * @param collection address representing the contract of the given NFTs\n     * @param tokenIds The list of ids of the token to be transferred\n     */\n    function _burnERC721(\n        address from,\n        address collection,\n        uint256[] memory tokenIds\n    ) internal {\n        for (uint256 i = 0; i < tokenIds.length; ) {\n            IERC721(collection).safeTransferFrom(from, burnAddress, tokenIds[i]);\n            unchecked {\n                i++;\n            }\n        }\n        emit ERC721Offered(from, collection, tokenIds);\n    }\n\n    /**\n     * @dev Transfer user's ERC1155 tokens from `from` to burn address\n     * @dev This is an internal function can only be called from this contract\n     * @param from address representing the owner of the given NFTs\n     * @param collection address representing the contract of the given NFTs\n     * @param tokenIds The list of ids of the token to be transferred\n     * @param amounts The list of amounts of the token to be transferred\n     */\n    function _burnERC1155(\n        address from,\n        address collection,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) internal {\n        IERC1155(collection).safeBatchTransferFrom(from, burnAddress, tokenIds, amounts, \"\");\n        emit ERC1155Offered(from, collection, tokenIds, amounts);\n    }\n\n    /**\n     * @dev Add `collections` to supported ERC721 whitelist\n     * @dev This is an internal function can only be called from this contract\n     * @param collections The list of addresses representing NFT collections to add\n     */\n    function _addERC721Collections(address[] memory collections) internal {\n        for (uint256 i = 0; i < collections.length; ) {\n            supportedERC721Collections[collections[i]] = true;\n            unchecked {\n                i++;\n            }\n        }\n        emit CollectionsAdded(msg.sender, TokenType.ERC721, collections);\n    }\n\n    /**\n     * @dev Add `collections` to supported ERC1155 whitelist\n     * @dev This is an internal function can only be called from this contract\n     * @param collections The list of addresses representing NFT collections to add\n     */\n    function _addERC1155Collections(address[] memory collections) internal {\n        for (uint256 i = 0; i < collections.length; ) {\n            supportedERC1155Collections[collections[i]] = true;\n            unchecked {\n                i++;\n            }\n        }\n        emit CollectionsAdded(msg.sender, TokenType.ERC1155, collections);\n    }\n\n    /**\n     * @dev Add `collections` to supported ERC721 whitelist\n     * @dev This function can only be called from contract owner\n     * @param collections The list of addresses representing NFT collections to add\n     */\n    function addERC721Collections(address[] memory collections) external onlyOwner {\n        _addERC721Collections(collections);\n    }\n\n    /**\n     * @dev Add `collections` to supported ERC1155 whitelist\n     * @dev This function can only be called from contract owner\n     * @param collections The list of addresses representing NFT collections to add\n     */\n    function addERC1155Collections(address[] memory collections) external onlyOwner {\n        _addERC1155Collections(collections);\n    }\n\n    /**\n     * @dev Remove `collections` from supported ERC721 whitelist\n     * @dev This function can only be called from contract owner\n     * @param collections The list of addresses representing NFT collections to remove\n     */\n    function removeERC721Collections(address[] memory collections) external onlyOwner {\n        for (uint256 i = 0; i < collections.length; ) {\n            delete supportedERC721Collections[collections[i]];\n            unchecked {\n                i++;\n            }\n        }\n        emit CollectionsRemoved(msg.sender, TokenType.ERC721, collections);\n    }\n\n    /**\n     * @dev Remove `collections` from supported ERC1155 whitelist\n     * @dev This function can only be called from contract owner\n     * @param collections The list of addresses representing NFT collections to remove\n     */\n    function removeERC1155Collections(address[] memory collections) external onlyOwner {\n        for (uint256 i = 0; i < collections.length; ) {\n            delete supportedERC1155Collections[collections[i]];\n            unchecked {\n                i++;\n            }\n        }\n        emit CollectionsRemoved(msg.sender, TokenType.ERC1155, collections);\n    }\n\n    /**\n     * @dev Update maximum amount per transaction\n     * @dev This function can only be called from contract owner\n     * @param amount The amount to be updated\n     */\n    function setMaxAmountPerTx(uint256 amount) external onlyOwner {\n        maxAmountPerTx = amount;\n        emit MaxAmountUpdated(msg.sender, amount);\n    }\n\n    /**\n     * @dev Pause the contract\n     * @dev This function can only be called from contract owner\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract\n     * @dev This function can only be called from contract owner\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
49     },
50     "contracts/IGnGOffering.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface IGnGOffering {\n    /**\n     * @dev Supported token types that can be offered.\n     */\n    enum TokenType {\n        ERC721,\n        ERC1155\n    }\n\n    /**\n     * @dev Error with `errMsg` message for input validation.\n     */\n    error InvalidInput(string errMsg);\n\n    /**\n     * @dev Emitted when supported ERC721 tokens transferred from `sender` to burn address.\n     */\n    event ERC721Offered(address indexed sender, address indexed collection, uint256[] tokenIds);\n\n    /**\n     * @dev Emitted when supported ERC1155 tokens transferred from `sender` to burn address.\n     */\n    event ERC1155Offered(address indexed sender, address indexed collection, uint256[] tokenIds, uint256[] amounts);\n\n    /**\n     * @dev Emitted when supported tokens transferred from `sender` to burn address.\n     */\n    event AmountOffered(address indexed sender, uint256 totalAmount);\n\n    /**\n     * @dev Emitted when supported collections added by `operator`\n     */\n    event CollectionsAdded(address indexed operator, TokenType tokenType, address[] collections);\n\n    /**\n     * @dev Emitted when supported collections removed by `operator`\n     */\n    event CollectionsRemoved(address indexed operator, TokenType tokenType, address[] collections);\n\n    /**\n     * @dev Emitted when max amount per transaction updated by `operator`\n     */\n    event MaxAmountUpdated(address indexed operator, uint256 amount);\n\n    /**\n     * @dev Check if `collection` is a supported ERC721 collection.\n     * @return Boolean result.\n     */\n    function supportedERC721Collections(address collection) external returns (bool);\n\n    /**\n     * @dev Check if `collection` is a supported ERC1155 collection.\n     * @return Boolean result.\n     */\n    function supportedERC1155Collections(address collection) external returns (bool);\n\n    /**\n     * @dev Offer the NFTs in supported ERC721 & ERC1155 collections to burn.\n     * @dev The collections need to be approved by the owner first.\n     * @dev `collections`, `tokenIds` and `amounts` should be in same length.\n     * @param collections The list of contract addresses to offer\n     * @param tokenIds The list of tokenIds for each collections to offer\n     * @param amounts The list of amounts for each token to offer\n     */\n    function offer(\n        address[] calldata collections,\n        uint256[][] calldata tokenIds,\n        uint256[][] calldata amounts\n    ) external;\n}\n"
52     }
53   }
54 }}