1 /**
2  * OpenZepplin contracts contained within are licensed under an MIT License.
3  * 
4  * The MIT License (MIT)
5  * 
6  * Copyright (c) 2016-2020 zOS Global Limited
7  * 
8  * Permission is hereby granted, free of charge, to any person obtaining
9  * a copy of this software and associated documentation files (the
10  * "Software"), to deal in the Software without restriction, including
11  * without limitation the rights to use, copy, modify, merge, publish,
12  * distribute, sublicense, and/or sell copies of the Software, and to
13  * permit persons to whom the Software is furnished to do so, subject to
14  * the following conditions:
15  * 
16  * The above copyright notice and this permission notice shall be included
17  * in all copies or substantial portions of the Software.
18  * 
19  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
20  * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
21  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
22  * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
23  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
24  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
25  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
26  * 
27  * Chainlink contracts contained within are licensed under an MIT License.
28  * 
29  * The MIT License (MIT)
30  * 
31  * Copyright (c) 2018 SmartContract ChainLink, Ltd.
32  * 
33  * Permission is hereby granted, free of charge, to any person obtaining a copy
34  * of this software and associated documentation files (the "Software"), to deal
35  * in the Software without restriction, including without limitation the rights
36  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
37  * copies of the Software, and to permit persons to whom the Software is
38  * furnished to do so, subject to the following conditions:
39  * 
40  * The above copyright notice and this permission notice shall be included in
41  * all copies or substantial portions of the Software.
42  * 
43  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
44  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
45  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
46  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
47  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
48  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
49  * THE SOFTWARE.
50  */
51 
52 //File: https://raw.githubusercontent.com/smartcontractkit/chainlink/master/evm-contracts/src/v0.6/VRFRequestIDBase.sol
53 
54 pragma solidity ^0.6.0;
55 
56 contract VRFRequestIDBase {
57 
58   /**
59    * @notice returns the seed which is actually input to the VRF coordinator
60    *
61    * @dev To prevent repetition of VRF output due to repetition of the
62    * @dev user-supplied seed, that seed is combined in a hash with the
63    * @dev user-specific nonce, and the address of the consuming contract. The
64    * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
65    * @dev the final seed, but the nonce does protect against repetition in
66    * @dev requests which are included in a single block.
67    *
68    * @param _userSeed VRF seed input provided by user
69    * @param _requester Address of the requesting contract
70    * @param _nonce User-specific nonce at the time of the request
71    */
72   function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,
73     address _requester, uint256 _nonce)
74     internal pure returns (uint256)
75   {
76     return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
77   }
78 
79   /**
80    * @notice Returns the id for this request
81    * @param _keyHash The serviceAgreement ID to be used for this request
82    * @param _vRFInputSeed The seed to be passed directly to the VRF
83    * @return The id for this request
84    *
85    * @dev Note that _vRFInputSeed is not the seed passed by the consuming
86    * @dev contract, but the one generated by makeVRFInputSeed
87    */
88   function makeRequestId(
89     bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
90     return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
91   }
92 }
93 
94 //File: https://raw.githubusercontent.com/smartcontractkit/chainlink/master/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol
95 
96 pragma solidity ^0.6.0;
97 
98 interface LinkTokenInterface {
99   function allowance(address owner, address spender) external view returns (uint256 remaining);
100   function approve(address spender, uint256 value) external returns (bool success);
101   function balanceOf(address owner) external view returns (uint256 balance);
102   function decimals() external view returns (uint8 decimalPlaces);
103   function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
104   function increaseApproval(address spender, uint256 subtractedValue) external;
105   function name() external view returns (string memory tokenName);
106   function symbol() external view returns (string memory tokenSymbol);
107   function totalSupply() external view returns (uint256 totalTokensIssued);
108   function transfer(address to, uint256 value) external returns (bool success);
109   function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);
110   function transferFrom(address from, address to, uint256 value) external returns (bool success);
111 }
112 
113 //File: https://raw.githubusercontent.com/smartcontractkit/chainlink/master/evm-contracts/src/v0.6/vendor/SafeMathChainlink.sol
114 
115 pragma solidity ^0.6.0;
116 
117 /**
118  * @dev Wrappers over Solidity's arithmetic operations with added overflow
119  * checks.
120  *
121  * Arithmetic operations in Solidity wrap on overflow. This can easily result
122  * in bugs, because programmers usually assume that an overflow raises an
123  * error, which is the standard behavior in high level programming languages.
124  * `SafeMath` restores this intuition by reverting the transaction when an
125  * operation overflows.
126  *
127  * Using this library instead of the unchecked operations eliminates an entire
128  * class of bugs, so it's recommended to use it always.
129  */
130 library SafeMathChainlink {
131 
132   /**
133     * @dev Returns the addition of two unsigned integers, reverting on
134     * overflow.
135     *
136     * Counterpart to Solidity's `+` operator.
137     *
138     * Requirements:
139     * - Addition cannot overflow.
140     */
141   function add(uint256 a, uint256 b) internal pure returns (uint256) {
142     uint256 c = a + b;
143     require(c >= a, "SafeMath: addition overflow");
144 
145     return c;
146   }
147 
148   /**
149     * @dev Returns the subtraction of two unsigned integers, reverting on
150     * overflow (when the result is negative).
151     *
152     * Counterpart to Solidity's `-` operator.
153     *
154     * Requirements:
155     * - Subtraction cannot overflow.
156     */
157   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
158     require(b <= a, "SafeMath: subtraction overflow");
159     uint256 c = a - b;
160 
161     return c;
162   }
163 
164   /**
165     * @dev Returns the multiplication of two unsigned integers, reverting on
166     * overflow.
167     *
168     * Counterpart to Solidity's `*` operator.
169     *
170     * Requirements:
171     * - Multiplication cannot overflow.
172     */
173   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
174     // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
175     // benefit is lost if 'b' is also tested.
176     // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
177     if (a == 0) {
178       return 0;
179     }
180 
181     uint256 c = a * b;
182     require(c / a == b, "SafeMath: multiplication overflow");
183 
184     return c;
185   }
186 
187   /**
188     * @dev Returns the integer division of two unsigned integers. Reverts on
189     * division by zero. The result is rounded towards zero.
190     *
191     * Counterpart to Solidity's `/` operator. Note: this function uses a
192     * `revert` opcode (which leaves remaining gas untouched) while Solidity
193     * uses an invalid opcode to revert (consuming all remaining gas).
194     *
195     * Requirements:
196     * - The divisor cannot be zero.
197     */
198   function div(uint256 a, uint256 b) internal pure returns (uint256) {
199     // Solidity only automatically asserts when dividing by 0
200     require(b > 0, "SafeMath: division by zero");
201     uint256 c = a / b;
202     // assert(a == b * c + a % b); // There is no case in which this doesn't hold
203 
204     return c;
205   }
206 
207   /**
208     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
209     * Reverts when dividing by zero.
210     *
211     * Counterpart to Solidity's `%` operator. This function uses a `revert`
212     * opcode (which leaves remaining gas untouched) while Solidity uses an
213     * invalid opcode to revert (consuming all remaining gas).
214     *
215     * Requirements:
216     * - The divisor cannot be zero.
217     */
218   function mod(uint256 a, uint256 b) internal pure returns (uint256) {
219     require(b != 0, "SafeMath: modulo by zero");
220     return a % b;
221   }
222 }
223 
224 //File: https://raw.githubusercontent.com/smartcontractkit/chainlink/master/evm-contracts/src/v0.6/VRFConsumerBase.sol
225 
226 pragma solidity ^0.6.0;
227 
228 /** ****************************************************************************
229  * @notice Interface for contracts using VRF randomness
230  * *****************************************************************************
231  * @dev PURPOSE
232  *
233  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
234  * @dev to Vera the verifier in such a way that Vera can be sure he's not
235  * @dev making his output up to suit himself. Reggie provides Vera a public key
236  * @dev to which he knows the secret key. Each time Vera provides a seed to
237  * @dev Reggie, he gives back a value which is computed completely
238  * @dev deterministically from the seed and the secret key.
239  *
240  * @dev Reggie provides a proof by which Vera can verify that the output was
241  * @dev correctly computed once Reggie tells it to her, but without that proof,
242  * @dev the output is indistinguishable to her from a uniform random sample
243  * @dev from the output space.
244  *
245  * @dev The purpose of this contract is to make it easy for unrelated contracts
246  * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
247  * @dev simple access to a verifiable source of randomness.
248  * *****************************************************************************
249  * @dev USAGE
250  *
251  * @dev Calling contracts must inherit from VRFConsumerInterface, and can
252  * @dev initialize VRFConsumerInterface's attributes in their constructor as
253  * @dev shown:
254  *
255  * @dev   contract VRFConsumer {
256  * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
257  * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
258  * @dev         <initialization with other arguments goes here>
259  * @dev       }
260  * @dev   }
261  *
262  * @dev The oracle will have given you an ID for the VRF keypair they have
263  * @dev committed to (let's call it keyHash), and have told you the minimum LINK
264  * @dev price for VRF service. Make sure your contract has sufficient LINK, and
265  * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
266  * @dev want to generate randomness from.
267  *
268  * @dev Once the VRFCoordinator has received and validated the oracle's response
269  * @dev to your request, it will call your contract's fulfillRandomness method.
270  *
271  * @dev The randomness argument to fulfillRandomness is the actual random value
272  * @dev generated from your seed.
273  *
274  * @dev The requestId argument is generated from the keyHash and the seed by
275  * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
276  * @dev requests open, you can use the requestId to track which seed is
277  * @dev associated with which randomness. See VRFRequestIDBase.sol for more
278  * @dev details.
279  *
280  * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
281  * @dev differ. (Which is critical to making unpredictable randomness! See the
282  * @dev next section.)
283  *
284  * *****************************************************************************
285  * @dev SECURITY CONSIDERATIONS
286  *
287  * @dev Since the ultimate input to the VRF is mixed with the block hash of the
288  * @dev block in which the request is made, user-provided seeds have no impact
289  * @dev on its economic security properties. They are only included for API
290  * @dev compatability with previous versions of this contract.
291  *
292  * @dev Since the block hash of the block which contains the requestRandomness()
293  * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
294  * @dev miner could, in principle, fork the blockchain to evict the block
295  * @dev containing the request, forcing the request to be included in a
296  * @dev different block with a different hash, and therefore a different input
297  * @dev to the VRF. However, such an attack would incur a substantial economic
298  * @dev cost. This cost scales with the number of blocks the VRF oracle waits
299  * @dev until it calls fulfillRandomness().
300  */
301 abstract contract VRFConsumerBase is VRFRequestIDBase {
302 
303   using SafeMathChainlink for uint256;
304 
305   /**
306    * @notice fulfillRandomness handles the VRF response. Your contract must
307    * @notice implement it.
308    *
309    * @dev The VRFCoordinator expects a calling contract to have a method with
310    * @dev this signature, and will trigger it once it has verified the proof
311    * @dev associated with the randomness (It is triggered via a call to
312    * @dev rawFulfillRandomness, below.)
313    *
314    * @param requestId The Id initially returned by requestRandomness
315    * @param randomness the VRF output
316    */
317    
318   function fulfillRandomness(bytes32 requestId, uint256 randomness)
319     internal virtual;
320 
321   /**
322    * @notice requestRandomness initiates a request for VRF output given _seed
323    *
324    * @dev See "SECURITY CONSIDERATIONS" above for more information on _seed.
325    *
326    * @dev The fulfillRandomness method receives the output, once it's provided
327    * @dev by the Oracle, and verified by the vrfCoordinator.
328    *
329    * @dev The _keyHash must already be registered with the VRFCoordinator, and
330    * @dev the _fee must exceed the fee specified during registration of the
331    * @dev _keyHash.
332    *
333    * @param _keyHash ID of public key against which randomness is generated
334    * @param _fee The amount of LINK to send with the request
335    * @param _seed seed mixed into the input of the VRF
336    *
337    * @return requestId unique ID for this request
338    *
339    * @dev The returned requestId can be used to distinguish responses to *
340    * @dev concurrent requests. It is passed as the first argument to
341    * @dev fulfillRandomness.
342    */
343   function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)
344     internal returns (bytes32 requestId)
345   {
346     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
347 
348    /**
349     * This is the seed passed to VRFCoordinator. The oracle will mix this with
350     * the hash of the block containing this request to obtain the seed/input
351     * which is finally passed to the VRF cryptographic machinery.
352     */
353     uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);
354 
355    /**
356     * nonces[_keyHash] must stay in sync with
357     * VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
358     * successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
359     * This provides protection against the user repeating their input
360     * seed, which would result in a predictable/duplicate output.
361     */
362     nonces[_keyHash] = nonces[_keyHash].add(1);
363     return makeRequestId(_keyHash, vRFSeed);
364   }
365 
366   LinkTokenInterface immutable internal LINK;
367   address immutable private vrfCoordinator;
368 
369  /**
370   * Nonces for each VRF key from which the randomness has been requested.
371   * 
372   * Must stay in sync with VRFCoordinator[_keyHash][this].
373   */
374   mapping(bytes32 /* keyHash */ => uint256 /* nonce */) public nonces;
375   constructor(address _vrfCoordinator, address _link) public {
376     vrfCoordinator = _vrfCoordinator;
377     LINK = LinkTokenInterface(_link);
378   }
379 
380  /**
381   * The function rawFulfillRandomness is called by the VRFCoordinator when it receives a valid VRF
382   * proof. It then calls fulfillRandomness after validating
383   * the origin of the call.
384   */
385   function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
386     require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
387     fulfillRandomness(requestId, randomness);
388   }
389 }
390 
391 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Address.sol
392 
393 //SPDX-License-Identifier: MIT
394 
395 pragma solidity >=0.6.2 <0.8.0;
396 
397 /**
398  * @dev Collection of functions related to the address type
399  */
400 library Address {
401     /**
402      * @dev Returns true if `account` is a contract.
403      *
404      * [IMPORTANT]
405      * ====
406      * It is unsafe to assume that an address for which this function returns
407      * false is an externally-owned account (EOA) and not a contract.
408      *
409      * Among others, `isContract` will return false for the following
410      * types of addresses:
411      *
412      *  - an externally-owned account
413      *  - a contract in construction
414      *  - an address where a contract will be created
415      *  - an address where a contract lived, but was destroyed
416      * ====
417      */
418     function isContract(address account) internal view returns (bool) {
419         // This method relies on extcodesize, which returns 0 for contracts in
420         // construction, since the code is only stored at the end of the
421         // constructor execution.
422 
423         uint256 size;
424         // solhint-disable-next-line no-inline-assembly
425         assembly { size := extcodesize(account) }
426         return size > 0;
427     }
428 
429     /**
430      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
431      * `recipient`, forwarding all available gas and reverting on errors.
432      *
433      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
434      * of certain opcodes, possibly making contracts go over the 2300 gas limit
435      * imposed by `transfer`, making them unable to receive funds via
436      * `transfer`. {sendValue} removes this limitation.
437      *
438      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
439      *
440      * IMPORTANT: because control is transferred to `recipient`, care must be
441      * taken to not create reentrancy vulnerabilities. Consider using
442      * {ReentrancyGuard} or the
443      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
444      */
445     function sendValue(address payable recipient, uint256 amount) internal {
446         require(address(this).balance >= amount, "Address: insufficient balance");
447 
448         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
449         (bool success, ) = recipient.call{ value: amount }("");
450         require(success, "Address: unable to send value, recipient may have reverted");
451     }
452 
453     /**
454      * @dev Performs a Solidity function call using a low level `call`. A
455      * plain`call` is an unsafe replacement for a function call: use this
456      * function instead.
457      *
458      * If `target` reverts with a revert reason, it is bubbled up by this
459      * function (like regular Solidity function calls).
460      *
461      * Returns the raw returned data. To convert to the expected return value,
462      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
463      *
464      * Requirements:
465      *
466      * - `target` must be a contract.
467      * - calling `target` with `data` must not revert.
468      *
469      * _Available since v3.1._
470      */
471     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
472       return functionCall(target, data, "Address: low-level call failed");
473     }
474 
475     /**
476      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
477      * `errorMessage` as a fallback revert reason when `target` reverts.
478      *
479      * _Available since v3.1._
480      */
481     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
482         return functionCallWithValue(target, data, 0, errorMessage);
483     }
484 
485     /**
486      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
487      * but also transferring `value` wei to `target`.
488      *
489      * Requirements:
490      *
491      * - the calling contract must have an ETH balance of at least `value`.
492      * - the called Solidity function must be `payable`.
493      *
494      * _Available since v3.1._
495      */
496     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
497         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
498     }
499 
500     /**
501      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
502      * with `errorMessage` as a fallback revert reason when `target` reverts.
503      *
504      * _Available since v3.1._
505      */
506     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
507         require(address(this).balance >= value, "Address: insufficient balance for call");
508         require(isContract(target), "Address: call to non-contract");
509 
510         // solhint-disable-next-line avoid-low-level-calls
511         (bool success, bytes memory returndata) = target.call{ value: value }(data);
512         return _verifyCallResult(success, returndata, errorMessage);
513     }
514 
515     /**
516      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
517      * but performing a static call.
518      *
519      * _Available since v3.3._
520      */
521     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
522         return functionStaticCall(target, data, "Address: low-level static call failed");
523     }
524 
525     /**
526      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
527      * but performing a static call.
528      *
529      * _Available since v3.3._
530      */
531     function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
532         require(isContract(target), "Address: static call to non-contract");
533 
534         // solhint-disable-next-line avoid-low-level-calls
535         (bool success, bytes memory returndata) = target.staticcall(data);
536         return _verifyCallResult(success, returndata, errorMessage);
537     }
538 
539     /**
540      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
541      * but performing a delegate call.
542      *
543      * _Available since v3.3._
544      */
545     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
546         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
547     }
548 
549     /**
550      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
551      * but performing a delegate call.
552      *
553      * _Available since v3.3._
554      */
555     function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
556         require(isContract(target), "Address: delegate call to non-contract");
557 
558         // solhint-disable-next-line avoid-low-level-calls
559         (bool success, bytes memory returndata) = target.delegatecall(data);
560         return _verifyCallResult(success, returndata, errorMessage);
561     }
562 
563     function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
564         if (success) {
565             return returndata;
566         } else {
567             // Look for revert reason and bubble it up if present
568             if (returndata.length > 0) {
569                 // The easiest way to bubble the revert reason is using memory via assembly
570 
571                 // solhint-disable-next-line no-inline-assembly
572                 assembly {
573                     let returndata_size := mload(returndata)
574                     revert(add(32, returndata), returndata_size)
575                 }
576             } else {
577                 revert(errorMessage);
578             }
579         }
580     }
581 }
582 
583 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/math/SafeMath.sol
584 
585 //SPDX-License-Identifier: MIT
586 
587 pragma solidity >=0.6.0 <0.8.0;
588 
589 /**
590  * @dev Wrappers over Solidity's arithmetic operations with added overflow
591  * checks.
592  *
593  * Arithmetic operations in Solidity wrap on overflow. This can easily result
594  * in bugs, because programmers usually assume that an overflow raises an
595  * error, which is the standard behavior in high level programming languages.
596  * `SafeMath` restores this intuition by reverting the transaction when an
597  * operation overflows.
598  *
599  * Using this library instead of the unchecked operations eliminates an entire
600  * class of bugs, so it's recommended to use it always.
601  */
602 library SafeMath {
603     /**
604      * @dev Returns the addition of two unsigned integers, reverting on
605      * overflow.
606      *
607      * Counterpart to Solidity's `+` operator.
608      *
609      * Requirements:
610      *
611      * - Addition cannot overflow.
612      */
613     function add(uint256 a, uint256 b) internal pure returns (uint256) {
614         uint256 c = a + b;
615         require(c >= a, "SafeMath: addition overflow");
616 
617         return c;
618     }
619 
620     /**
621      * @dev Returns the subtraction of two unsigned integers, reverting on
622      * overflow (when the result is negative).
623      *
624      * Counterpart to Solidity's `-` operator.
625      *
626      * Requirements:
627      *
628      * - Subtraction cannot overflow.
629      */
630     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
631         return sub(a, b, "SafeMath: subtraction overflow");
632     }
633 
634     /**
635      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
636      * overflow (when the result is negative).
637      *
638      * Counterpart to Solidity's `-` operator.
639      *
640      * Requirements:
641      *
642      * - Subtraction cannot overflow.
643      */
644     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
645         require(b <= a, errorMessage);
646         uint256 c = a - b;
647 
648         return c;
649     }
650 
651     /**
652      * @dev Returns the multiplication of two unsigned integers, reverting on
653      * overflow.
654      *
655      * Counterpart to Solidity's `*` operator.
656      *
657      * Requirements:
658      *
659      * - Multiplication cannot overflow.
660      */
661     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
662         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
663         // benefit is lost if 'b' is also tested.
664         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
665         if (a == 0) {
666             return 0;
667         }
668 
669         uint256 c = a * b;
670         require(c / a == b, "SafeMath: multiplication overflow");
671 
672         return c;
673     }
674 
675     /**
676      * @dev Returns the integer division of two unsigned integers. Reverts on
677      * division by zero. The result is rounded towards zero.
678      *
679      * Counterpart to Solidity's `/` operator. Note: this function uses a
680      * `revert` opcode (which leaves remaining gas untouched) while Solidity
681      * uses an invalid opcode to revert (consuming all remaining gas).
682      *
683      * Requirements:
684      *
685      * - The divisor cannot be zero.
686      */
687     function div(uint256 a, uint256 b) internal pure returns (uint256) {
688         return div(a, b, "SafeMath: division by zero");
689     }
690 
691     /**
692      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
693      * division by zero. The result is rounded towards zero.
694      *
695      * Counterpart to Solidity's `/` operator. Note: this function uses a
696      * `revert` opcode (which leaves remaining gas untouched) while Solidity
697      * uses an invalid opcode to revert (consuming all remaining gas).
698      *
699      * Requirements:
700      *
701      * - The divisor cannot be zero.
702      */
703     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
704         require(b > 0, errorMessage);
705         uint256 c = a / b;
706         //assert(a == b * c + a % b); //There is no case in which this doesn't hold
707 
708         return c;
709     }
710 
711     /**
712      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
713      * Reverts when dividing by zero.
714      *
715      * Counterpart to Solidity's `%` operator. This function uses a `revert`
716      * opcode (which leaves remaining gas untouched) while Solidity uses an
717      * invalid opcode to revert (consuming all remaining gas).
718      *
719      * Requirements:
720      *
721      * - The divisor cannot be zero.
722      */
723     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
724         return mod(a, b, "SafeMath: modulo by zero");
725     }
726 
727     /**
728      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
729      * Reverts with custom message when dividing by zero.
730      *
731      * Counterpart to Solidity's `%` operator. This function uses a `revert`
732      * opcode (which leaves remaining gas untouched) while Solidity uses an
733      * invalid opcode to revert (consuming all remaining gas).
734      *
735      * Requirements:
736      *
737      * - The divisor cannot be zero.
738      */
739     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
740         require(b != 0, errorMessage);
741         return a % b;
742     }
743 }
744 
745 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/GSN/Context.sol
746 
747 //SPDX-License-Identifier: MIT
748 
749 pragma solidity >=0.6.0 <0.8.0;
750 
751 /*
752  * @dev Provides information about the current execution context, including the
753  * sender of the transaction and its data. While these are generally available
754  * via msg.sender and msg.data, they should not be accessed in such a direct
755  * manner, since when dealing with GSN meta-transactions the account sending and
756  * paying for execution may not be the actual sender (as far as an application
757  * is concerned).
758  *
759  * This contract is only required for intermediate, library-like contracts.
760  */
761 abstract contract Context {
762     function _msgSender() internal view virtual returns (address payable) {
763         return msg.sender;
764     }
765 
766     function _msgData() internal view virtual returns (bytes memory) {
767         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
768         return msg.data;
769     }
770 }
771 
772 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/introspection/ERC165.sol
773 
774 //SPDX-License-Identifier: MIT
775 
776 pragma solidity >=0.6.0 <0.8.0;
777 
778 /**
779  * @dev Interface of the ERC165 standard, as defined in the
780  * https://eips.ethereum.org/EIPS/eip-165[EIP].
781  *
782  * Implementers can declare support of contract interfaces, which can then be
783  * queried by others ({ERC165Checker}).
784  *
785  * For an implementation, see {ERC165}.
786  */
787 interface IERC165 {
788     /**
789      * @dev Returns true if this contract implements the interface defined by
790      * `interfaceId`. See the corresponding
791      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
792      * to learn more about how these ids are created.
793      *
794      * This function call must use less than 30 000 gas.
795      */
796     function supportsInterface(bytes4 interfaceId) external view returns (bool);
797 }
798 
799 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC1155/IERC1155.sol
800 
801 //SPDX-License-Identifier: MIT
802 
803 pragma solidity >=0.6.0 <0.8.0;
804 
805 /**
806  * @dev Implementation of the {IERC165} interface.
807  *
808  * Contracts may inherit from this and call {_registerInterface} to declare
809  * their support of an interface.
810  */
811 abstract contract ERC165 is IERC165 {
812     /*
813      * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7
814      */
815     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
816 
817     /**
818      * @dev Mapping of interface ids to whether or not it's supported.
819      */
820     mapping(bytes4 => bool) private _supportedInterfaces;
821 
822     constructor () internal {
823         // Derived contracts need only register support for their own interfaces,
824         // we register support for ERC165 itself here
825         _registerInterface(_INTERFACE_ID_ERC165);
826     }
827 
828     /**
829      * @dev See {IERC165-supportsInterface}.
830      *
831      * Time complexity O(1), guaranteed to always use less than 30 000 gas.
832      */
833     function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
834         return _supportedInterfaces[interfaceId];
835     }
836 
837     /**
838      * @dev Registers the contract as an implementer of the interface defined by
839      * `interfaceId`. Support of the actual ERC165 interface is automatic and
840      * registering its interface id is not required.
841      *
842      * See {IERC165-supportsInterface}.
843      *
844      * Requirements:
845      *
846      * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).
847      */
848     function _registerInterface(bytes4 interfaceId) internal virtual {
849         require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
850         _supportedInterfaces[interfaceId] = true;
851     }
852 }
853 
854 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC1155/IERC1155Receiver.sol
855 
856 //SPDX-License-Identifier: MIT
857 
858 pragma solidity >=0.6.0 <0.8.0;
859 
860 /**
861  * _Available since v3.1._
862  */
863 interface IERC1155Receiver is IERC165 {
864 
865     /**
866         @dev Handles the receipt of a single ERC1155 token type. This function is
867         called at the end of a `safeTransferFrom` after the balance has been updated.
868         To accept the transfer, this must return
869         `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
870         (i.e. 0xf23a6e61, or its own function selector).
871         @param operator The address which initiated the transfer (i.e. msg.sender)
872         @param from The address which previously owned the token
873         @param id The ID of the token being transferred
874         @param value The amount of tokens being transferred
875         @param data Additional data with no specified format
876         @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
877     */
878     function onERC1155Received(
879         address operator,
880         address from,
881         uint256 id,
882         uint256 value,
883         bytes calldata data
884     )
885         external
886         returns(bytes4);
887 
888     /**
889         @dev Handles the receipt of a multiple ERC1155 token types. This function
890         is called at the end of a `safeBatchTransferFrom` after the balances have
891         been updated. To accept the transfer(s), this must return
892         `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
893         (i.e. 0xbc197c81, or its own function selector).
894         @param operator The address which initiated the batch transfer (i.e. msg.sender)
895         @param from The address which previously owned the token
896         @param ids An array containing ids of each token being transferred (order and length must match values array)
897         @param values An array containing amounts of each token being transferred (order and length must match ids array)
898         @param data Additional data with no specified format
899         @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
900     */
901     function onERC1155BatchReceived(
902         address operator,
903         address from,
904         uint256[] calldata ids,
905         uint256[] calldata values,
906         bytes calldata data
907     )
908         external
909         returns(bytes4);
910 }
911 
912 //File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/introspection/IERC165.sol
913 
914 //SPDX-License-Identifier: MIT
915 
916 pragma solidity >=0.6.2 <0.8.0;
917 
918 /**
919  * @dev Required interface of an ERC1155 compliant contract, as defined in the
920  * https://eips.ethereum.org/EIPS/eip-1155[EIP].
921  *
922  * _Available since v3.1._
923  */
924 interface IERC1155 is IERC165 {
925     /**
926      * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.
927      */
928     event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
929 
930     /**
931      * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all
932      * transfers.
933      */
934     event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
935 
936     /**
937      * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to
938      * `approved`.
939      */
940     event ApprovalForAll(address indexed account, address indexed operator, bool approved);
941 
942     /**
943      * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.
944      *
945      * If an {URI} event was emitted for `id`, the standard
946      * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value
947      * returned by {IERC1155MetadataURI-uri}.
948      */
949     event URI(string value, uint256 indexed id);
950 
951     /**
952      * @dev Returns the amount of tokens of token type `id` owned by `account`.
953      *
954      * Requirements:
955      *
956      * - `account` cannot be the zero address.
957      */
958     function balanceOf(address account, uint256 id) external view returns (uint256);
959 
960     /**
961      * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.
962      *
963      * Requirements:
964      *
965      * - `accounts` and `ids` must have the same length.
966      */
967     function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
968 
969     /**
970      * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,
971      *
972      * Emits an {ApprovalForAll} event.
973      *
974      * Requirements:
975      *
976      * - `operator` cannot be the caller.
977      */
978     function setApprovalForAll(address operator, bool approved) external;
979 
980     /**
981      * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.
982      *
983      * See {setApprovalForAll}.
984      */
985     function isApprovedForAll(address account, address operator) external view returns (bool);
986 
987     /**
988      * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
989      *
990      * Emits a {TransferSingle} event.
991      *
992      * Requirements:
993      *
994      * - `to` cannot be the zero address.
995      * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.
996      * - `from` must have a balance of tokens of type `id` of at least `amount`.
997      * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
998      * acceptance magic value.
999      */
1000     function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
1001 
1002     /**
1003      * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.
1004      *
1005      * Emits a {TransferBatch} event.
1006      *
1007      * Requirements:
1008      *
1009      * - `ids` and `amounts` must have the same length.
1010      * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
1011      * acceptance magic value.
1012      */
1013     function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
1014 }
1015 
1016 // File: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC1155/IERC1155MetadataURI.sol
1017 
1018 // SPDX-License-Identifier: MIT
1019 
1020 pragma solidity >=0.6.2 <0.8.0;
1021 
1022 /**
1023  * @dev Interface of the optional ERC1155MetadataExtension interface, as defined
1024  * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].
1025  *
1026  * _Available since v3.1._
1027  */
1028 interface IERC1155MetadataURI is IERC1155 {
1029     /**
1030      * @dev Returns the URI for token type `id`.
1031      *
1032      * If the `\{id\}` substring is present in the URI, it must be replaced by
1033      * clients with the actual token type ID.
1034      */
1035     function uri(uint256 id) external view returns (string memory);
1036 }
1037 
1038 // File: browser/EtherCats.sol
1039 
1040 pragma solidity 0.6.6;
1041 
1042 /**
1043  *
1044  * @dev Implementation of the basic standard multi-token.
1045  * See https://eips.ethereum.org/EIPS/eip-1155
1046  * Originally based on code by Enjin: https://github.com/enjin/erc-1155
1047  *
1048  * _Available since v3.1._
1049  */
1050 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
1051     using SafeMath
1052     for uint256;
1053     using Address
1054     for address;
1055 
1056     // Mapping from token ID to account balances
1057     mapping(uint256 => mapping(address => uint256)) private _balances;
1058 
1059     // Mapping from account to operator approvals
1060     mapping(address => mapping(address => bool)) private _operatorApprovals;
1061 
1062     // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
1063     string internal _uri;
1064 
1065     /*
1066      *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e
1067      *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4
1068      *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465
1069      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5
1070      *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a
1071      *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6
1072      *
1073      *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^
1074      *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26
1075      */
1076     bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
1077 
1078     /*
1079      *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c
1080      */
1081     bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
1082 
1083     /**
1084      * @dev See {_setURI}.
1085      */
1086     constructor() public {
1087         _setURI("ipfs://QmV9hwWvs2vsrBV8ewjfQSijFG4PEpJkGhxZBjRia4gyYP/{id}.json");
1088 
1089         // register the supported interfaces to conform to ERC1155 via ERC165
1090         _registerInterface(_INTERFACE_ID_ERC1155);
1091 
1092         // register the supported interfaces to conform to ERC1155MetadataURI via ERC165
1093         _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
1094     }
1095 
1096     /**
1097      * @dev See {IERC1155MetadataURI-uri}.
1098      *
1099      * This implementation returns the same URI for *all* token types. It relies
1100      * on the token type ID substitution mechanism
1101      * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
1102      *
1103      * Clients calling this function must replace the `\{id\}` substring with the
1104      * actual token type ID.
1105      */
1106     function uri(uint256) external view override returns(string memory) {
1107         return _uri;
1108     }
1109 
1110     /**
1111      * @dev See {IERC1155-balanceOf}.
1112      *
1113      * Requirements:
1114      *
1115      * - `account` cannot be the zero address.
1116      */
1117     function balanceOf(address account, uint256 id) public view override returns(uint256) {
1118         require(account != address(0), "ERC1155: balance query for the zero address");
1119         return _balances[id][account];
1120     }
1121 
1122     /**
1123      * @dev See {IERC1155-balanceOfBatch}.
1124      *
1125      * Requirements:
1126      *
1127      * - `accounts` and `ids` must have the same length.
1128      */
1129     function balanceOfBatch(
1130         address[] memory accounts,
1131         uint256[] memory ids
1132     )
1133     public
1134     view
1135     override
1136     returns(uint256[] memory) {
1137         require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
1138 
1139         uint256[] memory batchBalances = new uint256[](accounts.length);
1140 
1141         for (uint256 i = 0; i < accounts.length; ++i) {
1142             require(accounts[i] != address(0), "ERC1155: batch balance query for the zero address");
1143             batchBalances[i] = _balances[ids[i]][accounts[i]];
1144         }
1145 
1146         return batchBalances;
1147     }
1148 
1149     /**
1150      * @dev See {IERC1155-setApprovalForAll}.
1151      */
1152     function setApprovalForAll(address operator, bool approved) public virtual override {
1153         require(_msgSender() != operator, "ERC1155: setting approval status for self");
1154 
1155         _operatorApprovals[_msgSender()][operator] = approved;
1156         emit ApprovalForAll(_msgSender(), operator, approved);
1157     }
1158 
1159     /**
1160      * @dev See {IERC1155-isApprovedForAll}.
1161      */
1162     function isApprovedForAll(address account, address operator) public view override returns(bool) {
1163         return _operatorApprovals[account][operator];
1164     }
1165 
1166     /**
1167      * @dev See {IERC1155-safeTransferFrom}.
1168      */
1169     function safeTransferFrom(
1170         address from,
1171         address to,
1172         uint256 id,
1173         uint256 amount,
1174         bytes memory data
1175     )
1176     public
1177     virtual
1178     override {
1179         require(to != address(0), "ERC1155: transfer to the zero address");
1180         require(
1181             from == _msgSender() || isApprovedForAll(from, _msgSender()),
1182             "ERC1155: caller is not owner nor approved"
1183         );
1184 
1185         address operator = _msgSender();
1186 
1187         _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
1188 
1189         _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
1190         _balances[id][to] = _balances[id][to].add(amount);
1191 
1192         emit TransferSingle(operator, from, to, id, amount);
1193 
1194         _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
1195     }
1196 
1197     /**
1198      * @dev See {IERC1155-safeBatchTransferFrom}.
1199      */
1200     function safeBatchTransferFrom(
1201         address from,
1202         address to,
1203         uint256[] memory ids,
1204         uint256[] memory amounts,
1205         bytes memory data
1206     )
1207     public
1208     virtual
1209     override {
1210         require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
1211         require(to != address(0), "ERC1155: transfer to the zero address");
1212         require(
1213             from == _msgSender() || isApprovedForAll(from, _msgSender()),
1214             "ERC1155: transfer caller is not owner nor approved"
1215         );
1216 
1217         address operator = _msgSender();
1218 
1219         _beforeTokenTransfer(operator, from, to, ids, amounts, data);
1220 
1221         for (uint256 i = 0; i < ids.length; ++i) {
1222             uint256 id = ids[i];
1223             uint256 amount = amounts[i];
1224 
1225             _balances[id][from] = _balances[id][from].sub(
1226                 amount,
1227                 "ERC1155: insufficient balance for transfer"
1228             );
1229             _balances[id][to] = _balances[id][to].add(amount);
1230         }
1231 
1232         emit TransferBatch(operator, from, to, ids, amounts);
1233 
1234         _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
1235     }
1236 
1237     /**
1238      * @dev Sets a new URI for all token types, by relying on the token type ID
1239      * substitution mechanism
1240      * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
1241      *
1242      * By this mechanism, any occurrence of the `\{id\}` substring in either the
1243      * URI or any of the amounts in the JSON file at said URI will be replaced by
1244      * clients with the token type ID.
1245      *
1246      * For example, the `https://token-cdn-domain/\{id\}.json` URI would be
1247      * interpreted by clients as
1248      * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`
1249      * for token type ID 0x4cce0.
1250      *
1251      * See {uri}.
1252      *
1253      * Because these URIs cannot be meaningfully represented by the {URI} event,
1254      * this function emits no events.
1255      */
1256     function _setURI(string memory newuri) internal virtual {
1257         _uri = newuri;
1258     }
1259           
1260     /**
1261      * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.
1262      *
1263      * Requirements:
1264      *
1265      * - `ids` and `amounts` must have the same length.
1266      * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
1267      * acceptance magic value.
1268      */
1269     function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) internal virtual {
1270         require(to != address(0), "ERC1155: mint to the zero address");
1271         require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
1272         bytes memory data = "";
1273 
1274         address operator = to;
1275 
1276         _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
1277 
1278         for (uint i = 0; i < ids.length; i++) {
1279             _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
1280         }
1281 
1282         emit TransferBatch(operator, address(0), to, ids, amounts);
1283 
1284         _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
1285     }
1286 
1287     /**
1288      * @dev Destroys `amount` tokens of token type `id` from `account`
1289      *
1290      * Requirements:
1291      *
1292      * - `account` cannot be the zero address.
1293      * - `account` must have at least `amount` tokens of token type `id`.
1294      */
1295     function _burn(address account, uint256 id, uint256 amount) internal virtual {
1296         require(account != address(0), "ERC1155: burn from the zero address");
1297 
1298         address operator = _msgSender();
1299 
1300         _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
1301 
1302         _balances[id][account] = _balances[id][account].sub(
1303             amount,
1304             "ERC1155: burn amount exceeds balance"
1305         );
1306 
1307         emit TransferSingle(operator, account, address(0), id, amount);
1308     }
1309 
1310     /**
1311      * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.
1312      *
1313      * Requirements:
1314      *
1315      * - `ids` and `amounts` must have the same length.
1316      */
1317     function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
1318         require(account != address(0), "ERC1155: burn from the zero address");
1319         require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
1320 
1321         address operator = _msgSender();
1322 
1323         _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
1324 
1325         for (uint i = 0; i < ids.length; i++) {
1326             _balances[ids[i]][account] = _balances[ids[i]][account].sub(
1327                 amounts[i],
1328                 "ERC1155: burn amount exceeds balance"
1329             );
1330         }
1331 
1332         emit TransferBatch(operator, account, address(0), ids, amounts);
1333     }
1334 
1335     /**
1336      * @dev Hook that is called before any token transfer. This includes minting
1337      * and burning, as well as batched variants.
1338      *
1339      * The same hook is called on both single and batched variants. For single
1340      * transfers, the length of the `id` and `amount` arrays will be 1.
1341      *
1342      * Calling conditions (for each `id` and `amount` pair):
1343      *
1344      * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
1345      * of token type `id` will be  transferred to `to`.
1346      * - When `from` is zero, `amount` tokens of token type `id` will be minted
1347      * for `to`.
1348      * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
1349      * will be burned.
1350      * - `from` and `to` are never both zero.
1351      * - `ids` and `amounts` have the same, non-zero length.
1352      *
1353      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1354      */
1355     function _beforeTokenTransfer(
1356         address operator,
1357         address from,
1358         address to,
1359         uint256[] memory ids,
1360         uint256[] memory amounts,
1361         bytes memory data
1362     )
1363     internal virtual {}
1364 
1365     function _doSafeTransferAcceptanceCheck(
1366         address operator,
1367         address from,
1368         address to,
1369         uint256 id,
1370         uint256 amount,
1371         bytes memory data
1372     )
1373     private {
1374         if (to.isContract()) {
1375             try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns(bytes4 response) {
1376                 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
1377                     revert("ERC1155: ERC1155Receiver rejected tokens");
1378                 }
1379             } catch Error(string memory reason) {
1380                 revert(reason);
1381             } catch {
1382                 revert("ERC1155: transfer to non ERC1155Receiver implementer");
1383             }
1384         }
1385     }
1386 
1387     function _doSafeBatchTransferAcceptanceCheck(
1388         address operator,
1389         address from,
1390         address to,
1391         uint256[] memory ids,
1392         uint256[] memory amounts,
1393         bytes memory data
1394     )
1395     private {
1396         if (to.isContract()) {
1397             try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns(bytes4 response) {
1398                 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
1399                     revert("ERC1155: ERC1155Receiver rejected tokens");
1400                 }
1401             } catch Error(string memory reason) {
1402                 revert(reason);
1403             } catch {
1404                 revert("ERC1155: transfer to non ERC1155Receiver implementer");
1405             }
1406         }
1407     }
1408 
1409     function _asSingletonArray(uint256 element) private pure returns(uint256[] memory) {
1410         uint256[] memory array = new uint256[](1);
1411         array[0] = element;
1412 
1413         return array;
1414     }
1415 }
1416 
1417 //The EtherCatsFactory contract was created by Woody Deck. All artwork created by Nadia Khuzina, © 2021. An explicit license is granted to exchanges (e.g. OpenSea, Rarible), NFT/crypto or other types of tracking websites (e.g. wikipedia, cryptoartpulse.com), and like compiled mobile applications engaged in the former (e.g. iOS applications), to display and modify these works for purposes of facilitating the market or documentation of EtherCats.io artworks. No other rights are conveyed besides the implicit ones (e.g. An owner displaying their NFTs publicly).
1418 contract EtherCatsFactory is ERC1155 {
1419     uint256 constant public catsInPool = 9;
1420 
1421     //This is a lookup table to determine the rating of the cat from the random number provided by Chainlink.
1422     function ratingLookup(uint256 index) internal pure returns(uint256) {
1423         if (index <= 1275) return 1;
1424         else if (index <= 2550) return 2;
1425         else if (index <= 3825) return 3;
1426         else if (index <= 5100) return 4;
1427         else if (index <= 6375) return 5;
1428         else if (index <= 7650) return 6;
1429         else if (index <= 8925) return 7;
1430         else if (index <= 10200) return 8;
1431         else if (index <= 11475) return 9;
1432         else if (index <= 12750) return 10;
1433         else if (index <= 14025) return 11;
1434         else if (index <= 15300) return 12;
1435         else if (index <= 16575) return 13;
1436         else if (index <= 17850) return 14;
1437         else if (index <= 19125) return 15;
1438         else if (index <= 20400) return 16;
1439         else if (index <= 21675) return 17;
1440         else if (index <= 22950) return 18;
1441         else if (index <= 24225) return 19;
1442         else if (index <= 25500) return 20;
1443         else if (index <= 26775) return 21;
1444         else if (index <= 28050) return 22;
1445         else if (index <= 29325) return 23;
1446         else if (index <= 30600) return 24;
1447         else if (index <= 31875) return 25;
1448         else if (index <= 33150) return 26;
1449         else if (index <= 34425) return 27;
1450         else if (index <= 35700) return 28;
1451         else if (index <= 36975) return 29;
1452         else if (index <= 38250) return 30;
1453         else if (index <= 39525) return 31;
1454         else if (index <= 40800) return 32;
1455         else if (index <= 42075) return 33;
1456         else if (index <= 43350) return 34;
1457         else if (index <= 44625) return 35;
1458         else if (index <= 45900) return 36;
1459         else if (index <= 47175) return 37;
1460         else if (index <= 48450) return 38;
1461         else if (index <= 49725) return 39;
1462         else if (index <= 51000) return 40;
1463         else if (index <= 52275) return 41;
1464         else if (index <= 53550) return 42;
1465         else if (index <= 54825) return 43;
1466         else if (index <= 56100) return 44;
1467         else if (index <= 57375) return 45;
1468         else if (index <= 58650) return 46;
1469         else if (index <= 59925) return 47;
1470         else if (index <= 61200) return 48;
1471         else if (index <= 62475) return 49;
1472         else if (index <= 63750) return 50;
1473         else if (index <= 65025) return 51;
1474         else if (index <= 66300) return 52;
1475         else if (index <= 67575) return 53;
1476         else if (index <= 68850) return 54;
1477         else if (index <= 70125) return 55;
1478         else if (index <= 71400) return 56;
1479         else if (index <= 72675) return 57;
1480         else if (index <= 73950) return 58;
1481         else if (index <= 75225) return 59;
1482         else if (index <= 76500) return 60;
1483         else if (index <= 77775) return 61;
1484         else if (index <= 79050) return 62;
1485         else if (index <= 80325) return 63;
1486         else if (index <= 81600) return 64;
1487         else if (index <= 82875) return 65;
1488         else if (index <= 84150) return 66;
1489         else if (index <= 85425) return 67;
1490         else if (index <= 86700) return 68;
1491         else if (index <= 87975) return 69;
1492         else if (index <= 88900) return 70;
1493         else if (index <= 89800) return 71;
1494         else if (index <= 90700) return 72;
1495         else if (index <= 91600) return 73;
1496         else if (index <= 92500) return 74;
1497         else if (index <= 93400) return 75;
1498         else if (index <= 94300) return 76;
1499         else if (index <= 95200) return 77;
1500         else if (index <= 96100) return 78;
1501         else if (index <= 97000) return 79;
1502         else if (index <= 97200) return 80;
1503         else if (index <= 97400) return 81;
1504         else if (index <= 97600) return 82;
1505         else if (index <= 97800) return 83;
1506         else if (index <= 98000) return 84;
1507         else if (index <= 98200) return 85;
1508         else if (index <= 98400) return 86;
1509         else if (index <= 98600) return 87;
1510         else if (index <= 98800) return 88;
1511         else if (index <= 99000) return 89;
1512         else if (index <= 99145) return 90;
1513         else if (index <= 99285) return 91;
1514         else if (index <= 99415) return 92;
1515         else if (index <= 99540) return 93;
1516         else if (index <= 99660) return 94;
1517         else if (index <= 99770) return 95;
1518         else if (index <= 99870) return 96;
1519         else if (index <= 99960) return 97;
1520         else if (index <= 99990) return 98;
1521         else if (index < 99999) return 99;
1522         else if (index == 99999) return 100;
1523     }
1524 
1525     //This is a lookup table to determine the rating of the cat from the random number provided by Chainlink.
1526     function multiplierLookup(uint256 index) internal pure returns(uint256) {
1527         if (index <= 50) return 1;
1528         else if (index <= 85) return 2;
1529         else if (index <= 95) return 3;
1530         else if (index < 99) return 5;
1531         else if (index == 99) return 8;
1532     }
1533 
1534     //Before the cats are minted, the name, rating, and multiplier must be determined from the random number provided by Chainlink.
1535     function mintFiveCats(address buyer, uint256 randomNumberFromChainlink) internal {
1536         uint256[5] memory cats;
1537         uint256[5] memory ratings;
1538         uint256[5] memory multipliers;
1539         uint256[] memory tokenIDs = new uint256[](5);
1540         uint256[] memory amounts = new uint256[](5);
1541         amounts[0] = 1;
1542         amounts[1] = 1;
1543         amounts[2] = 1;
1544         amounts[3] = 1;
1545         amounts[4] = 1;
1546 
1547         //Take the verifiably random number from Chainlink, and chop it up into pieces for determining each cat.
1548         uint256 randomNumber = randomNumberFromChainlink;
1549         //Take the remainder of the random number to find the cat. Adding the array size means that there is never a quotient smaller than the array size.
1550         //Cat 0 (1st Cat)
1551         cats[0] = (randomNumber % 10 ** 3 + catsInPool) % catsInPool;
1552         ratings[0] = ratingLookup((randomNumber % 10 ** 8 / 10 ** 3));
1553         multipliers[0] = multiplierLookup((randomNumber % 10 ** 10 / 10 ** 8));
1554         //Cat 1 (2nd Cat)
1555         cats[1] = (randomNumber % 10 ** 13 / 10 ** 10) % catsInPool;
1556         ratings[1] = ratingLookup((randomNumber % 10 ** 18 / 10 ** 13));
1557         multipliers[1] = multiplierLookup((randomNumber % 10 ** 20 / 10 ** 18));
1558         //Cat 2 (3rd Cat)
1559         cats[2] = (randomNumber % 10 ** 23 / 10 ** 20) % catsInPool;
1560         ratings[2] = ratingLookup((randomNumber % 10 ** 28 / 10 ** 23));
1561         multipliers[2] = multiplierLookup((randomNumber % 10 ** 30 / 10 ** 28));
1562         //Cat 3 (4th Cat)
1563         cats[3] = (randomNumber % 10 ** 33 / 10 ** 30) % catsInPool;
1564         ratings[3] = ratingLookup((randomNumber % 10 ** 38 / 10 ** 33));
1565         multipliers[3] = multiplierLookup((randomNumber % 10 ** 40 / 10 ** 38));
1566         //Cat 4 (5th Cat)
1567         cats[4] = (randomNumber % 10 ** 43 / 10 ** 40) % catsInPool;
1568         ratings[4] = ratingLookup((randomNumber % 10 ** 48 / 10 ** 43));
1569         multipliers[4] = multiplierLookup((randomNumber % 10 ** 50 / 10 ** 48));
1570 
1571         //The token ID is determined by numerically concatenating the cat number, rating, and multiplier. Identical cats will just generate more of the same token ID.
1572         //The format is [Cat Number 0] + [Rating 000] + [Multiplier 0]. e.g. token ID 40793 is a Parvati cat with a 79 rating, and a 3x multiplier. The middle number has a leading zero because it is possible for the rating to be 100.
1573         //Cat 1 is Sakura
1574         //Cat 2 is Anurak
1575         //Cat 3 is Chukcha
1576         //Cat 4 is Parvati
1577         //Cat 5 is Gatinho
1578         //Cat 6 is Gaston
1579         //Cat 7 is Plezier
1580         //Cat 8 is Yulenka
1581         //Cat 9 is Cooter
1582         for (uint i = 0; i < 5; i++) {
1583             tokenIDs[i] = (((cats[i] + 1) * 10 ** 4) + (ratings[i] * 10)) + multipliers[i];
1584         }
1585 
1586         _mintBatch(buyer, tokenIDs, amounts);
1587     }
1588 }
1589 
1590 //The BuyEtherCatsFoundersSeries contract was created by Woody Deck, with snippets from Chainlink included under their MIT License (posted above).
1591 contract BuyEtherCatsFoundersSeries is VRFConsumerBase, EtherCatsFactory {
1592     address public contractOwner;
1593     address payable public receiverAccount;
1594     uint256 public price;
1595     bool public forSale;
1596     bool public permanentlyStop;
1597     bytes32 internal keyHash;
1598     uint256 internal fee;
1599     uint256 internal randomResult;
1600 
1601     //Because the transaction of minting cats is between two transactions, you must map the request id to keep track of the operator address in accordance with the ERC1155 standard.
1602     mapping(bytes32 => address) buyerAddress;
1603 
1604     constructor()
1605     VRFConsumerBase(
1606         0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, //VRF Coordinator
1607         0x514910771AF9Ca656af840dff83E8264EcF986CA //LINK Token
1608     ) public {
1609         //Chainlink key hash.
1610         keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;
1611         fee = 2 * 10 ** 18; //2 LINK
1612         contractOwner = msg.sender;
1613         receiverAccount = msg.sender;
1614         price = 0.15 * 10 ** 18;
1615         forSale = false;
1616         permanentlyStop = false;
1617     }
1618 
1619     modifier onlyOwner() {
1620         require(msg.sender == contractOwner);
1621         _;
1622     }
1623     //The request to Chainlink for a random number. There are two transactions that must be confirmed in separate blocks. Cats are not minted until Chainlink calls back with the random number.
1624     function getRandomNumber() internal returns(bytes32 requestId) {
1625         uint256 userProvidedSeed = 0;
1626         require(LINK.balanceOf(address(this)) > fee, "Not enough LINK - fill contract with faucet");
1627         requestId = requestRandomness(keyHash, fee, userProvidedSeed);
1628         buyerAddress[requestId] = msg.sender;
1629         return requestId;
1630     }
1631 
1632     //When the Chainlink VRF coordinator calls back with the random number the cats are then minted.
1633     function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
1634         require(msg.sender == 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, "Only the VRF Coordinator may call this function.");
1635         mintFiveCats(buyerAddress[requestId], randomness);
1636 
1637     }
1638 
1639     //The transaction starts here when minting cats. It calls the function to Chainlink to request a verifiably random number.
1640     function mint() payable external {
1641         if (msg.value == price && forSale == true && permanentlyStop == false) {
1642             receiverAccount.transfer(msg.value);
1643             getRandomNumber();
1644         } else {
1645             revert();
1646         }
1647     }
1648 
1649     //Start or pause the minting functionality in the contract.
1650     function changeSaleState() external onlyOwner {
1651         forSale = !forSale;
1652     }
1653 
1654     //Permanently stops minting. This cannot be reverted. Only can be triggered when forSale is false.
1655     function permanentlyStopMinting() external onlyOwner {
1656         if (forSale == false) {
1657             permanentlyStop = true;
1658         } else {
1659             revert();
1660         }
1661     }
1662 
1663     //Change the price of minting. The price of minting is dependent on the price of LINK.
1664     function changePrice(uint256 newPrice) external onlyOwner {
1665         price = newPrice;
1666     }
1667 
1668     //Set the receiving account of the Ether paid for minting.
1669     function changeReceivingAccount(address payable newReceivingAddress) external onlyOwner {
1670         receiverAccount = newReceivingAddress;
1671     }
1672     
1673     //Burn one token.
1674     function burn(address account, uint256 id, uint256 amount) external {
1675         require(account == msg.sender, "You can only burn your own tokens.");
1676         _burn(account, id, amount);
1677     }
1678     
1679     //Burn more than one token.
1680     function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public {
1681         require(account == msg.sender, "You can only burn your own tokens.");
1682         _burnBatch(account, ids, amounts);
1683     }
1684     
1685     //Since the token ids are deterministic, include all property details, and the cat names are declared in the contract comments, the metadata can be safely updated if needed without compromising the integrity of the tokens.
1686     //This function allows the metadata to be updated, and the location of it to be changed.
1687     function setURI(string memory newuri) public onlyOwner {
1688         _uri = newuri;
1689     }
1690 
1691     //Withdraw all of the LINK from the contract.
1692     function withdrawLink() public onlyOwner {
1693     LinkTokenInterface link = LinkTokenInterface(0x514910771AF9Ca656af840dff83E8264EcF986CA);
1694     require(link.transfer(receiverAccount, link.balanceOf(address(this))), "Unable to transfer");
1695     }
1696 }