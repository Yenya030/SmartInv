1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/SlimeShop.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\nimport {MerkleProofLib} from \"solady/utils/MerkleProofLib.sol\";\nimport {BoundLayerableFirstComposedCutoff} from \"bound-layerable/examples/BoundLayerableFirstComposedCutoff.sol\";\nimport {CommissionWithdrawable} from \"utility-contracts/withdrawable/CommissionWithdrawable.sol\";\nimport {ConstructorArgs} from \"./Structs.sol\";\nimport {ERC2981} from \"openzeppelin-contracts/contracts/token/common/ERC2981.sol\";\nimport {ERC721A} from \"bound-layerable/token/ERC721A.sol\";\n\n// ░██████╗██╗░░░░░██╗███╗░░░███╗███████╗░██████╗██╗░░██╗░█████╗░██████╗░\n// ██╔════╝██║░░░░░██║████╗░████║██╔════╝██╔════╝██║░░██║██╔══██╗██╔══██╗\n// ╚█████╗░██║░░░░░██║██╔████╔██║█████╗░░╚█████╗░███████║██║░░██║██████╔╝\n// ░╚═══██╗██║░░░░░██║██║╚██╔╝██║██╔══╝░░░╚═══██╗██╔══██║██║░░██║██╔═══╝░\n// ██████╔╝███████╗██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝██║░░░░░\n// ╚═════╝░╚══════╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░\ncontract SlimeShop is\n    BoundLayerableFirstComposedCutoff,\n    ERC2981,\n    CommissionWithdrawable\n{\n    struct PublicMintParameters {\n        uint64 publicMintPrice;\n        uint64 publicSaleStartTime;\n        uint64 maxMintedSetsPerWallet;\n    }\n\n    PublicMintParameters public publicMintParameters;\n    bytes32 public merkleRoot;\n\n    error IncorrectPayment(uint256 got, uint256 want);\n    error InvalidProof();\n    error MaxMintsExceeded(uint256 numLeft);\n    error MintNotActive(uint256 startTime);\n\n    constructor(ConstructorArgs memory args)\n        BoundLayerableFirstComposedCutoff(\n            args.name,\n            args.symbol,\n            args.vrfCoordinatorAddress,\n            args.maxNumSets,\n            args.numTokensPerSet,\n            args.subscriptionId,\n            args.metadataContractAddress,\n            args.firstComposedCutoff,\n            args.exclusiveLayerId,\n            16,\n            args.keyHash\n        )\n        CommissionWithdrawable(args.feeRecipient, args.feeBps)\n    {\n        publicMintParameters = PublicMintParameters({\n            publicMintPrice: args.publicMintPrice,\n            publicSaleStartTime: args.startTime,\n            maxMintedSetsPerWallet: args.maxSetsPerWallet\n        });\n\n        merkleRoot = args.merkleRoot;\n        _setDefaultRoyalty(\n            args.royaltyInfo.receiver,\n            args.royaltyInfo.royaltyFraction\n        );\n    }\n\n    function mint(uint256 numSets) public payable canMint(numSets) {\n        PublicMintParameters memory params = publicMintParameters;\n        uint256 _publicSaleStartTime = params.publicSaleStartTime;\n        if (block.timestamp < _publicSaleStartTime) {\n            revert MintNotActive(_publicSaleStartTime);\n        }\n        uint256 price = params.publicMintPrice * numSets;\n        if (msg.value != price) {\n            revert IncorrectPayment(msg.value, price);\n        }\n        uint256 numSetsMinted = _numberMinted(msg.sender) / NUM_TOKENS_PER_SET;\n        if (params.maxMintedSetsPerWallet < numSetsMinted + numSets) {\n            revert MaxMintsExceeded(\n                params.maxMintedSetsPerWallet - numSetsMinted\n            );\n        }\n        _mint(msg.sender, numSets * NUM_TOKENS_PER_SET);\n    }\n\n    function mintAllowList(\n        uint256 numSets,\n        uint256 mintPrice,\n        uint256 maxMintedSetsForWallet,\n        uint256 startTime,\n        bytes32[] calldata proof\n    ) public payable canMint(numSets) {\n        if (block.timestamp < startTime) {\n            revert MintNotActive(startTime);\n        }\n        if (msg.value < mintPrice) {\n            revert IncorrectPayment(msg.value, mintPrice);\n        }\n        uint256 numberMinted = _numberMinted(msg.sender) / NUM_TOKENS_PER_SET;\n        if (maxMintedSetsForWallet < numberMinted + numSets) {\n            revert MaxMintsExceeded(maxMintedSetsForWallet - numberMinted);\n        }\n        bool isValid = MerkleProofLib.verify(\n            proof,\n            merkleRoot,\n            keccak256(\n                abi.encodePacked(\n                    msg.sender,\n                    mintPrice,\n                    maxMintedSetsForWallet,\n                    startTime\n                )\n            )\n        );\n        if (!isValid) {\n            revert InvalidProof();\n        }\n\n        _mint(msg.sender, numSets * NUM_TOKENS_PER_SET);\n    }\n\n    /**\n     * @notice Determine layer type by its token ID\n     */\n    function getLayerType(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (uint8 layerType)\n    {\n        uint256 numTokensPerSet = NUM_TOKENS_PER_SET;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            layerType := mod(tokenId, numTokensPerSet)\n            if gt(layerType, 5) {\n                layerType := 5\n            }\n        }\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override(ERC721A)\n        returns (string memory)\n    {\n        return _tokenURI(tokenId);\n    }\n\n    function getPublicSaleStartTime() public view virtual returns (uint64) {\n        return publicMintParameters.publicSaleStartTime;\n    }\n\n    function getPublicMintPrice() public view virtual returns (uint64) {\n        return publicMintParameters.publicMintPrice;\n    }\n\n    function getPublicMaxSetsPerWallet() public view virtual returns (uint64) {\n        return publicMintParameters.maxMintedSetsPerWallet;\n    }\n\n    function getNumberMintedForAddress(address addr)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return _numberMinted(addr);\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    function setPublicSaleStartTime(uint64 startTime) public onlyOwner {\n        publicMintParameters.publicSaleStartTime = startTime;\n    }\n\n    function setPublicMintPrice(uint64 price) public onlyOwner {\n        publicMintParameters.publicMintPrice = price;\n    }\n\n    function setMaxMintedSetsPerWallet(uint64 maxMintedSetsPerWallet)\n        public\n        onlyOwner\n    {\n        publicMintParameters.maxMintedSetsPerWallet = maxMintedSetsPerWallet;\n    }\n\n    function setDefaultRoyalty(address receiver, uint96 royaltyFraction)\n        public\n        onlyOwner\n    {\n        _setDefaultRoyalty(receiver, royaltyFraction);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721A, ERC2981)\n        returns (bool)\n    {\n        return\n            interfaceId == type(ERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
6     },
7     "lib/solady/src/utils/MerkleProofLib.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Gas optimized verification of proof of inclusion for a leaf in a Merkle tree.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol)\nlibrary MerkleProofLib {\n    function verify(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool isValid) {\n        assembly {\n            if proof.length {\n                // Left shift by 5 is equivalent to multiplying by 0x20.\n                let end := add(proof.offset, shl(5, proof.length))\n                // Initialize `offset` to the offset of `proof` in the calldata.\n                let offset := proof.offset\n                // Iterate over proof elements to compute root hash.\n                // prettier-ignore\n                for {} 1 {} {\n                    // Slot of `leaf` in scratch space.\n                    // If the condition is true: 0x20, otherwise: 0x00.\n                    let scratch := shl(5, gt(leaf, calldataload(offset)))\n                    // Store elements to hash contiguously in scratch space.\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\n                    mstore(scratch, leaf)\n                    mstore(xor(scratch, 0x20), calldataload(offset))\n                    // Reuse `leaf` to store the hash to reduce stack operations.\n                    leaf := keccak256(0x00, 0x40)\n                    offset := add(offset, 0x20)\n                    // prettier-ignore\n                    if iszero(lt(offset, end)) { break }\n                }\n            }\n            isValid := eq(leaf, root)\n        }\n    }\n\n    function verifyMultiProof(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32[] calldata leafs,\n        bool[] calldata flags\n    ) internal pure returns (bool isValid) {\n        // Rebuilds the root by consuming and producing values on a queue.\n        // The queue starts with the `leafs` array, and goes into a `hashes` array.\n        // After the process, the last element on the queue is verified\n        // to be equal to the `root`.\n        //\n        // The `flags` array denotes whether the sibling\n        // should be popped from the queue (`flag == true`), or\n        // should be popped from the `proof` (`flag == false`).\n        assembly {\n            // If the number of flags is correct.\n            // prettier-ignore\n            for {} eq(add(leafs.length, proof.length), add(flags.length, 1)) {} {\n                // Left shift by 5 is equivalent to multiplying by 0x20.\n                // Compute the end calldata offset of `leafs`.\n                let leafsEnd := add(leafs.offset, shl(5, leafs.length))\n                // These are the calldata offsets.\n                let leafsOffset := leafs.offset\n                let flagsOffset := flags.offset\n                let proofOffset := proof.offset\n\n                // We can use the free memory space for the queue.\n                // We don't need to allocate, since the queue is temporary.\n                let hashesFront := mload(0x40)\n                let hashesBack := hashesFront\n                // This is the end of the memory for the queue.\n                let end := add(hashesBack, shl(5, flags.length))\n\n                // For the case where `proof.length + leafs.length == 1`.\n                if iszero(flags.length) {\n                    // If `proof.length` is zero, `leafs.length` is 1.\n                    if iszero(proof.length) {\n                        isValid := eq(calldataload(leafsOffset), root)\n                        break\n                    }\n                    // If `leafs.length` is zero, `proof.length` is 1.\n                    if iszero(leafs.length) {\n                        isValid := eq(calldataload(proofOffset), root)\n                        break\n                    }\n                }\n\n                // prettier-ignore\n                for {} 1 {} {\n                    let a := 0\n                    // Pops a value from the queue into `a`.\n                    switch lt(leafsOffset, leafsEnd)\n                    case 0 {\n                        // Pop from `hashes` if there are no more leafs.\n                        a := mload(hashesFront)\n                        hashesFront := add(hashesFront, 0x20)\n                    }\n                    default {\n                        // Otherwise, pop from `leafs`.\n                        a := calldataload(leafsOffset)\n                        leafsOffset := add(leafsOffset, 0x20)\n                    }\n\n                    let b := 0\n                    // If the flag is false, load the next proof,\n                    // else, pops from the queue.\n                    switch calldataload(flagsOffset)\n                    case 0 {\n                        // Loads the next proof.\n                        b := calldataload(proofOffset)\n                        proofOffset := add(proofOffset, 0x20)\n                    }\n                    default {\n                        // Pops a value from the queue into `a`.\n                        switch lt(leafsOffset, leafsEnd)\n                        case 0 {\n                            // Pop from `hashes` if there are no more leafs.\n                            b := mload(hashesFront)\n                            hashesFront := add(hashesFront, 0x20)\n                        }\n                        default {\n                            // Otherwise, pop from `leafs`.\n                            b := calldataload(leafsOffset)\n                            leafsOffset := add(leafsOffset, 0x20)\n                        }\n                    }\n                    // Advance to the next flag offset.\n                    flagsOffset := add(flagsOffset, 0x20)\n\n                    // Slot of `a` in scratch space.\n                    // If the condition is true: 0x20, otherwise: 0x00.\n                    let scratch := shl(5, gt(a, b))\n                    // Hash the scratch space and push the result onto the queue.\n                    mstore(scratch, a)\n                    mstore(xor(scratch, 0x20), b)\n                    mstore(hashesBack, keccak256(0x00, 0x40))\n                    hashesBack := add(hashesBack, 0x20)\n                    // prettier-ignore\n                    if iszero(lt(hashesBack, end)) { break }\n                }\n                // Checks if the last value in the queue is same as the root.\n                isValid := eq(mload(sub(hashesBack, 0x20)), root)\n                break\n            }\n        }\n    }\n}\n"
9     },
10     "lib/bound-layerable/src/examples/BoundLayerableFirstComposedCutoff.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {BoundLayerable} from '../BoundLayerable.sol';\n\n/**\n * @notice BoundLayerable contract that automatically binds a special layer if composed (layers are bound)\n *         before the cutoff time\n */\nabstract contract BoundLayerableFirstComposedCutoff is BoundLayerable {\n    uint256 immutable FIRST_COMPOSED_CUTOFF;\n    uint8 immutable EXCLUSIVE_LAYER_ID;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address vrfCoordinatorAddress,\n        uint240 maxNumSets,\n        uint8 numTokensPerSet,\n        uint64 subscriptionId,\n        address metadataContractAddress,\n        uint256 firstComposedCutoff,\n        uint8 exclusiveLayerId,\n        uint8 numRandomBatches,\n        bytes32 keyHash\n    )\n        BoundLayerable(\n            name,\n            symbol,\n            vrfCoordinatorAddress,\n            maxNumSets,\n            numTokensPerSet,\n            subscriptionId,\n            metadataContractAddress,\n            numRandomBatches,\n            keyHash\n        )\n    {\n        FIRST_COMPOSED_CUTOFF = firstComposedCutoff;\n        EXCLUSIVE_LAYER_ID = exclusiveLayerId;\n    }\n\n    function _setBoundLayersAndEmitEvent(uint256 baseTokenId, uint256 bindings)\n        internal\n        virtual\n        override\n    {\n        // automatically bind a special layer if the base token was composed before the cutoff time\n        uint256 exclusiveLayerId = EXCLUSIVE_LAYER_ID;\n        uint256 firstComposedCutoff = FIRST_COMPOSED_CUTOFF;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // conditionally set the exclusive layer bit if the base token is composed before cutoff\n            bindings := or(\n                bindings,\n                shl(\n                    exclusiveLayerId,\n                    // 1 if timestamp is before cutoff, 0 otherwise (ie, no-op)\n                    lt(timestamp(), firstComposedCutoff)\n                )\n            )\n        }\n        super._setBoundLayersAndEmitEvent(baseTokenId, bindings);\n    }\n}\n"
12     },
13     "lib/utility-contracts/src/withdrawable/CommissionWithdrawable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\nimport {Withdrawable} from \"./Withdrawable.sol\";\n\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\n///@notice Ownable helper contract to withdraw ether or tokens from the contract address balance\ncontract CommissionWithdrawable is Withdrawable {\n    address internal immutable commissionPayoutAddress;\n    uint256 internal immutable commissionBps;\n\n    error CommissionPayoutAddressIsZeroAddress();\n    error CommissionBpsTooLarge();\n\n    constructor(address _commissionPayoutAddress, uint256 _commissionBps) {\n        if (_commissionPayoutAddress == address(0)) {\n            revert CommissionPayoutAddressIsZeroAddress();\n        }\n        if (_commissionBps > 10_000) {\n            revert CommissionBpsTooLarge();\n        }\n        commissionPayoutAddress = _commissionPayoutAddress;\n        commissionBps = _commissionBps;\n    }\n\n    ////////////////////////\n    // Withdrawal methods //\n    ////////////////////////\n\n    ///@notice Withdraw Ether from contract address. OnlyOwner.\n    function withdraw() external override onlyOwner {\n        uint256 balance = address(this).balance;\n        (\n            uint256 ownerShareMinusCommission,\n            uint256 commissionFee\n        ) = calculateOwnerShareAndCommissionFee(balance);\n        SafeTransferLib.safeTransferETH(owner(), ownerShareMinusCommission);\n        SafeTransferLib.safeTransferETH(commissionPayoutAddress, commissionFee);\n    }\n\n    ///@notice Withdraw tokens from contract address. OnlyOwner.\n    ///@param _token ERC20 smart contract address\n    function withdrawERC20(address _token) external override onlyOwner {\n        ERC20 token = ERC20(_token);\n        uint256 balance = token.balanceOf(address(this));\n        (\n            uint256 ownerShareMinusCommission,\n            uint256 commissionFee\n        ) = calculateOwnerShareAndCommissionFee(balance);\n        SafeTransferLib.safeTransfer(token, owner(), ownerShareMinusCommission);\n        SafeTransferLib.safeTransfer(\n            token,\n            commissionPayoutAddress,\n            commissionFee\n        );\n    }\n\n    function calculateOwnerShareAndCommissionFee(uint256 balance)\n        private\n        view\n        returns (uint256, uint256)\n    {\n        uint256 commissionFee;\n        // commissionBps is max 10000 which is ~2^14; will only overflow if balance is > ~2^242\n        if (balance < (1 << 242)) {\n            commissionFee = (balance * commissionBps) / 10000;\n        } else {\n            // worst case this drops 99_990_000, neglibible if balance is > 2^242\n            commissionFee = (balance / 10000) * commissionBps;\n        }\n        uint256 ownerShareMinusCommission = balance - commissionFee;\n        return (ownerShareMinusCommission, commissionFee);\n    }\n}\n"
15     },
16     "src/Structs.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nstruct RoyaltyInfo {\n    address receiver;\n    uint96 royaltyFraction;\n}\n\nstruct ConstructorArgs {\n    string name;\n    string symbol;\n    address vrfCoordinatorAddress;\n    uint240 maxNumSets;\n    uint8 numTokensPerSet;\n    uint64 subscriptionId;\n    address metadataContractAddress;\n    uint256 firstComposedCutoff;\n    uint8 exclusiveLayerId;\n    uint64 startTime;\n    bytes32 merkleRoot;\n    address feeRecipient;\n    uint16 feeBps;\n    RoyaltyInfo royaltyInfo;\n    uint64 publicMintPrice;\n    uint64 maxSetsPerWallet;\n    bytes32 keyHash;\n}\n"
18     },
19     "lib/murky/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
21     },
22     "lib/bound-layerable/src/token/ERC721A.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport 'ERC721A/IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) &\n            _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) &\n            _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed =\n            (packed & _BITMASK_AUX_COMPLEMENT) |\n            (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\n                : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (TokenOwnership memory)\n    {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index)\n        internal\n        view\n        virtual\n        returns (TokenOwnership memory)\n    {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed)\n        private\n        pure\n        returns (TokenOwnership memory ownership)\n    {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags)\n        private\n        view\n        returns (uint256 result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(\n                owner,\n                or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags)\n            )\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity)\n        private\n        pure\n        returns (uint256 result)\n    {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId)\n        public\n        payable\n        virtual\n        override\n    {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from)\n            revert TransferFromIncorrectOwner();\n\n        (\n            uint256 approvedAddressSlot,\n            address approvedAddress\n        ) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (\n            !_isSenderApprovedOrOwner(\n                approvedAddress,\n                from,\n                _msgSenderERC721A()\n            )\n        )\n            if (!isApprovedForAll(from, _msgSenderERC721A()))\n                revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED |\n                    _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n            ERC721A__IERC721Receiver(to).onERC721Received(\n                _msgSenderERC721A(),\n                from,\n                tokenId,\n                _data\n            )\n        returns (bytes4 retval) {\n            return\n                retval ==\n                ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] +=\n                quantity *\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) |\n                    _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT)\n            revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] +=\n                quantity *\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) |\n                    _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(\n                startTokenId,\n                startTokenId + quantity - 1,\n                address(0),\n                to\n            );\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (\n                        !_checkContractOnERC721Received(\n                            address(0),\n                            to,\n                            index++,\n                            _data\n                        )\n                    ) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    function _isBurned(uint256 tokenId) internal view returns (bool isBurned) {\n        return _packedOwnerships[tokenId] & _BITMASK_BURNED != 0;\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (\n            uint256 approvedAddressSlot,\n            address approvedAddress\n        ) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (\n                !_isSenderApprovedOrOwner(\n                    approvedAddress,\n                    from,\n                    _msgSenderERC721A()\n                )\n            )\n                if (!isApprovedForAll(from, _msgSenderERC721A()))\n                    revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\n                    _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed =\n            (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\n            (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value)\n        internal\n        pure\n        virtual\n        returns (string memory str)\n    {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
24     },
25     "lib/bound-layerable/src/BoundLayerable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {PackedByteUtility} from './lib/PackedByteUtility.sol';\nimport {BitMapUtility} from './lib/BitMapUtility.sol';\nimport {ILayerable} from './metadata/ILayerable.sol';\nimport {RandomTraits} from './traits/RandomTraits.sol';\nimport {MaxSupply, NotOwner, CannotBindBase, OnlyBase, LayerAlreadyBound, NoActiveLayers} from './interface/Errors.sol';\nimport {NOT_0TH_BITMASK, DUPLICATE_ACTIVE_LAYERS_SIGNATURE, LAYER_NOT_BOUND_TO_TOKEN_ID_SIGNATURE} from './interface/Constants.sol';\nimport {BoundLayerableEvents} from './interface/Events.sol';\n\nabstract contract BoundLayerable is RandomTraits, BoundLayerableEvents {\n    using BitMapUtility for uint256;\n\n    // mapping from tokenID to a bitmap of bound layers, where each bit is a boolean indicating the layerId at its\n    // position has been bound. Layers are bound to bases by burning them with one of the burnAndBind methods.\n    // LayerID zero is not valid, but is set at mint to reduce gas cost when binding the first layers, when it is unset\n    mapping(uint256 => uint256) internal _tokenIdToBoundLayers;\n    // mapping from tokenID to packed array of (nonzero) bytes indicating the ordered layerIds that are active for the token\n    // only layerIds bound to the base tokenId can be set as active, and duplicates are not allowed.\n    mapping(uint256 => uint256) internal _tokenIdToPackedActiveLayers;\n\n    ILayerable public metadataContract;\n\n    modifier canMint(uint256 numSets) {\n        // get number of tokens to be minted, add next token id, compare to max token id (MAX_NUM_SETS * NUM_TOKENS_PER_SET)\n        if (\n            numSets * uint256(NUM_TOKENS_PER_SET) + _nextTokenId() - 1 >\n            MAX_TOKEN_ID\n        ) {\n            revert MaxSupply();\n        }\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address vrfCoordinatorAddress,\n        uint240 maxNumSets,\n        uint8 numTokensPerSet,\n        uint64 subscriptionId,\n        address _metadataContractAddress,\n        uint8 numRandomBatches,\n        bytes32 keyHash\n    )\n        RandomTraits(\n            name,\n            symbol,\n            vrfCoordinatorAddress,\n            maxNumSets,\n            numTokensPerSet,\n            subscriptionId,\n            numRandomBatches,\n            keyHash\n        )\n    {\n        metadataContract = ILayerable(_metadataContractAddress);\n    }\n\n    /////////////\n    // GETTERS //\n    /////////////\n\n    /// @notice get the layerIds currently bound to a tokenId\n    function getBoundLayers(uint256 tokenId)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return BitMapUtility.unpackBitMap(getBoundLayerBitMap(tokenId));\n    }\n\n    /// @notice get the layerIds currently bound to a tokenId as a bit map\n    function getBoundLayerBitMap(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return _tokenIdToBoundLayers[tokenId] & NOT_0TH_BITMASK;\n    }\n\n    /// @notice get the layerIds currently active on a tokenId\n    function getActiveLayers(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint256[] memory)\n    {\n        uint256 activePackedLayers = _tokenIdToPackedActiveLayers[tokenId];\n        return PackedByteUtility.unpackByteArray(activePackedLayers);\n    }\n\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\n        // get the random seed for the token, which may not be revealed yet\n        bytes32 retrievedRandomSeed = getRandomnessForTokenIdFromSeed(\n            tokenId,\n            packedBatchRandomness\n        );\n        return\n            metadataContract.getTokenURI(\n                tokenId,\n                // only get layerId if token is revealed\n                retrievedRandomSeed == 0x00 ? 0 : getLayerId(tokenId),\n                getBoundLayerBitMap(tokenId),\n                getActiveLayers(tokenId),\n                retrievedRandomSeed\n            );\n    }\n\n    /////////////\n    // SETTERS //\n    /////////////\n\n    /// @notice set the address of the metadata contract. OnlyOwner\n    /// @param _metadataContract the address of the metadata contract\n    function setMetadataContract(ILayerable _metadataContract)\n        external\n        onlyOwner\n    {\n        _setMetadataContract(_metadataContract);\n    }\n\n    /**\n     * @notice Bind a layer token to a base token and burn the layer token. User must own both tokens.\n     * @param baseTokenId TokenID of a base token\n     * @param layerTokenId TokenID of a layer token\n     * @param packedActiveLayerIds Ordered layer IDs packed as bytes into uint256s to set as active on the base token\n     * emits LayersBoundToToken\n     * emits ActiveLayersChanged\n     */\n    function burnAndBindSingleAndSetActiveLayers(\n        uint256 baseTokenId,\n        uint256 layerTokenId,\n        uint256 packedActiveLayerIds\n    ) public {\n        _burnAndBindSingle(baseTokenId, layerTokenId);\n        _setActiveLayers(baseTokenId, packedActiveLayerIds);\n    }\n\n    /**\n     * @notice Bind a layer token to a base token and burn the layer token. User must own both tokens.\n     * @param baseTokenId TokenID of a base token\n     * @param layerTokenIds TokenIDs of layer tokens\n     * @param packedActiveLayerIds Ordered layer IDs packed as bytes into uint256s to set as active on the base token\n     * emits LayersBoundToToken\n     * emits ActiveLayersChanged\n     */\n    function burnAndBindMultipleAndSetActiveLayers(\n        uint256 baseTokenId,\n        uint256[] calldata layerTokenIds,\n        uint256 packedActiveLayerIds\n    ) public {\n        _burnAndBindMultiple(baseTokenId, layerTokenIds);\n        _setActiveLayers(baseTokenId, packedActiveLayerIds);\n    }\n\n    /**\n     * @notice Bind a layer token to a base token and burn the layer token. User must own both tokens.\n     * @param baseTokenId TokenID of a base token\n     * @param layerTokenId TokenID of a layer token\n     * emits LayersBoundToToken\n     */\n    function burnAndBindSingle(uint256 baseTokenId, uint256 layerTokenId)\n        public\n        virtual\n    {\n        _burnAndBindSingle(baseTokenId, layerTokenId);\n    }\n\n    /**\n     * @notice Bind layer tokens to a base token and burn the layer tokens. User must own all tokens.\n     * @param baseTokenId TokenID of a base token\n     * @param layerTokenIds TokenIDs of layer tokens\n     * emits LayersBoundToToken\n     */\n    function burnAndBindMultiple(\n        uint256 baseTokenId,\n        uint256[] calldata layerTokenIds\n    ) public virtual {\n        _burnAndBindMultiple(baseTokenId, layerTokenIds);\n    }\n\n    /**\n     * @notice Set the active layer IDs for a base token. Layers must be bound to token\n     * @param baseTokenId TokenID of a base token\n     * @param packedLayerIds Ordered layer IDs packed as bytes into uint256s to set as active on the base token\n     * emits ActiveLayersChanged\n     */\n    function setActiveLayers(uint256 baseTokenId, uint256 packedLayerIds)\n        external\n        virtual\n    {\n        _setActiveLayers(baseTokenId, packedLayerIds);\n    }\n\n    function _burnAndBindMultiple(\n        uint256 baseTokenId,\n        uint256[] calldata layerTokenIds\n    ) internal virtual {\n        // check owner\n        if (ownerOf(baseTokenId) != msg.sender) {\n            revert NotOwner();\n        }\n\n        // check base\n        if (baseTokenId % NUM_TOKENS_PER_SET != 0) {\n            revert OnlyBase();\n        }\n        bytes32 traitSeed = packedBatchRandomness;\n\n        bytes32 baseSeed = getRandomnessForTokenIdFromSeed(\n            baseTokenId,\n            traitSeed\n        );\n        uint256 baseLayerId = getLayerId(baseTokenId, baseSeed);\n\n        uint256 bindings = getBoundLayerBitMap(baseTokenId);\n        // always bind baseLayer, since it won't be set automatically\n        bindings |= baseLayerId.toBitMap();\n\n        // todo: try to batch with arrays by LayerType, fetching distribution for type,\n        unchecked {\n            // todo: revisit if via_ir = true\n            uint256 length = layerTokenIds.length;\n            for (uint256 i; i < length; ) {\n                uint256 tokenId = layerTokenIds[i];\n\n                // check owner of layer\n                if (ownerOf(tokenId) != msg.sender) {\n                    revert NotOwner();\n                }\n\n                // check layer\n                if (tokenId % NUM_TOKENS_PER_SET == 0) {\n                    revert CannotBindBase();\n                }\n                bytes32 layerSeed = getRandomnessForTokenIdFromSeed(\n                    tokenId,\n                    traitSeed\n                );\n                uint256 layerId = getLayerId(tokenId, layerSeed);\n\n                // check for duplicates\n                uint256 layerIdBitMap = layerId.toBitMap();\n                if (bindings & layerIdBitMap > 0) {\n                    revert LayerAlreadyBound();\n                }\n\n                bindings |= layerIdBitMap;\n                _burn(tokenId);\n                ++i;\n            }\n        }\n        _setBoundLayersAndEmitEvent(baseTokenId, bindings);\n    }\n\n    function _burnAndBindSingle(uint256 baseTokenId, uint256 layerTokenId)\n        internal\n        virtual\n    {\n        // check ownership\n        if (\n            ownerOf(baseTokenId) != msg.sender ||\n            ownerOf(layerTokenId) != msg.sender\n        ) {\n            revert NotOwner();\n        }\n\n        // check seed\n        bytes32 traitSeed = packedBatchRandomness;\n        bytes32 baseSeed = getRandomnessForTokenIdFromSeed(\n            baseTokenId,\n            traitSeed\n        );\n\n        // check base\n        if (baseTokenId % NUM_TOKENS_PER_SET != 0) {\n            revert OnlyBase();\n        }\n        uint256 baseLayerId = getLayerId(baseTokenId, baseSeed);\n\n        bytes32 layerSeed = getRandomnessForTokenIdFromSeed(\n            layerTokenId,\n            traitSeed\n        );\n        // check layer\n        if (layerTokenId % NUM_TOKENS_PER_SET == 0) {\n            revert CannotBindBase();\n        }\n        uint256 layerId = getLayerId(layerTokenId, layerSeed);\n\n        uint256 bindings = getBoundLayerBitMap(baseTokenId);\n        // always bind baseLayer, since it won't be set automatically\n        bindings |= baseLayerId.toBitMap();\n        // TODO: necessary?\n        uint256 layerIdBitMap = layerId.toBitMap();\n        if (bindings & layerIdBitMap > 0) {\n            revert LayerAlreadyBound();\n        }\n\n        _burn(layerTokenId);\n        _setBoundLayersAndEmitEvent(baseTokenId, bindings | layerIdBitMap);\n    }\n\n    function _setActiveLayers(uint256 baseTokenId, uint256 packedLayerIds)\n        internal\n        virtual\n    {\n        // TODO: explicitly test this\n        if (packedLayerIds == 0) {\n            revert NoActiveLayers();\n        }\n        // check owner\n        if (ownerOf(baseTokenId) != msg.sender) {\n            revert NotOwner();\n        }\n\n        // check base\n        if (baseTokenId % NUM_TOKENS_PER_SET != 0) {\n            revert OnlyBase();\n        }\n\n        // unpack layers into a single bitmap and check there are no duplicates\n        (\n            uint256 unpackedLayers,\n            uint256 numLayers\n        ) = _unpackLayersToBitMapAndCheckForDuplicates(packedLayerIds);\n\n        // check new active layers are all bound to baseTokenId\n        uint256 boundLayers = getBoundLayerBitMap(baseTokenId);\n        _checkUnpackedIsSubsetOfBound(unpackedLayers, boundLayers);\n\n        // clear all bytes after last non-zero bit on packedLayerIds,\n        // since unpacking to bitmap short-circuits on first zero byte\n        uint256 maskedPackedLayerIds;\n        // num layers can never be >32, so 256 - (numLayers * 8) can never negative-oveflow\n        unchecked {\n            maskedPackedLayerIds =\n                packedLayerIds &\n                (type(uint256).max << (256 - (numLayers * 8)));\n        }\n\n        _tokenIdToPackedActiveLayers[baseTokenId] = maskedPackedLayerIds;\n        emit ActiveLayersChanged(msg.sender, baseTokenId, maskedPackedLayerIds);\n    }\n\n    function _setBoundLayersAndEmitEvent(uint256 baseTokenId, uint256 bindings)\n        internal\n        virtual\n    {\n        // 0 is not a valid layerId, so make sure it is not set on bindings.\n        bindings = bindings & NOT_0TH_BITMASK;\n        _tokenIdToBoundLayers[baseTokenId] = bindings;\n        emit LayersBoundToToken(msg.sender, baseTokenId, bindings);\n    }\n\n    /**\n     * @notice Unpack bytepacked layerIds and check that there are no duplicates\n     * @param bytePackedLayers uint256 of packed layerIds\n     * @return bitMap uint256 of unpacked layerIds\n     */\n    function _unpackLayersToBitMapAndCheckForDuplicates(\n        uint256 bytePackedLayers\n    ) internal virtual returns (uint256 bitMap, uint256 numLayers) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {\n\n            } lt(numLayers, 32) {\n                numLayers := add(1, numLayers)\n            } {\n                let layer := byte(numLayers, bytePackedLayers)\n                if iszero(layer) {\n                    break\n                }\n                // put copy of bitmap on stack\n                let lastBitMap := bitMap\n                // OR layer into bitmap\n                bitMap := or(bitMap, shl(layer, 1))\n                // check equality - if equal, layer is a duplicate\n                if eq(lastBitMap, bitMap) {\n                    mstore(\n                        0,\n                        // revert DuplicateActiveLayers()\n                        DUPLICATE_ACTIVE_LAYERS_SIGNATURE\n                    )\n                    revert(0, 4)\n                }\n            }\n        }\n    }\n\n    function _checkUnpackedIsSubsetOfBound(uint256 subset, uint256 superset)\n        internal\n        pure\n        virtual\n    {\n        // superset should be superset of subset, compare union to superset\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(or(superset, subset), superset)) {\n                mstore(\n                    0,\n                    // revert LayerNotBoundToTokenId()\n                    LAYER_NOT_BOUND_TO_TOKEN_ID_SIGNATURE\n                )\n                let disjoint := xor(superset, subset)\n                let notBound := and(disjoint, subset)\n                mstore(4, notBound)\n                revert(0, 36)\n            }\n        }\n    }\n\n    function _setMetadataContract(ILayerable _metadataContract)\n        internal\n        virtual\n    {\n        metadataContract = _metadataContract;\n    }\n\n    /////////////\n    // HELPERS //\n    /////////////\n\n    /// @dev set 0th bit to 1 in order to make first binding cost cheaper for user\n    function _setPlaceholderBinding(uint256 tokenId) internal {\n        _tokenIdToBoundLayers[tokenId] = 1;\n    }\n\n    function _setPlaceholderActiveLayers(uint256 tokenId) internal {\n        _tokenIdToPackedActiveLayers[tokenId] = 1;\n    }\n}\n"
27     },
28     "lib/utility-contracts/src/withdrawable/Withdrawable.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\nimport {TwoStepOwnable} from \"../TwoStepOwnable.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {ERC721} from \"solmate/tokens/ERC721.sol\";\nimport {IWithdrawable} from \"./IWithdrawable.sol\";\n\n///@notice Ownable helper contract to withdraw ether or tokens from the contract address balance\ncontract Withdrawable is TwoStepOwnable, IWithdrawable {\n    ///@notice Withdraw Ether from contract address. OnlyOwner.\n    function withdraw() external virtual onlyOwner {\n        uint256 balance = address(this).balance;\n        SafeTransferLib.safeTransferETH(owner(), balance);\n    }\n\n    ///@notice Withdraw tokens from contract address. OnlyOwner.\n    ///@param _token ERC20 smart contract address\n    function withdrawERC20(address _token) external virtual onlyOwner {\n        ERC20 token = ERC20(_token);\n        uint256 balance = ERC20(_token).balanceOf(address(this));\n        SafeTransferLib.safeTransfer(token, owner(), balance);\n    }\n\n    ///@notice Withdraw tokens from contract address. OnlyOwner.\n    ///@param _token ERC721 smart contract address\n    function withdrawERC721(address _token, uint256 tokenId)\n        external\n        virtual\n        onlyOwner\n    {\n        ERC721 token = ERC721(_token);\n        token.transferFrom(address(this), owner(), tokenId);\n    }\n}\n"
30     },
31     "lib/solmate/src/utils/SafeTransferLib.sol": {
32       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
33     },
34     "lib/solmate/src/tokens/ERC20.sol": {
35       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
36     },
37     "lib/murky/lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
39     },
40     "lib/murky/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
42     },
43     "lib/bound-layerable/lib/ERC721A/contracts/IERC721A.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
45     },
46     "lib/bound-layerable/src/lib/PackedByteUtility.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '../interface/Constants.sol';\n\nlibrary PackedByteUtility {\n    /**\n     * @notice get the byte value of a right-indexed byte within a uint256\n     * @param  index right-indexed location of byte within uint256\n     * @param  packedBytes uint256 of bytes\n     * @return result the byte at right-indexed index within packedBytes\n     */\n    function getPackedByteFromRight(uint256 packedBytes, uint256 index)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := byte(sub(31, index), packedBytes)\n        }\n    }\n\n    /**\n     * @notice get the byte value of a left-indexed byte within a uint256\n     * @param  index left-indexed location of byte within uint256\n     * @param  packedBytes uint256 of bytes\n     * @return result the byte at left-indexed index within packedBytes\n     */\n    function getPackedByteFromLeft(uint256 packedBytes, uint256 index)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := byte(index, packedBytes)\n        }\n    }\n\n    function packShortAtIndex(\n        uint256 packedShorts,\n        uint256 shortToPack,\n        uint256 index\n    ) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let shortOffset := sub(240, shl(4, index))\n            let mask := xor(MAX_INT, shl(shortOffset, 0xffff))\n            result := and(packedShorts, mask)\n            result := or(result, shl(shortOffset, shortToPack))\n        }\n    }\n\n    function getPackedShortFromRight(uint256 packed, uint256 index)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        assembly {\n            let shortOffset := shl(4, index)\n            result := shr(shortOffset, packed)\n            result := and(result, 0xffff)\n        }\n    }\n\n    function getPackedNFromRight(\n        uint256 packed,\n        uint256 bitsPerIndex,\n        uint256 index\n    ) internal pure returns (uint256 result) {\n        assembly {\n            let offset := mul(bitsPerIndex, index)\n            let mask := sub(shl(bitsPerIndex, 1), 1)\n            result := shr(offset, packed)\n            result := and(result, mask)\n        }\n    }\n\n    function packNAtRightIndex(\n        uint256 packed,\n        uint256 bitsPerIndex,\n        uint256 toPack,\n        uint256 index\n    ) internal pure returns (uint256 result) {\n        assembly {\n            // left-shift offset\n            let offset := mul(bitsPerIndex, index)\n            // mask for 2**n uint\n            let nMask := sub(shl(bitsPerIndex, 1), 1)\n            // mask to clear bits at offset\n            let mask := xor(MAX_INT, shl(offset, nMask))\n            // clear bits at offset\n            result := and(packed, mask)\n            // shift toPack to offset, then pack\n            result := or(result, shl(offset, toPack))\n        }\n    }\n\n    function getPackedShortFromLeft(uint256 packed, uint256 index)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        assembly {\n            let shortOffset := sub(240, shl(4, index))\n            result := shr(shortOffset, packed)\n            result := and(result, 0xffff)\n        }\n    }\n\n    /**\n     * @notice unpack elements of a packed byte array into a bitmap. Short-circuits at first 0-byte.\n     * @param  packedBytes uint256 of bytes\n     * @return unpacked - 1-indexed bitMap of all byte values contained in packedBytes up until the first 0-byte\n     */\n    function unpackBytesToBitMap(uint256 packedBytes)\n        internal\n        pure\n        returns (uint256 unpacked)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {\n                let i := 0\n            } lt(i, 32) {\n                i := add(i, 1)\n            } {\n                // this is the ID of the layer, eg, 1, 5, 253\n                let byteVal := byte(i, packedBytes)\n                // don't count zero bytes\n                if iszero(byteVal) {\n                    break\n                }\n                // byteVals are 1-indexed because we're shifting 1 by the value of the byte\n                unpacked := or(unpacked, shl(byteVal, 1))\n            }\n        }\n    }\n\n    /**\n     * @notice pack byte values into a uint256. Note: *will not* short-circuit on first 0-byte\n     * @param  arrayOfBytes uint256[] of byte values\n     * @return packed uint256 of packed bytes\n     */\n    function packArrayOfBytes(uint256[] memory arrayOfBytes)\n        internal\n        pure\n        returns (uint256 packed)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let arrayOfBytesIndexPtr := add(arrayOfBytes, 0x20)\n            let arrayOfBytesLength := mload(arrayOfBytes)\n            if gt(arrayOfBytesLength, 32) {\n                arrayOfBytesLength := 32\n            }\n            let finalI := shl(3, arrayOfBytesLength)\n            let i\n            for {\n\n            } lt(i, finalI) {\n                arrayOfBytesIndexPtr := add(0x20, arrayOfBytesIndexPtr)\n                i := add(8, i)\n            } {\n                packed := or(\n                    packed,\n                    shl(sub(248, i), mload(arrayOfBytesIndexPtr))\n                )\n            }\n        }\n    }\n\n    function packArrayOfShorts(uint256[] memory shorts)\n        internal\n        pure\n        returns (uint256[2] memory packed)\n    {\n        packed = [uint256(0), uint256(0)];\n        for (uint256 i; i < shorts.length; i++) {\n            if (i == 32) {\n                break;\n            }\n            uint256 j = i / 16;\n            uint256 index = i % 16;\n            packed[j] = packShortAtIndex(packed[j], shorts[i], index);\n        }\n    }\n\n    /**\n     * @notice Unpack a packed uint256 of bytes into a uint256 array of byte values. Short-circuits on first 0-byte.\n     * @param  packedByteArray The packed uint256 of bytes to unpack\n     * @return unpacked uint256[] The unpacked uint256 array of bytes\n     */\n    function unpackByteArray(uint256 packedByteArray)\n        internal\n        pure\n        returns (uint256[] memory unpacked)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            unpacked := mload(0x40)\n            let unpackedIndexPtr := add(0x20, unpacked)\n            let maxUnpackedIndexPtr := add(unpackedIndexPtr, shl(5, 32))\n            let numBytes\n            for {\n\n            } lt(unpackedIndexPtr, maxUnpackedIndexPtr) {\n                unpackedIndexPtr := add(0x20, unpackedIndexPtr)\n                numBytes := add(1, numBytes)\n            } {\n                let byteVal := byte(numBytes, packedByteArray)\n                if iszero(byteVal) {\n                    break\n                }\n                mstore(unpackedIndexPtr, byteVal)\n            }\n            // store the number of layers at the pointer to unpacked array\n            mstore(unpacked, numBytes)\n            // update free mem pointer to be old mem ptr + 0x20 (32-byte array length) + 0x20 * numLayers (each 32-byte element)\n            mstore(0x40, add(unpacked, add(0x20, shl(5, numBytes))))\n        }\n    }\n\n    /**\n     * @notice given a uint256 packed array of bytes, pack a byte at an index from the left\n     * @param packedBytes existing packed bytes\n     * @param byteToPack byte to pack into packedBytes\n     * @param index index to pack byte at\n     * @return newPackedBytes with byteToPack at index\n     */\n    function packByteAtIndex(\n        uint256 packedBytes,\n        uint256 byteToPack,\n        uint256 index\n    ) internal pure returns (uint256 newPackedBytes) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // calculate left-indexed bit offset of byte within packedBytes\n            let byteOffset := sub(248, shl(3, index))\n            // create a mask to clear the bits we're about to overwrite\n            let mask := xor(MAX_INT, shl(byteOffset, 0xff))\n            // copy packedBytes to newPackedBytes, clearing the relevant bits\n            newPackedBytes := and(packedBytes, mask)\n            // shift the byte to the offset and OR it into newPackedBytes\n            newPackedBytes := or(newPackedBytes, shl(byteOffset, byteToPack))\n        }\n    }\n\n    /// @dev less efficient logic for packing >32 bytes into >1 uint256\n    function packArraysOfBytes(uint256[] memory arrayOfBytes)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256 arrayOfBytesLength = arrayOfBytes.length;\n        uint256[] memory packed = new uint256[](\n            (arrayOfBytesLength - 1) / 32 + 1\n        );\n        uint256 workingWord = 0;\n        for (uint256 i = 0; i < arrayOfBytesLength; ) {\n            // OR workingWord with this byte shifted by byte within the word\n            workingWord |= uint256(arrayOfBytes[i]) << (8 * (31 - (i % 32)));\n\n            // if we're on the last byte of the word, store in array\n            if (i % 32 == 31) {\n                uint256 j = i / 32;\n                packed[j] = workingWord;\n                workingWord = 0;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        if (arrayOfBytesLength % 32 != 0) {\n            packed[packed.length - 1] = workingWord;\n        }\n\n        return packed;\n    }\n\n    /// @dev less efficient logic for unpacking >1 uint256s into >32 byte values\n    function unpackByteArrays(uint256[] memory packedByteArrays)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256 packedByteArraysLength = packedByteArrays.length;\n        uint256[] memory unpacked = new uint256[](packedByteArraysLength * 32);\n        for (uint256 i = 0; i < packedByteArraysLength; ) {\n            uint256 packedByteArray = packedByteArrays[i];\n            uint256 j = 0;\n            for (; j < 32; ) {\n                uint256 unpackedByte = getPackedByteFromLeft(\n                    j,\n                    packedByteArray\n                );\n                if (unpackedByte == 0) {\n                    break;\n                }\n                unpacked[i * 32 + j] = unpackedByte;\n                unchecked {\n                    ++j;\n                }\n            }\n            if (j < 32) {\n                break;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        return unpacked;\n    }\n}\n"
48     },
49     "lib/bound-layerable/src/lib/BitMapUtility.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '../interface/Constants.sol';\n\nlibrary BitMapUtility {\n    /**\n     * @notice Convert a byte value into a bitmap, where the bit at position val is set to 1, and all others 0\n     * @param  val byte value to convert to bitmap\n     * @return bitmap of val\n     */\n    function toBitMap(uint256 val) internal pure returns (uint256 bitmap) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            bitmap := shl(val, 1)\n        }\n    }\n\n    /**\n     * @notice get the intersection of two bitMaps by ANDing them together\n     * @param  target first bitmap\n     * @param  test second bitmap\n     * @return result bitmap with only bits active in both bitmaps set to 1\n     */\n    function intersect(uint256 target, uint256 test)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := and(target, test)\n        }\n    }\n\n    /**\n     * @notice check if bitmap has byteVal set to 1\n     * @param  target first bitmap\n     * @param  byteVal bit position to check in target\n     * @return result true if bitmap contains byteVal\n     */\n    function contains(uint256 target, uint256 byteVal)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := and(shr(byteVal, target), 1)\n        }\n    }\n\n    /**\n     * @notice check if union of two bitmaps is equal to the first\n     * @param  superset first bitmap\n     * @param  subset second bitmap\n     * @return result true if superset is a superset of subset, false otherwise\n     */\n    function isSupersetOf(uint256 superset, uint256 subset)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(superset, or(superset, subset))\n        }\n    }\n\n    /**\n     * @notice unpack a bitmap into an array of included byte values\n     * @param  bitMap bitMap to unpack into byte values\n     * @return unpacked array of byte values included in bitMap, sorted from smallest to largest\n     */\n    function unpackBitMap(uint256 bitMap)\n        internal\n        pure\n        returns (uint256[] memory unpacked)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(bitMap) {\n                let freePtr := mload(0x40)\n                mstore(0x40, add(freePtr, 0x20))\n                return(freePtr, 0x20)\n            }\n            function lsb(x) -> r {\n                x := and(x, add(not(x), 1))\n                r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n                r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n                r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n\n                x := shr(r, x)\n                x := or(x, shr(1, x))\n                x := or(x, shr(2, x))\n                x := or(x, shr(4, x))\n                x := or(x, shr(8, x))\n                x := or(x, shr(16, x))\n\n                r := or(\n                    r,\n                    byte(\n                        and(31, shr(27, mul(x, 0x07C4ACDD))),\n                        0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f\n                    )\n                )\n            }\n\n            // set unpacked ptr to free mem\n            unpacked := mload(0x40)\n            // get ptr to first index of array\n            let unpackedIndexPtr := add(unpacked, 0x20)\n\n            let numLayers\n            for {\n\n            } bitMap {\n                unpackedIndexPtr := add(unpackedIndexPtr, 0x20)\n            } {\n                // store the index of the lsb at the index in the array\n                mstore(unpackedIndexPtr, lsb(bitMap))\n                // drop the lsb from the bitMap\n                bitMap := and(bitMap, sub(bitMap, 1))\n                // increment numLayers\n                numLayers := add(numLayers, 1)\n            }\n            // store the number of layers at the pointer to unpacked array\n            mstore(unpacked, numLayers)\n            // update free mem pointer to first free slot after unpacked array\n            mstore(0x40, unpackedIndexPtr)\n        }\n    }\n\n    /**\n     * @notice pack an array of byte values into a bitmap\n     * @param  uints array of byte values to pack into bitmap\n     * @return bitMap of byte values\n     */\n    function uintsToBitMap(uint256[] memory uints)\n        internal\n        pure\n        returns (uint256 bitMap)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // get pointer to first index of array\n            let uintsIndexPtr := add(uints, 0x20)\n            // get pointer to first word after final index of array\n            let finalUintsIndexPtr := add(uintsIndexPtr, shl(5, mload(uints)))\n            // loop until we reach the end of the array\n            for {\n\n            } lt(uintsIndexPtr, finalUintsIndexPtr) {\n                uintsIndexPtr := add(uintsIndexPtr, 0x20)\n            } {\n                // set the bit at left-index 'uint' to 1\n                bitMap := or(bitMap, shl(mload(uintsIndexPtr), 1))\n            }\n        }\n    }\n\n    /**\n     * @notice Finds the zero-based index of the first one (right-indexed) in the binary representation of x.\n     * @param x The uint256 number for which to find the index of the most significant bit.\n     * @return r The index of the most significant bit as an uint256.\n     * from: https://gist.github.com/Vectorized/6e5d4271162c931988b385f1fd5a298f\n     */\n    function msb(uint256 x) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n\n            x := shr(r, x)\n            x := or(x, shr(1, x))\n            x := or(x, shr(2, x))\n            x := or(x, shr(4, x))\n            x := or(x, shr(8, x))\n            x := or(x, shr(16, x))\n\n            r := or(\n                r,\n                byte(\n                    and(31, shr(27, mul(x, 0x07C4ACDD))),\n                    0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f\n                )\n            )\n        }\n    }\n\n    /**\n     * @notice Finds the zero-based index of the first one (left-indexed) in the binary representation of x\n     * @param x The uint256 number for which to find the index of the least significant bit.\n     * @return r The index of the least significant bit as an uint256.\n     * from: // from https://gist.github.com/Atarpara/d6d3773d0ce8958b95804fd36981825f\n\n     */\n    function lsb(uint256 x) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            x := and(x, add(not(x), 1))\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n\n            x := shr(r, x)\n            x := or(x, shr(1, x))\n            x := or(x, shr(2, x))\n            x := or(x, shr(4, x))\n            x := or(x, shr(8, x))\n            x := or(x, shr(16, x))\n\n            r := or(\n                r,\n                byte(\n                    and(31, shr(27, mul(x, 0x07C4ACDD))),\n                    0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f\n                )\n            )\n        }\n    }\n}\n"
51     },
52     "lib/bound-layerable/src/metadata/ILayerable.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ILayerable {\n    function getLayerImageURI(uint256 layerId)\n        external\n        view\n        returns (string memory);\n\n    function getLayeredTokenImageURI(uint256[] calldata activeLayers)\n        external\n        view\n        returns (string memory);\n\n    function getBoundLayerTraits(uint256 bindings)\n        external\n        view\n        returns (string memory);\n\n    function getActiveLayerTraits(uint256[] calldata activeLayers)\n        external\n        view\n        returns (string memory);\n\n    function getBoundAndActiveLayerTraits(\n        uint256 bindings,\n        uint256[] calldata activeLayers\n    ) external view returns (string memory);\n\n    function getTokenURI(\n        uint256 tokenId,\n        uint256 layerId,\n        uint256 bindings,\n        uint256[] calldata activeLayers,\n        bytes32 layerSeed\n    ) external view returns (string memory);\n}\n"
54     },
55     "lib/bound-layerable/src/traits/RandomTraits.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {BAD_DISTRIBUTIONS_SIGNATURE} from '../interface/Constants.sol';\nimport {BadDistributions, InvalidLayerType, ArrayLengthMismatch, BatchNotRevealed} from '../interface/Errors.sol';\nimport {BatchVRFConsumer} from '../vrf/BatchVRFConsumer.sol';\n\nabstract contract RandomTraits is BatchVRFConsumer {\n    // 32 possible traits per layerType given uint16 distributions\n    // except final trait type, which has 31, because 0 is not a valid layerId.\n    // Function getLayerId will check if layerSeed is less than the distribution,\n    // so traits distribution cutoffs should be sorted left-to-right\n    // ie smallest packed 16-bit segment should be the leftmost 16 bits\n    // TODO: does this mean for N < 32 traits, there should be N-1 distributions?\n    mapping(uint8 => uint256[2]) layerTypeToPackedDistributions;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address vrfCoordinatorAddress,\n        uint240 maxNumSets,\n        uint8 numTokensPerSet,\n        uint64 subscriptionId,\n        uint8 numRandomBatches,\n        bytes32 keyHash\n    )\n        BatchVRFConsumer(\n            name,\n            symbol,\n            vrfCoordinatorAddress,\n            maxNumSets,\n            numTokensPerSet,\n            subscriptionId,\n            numRandomBatches,\n            keyHash\n        )\n    {}\n\n    /////////////\n    // SETTERS //\n    /////////////\n\n    /**\n     * @notice Set the probability distribution for up to 32 different layer traitIds\n     * @param layerType layer type to set distribution for\n     * @param distribution a uint256[2] comprised of sorted, packed shorts\n     *  that will be compared against a random short to determine the layerId\n     *  for a given tokenId\n     */\n    function setLayerTypeDistribution(\n        uint8 layerType,\n        uint256[2] calldata distribution\n    ) public virtual onlyOwner {\n        _setLayerTypeDistribution(layerType, distribution);\n    }\n\n    /**\n     * @notice Set layer type distributions for multiple layer types\n     * @param layerTypes layer types to set distribution for\n     * @param distributions an array of uint256[2]s comprised of sorted, packed shorts\n     *  that will be compared against a random short to determine the layerId\n     *  for a given tokenId\n     */\n    function setLayerTypeDistributions(\n        uint8[] calldata layerTypes,\n        uint256[2][] calldata distributions\n    ) public virtual onlyOwner {\n        if (layerTypes.length != distributions.length) {\n            revert ArrayLengthMismatch(layerTypes.length, distributions.length);\n        }\n        for (uint8 i = 0; i < layerTypes.length; i++) {\n            _setLayerTypeDistribution(layerTypes[i], distributions[i]);\n        }\n    }\n\n    /**\n     * @notice calculate the 16-bit seed for a layer by hashing the packedBatchRandomness, tokenId, and layerType together\n     * and truncating to 16 bits\n     * @param tokenId tokenId to get seed for\n     * @param layerType layer type to get seed for\n     * @param seed packedBatchRandomness\n     * @return layerSeed - 16-bit seed for the given tokenId and layerType\n     */\n    function getLayerSeed(\n        uint256 tokenId,\n        uint8 layerType,\n        bytes32 seed\n    ) internal pure returns (uint16 layerSeed) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // store seed in first slot of scratch memory\n            mstore(0x00, seed)\n            // pack tokenId and layerType into one 32-byte slot by shifting tokenId to the left 1 byte\n            // tokenIds are sequential and MAX_NUM_SETS * NUM_TOKENS_PER_SET is guaranteed to be < 2**248\n            let combinedIdType := or(shl(8, tokenId), layerType)\n            mstore(0x20, combinedIdType)\n            layerSeed := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @notice Determine layer type by its token ID\n     */\n    function getLayerType(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (uint8 layerType);\n\n    /**\n     * @notice Get the layerId for a given tokenId by hashing tokenId with its layer type and random seed,\n     * and then comparing the final short against the appropriate distributions\n     */\n    function getLayerId(uint256 tokenId) public view virtual returns (uint256) {\n        return\n            getLayerId(\n                tokenId,\n                getRandomnessForTokenIdFromSeed(tokenId, packedBatchRandomness)\n            );\n    }\n\n    /**\n     * @dev perform fewer SLOADs by passing seed as parameter\n     */\n    function getLayerId(uint256 tokenId, bytes32 seed)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        if (seed == 0) {\n            revert BatchNotRevealed();\n        }\n        uint8 layerType = getLayerType(tokenId);\n        uint256 layerSeed = getLayerSeed(tokenId, layerType, seed);\n        uint256[2] storage distributions = layerTypeToPackedDistributions[\n            layerType\n        ];\n        return getLayerId(layerType, layerSeed, distributions);\n    }\n\n    /**\n     * @notice calculate the layerId for a given layerType, seed, and distributions.\n     * @param layerType of layer\n     * @param layerSeed uint256 random seed for layer (in practice will be truncated to 8 bits)\n     * @param distributionsArray uint256[2] packed distributions of layerIds\n     * @return layerId limited to 8 bits\n     *\n     * @dev If the last packed short is <65535, any seed larger than the last packed short\n     *      will be assigned to the index after the last packed short, unless the last\n     *      packed short is index 31, in which case, it will default to 31.\n     *      LayerId is calculated like: index + 1 + 32 * layerType\n     *\n     * examples:\n     * LayerSeed: 0x00\n     * Distributions: [01 02 03 04 05 06 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]\n     * Calculated index: 0 (LayerId: 0 + 1 + 32 * layerType)\n     *\n     * LayerSeed: 0x01\n     * Distributions: [01 02 03 04 05 06 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]\n     * Calculated index: 1 (LayerId: 1 + 1 + 32 * layerType)\n     *\n     * LayerSeed: 0xFF\n     * Distributions: [01 02 03 04 05 06 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]\n     * Calculated index: 7 (LayerId: 7 + 1 + 32 * layerType)\n     *\n     * LayerSeed: 0xFF\n     * Distributions: [01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20]\n     * Calculated index: 31 (LayerId: 31 + 1 + 32 * layerType)\n     */\n    function getLayerId(\n        uint8 layerType,\n        uint256 layerSeed,\n        uint256[2] storage distributionsArray\n    ) internal view returns (uint256 layerId) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            function revertWithBadDistributions() {\n                mstore(0, BAD_DISTRIBUTIONS_SIGNATURE)\n                revert(0, 4)\n            }\n            function getPackedShortFromLeft(index, packed) -> short {\n                let shortOffset := sub(240, shl(4, index))\n                short := shr(shortOffset, packed)\n                short := and(short, 0xffff)\n            }\n\n            let j\n            // declare i outside of loop in case final distribution val is less than seed\n            let i\n            let jOffset\n            let indexOffset\n\n            // iterate over distribution values until we find one that our layer seed is less than\n            for {\n\n            } lt(j, 2) {\n                j := add(1, j)\n                indexOffset := add(indexOffset, 0x20)\n                i := 0\n            } {\n                // lazily load each half of distributions from storage, since we might not need the second half\n                let distributions := sload(add(distributionsArray.slot, j))\n                jOffset := shl(4, j)\n\n                for {\n\n                } lt(i, 16) {\n                    i := add(1, i)\n                } {\n                    let dist := getPackedShortFromLeft(i, distributions)\n                    if iszero(dist) {\n                        if iszero(i) {\n                            if iszero(j) {\n                                // first element should never be 0; distributions are invalid\n                                revertWithBadDistributions()\n                            }\n                        }\n                        // if we've reached end of distributions, check layer type != 7\n                        // otherwise if layerSeed is less than the last distribution,\n                        // the layerId calculation will evaluate to 256 (overflow)\n                        if eq(layerType, 7) {\n                            if eq(add(i, jOffset), 31) {\n                                revertWithBadDistributions()\n                            }\n                        }\n                        // if distribution is 0, and it's not the first, we've reached the end of the list\n                        // return i + 1 + 32 * layerType\n                        layerId := add(\n                            // add 1 if j == 0\n                            // add 17 if j == 1\n                            add(i, add(1, jOffset)),\n                            shl(5, layerType)\n                        )\n                        break\n                    }\n                    if lt(layerSeed, dist) {\n                        // if i+jOffset is 31 here, math will overflow here if layerType == 7\n                        // 31 + 1 + 32 * 7 = 256, which is too large for a uint8\n                        if eq(layerType, 7) {\n                            if eq(add(i, jOffset), 31) {\n                                revertWithBadDistributions()\n                            }\n                        }\n\n                        // layerIds are 1-indexed, so add 1 to i+j\n                        layerId := add(\n                            // add 1 if j == 0\n                            // add 17 if j == 1\n                            add(i, add(1, jOffset)),\n                            shl(5, layerType)\n                        )\n                        break\n                    }\n                }\n                // if layerId has been set, we don't need to increment j\n                if gt(layerId, 0) {\n                    break\n                }\n            }\n            // if i+j is 32, we've reached the end of the list and should default to the last id\n            if iszero(layerId) {\n                if eq(j, 2) {\n                    // math will overflow here if layerType == 7\n                    // 32 + 32 * 7 = 256, which is too large for a uint8\n                    if eq(layerType, 7) {\n                        revertWithBadDistributions()\n                    }\n                    // return previous layerId\n                    layerId := add(32, shl(5, layerType))\n                }\n            }\n        }\n    }\n\n    function _setLayerTypeDistribution(\n        uint8 layerType,\n        uint256[2] calldata distribution\n    ) internal {\n        if (layerType > 7) {\n            revert InvalidLayerType();\n        }\n        layerTypeToPackedDistributions[layerType] = distribution;\n    }\n}\n"
57     },
58     "lib/bound-layerable/src/interface/Errors.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nerror TradingAlreadyDisabled();\nerror IncorrectPayment();\nerror ArrayLengthMismatch(uint256 length1, uint256 length2);\nerror LayerNotBoundToTokenId();\nerror DuplicateActiveLayers();\nerror MultipleVariationsEnabled();\nerror InvalidLayer(uint256 layer);\nerror BadDistributions();\nerror NotOwner();\nerror BatchNotRevealed();\nerror LayerAlreadyBound();\nerror CannotBindBase();\nerror OnlyBase();\nerror InvalidLayerType();\nerror MaxSupply();\nerror MaxRandomness();\nerror OnlyCoordinatorCanFulfill(address have, address want);\nerror UnsafeReveal();\nerror NoActiveLayers();\nerror InvalidInitialization();\nerror NumRandomBatchesMustBePowerOfTwo();\nerror NumRandomBatchesMustBeGreaterThanOne();\nerror NumRandomBatchesMustBeLessThanOrEqualTo16();\nerror RevealPending();\nerror NoBatchesToReveal();\n"
60     },
61     "lib/bound-layerable/src/interface/Constants.sol": {
62       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nuint256 constant NOT_0TH_BITMASK = 2**256 - 2;\nuint256 constant MAX_INT = 2**256 - 1;\nuint136 constant _2_128 = 2**128;\nuint72 constant _2_64 = 2**64;\nuint40 constant _2_32 = 2**32;\nuint24 constant _2_16 = 2**16;\nuint16 constant _2_8 = 2**8;\nuint8 constant _2_4 = 2**4;\nuint8 constant _2_2 = 2**2;\nuint8 constant _2_1 = 2**1;\n\nuint128 constant _128_MASK = 2**128 - 1;\nuint64 constant _64_MASK = 2**64 - 1;\nuint32 constant _32_MASK = 2**32 - 1;\nuint16 constant _16_MASK = 2**16 - 1;\nuint8 constant _8_MASK = 2**8 - 1;\nuint8 constant _4_MASK = 2**4 - 1;\nuint8 constant _2_MASK = 2**2 - 1;\nuint8 constant _1_MASK = 2**1 - 1;\n\nbytes4 constant DUPLICATE_ACTIVE_LAYERS_SIGNATURE = 0x6411ce75;\nbytes4 constant LAYER_NOT_BOUND_TO_TOKEN_ID_SIGNATURE = 0xa385f805;\nbytes4 constant BAD_DISTRIBUTIONS_SIGNATURE = 0x338096f7;\nbytes4 constant MULTIPLE_VARIATIONS_ENABLED_SIGNATURE = 0x4d2e9396;\nbytes4 constant BATCH_NOT_REVEALED_SIGNATURE = 0x729b0f75;\n"
63     },
64     "lib/bound-layerable/src/interface/Events.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface BoundLayerableEvents {\n    event LayersBoundToToken(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed boundLayersBitmap\n    );\n\n    event ActiveLayersChanged(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed activeLayersBytearray\n    );\n}\n"
66     },
67     "lib/utility-contracts/src/TwoStepOwnable.sol": {
68       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport {ConstructorInitializable} from \"./ConstructorInitializable.sol\";\n\n/**\n@notice A two-step extension of Ownable, where the new owner must claim ownership of the contract after owner initiates transfer\nOwner can cancel the transfer at any point before the new owner claims ownership.\nHelpful in guarding against transferring ownership to an address that is unable to act as the Owner.\n*/\nabstract contract TwoStepOwnable is ConstructorInitializable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    address internal potentialOwner;\n\n    event PotentialOwnerUpdated(address newPotentialAdministrator);\n\n    error NewOwnerIsZeroAddress();\n    error NotNextOwner();\n    error OnlyOwner();\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    constructor() {\n        _initialize();\n    }\n\n    function _initialize() private onlyConstructor {\n        _transferOwnership(msg.sender);\n    }\n\n    ///@notice Initiate ownership transfer to newPotentialOwner. Note: new owner will have to manually acceptOwnership\n    ///@param newPotentialOwner address of potential new owner\n    function transferOwnership(address newPotentialOwner)\n        public\n        virtual\n        onlyOwner\n    {\n        if (newPotentialOwner == address(0)) {\n            revert NewOwnerIsZeroAddress();\n        }\n        potentialOwner = newPotentialOwner;\n        emit PotentialOwnerUpdated(newPotentialOwner);\n    }\n\n    ///@notice Claim ownership of smart contract, after the current owner has initiated the process with transferOwnership\n    function acceptOwnership() public virtual {\n        address _potentialOwner = potentialOwner;\n        if (msg.sender != _potentialOwner) {\n            revert NotNextOwner();\n        }\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n        _transferOwnership(_potentialOwner);\n    }\n\n    ///@notice cancel ownership transfer\n    function cancelOwnershipTransfer() public virtual onlyOwner {\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (_owner != msg.sender) {\n            revert OnlyOwner();\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
69     },
70     "lib/solmate/src/tokens/ERC721.sol": {
71       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
72     },
73     "lib/utility-contracts/src/withdrawable/IWithdrawable.sol": {
74       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n///@notice Ownable helper contract to withdraw ether or tokens from the contract address balance\ninterface IWithdrawable {\n    function withdraw() external;\n\n    function withdrawERC20(address _tokenAddress) external;\n\n    function withdrawERC721(address _tokenAddress, uint256 tokenId) external;\n}\n"
75     },
76     "lib/murky/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
78     },
79     "lib/bound-layerable/src/vrf/BatchVRFConsumer.sol": {
80       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {VRFConsumerBaseV2} from 'chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\nimport {VRFCoordinatorV2Interface} from 'chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\nimport {TwoStepOwnable} from 'utility-contracts/TwoStepOwnable.sol';\nimport {ERC721A} from '../token/ERC721A.sol';\nimport {_32_MASK, BATCH_NOT_REVEALED_SIGNATURE} from '../interface/Constants.sol';\nimport {MaxRandomness, NumRandomBatchesMustBeLessThanOrEqualTo16, NoBatchesToReveal, RevealPending, OnlyCoordinatorCanFulfill, UnsafeReveal, NumRandomBatchesMustBePowerOfTwo, NumRandomBatchesMustBeGreaterThanOne} from '../interface/Errors.sol';\nimport {BitMapUtility} from '../lib/BitMapUtility.sol';\nimport {PackedByteUtility} from '../lib/PackedByteUtility.sol';\n\ncontract BatchVRFConsumer is ERC721A, TwoStepOwnable {\n    // VRF config\n    uint256 public immutable NUM_RANDOM_BATCHES;\n    uint256 public immutable BITS_PER_RANDOM_BATCH;\n    uint256 immutable BITS_PER_BATCH_SHIFT;\n    uint256 immutable BATCH_RANDOMNESS_MASK;\n\n    uint16 constant NUM_CONFIRMATIONS = 7;\n    uint32 constant CALLBACK_GAS_LIMIT = 500_000;\n    uint64 public subscriptionId;\n    VRFCoordinatorV2Interface public coordinator;\n\n    // token config\n    // use uint240 to ensure tokenId can never be > 2**248 for efficient hashing\n    uint240 immutable MAX_NUM_SETS;\n    uint8 immutable NUM_TOKENS_PER_SET;\n    uint248 immutable NUM_TOKENS_PER_RANDOM_BATCH;\n    uint256 immutable MAX_TOKEN_ID;\n\n    bytes32 public packedBatchRandomness;\n    uint248 revealBatch;\n    bool public pendingReveal;\n    bytes32 public keyHash;\n\n    // allow unsafe revealing of an uncompleted batch, ie, in the case of a stalled mint\n    bool forceUnsafeReveal;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address vrfCoordinatorAddress,\n        uint240 maxNumSets,\n        uint8 numTokensPerSet,\n        uint64 _subscriptionId,\n        uint8 numRandomBatches,\n        bytes32 _keyHash\n    ) ERC721A(name, symbol) {\n        if (numRandomBatches < 2) {\n            revert NumRandomBatchesMustBeGreaterThanOne();\n        } else if (numRandomBatches > 16) {\n            revert NumRandomBatchesMustBeLessThanOrEqualTo16();\n        }\n        // store immutables to allow for configurable number of random batches\n        // (which must be a power of two), with inversely proportional amounts of\n        // entropy per batch.\n        // 16 batches (16 bits of entropy per batch) is the max recommended\n        // 2 batches is the minimum\n        NUM_RANDOM_BATCHES = numRandomBatches;\n        BITS_PER_RANDOM_BATCH = uint8(uint256(256) / NUM_RANDOM_BATCHES);\n        BITS_PER_BATCH_SHIFT = uint8(\n            BitMapUtility.msb(uint256(BITS_PER_RANDOM_BATCH))\n        );\n        bool powerOfTwo = uint256(BITS_PER_RANDOM_BATCH) *\n            uint256(NUM_RANDOM_BATCHES) ==\n            256;\n        if (!powerOfTwo) {\n            revert NumRandomBatchesMustBePowerOfTwo();\n        }\n        BATCH_RANDOMNESS_MASK = ((1 << BITS_PER_RANDOM_BATCH) - 1);\n\n        MAX_NUM_SETS = maxNumSets;\n        NUM_TOKENS_PER_SET = numTokensPerSet;\n\n        // ensure that the last batch includes the very last token ids\n        uint248 numSetsPerRandomBatch = uint248(MAX_NUM_SETS) /\n            uint248(NUM_RANDOM_BATCHES);\n        uint256 recoveredNumSets = (numSetsPerRandomBatch * NUM_RANDOM_BATCHES);\n        if (recoveredNumSets != MAX_NUM_SETS) {\n            ++numSetsPerRandomBatch;\n        }\n        // use numSetsPerRandomBatch to calculate the number of tokens per batch\n        // to avoid revealing only some tokens in a set\n        NUM_TOKENS_PER_RANDOM_BATCH =\n            numSetsPerRandomBatch *\n            NUM_TOKENS_PER_SET;\n\n        MAX_TOKEN_ID =\n            _startTokenId() +\n            uint256(MAX_NUM_SETS) *\n            uint256(NUM_TOKENS_PER_SET) -\n            1;\n\n        coordinator = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\n        subscriptionId = _subscriptionId;\n        keyHash = _keyHash;\n    }\n\n    /**\n     * @notice when true, allow revealing the rest of a batch that has not completed minting yet\n     *         This is \"unsafe\" because it becomes possible to know the layerIds of unminted tokens from the batch\n     */\n    function setForceUnsafeReveal(bool force) external onlyOwner {\n        forceUnsafeReveal = force;\n    }\n\n    /**\n     * @notice set the key hash corresponding to a max gas price for a chainlink VRF request,\n     *         to be used in requestRandomWords()\n     */\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\n        keyHash = _keyHash;\n    }\n\n    /**\n     * @notice set the ChainLink VRF Subscription ID\n     */\n    function setSubscriptionId(uint64 _subscriptionId) external onlyOwner {\n        subscriptionId = _subscriptionId;\n    }\n\n    /**\n     * @notice set the ChainLink VRF Coordinator address\n     */\n    function setCoordinator(address _coordinator) external onlyOwner {\n        coordinator = VRFCoordinatorV2Interface(_coordinator);\n    }\n\n    /**\n     * @notice Clear the pending reveal flag, allowing requestRandomWords() to be called again\n     */\n    function clearPendingReveal() external onlyOwner {\n        pendingReveal = false;\n    }\n\n    /**\n     * @notice request random words from the chainlink vrf for each unrevealed batch\n     */\n    function requestRandomWords() external returns (uint256) {\n        if (pendingReveal) {\n            revert RevealPending();\n        }\n        (uint32 numBatches, ) = _checkAndReturnNumBatches();\n        if (numBatches == 0) {\n            revert NoBatchesToReveal();\n        }\n\n        // Will revert if subscription is not set and funded.\n        uint256 _pending = coordinator.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            NUM_CONFIRMATIONS,\n            CALLBACK_GAS_LIMIT,\n            1\n        );\n        pendingReveal = true;\n        return _pending;\n    }\n\n    /**\n     * @notice get the random seed of the batch that a given token ID belongs to\n     */\n    function getRandomnessForTokenId(uint256 tokenId)\n        internal\n        view\n        returns (bytes32 randomness)\n    {\n        return getRandomnessForTokenIdFromSeed(tokenId, packedBatchRandomness);\n    }\n\n    /**\n     * @notice Get the randomness for a given tokenId, if it's been set\n     * @param tokenId tokenId of the token to get the randomness for\n     * @param seed bytes32 seed containing all batches randomness\n     * @return randomness as bytes32 for the given tokenId\n     */\n    function getRandomnessForTokenIdFromSeed(uint256 tokenId, bytes32 seed)\n        internal\n        view\n        returns (bytes32 randomness)\n    {\n        // put immutable variable onto stack\n        uint256 numTokensPerRandomBatch = NUM_TOKENS_PER_RANDOM_BATCH;\n        uint256 shift = BITS_PER_BATCH_SHIFT;\n        uint256 mask = BATCH_RANDOMNESS_MASK;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // use mask to get last N bits of shifted packedBatchRandomness\n            randomness := and(\n                // shift packedBatchRandomness right by batchNum * bits per batch\n                shr(\n                    // get batch number of token, multiply by bits per batch\n                    shl(shift, div(tokenId, numTokensPerRandomBatch)),\n                    seed\n                ),\n                mask\n            )\n        }\n    }\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) external {\n        if (msg.sender != address(coordinator)) {\n            revert OnlyCoordinatorCanFulfill(msg.sender, address(coordinator));\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param\n     * @param randomWords the VRF output expanded to the requested number of words\n     */\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\n        internal\n        virtual\n    {\n        (uint32 numBatches, uint32 _revealBatch) = _checkAndReturnNumBatches();\n        uint256 currSeed = uint256(packedBatchRandomness);\n        uint256 randomness = randomWords[0];\n\n        // we have revealed N batches; mask the bottom bits out\n        uint256 mask;\n        uint256 bitShift = BITS_PER_RANDOM_BATCH * _revealBatch;\n        //  solidity will overflow and throw arithmetic error without this check\n        if (bitShift != 256) {\n            // will be 0 if bitshift == 256 (and would not overflow)\n            mask = type(uint256).max ^ ((1 << bitShift) - 1);\n        }\n        // we need only need to reveal up to M batches; mask the top bits out\n        bitShift = (BITS_PER_RANDOM_BATCH * (numBatches + _revealBatch));\n        if (bitShift != 256) {\n            mask = mask & ((1 << bitShift) - 1);\n        }\n\n        uint256 newRandomness = randomness & mask;\n        currSeed = currSeed | newRandomness;\n\n        _revealBatch += numBatches;\n\n        // coerce any 0-slots to 1\n        for (uint256 i; i < numBatches; ) {\n            uint256 retrievedRandomness = PackedByteUtility.getPackedNFromRight(\n                uint256(currSeed),\n                BITS_PER_RANDOM_BATCH,\n                i\n            );\n            if (retrievedRandomness == 0) {\n                currSeed = PackedByteUtility.packNAtRightIndex(\n                    uint256(currSeed),\n                    BITS_PER_RANDOM_BATCH,\n                    1,\n                    i\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        packedBatchRandomness = bytes32(currSeed);\n        revealBatch = _revealBatch;\n        pendingReveal = false;\n    }\n\n    /**\n     * @notice calculate how many batches need to be revealed, and also get next batch number\n     * @return (uint32 numMissingBatches, uint32 _revealBatch) - number missing batches, and the current _revealBatch\n     *         index (current batch revealed + 1, or 0 if none)\n     */\n    function _checkAndReturnNumBatches()\n        internal\n        view\n        returns (uint32, uint32)\n    {\n        // get next unminted token ID\n        uint256 nextTokenId_ = _nextTokenId();\n        // get number of fully completed batches\n        uint256 numCompletedBatches = nextTokenId_ /\n            NUM_TOKENS_PER_RANDOM_BATCH;\n\n        // if NUM_TOKENS_PER_RANDOM_BATCH doesn't divide evenly into total number of tokens,\n        // increment the numCompleted batches if the next token ID is greater than the max\n        // ie, the very last batch is completed\n        // NUM_TOKENS_PER_RANDOM_BATCH * NUM_RANDOM_BATCHES / NUM_TOKENS_PER_SET will always\n        // either be greater than or equal to MAX_NUM_SETS, never less-than\n        bool unevenBatches = ((NUM_TOKENS_PER_RANDOM_BATCH *\n            NUM_RANDOM_BATCHES) / NUM_TOKENS_PER_SET) != MAX_NUM_SETS;\n        if (unevenBatches && nextTokenId_ > MAX_TOKEN_ID) {\n            ++numCompletedBatches;\n        }\n\n        uint32 _revealBatch = uint32(revealBatch);\n        // reveal is complete if _revealBatch is >= 8\n        if (_revealBatch >= NUM_RANDOM_BATCHES) {\n            revert MaxRandomness();\n        }\n\n        // if equal, next batch has not started minting yet\n        bool batchIsInProgress = nextTokenId_ >\n            numCompletedBatches * NUM_TOKENS_PER_RANDOM_BATCH &&\n            numCompletedBatches != NUM_RANDOM_BATCHES;\n        bool batchInProgressAlreadyRevealed = _revealBatch >\n            numCompletedBatches;\n        uint32 numMissingBatches = batchInProgressAlreadyRevealed\n            ? 0\n            : uint32(numCompletedBatches) - _revealBatch;\n\n        // don't ever reveal batches from which no tokens have been minted\n        if (\n            batchInProgressAlreadyRevealed ||\n            (numMissingBatches == 0 && !batchIsInProgress)\n        ) {\n            revert UnsafeReveal();\n        }\n        // increment if batch is in progress\n        if (batchIsInProgress && forceUnsafeReveal) {\n            ++numMissingBatches;\n        }\n\n        return (numMissingBatches, _revealBatch);\n    }\n}\n"
81     },
82     "lib/utility-contracts/src/ConstructorInitializable.sol": {
83       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * @author emo.eth\n * @notice Abstract smart contract that provides an onlyUninitialized modifier which only allows calling when\n *         from within a constructor of some sort, whether directly instantiating an inherting contract,\n *         or when delegatecalling from a proxy\n */\nabstract contract ConstructorInitializable {\n    error AlreadyInitialized();\n\n    modifier onlyConstructor() {\n        if (address(this).code.length != 0) {\n            revert AlreadyInitialized();\n        }\n        _;\n    }\n}\n"
84     },
85     "lib/bound-layerable/lib/chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
86       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
87     },
88     "lib/bound-layerable/lib/chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
89       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
90     }
91   },
92   "settings": {
93     "remappings": [
94       "ERC721A/=lib/bound-layerable/lib/ERC721A/contracts/",
95       "bound-layerable/=lib/bound-layerable/src/",
96       "chainlink/=lib/bound-layerable/lib/chainlink/",
97       "ds-test/=lib/forge-std/lib/ds-test/src/",
98       "forge-std/=lib/forge-std/src/",
99       "hot-chain-svg/=lib/bound-layerable/lib/hot-chain-svg/contracts/",
100       "murky/=lib/murky/src/",
101       "openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/",
102       "solady/=lib/solady/src/",
103       "solenv/=lib/bound-layerable/lib/solenv/src/",
104       "solidity-stringutils/=lib/bound-layerable/lib/solenv/lib/solidity-stringutils/src/",
105       "solmate/=lib/solmate/src/",
106       "utility-contracts/=lib/utility-contracts/src/"
107     ],
108     "optimizer": {
109       "enabled": true,
110       "runs": 200
111     },
112     "metadata": {
113       "bytecodeHash": "ipfs"
114     },
115     "outputSelection": {
116       "*": {
117         "*": [
118           "evm.bytecode",
119           "evm.deployedBytecode",
120           "devdoc",
121           "userdoc",
122           "metadata",
123           "abi"
124         ]
125       }
126     },
127     "evmVersion": "london",
128     "libraries": {}
129   }
130 }}