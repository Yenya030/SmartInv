1 {{
2   "language": "Solidity",
3   "sources": {
4     "Catddle/contracts/Seller.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./IMinted.sol\";\nimport \"./ITicket.sol\";\n\nerror SaleInactive();\nerror SoldOut();\nerror InvalidPrice();\nerror ExceedQuota();\nerror WithdrawFailed();\nerror FreezeMint();\n\ncontract Seller is Ownable {\n\n    uint256 public nextTokenId = 1;\n\n    uint256 public allowlistPrice = 0.05 ether;\n    uint256 public publicPrice = 0.07 ether;\n\n    uint256 public constant MAX_MINT = 4;\n    uint256 public constant MAX_SUPPLY = 2048;\n\n    // 0: closed; 1: allowlist mint; 2: public mint\n    uint8 public saleStage;\n\n    address public beneficiary;\n\n    ITicket public ticket;\n    IMinted public token;\n\n    bool public isDevMintFreeze;\n\n    constructor(address ticket_) {\n        ticket = ITicket(ticket_);\n    }\n\n    /**\n     * Public functions\n     */\n    function allowlistMint(bytes[] calldata _signatures, uint256[] calldata spotIds)\n        external\n        payable\n    {\n        uint256 _nextTokenId = nextTokenId;\n        // must be allowlist mint stage\n        if (saleStage != 1) revert SaleInactive();\n        // offset by 1 because we start at 1, and nextTokenId is incremented _after_ mint\n        if (_nextTokenId + (spotIds.length - 1) > MAX_SUPPLY) revert SoldOut();\n        // cannot mint exceed 4 catddles\n        if (spotIds.length > MAX_MINT) revert ExceedQuota();\n        if (msg.value < allowlistPrice * spotIds.length) revert InvalidPrice();\n\n        for (uint256 i = 0; i < spotIds.length; i++) {\n            // invalidate the spotId passed in\n            ticket.claimAllowlistSpot(_signatures[i], msg.sender, spotIds[i]);\n            token.authorizedMint(msg.sender, _nextTokenId);\n\n            unchecked {\n                _nextTokenId++;\n            }\n        }\n        // update nextTokenId\n        nextTokenId = _nextTokenId;\n    }\n\n    function publicMint(uint256 amount)\n        external\n        payable\n    {\n        uint256 _nextTokenId = nextTokenId;\n        // must be public mint stage\n        if (saleStage != 2) revert SaleInactive();\n        // offset by 1 because we start at 1, and nextTokenId is incremented _after_ mint\n        if (_nextTokenId + (amount - 1) > MAX_SUPPLY) revert SoldOut();\n        // cannot mint exceed 4 catddles\n        if (amount > MAX_MINT) revert ExceedQuota();\n        if (msg.value < publicPrice * amount) revert InvalidPrice();\n\n        for (uint256 i = 0; i < amount; i++) {\n            token.authorizedMint(msg.sender, _nextTokenId);\n\n            unchecked {\n                _nextTokenId++;\n            }\n        }\n        // update nextTokenId\n        nextTokenId = _nextTokenId;\n    }\n\n    /**\n     *  OnlyOwner functions\n     */\n\n    function setToken(address tokenAddress) public onlyOwner {\n        token = IMinted(tokenAddress);\n    }\n\n    function setTicket(address ticket_) public onlyOwner {\n        ticket = ITicket(ticket_);\n    }\n\n    function setSaleStage(uint8 stage) public onlyOwner {\n        saleStage = stage;\n    }\n\n    function setAllowlistPrice(uint256 price) public onlyOwner {\n        allowlistPrice = price;\n    }\n\n    function setPublicPrice(uint256 price) public onlyOwner {\n        publicPrice = price;\n    }\n\n    function freezeDevMint() public onlyOwner {\n        // freeze dev mint forever\n        isDevMintFreeze = true;\n    }\n\n    function devMint(address receiver, uint256 amount) public onlyOwner {\n        if (isDevMintFreeze) revert FreezeMint();\n        uint256 _nextTokenId = nextTokenId;\n        if (_nextTokenId + (amount - 1) > MAX_SUPPLY) revert SoldOut();\n\n        for (uint256 i = 0; i < amount; i++) {\n            token.authorizedMint(receiver, _nextTokenId);\n\n            unchecked {\n                _nextTokenId++;\n            }\n        }\n        nextTokenId = _nextTokenId;\n    }\n\n    function setBeneficiary(address beneficiary_) public onlyOwner {\n        beneficiary = beneficiary_;\n    }\n\n    function withdraw(uint256 amount) public onlyOwner {\n        require(beneficiary != address(0), \"Cannot withdraw to zero address\");\n        require(amount <= address(this).balance, \"Cannot withdraw exceed balance\");\n        (bool success, ) = beneficiary.call{value: amount}(\"\");\n        if (!success) {\n            revert WithdrawFailed();\n        }\n    }\n   \n}"
6     },
7     "Catddle/contracts/ITicket.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITicket {\n   function claimAllowlistSpot(bytes calldata _signature, address user, uint256 spotId) external;\n}"
9     },
10     "Catddle/contracts/IMinted.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMinted {\n   function authorizedMint(address user, uint256 tokenId) external;\n}"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": true,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}