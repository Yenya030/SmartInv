1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/Booster.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n\r\nimport \"./interfaces/IStaker.sol\";\r\nimport \"./interfaces/IPoolRegistry.sol\";\r\nimport \"./interfaces/IProxyVault.sol\";\r\nimport \"./interfaces/IProxyOwner.sol\";\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\n\r\n\r\n/*\r\nMain interface for the whitelisted proxy contract.\r\n\r\n**This contract is meant to be able to be replaced for upgrade purposes. use IVoterProxy.operator() to always reference the current booster\r\n\r\n*/\r\ncontract Booster{\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant fxs = address(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\r\n\r\n    address public immutable proxy;\r\n    address public immutable poolRegistry;\r\n    address public immutable feeRegistry;\r\n    address public owner;\r\n    address public pendingOwner;\r\n    address public poolManager;\r\n    address public rewardManager;\r\n    address public feeclaimer;\r\n    bool public isShutdown;\r\n    address public feeQueue;\r\n\r\n    mapping(address=>mapping(address=>bool)) public feeClaimMap;\r\n\r\n    mapping(address=>address) public proxyOwners;\r\n\r\n\r\n    constructor(address _proxy, address _poolReg, address _feeReg) {\r\n        proxy = _proxy;\r\n        poolRegistry = _poolReg;\r\n        feeRegistry = _feeReg;\r\n        isShutdown = false;\r\n        owner = msg.sender;\r\n        rewardManager = msg.sender;\r\n        poolManager = msg.sender;\r\n\r\n\r\n        //TODO: consider moving to a module so dont have to set everything again if upgraded\r\n        feeclaimer = address(0);//msg.sender;\r\n        feeClaimMap[address(0xc6764e58b36e26b08Fd1d2AeD4538c02171fA872)][fxs] = true;\r\n        emit FeeClaimPairSet(address(0xc6764e58b36e26b08Fd1d2AeD4538c02171fA872), fxs, true);\r\n        feeQueue = address(0x4f3AD55D7b884CDC48ADD1e2451A13af17887F26);//stash for cvxfxs convex pool\r\n        emit FeeQueueChanged(address(0x4f3AD55D7b884CDC48ADD1e2451A13af17887F26));\r\n\r\n        //set our proxy as its own owner\r\n        proxyOwners[_proxy] = _proxy;\r\n    }\r\n\r\n    /////// Owner Section /////////\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolManager() {\r\n        require(poolManager == msg.sender, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    //set pending owner\r\n    function setPendingOwner(address _po) external onlyOwner{\r\n        pendingOwner = _po;\r\n        emit SetPendingOwner(_po);\r\n    }\r\n\r\n    function _proxyCall(address _to, bytes memory _data) internal{\r\n        (bool success,) = IStaker(proxy).execute(_to,uint256(0),_data);\r\n        require(success, \"Proxy Call Fail\");\r\n    }\r\n\r\n    //claim ownership\r\n    function acceptPendingOwner() external {\r\n        require(pendingOwner != address(0) && msg.sender == pendingOwner, \"!p_owner\");\r\n\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n        emit OwnerChanged(owner);\r\n    }\r\n\r\n    //set fee queue, a contract fees are moved to when claiming\r\n    function setFeeQueue(address _queue) external onlyOwner{\r\n        feeQueue = _queue;\r\n        emit FeeQueueChanged(_queue);\r\n    }\r\n\r\n    //set who can call claim fees, 0x0 address will allow anyone to call\r\n    function setFeeClaimer(address _claimer) external onlyOwner{\r\n        feeclaimer = _claimer;\r\n        emit FeeClaimerChanged(_claimer);\r\n    }\r\n\r\n    function setFeeClaimPair(address _claimAddress, address _token, bool _active) external onlyOwner{\r\n        feeClaimMap[_claimAddress][_token] = _active;\r\n        emit FeeClaimPairSet(_claimAddress, _token, _active);\r\n    }\r\n\r\n    function addProxyOwner(address _proxy, address _owner) external onlyOwner{\r\n        proxyOwners[_proxy] = _owner;\r\n        emit ProxyOwnerSet(_proxy, _owner);\r\n    }\r\n\r\n    //set a reward manager address that controls extra reward contracts for each pool\r\n    function setRewardManager(address _rmanager) external onlyOwner{\r\n        rewardManager = _rmanager;\r\n        emit RewardManagerChanged(_rmanager);\r\n    }\r\n\r\n    //set pool manager\r\n    function setPoolManager(address _pmanager) external onlyOwner{\r\n        poolManager = _pmanager;\r\n        emit PoolManagerChanged(_pmanager);\r\n    }\r\n    \r\n    //shutdown this contract.\r\n    function shutdownSystem() external onlyOwner{\r\n        //This version of booster does not require any special steps before shutting down\r\n        //and can just immediately be set.\r\n        isShutdown = true;\r\n        emit Shutdown();\r\n    }\r\n\r\n    //claim operator roles for certain systems for direct access\r\n    function claimOperatorRoles() external onlyOwner{\r\n        require(!isShutdown,\"shutdown\");\r\n\r\n        //claim operator role of pool registry\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"setOperator(address)\")), address(this));\r\n        _proxyCall(poolRegistry,data);\r\n    }\r\n\r\n    //set fees on user vaults\r\n    function setPoolFees(uint256 _cvxfxs, uint256 _cvx, uint256 _platform) external onlyOwner{\r\n        require(!isShutdown,\"shutdown\");\r\n\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"setFees(uint256,uint256,uint256)\")), _cvxfxs, _cvx, _platform);\r\n        _proxyCall(feeRegistry,data);\r\n    }\r\n\r\n    //set fee deposit address for all user vaults\r\n    function setPoolFeeDeposit(address _deposit) external onlyOwner{\r\n        require(!isShutdown,\"shutdown\");\r\n\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"setDepositAddress(address)\")), _deposit);\r\n        _proxyCall(feeRegistry,data);\r\n    }\r\n\r\n    //add pool on registry\r\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external onlyPoolManager{\r\n        IPoolRegistry(poolRegistry).addPool(_implementation, _stakingAddress, _stakingToken);\r\n    }\r\n\r\n    //set a new reward pool implementation for future pools\r\n    function setPoolRewardImplementation(address _impl) external onlyPoolManager{\r\n        IPoolRegistry(poolRegistry).setRewardImplementation(_impl);\r\n    }\r\n\r\n    //deactivate a pool\r\n    function deactivatePool(uint256 _pid) external onlyPoolManager{\r\n        IPoolRegistry(poolRegistry).deactivatePool(_pid);\r\n    }\r\n\r\n    //set extra reward contracts to be active when pools are created\r\n    function setRewardActiveOnCreation(bool _active) external onlyPoolManager{\r\n        IPoolRegistry(poolRegistry).setRewardActiveOnCreation(_active);\r\n    }\r\n\r\n    //vote for gauge weights\r\n    function voteGaugeWeight(address _controller, address[] calldata _gauge, uint256[] calldata _weight) external onlyOwner{\r\n        for(uint256 i = 0; i < _gauge.length; ){\r\n            bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"vote_for_gauge_weights(address,uint256)\")), _gauge[i], _weight[i]);\r\n            _proxyCall(_controller,data);\r\n            unchecked{ ++i; }\r\n        }\r\n    }\r\n\r\n    //set voting delegate\r\n    function setDelegate(address _delegateContract, address _delegate, bytes32 _space) external onlyOwner{\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"setDelegate(bytes32,address)\")), _space, _delegate);\r\n        _proxyCall(_delegateContract,data);\r\n        emit DelegateSet(_delegate);\r\n    }\r\n\r\n    //recover tokens on this contract\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount, address _withdrawTo) external onlyOwner{\r\n        IERC20(_tokenAddress).safeTransfer(_withdrawTo, _tokenAmount);\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    //manually set vefxs proxy for a given vault\r\n    function setVeFXSProxy(address _vault, address _newproxy) external{\r\n        require(!isShutdown,\"shutdown\");\r\n\r\n        //get owner of vault\r\n        address vaultOwner = IProxyVault(_vault).owner();\r\n\r\n        //require vault owner or convex admin to call\r\n        require(vaultOwner == msg.sender || owner == msg.sender, \"!auth\" );\r\n\r\n        //require new proxy to be known\r\n        require(proxyOwners[_newproxy] != address(0),\"!proxy\");\r\n        \r\n        //call checkpoint to checkpoint rewards with current boost\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"checkpointRewards()\")));\r\n        _proxyCall(_vault,data);\r\n\r\n        //get current proxy\r\n        address currentProxy = IProxyVault(_vault).usingProxy();\r\n\r\n        //tell current proxy admin to remove\r\n        if(currentProxy == proxy){\r\n            //proxy is currently convex, call internal\r\n            data = abi.encodeWithSelector(bytes4(keccak256(\"proxyToggleStaker(address)\")), _vault);\r\n            _proxyCall(IProxyVault(_vault).stakingAddress(),data);\r\n        }else{\r\n            //get proxy owner from list\r\n            IProxyOwner(proxyOwners[currentProxy]).proxyToggleStaker(_vault);\r\n        }\r\n\r\n        //tell next proxy admin to add\r\n        if(_newproxy == proxy){\r\n            //new proxy is convex, call internal\r\n            data = abi.encodeWithSelector(bytes4(keccak256(\"proxyToggleStaker(address)\")), _vault);\r\n            _proxyCall(IProxyVault(_vault).stakingAddress(),data);\r\n        }else{\r\n            //get proxy owner from list\r\n            IProxyOwner(proxyOwners[_newproxy]).proxyToggleStaker(_vault);\r\n        }\r\n\r\n\r\n        //set proxy on vault\r\n        data = abi.encodeWithSelector(bytes4(keccak256(\"setVeFXSProxy(address)\")), _newproxy);\r\n        _proxyCall(_vault,data);\r\n\r\n        //call get rewards to checkpoint with new boosted weight\r\n        //should be a bit cheaper than call above since there should be no token transfers in second call\r\n        data = abi.encodeWithSelector(bytes4(keccak256(\"checkpointRewards()\")));\r\n        _proxyCall(_vault,data);\r\n\r\n    }\r\n\r\n    //recover tokens on the proxy\r\n    function recoverERC20FromProxy(address _tokenAddress, uint256 _tokenAmount, address _withdrawTo) external onlyOwner{\r\n\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"transfer(address,uint256)\")), _withdrawTo, _tokenAmount);\r\n        _proxyCall(_tokenAddress,data);\r\n\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    //////// End Owner Section ///////////\r\n\r\n\r\n    function createVault(uint256 _pid) external returns (address){\r\n    \t//create minimal proxy vault for specified pool\r\n        (address vault, address stakeAddress, address stakeToken, address rewards) = IPoolRegistry(poolRegistry).addUserVault(_pid, msg.sender);\r\n\r\n    \t//make voterProxy call proxyToggleStaker(vault) on the pool's stakingAddress to set it as a proxied child\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"proxyToggleStaker(address)\")), vault);\r\n        _proxyCall(stakeAddress,data);\r\n\r\n    \t//call proxy initialize\r\n        IProxyVault(vault).initialize(msg.sender, stakeAddress, stakeToken, rewards);\r\n\r\n        //set vault vefxs proxy\r\n        data = abi.encodeWithSelector(bytes4(keccak256(\"setVeFXSProxy(address)\")), proxy);\r\n        _proxyCall(vault,data);\r\n\r\n        return vault;\r\n    }\r\n\r\n\r\n    //claim fees - if set, move to a fee queue that rewards can pull from\r\n    function claimFees(address _distroContract, address _token) external {\r\n        require(feeclaimer == address(0) || feeclaimer == msg.sender, \"!auth\");\r\n        require(feeClaimMap[_distroContract][_token],\"!claimPair\");\r\n\r\n        uint256 bal;\r\n        if(feeQueue != address(0)){\r\n            bal = IStaker(proxy).claimFees(_distroContract, _token, feeQueue);\r\n        }else{\r\n            bal = IStaker(proxy).claimFees(_distroContract, _token, address(this));\r\n        }\r\n        emit FeesClaimed(bal);\r\n    }\r\n\r\n    //call vefxs checkpoint\r\n    function checkpointFeeRewards(address _distroContract) external {\r\n        require(feeclaimer == address(0) || feeclaimer == msg.sender, \"!auth\");\r\n\r\n        IStaker(proxy).checkpointFeeRewards(_distroContract);\r\n    }\r\n\r\n    \r\n    /* ========== EVENTS ========== */\r\n    event SetPendingOwner(address indexed _address);\r\n    event OwnerChanged(address indexed _address);\r\n    event FeeQueueChanged(address indexed _address);\r\n    event FeeClaimerChanged(address indexed _address);\r\n    event FeeClaimPairSet(address indexed _address, address indexed _token, bool _value);\r\n    event ProxyOwnerSet(address indexed _address, address _owner);\r\n    event RewardManagerChanged(address indexed _address);\r\n    event PoolManagerChanged(address indexed _address);\r\n    event Shutdown();\r\n    event DelegateSet(address indexed _address);\r\n    event FeesClaimed(uint256 _amount);\r\n    event Recovered(address indexed _token, uint256 _amount);\r\n}"
6     },
7     "/contracts/interfaces/IStaker.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IStaker{\r\n    function createLock(uint256, uint256) external returns (bool);\r\n    function increaseAmount(uint256) external returns (bool);\r\n    function increaseTime(uint256) external returns (bool);\r\n    function release() external returns (bool);\r\n    function checkpointFeeRewards(address) external;\r\n    function claimFees(address,address,address) external returns (uint256);\r\n    function voteGaugeWeight(address,uint256) external returns (bool);\r\n    function operator() external view returns (address);\r\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\r\n}"
9     },
10     "/contracts/interfaces/IProxyVault.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IProxyVault {\r\n\r\n    enum VaultType{\r\n        Erc20Basic,\r\n        UniV3,\r\n        Convex,\r\n        Erc20Joint\r\n    }\r\n\r\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external;\r\n    function usingProxy() external returns(address);\r\n    function owner() external returns(address);\r\n    function stakingAddress() external returns(address);\r\n    function rewards() external returns(address);\r\n    function getReward() external;\r\n    function getReward(bool _claim) external;\r\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\r\n    function earned() external view returns (address[] memory token_addresses, uint256[] memory total_earned);\r\n}"
12     },
13     "/contracts/interfaces/IProxyOwner.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IProxyOwner {\r\n    function proxyToggleStaker(address _vault) external;\r\n}"
15     },
16     "/contracts/interfaces/IPoolRegistry.sol": {
17       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IPoolRegistry {\r\n    function poolLength() external view returns(uint256);\r\n    function poolInfo(uint256 _pid) external view returns(address, address, address, uint8);\r\n    function vaultMap(uint256 _pid, address _user) external view returns(address vault);\r\n    function addUserVault(uint256 _pid, address _user) external returns(address vault, address stakeAddress, address stakeToken, address rewards);\r\n    function deactivatePool(uint256 _pid) external;\r\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\r\n    function setRewardActiveOnCreation(bool _active) external;\r\n    function setRewardImplementation(address _imp) external;\r\n}"
18     },
19     "@openzeppelin/contracts/utils/Address.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
27     }
28   },
29   "settings": {
30     "remappings": [],
31     "optimizer": {
32       "enabled": true,
33       "runs": 200
34     },
35     "evmVersion": "london",
36     "libraries": {},
37     "outputSelection": {
38       "*": {
39         "*": [
40           "evm.bytecode",
41           "evm.deployedBytecode",
42           "devdoc",
43           "userdoc",
44           "metadata",
45           "abi"
46         ]
47       }
48     }
49   }
50 }}