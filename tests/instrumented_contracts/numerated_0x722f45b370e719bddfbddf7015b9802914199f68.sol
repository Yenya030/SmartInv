1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/staking.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0\r\n//\r\n//\r\n//\r\n//\r\n//                                __                                     \r\n//                               /  |                                    \r\n//   ______   __    __   ______  $$ |____   __    __   ______   _______  \r\n//  /      \\ /  |  /  | /      \\ $$      \\ /  |  /  | /      \\ /       \\ \r\n// /$$$$$$  |$$ |  $$ |/$$$$$$  |$$$$$$$  |$$ |  $$ |/$$$$$$  |$$$$$$$  |\r\n// $$ |  $$/ $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$/ $$ |  $$ |\r\n// $$ |      $$ \\__$$ |$$ \\__$$ |$$ |__$$ |$$ \\__$$ |$$ |      $$ |  $$ |\r\n// $$ |      $$    $$/ $$    $$ |$$    $$/ $$    $$/ $$ |      $$ |  $$ |\r\n// $$/        $$$$$$/   $$$$$$$ |$$$$$$$/   $$$$$$/  $$/       $$/   $$/ \r\n//                     /  \\__$$ |                                        \r\n//                     $$    $$/                                         \r\n//                      $$$$$$/ \r\n//\r\n//\r\n//\r\n//\r\n// Contract: STAKING with early yeilds in exchange for locking periods.\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\ninterface IERC721 {\r\n    function transferFrom(address _from, address _to, uint _tokenid) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function balanceOf(address owner) external view;\r\n}\r\n\r\n\r\ncontract Staker {\r\n    \r\n    address public tokenContract;\r\n    address public paymentContract;\r\n    address internal owner;\r\n    uint256 public daily;\r\n    uint public staked;\r\n    bool public open;\r\n    uint public maxLoanDays = 90;\r\n    mapping (uint256 => address) public holder;\r\n    mapping (uint256 => uint64) public timestamp;\r\n    mapping (uint256 => uint64) public locktime;\r\n    mapping(address=>uint) public balanceOf;\r\n\r\n    event Staked(uint indexed _tokenid, address indexed _owner);\r\n    event Unstaked(uint indexed _tokenid, address indexed _owner);\r\n\r\n    constructor(address _tokenContract, address _ercContract, uint256 _daily) {\r\n        tokenContract = _tokenContract;\r\n        paymentContract = _ercContract;\r\n        daily = _daily/86400;\r\n        owner = tx.origin;\r\n    }\r\n\r\n    modifier isOpen(){\r\n        require(open == true,'not open');\r\n        _;\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner,'not owner');\r\n        _;\r\n    }\r\n    modifier isStaked(uint256 _tokenid){\r\n        require(holder[_tokenid] == msg.sender,\"you have not staked this token\" );\r\n        _;\r\n    }\r\n    function yield(uint _tokenid) public view returns (uint256 _yield){\r\n        require(locktime[_tokenid] == 0,\"token is currently in a locking period\");\r\n        unchecked{\r\n            uint secs = block.timestamp - timestamp[_tokenid];\r\n            return daily*secs;\r\n        }\r\n        \r\n    }\r\n    function claim(uint[] memory _tokenids) isOpen public  {\r\n        for (uint i=0;i<_tokenids.length;){\r\n            require(holder[_tokenids[i]] == msg.sender, \"you are not stake owner!\");\r\n            require(locktime[_tokenids[i]] == 0,\"token is currently in a locking period\");\r\n            uint256 pay = yield(_tokenids[i]);\r\n            timestamp[_tokenids[i]] = uint64(block.timestamp);\r\n            IERC20(paymentContract).transfer(msg.sender,pay);\r\n            unchecked{i++;}\r\n        }\r\n        \r\n    }\r\n    function unlock(uint256 _tokenid) public isStaked(_tokenid) {\r\n        require(locktime[_tokenid] != 0, \"token is not locked\");\r\n        require(block.timestamp > locktime[_tokenid],\"token is not locked\");\r\n        timestamp[_tokenid] = uint64(locktime[_tokenid]);\r\n        locktime[_tokenid] = 0;\r\n        \r\n    }\r\n    function payday(uint _days,uint256 _tokenid) public isStaked(_tokenid) {\r\n        require(_days <= maxLoanDays, \"days exceeds allowed yield advance period\");\r\n        require(locktime[_tokenid] == 0,\"token is currently in a locking period\");\r\n        uint256 _yield = (daily*86400)*_days;\r\n        locktime[_tokenid] = uint64((_days*86400)+block.timestamp);\r\n        IERC20(paymentContract).transfer(msg.sender,_yield);\r\n    }\r\n    function unstake(uint[] memory _tokenids) isOpen public {\r\n        uint totalStaked = staked;\r\n        uint userBalance = balanceOf[msg.sender];\r\n        for (uint i=0;i<_tokenids.length;){\r\n            require(holder[_tokenids[i]] == msg.sender,'not owner');\r\n            require(locktime[_tokenids[i]] == 0,\"token is currently in a locking period\");\r\n\r\n            uint256 pay = yield(_tokenids[i]);\r\n\r\n            timestamp[_tokenids[i]] = uint64(block.timestamp);\r\n            holder[_tokenids[i]] = 0x0000000000000000000000000000000000000000;\r\n            timestamp[_tokenids[i]] = uint64(0);\r\n\r\n            IERC20(paymentContract).transfer(msg.sender,pay);\r\n            IERC721(tokenContract).transferFrom(address(this),msg.sender,_tokenids[i]);\r\n            \r\n            emit Unstaked(_tokenids[i],msg.sender);\r\n            unchecked{\r\n                totalStaked --;\r\n                userBalance --;\r\n                i++;\r\n                }\r\n        }\r\n        staked = totalStaked;\r\n        balanceOf[msg.sender] = userBalance;\r\n    }\r\n    function stake(uint[] memory _tokenids) isOpen public{\r\n        uint totalStaked = staked;\r\n        uint userBalance = balanceOf[msg.sender];\r\n        for (uint i=0;i<_tokenids.length;){\r\n            IERC721(tokenContract).transferFrom(msg.sender, address(this), _tokenids[i]);\r\n            holder[_tokenids[i]] = msg.sender;\r\n            timestamp[_tokenids[i]] = uint64(block.timestamp);\r\n            \r\n            emit Staked(_tokenids[i],msg.sender);\r\n            unchecked{\r\n                totalStaked ++;\r\n                userBalance ++;\r\n                i++;\r\n                }\r\n        }\r\n        staked = totalStaked;\r\n        balanceOf[msg.sender] = userBalance;\r\n\r\n    }\r\n    function start()  public onlyOwner {\r\n         open = true;\r\n    }\r\n    function stop()  public onlyOwner {\r\n         open = false;\r\n    }\r\n    function changeMaxLoans(uint _newMax) public onlyOwner {\r\n        maxLoanDays = _newMax;\r\n    }\r\n    function changeDaily(uint256 _daily) public onlyOwner {\r\n        daily = _daily/86400;\r\n    }\r\n    function transferOwnership(address _owner)  external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n\r\n"
6     }
7   },
8   "settings": {
9     "optimizer": {
10       "enabled": false,
11       "runs": 200
12     },
13     "outputSelection": {
14       "*": {
15         "*": [
16           "evm.bytecode",
17           "evm.deployedBytecode",
18           "devdoc",
19           "userdoc",
20           "metadata",
21           "abi"
22         ]
23       }
24     }
25   }
26 }}