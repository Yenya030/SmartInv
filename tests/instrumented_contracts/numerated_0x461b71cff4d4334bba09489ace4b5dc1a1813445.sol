1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/HRD.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IRouter.sol\";\nimport \"./interfaces/IFactory.sol\";\n\ncontract HRD is IERC20, Ownable {\n    string public constant _name = \"Hoard\";\n    string public constant _symbol = \"HRD\";\n    uint8 public constant _decimals = 9;\n\n    uint256 public constant _totalSupply = 10_000_000 * (10 ** _decimals);\n\n    mapping (address => uint256) public _balances;\n    mapping (address => mapping (address => uint256)) public _allowances;\n\n    mapping (address => bool) public antibotWhitelist;\n\n    IRouter public constant router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    bool public taxes = true;\n    bool public antibot = true;\n    bool public swapping;\n\n    mapping (address => bool) public noTax;\n    mapping (address => bool) public dexPair;\n\n    uint256 public buyFee = 300;\n    uint256 public sellFee = 300;\n    bool public halfLiq;\n\n    uint256 private _tokens = 0;\n\n    uint256 public swapTrigger = 0;\n    uint256 public swapThreshold = _totalSupply / 40000;\n\n    bool private _swapping;\n\n    modifier intraswap() {\n        _swapping = true;\n        _;\n        _swapping = false;\n    }\n\n    constructor () {\n        address _pair = IFactory(router.factory()).createPair(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\n\n        _allowances[address(this)][address(router)] = _totalSupply;\n\n        antibotWhitelist[msg.sender] = true;\n        antibotWhitelist[_pair] = true;\n\n        noTax[msg.sender] = true;\n        dexPair[_pair] = true;\n\n        approve(address(router), _totalSupply);\n        approve(address(_pair), _totalSupply);\n\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    function totalSupply() external pure override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address holder, address spender) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, _totalSupply);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != _totalSupply) {\n            require(_allowances[sender][msg.sender] >= amount, \"Insufficient allowance\");\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) private returns (bool) {\n        if (_swapping) return _basicTransfer(sender, recipient, amount);\n        require(swapping || sender == owner());\n        if (antibot) require(antibotWhitelist[sender] || _balances[recipient] + amount < 100_000_000_000_000, \"Antibot enabled\");\n\n        address routerAddress = address(router);\n        bool _sell = dexPair[recipient] || recipient == routerAddress;\n\n        if (_sell && amount >= swapTrigger && _tokens > 0) {\n            if (!dexPair[msg.sender] && !_swapping && _balances[address(this)] >= swapThreshold) _sellTaxedTokens();\n        }\n\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n        _balances[sender] = _balances[sender] - amount;\n\n        uint256 amountReceived = (((dexPair[sender] || sender == address(router)) || (dexPair[recipient]|| recipient == address(router))) ? !noTax[sender] && !noTax[recipient] : false) ? _collectTaxedTokens(sender, recipient, amount) : amount;\n\n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) private returns (bool) {\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        return true;\n    }\n\n    function _collectTaxedTokens(address sender, address receiver, uint256 amount) private returns (uint256) {\n        bool _sell = dexPair[receiver] || receiver == address(router);\n        uint256 _fee = _sell ? sellFee : buyFee;\n        uint256 _tax = amount * _fee / 10000;\n\n        if (_fee > 0) {\n            if (_sell) {\n                if (sellFee > 0) _tokens += _tax * sellFee / _fee;\n            } else {\n                if (buyFee > 0) _tokens += _tax * buyFee / _fee;\n            }\n        }\n\n        _balances[address(this)] = _balances[address(this)] + _tax;\n        emit Transfer(sender, address(this), _tax);\n\n        return amount - _tax;\n    }\n\n    function _sellTaxedTokens() private intraswap {\n        uint256 _tokensHalf = _tokens / 2;\n        uint256 _balanceSnapshot = address(this).balance;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(balanceOf(address(this)) - _tokensHalf, 0, path, address(this), block.timestamp);\n\n        uint256 _tax = (address(this).balance - _balanceSnapshot);\n        if (halfLiq) _tax = _tax / 2;\n\n        if (_tax > 0) router.addLiquidityETH{value: _tax}(address(this), _tokensHalf, 0, 0, 0x000000000000000000000000000000000000dEaD, block.timestamp);\n\n        _tokens = 0;\n    }\n\n    function taxesDisabled() external view returns (bool) {\n        return !taxes;\n    }\n\n    function disableTaxes() external onlyOwner {\n        require(taxes);\n        taxes = false;\n        buyFee = 0;\n        sellFee = 0;\n    }\n\n    function antibotDisabled() external view returns (bool) {\n        return !antibot;\n    }\n\n    function disableAntibot() external onlyOwner {\n        require(antibot);\n        antibot = false;\n    }\n\n    function swappingEnabled() external view returns (bool) {\n        return swapping;\n    }\n\n    function enableSwapping() external onlyOwner {\n        require(!swapping);\n        swapping = true;\n    }\n\n    function addDexPair(address _pair) external onlyOwner {\n        dexPair[_pair] = true;\n    }\n\n    function getDexPair(address _pair) external view returns (bool) {\n        return dexPair[_pair];\n    }\n\n    function removeNoTax(address _wallet) external onlyOwner {\n        noTax[_wallet] = false;\n    }\n\n    function getNoTax(address _wallet) external view returns (bool) {\n        return noTax[_wallet];\n    }\n\n    function changeFees(uint256 _buyFee, uint256 _sellFee, bool _halfLiq, uint256 _swapTrigger, uint256 _swapThreshold) external onlyOwner {\n        if (taxes) {\n            buyFee = _buyFee;\n            sellFee = _sellFee;\n            halfLiq = _halfLiq;\n        }\n        swapTrigger = _swapTrigger;\n        swapThreshold = _swapThreshold;\n    }\n\n    function rescue(address token) external onlyOwner {\n        if (token == 0x0000000000000000000000000000000000000000) {\n            payable(msg.sender).call{value: address(this).balance}(\"\");\n        } else {\n            IERC20 Token = IERC20(token);\n            Token.transfer(msg.sender, Token.balanceOf(address(this)));\n        }\n    }\n\n    receive() external payable {}\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
12     },
13     "src/interfaces/IRouter.sol": {
14       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.6;\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\n}\n"
15     },
16     "src/interfaces/IFactory.sol": {
17       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.6;\n\ninterface IFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "remappings": [
25       "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
26       "@uniswap/v3-core/=lib/v3-core/",
27       "chainlink/=lib/chainlink/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/",
28       "ds-test/=lib/forge-std/lib/ds-test/src/",
29       "forge-std/=lib/forge-std/src/",
30       "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
31       "v3-core/=lib/v3-core/",
32       "v3-periphery/=lib/v3-periphery/contracts/",
33       "src/=src/",
34       "test/=test/",
35       "script/=script/"
36     ],
37     "optimizer": {
38       "enabled": true,
39       "runs": 200
40     },
41     "metadata": {
42       "bytecodeHash": "ipfs"
43     },
44     "outputSelection": {
45       "*": {
46         "*": [
47           "evm.bytecode",
48           "evm.deployedBytecode",
49           "devdoc",
50           "userdoc",
51           "metadata",
52           "abi"
53         ]
54       }
55     },
56     "evmVersion": "istanbul",
57     "libraries": {}
58   }
59 }}