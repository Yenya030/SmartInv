1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/MasterCats/MasterCatsMint.sol": {
5       "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport './Delegated.sol';\n\ninterface IERC20Withdraw{\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address to, uint256 amount) external returns (bool);\n}\n\ninterface IERC721Withdraw{\n  function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\ninterface IMasterCats{\n  function mintTo(uint16[] calldata quantity, address[] calldata recipient) external payable;\n}\n\ninterface IClaimed{\n  function claimed( address ) external returns( uint );\n}\n\ncontract MasterCatsMint is Delegated{\n  struct MintConfig{\n    uint64 ethPrice;\n    uint16 freeMints;\n    uint16 maxOrder;\n\n    bool isMintActive;\n    bool isFreeMintActive;\n  }\n\n  MintConfig public CONFIG = MintConfig(\n    0.019 ether, //ethPrice\n        1,\n       10,\n    false,\n    false\n  );\n\n  IClaimed public CLAIMS = IClaimed(0x784b2Bf7e10FFdbE5647BAC4FF71144D0Be044c1);\n  IMasterCats public PRINCIPAL = IMasterCats(0xF03c4e6b6187AcA96B18162CBb4468FC6E339120);\n  string public name = \"Master Cats Mint\";\n  string public symbol = \"MCM\";\n\n  mapping(address => uint16) public claimed;\n\n  constructor()\n    Delegated(){\n  }\n\n  function mint( uint16 quantity ) external payable{\n    MintConfig memory cfg = CONFIG;\n    require( cfg.isMintActive, \"sale is not active\" );\n    require( cfg.maxOrder >= quantity, \"order too big\" );\n\n    ( uint16 paid, uint16 free, uint16 claims ) = calculateQuantities(msg.sender, quantity);\n    require(msg.value >= paid * cfg.ethPrice, \"insufficient funds\" );\n\n    if( free > 0 || claims > 0 ){\n      claimed[ msg.sender ] = claims + free;\n    }\n\n    PRINCIPAL.mintTo{ value: msg.value }( _asArray( quantity ), _asArray( msg.sender ));\n  }\n\n  function setConfig( MintConfig calldata newConfig ) external onlyDelegates{\n    CONFIG = newConfig;\n  }\n\n  function setPrincipal( IMasterCats newAddress ) external onlyDelegates{\n    PRINCIPAL = newAddress;\n  }\n\n  //withdraw\n  function withdraw() external onlyOwner {\n    uint256 totalBalance = address(this).balance;\n    require(totalBalance > 0, \"no funds available\");\n    Address.sendValue(payable(owner()), totalBalance);\n  }\n\n  function withdraw(address token) external onlyDelegates{\n    IERC20Withdraw erc20 = IERC20Withdraw(token);\n    erc20.transfer(owner(), erc20.balanceOf(address(this)) );\n  }\n\n  function withdraw(address token, uint256[] calldata tokenId) external onlyDelegates{\n    for( uint256 i = 0; i < tokenId.length; ++i ){\n      IERC721Withdraw(token).transferFrom(address(this), owner(), tokenId[i] );\n    }\n  }\n\n  function calculateQuantities( address account, uint16 quantity ) public returns( uint16, uint16, uint16 ){\n    MintConfig memory cfg = CONFIG;\n\n    //free mint is not active\n    if( !cfg.isFreeMintActive )\n      return (quantity, 0, 0);\n\n\n    uint16 claims = claimed[ msg.sender ];\n    if( claims == 0 && address(CLAIMS) != address(0)){\n      claims = uint16(CLAIMS.claimed( account ));\n    }\n\n    //no free mints remaining\n    if( claims >= cfg.freeMints )\n      return (quantity, 0, claims);\n\n\n    uint16 free = cfg.freeMints - claims;\n    if( quantity > free ){\n      //use remaining free\n      uint16 paid = quantity - free;\n      return (paid, free, claims);\n    }\n    else{\n      //total quantity is free\n      return (0, quantity, claims);\n    }\n  }\n\n  function calculateTotal( address account, uint16 quantity ) external returns( uint256 ){\n    ( uint16 paid, uint16 free, uint16 claims ) = calculateQuantities(account, quantity);\n    return paid * CONFIG.ethPrice;\n  }\n\n\n  function _asArray(address element) private pure returns (address[] memory array) {\n    array = new address[](1);\n    array[0] = element;\n  }\n\n  function _asArray(uint16 element) private pure returns (uint16[] memory array) {\n    array = new uint16[](1);\n    array[0] = element;\n  }\n}\n"
6     },
7     "/contracts/MasterCats/Delegated.sol": {
8       "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable{\n  mapping(address => bool) internal _delegates;\n\n  modifier onlyDelegates {\n    require(_delegates[msg.sender], \"Invalid delegate\" );\n    _;\n  }\n\n  constructor()\n    Ownable(){\n    setDelegate( owner(), true );\n  }\n\n  //onlyOwner\n  function isDelegate( address addr ) external view onlyOwner returns( bool ){\n    return _delegates[addr];\n  }\n\n  function setDelegate( address addr, bool isDelegate_ ) public onlyOwner{\n    _delegates[addr] = isDelegate_;\n  }\n\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\n    _delegates[newOwner] = true;\n    super.transferOwnership( newOwner );\n  }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Address.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "remappings": [],
22     "optimizer": {
23       "enabled": true,
24       "runs": 200
25     },
26     "evmVersion": "london",
27     "libraries": {},
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     }
40   }
41 }}