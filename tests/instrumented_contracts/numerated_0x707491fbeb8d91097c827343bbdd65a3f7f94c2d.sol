1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/DarkBrandon/DarkBrandon.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;         \n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";         \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";         \nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";         \nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";         \nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";         \n\ninterface IUSDCReceiver {\n    function initialize(address) external;\n    function withdraw() external;\n    function withdrawUnsupportedAsset(address, uint256) external;\n}\n\ncontract USDCReceiver is IUSDCReceiver, Ownable {\n    address public usdc;\n    address public token;\n\n    constructor() Ownable() {\n        token = msg.sender;\n    }\n\n    function initialize(address _usdc) public onlyOwner {\n        require(usdc == address(0x0), \"Already initialized\");\n        usdc = _usdc;\n    }\n\n    function withdraw() public {\n        require(msg.sender == token, \"Caller is not token\");\n        IERC20(usdc).transfer(token, IERC20(usdc).balanceOf(address(this)));\n    }\n\n    function withdrawUnsupportedAsset(address _token, uint256 _amount) public onlyOwner {\n        if(_token == address(0x0))\n            payable(owner()).transfer(_amount);\n        else\n            IERC20(_token).transfer(owner(), _amount);\n    }\n}\n\ncontract DarkBrandon is Context, IERC20, Ownable {         \n    using SafeMath for uint256;         \n\n    IUniswapV2Router02 private _uniswapV2Router;\n\n    USDCReceiver private _receiver;         \n\n    mapping (address => uint) private _antiMEV;         \n\n    mapping (address => uint256) private _balances;         \n\n    mapping (address => mapping (address => uint256)) private _allowances;         \n\n    mapping (address => bool) private _isExcludedFromFees;         \n    mapping (address => bool) private _isExcludedMaxTransactionAmount;         \n\n    bool public tradingOpen;         \n    bool private _swapping;         \n    bool public swapEnabled;         \n    bool public antiMEVEnabled;         \n\n    string private constant _name = \"Dark Brandon\";         \n    string private constant _symbol = \"BRANDON\";         \n\n    uint8 private constant _decimals = 18;         \n\n    uint256 private constant _totalSupply = 75_757_757_757_757 * (10**_decimals);         \n\n    uint256 public buyThreshold = _totalSupply.mul(15).div(1000);         \n    uint256 public sellThreshold = _totalSupply.mul(15).div(1000);         \n    uint256 public walletThreshold = _totalSupply.mul(15).div(1000);         \n\n    uint256 public fee = 50; // 5%         \n    uint256 private _previousFee = fee;         \n\n    uint256 private _tokensForFee;         \n    uint256 private _swapTokensAtAmount = _totalSupply.mul(7).div(10000);                  \n\n    address payable private feeCollector;         \n    address private _uniswapV2Pair;         \n    address private DEAD = 0x000000000000000000000000000000000000dEaD;         \n    address private ZERO = 0x0000000000000000000000000000000000000000;         \n    address private USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    \n    constructor () {         \n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);         \n        _approve(address(this), address(_uniswapV2Router), _totalSupply);         \n        IERC20(USDC).approve(address(_uniswapV2Router), IERC20(USDC).balanceOf(address(this)));         \n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), USDC);         \n        IERC20(_uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);         \n\n        _receiver = new USDCReceiver();\n        _receiver.initialize(USDC);\n        _receiver.transferOwnership(msg.sender);\n\n        feeCollector = payable(_msgSender());         \n        _balances[_msgSender()] = _totalSupply;         \n\n        _isExcludedFromFees[owner()] = true;         \n        _isExcludedFromFees[address(this)] = true;         \n        _isExcludedFromFees[address(_receiver)] = true;         \n        _isExcludedFromFees[DEAD] = true;         \n\n        _isExcludedMaxTransactionAmount[owner()] = true;         \n        _isExcludedMaxTransactionAmount[address(this)] = true;         \n        _isExcludedMaxTransactionAmount[address(_receiver)] = true;         \n        _isExcludedMaxTransactionAmount[DEAD] = true;         \n\n        emit Transfer(ZERO, _msgSender(), _totalSupply);         \n    }         \n\n    function name() public pure returns (string memory) {         \n        return _name;         \n    }         \n\n    function symbol() public pure returns (string memory) {         \n        return _symbol;         \n    }         \n\n    function decimals() public pure returns (uint8) {         \n        return _decimals;         \n    }         \n\n    function totalSupply() public pure override returns (uint256) {         \n        return _totalSupply;         \n    }         \n\n    function balanceOf(address account) public view override returns (uint256) {         \n        return _balances[account];         \n    }         \n\n    function transfer(address to, uint256 amount) public override returns (bool) {         \n        _transfer(_msgSender(), to, amount);         \n        return true;         \n    }         \n\n    function allowance(address owner, address spender) public view override returns (uint256) {         \n        return _allowances[owner][spender];         \n    }         \n\n    function approve(address spender, uint256 amount) public override returns (bool) {         \n        address owner = _msgSender();         \n        _approve(owner, spender, amount);         \n        return true;         \n    }         \n\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {         \n        address spender = _msgSender();         \n        _spendAllowance(from, spender, amount);         \n        _transfer(from, to, amount);         \n        return true;         \n    }         \n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {         \n        address owner = _msgSender();         \n        _approve(owner, spender, allowance(owner, spender) + addedValue);         \n        return true;         \n    }         \n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {         \n        address owner = _msgSender();         \n        uint256 currentAllowance = allowance(owner, spender);         \n        require(currentAllowance >= subtractedValue, \"BRANDON: decreased allowance below zero\");         \n        unchecked {         \n            _approve(owner, spender, currentAllowance - subtractedValue);         \n        }         \n\n        return true;         \n    }         \n\n    function _transfer(address from, address to, uint256 amount) internal {         \n        require(from != ZERO, \"BRANDON: transfer from the zero address\");         \n        require(to != ZERO, \"BRANDON: transfer to the zero address\");         \n        require(amount > 0, \"BRANDON: Transfer amount must be greater than zero\");         \n\n        bool takeFee = true;         \n        bool shouldSwap = false;         \n        if (from != owner() && to != owner() && to != ZERO && to != DEAD && !_swapping) {         \n            if(!tradingOpen) require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"BRANDON: Trading is not allowed yet.\");         \n\n            if (antiMEVEnabled) {         \n                if (to != address(_uniswapV2Router) && to != address(_uniswapV2Pair)) {         \n                    require(_antiMEV[tx.origin] < block.number - 1 && _antiMEV[to] < block.number - 1, \"BRANDON: Transfer delay enabled. Try again later.\");         \n                    _antiMEV[tx.origin] = block.number;         \n                    _antiMEV[to] = block.number;         \n                }         \n            }         \n\n            if (from == _uniswapV2Pair && to != address(_uniswapV2Router) && !_isExcludedMaxTransactionAmount[to]) {         \n                require(amount <= buyThreshold, \"BRANDON: Transfer amount exceeds the buyThreshold.\");         \n                require(balanceOf(to) + amount <= walletThreshold, \"BRANDON: Exceeds maximum wallet token amount.\");         \n            }         \n            \n            if (to == _uniswapV2Pair && from != address(_uniswapV2Router) && !_isExcludedMaxTransactionAmount[from]) {         \n                require(amount <= sellThreshold, \"BRANDON: Transfer amount exceeds the sellThreshold.\");         \n                \n                shouldSwap = true;         \n            }         \n        }         \n\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) takeFee = false;         \n\n        uint256 contractBalance = balanceOf(address(this));         \n        bool canSwap = (contractBalance > _swapTokensAtAmount) && shouldSwap;         \n\n        if (canSwap && swapEnabled && !_swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {         \n            _swapping = true;         \n            _swapBack(contractBalance);         \n            _swapping = false;         \n        }         \n\n        _tokenTransfer(from, to, amount, takeFee);         \n    }         \n\n    function _approve(address owner, address spender, uint256 amount) internal {         \n        require(owner != ZERO, \"BRANDON: approve from the zero address\");         \n        require(spender != ZERO, \"BRANDON: approve to the zero address\");         \n\n        _allowances[owner][spender] = amount;         \n        emit Approval(owner, spender, amount);         \n    }         \n\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {         \n        uint256 currentAllowance = allowance(owner, spender);         \n        if (currentAllowance != type(uint256).max) {         \n            require(currentAllowance >= amount, \"BRANDON: insufficient allowance\");         \n            unchecked {         \n                _approve(owner, spender, currentAllowance - amount);         \n            }         \n        }         \n    }         \n\n    function _swapBack(uint256 contractBalance) internal {         \n        if (contractBalance == 0 || _tokensForFee == 0) return;         \n\n        if (contractBalance > _swapTokensAtAmount * 5) contractBalance = _swapTokensAtAmount * 5;         \n\n        _swapTokensForTokens(contractBalance);          \n\n        _receiver.withdraw();\n        \n        _tokensForFee = 0;         \n\n        IERC20(USDC).transfer(feeCollector, IERC20(USDC).balanceOf(address(this)));\n    }         \n\n    function _swapTokensForTokens(uint256 tokenAmount) internal {         \n        address[] memory path = new address[](2);         \n        path[0] = address(this);         \n        path[1] = USDC;         \n        _approve(address(this), address(_uniswapV2Router), tokenAmount);         \n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(_receiver),\n            block.timestamp\n        );         \n    }         \n\n    function _removeFee() internal {         \n        if (fee == 0) return;         \n        _previousFee = fee;         \n        fee = 0;         \n    }         \n    \n    function _restoreFee() internal {         \n        fee = _previousFee;         \n    }         \n        \n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal {         \n        if (!takeFee) _removeFee();         \n        else amount = _takeFees(sender, amount);         \n\n        _transferStandard(sender, recipient, amount);         \n        \n        if (!takeFee) _restoreFee();         \n    }         \n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) internal {         \n        _balances[sender] = _balances[sender].sub(tAmount);         \n        _balances[recipient] = _balances[recipient].add(tAmount);         \n        emit Transfer(sender, recipient, tAmount);         \n    }         \n\n    function _takeFees(address sender, uint256 amount) internal returns (uint256) {         \n        if (fee > 0) {         \n            uint256 fees = amount.mul(fee).div(1000);         \n            _tokensForFee += fees * fee / fee;         \n\n            if (fees > 0) _transferStandard(sender, address(this), fees);         \n\n            amount -= fees;         \n        }         \n\n        return amount;         \n    }         \n\n    function usdcReceiverAddress() external view returns (address) {\n        return address(_receiver);\n    }\n    \n    function openTrading() public onlyOwner {         \n        require(!tradingOpen,\"BRANDON: Trading is already open\");         \n        IERC20(USDC).approve(address(_uniswapV2Router), IERC20(USDC).balanceOf(address(this)));         \n        _uniswapV2Router.addLiquidity(address(this), USDC, balanceOf(address(this)), IERC20(USDC).balanceOf(address(this)), 0, 0, owner(), block.timestamp);         \n        swapEnabled = true;               \n        antiMEVEnabled = true;               \n        tradingOpen = true;         \n    }         \n\n    function setBuyThreshold(uint256 _buyTreshold) public onlyOwner {         \n        require(_buyTreshold >= (totalSupply().mul(1).div(1000)), \"BRANDON: Max buy amount cannot be lower than 0.1% total supply.\");         \n        buyThreshold = _buyTreshold;         \n    }         \n\n    function setSellThreshold(uint256 _sellThreshold) public onlyOwner {         \n        require(_sellThreshold >= (totalSupply().mul(1).div(1000)), \"BRANDON: Max sell amount cannot be lower than 0.1% total supply.\");         \n        sellThreshold = _sellThreshold;         \n    }         \n    \n    function setWalletThreshold(uint256 _walletThreshold) public onlyOwner {         \n        require(_walletThreshold >= (totalSupply().mul(1).div(100)), \"BRANDON: Max wallet amount cannot be lower than 1% total supply.\");         \n        walletThreshold = _walletThreshold;         \n    }         \n    \n    function setSwapTokensAtAmount(uint256 _swapAmountThreshold) public onlyOwner {         \n        require(_swapAmountThreshold >= (totalSupply().mul(1).div(100000)), \"BRANDON: Swap amount cannot be lower than 0.001% total supply.\");         \n        require(_swapAmountThreshold <= (totalSupply().mul(5).div(1000)), \"BRANDON: Swap amount cannot be higher than 0.5% total supply.\");         \n        _swapTokensAtAmount = _swapAmountThreshold;         \n    }         \n\n    function setSwapEnabled(bool onoff) public onlyOwner {         \n        swapEnabled = onoff;         \n    }         \n\n    function setAntiMEVEnabled(bool onoff) public onlyOwner {         \n        antiMEVEnabled = onoff;         \n    }         \n\n    function setFeeCollector(address feeCollectorAddy) public onlyOwner {         \n        require(feeCollectorAddy != ZERO, \"BRANDON: feeCollector address cannot be 0\");         \n        feeCollector = payable(feeCollectorAddy);         \n        _isExcludedFromFees[feeCollectorAddy] = true;         \n        _isExcludedMaxTransactionAmount[feeCollectorAddy] = true;         \n    }         \n\n    function excludeFromFees(address[] memory accounts, bool isEx) public onlyOwner {         \n        for (uint i = 0; i < accounts.length; i++) _isExcludedFromFees[accounts[i]] = isEx;         \n    }         \n    \n    function excludeFromMaxTransaction(address[] memory accounts, bool isEx) public onlyOwner {         \n        for (uint i = 0; i < accounts.length; i++) _isExcludedMaxTransactionAmount[accounts[i]] = isEx;         \n    }         \n\n    function rescueETH() public onlyOwner {         \n        bool success;         \n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");         \n    }         \n\n    function rescueTokens(address tokenAddy) public onlyOwner {         \n        require(tokenAddy != address(this), \"Cannot withdraw this token\");         \n        require(IERC20(tokenAddy).balanceOf(address(this)) > 0, \"No tokens\");         \n        uint amount = IERC20(tokenAddy).balanceOf(address(this));         \n        IERC20(tokenAddy).transfer(msg.sender, amount);         \n    }         \n\n    function removeThresholds() public onlyOwner {         \n        buyThreshold = _totalSupply;         \n        sellThreshold = _totalSupply;         \n        walletThreshold = _totalSupply;         \n    }         \n\n    receive() external payable {\n    }         \n    fallback() external payable {\n    }         \n\n}         "
6     },
7     "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
8       "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
9     },
10     "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
11       "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
12     },
13     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
23       "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     }
28   },
29   "settings": {
30     "optimizer": {
31       "enabled": false,
32       "runs": 200
33     },
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     }
46   }
47 }}