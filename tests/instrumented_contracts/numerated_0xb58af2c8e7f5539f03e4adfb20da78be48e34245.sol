1 {{
2   "language": "Solidity",
3   "sources": {
4     "@flair-sdk/contracts/src/access/ownable/OwnableStorage.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary OwnableStorage {\n    struct Layout {\n        address owner;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.Ownable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setOwner(Layout storage l, address owner) internal {\n        l.owner = owner;\n    }\n}\n"
6     },
7     "@flair-sdk/contracts/src/finance/royalty/IRoyalty.sol": {
8       "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.15;\n\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\";\n\nimport \"./IRoyaltyInternal.sol\";\n\ninterface IRoyalty is IEIP2981, IRaribleV1, IRaribleV2, IFoundation, IRoyaltyInternal {\n    /**\n     * @dev Default royalty for all tokens without a specific royalty.\n     */\n    function defaultRoyalty() external view returns (TokenRoyalty memory);\n\n    /**\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\n     */\n    function getTokenRoyaltiesCount() external view returns (uint256);\n\n    /**\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\n     */\n    function getTokenRoyaltyByIndex(uint256 index) external view returns (TokenRoyaltyConfig memory);\n}\n"
9     },
10     "@flair-sdk/contracts/src/finance/royalty/IRoyaltyInternal.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface IRoyaltyInternal {\n    event TokenRoyaltyRemoved(uint256 tokenId);\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\n    event DefaultRoyaltySet(address recipient, uint16 bps);\n\n    struct TokenRoyalty {\n        address recipient;\n        uint16 bps;\n    }\n\n    struct TokenRoyaltyConfig {\n        uint256 tokenId;\n        address recipient;\n        uint16 bps;\n    }\n}\n"
12     },
13     "@flair-sdk/contracts/src/finance/royalty/RoyaltyEnforcementStorage.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary RoyaltyEnforcementStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.RoyaltyEnforcement\");\n\n    struct Layout {\n        bool enforceRoyalties;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
15     },
16     "@flair-sdk/contracts/src/finance/royalty/RoyaltyStorage.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./IRoyaltyInternal.sol\";\nimport \"./IRoyalty.sol\";\n\nlibrary RoyaltyStorage {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    struct Layout {\n        IRoyaltyInternal.TokenRoyalty defaultRoyalty;\n        mapping(uint256 => IRoyaltyInternal.TokenRoyalty) tokenRoyalties;\n        EnumerableSet.UintSet tokensWithRoyalties;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.Royalty\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
18     },
19     "@flair-sdk/contracts/src/introspection/ERC165Storage.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC165Storage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC165\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId) internal view returns (bool) {\n        return l.supportedInterfaces[interfaceId];\n    }\n\n    function setSupportedInterface(\n        Layout storage l,\n        bytes4 interfaceId,\n        bool status\n    ) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        l.supportedInterfaces[interfaceId] = status;\n    }\n}\n"
21     },
22     "@flair-sdk/contracts/src/token/common/metadata/MetadataStorage.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary MetadataStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.Metadata\");\n\n    struct Layout {\n        string name;\n        string symbol;\n        bool nameAndSymbolLocked;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
24     },
25     "@flair-sdk/contracts/src/token/common/metadata/TokenMetadataStorage.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary TokenMetadataStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.TokenMetadata\");\n\n    struct Layout {\n        string baseURI;\n        bool baseURILocked;\n        string fallbackURI;\n        bool fallbackURILocked;\n        string uriSuffix;\n        bool uriSuffixLocked;\n        uint256 lastUnlockedTokenId;\n        mapping(uint256 => string) tokenURIs;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
27     },
28     "@flair-sdk/contracts/src/token/ERC721/extensions/supply/ERC721SupplyStorage.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC721SupplyStorage {\n    struct Layout {\n        // The next token ID to be minted.\n        uint256 currentIndex;\n        // The number of tokens burned.\n        uint256 burnCounter;\n        // Maximum possible supply of tokens.\n        uint256 maxSupply;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC721Supply\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
30     },
31     "@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n}"
33     },
34     "@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFoundation {\n    /*\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\n     *\n     *  => 0xd5a06d4c = 0xd5a06d4c\n     */\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n}\n\ninterface IFoundationTreasuryNode {\n    function getFoundationTreasury() external view returns (address payable);\n}\n\ninterface IFoundationTreasury {\n    function isAdmin(address account) external view returns (bool);\n}"
36     },
37     "@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRaribleV1 {\n    /*\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\n     *\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\n     */\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\n}\n\n\ninterface IRaribleV2 {\n    /*\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\n}"
39     },
40     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
42     },
43     "contracts/Diamond.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n/******************************************************************************\\\n* Diamond Contract Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n*\n* Implementation of a diamond.\n* @team https://twitter.com/quirkiesnft\n* @url https://quirkies.io/\n* @author GrizzlyDesign \n* @url https://twitter.com/grizzlywebdev\n/******************************************************************************/\n\n/*\n..........................................................................................\n...............,:;;;:,....................................................................\n...........,+?#@@@@@@#%,..................................................................\n........,+%@@@S%%?+;#@@;..............................................:*?%%?;,............\n.......+#@@%*?S#%++?@@%,.............................................;@@@SS#@@%:..........\n.....,?@@S:*%%*+;?@@@+...............................................S@@:+*.:?@@%:........\n.....:@@@%+**?S#@@@@@%:............,,,:::::,,,,......................%@@,+@S*,,%@@;.......\n.....,?#@@@@@@@@?;,:%@@+.....,:+?%##@@@@@@@@@@##S%*+:,..............,+@@S,*@@@*.*@@;......\n.......,;;;::?@@*....*@@?,:*S@@@@@#S%?*++++++++*?%#@@@#%+:,.......:?#@@@@S::%@@;.?@#,.....\n..............*@@%:...;#@#@@@S?+:,,................,:+?S@@#%;,..:?@@#*+*#@@?::*?;;@@:.....\n...............:%@@+,:*@@#?;,...........................,;?#@#??@@#*,...:@@@@S***#@#,.....\n.................;#@#@@%;,.................................,;S@@#+,....;%@@%%#@@@@%:......\n................,*@@@?:.....................................:?S+,...,+S@@%;...,::,........\n...............;#@@?,......................................*%;....,*#@@?:.................\n.............,?@@S:........................................,....:?#@@%,...................\n............,S@@?,............................................:%%;:#@#:...................\n...........,#@@*..............................................::...:@@S,..................\n..........,S@@?.....................................................*@@+..................\n..........*@@S,.....................................................,@@#,.................\n.........,#@@;......,*%+.............................................S@@:.................\n.........;@@#,......,@@@+:*SS+.............::,...,:,.................?@@+.................\n.........*@@?........*@@@@@@S+............:@@#;:?@@%.................?@@*.................\n.........*@@*.....,+%@@@@@*:...............+#@@@@@%:.................S@@;.................\n.........;@@S;...,#@@#%#@@?................,%@@@@*..................:@@@,.................\n.........?@@+,....;+:,.:#@#,.....,:,.....,*#@@S@@@*,................%@@?..................\n........;@@?............,:,....;S@@#:....:#@S;.;S@S,...............+@@#,..................\n........:@@S,..:S%+:..........;@@@@@?.....,,.....,,............,*,;@@@;...................\n.........?@@#%?#@@@@%:........;@@@@@*...........................*#@@@;....................\n..........;S#@@#%;:#@@?;.......::,::,...............,,,,,,.......%@@;.....................\n............,,,,..*@@%+,.....................,..,;?S@@@@@#?;.....?@#,.....................\n.................;@@*.......;,..............,?%*#@@#%??S@@?:....+@@?......................\n.................?@@,......%S,................;@@#;,....*@@@%?%#@@%,......................\n.................?@@+.....+@,.......*+.........%@@,......,+%#@@#%;........................\n.................:#@@*,...+#........#?........,#@@,.........,,,,..........................\n..................,?#@@S%%#@?,.....,#%.......:S@@*........................................\n....................,;*%SSS@@@%***%@@@S+:::+%@@#+.........................................\n...........................:*S#@@@#%*S@@@@@@@%+,..........................................\n..............................,,,,....,:;;;:,.............................................\n..........................................................................................\n*/\n\nimport {LibDiamond} from \"./libraries/LibDiamond.sol\";\nimport {IDiamondCut} from \"./interfaces/IDiamondCut.sol\";\nimport {IDiamondLoupe} from \"./interfaces/IDiamondLoupe.sol\";\nimport {IERC173} from \"./interfaces/IERC173.sol\";\nimport \"@flair-sdk/contracts/src/access/ownable/OwnableStorage.sol\";\nimport \"@flair-sdk/contracts/src/token/common/metadata/MetadataStorage.sol\";\nimport \"@flair-sdk/contracts/src/token/common/metadata/TokenMetadataStorage.sol\";\nimport \"./libraries/PyramidStorage.sol\";\nimport \"@flair-sdk/contracts/src/finance/royalty/RoyaltyEnforcementStorage.sol\";\nimport \"@flair-sdk/contracts/src/token/ERC721/extensions/supply/ERC721SupplyStorage.sol\";\nimport \"@flair-sdk/contracts/src/finance/royalty/RoyaltyStorage.sol\";\nimport \"@flair-sdk/contracts/src/introspection/ERC165Storage.sol\";\n\ncontract QuirkiesDiamond {\n    using OwnableStorage for OwnableStorage.Layout;\n    using MetadataStorage for MetadataStorage.Layout;\n    using PyramidStorage for PyramidStorage.Layout;\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n    using RoyaltyEnforcementStorage for RoyaltyEnforcementStorage.Layout;\n    using RoyaltyStorage for RoyaltyStorage.Layout;\n    using ERC721SupplyStorage for ERC721SupplyStorage.Layout;\n    using ERC165Storage for ERC165Storage.Layout;\n\n    constructor(\n        address _contractOwner,\n        address _diamondCutFacet,\n        string memory _name,\n        string memory _symbol,\n        string memory _contractURI,\n        string memory _baseURI,\n        string memory _uriSuffix,\n        uint256 _maxSupply,\n        address _royaltyRecipient,\n        uint16 _bps\n    ) payable {\n        // set owner\n        OwnableStorage.layout().setOwner(_contractOwner);\n\n        // set metadata\n        MetadataStorage.layout().name = _name;\n        MetadataStorage.layout().symbol = _symbol;\n\n        // set contract URI\n        PyramidStorage.layout().contractURI = _contractURI;\n\n        // set BaseURI\n        TokenMetadataStorage.layout().baseURI = _baseURI;\n        TokenMetadataStorage.layout().uriSuffix = _uriSuffix;\n\n        // set Max Supply\n        ERC721SupplyStorage.layout().maxSupply = _maxSupply;\n\n        // set royalty enforcement\n        RoyaltyEnforcementStorage.layout().enforceRoyalties = true;\n\n        // set default royalty\n        IRoyaltyInternal.TokenRoyalty memory royalty = IRoyaltyInternal\n            .TokenRoyalty({recipient: _royaltyRecipient, bps: _bps});\n        RoyaltyStorage.layout().defaultRoyalty = royalty;\n\n        // set supported interfaces\n        ERC165Storage.layout().setSupportedInterface(0x01ffc9a7, true);\n        ERC165Storage.layout().setSupportedInterface(0x1f931c1c, true);\n        ERC165Storage.layout().setSupportedInterface(0x48e2b093, true);\n        ERC165Storage.layout().setSupportedInterface(0x2a848091, true);\n        ERC165Storage.layout().setSupportedInterface(0x8153916a, true);\n        ERC165Storage.layout().setSupportedInterface(0xb45a3c0e, true);\n        ERC165Storage.layout().setSupportedInterface(0x80ac58cd, true);\n        ERC165Storage.layout().setSupportedInterface(0xcdbde6dc, true);\n        ERC165Storage.layout().setSupportedInterface(0xf69e0366, true);\n        ERC165Storage.layout().setSupportedInterface(0x459bd11c, true);\n        ERC165Storage.layout().setSupportedInterface(0xc82b5d4d, true);\n        ERC165Storage.layout().setSupportedInterface(0xffa6b6b8, true);\n        ERC165Storage.layout().setSupportedInterface(0x5b5e139f, true);\n        ERC165Storage.layout().setSupportedInterface(0x93254542, true);\n        ERC165Storage.layout().setSupportedInterface(0x1f0b49eb, true);\n        ERC165Storage.layout().setSupportedInterface(0x7f5828d0, true);\n        ERC165Storage.layout().setSupportedInterface(0x06ad59bc, true);\n        ERC165Storage.layout().setSupportedInterface(0xbe561268, true);\n        ERC165Storage.layout().setSupportedInterface(0x52ef6f9a, true);\n        ERC165Storage.layout().setSupportedInterface(0x3f963a7f, true);\n        ERC165Storage.layout().setSupportedInterface(0x2a55205a, true);\n        ERC165Storage.layout().setSupportedInterface(0x821be678, true);\n        ERC165Storage.layout().setSupportedInterface(0xb7799584, true);\n        ERC165Storage.layout().setSupportedInterface(0xd5a06d4c, true);\n        ERC165Storage.layout().setSupportedInterface(0xc7627428, true);\n        ERC165Storage.layout().setSupportedInterface(0x150b7a02, true);\n        ERC165Storage.layout().setSupportedInterface(0x49064906, true);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        LibDiamond.diamondCut(cut, address(0), \"\");\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            ds.slot := position\n        }\n        // get facet from function selector\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
45     },
46     "contracts/interfaces/IDiamondCut.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
48     },
49     "contracts/interfaces/IDiamondLoupe.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(\n        address _facet\n    ) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(\n        bytes4 _functionSelector\n    ) external view returns (address facetAddress_);\n}\n"
51     },
52     "contracts/interfaces/IERC173.sol": {
53       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\nimport \"./IERC173Events.sol\";\r\n\r\n/**\r\n * @title Contract ownership standard interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-173\r\n */\r\ninterface IERC173 is IERC173Events {\r\n    /**\r\n     * @notice get the ERC173 contract owner\r\n     * @return conrtact owner\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @notice transfer contract ownership to new account\r\n     * @param account address of new owner\r\n     */\r\n    function transferOwnership(address account) external;\r\n}\r\n"
54     },
55     "contracts/interfaces/IERC173Events.sol": {
56       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\n/**\r\n * @title Contract ownership standard interface (event only)\r\n * @dev see https://eips.ethereum.org/EIPS/eip-173\r\n */\r\ninterface IERC173Events {\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n}\r\n"
57     },
58     "contracts/libraries/LibDiamond.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror InitializationFunctionReverted(\n    address _initializationContractAddress,\n    bytes _calldata\n);\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event DiamondCut(\n        IDiamondCut.FacetCut[] _diamondCut,\n        address _init,\n        bytes _calldata\n    );\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (\n            uint256 facetIndex;\n            facetIndex < _diamondCut.length;\n            facetIndex++\n        ) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint96 selectorPosition = uint96(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress == address(0),\n                \"LibDiamondCut: Can't add function that already exists\"\n            );\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint96 selectorPosition = uint96(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress != _facetAddress,\n                \"LibDiamondCut: Can't replace function with same function\"\n            );\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(\n            _facetAddress == address(0),\n            \"LibDiamondCut: Remove facet address must be address(0)\"\n        );\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(\n        DiamondStorage storage ds,\n        address _facetAddress\n    ) internal {\n        enforceHasContractCode(\n            _facetAddress,\n            \"LibDiamondCut: New facet has no code\"\n        );\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\n            .facetAddresses\n            .length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n    function addFunction(\n        DiamondStorage storage ds,\n        bytes4 _selector,\n        uint96 _selectorPosition,\n        address _facetAddress\n    ) internal {\n        ds\n            .selectorToFacetAndPosition[_selector]\n            .functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\n            _selector\n        );\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(\n        DiamondStorage storage ds,\n        address _facetAddress,\n        bytes4 _selector\n    ) internal {\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Can't remove function that doesn't exist\"\n        );\n        // an immutable function is a function defined directly in a diamond\n        require(\n            _facetAddress != address(this),\n            \"LibDiamondCut: Can't remove immutable function\"\n        );\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds\n            .selectorToFacetAndPosition[_selector]\n            .functionSelectorPosition;\n        uint256 lastSelectorPosition = ds\n            .facetFunctionSelectors[_facetAddress]\n            .functionSelectors\n            .length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds\n                .facetFunctionSelectors[_facetAddress]\n                .functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\n                    selectorPosition\n                ] = lastSelector;\n            ds\n                .selectorToFacetAndPosition[lastSelector]\n                .functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[\n                    lastFacetAddressPosition\n                ];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds\n                    .facetFunctionSelectors[lastFacetAddress]\n                    .facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        if (_init == address(0)) {\n            return;\n        }\n        enforceHasContractCode(\n            _init,\n            \"LibDiamondCut: _init address has no code\"\n        );\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\n        if (!success) {\n            if (error.length > 0) {\n                // bubble up error\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(error)\n                    revert(add(32, error), returndata_size)\n                }\n            } else {\n                revert InitializationFunctionReverted(_init, _calldata);\n            }\n        }\n    }\n\n    function enforceHasContractCode(\n        address _contract,\n        string memory _errorMessage\n    ) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
60     },
61     "contracts/libraries/PyramidStorage.sol": {
62       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\nlibrary PyramidStorage {\r\n    struct TokenSlot {\r\n        uint16 tokenId;\r\n        bool occupied;\r\n    }\r\n\r\n    struct Layout {\r\n        mapping(uint16 => TokenSlot[4]) pyramidToSlots;\r\n        mapping(bytes32 => bool) usedMessages;\r\n        address itemsContract;\r\n        address applicationAddress;\r\n        string contractURI;\r\n    }\r\n\r\n    bytes32 internal constant STORAGE_SLOT =\r\n        keccak256(\"grizzly.contracts.storage.Pyramid\");\r\n\r\n    function layout() internal pure returns (Layout storage l) {\r\n        bytes32 slot = STORAGE_SLOT;\r\n        assembly {\r\n            l.slot := slot\r\n        }\r\n    }\r\n\r\n    function setItemsContract(\r\n        Layout storage l,\r\n        address _itemsContract\r\n    ) internal {\r\n        l.itemsContract = _itemsContract;\r\n    }\r\n\r\n    function setApplicationAddress(\r\n        Layout storage l,\r\n        address _applicationAddress\r\n    ) internal {\r\n        l.applicationAddress = _applicationAddress;\r\n    }\r\n\r\n    function setContractURI(\r\n        Layout storage l,\r\n        string memory _contractURI\r\n    ) internal {\r\n        l.contractURI = _contractURI;\r\n    }\r\n}\r\n"
63     }
64   },
65   "settings": {
66     "optimizer": {
67       "enabled": false,
68       "runs": 200
69     },
70     "outputSelection": {
71       "*": {
72         "*": [
73           "evm.bytecode",
74           "evm.deployedBytecode",
75           "devdoc",
76           "userdoc",
77           "metadata",
78           "abi"
79         ]
80       }
81     },
82     "libraries": {}
83   }
84 }}