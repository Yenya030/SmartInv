1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CrudeBorneEggs.sol": {
5       "content": "// SPDX-License-Identifier: Unlicense\n// Creator: U dont need 2 know dat u farkers\n\n// ┻┳|\n// ┻┳|\n// ┳┻|\n// ┳┻|\n// ┻┳|\n// ┻┳|\n// ┳┻|\n// ┳┻|\n// ┻┳|\n// ┳┻|\n// ┻┳|\n// ┳┻| _\n// ┻┳| •.•)  [환영하다, wat r u looking at]\n// ┳┻|⊂ﾉ\n// ┻┳|\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./ERC721.sol\";\nimport \"./ENSResolver.sol\";\n\n\n// ꏸ꒓ꐇꁕꍟ\n//        _____    _______     __        _   ______       ________\n//      //.    \\  ||.     \\    ||.       |  ||.    \\     ||.      \\\n//     //.        |☥.      \\   ||.       |  ||.     \\    ||.\n//    //.         ||.      /   |☥.       |  ||.      \\   ||.\n//    |☥.         ||._____/    ||.       |  ||.       |  ||.-----|\n//    \\\\.         ||.     \\    \\\\.      /   ||.      /   |☥.\n//     \\\\.        ||.      \\    \\\\.    /    |☥.     /    ||.\n//      \\\\.____/  ||.       |    \\\\.__/     ||.____/     ||.______/\n// ꃃꆂ꒓ꁒꍟ\n\n\n// 卵卵卵卵卵卵卵卵卵卵\ncontract CrudeBorneEggs is ERC721, Ownable {\n    using Strings for uint256;\n    string public PROVENANCE;\n    bool provenanceSet;\n\n    uint256 public treeFiddy;\n    uint256 public allOfDem;\n    uint256 public onlyDisMuch; // ‱‱‱‱‱‱‱‱‱‱\n    uint256 private disMuchForOwnur;\n\n    bool public paused;\n\n    enum MintStatus {\n        CrudeBirth,\n        CrudeBorne,\n        NoMore4U // ∏ø móår\n    }\n\n    MintStatus public mintStatus = MintStatus.CrudeBirth;\n\n    mapping(address => uint256) public totalMintsPerAddress;\n    mapping(address => uint256) public totalGiftsPerAddress;\n\n    mapping(address => uint256) private paymentInfo;\n    uint256 totalReceived = 0;\n    mapping(address => uint256) amountsWithdrawn;\n\n    modifier onlyPayee() {\n        _isPayee();\n        _;\n    }\n    function _isPayee() internal view virtual {\n        require(paymentInfo[msg.sender] > 0, \"not a royalty payee\");\n    }\n\n    ENSResolver fancyFrenFinder;\n\n    string collectionDescription = \"CrudeBorne Eggs are the beginning of the CrudeBorne saga.\";\n    string collecImg = \"\";\n    string externalLink = \"https://crudeborne.wtf\";\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _maxPossibleSupply,\n        uint256 _mintPrice,\n        uint256 _maxAllowedMints,\n        uint256 _maxOwnerAllowedMints,\n        address[] memory _payees,\n        uint128[] memory _basisPoints\n    ) ERC721(_name, _symbol, _maxAllowedMints, _maxOwnerAllowedMints) {\n        allOfDem = _maxPossibleSupply;\n        treeFiddy = _mintPrice;\n        onlyDisMuch = _maxAllowedMints;\n        disMuchForOwnur = _maxOwnerAllowedMints;\n\n        for (uint256 i = 0; i < _payees.length; i++) {\n            paymentInfo[_payees[i]] = _basisPoints[i];\n        }\n\n        // ✼✼✼✼✼✼✼✼✼✼\n        fancyFrenFinder = new ENSResolver();\n        // ✺✺✺✺✺✺✺✺✺✺\n    }\n\n    function _ENSResolverAddress() public view returns (address) {\n        return address(fancyFrenFinder);\n    }\n\n    function flipPaused() external onlyOwner {\n        paused = !paused;\n    }\n\n    function preMint(address _to) public onlyOwner {\n        require(mintStatus == MintStatus.CrudeBirth, \"s\");\n        require(totalSupply() + disMuchForOwnur*10 <= allOfDem, \"m\");\n        // Wę fêėł łîkē ït\n        for (uint i = 0; i < 10; i++) {\n            _safeMint(true, address(0), _to, disMuchForOwnur);\n        }\n    }\n\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        require(!provenanceSet);\n        PROVENANCE = provenanceHash;\n        provenanceSet = true;\n    }\n\n    function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }\n\n    function setPreRevealURI(string memory preRevealURI) public onlyOwner {\n        _setPreRevealURI(preRevealURI);\n    }\n\n    function changeMintStatus(MintStatus _status) external onlyOwner {\n        require(_status != MintStatus.CrudeBirth);\n        mintStatus = _status;\n    }\n\n    function min(uint256 x, uint256 y) public pure returns(uint256) {\n        if (x < y) {\n            return x;\n        }\n        return y;\n    }\n\n    function calculateMintCost(uint amount, address minter) public view returns(uint256) {\n        uint256 toReturn = treeFiddy * amount;\n        if (balanceOf(minter) == 0) {\n            toReturn -= min(2, amount)*treeFiddy;\n        }\n        else if (balanceOf(minter) == 1) {\n            toReturn -= min(1, amount)*treeFiddy;\n        }\n        return toReturn;\n    }\n\n    // 𝕰𝕲𝕲𝖅𝖅𝖅\n    function getDemEggz(uint amount) public payable {\n        require(mintStatus == MintStatus.CrudeBorne && !paused, \"s\");\n        require(totalSupply() + amount <= allOfDem, \"m\");\n        require(totalMintsPerAddress[msg.sender] + amount <= onlyDisMuch, \"l\");\n\n        uint256 requirePrice = calculateMintCost(amount, msg.sender);\n\n        require(requirePrice <= msg.value, \"rp\");\n\n        totalReceived += msg.value;\n\n        totalMintsPerAddress[msg.sender] = totalMintsPerAddress[msg.sender] + amount;\n        _safeMint(false, address(0), msg.sender, amount);\n\n        if (totalSupply() == allOfDem) {\n            mintStatus = MintStatus.NoMore4U;\n        }\n    }\n\n    function gibEggz2Fren(uint amount, address to) public payable {\n        _gibCrude2Fren(amount, to);\n    }\n\n    function gibEggz2FancyFren(uint amount, string memory ensAddr) public payable {\n        address to = fancyFrenFinder.resolve(ensAddr);\n        _gibCrude2Fren(amount, to);\n    }\n\n    function calculateGiftMintCost(\n        uint amount,\n        address giver\n    ) public view returns(uint256) {\n        uint256 toReturn = treeFiddy * amount;\n        if (totalGiftsPerAddress[giver] == 0) {\n            toReturn -= min(1, amount)*treeFiddy;\n        }\n        return toReturn;\n    }\n\n    function _gibCrude2Fren(uint amount, address to) internal {\n        require(mintStatus == MintStatus.CrudeBorne && !paused, \"s\");\n        require(totalSupply() + amount <= allOfDem, \"m\");\n        require(totalMintsPerAddress[to] + amount <= onlyDisMuch, \"l\");\n        require(to != msg.sender, \"ns\");\n\n        uint256 requirePrice = calculateGiftMintCost(amount, msg.sender);\n\n        require(requirePrice <= msg.value, \"rp\");\n\n        totalReceived += msg.value;\n\n        totalMintsPerAddress[to] = totalMintsPerAddress[to] + amount;\n        totalGiftsPerAddress[msg.sender] = totalGiftsPerAddress[msg.sender] + amount;\n        _safeMint(false, msg.sender, to, amount);\n\n        if (totalSupply() == allOfDem) {\n            mintStatus = MintStatus.NoMore4U;\n        }\n    }\n\n    // ρ(௶Ø†ξ) ∺ 爪(ϒ६∑ナ)/∰(￥Ꭿ₸ໂ) //\n\n    function setCollectionDescription(string memory _collectionDescription) public onlyOwner {\n        collectionDescription = _collectionDescription;\n    }\n\n    function setCollecImg(string memory _collecImg) public onlyOwner {\n        collecImg = _collecImg;\n    }\n\n    function setExternalLink(string memory _externalLink) public onlyOwner {\n        externalLink = _externalLink;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(\n            abi.encodePacked(\n                \"data:application/json;utf8,{\\\"name\\\":\\\"CrudeBorne: Eggs\\\",\",\n                \"\\\"description\\\":\\\"\", collectionDescription, \"\\\",\",\n                \"\\\"image\\\":\\\"\", collecImg, \"\\\",\",\n                \"\\\"external_link\\\":\\\"\", externalLink, \"\\\",\",\n                \"\\\"seller_fee_basis_points\\\":500,\\\"fee_recipient\\\":\\\"\",\n                uint256(uint160(address(this))).toHexString(), \"\\\"}\"\n            )\n        );\n    }\n\n    // 🝧.🜖.Ω //\n\n    receive() external payable {\n        totalReceived += msg.value;\n    }\n\n    function withdraw() public onlyPayee {\n        uint256 totalForPayee = (totalReceived/10000)*paymentInfo[msg.sender];\n        uint256 toWithdraw = totalForPayee - amountsWithdrawn[msg.sender];\n        amountsWithdrawn[msg.sender] = totalForPayee;\n        (bool success, ) = payable(msg.sender).call{value: toWithdraw}(\"\");\n        require(success, \"Payment failed!\");\n    }\n\n    // 01001110 01100101 01110110 01100101 01110010 00100000 01100111 01101111\n    // 01101110 01101110 01100001 00100000 01100111 01101001 01110110 01100101\n    // 00100000 01111001 01101111 01110101 00100000 01110101 01110000 00001101\n    // 00001010 01001110 01100101 01110110 01100101 01110010 00100000 01100111\n    // 01101111 01101110 01101110 01100001 00100000 01101100 01100101 01110100\n    // 00100000 01111001 01101111 01110101 00100000 01100100 01101111 01110111\n    // 01101110 00001101 00001010 01001110 01100101 01110110 01100101 01110010\n    // 00100000 01100111 01101111 01101110 01101110 01100001 00100000 01110010\n    // 01110101 01101110 00100000 01100001 01110010 01101111 01110101 01101110\n    // 01100100 00100000 01100001 01101110 01100100 00100000 01100100 01100101\n    // 01110011 01100101 01110010 01110100 00100000 01111001 01101111 01110101\n    // 00001101 00001010 01001110 01100101 01110110 01100101 01110010 00100000\n    // 01100111 01101111 01101110 01101110 01100001 00100000 01101101 01100001\n    // 01101011 01100101 00100000 01111001 01101111 01110101 00100000 01100011\n    // 01110010 01111001 00001101 00001010 01001110 01100101 01110110 01100101\n    // 01110010 00100000 01100111 01101111 01101110 01101110 01100001 00100000\n    // 01110011 01100001 01111001 00100000 01100111 01101111 01101111 01100100\n    // 01100010 01111001 01100101 00001101 00001010 01001110 01100101 01110110\n    // 01100101 01110010 00100000 01100111 01101111 01101110 01101110 01100001\n    // 00100000 01110100 01100101 01101100 01101100 00100000 01100001 00100000\n    // 01101100 01101001 01100101 00100000 01100001 01101110 01100100 00100000\n    // 01101000 01110101 01110010 01110100 00100000 01111001 01101111 01110101\n\n    function withdrawTokens(address tokenAddress) external onlyOwner() {\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n\n    //    ////\\\\     //||\\\\     //\\|\\\\      ///||\\\n    //    /`O-O'     ` @ @\\     //o o//       a a\n    //    ]          >          ) | (        _)\n    //    -          -          -           ~\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
15     },
16     "contracts/ERC721.sol": {
17       "content": "// SPDX-License-Identifier: Unlicense\n// Creator: U dont need 2 know dat u farkers\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\n *\n * Does not support burning tokens to address(0).\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using Address for address;\n    using Strings for uint256;\n\n    struct TokenOwnership {\n        address addr;\n        uint64 startTimestamp;\n    }\n\n    struct AddressData {\n        uint128 balance;\n        uint128 numberMinted;\n    }\n\n    uint256 private currentIndex = 0;\n\n    uint256 internal immutable maxBatchSize;\n    uint256 internal immutable maxOwnerBatchSize;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Base URI\n    string private _baseURI;\n    string private _preRevealURI;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) private _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n//    // Mapping from tokens to burn status\n//    mapping(uint256 )\n    address public immutable burnAddress = 0x000000000000000000000000000000000000dEaD;\n    uint256 private numTokensBurned;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev\n     * `maxBatchSize` refers to how much a minter can mint at a time.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 maxBatchSize_,\n        uint256 maxOwnerBatchSize_\n    ) {\n        require(maxBatchSize_ > 0, \"b\");\n        _name = name_;\n        _symbol = symbol_;\n        maxBatchSize = maxBatchSize_;\n        maxOwnerBatchSize = maxOwnerBatchSize_;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return (currentIndex - numTokensBurned);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        require(index < totalSupply(), \"g\");\n        require(ownerOf(index) != burnAddress, \"b\");\n        return index;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        require(index < balanceOf(owner), \"b\");\n        uint256 numMintedSoFar = totalSupply();\n        uint256 tokenIdsIdx = 0;\n        address currOwnershipAddr = address(0);\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\n            TokenOwnership memory ownership = _ownerships[i];\n            if (ownership.addr != address(0)) {\n                currOwnershipAddr = ownership.addr;\n            }\n            if (currOwnershipAddr == owner) {\n                if (tokenIdsIdx == index) {\n                    return i;\n                }\n                tokenIdsIdx++;\n            }\n        }\n        revert(\"u\");\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n        interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        interfaceId == type(IERC721Enumerable).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"0\");\n        return uint256(_addressData[owner].balance);\n    }\n\n//    function numberMinted(address owner) external view returns (uint256) {\n//        require(owner != address(0), \"0\");\n//        return uint256(_addressData[owner].numberMinted);\n//    }\n\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        require(tokenId < currentIndex, \"t\");\n\n        uint256 lowestTokenToCheck;\n//        if (tokenId >= maxBatchSize) {\n//            lowestTokenToCheck = tokenId - maxBatchSize + 1;\n//        }\n        if (tokenId >= maxOwnerBatchSize) {\n            lowestTokenToCheck = tokenId - maxOwnerBatchSize + 1;\n        }\n\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\n            TokenOwnership memory ownership = _ownerships[curr];\n            if (ownership.addr != address(0)) {\n                return ownership;\n            }\n        }\n\n        revert(\"o\");\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"z\");\n\n//        return bytes(_baseURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenId.toString())) : _preRevealURI;\n\n        require(_exists(tokenId), \"z\");\n\n//        if (revealed) {\n//            return bytes(_baseURI).length > 0 ? string(abi.encodePacked(_baseURI, \"/\", tokenId.toString(), \".json\")) : \"\";\n//        }\n//        else {\n//            return _baseURI;\n//        }\n        if (bytes(_baseURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, \"/\", tokenId.toString(), \".json\"));\n        }\n        else {\n            return _preRevealURI;\n        }\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    function preRevealURI() public view virtual returns (string memory) {\n        return _preRevealURI;\n    }\n\n    function _setPreRevealURI(string memory preRevealURI_) internal virtual {\n        _preRevealURI = preRevealURI_;\n    }\n\n\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"o\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"a\"\n        );\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"a\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public override {\n        require(operator != _msgSender(), \"a\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public override {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"z\"\n        );\n    }\n\n    function burnToken(uint256 tokenId) public {\n        _transfer(ownerOf(tokenId), burnAddress, tokenId);\n        numTokensBurned++;\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return (tokenId < currentIndex && ownerOf(tokenId) != burnAddress);\n    }\n\n//    function _safeMint(address to, uint256 quantity) internal {\n//        _safeMint(to, quantity, \"\");\n//    }\n    function _safeMint(bool isPreMint, address from, address to, uint256 quantity) internal {\n        _safeMint(isPreMint, from, to, quantity, \"\");\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` cannot be larger than the max batch size.\n     *\n     * Emits a {Transfer} event.\n     */\n//    function _safeMint(\n//        address to,\n//        uint256 quantity,\n//        bytes memory _data\n//    ) internal {\n//        uint256 startTokenId = currentIndex;\n//        require(to != address(0), \"0\");\n//        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n//        require(!_exists(startTokenId), \"a\");\n//        require(quantity <= maxBatchSize, \"m\");\n//\n//        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n//\n//        AddressData memory addressData = _addressData[to];\n//        _addressData[to] = AddressData(\n//            addressData.balance + uint128(quantity),\n//            addressData.numberMinted + uint128(quantity)\n//        );\n//        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n//\n//        uint256 updatedIndex = startTokenId;\n//\n//        for (uint256 i = 0; i < quantity; i++) {\n//            emit Transfer(address(0), to, updatedIndex);\n//            require(\n//                _checkOnERC721Received(address(0), to, updatedIndex, _data),\n//                \"z\"\n//            );\n//            updatedIndex++;\n//        }\n//\n//        currentIndex = updatedIndex;\n//        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n//    }\n    function _safeMint(\n        bool isPreMint,\n        address from,\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        uint256 startTokenId = currentIndex;\n        require(to != address(0), \"0\");\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n        require(!_exists(startTokenId), \"a\");\n        if (isPreMint) {\n            require(quantity <= maxOwnerBatchSize, \"m\");\n        }\n        else {\n            require(quantity <= maxBatchSize, \"m\");\n        }\n\n        if (from != address(0)) {\n            _beforeTokenTransfers(address(0), from, startTokenId, quantity);\n        }\n        if (from != to) {\n            _beforeTokenTransfers(from, to, startTokenId, quantity);\n        }\n\n        AddressData memory addressData = _addressData[to];\n        _addressData[to] = AddressData(\n            addressData.balance + uint128(quantity),\n            addressData.numberMinted + uint128(quantity)\n        );\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n        uint256 updatedIndex = startTokenId;\n\n        for (uint256 i = 0; i < quantity; i++) {\n            if (from != address(0)) {\n                emit Transfer(address(0), from, updatedIndex);\n            }\n            if (from != to) {\n                emit Transfer(from, to, updatedIndex);\n            }\n            require(\n                _checkOnERC721Received(address(0), from, updatedIndex, _data) && _checkOnERC721Received(from, to, updatedIndex, _data),\n                \"z\"\n            );\n            updatedIndex++;\n        }\n\n        currentIndex = updatedIndex;\n        if (from != address(0)) {\n            _afterTokenTransfers(address(0), from, startTokenId, quantity);\n        }\n        if (from != to) {\n            _afterTokenTransfers(from, to, startTokenId, quantity);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n        getApproved(tokenId) == _msgSender() ||\n        isApprovedForAll(prevOwnership.addr, _msgSender()));\n\n        require(isApprovedOrOwner, \"a\");\n\n        require(prevOwnership.addr == from, \"o\");\n        require(to != address(0), \"0\");\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership.addr);\n\n        _addressData[from].balance -= 1;\n        _addressData[to].balance += 1;\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n        uint256 nextTokenId = tokenId + 1;\n        if (_ownerships[nextTokenId].addr == address(0)) {\n            if (_exists(nextTokenId)) {\n                _ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n//    uint256 public nextOwnerToExplicitlySet = 0;\n//\n//    /**\n//     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\n//     */\n//    function _setOwnersExplicit(uint256 quantity) internal {\n//        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\n//        require(quantity > 0, \"q\");\n//        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\n//        if (endIndex > currentIndex - 1) {\n//            endIndex = currentIndex - 1;\n//        }\n//        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\n//        require(_exists(endIndex), \"n\");\n//        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\n//            if (_ownerships[i].addr == address(0)) {\n//                TokenOwnership memory ownership = ownershipOf(i);\n//                _ownerships[i] = TokenOwnership(ownership.addr, ownership.startTimestamp);\n//            }\n//        }\n//        nextOwnerToExplicitlySet = endIndex + 1;\n//    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"z\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
18     },
19     "contracts/ENSResolver.sol": {
20       "content": "// SPDX-License-Identifier: Unlicense\n// Creator: U dont need 2 know dat u farkers\npragma solidity ^0.8.9;\n\ncontract ENSResolver {\n    // Same address for Mainnet, Ropsten, Rinkerby, Gorli and other networks;\n    ENS ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\n\n    function computeNameHash(bytes memory _name) private pure returns (bytes32 nameHash) {\n        nameHash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n        nameHash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(nameHash, keccak256(abi.encodePacked(\"eth\")))),keccak256(abi.encodePacked(_name))));\n    }\n\n    function resolve(string memory _name) public virtual view returns (address) {\n        bytes memory name = abi.encodePacked(_name);\n        uint nameLength = name.length;\n        require(nameLength > 7, \"impossible ENS address\");\n        require(\n            name[nameLength-4] == 0x2E &&\n            name[nameLength-3] == 0x65 &&\n            name[nameLength-2] == 0x74 &&\n            name[nameLength-1] == 0x68,\n            \"ENS name must end with \\\".eth\\\"\"\n        );\n\n        bytes memory strippedName = new bytes(nameLength-4);\n        for (uint i = 0; i < nameLength-4; i++) {\n            strippedName[i] = name[i];\n        }\n\n        Resolver resolver = ens.resolver(computeNameHash(strippedName));\n        return resolver.addr(computeNameHash(strippedName));\n    }\n}\n\nabstract contract ENS {\n    function resolver(bytes32 node) public virtual view returns (Resolver);\n}\n\nabstract contract Resolver {\n    function addr(bytes32 node) public virtual view returns (address);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Strings.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
36     },
37     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
39     },
40     "@openzeppelin/contracts/utils/Address.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
48     }
49   },
50   "settings": {
51     "optimizer": {
52       "enabled": false,
53       "runs": 200
54     },
55     "outputSelection": {
56       "*": {
57         "*": [
58           "evm.bytecode",
59           "evm.deployedBytecode",
60           "devdoc",
61           "userdoc",
62           "metadata",
63           "abi"
64         ]
65       }
66     },
67     "libraries": {}
68   }
69 }}