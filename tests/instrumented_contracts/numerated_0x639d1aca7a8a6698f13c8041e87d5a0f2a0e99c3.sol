1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/WgmisPhase2.sol": {
5       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ninterface IWgmisMerkleTreeWhitelist {\n    function isValidMerkleProof(bytes32[] calldata _merkleProof, address _minter, uint96 _amount) external view returns (bool);\n}\n\ninterface IWgmis {\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\n}\n\ncontract WgmisPhase2 is Ownable {\n    using Strings for uint256;\n\n    // Controlled variables\n    uint16 public prevTokenId;\n    uint256 public price;\n    bool public isRandomnessRequested;\n    bytes32 public randomNumberRequestId;\n    uint256 public vrfResult;\n    uint256 public foundationMinted = 0;\n    uint256 public merkleWhitelistVersion = 0;\n    mapping(address => mapping(uint256 => bool)) public merkleWhitelistToWhitelistVersionToClaimed;\n    mapping(address => uint256) public merkleWhitelistEarlyAccessMintCount;\n\n    // Config variables\n    uint256 public supplyLimit;\n    uint256 public mintingStartTimeUnix;\n    uint256 public singleOrderLimit;\n    address[] public payoutAddresses;\n    uint16[] public payoutAddressBasisPoints;\n    address public tokenPoolHolder;\n    IWgmis public wgmis;\n    uint16 public earlyAccessAllowance;\n    // A merkle-proof-based whitelist for initial batch of whitelisted addresses\n    // All whitelisted addresses must be defined at time of WgmisMerkleTreeWhitelist deployment\n    IWgmisMerkleTreeWhitelist merkleProofWhitelist;\n\n    constructor(\n        uint256 _supplyLimit,\n        uint256 _mintingStartTimeUnix,\n        uint256 _singleOrderLimit,\n        address[] memory _payoutAddresses,\n        uint16[] memory _payoutAddressBasisPoints,\n        address _merkleProofWhitelist,\n        address _tokenPoolHolder,\n        uint16 _startTokenId,\n        address _wgmis\n    ) {\n        supplyLimit = _supplyLimit;\n        mintingStartTimeUnix = _mintingStartTimeUnix;\n        singleOrderLimit = _singleOrderLimit;\n        uint256 totalBasisPoints;\n        for(uint256 i = 0; i < _payoutAddresses.length; i++) {\n            require((_payoutAddressBasisPoints[i] > 0) && (_payoutAddressBasisPoints[i] <= 10000)); // \"BP_NOT_BETWEEN_0_AND_10000\"\n            totalBasisPoints += _payoutAddressBasisPoints[i];\n        }\n        require(totalBasisPoints == 10000); // \"BP_MUST_ADD_TO_10000\"\n        payoutAddresses = _payoutAddresses;\n        payoutAddressBasisPoints = _payoutAddressBasisPoints;\n        merkleProofWhitelist = IWgmisMerkleTreeWhitelist(_merkleProofWhitelist);\n        foundationMinted = 0;\n        price = 0.01 ether;\n        merkleWhitelistVersion = 0;\n        tokenPoolHolder = _tokenPoolHolder;\n        prevTokenId = _startTokenId;\n        wgmis = IWgmis(_wgmis);\n        earlyAccessAllowance = 10;\n    }\n\n    function mint(address _recipient, uint16 _quantity) external payable {\n        require(isRandomnessRequested == false, \"MINTING_OVER\");\n        require(_quantity > 0, \"NO_ZERO_QUANTITY\");\n        require(block.timestamp >= mintingStartTimeUnix, \"MINTING_PERIOD_NOT_STARTED\");\n        require(_quantity <= singleOrderLimit, \"EXCEEDS_SINGLE_ORDER_LIMIT\");\n        require((prevTokenId + _quantity) <= supplyLimit, \"EXCEEDS_MAX_SUPPLY\");\n        require((msg.value) == (price * _quantity), \"INCORRECT_ETH_VALUE\");\n\n        handleSale(_recipient, _quantity);\n    }\n\n    function mintMerkleWhitelist(bytes32[] calldata _merkleProof, uint16 _quantity) external {\n        require(isRandomnessRequested == false, \"MINTING_OVER\");\n        require(block.timestamp >= (mintingStartTimeUnix - 1 hours), \"EARLY_ACCESS_NOT_STARTED\");\n        require((prevTokenId + _quantity) <= supplyLimit, \"EXCEEDS_MAX_SUPPLY\");\n        require(!merkleWhitelistToWhitelistVersionToClaimed[msg.sender][merkleWhitelistVersion], 'MERKLE_CLAIM_ALREADY_MADE');\n        require(merkleProofWhitelist.isValidMerkleProof(_merkleProof, msg.sender, _quantity), 'INVALID_MERKLE_PROOF');\n\n        merkleWhitelistToWhitelistVersionToClaimed[msg.sender][merkleWhitelistVersion] = true;\n\n        handleSale(msg.sender, _quantity);\n    }\n\n    function mintMerkleWhitelistEarlyAccess(bytes32[] calldata _merkleProof, uint96 _merkleProofAmount, uint16 _mintAmount) external payable {\n        require(merkleProofWhitelist.isValidMerkleProof(_merkleProof, msg.sender, _merkleProofAmount), 'INVALID_MERKLE_PROOF');\n        require(isRandomnessRequested == false, \"MINTING_OVER\");\n        require(block.timestamp >= (mintingStartTimeUnix - 1 hours), \"EARLY_ACCESS_NOT_STARTED\");\n        require((prevTokenId + _mintAmount) <= supplyLimit, \"EXCEEDS_MAX_SUPPLY\");\n        require((msg.value) == (price * _mintAmount), \"INCORRECT_ETH_VALUE\");\n\n        merkleWhitelistEarlyAccessMintCount[msg.sender] += _mintAmount;\n\n        require(merkleWhitelistEarlyAccessMintCount[msg.sender] <= earlyAccessAllowance, \"EXCEEDS_EARLY_ACCESS_ALLOWANCE\");\n\n        handleSale(msg.sender, _mintAmount);\n    }\n\n    function handleSale(address _recipient, uint16 _quantity) internal {\n      for(uint16 i = 1; i <= _quantity; i++) {\n        wgmis.transferFrom(tokenPoolHolder, _recipient, prevTokenId + i);\n      }\n      prevTokenId += _quantity;\n    }\n\n    function totalSupply() public view returns(uint256) {\n        return prevTokenId;\n    }\n\n    // Fee distribution logic below\n\n    modifier onlyFeeRecipientOrOwner() {\n        bool isFeeRecipient = false;\n        for(uint256 i = 0; i < payoutAddresses.length; i++) {\n            if(payoutAddresses[i] == msg.sender) {\n                isFeeRecipient = true;\n            }\n        }\n        require((isFeeRecipient == true) || (owner() == _msgSender()));\n        _;\n    }\n\n    function getPercentageOf(\n        uint256 _amount,\n        uint16 _basisPoints\n    ) internal pure returns (uint256 value) {\n        value = (_amount * _basisPoints) / 10000;\n    }\n\n    function distributeFees() public onlyFeeRecipientOrOwner {\n        uint256 feeCutsTotal;\n        uint256 balance = address(this).balance;\n        for(uint256 i = 0; i < payoutAddresses.length; i++) {\n            uint256 feeCut;\n            if(i < (payoutAddresses.length - 1)) {\n                feeCut = getPercentageOf(balance, payoutAddressBasisPoints[i]);\n            } else {\n                feeCut = (balance - feeCutsTotal);\n            }\n            feeCutsTotal += feeCut;\n            (bool feeCutDeliverySuccess, ) = payoutAddresses[i].call{value: feeCut}(\"\");\n            require(feeCutDeliverySuccess, \"FEE_CUT_NO_DELIVERY\");\n        }\n    }\n    \n    function updateFeePayoutScheme(\n      address[] memory _payoutAddresses,\n      uint16[] memory _payoutAddressBasisPoints\n    ) public onlyOwner {\n      payoutAddresses = _payoutAddresses;\n      payoutAddressBasisPoints = _payoutAddressBasisPoints;\n    }\n\n    function setPrice(\n      uint256 _price\n    ) public onlyOwner {\n      price = _price;\n    }\n\n    function setPrevTokenId(\n      uint16 _prevTokenId\n    ) public onlyOwner {\n      prevTokenId = _prevTokenId;\n    }\n\n    function setStartTime(\n      uint256 _mintingStartTimeUnix\n    ) public onlyOwner {\n      mintingStartTimeUnix = _mintingStartTimeUnix;\n    }\n\n    function setSingleOrderLimit(\n      uint256 _singleOrderLimit\n    ) public onlyOwner {\n      singleOrderLimit = _singleOrderLimit;\n    }\n\n    function updateMerkleProofWhitelist(address _merkleProofWhitelist) external onlyOwner {\n        require(isRandomnessRequested == false);\n        merkleProofWhitelist = IWgmisMerkleTreeWhitelist(_merkleProofWhitelist);\n        merkleWhitelistVersion++;\n    }\n\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Counters.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Strings.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": false,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     },
37     "libraries": {}
38   }
39 }}