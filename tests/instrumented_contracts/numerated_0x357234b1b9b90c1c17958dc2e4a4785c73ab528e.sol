1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/LPStaking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LPStaking {\n    IERC20 public landToken;\n    IERC20 public stakingToken;\n\n    uint public constant rewardRate = 70e18;\n    uint public immutable startBlock;\n    uint public immutable endBlock;\n    uint public lastUpdateBlock;\n    uint public rewardPerTokenStored;\n\n    mapping(address => uint) public userRewardPerTokenPaid;\n    mapping(address => uint) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    constructor(address _landToken, address _stakingToken)\n    {\n        stakingToken = IERC20(_stakingToken);\n        landToken = IERC20(_landToken);\n        startBlock = block.number;\n        endBlock = block.number + 1e6;\n    }\n\n    function lastBlock() public view returns (uint256) {\n        return block.number < endBlock ? block.number : endBlock;\n    }\n\n    function rewardPerToken() public view returns (uint) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n        rewardPerTokenStored +\n        (((lastBlock() - lastUpdateBlock) * rewardRate * 1e18) / _totalSupply);\n    }\n\n    function earned(address account) public view returns (uint) {\n        return\n        ((_balances[account] *\n        (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n        rewards[account];\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateBlock = lastBlock();\n        rewards[account] = earned(account);\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        _;\n    }\n\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    function stake(uint _amount) external updateReward(msg.sender) {\n        require(_amount > 0, \"Cannot stake 0\");\n        _totalSupply += _amount;\n        _balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdrawAndGetReward(uint _amount) external {\n        withdraw(_amount);\n        getReward();\n    }\n\n    function withdraw(uint256 _amount) public updateReward(msg.sender) {\n        require(_amount > 0, \"Cannot withdraw 0\");\n        _totalSupply -= _amount;\n        _balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n    }\n\n    function getReward() public updateReward(msg.sender) {\n        uint reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        landToken.transfer(msg.sender, reward);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
9     }
10   },
11   "settings": {
12     "optimizer": {
13       "enabled": false,
14       "runs": 200
15     },
16     "outputSelection": {
17       "*": {
18         "*": [
19           "evm.bytecode",
20           "evm.deployedBytecode",
21           "devdoc",
22           "userdoc",
23           "metadata",
24           "abi"
25         ]
26       }
27     },
28     "libraries": {}
29   }
30 }}