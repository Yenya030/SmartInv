1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/lina_swap/sls_token.sol": {
5       "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./ownership/Ownable.sol\";\nimport \"./utils/SafeMath.sol\";\n\ncontract SLSToken is IERC20, Ownable {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor () {\n        symbol = 'SLS';\n        name = 'SLS Connect Token';\n        decimals = 18;\n        totalSupply = 900 * 10**6 * 10**18;\n        _balances[msg.sender] = totalSupply;\n    }\n\n    function transfer(\n        address _to, \n        uint256 _value\n    ) external override returns (bool) {\n        require(_to != address(0), 'SLSToken: to address is not valid');\n        require(_value <= _balances[msg.sender], 'SLSToken: insufficient balance');\n\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n        _balances[_to] =  _balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n\n   function balanceOf(\n       address _owner\n    ) external override view returns (uint256 balance) {\n        return _balances[_owner];\n    }\n\n    function approve(\n       address _spender, \n       uint256 _value\n    ) external override returns (bool) {\n        _allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n   }\n\n   function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value\n    ) external override returns (bool) {\n        require(_from != address(0), 'SLSToken: from address is not valid');\n        require(_to != address(0), 'SLSToken: to address is not valid');\n        require(_value <= _balances[_from], 'SLSToken: insufficient balance');\n        require(_value <= _allowed[_from][msg.sender], 'SLSToken: transfer from value not allowed');\n\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        \n        emit Transfer(_from, _to, _value);\n        \n        return true;\n   }\n\n    function allowance(\n        address _owner, \n        address _spender\n    ) external override view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n\n    function increaseApproval(\n        address _spender, \n        uint256 _addedValue\n    ) external returns (bool) {\n        _allowed[msg.sender][_spender] = _allowed[msg.sender][_spender].add(_addedValue);\n\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n\n    function decreaseApproval(\n        address _spender, \n        uint256 _subtractedValue\n    ) external returns (bool) {\n        uint256 oldValue = _allowed[msg.sender][_spender];\n        \n        if (_subtractedValue > oldValue) {\n            _allowed[msg.sender][_spender] = 0;\n        } else {\n            _allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        \n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\n        \n        return true;\n   }\n\n    function burn(\n        uint256 _amount\n    ) external returns (bool) {\n        require(_balances[msg.sender] >= _amount, 'SLSToken: insufficient balance');\n\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n        totalSupply = totalSupply.sub(_amount);\n\n        emit Transfer(msg.sender, address(0), _amount);\n\n        return true;\n    }\n\n    function burnFrom(\n        address _from,\n        uint256 _amount\n    ) external returns (bool) {\n        require(_from != address(0), 'SLSToken: from address is not valid');\n        require(_balances[_from] >= _amount, 'SLSToken: insufficient balance');\n        require(_amount <= _allowed[_from][msg.sender], 'SLSToken: burn from value not allowed');\n        \n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_amount);\n        _balances[_from] = _balances[_from].sub(_amount);\n        totalSupply = totalSupply.sub(_amount);\n\n        emit Transfer(_from, address(0), _amount);\n\n        return true;\n    }\n\n}"
6     },
7     "contracts/lina_swap/interfaces/IERC20.sol": {
8       "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n}"
9     },
10     "contracts/lina_swap/ownership/Ownable.sol": {
11       "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ncontract Ownable {\n\n  address private owner;\n\n  event NewOwner(address oldOwner, address newOwner);\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function contractOwner() external view returns (address) {\n    return owner;\n  }\n\n  function isOwner() public view returns (bool) {\n    return msg.sender == owner;\n  }\n\n  function transferOwnership(address _newOwner) external onlyOwner {\n    require(_newOwner != address(0), 'Ownable: address is not valid');\n    owner = _newOwner;\n    emit NewOwner(msg.sender, _newOwner);\n  } \n}"
12     },
13     "contracts/lina_swap/utils/SafeMath.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": true,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}