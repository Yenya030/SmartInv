1 {{
2   "language": "Solidity",
3   "sources": {
4     "GenArt721Minter_PBAB_Burner.sol": {
5       "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n// Created By: Art Blocks Inc. with ERC721 burn stuff by Anthonye.eth\r\n\r\nimport \"./IGenArt721CoreV2_PBAB.sol\";\r\nimport \"./IBonusContract.sol\";\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title Powered by Art Blocks minter contract that allows tokens to be\r\n * minted by burning any ERC-721 token.\r\n * @author Art Blocks Inc. Burn changes by Anthonye.eth\r\n */\r\ncontract GenArt721Minter_PBAB_Burner is ReentrancyGuard {\r\n    /// PBAB core contract this minter may interact with.\r\n    IGenArt721CoreV2_PBAB public genArtCoreContract;\r\n    /// Contract that this minter will burn from.\r\n    IERC721 public burnTokenContract;\r\n    \r\n    event BurnRedeem(uint256 burnedTokenTotal);\r\n\r\n    uint256 constant ONE_MILLION = 1_000_000;\r\n\r\n    address payable public ownerAddress;\r\n    uint256 public ownerPercentage;\r\n\r\n    mapping(uint256 => bool) public projectIdToBonus;\r\n    mapping(uint256 => address) public projectIdToBonusContractAddress;\r\n    mapping(uint256 => bool) public contractFilterProject;\r\n    mapping(address => mapping(uint256 => uint256)) public projectMintCounter;\r\n    mapping(uint256 => uint256) public projectMintLimit;\r\n    mapping(uint256 => bool) public projectMaxHasBeenInvoked;\r\n    mapping(uint256 => uint256) public projectMaxInvocations;\r\n    mapping(uint256 => bool)public BurnedTokens;\r\n    /**\r\n     * @notice Initializes contract to be a Minter for PBAB core contract at\r\n     * address `_genArt721Address`.\r\n     */\r\n    constructor(address _genArt721Address, address _burnTokenAddress) ReentrancyGuard() {\r\n        genArtCoreContract = IGenArt721CoreV2_PBAB(_genArt721Address);\r\n        burnTokenContract = IERC721(_burnTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets your balance of the ERC-20 token currently set\r\n     * as the payment currency for project `_projectId`.\r\n     * @param _projectId Project ID to be queried.\r\n     * @return balance Balance of ERC-20\r\n     */\r\n    function getYourBalanceOfProjectERC20(\r\n        uint256 _projectId\r\n    ) public view returns (uint256) {\r\n        uint256 balance = IERC20(\r\n            genArtCoreContract.projectIdToCurrencyAddress(_projectId)\r\n        ).balanceOf(msg.sender);\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets your allowance for this minter of the ERC-20\r\n     * token currently set as the payment currency for project\r\n     * `_projectId`.\r\n     * @param _projectId Project ID to be queried.\r\n     * @return remaining Remaining allowance of ERC-20\r\n     */\r\n    function checkYourAllowanceOfProjectERC20(\r\n        uint256 _projectId\r\n    ) public view returns (uint256) {\r\n        uint256 remaining = IERC20(\r\n            genArtCoreContract.projectIdToCurrencyAddress(_projectId)\r\n        ).allowance(msg.sender, address(this));\r\n        return remaining;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the mint limit of a single purchaser for project\r\n     * `_projectId` to `_limit`.\r\n     * @param _projectId Project ID to set the mint limit for.\r\n     * @param _limit Number of times a given address may mint the project's\r\n     * tokens.\r\n     */\r\n    function setProjectMintLimit(uint256 _projectId, uint8 _limit) public {\r\n        require(\r\n            genArtCoreContract.isWhitelisted(msg.sender),\r\n            \"can only be set by admin\"\r\n        );\r\n        projectMintLimit[_projectId] = _limit;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the maximum invocations of project `_projectId` based\r\n     * on the value currently defined in the core contract.\r\n     * @param _projectId Project ID to set the maximum invocations for.\r\n     * @dev also checks and may refresh projectMaxHasBeenInvoked for project\r\n     */\r\n    function setProjectMaxInvocations(uint256 _projectId) public {\r\n        require(\r\n            genArtCoreContract.isWhitelisted(msg.sender),\r\n            \"can only be set by admin\"\r\n        );\r\n        uint256 maxInvocations;\r\n        uint256 invocations;\r\n        (, , invocations, maxInvocations, , , , , ) = genArtCoreContract\r\n            .projectTokenInfo(_projectId);\r\n        projectMaxInvocations[_projectId] = maxInvocations;\r\n        if (invocations < maxInvocations) {\r\n            projectMaxHasBeenInvoked[_projectId] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the owner address to `_ownerAddress`.\r\n     * @param _ownerAddress New owner address.\r\n     */\r\n    function setOwnerAddress(address payable _ownerAddress) public {\r\n        require(\r\n            genArtCoreContract.isWhitelisted(msg.sender),\r\n            \"can only be set by admin\"\r\n        );\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the owner mint revenue to `_ownerPercentage` percent.\r\n     * @param _ownerPercentage New owner percentage.\r\n     */\r\n    function setOwnerPercentage(uint256 _ownerPercentage) public {\r\n        require(\r\n            genArtCoreContract.isWhitelisted(msg.sender),\r\n            \"can only be set by admin\"\r\n        );\r\n        ownerPercentage = _ownerPercentage;\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles if contracts are allowed to mint tokens for\r\n     * project `_projectId`.\r\n     * @param _projectId Project ID to be toggled.\r\n     */\r\n    function toggleContractFilter(uint256 _projectId) public {\r\n        require(\r\n            genArtCoreContract.isWhitelisted(msg.sender),\r\n            \"can only be set by admin\"\r\n        );\r\n        contractFilterProject[_projectId] = !contractFilterProject[_projectId];\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles if bonus contract for project `_projectId`.\r\n     * @param _projectId Project ID to be toggled.\r\n     */\r\n    function artistToggleBonus(uint256 _projectId) public {\r\n        require(\r\n            msg.sender ==\r\n                genArtCoreContract.projectIdToArtistAddress(_projectId),\r\n            \"can only be set by artist\"\r\n        );\r\n        projectIdToBonus[_projectId] = !projectIdToBonus[_projectId];\r\n    }\r\n\r\n    /**\r\n     * @notice Sets bonus contract for project `_projectId` to\r\n     * `_bonusContractAddress`.\r\n     * @param _projectId Project ID to be toggled.\r\n     * @param _bonusContractAddress Bonus contract.\r\n     */\r\n    function artistSetBonusContractAddress(\r\n        uint256 _projectId,\r\n        address _bonusContractAddress\r\n    ) public {\r\n        require(\r\n            msg.sender ==\r\n                genArtCoreContract.projectIdToArtistAddress(_projectId),\r\n            \"can only be set by artist\"\r\n        );\r\n        projectIdToBonusContractAddress[_projectId] = _bonusContractAddress;\r\n    }\r\n\r\n    //  ERC721SeaDrop Burn Changes\r\n    //  Cant use regular burn function or address, ERC721SeaDrop didnt have it.\r\n    //  Moved if \"(contractFilterProject[projectId]) .... 'No Contract Buys');}\" from purchaseTo to new functions to reduce for loop gas cost\r\n    //  Removed bonus contract and split code.\r\n\r\n    /**\r\n     * @notice Sets a new contract address to use as a `_burnTokenContract`\r\n     * @param _burnTokenContract New contract address.\r\n     */\r\n    function setActiveBurnToken(address _burnTokenContract) public {\r\n        require(genArtCoreContract.isWhitelisted(msg.sender),\"can only be set by admin\");\r\n        burnTokenContract = IERC721(_burnTokenContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Purchases a token from project `projectId` by burning 'tokenId' \r\n     * @param projectId Project ID to mint a token on.\r\n     * @param tokenId Token to burn.\r\n     * @return _tokenId Token ID of minted token\r\n     */\r\n    function purchaseSingleWithBurn(uint256 projectId, uint256 tokenId) public nonReentrant returns (uint256 _tokenId) {\r\n        if (contractFilterProject[projectId]) {\r\n        require(msg.sender == tx.origin, 'No Contract Buys');\r\n        }\r\n        require(burnTokenContract.isApprovedForAll(msg.sender, address(this)), 'This contract is not approved to transfer the specified ERC721 token');     \r\n        require(burnTokenContract.ownerOf(tokenId) == msg.sender, 'You do not own the specified ERC721 token');\r\n        require(!BurnedTokens[tokenId],'This token is already burned');\r\n        burnTokenContract.transferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), tokenId);\r\n        BurnedTokens[tokenId]=true;\r\n        emit BurnRedeem(1);\r\n        return purchaseTo(msg.sender,projectId); \r\n    }\r\n\r\n    /**\r\n     * @notice Purchases a token from project `projectId` by burning 'tokenIds' (up to 5 at a time)\r\n     * @param projectId Project ID to mint a token on.\r\n     * @param tokenIds Tokens to burn, up to 5.\r\n     * @return _tokenIds Token ID of minted token\r\n     */\r\n    function purchaseManyWithBurn(uint256 projectId, uint256[] memory tokenIds) public nonReentrant returns (uint256[] memory _tokenIds) {\r\n        if (contractFilterProject[projectId]) {\r\n        require(msg.sender == tx.origin, 'No Contract Buys');\r\n        }\r\n        require(tokenIds.length <= 5, \"You cannot burn more than 5 tokens at a time\");\r\n        require(burnTokenContract.isApprovedForAll(msg.sender, address(this)), 'This contract is not approved to transfer the specified ERC721 token');\r\n        uint256[] memory newTokenIds = new uint256[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(burnTokenContract.ownerOf(tokenIds[i]) == msg.sender, 'You do not own the specified ERC721 token');\r\n            require(!BurnedTokens[tokenIds[i]],'This token is already burned');\r\n            // Cant use regular burn function or address, ERC721SeaDrop didnt have it.\r\n            burnTokenContract.transferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), tokenIds[i]);\r\n            BurnedTokens[tokenIds[i]]=true;\r\n            newTokenIds[i] = purchaseTo(msg.sender,projectId);\r\n        }\r\n        emit BurnRedeem( tokenIds.length);\r\n        return newTokenIds;    \r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Purchases a token from project `projectId` by burning 'tokenIds' (up to 5 at a time) and sets\r\n     * the token's owner to `to`.\r\n     * @param to Address to be the new token's owner.\r\n     * @param projectId Project ID to mint a token on.\r\n     * @param tokenIds Tokens to burn, up to 5.\r\n     * @return _tokenIds Token ID of minted token\r\n     */\r\n    function purchaseToWithBurn(address to, uint256 projectId, uint256[] memory tokenIds) public nonReentrant returns (uint256[] memory _tokenIds) {\r\n        if (contractFilterProject[projectId]) {\r\n            require(msg.sender == tx.origin, \"No Contract Buys\");\r\n        }\r\n        require(tokenIds.length <= 5, \"You cannot burn more than 5 tokens at a time\");\r\n        require(burnTokenContract.isApprovedForAll(msg.sender, address(this)), 'This contract is not approved to transfer the specified ERC721 token');\r\n        uint256[] memory newTokenIds = new uint256[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(burnTokenContract.ownerOf(tokenIds[i]) == msg.sender, 'You do not own the specified ERC721 token');\r\n            require(!BurnedTokens[tokenIds[i]],'This token is already burned');\r\n            burnTokenContract.transferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), tokenIds[i]);\r\n            BurnedTokens[tokenIds[i]]=true;\r\n            newTokenIds[i] = purchaseTo(to, projectId);\r\n        }\r\n        emit BurnRedeem( tokenIds.length);\r\n        return newTokenIds;    \r\n    }\r\n\r\n    /**\r\n     * @notice Purchases a token from project `_projectId` and sets\r\n     * the token's owner to `_to`.\r\n     * @param _to Address to be the new token's owner.\r\n     * @param _projectId Project ID to mint a token on.\r\n     * @return _tokenId Token ID of minted token\r\n     */\r\n    function purchaseTo(\r\n        address _to,\r\n        uint256 _projectId\r\n    ) internal returns (uint256 _tokenId) {\r\n        // CHECKS\r\n        require(\r\n            !projectMaxHasBeenInvoked[_projectId],\r\n            \"Maximum number of invocations reached\"\r\n        );\r\n      \r\n        // limit mints per address by project\r\n        if (projectMintLimit[_projectId] > 0) {\r\n            require(\r\n                projectMintCounter[msg.sender][_projectId] <\r\n                    projectMintLimit[_projectId],\r\n                \"Reached minting limit\"\r\n            );\r\n            // EFFECTS\r\n            projectMintCounter[msg.sender][_projectId]++;\r\n        }\r\n\r\n        uint256 tokenId = genArtCoreContract.mint(_to, _projectId, msg.sender);\r\n\r\n        // What if this overflows, since default value of uint256 is 0?\r\n        // That is intended, so that by default the minter allows infinite\r\n        // transactions, allowing the `genArtCoreContract` to stop minting\r\n        // `uint256 tokenInvocation = tokenId % ONE_MILLION;`\r\n        if (\r\n            projectMaxInvocations[_projectId] > 0 &&\r\n            tokenId % ONE_MILLION == projectMaxInvocations[_projectId] - 1\r\n        ) {\r\n            projectMaxHasBeenInvoked[_projectId] = true;\r\n        }\r\n\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    \r\n}"
6     },
7     "@openzeppelin/contracts/interfaces/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
9     },
10     "@openzeppelin/contracts/utils/Strings.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
15     },
16     "IBonusContract.sol": {
17       "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n// Creatd By: Art Blocks Inc.\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBonusContract {\r\n    function triggerBonus(address _to) external returns (bool);\r\n\r\n    function bonusIsActive() external view returns (bool);\r\n}"
18     },
19     "IGenArt721CoreV2_PBAB.sol": {
20       "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n// Created By: Art Blocks Inc.\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IGenArt721CoreV2_PBAB {\r\n    /**\r\n     * @notice Token ID `_tokenId` minted on project ID `_projectId` to `_to`.\r\n     */\r\n    event Mint(\r\n        address indexed _to,\r\n        uint256 indexed _tokenId,\r\n        uint256 indexed _projectId\r\n    );\r\n\r\n    // getter function of public variable\r\n    function admin() external view returns (address);\r\n\r\n    // getter function of public variable\r\n    function nextProjectId() external view returns (uint256);\r\n\r\n    // getter function of public mapping\r\n    function tokenIdToProjectId(\r\n        uint256 tokenId\r\n    ) external view returns (uint256 projectId);\r\n\r\n    function isWhitelisted(address sender) external view returns (bool);\r\n\r\n    function projectIdToCurrencySymbol(\r\n        uint256 _projectId\r\n    ) external view returns (string memory);\r\n\r\n    function projectIdToCurrencyAddress(\r\n        uint256 _projectId\r\n    ) external view returns (address);\r\n\r\n    function projectIdToArtistAddress(\r\n        uint256 _projectId\r\n    ) external view returns (address payable);\r\n\r\n    function projectIdToPricePerTokenInWei(\r\n        uint256 _projectId\r\n    ) external view returns (uint256);\r\n\r\n    function projectIdToAdditionalPayee(\r\n        uint256 _projectId\r\n    ) external view returns (address payable);\r\n\r\n    function projectIdToAdditionalPayeePercentage(\r\n        uint256 _projectId\r\n    ) external view returns (uint256);\r\n\r\n    function projectTokenInfo(\r\n        uint256 _projectId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            address,\r\n            uint256,\r\n            string memory,\r\n            address\r\n        );\r\n\r\n    function renderProviderAddress() external view returns (address payable);\r\n\r\n    function renderProviderPercentage() external view returns (uint256);\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _projectId,\r\n        address _by\r\n    ) external returns (uint256 tokenId);\r\n\r\n    function getRoyaltyData(\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address artistAddress,\r\n            address additionalPayee,\r\n            uint256 additionalPayeePercentage,\r\n            uint256 royaltyFeeByID\r\n        );\r\n}"
21     },
22     "@openzeppelin/contracts/utils/math/Math.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
27     }
28   },
29   "settings": {
30     "optimizer": {
31       "enabled": false,
32       "runs": 200
33     },
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     }
46   }
47 }}