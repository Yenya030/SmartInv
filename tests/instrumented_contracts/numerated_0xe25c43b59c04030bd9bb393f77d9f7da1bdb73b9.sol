1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CookieJar.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n          .::::::::::::::::::::::::::::::::::::::::::::::.      \n        ~JYJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJY555555555YY!     \n        .PG5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5PPPPPPPPPPGP:    \n        ^J555555PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5555J~     \n            .:^^:7YYYYYYYYYYYYYYYYYYYYYYYYY5555555J~~~^.        \n          .::.. .:^^^^^^^^^^^^^^^^^^^^^^^^^^~~~~~^:^^~~^.      \n        .::.                                .:::::::::^^~^     \n      .::.                 ................  :^:::::::::^~~.   \n      .:..                ................... .::::::::::::^~.  \n      ::                ...................... :^:::::::::::^~  \n    .:.               ....................... .^:::::::::::^~. \n    .:.               ....................... .^::::::::::::~. \n    .:.              ........................ .^::::::::::::~. \n    .:.              ........................ .^::::::::::::~. \n    .:.              ........................ .:::::::::::::~. \n    .:.              ........................ .:::::::::::::~. \n    .:.              ........................ .:::::::::::::~. \n    .:.              .....               .... .:::::::::::::~. \n    .:.              ..    .::^^^~~^^::.    . .:::::::::::::~. \n    .:.                .:~!7777??777???77~:.  .^::::::::::::~. \n    .:.              .~777777JYY5Y7777777?J7^..^::::::::::::~. \n    .:. .......... .^777!77775555Y77777777??J?^:::::::::::::~. \n    .:. ......... .!7?Y5J77777?77777777?Y?7??JY~::::::::::::~. \n    .^  ........  !77JYY?777777777?JJJJ?7?JJ?J5J::::::::::::~. \n    .^. ........ :?777!7777?777777Y55P5J?JJ??JYY^:::::::::::~. \n    .~:  ....... ^?!!77777JJ777777??JJ???J???J5J::::::::::::~. \n    .~^.  ...... :J7!!777777777777777777JYYJJY5!::::::::::::~. \n    .~^:.   ..... ~J77777?JJ?7777777777?Y55YY57::::::::::::^~. \n      ~^:::.        ^??77?55P5?7777?J??JJJYY5Y!:::::::::::::^~. \n      :~^::::......  .~7??Y5YJ??7??YYJYYY55Y7^:::::::::::::^~^  \n      ^~~^^^^^^::::::::~!7JJYYYYYYYYYYYJ7~^::^^^^^^^^^^^^~~^   \n        .^^~~~~~~~~~~~~~~^^~~~!!!77!!!~~~^^~~~~~~~~~~~~~~^^.    \n          ...................FLIP SHIBA..................\n*/\n\nimport \"./StakingWrapper.sol\";\nimport \"./IERC1155.sol\";\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract CookieJar is StakingWrapper, AccessControl {\n    using SafeMath for uint256;\n\n    uint256 private constant DECIMALS = 1e18;\n\n    IERC1155 public cookieToken;\n\n    struct Cookie {\n        uint256 crumbs;\n        uint256 releaseTime;\n    }\n\n    bool public allowBoosts = true;\n    uint256 public start;\n    uint256 public maxStake;\n    uint256 public cookieRaid;\n    uint256 public rewardRate;\n    uint256 private burned;\n    uint256[4] public boosts = [\n        50, // 5%\n        100, // 10%\n        150, // 15%\n        330 // 33%\n    ];\n\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public crumbs;\n    mapping(uint256 => Cookie) public cookies;\n\n    event Redeemed(address indexed user, uint256 crumbs);\n    event CookieAdded(\n        uint256 cookie,\n        uint256 maxIssuance,\n        uint256 crumbs,\n        uint256 releaseTime,\n        string tokenUri\n    );\n\n    modifier updateReward(address account) {\n        if (account != address(0)) {\n            crumbs[account] = earned(account);\n            lastUpdateTime[account] = _blockTime();\n        }\n        _;\n    }\n\n    constructor(\n        address _tokenAddress,\n        address _cookiesAddress,\n        uint256 _burned,\n        uint56 _maxStake,\n        uint256 _rewardRate,\n        uint256 _cookieRaid\n    ) StakingWrapper(_tokenAddress) {\n        cookieToken = IERC1155(_cookiesAddress);\n        burned = _burned;\n        maxStake = _maxStake * DECIMALS;\n        cookieRaid = _cookieRaid * DECIMALS;\n        rewardRate = _rewardRate;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function percentStaked() public view returns (uint256 percent) {\n        return (totalStaked().mul(1000)).div(totalSupply().sub(burned));\n    }\n\n    function boostAmount() public view returns (uint256 boost) {\n        if (!allowBoosts) return 0;\n        if (percentStaked() >= boosts[3]) return 330;\n        if (percentStaked() >= boosts[2]) return 150;\n        if (percentStaked() >= boosts[1]) return 100;\n        if (percentStaked() >= boosts[0]) return 50;\n        return 0;\n    }\n\n    function earned(address account) public view returns (uint256) {\n        uint256 blockTime = _blockTime();\n        uint256 base = balanceOf(account)\n            .mul(blockTime.sub(lastUpdateTime[account]).mul(rewardRate))\n            .div(DECIMALS)\n            .add(crumbs[account]);\n\n        return base.add(base.mul(boostAmount()).div(1000));\n    }\n\n    function cookieReleaseTime(uint256 cookie) public view returns (uint256) {\n        return cookies[cookie].releaseTime;\n    }\n\n    function cookieCrumbs(uint256 cookie) public view returns (uint256) {\n        return cookies[cookie].crumbs;\n    }\n\n    function cookieTotalIssuance(uint256 cookie) public view returns (uint256) {\n        return cookieToken.totalSupply(cookie);\n    }\n\n    function cookieMaxIssuance(uint256 cookie) public view returns (uint256) {\n        return cookieToken.maxIssuance(cookie);\n    }\n\n    function mintingOpen() public view returns (bool) {\n        return totalStaked() >= cookieRaid;\n    }\n\n    function stake(uint256 amount) public override updateReward(msg.sender) {\n        require(_blockTime() >= start, \"cookie jar not ready\");\n        require(\n            amount.add(balanceOf(msg.sender)) <= maxStake,\n            \"deposit > max allowed\"\n        );\n\n        super.stake(amount);\n    }\n\n    function withdraw(uint256 amount) public override updateReward(msg.sender) {\n        require(amount > 0, \"why withdraw 0?\");\n        super.withdraw(amount);\n    }\n\n    function exit() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    function redeem(uint256 id, uint256 quantity)\n        public\n        updateReward(msg.sender)\n    {\n        require(totalStaked() >= cookieRaid, \"raid not started\");\n        require(quantity > 0, \"mint 1 or more\");\n        require(cookies[id].crumbs != 0, \"cookie not found\");\n        require(_blockTime() >= cookies[id].releaseTime, \"cookie not released\");\n\n        Cookie memory c = cookies[id];\n\n        uint256 requiredCrumbs = quantity.mul(c.crumbs);\n        require(crumbs[msg.sender] >= requiredCrumbs, \"need more crumbs\");\n\n        crumbs[msg.sender] = crumbs[msg.sender].sub(requiredCrumbs);\n        cookieToken.mint(msg.sender, id, quantity);\n\n        emit Redeemed(msg.sender, requiredCrumbs);\n    }\n\n    function _blockTime() internal view returns (uint256) {\n        return block.timestamp;\n    }\n\n    // ADMIN FUNCTIONS //\n\n    function setStart(uint256 _start) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        start = _start;\n    }\n\n    function setAllowBoosts(bool _allowBoosts)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        allowBoosts = _allowBoosts;\n    }\n\n    function setCookieRaid(uint256 _cookieRaid)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        cookieRaid = _cookieRaid;\n    }\n\n    function setMaxStake(uint256 _maxStake)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        maxStake = _maxStake;\n    }\n\n    function setRewardRate(uint256 _toStakePerPoint)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        uint256 _rewardRate = (\n            uint256(1e18).div(86400).mul(DECIMALS).div(_toStakePerPoint)\n        );\n\n        rewardRate = _rewardRate;\n    }\n\n    function setRewardRateNoCalc(uint256 _rewardRate)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        rewardRate = _rewardRate;\n    }\n\n    function createCookie(\n        uint256 _maxIssuance,\n        string memory _tokenURI,\n        uint256 _crumbs,\n        uint256 _releaseTime\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256 tokenId) {\n        tokenId = cookieToken.initializeToken(_maxIssuance, _tokenURI);\n        require(tokenId > 0, \"ERC1155 create did not succeed\");\n\n        Cookie storage c = cookies[tokenId];\n        c.crumbs = _crumbs;\n        c.releaseTime = _releaseTime;\n\n        emit CookieAdded(\n            tokenId,\n            _maxIssuance,\n            _crumbs,\n            _releaseTime,\n            _tokenURI\n        );\n    }\n}\n"
6     },
7     "contracts/StakingWrapper.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract StakingWrapper {\n    using SafeMath for uint256;\n    IERC20 public token;\n\n    uint256 private _totalStaked;\n    mapping(address => uint256) private _balances;\n\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n\n    constructor(address _tokenAddress) {\n        token = IERC20(_tokenAddress);\n    }\n\n    function totalStaked() public view returns (uint256) {\n        return _totalStaked;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return token.totalSupply();\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function stake(uint256 amount) public virtual {\n        _totalStaked = _totalStaked.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        token.transferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public virtual {\n        _totalStaked = _totalStaked.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        token.transfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n}\n"
9     },
10     "contracts/IERC1155.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC1155 is IERC165 {\n    function initializeToken(uint256 _maxIssuance, string memory _tokenURI)\n        external\n        returns (uint256);\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external returns (bool);\n\n    function maxIssuance(uint256 tokenId) external view returns (uint256);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n}\n"
12     },
13     "@openzeppelin/contracts/access/AccessControl.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts/access/IAccessControl.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Strings.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     },
55     "libraries": {}
56   }
57 }}