1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "istanbul",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
31     },
32     "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
34     },
35     "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
37     },
38     "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n"
40     },
41     "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
43     },
44     "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
46     },
47     "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
49     },
50     "@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
52     },
53     "contracts/MultipleWinners.sol": {
54       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport \"./PeriodicPrizeStrategy.sol\";\nimport \"./interfaces/ITulipArt.sol\";\n\ncontract MultipleWinners is PeriodicPrizeStrategy {\n    uint256 internal __numberOfWinners;\n\n    event NumberOfWinnersSet(uint256 numberOfWinners);\n    event NoWinners();\n\n    /// @notice Initialize the contract with default variables.\n    /// @param _prizePeriodStart: The starting block of the prize period.\n    /// @param _prizePeriodBlocks: The duration of the prize period in blocks.\n    /// @param _tulipArt: The staking contract used to draw winners.\n    /// @param _rng: The RNG service to use.\n    /// @param _numberOfWinners: Number of winners of the lottery prize draw.\n    constructor(\n        uint256 _prizePeriodStart,\n        uint256 _prizePeriodBlocks,\n        uint32 _rngRequestTimeout,\n        ITulipArt _tulipArt,\n        RNGInterface _rng,\n        uint256 _numberOfWinners\n    ) public {\n        PeriodicPrizeStrategy.initialize(\n            _prizePeriodStart,\n            _prizePeriodBlocks,\n            _rngRequestTimeout,\n            _tulipArt,\n            _rng\n        );\n\n        _setNumberOfWinners(_numberOfWinners);\n    }\n\n    /// @param _count: number of winners that the lottery will have.\n    function setNumberOfWinners(uint256 _count)\n        external\n        onlyOwner\n        requireRngNotInFlight\n    {\n        _setNumberOfWinners(_count);\n    }\n\n    /// @return returns the amount of winners per lottery round.\n    function numberOfWinners() external view returns (uint256) {\n        return __numberOfWinners;\n    }\n\n    /// @notice Sets the number of possible winners for the lottery.\n    /// @param _count: new number of winners to be set. Must be more than 1.\n    function _setNumberOfWinners(uint256 _count) internal {\n        require(_count > 0, \"MultipleWinners/winners-gte-one\");\n\n        __numberOfWinners = _count;\n        emit NumberOfWinnersSet(_count);\n    }\n\n    /// @notice Chooses the winners and sets their prizes based on %staked and\n    /// random numbers.\n    /// @param _randomNumber: number generated by the Chainlink VRF node.\n    function _distribute(uint256 _randomNumber) internal override {\n        // main winner is simply the first that is drawn\n        address mainWinner = tulipArt.draw(_randomNumber);\n\n        // If drawing yields no winner, then there is no one to pick\n        // @NOTE with the way the staking contract is done this is unreachable\n        // This is kept here just incase any future changes occur\n        if (mainWinner == address(0)) {\n            emit NoWinners();\n            return;\n        }\n\n        address[] memory winners = new address[](__numberOfWinners);\n        winners[0] = mainWinner;\n        uint256 nextRandom = _randomNumber;\n        for (\n            uint256 winnerCount = 1;\n            winnerCount < __numberOfWinners;\n            winnerCount++\n        ) {\n            // add some arbitrary numbers to the previous random number to\n            // ensure no matches with the UniformRandomNumber lib\n            bytes32 nextRandomHash = keccak256(\n                abi.encodePacked(nextRandom + 499 + winnerCount * 521)\n            );\n            nextRandom = uint256(nextRandomHash);\n            winners[winnerCount] = tulipArt.draw(nextRandom);\n        }\n\n        // Set the winners for the round\n        for (uint256 i = 0; i < winners.length; i++) {\n            // SET WINNERS the NFT numbers should be by the minter contract\n            tulipArt.setWinner(winners[i]);\n        }\n    }\n}\n"
55     },
56     "contracts/PeriodicPrizeStrategy.sol": {
57       "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport \"./interfaces/ITulipArt.sol\";\nimport \"./interfaces/RNGInterface.sol\";\n\n/* solium-disable security/no-block-members */\nabstract contract PeriodicPrizeStrategy is OwnableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using SafeCastUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n\n    event PrizeLotteryOpened(\n        address indexed operator,\n        uint256 indexed prizePeriodStartedAt\n    );\n\n    event RngRequestFailed();\n\n    event PrizeLotteryAwardStarted(\n        address indexed operator,\n        uint32 indexed rngRequestId,\n        uint32 rngLockBlock\n    );\n\n    event PrizeLotteryAwardCancelled(\n        address indexed operator,\n        uint32 indexed rngRequestId,\n        uint32 rngLockBlock\n    );\n\n    event PrizePoolAwarded(address indexed operator, uint256 randomNumber);\n\n    event RngServiceUpdated(RNGInterface indexed rngService);\n\n    event RngRequestTimeoutSet(uint32 rngRequestTimeout);\n\n    event PrizePeriodBlocksUpdated(uint256 prizePeriodBlocks);\n\n    event Initialized(\n        uint256 prizePeriodStart,\n        uint256 prizePeriodBlocks,\n        ITulipArt tulipArt,\n        RNGInterface rng\n    );\n\n    struct RngRequest {\n        uint32 id;\n        uint32 lockBlock;\n        uint32 requestedAt;\n    }\n\n    // Contract Interfaces\n    ITulipArt public tulipArt;\n    RNGInterface public rng;\n\n    // Current RNG Request\n    RngRequest internal rngRequest;\n\n    /// @notice RNG Request Timeout. In fact, this is really a \"complete award\" timeout.\n    /// If the rng completes the award can still be cancelled.\n    uint32 public rngRequestTimeout;\n\n    // Prize period\n    uint256 public prizePeriodBlocks;\n    uint256 public prizePeriodStartedAt;\n\n    /// @notice Initializes a new prize period startegy.\n    /// @param _prizePeriodStart The starting block of the prize period.\n    /// @param _prizePeriodBlocks The duration of the prize period in blocks.\n    /// @param _tulipArt The staking contract used to draw winners.\n    /// @param _rng The RNG service to use.\n    function initialize(\n        uint256 _prizePeriodStart,\n        uint256 _prizePeriodBlocks,\n        uint32 _rngRequestTimeout,\n        ITulipArt _tulipArt,\n        RNGInterface _rng\n    ) public initializer {\n        require(\n            address(_tulipArt) != address(0),\n            \"PeriodicPrizeStrategy/lottery-not-zero\"\n        );\n        require(\n            address(_rng) != address(0),\n            \"PeriodicPrizeStrategy/rng-not-zero\"\n        );\n        tulipArt = _tulipArt;\n        rng = _rng;\n\n        _setPrizePeriodBlocks(_prizePeriodBlocks);\n\n        __Ownable_init();\n\n        prizePeriodStartedAt = _prizePeriodStart;\n\n        _setRngRequestTimeout(_rngRequestTimeout);\n\n        emit Initialized(\n            _prizePeriodStart,\n            _prizePeriodBlocks,\n            _tulipArt,\n            _rng\n        );\n    }\n\n    /// @notice Starts the award process by starting random number request.\n    /// The prize period must have ended.\n    /// @dev The RNG-Request-Fee is expected to be held within this contract\n    /// before calling this function.\n    function startAward() external requireCanStartAward {\n        (address feeToken, uint256 requestFee) = rng.getRequestFee();\n        if (feeToken != address(0) && requestFee > 0) {\n            IERC20Upgradeable(feeToken).safeApprove(address(rng), requestFee);\n        }\n\n        (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\n        rngRequest.id = requestId;\n        rngRequest.lockBlock = lockBlock;\n        rngRequest.requestedAt = block.timestamp.toUint32();\n\n        // Tell the TulipArt contract to pause deposits and withdrawals\n        // until the RNG winners have been selected\n        tulipArt.startDraw();\n\n        emit PrizeLotteryAwardStarted(_msgSender(), requestId, lockBlock);\n    }\n\n    /// @notice Completes the award process and awards the winners.\n    /// The random number must have been requested and is now available.\n    function completeAward() external requireCanCompleteAward {\n        uint256 randomNumber = rng.randomNumber(rngRequest.id);\n        delete rngRequest;\n\n        _distribute(randomNumber);\n\n        // To avoid clock drift, we should calculate the start block based on\n        // the previous period start block.\n        prizePeriodStartedAt = _calculateNextPrizePeriodStartBlock(\n            block.number\n        );\n\n        // Tell TulipArt contracts that deposits/withdrawals are live again\n        tulipArt.finishDraw();\n\n        emit PrizePoolAwarded(_msgSender(), randomNumber);\n        emit PrizeLotteryOpened(_msgSender(), prizePeriodStartedAt);\n    }\n\n    /// @notice Sets the RNG service that the Prize Strategy is connected to.\n    /// @param rngService The address of the new RNG service interface.\n    function setRngService(RNGInterface rngService)\n        external\n        onlyOwner\n        requireRngNotInFlight\n    {\n        require(!isRngRequested(), \"PeriodicPrizeStrategy/rng-in-flight\");\n\n        rng = rngService;\n        emit RngServiceUpdated(rngService);\n    }\n\n    /// @notice Allows the owner to set the RNG request timeout in seconds.\n    /// This is the time that must elapsed before the RNG request can be cancelled\n    /// and the pool unlocked.\n    /// @param _rngRequestTimeout The RNG request timeout in seconds.\n    function setRngRequestTimeout(uint32 _rngRequestTimeout)\n        external\n        onlyOwner\n        requireRngNotInFlight\n    {\n        _setRngRequestTimeout(_rngRequestTimeout);\n    }\n\n    /// @notice Allows the owner to set the prize period in blocks.\n    /// @param _prizePeriodBlocks The new prize period in blocks. Must be greater than zero.\n    function setPrizePeriodBlocks(uint256 _prizePeriodBlocks)\n        external\n        onlyOwner\n        requireRngNotInFlight\n    {\n        _setPrizePeriodBlocks(_prizePeriodBlocks);\n    }\n\n    /// @notice Returns the block number that the current RNG request has been locked to.\n    ///@return The block number that the RNG request is locked to.\n    function getLastRngLockBlock() external view returns (uint32) {\n        return rngRequest.lockBlock;\n    }\n\n    /// @notice Returns the current RNG Request ID.\n    /// @return The current Request ID.\n    function getLastRngRequestId() external view returns (uint32) {\n        return rngRequest.id;\n    }\n\n    /// @notice Returns the number of blocks remaining until the prize can be awarded.\n    /// @return The number of blocks remaining until the prize can be awarded.\n    function prizePeriodRemainingBlocks() external view returns (uint256) {\n        return _prizePeriodRemainingBlocks();\n    }\n\n    /// @notice Returns whether the prize period is over.\n    /// @return True if the prize period is over, false otherwise.\n    function isPrizePeriodOver() external view returns (bool) {\n        return _isPrizePeriodOver();\n    }\n\n    /// @notice Returns the block at which the prize period ends.\n    /// @return The block at which the prize period ends.\n    function prizePeriodEndAt() external view returns (uint256) {\n        // current prize started at is non-inclusive, so add one\n        return _prizePeriodEndAt();\n    }\n\n    /// @notice Calculates when the next prize period will start.\n    /// @param currentBlock The block to use as the current block.\n    /// @return The block at which the next prize period would start.\n    function calculateNextPrizePeriodStartBlock(uint256 currentBlock)\n        external\n        view\n        returns (uint256)\n    {\n        return _calculateNextPrizePeriodStartBlock(currentBlock);\n    }\n\n    /// @notice Returns whether an award process can be started.\n    /// @return True if an award can be started, false otherwise.\n    function canStartAward() external view returns (bool) {\n        return _isPrizePeriodOver() && !isRngRequested();\n    }\n\n    /// @notice Returns whether an award process can be completed.\n    /// @return True if an award can be completed, false otherwise.\n    function canCompleteAward() external view returns (bool) {\n        return isRngRequested() && isRngCompleted();\n    }\n\n    /// @notice Can be called by anyone to unlock the tickets if the RNG has timed out.\n    function cancelAward() public {\n        require(isRngTimedOut(), \"PeriodicPrizeStrategy/rng-not-timedout\");\n        uint32 requestId = rngRequest.id;\n        uint32 lockBlock = rngRequest.lockBlock;\n        delete rngRequest;\n\n        // Tell TulipArt contracts that deposits/withdrawals are live again\n        tulipArt.finishDraw();\n\n        emit RngRequestFailed();\n        emit PrizeLotteryAwardCancelled(msg.sender, requestId, lockBlock);\n    }\n\n    /// @notice Returns whether a random number has been requested.\n    /// @return True if a random number has been requested, false otherwise.\n    function isRngRequested() public view returns (bool) {\n        return rngRequest.id != 0;\n    }\n\n    /// @notice Returns whether the random number request has completed.\n    /// @return True if a random number request has completed, false otherwise.\n    function isRngCompleted() public view returns (bool) {\n        return rng.isRequestComplete(rngRequest.id);\n    }\n\n    /// @notice checks if the rng request sent to the CL VRF has timed out.\n    /// @return True if it has timed out, False if it hasn't or hasn't been requested.\n    function isRngTimedOut() public view returns (bool) {\n        if (rngRequest.requestedAt == 0) {\n            return false;\n        } else {\n            return\n                block.timestamp >\n                uint256(rngRequestTimeout).add(rngRequest.requestedAt);\n        }\n    }\n\n    /// @notice Sets the RNG request timeout in seconds.  This is the time that must\n    /// elapsed before the RNG request can be cancelled and the pool unlocked.\n    /// @param _rngRequestTimeout The RNG request timeout in seconds.\n    function _setRngRequestTimeout(uint32 _rngRequestTimeout) internal {\n        require(\n            _rngRequestTimeout > 60,\n            \"PeriodicPrizeStrategy/rng-timeout-gt-60-secs\"\n        );\n        rngRequestTimeout = _rngRequestTimeout;\n        emit RngRequestTimeoutSet(rngRequestTimeout);\n    }\n\n    /// @notice Sets the prize period in blocks.\n    /// @param _prizePeriodBlocks The new prize period in blocks.\n    /// Must be greater than zero.\n    function _setPrizePeriodBlocks(uint256 _prizePeriodBlocks) internal {\n        require(\n            _prizePeriodBlocks > 0,\n            \"PeriodicPrizeStrategy/prize-period-greater-than-zero\"\n        );\n        prizePeriodBlocks = _prizePeriodBlocks;\n\n        emit PrizePeriodBlocksUpdated(prizePeriodBlocks);\n    }\n\n    /// @notice Returns the number of blocks remaining until the prize can be awarded.\n    /// @return The number of blocks remaining until the prize can be awarded.\n    function _prizePeriodRemainingBlocks() internal view returns (uint256) {\n        uint256 endAt = _prizePeriodEndAt();\n        if (block.number > endAt) {\n            return 0;\n        }\n        return endAt.sub(block.number);\n    }\n\n    /// @notice Returns whether the prize period is over.\n    /// @return True if the prize period is over, false otherwise.\n    function _isPrizePeriodOver() internal view returns (bool) {\n        return block.number >= _prizePeriodEndAt();\n    }\n\n    /// @notice Returns the block at which the prize period ends.\n    /// @return The block at which the prize period ends.\n    function _prizePeriodEndAt() internal view returns (uint256) {\n        // current prize started at is non-inclusive, so add one\n        return prizePeriodStartedAt.add(prizePeriodBlocks);\n    }\n\n    /// @return calculates and returns the next prize period start block.\n    function _calculateNextPrizePeriodStartBlock(uint256 currentBlock)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 elapsedPeriods = currentBlock.sub(prizePeriodStartedAt).div(\n            prizePeriodBlocks\n        );\n        return prizePeriodStartedAt.add(elapsedPeriods.mul(prizePeriodBlocks));\n    }\n\n    /// @notice ensure that the award period is currently not in progress.\n    function _requireRngNotInFlight() internal view {\n        require(\n            rngRequest.lockBlock == 0 || block.number < rngRequest.lockBlock,\n            \"PeriodicPrizeStrategy/rng-in-flight\"\n        );\n    }\n\n    function _distribute(uint256 randomNumber) internal virtual;\n\n    modifier requireRngNotInFlight() {\n        _requireRngNotInFlight();\n        _;\n    }\n\n    modifier requireCanStartAward() {\n        require(\n            _isPrizePeriodOver(),\n            \"PeriodicPrizeStrategy/prize-period-not-over\"\n        );\n        require(\n            !isRngRequested(),\n            \"PeriodicPrizeStrategy/rng-already-requested\"\n        );\n        _;\n    }\n\n    modifier requireCanCompleteAward() {\n        require(isRngRequested(), \"PeriodicPrizeStrategy/rng-not-requested\");\n        require(isRngCompleted(), \"PeriodicPrizeStrategy/rng-not-complete\");\n        _;\n    }\n}\n"
58     },
59     "contracts/interfaces/ITulipArt.sol": {
60       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\ninterface ITulipArt {\n    function enterStaking(uint256 _amount) external;\n\n    function leaveStaking(uint256 _amount) external;\n\n    function setWinner(address _winner) external;\n\n    function startDraw() external;\n\n    function finishDraw() external;\n\n    function chanceOf(address user) external view returns (uint256);\n\n    function userStake(address user) external view returns (uint256);\n\n    function draw(uint256 randomNumber) external view returns (address);\n}\n"
61     },
62     "contracts/interfaces/RNGInterface.sol": {
63       "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.6.12;\n\n/// @title Random Number Generator Interface\n/// @notice Provides an interface for requesting random numbers from\n/// 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\ninterface RNGInterface {\n    /// @notice Emitted when a new request for a random number has been submitted\n    /// @param requestId The indexed ID of the request used to get the results of the RNG service\n    /// @param sender The indexed address of the sender of the request\n    event RandomNumberRequested(\n        uint32 indexed requestId,\n        address indexed sender\n    );\n\n    /// @notice Emitted when an existing request for a random number has been completed\n    /// @param requestId The indexed ID of the request used to get the results of the RNG service\n    /// @param randomNumber The random number produced by the 3rd-party service\n    event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n    /// @notice Gets the last request id used by the RNG service\n    /// @return requestId The last request id used in the last request\n    function getLastRequestId() external view returns (uint32 requestId);\n\n    /// @notice Gets the Fee for making a Request against an RNG service\n    /// @return feeToken The address of the token that is used to pay fees\n    /// @return requestFee The fee required to be paid to make a request\n    function getRequestFee()\n        external\n        view\n        returns (address feeToken, uint256 requestFee);\n\n    /// @notice Sends a request for a random number to the 3rd-party service\n    /// @dev Some services will complete the request immediately, others may have a time-delay\n    /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n    /// @return requestId The ID of the request used to get the results of the RNG service\n    /// @return lockBlock The block number at which the RNG service will start\n    /// generating time-delayed randomness.  The calling contract\n    /// should \"lock\" all activity until the result is available via the `requestId`\n    function requestRandomNumber()\n        external\n        returns (uint32 requestId, uint32 lockBlock);\n\n    /// @notice Checks if the request for randomness from the 3rd-party service has completed\n    /// @dev For time-delayed requests, this function is used to check/confirm completion\n    /// @param requestId The ID of the request used to get the results of the RNG service\n    /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n    function isRequestComplete(uint32 requestId)\n        external\n        view\n        returns (bool isCompleted);\n\n    /// @notice Gets the random number produced by the 3rd-party service\n    /// @param requestId The ID of the request used to get the results of the RNG service\n    /// @return randomNum The random number\n    function randomNumber(uint32 requestId)\n        external\n        returns (uint256 randomNum);\n}\n"
64     }
65   }
66 }}