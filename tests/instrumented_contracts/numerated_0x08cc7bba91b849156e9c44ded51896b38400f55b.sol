1 
2 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
3 
4 pragma solidity ^0.5.4;
5 
6 interface IntVoteInterface {
7     //When implementing this interface please do not only override function and modifier,
8     //but also to keep the modifiers on the overridden functions.
9     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
10     modifier votable(bytes32 _proposalId) {revert(); _;}
11 
12     event NewProposal(
13         bytes32 indexed _proposalId,
14         address indexed _organization,
15         uint256 _numOfChoices,
16         address _proposer,
17         bytes32 _paramsHash
18     );
19 
20     event ExecuteProposal(bytes32 indexed _proposalId,
21         address indexed _organization,
22         uint256 _decision,
23         uint256 _totalReputation
24     );
25 
26     event VoteProposal(
27         bytes32 indexed _proposalId,
28         address indexed _organization,
29         address indexed _voter,
30         uint256 _vote,
31         uint256 _reputation
32     );
33 
34     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
35     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
36 
37     /**
38      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
39      * generated by calculating keccak256 of a incremented counter.
40      * @param _numOfChoices number of voting choices
41      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
42      * @param _proposer address
43      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
44      * @return proposal's id.
45      */
46     function propose(
47         uint256 _numOfChoices,
48         bytes32 _proposalParameters,
49         address _proposer,
50         address _organization
51         ) external returns(bytes32);
52 
53     function vote(
54         bytes32 _proposalId,
55         uint256 _vote,
56         uint256 _rep,
57         address _voter
58     )
59     external
60     returns(bool);
61 
62     function cancelVote(bytes32 _proposalId) external;
63 
64     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
65 
66     function isVotable(bytes32 _proposalId) external view returns(bool);
67 
68     /**
69      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
70      * @param _proposalId the ID of the proposal
71      * @param _choice the index in the
72      * @return voted reputation for the given choice
73      */
74     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
75 
76     /**
77      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
78      * @return bool true or false
79      */
80     function isAbstainAllow() external pure returns(bool);
81 
82     /**
83      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
84      * @return min - minimum number of choices
85                max - maximum number of choices
86      */
87     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
88 }
89 
90 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
91 
92 pragma solidity ^0.5.0;
93 
94 /**
95  * @title ERC20 interface
96  * @dev see https://github.com/ethereum/EIPs/issues/20
97  */
98 interface IERC20 {
99     function transfer(address to, uint256 value) external returns (bool);
100 
101     function approve(address spender, uint256 value) external returns (bool);
102 
103     function transferFrom(address from, address to, uint256 value) external returns (bool);
104 
105     function totalSupply() external view returns (uint256);
106 
107     function balanceOf(address who) external view returns (uint256);
108 
109     function allowance(address owner, address spender) external view returns (uint256);
110 
111     event Transfer(address indexed from, address indexed to, uint256 value);
112 
113     event Approval(address indexed owner, address indexed spender, uint256 value);
114 }
115 
116 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
117 
118 pragma solidity ^0.5.4;
119 
120 
121 interface VotingMachineCallbacksInterface {
122     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
123     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
124 
125     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
126     external
127     returns(bool);
128 
129     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
130     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
131     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
132 }
133 
134 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
135 
136 pragma solidity ^0.5.0;
137 
138 /**
139  * @title Ownable
140  * @dev The Ownable contract has an owner address, and provides basic authorization control
141  * functions, this simplifies the implementation of "user permissions".
142  */
143 contract Ownable {
144     address private _owner;
145 
146     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
147 
148     /**
149      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
150      * account.
151      */
152     constructor () internal {
153         _owner = msg.sender;
154         emit OwnershipTransferred(address(0), _owner);
155     }
156 
157     /**
158      * @return the address of the owner.
159      */
160     function owner() public view returns (address) {
161         return _owner;
162     }
163 
164     /**
165      * @dev Throws if called by any account other than the owner.
166      */
167     modifier onlyOwner() {
168         require(isOwner());
169         _;
170     }
171 
172     /**
173      * @return true if `msg.sender` is the owner of the contract.
174      */
175     function isOwner() public view returns (bool) {
176         return msg.sender == _owner;
177     }
178 
179     /**
180      * @dev Allows the current owner to relinquish control of the contract.
181      * @notice Renouncing to ownership will leave the contract without an owner.
182      * It will not be possible to call the functions with the `onlyOwner`
183      * modifier anymore.
184      */
185     function renounceOwnership() public onlyOwner {
186         emit OwnershipTransferred(_owner, address(0));
187         _owner = address(0);
188     }
189 
190     /**
191      * @dev Allows the current owner to transfer control of the contract to a newOwner.
192      * @param newOwner The address to transfer ownership to.
193      */
194     function transferOwnership(address newOwner) public onlyOwner {
195         _transferOwnership(newOwner);
196     }
197 
198     /**
199      * @dev Transfers control of the contract to a newOwner.
200      * @param newOwner The address to transfer ownership to.
201      */
202     function _transferOwnership(address newOwner) internal {
203         require(newOwner != address(0));
204         emit OwnershipTransferred(_owner, newOwner);
205         _owner = newOwner;
206     }
207 }
208 
209 // File: @daostack/infra/contracts/Reputation.sol
210 
211 pragma solidity ^0.5.4;
212 
213 
214 
215 /**
216  * @title Reputation system
217  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
218  * A reputation is use to assign influence measure to a DAO'S peers.
219  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
220  * The Reputation contract maintain a map of address to reputation value.
221  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
222  */
223 
224 contract Reputation is Ownable {
225 
226     uint8 public decimals = 18;             //Number of decimals of the smallest unit
227     // Event indicating minting of reputation to an address.
228     event Mint(address indexed _to, uint256 _amount);
229     // Event indicating burning of reputation for an address.
230     event Burn(address indexed _from, uint256 _amount);
231 
232       /// @dev `Checkpoint` is the structure that attaches a block number to a
233       ///  given value, the block number attached is the one that last changed the
234       ///  value
235     struct Checkpoint {
236 
237     // `fromBlock` is the block number that the value was generated from
238         uint128 fromBlock;
239 
240           // `value` is the amount of reputation at a specific block number
241         uint128 value;
242     }
243 
244       // `balances` is the map that tracks the balance of each address, in this
245       //  contract when the balance changes the block number that the change
246       //  occurred is also included in the map
247     mapping (address => Checkpoint[]) balances;
248 
249       // Tracks the history of the `totalSupply` of the reputation
250     Checkpoint[] totalSupplyHistory;
251 
252     /// @notice Constructor to create a Reputation
253     constructor(
254     ) public
255     {
256     }
257 
258     /// @dev This function makes it easy to get the total number of reputation
259     /// @return The total number of reputation
260     function totalSupply() public view returns (uint256) {
261         return totalSupplyAt(block.number);
262     }
263 
264   ////////////////
265   // Query balance and totalSupply in History
266   ////////////////
267     /**
268     * @dev return the reputation amount of a given owner
269     * @param _owner an address of the owner which we want to get his reputation
270     */
271     function balanceOf(address _owner) public view returns (uint256 balance) {
272         return balanceOfAt(_owner, block.number);
273     }
274 
275       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
276       /// @param _owner The address from which the balance will be retrieved
277       /// @param _blockNumber The block number when the balance is queried
278       /// @return The balance at `_blockNumber`
279     function balanceOfAt(address _owner, uint256 _blockNumber)
280     public view returns (uint256)
281     {
282         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
283             return 0;
284           // This will return the expected balance during normal situations
285         } else {
286             return getValueAt(balances[_owner], _blockNumber);
287         }
288     }
289 
290       /// @notice Total amount of reputation at a specific `_blockNumber`.
291       /// @param _blockNumber The block number when the totalSupply is queried
292       /// @return The total amount of reputation at `_blockNumber`
293     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
294         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
295             return 0;
296           // This will return the expected totalSupply during normal situations
297         } else {
298             return getValueAt(totalSupplyHistory, _blockNumber);
299         }
300     }
301 
302       /// @notice Generates `_amount` reputation that are assigned to `_owner`
303       /// @param _user The address that will be assigned the new reputation
304       /// @param _amount The quantity of reputation generated
305       /// @return True if the reputation are generated correctly
306     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
307         uint256 curTotalSupply = totalSupply();
308         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
309         uint256 previousBalanceTo = balanceOf(_user);
310         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
311         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
312         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
313         emit Mint(_user, _amount);
314         return true;
315     }
316 
317       /// @notice Burns `_amount` reputation from `_owner`
318       /// @param _user The address that will lose the reputation
319       /// @param _amount The quantity of reputation to burn
320       /// @return True if the reputation are burned correctly
321     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
322         uint256 curTotalSupply = totalSupply();
323         uint256 amountBurned = _amount;
324         uint256 previousBalanceFrom = balanceOf(_user);
325         if (previousBalanceFrom < amountBurned) {
326             amountBurned = previousBalanceFrom;
327         }
328         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
329         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
330         emit Burn(_user, amountBurned);
331         return true;
332     }
333 
334   ////////////////
335   // Internal helper functions to query and set a value in a snapshot array
336   ////////////////
337 
338       /// @dev `getValueAt` retrieves the number of reputation at a given block number
339       /// @param checkpoints The history of values being queried
340       /// @param _block The block number to retrieve the value at
341       /// @return The number of reputation being queried
342     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
343         if (checkpoints.length == 0) {
344             return 0;
345         }
346 
347           // Shortcut for the actual value
348         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
349             return checkpoints[checkpoints.length-1].value;
350         }
351         if (_block < checkpoints[0].fromBlock) {
352             return 0;
353         }
354 
355           // Binary search of the value in the array
356         uint256 min = 0;
357         uint256 max = checkpoints.length-1;
358         while (max > min) {
359             uint256 mid = (max + min + 1) / 2;
360             if (checkpoints[mid].fromBlock<=_block) {
361                 min = mid;
362             } else {
363                 max = mid-1;
364             }
365         }
366         return checkpoints[min].value;
367     }
368 
369       /// @dev `updateValueAtNow` used to update the `balances` map and the
370       ///  `totalSupplyHistory`
371       /// @param checkpoints The history of data being updated
372       /// @param _value The new number of reputation
373     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
374         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
375         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
376             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
377             newCheckPoint.fromBlock = uint128(block.number);
378             newCheckPoint.value = uint128(_value);
379         } else {
380             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
381             oldCheckPoint.value = uint128(_value);
382         }
383     }
384 }
385 
386 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
387 
388 pragma solidity ^0.5.0;
389 
390 /**
391  * @title SafeMath
392  * @dev Unsigned math operations with safety checks that revert on error
393  */
394 library SafeMath {
395     /**
396     * @dev Multiplies two unsigned integers, reverts on overflow.
397     */
398     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
399         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
400         // benefit is lost if 'b' is also tested.
401         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
402         if (a == 0) {
403             return 0;
404         }
405 
406         uint256 c = a * b;
407         require(c / a == b);
408 
409         return c;
410     }
411 
412     /**
413     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
414     */
415     function div(uint256 a, uint256 b) internal pure returns (uint256) {
416         // Solidity only automatically asserts when dividing by 0
417         require(b > 0);
418         uint256 c = a / b;
419         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
420 
421         return c;
422     }
423 
424     /**
425     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
426     */
427     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
428         require(b <= a);
429         uint256 c = a - b;
430 
431         return c;
432     }
433 
434     /**
435     * @dev Adds two unsigned integers, reverts on overflow.
436     */
437     function add(uint256 a, uint256 b) internal pure returns (uint256) {
438         uint256 c = a + b;
439         require(c >= a);
440 
441         return c;
442     }
443 
444     /**
445     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
446     * reverts when dividing by zero.
447     */
448     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
449         require(b != 0);
450         return a % b;
451     }
452 }
453 
454 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
455 
456 pragma solidity ^0.5.0;
457 
458 
459 
460 /**
461  * @title Standard ERC20 token
462  *
463  * @dev Implementation of the basic standard token.
464  * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
465  * Originally based on code by FirstBlood:
466  * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
467  *
468  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for
469  * all accounts just by listening to said events. Note that this isn't required by the specification, and other
470  * compliant implementations may not do it.
471  */
472 contract ERC20 is IERC20 {
473     using SafeMath for uint256;
474 
475     mapping (address => uint256) private _balances;
476 
477     mapping (address => mapping (address => uint256)) private _allowed;
478 
479     uint256 private _totalSupply;
480 
481     /**
482     * @dev Total number of tokens in existence
483     */
484     function totalSupply() public view returns (uint256) {
485         return _totalSupply;
486     }
487 
488     /**
489     * @dev Gets the balance of the specified address.
490     * @param owner The address to query the balance of.
491     * @return An uint256 representing the amount owned by the passed address.
492     */
493     function balanceOf(address owner) public view returns (uint256) {
494         return _balances[owner];
495     }
496 
497     /**
498      * @dev Function to check the amount of tokens that an owner allowed to a spender.
499      * @param owner address The address which owns the funds.
500      * @param spender address The address which will spend the funds.
501      * @return A uint256 specifying the amount of tokens still available for the spender.
502      */
503     function allowance(address owner, address spender) public view returns (uint256) {
504         return _allowed[owner][spender];
505     }
506 
507     /**
508     * @dev Transfer token for a specified address
509     * @param to The address to transfer to.
510     * @param value The amount to be transferred.
511     */
512     function transfer(address to, uint256 value) public returns (bool) {
513         _transfer(msg.sender, to, value);
514         return true;
515     }
516 
517     /**
518      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
519      * Beware that changing an allowance with this method brings the risk that someone may use both the old
520      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
521      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
522      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
523      * @param spender The address which will spend the funds.
524      * @param value The amount of tokens to be spent.
525      */
526     function approve(address spender, uint256 value) public returns (bool) {
527         require(spender != address(0));
528 
529         _allowed[msg.sender][spender] = value;
530         emit Approval(msg.sender, spender, value);
531         return true;
532     }
533 
534     /**
535      * @dev Transfer tokens from one address to another.
536      * Note that while this function emits an Approval event, this is not required as per the specification,
537      * and other compliant implementations may not emit the event.
538      * @param from address The address which you want to send tokens from
539      * @param to address The address which you want to transfer to
540      * @param value uint256 the amount of tokens to be transferred
541      */
542     function transferFrom(address from, address to, uint256 value) public returns (bool) {
543         _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
544         _transfer(from, to, value);
545         emit Approval(from, msg.sender, _allowed[from][msg.sender]);
546         return true;
547     }
548 
549     /**
550      * @dev Increase the amount of tokens that an owner allowed to a spender.
551      * approve should be called when allowed_[_spender] == 0. To increment
552      * allowed value is better to use this function to avoid 2 calls (and wait until
553      * the first transaction is mined)
554      * From MonolithDAO Token.sol
555      * Emits an Approval event.
556      * @param spender The address which will spend the funds.
557      * @param addedValue The amount of tokens to increase the allowance by.
558      */
559     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
560         require(spender != address(0));
561 
562         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
563         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
564         return true;
565     }
566 
567     /**
568      * @dev Decrease the amount of tokens that an owner allowed to a spender.
569      * approve should be called when allowed_[_spender] == 0. To decrement
570      * allowed value is better to use this function to avoid 2 calls (and wait until
571      * the first transaction is mined)
572      * From MonolithDAO Token.sol
573      * Emits an Approval event.
574      * @param spender The address which will spend the funds.
575      * @param subtractedValue The amount of tokens to decrease the allowance by.
576      */
577     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
578         require(spender != address(0));
579 
580         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
581         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
582         return true;
583     }
584 
585     /**
586     * @dev Transfer token for a specified addresses
587     * @param from The address to transfer from.
588     * @param to The address to transfer to.
589     * @param value The amount to be transferred.
590     */
591     function _transfer(address from, address to, uint256 value) internal {
592         require(to != address(0));
593 
594         _balances[from] = _balances[from].sub(value);
595         _balances[to] = _balances[to].add(value);
596         emit Transfer(from, to, value);
597     }
598 
599     /**
600      * @dev Internal function that mints an amount of the token and assigns it to
601      * an account. This encapsulates the modification of balances such that the
602      * proper events are emitted.
603      * @param account The account that will receive the created tokens.
604      * @param value The amount that will be created.
605      */
606     function _mint(address account, uint256 value) internal {
607         require(account != address(0));
608 
609         _totalSupply = _totalSupply.add(value);
610         _balances[account] = _balances[account].add(value);
611         emit Transfer(address(0), account, value);
612     }
613 
614     /**
615      * @dev Internal function that burns an amount of the token of a given
616      * account.
617      * @param account The account whose tokens will be burnt.
618      * @param value The amount that will be burnt.
619      */
620     function _burn(address account, uint256 value) internal {
621         require(account != address(0));
622 
623         _totalSupply = _totalSupply.sub(value);
624         _balances[account] = _balances[account].sub(value);
625         emit Transfer(account, address(0), value);
626     }
627 
628     /**
629      * @dev Internal function that burns an amount of the token of a given
630      * account, deducting from the sender's allowance for said account. Uses the
631      * internal burn function.
632      * Emits an Approval event (reflecting the reduced allowance).
633      * @param account The account whose tokens will be burnt.
634      * @param value The amount that will be burnt.
635      */
636     function _burnFrom(address account, uint256 value) internal {
637         _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
638         _burn(account, value);
639         emit Approval(account, msg.sender, _allowed[account][msg.sender]);
640     }
641 }
642 
643 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
644 
645 pragma solidity ^0.5.0;
646 
647 
648 /**
649  * @title Burnable Token
650  * @dev Token that can be irreversibly burned (destroyed).
651  */
652 contract ERC20Burnable is ERC20 {
653     /**
654      * @dev Burns a specific amount of tokens.
655      * @param value The amount of token to be burned.
656      */
657     function burn(uint256 value) public {
658         _burn(msg.sender, value);
659     }
660 
661     /**
662      * @dev Burns a specific amount of tokens from the target address and decrements allowance
663      * @param from address The address which you want to send tokens from
664      * @param value uint256 The amount of token to be burned
665      */
666     function burnFrom(address from, uint256 value) public {
667         _burnFrom(from, value);
668     }
669 }
670 
671 // File: contracts/controller/DAOToken.sol
672 
673 pragma solidity ^0.5.4;
674 
675 
676 
677 
678 
679 /**
680  * @title DAOToken, base on zeppelin contract.
681  * @dev ERC20 compatible token. It is a mintable, burnable token.
682  */
683 
684 contract DAOToken is ERC20, ERC20Burnable, Ownable {
685 
686     string public name;
687     string public symbol;
688     // solhint-disable-next-line const-name-snakecase
689     uint8 public constant decimals = 18;
690     uint256 public cap;
691 
692     /**
693     * @dev Constructor
694     * @param _name - token name
695     * @param _symbol - token symbol
696     * @param _cap - token cap - 0 value means no cap
697     */
698     constructor(string memory _name, string memory _symbol, uint256 _cap)
699     public {
700         name = _name;
701         symbol = _symbol;
702         cap = _cap;
703     }
704 
705     /**
706      * @dev Function to mint tokens
707      * @param _to The address that will receive the minted tokens.
708      * @param _amount The amount of tokens to mint.
709      */
710     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
711         if (cap > 0)
712             require(totalSupply().add(_amount) <= cap);
713         _mint(_to, _amount);
714         return true;
715     }
716 }
717 
718 // File: openzeppelin-solidity/contracts/utils/Address.sol
719 
720 pragma solidity ^0.5.0;
721 
722 /**
723  * Utility library of inline functions on addresses
724  */
725 library Address {
726     /**
727      * Returns whether the target address is a contract
728      * @dev This function will return false if invoked during the constructor of a contract,
729      * as the code is not actually created until after the constructor finishes.
730      * @param account address of the account to check
731      * @return whether the target address is a contract
732      */
733     function isContract(address account) internal view returns (bool) {
734         uint256 size;
735         // XXX Currently there is no better way to check if there is a contract in an address
736         // than to check the size of the code at that address.
737         // See https://ethereum.stackexchange.com/a/14016/36603
738         // for more details about how this works.
739         // TODO Check this again before the Serenity release, because all addresses will be
740         // contracts then.
741         // solhint-disable-next-line no-inline-assembly
742         assembly { size := extcodesize(account) }
743         return size > 0;
744     }
745 }
746 
747 // File: contracts/libs/SafeERC20.sol
748 
749 /*
750 
751 SafeERC20 by daostack.
752 The code is based on a fix by SECBIT Team.
753 
754 USE WITH CAUTION & NO WARRANTY
755 
756 REFERENCE & RELATED READING
757 - https://github.com/ethereum/solidity/issues/4116
758 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
759 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
760 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
761 
762 */
763 pragma solidity ^0.5.4;
764 
765 
766 
767 library SafeERC20 {
768     using Address for address;
769 
770     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
771     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
772     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
773 
774     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
775 
776         // Must be a contract addr first!
777         require(_erc20Addr.isContract());
778 
779         (bool success, bytes memory returnValue) =
780         // solhint-disable-next-line avoid-low-level-calls
781         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
782         // call return false when something wrong
783         require(success);
784         //check return value
785         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
786     }
787 
788     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
789 
790         // Must be a contract addr first!
791         require(_erc20Addr.isContract());
792 
793         (bool success, bytes memory returnValue) =
794         // solhint-disable-next-line avoid-low-level-calls
795         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
796         // call return false when something wrong
797         require(success);
798         //check return value
799         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
800     }
801 
802     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
803 
804         // Must be a contract addr first!
805         require(_erc20Addr.isContract());
806 
807         // safeApprove should only be called when setting an initial allowance,
808         // or when resetting it to zero.
809         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
810 
811         (bool success, bytes memory returnValue) =
812         // solhint-disable-next-line avoid-low-level-calls
813         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
814         // call return false when something wrong
815         require(success);
816         //check return value
817         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
818     }
819 }
820 
821 // File: contracts/controller/Avatar.sol
822 
823 pragma solidity ^0.5.4;
824 
825 
826 
827 
828 
829 
830 
831 /**
832  * @title An Avatar holds tokens, reputation and ether for a controller
833  */
834 contract Avatar is Ownable {
835     using SafeERC20 for address;
836 
837     string public orgName;
838     DAOToken public nativeToken;
839     Reputation public nativeReputation;
840 
841     event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
842     event SendEther(uint256 _amountInWei, address indexed _to);
843     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
844     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
845     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
846     event ReceiveEther(address indexed _sender, uint256 _value);
847     event MetaData(string _metaData);
848 
849     /**
850     * @dev the constructor takes organization name, native token and reputation system
851     and creates an avatar for a controller
852     */
853     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
854         orgName = _orgName;
855         nativeToken = _nativeToken;
856         nativeReputation = _nativeReputation;
857     }
858 
859     /**
860     * @dev enables an avatar to receive ethers
861     */
862     function() external payable {
863         emit ReceiveEther(msg.sender, msg.value);
864     }
865 
866     /**
867     * @dev perform a generic call to an arbitrary contract
868     * @param _contract  the contract's address to call
869     * @param _data ABI-encoded contract call to call `_contract` address.
870     * @param _value value (ETH) to transfer with the transaction
871     * @return bool    success or fail
872     *         bytes - the return bytes of the called contract's function.
873     */
874     function genericCall(address _contract, bytes memory _data, uint256 _value)
875     public
876     onlyOwner
877     returns(bool success, bytes memory returnValue) {
878       // solhint-disable-next-line avoid-call-value
879         (success, returnValue) = _contract.call.value(_value)(_data);
880         emit GenericCall(_contract, _data, _value, success);
881     }
882 
883     /**
884     * @dev send ethers from the avatar's wallet
885     * @param _amountInWei amount to send in Wei units
886     * @param _to send the ethers to this address
887     * @return bool which represents success
888     */
889     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
890         _to.transfer(_amountInWei);
891         emit SendEther(_amountInWei, _to);
892         return true;
893     }
894 
895     /**
896     * @dev external token transfer
897     * @param _externalToken the token contract
898     * @param _to the destination address
899     * @param _value the amount of tokens to transfer
900     * @return bool which represents success
901     */
902     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
903     public onlyOwner returns(bool)
904     {
905         address(_externalToken).safeTransfer(_to, _value);
906         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
907         return true;
908     }
909 
910     /**
911     * @dev external token transfer from a specific account
912     * @param _externalToken the token contract
913     * @param _from the account to spend token from
914     * @param _to the destination address
915     * @param _value the amount of tokens to transfer
916     * @return bool which represents success
917     */
918     function externalTokenTransferFrom(
919         IERC20 _externalToken,
920         address _from,
921         address _to,
922         uint256 _value
923     )
924     public onlyOwner returns(bool)
925     {
926         address(_externalToken).safeTransferFrom(_from, _to, _value);
927         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
928         return true;
929     }
930 
931     /**
932     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
933     *      on behalf of msg.sender.
934     * @param _externalToken the address of the Token Contract
935     * @param _spender address
936     * @param _value the amount of ether (in Wei) which the approval is referring to.
937     * @return bool which represents a success
938     */
939     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
940     public onlyOwner returns(bool)
941     {
942         address(_externalToken).safeApprove(_spender, _value);
943         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
944         return true;
945     }
946 
947     /**
948     * @dev metaData emits an event with a string, should contain the hash of some meta data.
949     * @param _metaData a string representing a hash of the meta data
950     * @return bool which represents a success
951     */
952     function metaData(string memory _metaData) public onlyOwner returns(bool) {
953         emit MetaData(_metaData);
954         return true;
955     }
956 
957 
958 }
959 
960 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
961 
962 pragma solidity ^0.5.4;
963 
964 
965 contract UniversalSchemeInterface {
966 
967     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
968     
969 }
970 
971 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
972 
973 pragma solidity ^0.5.4;
974 
975 
976 contract GlobalConstraintInterface {
977 
978     enum CallPhase { Pre, Post, PreAndPost }
979 
980     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
981     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
982     /**
983      * @dev when return if this globalConstraints is pre, post or both.
984      * @return CallPhase enum indication  Pre, Post or PreAndPost.
985      */
986     function when() public returns(CallPhase);
987 }
988 
989 // File: contracts/controller/ControllerInterface.sol
990 
991 pragma solidity ^0.5.4;
992 
993 
994 
995 /**
996  * @title Controller contract
997  * @dev A controller controls the organizations tokens ,reputation and avatar.
998  * It is subject to a set of schemes and constraints that determine its behavior.
999  * Each scheme has it own parameters and operation permissions.
1000  */
1001 interface ControllerInterface {
1002 
1003     /**
1004      * @dev Mint `_amount` of reputation that are assigned to `_to` .
1005      * @param  _amount amount of reputation to mint
1006      * @param _to beneficiary address
1007      * @return bool which represents a success
1008     */
1009     function mintReputation(uint256 _amount, address _to, address _avatar)
1010     external
1011     returns(bool);
1012 
1013     /**
1014      * @dev Burns `_amount` of reputation from `_from`
1015      * @param _amount amount of reputation to burn
1016      * @param _from The address that will lose the reputation
1017      * @return bool which represents a success
1018      */
1019     function burnReputation(uint256 _amount, address _from, address _avatar)
1020     external
1021     returns(bool);
1022 
1023     /**
1024      * @dev mint tokens .
1025      * @param  _amount amount of token to mint
1026      * @param _beneficiary beneficiary address
1027      * @param _avatar address
1028      * @return bool which represents a success
1029      */
1030     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1031     external
1032     returns(bool);
1033 
1034   /**
1035    * @dev register or update a scheme
1036    * @param _scheme the address of the scheme
1037    * @param _paramsHash a hashed configuration of the usage of the scheme
1038    * @param _permissions the permissions the new scheme will have
1039    * @param _avatar address
1040    * @return bool which represents a success
1041    */
1042     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1043     external
1044     returns(bool);
1045 
1046     /**
1047      * @dev unregister a scheme
1048      * @param _avatar address
1049      * @param _scheme the address of the scheme
1050      * @return bool which represents a success
1051      */
1052     function unregisterScheme(address _scheme, address _avatar)
1053     external
1054     returns(bool);
1055 
1056     /**
1057      * @dev unregister the caller's scheme
1058      * @param _avatar address
1059      * @return bool which represents a success
1060      */
1061     function unregisterSelf(address _avatar) external returns(bool);
1062 
1063     /**
1064      * @dev add or update Global Constraint
1065      * @param _globalConstraint the address of the global constraint to be added.
1066      * @param _params the constraint parameters hash.
1067      * @param _avatar the avatar of the organization
1068      * @return bool which represents a success
1069      */
1070     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1071     external returns(bool);
1072 
1073     /**
1074      * @dev remove Global Constraint
1075      * @param _globalConstraint the address of the global constraint to be remove.
1076      * @param _avatar the organization avatar.
1077      * @return bool which represents a success
1078      */
1079     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1080     external  returns(bool);
1081 
1082   /**
1083     * @dev upgrade the Controller
1084     *      The function will trigger an event 'UpgradeController'.
1085     * @param  _newController the address of the new controller.
1086     * @param _avatar address
1087     * @return bool which represents a success
1088     */
1089     function upgradeController(address _newController, Avatar _avatar)
1090     external returns(bool);
1091 
1092     /**
1093     * @dev perform a generic call to an arbitrary contract
1094     * @param _contract  the contract's address to call
1095     * @param _data ABI-encoded contract call to call `_contract` address.
1096     * @param _avatar the controller's avatar address
1097     * @param _value value (ETH) to transfer with the transaction
1098     * @return bool -success
1099     *         bytes  - the return value of the called _contract's function.
1100     */
1101     function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)
1102     external
1103     returns(bool, bytes memory);
1104 
1105   /**
1106    * @dev send some ether
1107    * @param _amountInWei the amount of ether (in Wei) to send
1108    * @param _to address of the beneficiary
1109    * @param _avatar address
1110    * @return bool which represents a success
1111    */
1112     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1113     external returns(bool);
1114 
1115     /**
1116     * @dev send some amount of arbitrary ERC20 Tokens
1117     * @param _externalToken the address of the Token Contract
1118     * @param _to address of the beneficiary
1119     * @param _value the amount of ether (in Wei) to send
1120     * @param _avatar address
1121     * @return bool which represents a success
1122     */
1123     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1124     external
1125     returns(bool);
1126 
1127     /**
1128     * @dev transfer token "from" address "to" address
1129     *      One must to approve the amount of tokens which can be spend from the
1130     *      "from" account.This can be done using externalTokenApprove.
1131     * @param _externalToken the address of the Token Contract
1132     * @param _from address of the account to send from
1133     * @param _to address of the beneficiary
1134     * @param _value the amount of ether (in Wei) to send
1135     * @param _avatar address
1136     * @return bool which represents a success
1137     */
1138     function externalTokenTransferFrom(
1139     IERC20 _externalToken,
1140     address _from,
1141     address _to,
1142     uint256 _value,
1143     Avatar _avatar)
1144     external
1145     returns(bool);
1146 
1147     /**
1148     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1149     *      on behalf of msg.sender.
1150     * @param _externalToken the address of the Token Contract
1151     * @param _spender address
1152     * @param _value the amount of ether (in Wei) which the approval is referring to.
1153     * @return bool which represents a success
1154     */
1155     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1156     external
1157     returns(bool);
1158 
1159     /**
1160     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1161     * @param _metaData a string representing a hash of the meta data
1162     * @param _avatar Avatar
1163     * @return bool which represents a success
1164     */
1165     function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);
1166 
1167     /**
1168      * @dev getNativeReputation
1169      * @param _avatar the organization avatar.
1170      * @return organization native reputation
1171      */
1172     function getNativeReputation(address _avatar)
1173     external
1174     view
1175     returns(address);
1176 
1177     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1178 
1179     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1180 
1181     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1182 
1183     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1184 
1185     /**
1186      * @dev globalConstraintsCount return the global constraint pre and post count
1187      * @return uint256 globalConstraintsPre count.
1188      * @return uint256 globalConstraintsPost count.
1189      */
1190     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1191 
1192     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1193 }
1194 
1195 // File: contracts/universalSchemes/UniversalScheme.sol
1196 
1197 pragma solidity ^0.5.4;
1198 
1199 
1200 
1201 
1202 
1203 contract UniversalScheme is UniversalSchemeInterface {
1204     /**
1205     *  @dev get the parameters for the current scheme from the controller
1206     */
1207     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1208         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1209         "scheme is not registered");
1210         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1211     }
1212 }
1213 
1214 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1215 
1216 pragma solidity ^0.5.0;
1217 
1218 /**
1219  * @title Elliptic curve signature operations
1220  * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
1221  * TODO Remove this library once solidity supports passing a signature to ecrecover.
1222  * See https://github.com/ethereum/solidity/issues/864
1223  */
1224 
1225 library ECDSA {
1226     /**
1227      * @dev Recover signer address from a message by using their signature
1228      * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
1229      * @param signature bytes signature, the signature is generated using web3.eth.sign()
1230      */
1231     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1232         bytes32 r;
1233         bytes32 s;
1234         uint8 v;
1235 
1236         // Check the signature length
1237         if (signature.length != 65) {
1238             return (address(0));
1239         }
1240 
1241         // Divide the signature in r, s and v variables
1242         // ecrecover takes the signature parameters, and the only way to get them
1243         // currently is to use assembly.
1244         // solhint-disable-next-line no-inline-assembly
1245         assembly {
1246             r := mload(add(signature, 0x20))
1247             s := mload(add(signature, 0x40))
1248             v := byte(0, mload(add(signature, 0x60)))
1249         }
1250 
1251         // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
1252         if (v < 27) {
1253             v += 27;
1254         }
1255 
1256         // If the version is correct return the signer address
1257         if (v != 27 && v != 28) {
1258             return (address(0));
1259         } else {
1260             return ecrecover(hash, v, r, s);
1261         }
1262     }
1263 
1264     /**
1265      * toEthSignedMessageHash
1266      * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
1267      * and hash the result
1268      */
1269     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1270         // 32 is the length in bytes of hash,
1271         // enforced by the type signature above
1272         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1273     }
1274 }
1275 
1276 // File: @daostack/infra/contracts/libs/RealMath.sol
1277 
1278 pragma solidity ^0.5.4;
1279 
1280 /**
1281  * RealMath: fixed-point math library, based on fractional and integer parts.
1282  * Using uint256 as real216x40, which isn't in Solidity yet.
1283  * Internally uses the wider uint256 for some math.
1284  *
1285  * Note that for addition, subtraction, and mod (%), you should just use the
1286  * built-in Solidity operators. Functions for these operations are not provided.
1287  *
1288  */
1289 
1290 
1291 library RealMath {
1292 
1293     /**
1294      * How many total bits are there?
1295      */
1296     uint256 constant private REAL_BITS = 256;
1297 
1298     /**
1299      * How many fractional bits are there?
1300      */
1301     uint256 constant private REAL_FBITS = 40;
1302 
1303     /**
1304      * What's the first non-fractional bit
1305      */
1306     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1307 
1308     /**
1309      * Raise a real number to any positive integer power
1310      */
1311     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1312 
1313         uint256 tempRealBase = realBase;
1314         uint256 tempExponent = exponent;
1315 
1316         // Start with the 0th power
1317         uint256 realResult = REAL_ONE;
1318         while (tempExponent != 0) {
1319             // While there are still bits set
1320             if ((tempExponent & 0x1) == 0x1) {
1321                 // If the low bit is set, multiply in the (many-times-squared) base
1322                 realResult = mul(realResult, tempRealBase);
1323             }
1324                 // Shift off the low bit
1325             tempExponent = tempExponent >> 1;
1326             if (tempExponent != 0) {
1327                 // Do the squaring
1328                 tempRealBase = mul(tempRealBase, tempRealBase);
1329             }
1330         }
1331 
1332         // Return the final result.
1333         return realResult;
1334     }
1335 
1336     /**
1337      * Create a real from a rational fraction.
1338      */
1339     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1340         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1341     }
1342 
1343     /**
1344      * Multiply one real by another. Truncates overflows.
1345      */
1346     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1347         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1348         // So we just have to clip off the extra REAL_FBITS fractional bits.
1349         uint256 res = realA * realB;
1350         require(res/realA == realB, "RealMath mul overflow");
1351         return (res >> REAL_FBITS);
1352     }
1353 
1354     /**
1355      * Divide one real by another real. Truncates overflows.
1356      */
1357     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1358         // We use the reverse of the multiplication trick: convert numerator from
1359         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1360         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1361     }
1362 
1363 }
1364 
1365 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
1366 
1367 pragma solidity ^0.5.4;
1368 
1369 interface ProposalExecuteInterface {
1370     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
1371 }
1372 
1373 // File: openzeppelin-solidity/contracts/math/Math.sol
1374 
1375 pragma solidity ^0.5.0;
1376 
1377 /**
1378  * @title Math
1379  * @dev Assorted math operations
1380  */
1381 library Math {
1382     /**
1383     * @dev Returns the largest of two numbers.
1384     */
1385     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1386         return a >= b ? a : b;
1387     }
1388 
1389     /**
1390     * @dev Returns the smallest of two numbers.
1391     */
1392     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1393         return a < b ? a : b;
1394     }
1395 
1396     /**
1397     * @dev Calculates the average of two numbers. Since these are integers,
1398     * averages of an even and odd number cannot be represented, and will be
1399     * rounded down.
1400     */
1401     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1402         // (a + b) / 2 can overflow, so we distribute
1403         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1404     }
1405 }
1406 
1407 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
1408 
1409 pragma solidity ^0.5.4;
1410 
1411 
1412 
1413 
1414 
1415 
1416 
1417 
1418 
1419 
1420 
1421 /**
1422  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1423  */
1424 contract GenesisProtocolLogic is IntVoteInterface {
1425     using SafeMath for uint256;
1426     using Math for uint256;
1427     using RealMath for uint216;
1428     using RealMath for uint256;
1429     using Address for address;
1430 
1431     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1432     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1433 
1434     //Organization's parameters
1435     struct Parameters {
1436         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1437         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1438         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1439         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1440                                           //to be in an preparation state (stable) before boosted.
1441         uint256 thresholdConst; //constant  for threshold calculation .
1442                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1443         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1444                                    //in the threshold calculation to prevent overflow
1445         uint256 quietEndingPeriod; //quite ending period
1446         uint256 proposingRepReward;//proposer reputation reward.
1447         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1448                                           //voters lose votersReputationLossRatio% of their reputation.
1449         uint256 minimumDaoBounty;
1450         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1451                                //(daoBountyConst * averageBoostDownstakes)/100 .
1452         uint256 activationTime;//the point in time after which proposals can be created.
1453         //if this address is set so only this address is allowed to vote of behalf of someone else.
1454         address voteOnBehalf;
1455     }
1456 
1457     struct Voter {
1458         uint256 vote; // YES(1) ,NO(2)
1459         uint256 reputation; // amount of voter's reputation
1460         bool preBoosted;
1461     }
1462 
1463     struct Staker {
1464         uint256 vote; // YES(1) ,NO(2)
1465         uint256 amount; // amount of staker's stake
1466         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1467     }
1468 
1469     struct Proposal {
1470         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1471         address callbacks;    // should fulfill voting callbacks interface.
1472         ProposalState state;
1473         uint256 winningVote; //the winning vote.
1474         address proposer;
1475         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1476         uint256 currentBoostedVotePeriodLimit;
1477         bytes32 paramsHash;
1478         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1479         uint256 daoBounty;
1480         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1481         uint256 confidenceThreshold;
1482         uint256 secondsFromTimeOutTillExecuteBoosted;
1483         uint[3] times; //times[0] - submittedTime
1484                        //times[1] - boostedPhaseTime
1485                        //times[2] -preBoostedPhaseTime;
1486         bool daoRedeemItsWinnings;
1487         //      vote      reputation
1488         mapping(uint256   =>  uint256    ) votes;
1489         //      vote      reputation
1490         mapping(uint256   =>  uint256    ) preBoostedVotes;
1491         //      address     voter
1492         mapping(address =>  Voter    ) voters;
1493         //      vote        stakes
1494         mapping(uint256   =>  uint256    ) stakes;
1495         //      address  staker
1496         mapping(address  => Staker   ) stakers;
1497     }
1498 
1499     event Stake(bytes32 indexed _proposalId,
1500         address indexed _organization,
1501         address indexed _staker,
1502         uint256 _vote,
1503         uint256 _amount
1504     );
1505 
1506     event Redeem(bytes32 indexed _proposalId,
1507         address indexed _organization,
1508         address indexed _beneficiary,
1509         uint256 _amount
1510     );
1511 
1512     event RedeemDaoBounty(bytes32 indexed _proposalId,
1513         address indexed _organization,
1514         address indexed _beneficiary,
1515         uint256 _amount
1516     );
1517 
1518     event RedeemReputation(bytes32 indexed _proposalId,
1519         address indexed _organization,
1520         address indexed _beneficiary,
1521         uint256 _amount
1522     );
1523 
1524     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1525     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1526     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1527     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
1528 
1529     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1530     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1531     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1532            //organizationId => organization
1533     mapping(bytes32        => address     ) public organizations;
1534           //organizationId => averageBoostDownstakes
1535     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1536     uint256 constant public NUM_OF_CHOICES = 2;
1537     uint256 constant public NO = 2;
1538     uint256 constant public YES = 1;
1539     uint256 public proposalsCnt; // Total number of proposals
1540     IERC20 public stakingToken;
1541     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1542     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1543 
1544     /**
1545      * @dev Constructor
1546      */
1547     constructor(IERC20 _stakingToken) public {
1548       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1549       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1550       //If such contract address does not exist in the network (e.g ganache)
1551       //the contract will use the _stakingToken param as the
1552       //staking token address.
1553         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1554             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1555         } else {
1556             stakingToken = _stakingToken;
1557         }
1558     }
1559 
1560   /**
1561    * @dev Check that the proposal is votable
1562    * a proposal is votable if it is in one of the following states:
1563    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1564    */
1565     modifier votable(bytes32 _proposalId) {
1566         require(_isVotable(_proposalId));
1567         _;
1568     }
1569 
1570     /**
1571      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1572      * generated by calculating keccak256 of a incremented counter.
1573      * @param _paramsHash parameters hash
1574      * @param _proposer address
1575      * @param _organization address
1576      */
1577     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1578         external
1579         returns(bytes32)
1580     {
1581       // solhint-disable-next-line not-rely-on-time
1582         require(now > parameters[_paramsHash].activationTime, "not active yet");
1583         //Check parameters existence.
1584         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1585         // Generate a unique ID:
1586         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1587         proposalsCnt = proposalsCnt.add(1);
1588          // Open proposal:
1589         Proposal memory proposal;
1590         proposal.callbacks = msg.sender;
1591         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1592 
1593         proposal.state = ProposalState.Queued;
1594         // solhint-disable-next-line not-rely-on-time
1595         proposal.times[0] = now;//submitted time
1596         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1597         proposal.proposer = _proposer;
1598         proposal.winningVote = NO;
1599         proposal.paramsHash = _paramsHash;
1600         if (organizations[proposal.organizationId] == address(0)) {
1601             if (_organization == address(0)) {
1602                 organizations[proposal.organizationId] = msg.sender;
1603             } else {
1604                 organizations[proposal.organizationId] = _organization;
1605             }
1606         }
1607         //calc dao bounty
1608         uint256 daoBounty =
1609         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1610         proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);
1611         proposals[proposalId] = proposal;
1612         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1613 
1614         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1615         return proposalId;
1616     }
1617 
1618     /**
1619       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
1620       * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.
1621       * P = t/150, where t is the number of seconds passed since the the proposal's timeout.
1622       * P is capped by 10%.
1623       * @param _proposalId the id of the proposal
1624       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1625      */
1626     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1627         Proposal storage proposal = proposals[_proposalId];
1628         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
1629         "proposal state in not Boosted nor QuietEndingPeriod");
1630         require(_execute(_proposalId), "proposal need to expire");
1631 
1632         proposal.secondsFromTimeOutTillExecuteBoosted =
1633         // solhint-disable-next-line not-rely-on-time
1634         now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));
1635 
1636         expirationCallBounty = calcExecuteCallBounty(_proposalId);
1637         proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);
1638         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1639         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1640     }
1641 
1642     /**
1643      * @dev hash the parameters, save them if necessary, and return the hash value
1644      * @param _params a parameters array
1645      *    _params[0] - _queuedVoteRequiredPercentage,
1646      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1647      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1648      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1649      *                  state (stable) before boosted.
1650      *    _params[4] -_thresholdConst
1651      *    _params[5] -_quietEndingPeriod
1652      *    _params[6] -_proposingRepReward
1653      *    _params[7] -_votersReputationLossRatio
1654      *    _params[8] -_minimumDaoBounty
1655      *    _params[9] -_daoBountyConst
1656      *    _params[10] -_activationTime
1657      * @param _voteOnBehalf - authorized to vote on behalf of others.
1658     */
1659     function setParameters(
1660         uint[11] calldata _params, //use array here due to stack too deep issue.
1661         address _voteOnBehalf
1662     )
1663     external
1664     returns(bytes32)
1665     {
1666         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1667         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1668         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1669         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1670         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1671         require(_params[9] > 0, "daoBountyConst should be > 0");
1672 
1673         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1674         //set a limit for power for a given alpha to prevent overflow
1675         uint256 limitExponent = 172;//for alpha less or equal 2
1676         uint256 j = 2;
1677         for (uint256 i = 2000; i < 16000; i = i*2) {
1678             if ((_params[4] > i) && (_params[4] <= i*2)) {
1679                 limitExponent = limitExponent/j;
1680                 break;
1681             }
1682             j++;
1683         }
1684 
1685         parameters[paramsHash] = Parameters({
1686             queuedVoteRequiredPercentage: _params[0],
1687             queuedVotePeriodLimit: _params[1],
1688             boostedVotePeriodLimit: _params[2],
1689             preBoostedVotePeriodLimit: _params[3],
1690             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1691             limitExponentValue:limitExponent,
1692             quietEndingPeriod: _params[5],
1693             proposingRepReward: _params[6],
1694             votersReputationLossRatio:_params[7],
1695             minimumDaoBounty:_params[8],
1696             daoBountyConst:_params[9],
1697             activationTime:_params[10],
1698             voteOnBehalf:_voteOnBehalf
1699         });
1700         return paramsHash;
1701     }
1702 
1703     /**
1704      * @dev redeem a reward for a successful stake, vote or proposing.
1705      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1706      * users to redeem on behalf of someone else.
1707      * @param _proposalId the ID of the proposal
1708      * @param _beneficiary - the beneficiary address
1709      * @return rewards -
1710      *           [0] stakerTokenReward
1711      *           [1] voterReputationReward
1712      *           [2] proposerReputationReward
1713      */
1714      // solhint-disable-next-line function-max-lines,code-complexity
1715     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1716         Proposal storage proposal = proposals[_proposalId];
1717         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1718         "Proposal should be Executed or ExpiredInQueue");
1719         Parameters memory params = parameters[proposal.paramsHash];
1720         //as staker
1721         Staker storage staker = proposal.stakers[_beneficiary];
1722         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1723         uint256 totalStakesLeftAfterCallBounty =
1724         proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));
1725         if (staker.amount > 0) {
1726 
1727             if (proposal.state == ProposalState.ExpiredInQueue) {
1728                 //Stakes of a proposal that expires in Queue are sent back to stakers
1729                 rewards[0] = staker.amount;
1730             } else if (staker.vote == proposal.winningVote) {
1731                 if (staker.vote == YES) {
1732                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
1733                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
1734                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1735                     }
1736                 } else {
1737                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
1738                 }
1739             }
1740             staker.amount = 0;
1741         }
1742             //dao redeem its winnings
1743         if (proposal.daoRedeemItsWinnings == false &&
1744             _beneficiary == organizations[proposal.organizationId] &&
1745             proposal.state != ProposalState.ExpiredInQueue &&
1746             proposal.winningVote == NO) {
1747             rewards[0] =
1748             rewards[0]
1749             .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)
1750             .sub(proposal.daoBounty);
1751             proposal.daoRedeemItsWinnings = true;
1752         }
1753 
1754         //as voter
1755         Voter storage voter = proposal.voters[_beneficiary];
1756         if ((voter.reputation != 0) && (voter.preBoosted)) {
1757             if (proposal.state == ProposalState.ExpiredInQueue) {
1758               //give back reputation for the voter
1759                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1760             } else if (proposal.winningVote == voter.vote) {
1761                 uint256 lostReputation;
1762                 if (proposal.winningVote == YES) {
1763                     lostReputation = proposal.preBoostedVotes[NO];
1764                 } else {
1765                     lostReputation = proposal.preBoostedVotes[YES];
1766                 }
1767                 lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1768                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1769                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
1770             }
1771             voter.reputation = 0;
1772         }
1773         //as proposer
1774         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1775             rewards[2] = params.proposingRepReward;
1776             proposal.proposer = address(0);
1777         }
1778         if (rewards[0] != 0) {
1779             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1780             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1781             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1782         }
1783         if (rewards[1].add(rewards[2]) != 0) {
1784             VotingMachineCallbacksInterface(proposal.callbacks)
1785             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1786             emit RedeemReputation(
1787             _proposalId,
1788             organizations[proposal.organizationId],
1789             _beneficiary,
1790             rewards[1].add(rewards[2])
1791             );
1792         }
1793     }
1794 
1795     /**
1796      * @dev redeemDaoBounty a reward for a successful stake.
1797      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1798      * users to redeem on behalf of someone else.
1799      * @param _proposalId the ID of the proposal
1800      * @param _beneficiary - the beneficiary address
1801      * @return redeemedAmount - redeem token amount
1802      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1803      */
1804     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1805     public
1806     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1807         Proposal storage proposal = proposals[_proposalId];
1808         require(proposal.state == ProposalState.Executed);
1809         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1810         Staker storage staker = proposal.stakers[_beneficiary];
1811         if (
1812             (staker.amount4Bounty > 0)&&
1813             (staker.vote == proposal.winningVote)&&
1814             (proposal.winningVote == YES)&&
1815             (totalWinningStakes != 0)) {
1816             //as staker
1817                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1818             }
1819         if ((potentialAmount != 0)&&
1820             (VotingMachineCallbacksInterface(proposal.callbacks)
1821             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1822             staker.amount4Bounty = 0;
1823             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1824             require(
1825             VotingMachineCallbacksInterface(proposal.callbacks)
1826             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1827             redeemedAmount = potentialAmount;
1828             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1829         }
1830     }
1831 
1832     /**
1833       * @dev calcExecuteCallBounty calculate the execute boosted call bounty
1834       * @param _proposalId the ID of the proposal
1835       * @return uint256 executeCallBounty
1836     */
1837     function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {
1838         uint maxRewardSeconds = 1500;
1839         uint rewardSeconds =
1840         uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);
1841         return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);
1842     }
1843 
1844     /**
1845      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
1846      * @param _proposalId the ID of the proposal
1847      * @return bool true or false.
1848      */
1849     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
1850         Proposal memory proposal = proposals[_proposalId];
1851         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
1852     }
1853 
1854     /**
1855      * @dev threshold return the organization's score threshold which required by
1856      * a proposal to shift to boosted state.
1857      * This threshold is dynamically set and it depend on the number of boosted proposal.
1858      * @param _organizationId the organization identifier
1859      * @param _paramsHash the organization parameters hash
1860      * @return uint256 organization's score threshold as real number.
1861      */
1862     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
1863         uint256 power = orgBoostedProposalsCnt[_organizationId];
1864         Parameters storage params = parameters[_paramsHash];
1865 
1866         if (power > params.limitExponentValue) {
1867             power = params.limitExponentValue;
1868         }
1869 
1870         return params.thresholdConst.pow(power);
1871     }
1872 
1873   /**
1874    * @dev hashParameters returns a hash of the given parameters
1875    */
1876     function getParametersHash(
1877         uint[11] memory _params,//use array here due to stack too deep issue.
1878         address _voteOnBehalf
1879     )
1880         public
1881         pure
1882         returns(bytes32)
1883         {
1884         //double call to keccak256 to avoid deep stack issue when call with too many params.
1885         return keccak256(
1886             abi.encodePacked(
1887             keccak256(
1888             abi.encodePacked(
1889                 _params[0],
1890                 _params[1],
1891                 _params[2],
1892                 _params[3],
1893                 _params[4],
1894                 _params[5],
1895                 _params[6],
1896                 _params[7],
1897                 _params[8],
1898                 _params[9],
1899                 _params[10])
1900             ),
1901             _voteOnBehalf
1902         ));
1903     }
1904 
1905     /**
1906       * @dev execute check if the proposal has been decided, and if so, execute the proposal
1907       * @param _proposalId the id of the proposal
1908       * @return bool true - the proposal has been executed
1909       *              false - otherwise.
1910      */
1911      // solhint-disable-next-line function-max-lines,code-complexity
1912     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
1913         Proposal storage proposal = proposals[_proposalId];
1914         Parameters memory params = parameters[proposal.paramsHash];
1915         Proposal memory tmpProposal = proposal;
1916         uint256 totalReputation =
1917         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
1918         //first divide by 100 to prevent overflow
1919         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
1920         ExecutionState executionState = ExecutionState.None;
1921         uint256 averageDownstakesOfBoosted;
1922         uint256 confidenceThreshold;
1923 
1924         if (proposal.votes[proposal.winningVote] > executionBar) {
1925          // someone crossed the absolute vote execution bar.
1926             if (proposal.state == ProposalState.Queued) {
1927                 executionState = ExecutionState.QueueBarCrossed;
1928             } else if (proposal.state == ProposalState.PreBoosted) {
1929                 executionState = ExecutionState.PreBoostedBarCrossed;
1930             } else {
1931                 executionState = ExecutionState.BoostedBarCrossed;
1932             }
1933             proposal.state = ProposalState.Executed;
1934         } else {
1935             if (proposal.state == ProposalState.Queued) {
1936                 // solhint-disable-next-line not-rely-on-time
1937                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
1938                     proposal.state = ProposalState.ExpiredInQueue;
1939                     proposal.winningVote = NO;
1940                     executionState = ExecutionState.QueueTimeOut;
1941                 } else {
1942                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1943                     if (_score(_proposalId) > confidenceThreshold) {
1944                         //change proposal mode to PreBoosted mode.
1945                         proposal.state = ProposalState.PreBoosted;
1946                         // solhint-disable-next-line not-rely-on-time
1947                         proposal.times[2] = now;
1948                         proposal.confidenceThreshold = confidenceThreshold;
1949                     }
1950                 }
1951             }
1952 
1953             if (proposal.state == ProposalState.PreBoosted) {
1954                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1955               // solhint-disable-next-line not-rely-on-time
1956                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
1957                     if (_score(_proposalId) > confidenceThreshold) {
1958                         if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {
1959                          //change proposal mode to Boosted mode.
1960                             proposal.state = ProposalState.Boosted;
1961                          // solhint-disable-next-line not-rely-on-time
1962                             proposal.times[1] = now;
1963                             orgBoostedProposalsCnt[proposal.organizationId]++;
1964                          //add a value to average -> average = average + ((value - average) / nbValues)
1965                             averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1966                           // solium-disable-next-line indentation
1967                             averagesDownstakesOfBoosted[proposal.organizationId] =
1968                                 uint256(int256(averageDownstakesOfBoosted) +
1969                                 ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
1970                                 int256(orgBoostedProposalsCnt[proposal.organizationId])));
1971                         }
1972                     } else {
1973                         proposal.state = ProposalState.Queued;
1974                     }
1975                 } else { //check the Confidence level is stable
1976                     uint256 proposalScore = _score(_proposalId);
1977                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
1978                         proposal.state = ProposalState.Queued;
1979                     } else if (proposal.confidenceThreshold > proposalScore) {
1980                         proposal.confidenceThreshold = confidenceThreshold;
1981                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
1982                     }
1983                 }
1984             }
1985         }
1986 
1987         if ((proposal.state == ProposalState.Boosted) ||
1988             (proposal.state == ProposalState.QuietEndingPeriod)) {
1989             // solhint-disable-next-line not-rely-on-time
1990             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
1991                 proposal.state = ProposalState.Executed;
1992                 executionState = ExecutionState.BoostedTimeOut;
1993             }
1994         }
1995 
1996         if (executionState != ExecutionState.None) {
1997             if ((executionState == ExecutionState.BoostedTimeOut) ||
1998                 (executionState == ExecutionState.BoostedBarCrossed)) {
1999                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
2000                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
2001                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2002                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2003                 if (boostedProposals == 0) {
2004                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2005                 } else {
2006                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2007                     averagesDownstakesOfBoosted[proposal.organizationId] =
2008                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2009                 }
2010             }
2011             emit ExecuteProposal(
2012             _proposalId,
2013             organizations[proposal.organizationId],
2014             proposal.winningVote,
2015             totalReputation
2016             );
2017             emit GPExecuteProposal(_proposalId, executionState);
2018             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2019             proposal.daoBounty = proposal.daoBountyRemain;
2020         }
2021         if (tmpProposal.state != proposal.state) {
2022             emit StateChange(_proposalId, proposal.state);
2023         }
2024         return (executionState != ExecutionState.None);
2025     }
2026 
2027     /**
2028      * @dev staking function
2029      * @param _proposalId id of the proposal
2030      * @param _vote  NO(2) or YES(1).
2031      * @param _amount the betting amount
2032      * @return bool true - the proposal has been executed
2033      *              false - otherwise.
2034      */
2035     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2036         // 0 is not a valid vote.
2037         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2038         require(_amount > 0, "staking amount should be >0");
2039 
2040         if (_execute(_proposalId)) {
2041             return true;
2042         }
2043         Proposal storage proposal = proposals[_proposalId];
2044 
2045         if ((proposal.state != ProposalState.PreBoosted) &&
2046             (proposal.state != ProposalState.Queued)) {
2047             return false;
2048         }
2049 
2050         // enable to increase stake only on the previous stake vote
2051         Staker storage staker = proposal.stakers[_staker];
2052         if ((staker.amount > 0) && (staker.vote != _vote)) {
2053             return false;
2054         }
2055 
2056         uint256 amount = _amount;
2057         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2058         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2059         staker.amount = staker.amount.add(amount);
2060         //This is to prevent average downstakes calculation overflow
2061         //Note that any how GEN cap is 100000000 ether.
2062         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2063         require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),
2064                 "total stakes is too high");
2065 
2066         if (_vote == YES) {
2067             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2068         }
2069         staker.vote = _vote;
2070 
2071         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2072         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2073         return _execute(_proposalId);
2074     }
2075 
2076     /**
2077      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2078      * @param _proposalId id of the proposal
2079      * @param _voter used in case the vote is cast for someone else
2080      * @param _vote a value between 0 to and the proposal's number of choices.
2081      * @param _rep how many reputation the voter would like to stake for this vote.
2082      *         if  _rep==0 so the voter full reputation will be use.
2083      * @return true in case of proposal execution otherwise false
2084      * throws if proposal is not open or if it has been executed
2085      * NB: executes the proposal if a decision has been reached
2086      */
2087      // solhint-disable-next-line function-max-lines,code-complexity
2088     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2089         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2090         if (_execute(_proposalId)) {
2091             return true;
2092         }
2093 
2094         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2095         Proposal storage proposal = proposals[_proposalId];
2096 
2097         // Check voter has enough reputation:
2098         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2099         require(reputation > 0, "_voter must have reputation");
2100         require(reputation >= _rep, "reputation >= _rep");
2101         uint256 rep = _rep;
2102         if (rep == 0) {
2103             rep = reputation;
2104         }
2105         // If this voter has already voted, return false.
2106         if (proposal.voters[_voter].reputation != 0) {
2107             return false;
2108         }
2109         // The voting itself:
2110         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2111         //check if the current winningVote changed or there is a tie.
2112         //for the case there is a tie the current winningVote set to NO.
2113         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2114             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2115             proposal.winningVote == YES)) {
2116             if (proposal.state == ProposalState.Boosted &&
2117             // solhint-disable-next-line not-rely-on-time
2118                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2119                 proposal.state == ProposalState.QuietEndingPeriod) {
2120                 //quietEndingPeriod
2121                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2122                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2123                     proposal.state = ProposalState.QuietEndingPeriod;
2124                     emit StateChange(_proposalId, proposal.state);
2125                 }
2126                 // solhint-disable-next-line not-rely-on-time
2127                 proposal.times[1] = now;
2128             }
2129             proposal.winningVote = _vote;
2130         }
2131         proposal.voters[_voter] = Voter({
2132             reputation: rep,
2133             vote: _vote,
2134             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2135         });
2136         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2137             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2138             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2139             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2140         }
2141         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2142         return _execute(_proposalId);
2143     }
2144 
2145     /**
2146      * @dev _score return the proposal score (Confidence level)
2147      * For dual choice proposal S = (S+)/(S-)
2148      * @param _proposalId the ID of the proposal
2149      * @return uint256 proposal score as real number.
2150      */
2151     function _score(bytes32 _proposalId) internal view returns(uint256) {
2152         Proposal storage proposal = proposals[_proposalId];
2153         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2154         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2155     }
2156 
2157     /**
2158       * @dev _isVotable check if the proposal is votable
2159       * @param _proposalId the ID of the proposal
2160       * @return bool true or false
2161     */
2162     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2163         ProposalState pState = proposals[_proposalId].state;
2164         return ((pState == ProposalState.PreBoosted)||
2165                 (pState == ProposalState.Boosted)||
2166                 (pState == ProposalState.QuietEndingPeriod)||
2167                 (pState == ProposalState.Queued)
2168         );
2169     }
2170 }
2171 
2172 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2173 
2174 pragma solidity ^0.5.4;
2175 
2176 
2177 
2178 
2179 /**
2180  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2181  */
2182 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2183     using ECDSA for bytes32;
2184 
2185     // Digest describing the data the user signs according EIP 712.
2186     // Needs to match what is passed to Metamask.
2187     bytes32 public constant DELEGATION_HASH_EIP712 =
2188     keccak256(abi.encodePacked(
2189     "address GenesisProtocolAddress",
2190     "bytes32 ProposalId",
2191     "uint256 Vote",
2192     "uint256 AmountToStake",
2193     "uint256 Nonce"
2194     ));
2195 
2196     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2197 
2198     /**
2199      * @dev Constructor
2200      */
2201     constructor(IERC20 _stakingToken)
2202     public
2203     // solhint-disable-next-line no-empty-blocks
2204     GenesisProtocolLogic(_stakingToken) {
2205     }
2206 
2207     /**
2208      * @dev staking function
2209      * @param _proposalId id of the proposal
2210      * @param _vote  NO(2) or YES(1).
2211      * @param _amount the betting amount
2212      * @return bool true - the proposal has been executed
2213      *              false - otherwise.
2214      */
2215     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2216         return _stake(_proposalId, _vote, _amount, msg.sender);
2217     }
2218 
2219     /**
2220      * @dev stakeWithSignature function
2221      * @param _proposalId id of the proposal
2222      * @param _vote  NO(2) or YES(1).
2223      * @param _amount the betting amount
2224      * @param _nonce nonce value ,it is part of the signature to ensure that
2225               a signature can be received only once.
2226      * @param _signatureType signature type
2227               1 - for web3.eth.sign
2228               2 - for eth_signTypedData according to EIP #712.
2229      * @param _signature  - signed data by the staker
2230      * @return bool true - the proposal has been executed
2231      *              false - otherwise.
2232      */
2233     function stakeWithSignature(
2234         bytes32 _proposalId,
2235         uint256 _vote,
2236         uint256 _amount,
2237         uint256 _nonce,
2238         uint256 _signatureType,
2239         bytes calldata _signature
2240         )
2241         external
2242         returns(bool)
2243         {
2244         // Recreate the digest the user signed
2245         bytes32 delegationDigest;
2246         if (_signatureType == 2) {
2247             delegationDigest = keccak256(
2248                 abi.encodePacked(
2249                     DELEGATION_HASH_EIP712, keccak256(
2250                         abi.encodePacked(
2251                         address(this),
2252                         _proposalId,
2253                         _vote,
2254                         _amount,
2255                         _nonce)
2256                     )
2257                 )
2258             );
2259         } else {
2260             delegationDigest = keccak256(
2261                         abi.encodePacked(
2262                         address(this),
2263                         _proposalId,
2264                         _vote,
2265                         _amount,
2266                         _nonce)
2267                     ).toEthSignedMessageHash();
2268         }
2269         address staker = delegationDigest.recover(_signature);
2270         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2271         require(staker != address(0), "staker address cannot be 0");
2272         require(stakesNonce[staker] == _nonce);
2273         stakesNonce[staker] = stakesNonce[staker].add(1);
2274         return _stake(_proposalId, _vote, _amount, staker);
2275     }
2276 
2277     /**
2278      * @dev voting function
2279      * @param _proposalId id of the proposal
2280      * @param _vote NO(2) or YES(1).
2281      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2282      * @param _voter voter address
2283      * @return bool true - the proposal has been executed
2284      *              false - otherwise.
2285      */
2286     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2287     external
2288     votable(_proposalId)
2289     returns(bool) {
2290         Proposal storage proposal = proposals[_proposalId];
2291         Parameters memory params = parameters[proposal.paramsHash];
2292         address voter;
2293         if (params.voteOnBehalf != address(0)) {
2294             require(msg.sender == params.voteOnBehalf);
2295             voter = _voter;
2296         } else {
2297             voter = msg.sender;
2298         }
2299         return internalVote(_proposalId, voter, _vote, _amount);
2300     }
2301 
2302   /**
2303    * @dev Cancel the vote of the msg.sender.
2304    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2305    * This function is here in order to comply to the IntVoteInterface .
2306    */
2307     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2308        //this is not allowed
2309         return;
2310     }
2311 
2312     /**
2313       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2314       * @param _proposalId the id of the proposal
2315       * @return bool true - the proposal has been executed
2316       *              false - otherwise.
2317      */
2318     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2319         return _execute(_proposalId);
2320     }
2321 
2322   /**
2323     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2324     * @return uint256 that contains number of choices
2325     */
2326     function getNumberOfChoices(bytes32) external view returns(uint256) {
2327         return NUM_OF_CHOICES;
2328     }
2329 
2330     /**
2331       * @dev getProposalTimes returns proposals times variables.
2332       * @param _proposalId id of the proposal
2333       * @return proposals times array
2334       */
2335     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2336         return proposals[_proposalId].times;
2337     }
2338 
2339     /**
2340      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2341      * @param _proposalId the ID of the proposal
2342      * @param _voter the address of the voter
2343      * @return uint256 vote - the voters vote
2344      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2345      */
2346     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2347         Voter memory voter = proposals[_proposalId].voters[_voter];
2348         return (voter.vote, voter.reputation);
2349     }
2350 
2351     /**
2352     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2353     * @param _proposalId the ID of the proposal
2354     * @param _choice the index in the
2355     * @return voted reputation for the given choice
2356     */
2357     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2358         return proposals[_proposalId].votes[_choice];
2359     }
2360 
2361     /**
2362     * @dev isVotable check if the proposal is votable
2363     * @param _proposalId the ID of the proposal
2364     * @return bool true or false
2365     */
2366     function isVotable(bytes32 _proposalId) external view returns(bool) {
2367         return _isVotable(_proposalId);
2368     }
2369 
2370     /**
2371     * @dev proposalStatus return the total votes and stakes for a given proposal
2372     * @param _proposalId the ID of the proposal
2373     * @return uint256 preBoostedVotes YES
2374     * @return uint256 preBoostedVotes NO
2375     * @return uint256 total stakes YES
2376     * @return uint256 total stakes NO
2377     */
2378     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2379         return (
2380                 proposals[_proposalId].preBoostedVotes[YES],
2381                 proposals[_proposalId].preBoostedVotes[NO],
2382                 proposals[_proposalId].stakes[YES],
2383                 proposals[_proposalId].stakes[NO]
2384         );
2385     }
2386 
2387   /**
2388     * @dev getProposalOrganization return the organizationId for a given proposal
2389     * @param _proposalId the ID of the proposal
2390     * @return bytes32 organization identifier
2391     */
2392     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2393         return (proposals[_proposalId].organizationId);
2394     }
2395 
2396     /**
2397       * @dev getStaker return the vote and stake amount for a given proposal and staker
2398       * @param _proposalId the ID of the proposal
2399       * @param _staker staker address
2400       * @return uint256 vote
2401       * @return uint256 amount
2402     */
2403     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2404         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2405     }
2406 
2407     /**
2408       * @dev voteStake return the amount stakes for a given proposal and vote
2409       * @param _proposalId the ID of the proposal
2410       * @param _vote vote number
2411       * @return uint256 stake amount
2412     */
2413     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2414         return proposals[_proposalId].stakes[_vote];
2415     }
2416 
2417   /**
2418     * @dev voteStake return the winningVote for a given proposal
2419     * @param _proposalId the ID of the proposal
2420     * @return uint256 winningVote
2421     */
2422     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2423         return proposals[_proposalId].winningVote;
2424     }
2425 
2426     /**
2427       * @dev voteStake return the state for a given proposal
2428       * @param _proposalId the ID of the proposal
2429       * @return ProposalState proposal state
2430     */
2431     function state(bytes32 _proposalId) external view returns(ProposalState) {
2432         return proposals[_proposalId].state;
2433     }
2434 
2435    /**
2436     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2437     * @return bool true or false
2438     */
2439     function isAbstainAllow() external pure returns(bool) {
2440         return false;
2441     }
2442 
2443     /**
2444      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2445      * @return min - minimum number of choices
2446                max - maximum number of choices
2447      */
2448     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2449         return (YES, NO);
2450     }
2451 
2452     /**
2453      * @dev score return the proposal score
2454      * @param _proposalId the ID of the proposal
2455      * @return uint256 proposal score.
2456      */
2457     function score(bytes32 _proposalId) public view returns(uint256) {
2458         return  _score(_proposalId);
2459     }
2460 }
2461 
2462 // File: contracts/votingMachines/VotingMachineCallbacks.sol
2463 
2464 pragma solidity ^0.5.4;
2465 
2466 
2467 
2468 
2469 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2470 
2471     struct ProposalInfo {
2472         uint256 blockNumber; // the proposal's block number
2473         Avatar avatar; // the proposal's avatar
2474     }
2475 
2476     modifier onlyVotingMachine(bytes32 _proposalId) {
2477         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
2478         _;
2479     }
2480 
2481     // VotingMaching  ->  proposalId  ->  ProposalInfo
2482     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
2483 
2484     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2485     external
2486     onlyVotingMachine(_proposalId)
2487     returns(bool)
2488     {
2489         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2490         if (avatar == Avatar(0)) {
2491             return false;
2492         }
2493         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2494     }
2495 
2496     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2497     external
2498     onlyVotingMachine(_proposalId)
2499     returns(bool)
2500     {
2501         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2502         if (avatar == Avatar(0)) {
2503             return false;
2504         }
2505         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2506     }
2507 
2508     function stakingTokenTransfer(
2509         IERC20 _stakingToken,
2510         address _beneficiary,
2511         uint256 _amount,
2512         bytes32 _proposalId)
2513     external
2514     onlyVotingMachine(_proposalId)
2515     returns(bool)
2516     {
2517         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2518         if (avatar == Avatar(0)) {
2519             return false;
2520         }
2521         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2522     }
2523 
2524     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2525         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2526         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
2527             return 0;
2528         }
2529         return _stakingToken.balanceOf(address(avatar));
2530     }
2531 
2532     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2533         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2534         if (proposal.avatar == Avatar(0)) {
2535             return 0;
2536         }
2537         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2538     }
2539 
2540     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2541         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2542         if (proposal.avatar == Avatar(0)) {
2543             return 0;
2544         }
2545         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2546     }
2547 }
2548 
2549 // File: contracts/universalSchemes/ContributionReward.sol
2550 
2551 pragma solidity ^0.5.4;
2552 
2553 
2554 
2555 
2556 
2557 
2558 /**
2559  * @title A scheme for proposing and rewarding contributions to an organization
2560  * @dev An agent can ask an organization to recognize a contribution and reward
2561  * him with token, reputation, ether or any combination.
2562  */
2563 
2564 contract ContributionReward is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2565     using SafeMath for uint;
2566 
2567     event NewContributionProposal(
2568         address indexed _avatar,
2569         bytes32 indexed _proposalId,
2570         address indexed _intVoteInterface,
2571         string _descriptionHash,
2572         int256 _reputationChange,
2573         uint[5]  _rewards,
2574         IERC20 _externalToken,
2575         address _beneficiary
2576     );
2577 
2578     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
2579 
2580     event RedeemReputation(
2581         address indexed _avatar,
2582         bytes32 indexed _proposalId,
2583         address indexed _beneficiary,
2584         int256 _amount);
2585 
2586     event RedeemEther(address indexed _avatar,
2587         bytes32 indexed _proposalId,
2588         address indexed _beneficiary,
2589         uint256 _amount);
2590 
2591     event RedeemNativeToken(address indexed _avatar,
2592         bytes32 indexed _proposalId,
2593         address indexed _beneficiary,
2594         uint256 _amount);
2595 
2596     event RedeemExternalToken(address indexed _avatar,
2597         bytes32 indexed _proposalId,
2598         address indexed _beneficiary,
2599         uint256 _amount);
2600 
2601     // A struct holding the data for a contribution proposal
2602     struct ContributionProposal {
2603         uint256 nativeTokenReward; // Reward asked in the native token of the organization.
2604         int256 reputationChange; // Organization reputation reward requested.
2605         uint256 ethReward;
2606         IERC20 externalToken;
2607         uint256 externalTokenReward;
2608         address payable beneficiary;
2609         uint256 periodLength;
2610         uint256 numberOfPeriods;
2611         uint256 executionTime;
2612         uint[4] redeemedPeriods;
2613     }
2614 
2615     // A mapping from the organization (Avatar) address to the saved data of the organization:
2616     mapping(address=>mapping(bytes32=>ContributionProposal)) public organizationsProposals;
2617 
2618     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2619     struct Parameters {
2620         bytes32 voteApproveParams;
2621         IntVoteInterface intVote;
2622     }
2623 
2624     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2625     mapping(bytes32=>Parameters) public parameters;
2626 
2627     /**
2628     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2629     * @param _proposalId the ID of the voting in the voting machine
2630     * @param _param a parameter of the voting result, 1 yes and 2 is no.
2631     */
2632     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
2633         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2634         require(organizationsProposals[address(proposal.avatar)][_proposalId].executionTime == 0);
2635         require(organizationsProposals[address(proposal.avatar)][_proposalId].beneficiary != address(0));
2636         // Check if vote was successful:
2637         if (_param == 1) {
2638           // solhint-disable-next-line not-rely-on-time
2639             organizationsProposals[address(proposal.avatar)][_proposalId].executionTime = now;
2640         }
2641         emit ProposalExecuted(address(proposal.avatar), _proposalId, _param);
2642         return true;
2643     }
2644 
2645     /**
2646     * @dev hash the parameters, save them if necessary, and return the hash value
2647     */
2648     function setParameters(
2649         bytes32 _voteApproveParams,
2650         IntVoteInterface _intVote
2651     ) public returns(bytes32)
2652     {
2653         bytes32 paramsHash = getParametersHash(
2654             _voteApproveParams,
2655             _intVote
2656         );
2657         parameters[paramsHash].voteApproveParams = _voteApproveParams;
2658         parameters[paramsHash].intVote = _intVote;
2659         return paramsHash;
2660     }
2661 
2662     /**
2663     * @dev return a hash of the given parameters
2664     * @param _voteApproveParams parameters for the voting machine used to approve a contribution
2665     * @param _intVote the voting machine used to approve a contribution
2666     * @return a hash of the parameters
2667     */
2668     function getParametersHash(
2669         bytes32 _voteApproveParams,
2670         IntVoteInterface _intVote
2671     ) public pure returns(bytes32)
2672     {
2673         return (keccak256(abi.encodePacked(_voteApproveParams, _intVote)));
2674     }
2675 
2676     /**
2677     * @dev Submit a proposal for a reward for a contribution:
2678     * @param _avatar Avatar of the organization that the contribution was made for
2679     * @param _descriptionHash A hash of the proposal's description
2680     * @param _reputationChange - Amount of reputation change requested .Can be negative.
2681     * @param _rewards rewards array:
2682     *         rewards[0] - Amount of tokens requested per period
2683     *         rewards[1] - Amount of ETH requested per period
2684     *         rewards[2] - Amount of external tokens requested per period
2685     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
2686     *         rewards[4] - Number of periods
2687     * @param _externalToken Address of external token, if reward is requested there
2688     * @param _beneficiary Who gets the rewards
2689     */
2690     function proposeContributionReward(
2691         Avatar _avatar,
2692         string memory _descriptionHash,
2693         int256 _reputationChange,
2694         uint[5] memory _rewards,
2695         IERC20 _externalToken,
2696         address payable _beneficiary
2697     )
2698     public
2699     returns(bytes32)
2700     {
2701         validateProposalParams(_reputationChange, _rewards);
2702         Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];
2703 
2704         bytes32 contributionId = controllerParams.intVote.propose(
2705         2,
2706         controllerParams.voteApproveParams,
2707         msg.sender,
2708         address(_avatar)
2709         );
2710 
2711         address payable beneficiary = _beneficiary;
2712         if (beneficiary == address(0)) {
2713             beneficiary = msg.sender;
2714         }
2715 
2716         ContributionProposal memory proposal = ContributionProposal({
2717             nativeTokenReward: _rewards[0],
2718             reputationChange: _reputationChange,
2719             ethReward: _rewards[1],
2720             externalToken: _externalToken,
2721             externalTokenReward: _rewards[2],
2722             beneficiary: beneficiary,
2723             periodLength: _rewards[3],
2724             numberOfPeriods: _rewards[4],
2725             executionTime: 0,
2726             redeemedPeriods:[uint(0), uint(0), uint(0), uint(0)]
2727         });
2728         organizationsProposals[address(_avatar)][contributionId] = proposal;
2729 
2730         emit NewContributionProposal(
2731             address(_avatar),
2732             contributionId,
2733             address(controllerParams.intVote),
2734             _descriptionHash,
2735             _reputationChange,
2736             _rewards,
2737             _externalToken,
2738             beneficiary
2739         );
2740 
2741         proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({
2742             blockNumber:block.number,
2743             avatar:_avatar
2744         });
2745         return contributionId;
2746     }
2747 
2748     /**
2749     * @dev RedeemReputation reward for proposal
2750     * @param _proposalId the ID of the voting in the voting machine
2751     * @param _avatar address of the controller
2752     * @return reputation the redeemed reputation.
2753     */
2754     function redeemReputation(bytes32 _proposalId, Avatar _avatar) public returns(int256 reputation) {
2755 
2756         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2757         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2758         require(proposal.executionTime != 0);
2759         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 0);
2760 
2761         //set proposal reward to zero to prevent reentrancy attack.
2762         proposal.reputationChange = 0;
2763         reputation = int(periodsToPay) * _proposal.reputationChange;
2764         if (reputation > 0) {
2765             require(
2766             ControllerInterface(
2767             _avatar.owner()).mintReputation(uint(reputation), _proposal.beneficiary, address(_avatar)));
2768         } else if (reputation < 0) {
2769             require(
2770             ControllerInterface(
2771             _avatar.owner()).burnReputation(uint(reputation*(-1)), _proposal.beneficiary, address(_avatar)));
2772         }
2773         if (reputation != 0) {
2774             proposal.redeemedPeriods[0] = proposal.redeemedPeriods[0].add(periodsToPay);
2775             emit RedeemReputation(address(_avatar), _proposalId, _proposal.beneficiary, reputation);
2776         }
2777         //restore proposal reward.
2778         proposal.reputationChange = _proposal.reputationChange;
2779     }
2780 
2781     /**
2782     * @dev RedeemNativeToken reward for proposal
2783     * @param _proposalId the ID of the voting in the voting machine
2784     * @param _avatar address of the controller
2785     * @return amount the redeemed nativeToken.
2786     */
2787     function redeemNativeToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2788 
2789         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2790         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2791         require(proposal.executionTime != 0);
2792         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 1);
2793         //set proposal rewards to zero to prevent reentrancy attack.
2794         proposal.nativeTokenReward = 0;
2795 
2796         amount = periodsToPay.mul(_proposal.nativeTokenReward);
2797         if (amount > 0) {
2798             require(ControllerInterface(_avatar.owner()).mintTokens(amount, _proposal.beneficiary, address(_avatar)));
2799             proposal.redeemedPeriods[1] = proposal.redeemedPeriods[1].add(periodsToPay);
2800             emit RedeemNativeToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2801         }
2802 
2803         //restore proposal reward.
2804         proposal.nativeTokenReward = _proposal.nativeTokenReward;
2805     }
2806 
2807     /**
2808     * @dev RedeemEther reward for proposal
2809     * @param _proposalId the ID of the voting in the voting machine
2810     * @param _avatar address of the controller
2811     * @return amount ether redeemed amount
2812     */
2813     function redeemEther(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2814 
2815         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2816         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2817         require(proposal.executionTime != 0);
2818         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 2);
2819         //set proposal rewards to zero to prevent reentrancy attack.
2820         proposal.ethReward = 0;
2821         amount = periodsToPay.mul(_proposal.ethReward);
2822 
2823         if (amount > 0) {
2824             require(ControllerInterface(_avatar.owner()).sendEther(amount, _proposal.beneficiary, _avatar));
2825             proposal.redeemedPeriods[2] = proposal.redeemedPeriods[2].add(periodsToPay);
2826             emit RedeemEther(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2827         }
2828 
2829         //restore proposal reward.
2830         proposal.ethReward = _proposal.ethReward;
2831     }
2832 
2833     /**
2834     * @dev RedeemNativeToken reward for proposal
2835     * @param _proposalId the ID of the voting in the voting machine
2836     * @param _avatar address of the controller
2837     * @return amount the external token redeemed amount
2838     */
2839     function redeemExternalToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2840 
2841         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2842         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2843         require(proposal.executionTime != 0);
2844         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 3);
2845         //set proposal rewards to zero to prevent reentrancy attack.
2846         proposal.externalTokenReward = 0;
2847 
2848         if (proposal.externalToken != IERC20(0) && _proposal.externalTokenReward > 0) {
2849             amount = periodsToPay.mul(_proposal.externalTokenReward);
2850             if (amount > 0) {
2851                 require(
2852                 ControllerInterface(
2853                 _avatar.owner())
2854                 .externalTokenTransfer(_proposal.externalToken, _proposal.beneficiary, amount, _avatar));
2855                 proposal.redeemedPeriods[3] = proposal.redeemedPeriods[3].add(periodsToPay);
2856                 emit RedeemExternalToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2857             }
2858         }
2859         //restore proposal reward.
2860         proposal.externalTokenReward = _proposal.externalTokenReward;
2861     }
2862 
2863     /**
2864     * @dev redeem rewards for proposal
2865     * @param _proposalId the ID of the voting in the voting machine
2866     * @param _avatar address of the controller
2867     * @param _whatToRedeem whatToRedeem array:
2868     *         whatToRedeem[0] - reputation
2869     *         whatToRedeem[1] - nativeTokenReward
2870     *         whatToRedeem[2] - Ether
2871     *         whatToRedeem[3] - ExternalToken
2872     * @return  result boolean array for each redeem type.
2873     */
2874     function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] memory _whatToRedeem)
2875     public
2876     returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)
2877     {
2878 
2879         if (_whatToRedeem[0]) {
2880             reputationReward = redeemReputation(_proposalId, _avatar);
2881         }
2882 
2883         if (_whatToRedeem[1]) {
2884             nativeTokenReward = redeemNativeToken(_proposalId, _avatar);
2885         }
2886 
2887         if (_whatToRedeem[2]) {
2888             etherReward = redeemEther(_proposalId, _avatar);
2889         }
2890 
2891         if (_whatToRedeem[3]) {
2892             externalTokenReward = redeemExternalToken(_proposalId, _avatar);
2893         }
2894     }
2895 
2896     /**
2897     * @dev getPeriodsToPay return the periods left to be paid for reputation,nativeToken,ether or externalToken.
2898     * The function ignore the reward amount to be paid (which can be zero).
2899     * @param _proposalId the ID of the voting in the voting machine
2900     * @param _avatar address of the controller
2901     * @param _redeemType - the type of the reward  :
2902     *         0 - reputation
2903     *         1 - nativeTokenReward
2904     *         2 - Ether
2905     *         3 - ExternalToken
2906     * @return  periods left to be paid.
2907     */
2908     function getPeriodsToPay(bytes32 _proposalId, address _avatar, uint256 _redeemType) public view returns (uint256) {
2909         require(_redeemType <= 3, "should be in the redeemedPeriods range");
2910         ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];
2911         if (_proposal.executionTime == 0)
2912             return 0;
2913         uint256 periodsFromExecution;
2914         if (_proposal.periodLength > 0) {
2915           // solhint-disable-next-line not-rely-on-time
2916             periodsFromExecution = (now.sub(_proposal.executionTime))/(_proposal.periodLength);
2917         }
2918         uint256 periodsToPay;
2919         if ((_proposal.periodLength == 0) || (periodsFromExecution >= _proposal.numberOfPeriods)) {
2920             periodsToPay = _proposal.numberOfPeriods.sub(_proposal.redeemedPeriods[_redeemType]);
2921         } else {
2922             periodsToPay = periodsFromExecution.sub(_proposal.redeemedPeriods[_redeemType]);
2923         }
2924         return periodsToPay;
2925     }
2926 
2927     /**
2928     * @dev getRedeemedPeriods return the already redeemed periods for reputation, nativeToken, ether or externalToken.
2929     * @param _proposalId the ID of the voting in the voting machine
2930     * @param _avatar address of the controller
2931     * @param _redeemType - the type of the reward  :
2932     *         0 - reputation
2933     *         1 - nativeTokenReward
2934     *         2 - Ether
2935     *         3 - ExternalToken
2936     * @return redeemed period.
2937     */
2938     function getRedeemedPeriods(bytes32 _proposalId, address _avatar, uint256 _redeemType)
2939     public
2940     view
2941     returns (uint256) {
2942         return organizationsProposals[_avatar][_proposalId].redeemedPeriods[_redeemType];
2943     }
2944 
2945     function getProposalEthReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2946         return organizationsProposals[_avatar][_proposalId].ethReward;
2947     }
2948 
2949     function getProposalExternalTokenReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2950         return organizationsProposals[_avatar][_proposalId].externalTokenReward;
2951     }
2952 
2953     function getProposalExternalToken(bytes32 _proposalId, address _avatar) public view returns (address) {
2954         return address(organizationsProposals[_avatar][_proposalId].externalToken);
2955     }
2956 
2957     function getProposalExecutionTime(bytes32 _proposalId, address _avatar) public view returns (uint256) {
2958         return organizationsProposals[_avatar][_proposalId].executionTime;
2959     }
2960 
2961     /**
2962     * @dev validateProposalParams validate proposal's rewards parameters.
2963     * The function check for potential overflow upon proposal's redeem.
2964     * The function reverts if the params are not valid.
2965     * @param _reputationChange - Amount of reputation change requested .Can be negative.
2966     * @param _rewards rewards array:
2967     *         rewards[0] - Amount of tokens requested per period
2968     *         rewards[1] - Amount of ETH requested per period
2969     *         rewards[2] - Amount of external tokens requested per period
2970     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
2971     *         rewards[4] - Number of periods
2972     */
2973     function validateProposalParams(int256 _reputationChange, uint[5] memory _rewards) private pure {
2974         require(((_rewards[3] > 0) || (_rewards[4] == 1)), "periodLength equal 0 require numberOfPeriods to be 1");
2975         if (_rewards[4] > 0) {
2976             // This is the only case of overflow not detected by the check below
2977             require(!(int(_rewards[4]) == -1 && _reputationChange == (-2**255)),
2978             "numberOfPeriods * _reputationChange will overflow");
2979            //check that numberOfPeriods * _reputationChange will not overflow
2980             require((int(_rewards[4]) * _reputationChange) / int(_rewards[4]) == _reputationChange,
2981             "numberOfPeriods * reputationChange will overflow");
2982             //check that numberOfPeriods * tokenReward will not overflow
2983             require((_rewards[4] * _rewards[0]) / _rewards[4] == _rewards[0],
2984             "numberOfPeriods * tokenReward will overflow");
2985             //check that numberOfPeriods * ethReward will not overflow
2986             require((_rewards[4] * _rewards[1]) / _rewards[4] == _rewards[1],
2987             "numberOfPeriods * ethReward will overflow");
2988             //check that numberOfPeriods * texternalTokenReward will not overflow
2989             require((_rewards[4] * _rewards[2]) / _rewards[4] == _rewards[2],
2990             "numberOfPeriods * texternalTokenReward will overflow");
2991         }
2992     }
2993 
2994 }
