1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ying/YINGHelloNewWorld.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"../hootbase/base/erc721/HootERC721A.sol\";\nimport \"../hootbase/base/erc721/features/HootBaseERC721Raising.sol\";\nimport \"../hootbase/base/erc721/features/HootBaseERC721Refund.sol\";\nimport \"../hootbase/base/erc721/features/HootBaseERC721URISample.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nabstract contract ERC721 {\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n}\n\nabstract contract YINGInterface {\n    function mintTransfer(address address_, uint256 blindTokenId_)\n        public\n        virtual\n        returns (uint256);\n\n    function mintTransferBatch(\n        address address_,\n        uint256[] calldata blindTokenIds_\n    ) public virtual returns (uint256[] memory);\n}\n\n/**\n * @title HootAirdropBox\n * @author HootLabs\n */\ncontract YINGHelloNewWorld is\n    HootBaseERC721Raising,\n    HootBaseERC721Refund,\n    HootBaseERC721URISample,\n    HootERC721A\n{\n    event YINGConfigChanged(YINGConfig cfg);\n    event HolderMintConfigChanged(address contractAddr, HolderMintConfig cfg);\n    event WhitelistSaleConfigChanged(SaleConfig cfg);\n    event PartnerContractAdded(address partnerContract, uint256 maxSupply);\n    event PublicSaleConfigChanged(SaleConfig cfg);\n    event RevealConfigChanged(RevealConfig cfg);\n\n    event PartnerSaled(\n        address partnerContract,\n        address receiver,\n        uint64 amount_\n    );\n    /**\n     * used to mark the contract, each contract have to make a different CONTRACT_SHIELD\n     */\n    uint256 public constant CONTRACT_SHIELD = 1942123432145421;\n\n    struct YINGConfig {\n        uint256 maxSupply;\n        uint256 maxSaleSupply;\n        uint256 maxSelfSupply;\n        bool rejectFreeMintRefund;\n    }\n    struct SaleConfig {\n        uint256 price;\n        uint256 startTime;\n        uint256 stopTime;\n        uint64 supplyOfOwner;\n    }\n    struct HolderMintConfig {\n        uint256 price;\n        uint256 startTime;\n        uint256 stopTime;\n        uint64 supplyOfHolder;\n    }\n    struct RevealConfig {\n        uint256 startTime;\n        uint256 stopTime;\n        address yingAddress;\n    }\n\n    YINGConfig public yingCfg;\n    mapping(address => HolderMintConfig) _holderMintCfg;\n    SaleConfig public whitelistSaleCfg;\n    SaleConfig public publicSaleCfg;\n    RevealConfig public revealCfg;\n    mapping(address => uint64) _partnerMaxSupply;\n\n    // contract_address => contract_token_id => amount\n    mapping(address => mapping(uint256 => uint256)) _holderMintedAmounts;\n    mapping(uint256 => bool) _freeMintTokens;\n    mapping(uint256 => bool) _freeMintYINGTokens;\n    bytes32 public merkleRoot; // merkle root for whitelist checking\n    uint64 public selfMinted;\n\n    constructor() HootERC721A(\"YING: Hello New World\", \"YING\") {}\n\n    /***********************************|\n    |               Config              |\n    |__________________________________*/\n    function setYINGConfig(YINGConfig calldata cfg_) external onlyOwner {\n        yingCfg = cfg_;\n        emit YINGConfigChanged(cfg_);\n    }\n\n    function setHolderMintConfig(\n        address contractAddr_,\n        HolderMintConfig calldata cfg_\n    ) external onlyOwner {\n        _holderMintCfg[contractAddr_] = cfg_;\n        emit HolderMintConfigChanged(contractAddr_, cfg_);\n    }\n\n    function setWhitelistSaleConfig(SaleConfig calldata cfg_, bytes32 root_)\n        external\n        onlyOwner\n    {\n        whitelistSaleCfg = cfg_;\n        merkleRoot = root_;\n        emit WhitelistSaleConfigChanged(cfg_);\n    }\n\n    function addPartnerContract(address partnerContract_, uint64 maxSupply_)\n        external\n        onlyOwner\n    {\n        _partnerMaxSupply[partnerContract_] = maxSupply_;\n        emit PartnerContractAdded(partnerContract_, maxSupply_);\n    }\n\n    function setPublicSaleConfig(SaleConfig calldata cfg_) external onlyOwner {\n        publicSaleCfg = cfg_;\n        emit PublicSaleConfigChanged(cfg_);\n    }\n\n    // Set authorized contract address for minting the ERC-721 token\n    function setRevealConfig(RevealConfig calldata cfg_) external onlyOwner {\n        revealCfg = cfg_;\n        emit RevealConfigChanged(cfg_);\n    }\n\n    function isWhitelistSaleEnabled() public view returns (bool) {\n        return\n            block.timestamp > whitelistSaleCfg.startTime &&\n            block.timestamp < whitelistSaleCfg.stopTime;\n    }\n\n    function isPublicSaleEnabled() public view returns (bool) {\n        return\n            block.timestamp > publicSaleCfg.startTime &&\n            block.timestamp < publicSaleCfg.stopTime;\n    }\n\n    // whitelist sale config\n    function isWhitelistAddress(address address_, bytes32[] calldata signature_)\n        public\n        view\n        returns (bool)\n    {\n        if (merkleRoot == \"\") {\n            return false;\n        }\n        return\n            MerkleProof.verify(\n                signature_,\n                merkleRoot,\n                keccak256(abi.encodePacked(address_))\n            );\n    }\n\n    /**\n     * @notice isRevealEnabled is used to return whether the reveal has been enabled.\n     */\n    function isRevealEnabled() public view returns (bool) {\n        return\n            block.timestamp > revealCfg.startTime &&\n            block.timestamp < revealCfg.stopTime &&\n            revealCfg.yingAddress != address(0);\n    }\n\n    /***********************************|\n    |               Core                |\n    |__________________________________*/\n    // The maximum number of mint tokens allowed selfSupply\n    function selfMint(uint64 numberOfTokens_) external onlyOwner nonReentrant {\n        require(numberOfTokens_ > 0, \"invalid number of tokens\");\n        unchecked {\n            uint64 nextMinted = selfMinted + numberOfTokens_;\n            require(\n                nextMinted <= yingCfg.maxSelfSupply,\n                \"max self supply exceeded\"\n            );\n            _mint(_msgSender(), numberOfTokens_);\n            selfMinted = nextMinted;\n        }\n    }\n\n    function checkAndGetHolderConfig(address contractAddr_)\n        private\n        view\n        returns (HolderMintConfig memory)\n    {\n        require(contractAddr_ != address(0), \"contract address is invalid\");\n        HolderMintConfig memory holderCfg = _holderMintCfg[contractAddr_];\n        require(\n            holderCfg.startTime > 0 && block.timestamp > holderCfg.startTime,\n            \"holder mint is not start\"\n        );\n        require(\n            block.timestamp < holderCfg.stopTime,\n            \"holder mint has been stoped\"\n        );\n        require(\n            holderCfg.supplyOfHolder > 0,\n            \"the input contract does not support to mint\"\n        );\n        return holderCfg;\n    }\n\n    function holdersSale(\n        address contractAddr_,\n        uint256[] calldata tokenIDs_,\n        uint64[] calldata amounts_\n    ) external payable callerIsUser nonReentrant {\n        require(\n            tokenIDs_.length == amounts_.length,\n            \"the length of Listing TokenIDs is different from that of Listing Amounts\"\n        );\n        HolderMintConfig memory holderCfg = checkAndGetHolderConfig(\n            contractAddr_\n        );\n        require(\n            tokenIDs_.length < yingCfg.maxSaleSupply,\n            \"max sale supply exceeded\"\n        );\n\n        uint64 amountTotal = 0;\n        unchecked {\n            for (uint256 i = 0; i < tokenIDs_.length; i++) {\n                uint64 amount = amounts_[i];\n                require(amount < 3, \"an token can only mint two tokens\");\n                require(amount > 0, \"invalid number of tokens\");\n\n                uint256 nextSupply = _holderMintedAmounts[contractAddr_][\n                    tokenIDs_[i]\n                ] + amount;\n                require(\n                    nextSupply <= holderCfg.supplyOfHolder,\n                    \"max sale supply exceeded\"\n                );\n\n                // 验证是否是 owner\n                ERC721 contractAddress = ERC721(contractAddr_);\n                require(\n                    contractAddress.ownerOf(tokenIDs_[i]) == _msgSender(),\n                    \"doesn't own the token\"\n                );\n                _holderMintedAmounts[contractAddr_][tokenIDs_[i]] = nextSupply;\n\n                amountTotal += amount;\n            }\n            _sale(_msgSender(), amountTotal, holderCfg.price);\n        }\n    }\n\n    // Only one token can be mint at a time\n    function whitelistSale(bytes32[] calldata signature_, uint64 amount_)\n        external\n        payable\n        callerIsUser\n        nonReentrant\n    {\n        require(isWhitelistSaleEnabled(), \"whitelist sale has not enabled\");\n        require(\n            isWhitelistAddress(_msgSender(), signature_),\n            \"caller is not in whitelist or invalid signature\"\n        );\n        require(amount_ > 0, \"invalid number of tokens\");\n        require(amount_ < 3, \"can only mint 2 tokens at a time\");\n\n        uint64 nextSupply = _getAux(_msgSender()) + amount_;\n        require(\n            nextSupply <= whitelistSaleCfg.supplyOfOwner,\n            \"out of max mint amount\"\n        );\n        _sale(_msgSender(), amount_, whitelistSaleCfg.price);\n        _setAux(_msgSender(), uint64(nextSupply));\n    }\n\n    function partnerSale(address receiver, uint64 amount_)\n        external\n        payable\n        nonReentrant\n    {\n        require(isWhitelistSaleEnabled(), \"whitelist sale has not enabled\");\n        require(amount_ > 0, \"invalid number of tokens\");\n        require(amount_ < 3, \"can only mint 2 tokens at a time\");\n\n        uint64 maxSupply = _partnerMaxSupply[_msgSender()];\n        uint64 nextSupply = _getAux(_msgSender()) + amount_;\n        require(nextSupply <= maxSupply, \"out of max mint amount\");\n\n        _sale(receiver, amount_, whitelistSaleCfg.price);\n        _setAux(_msgSender(), uint64(nextSupply));\n\n        emit PartnerSaled(_msgSender(), receiver, amount_);\n    }\n\n    /**\n     * @notice public sale.\n     * @param amount_ sale amount\n     */\n    function publicSale(uint64 amount_)\n        external\n        payable\n        callerIsUser\n        nonReentrant\n    {\n        require(isPublicSaleEnabled(), \"public sale has not enabled\");\n        require(amount_ > 0, \"invalid number of tokens\");\n        require(amount_ < 3, \"can only mint 2 tokens at a time\");\n\n        uint64 nextSupply = _getAux(_msgSender()) + amount_;\n        require(\n            nextSupply <= publicSaleCfg.supplyOfOwner,\n            \"out of max mint amount\"\n        );\n        _sale(_msgSender(), amount_, publicSaleCfg.price);\n        _setAux(_msgSender(), nextSupply);\n    }\n\n    // The maximum number of mint tokens allowed saleSupply\n    function _sale(\n        address receiver,\n        uint64 numberOfTokens_,\n        uint256 price_\n    ) internal {\n        require(\n            _totalMinted() + numberOfTokens_ - selfMinted <= yingCfg.maxSaleSupply,\n            \"max sale supply exceeded\"\n        );\n        uint256 amount = price_ * numberOfTokens_;\n        require(amount <= msg.value, \"ether value sent is not correct\");\n        _safeMint(receiver, numberOfTokens_);\n        refundExcessPayment(amount);\n        if (price_ == 0) {\n            for (uint256 i = 0; i < numberOfTokens_; ++i) {\n                _freeMintTokens[_totalMinted() - i] = true;\n            }\n        }\n    }\n\n    /**\n     * @notice when the amount paid by the user exceeds the actual need, the refund logic will be executed.\n     * @param amount_ the actual amount that should be paid\n     */\n    function refundExcessPayment(uint256 amount_) private {\n        if (msg.value > amount_) {\n            payable(_msgSender()).transfer(msg.value - amount_);\n        }\n    }\n\n    /**\n     * @notice Determine whether it is the Token of a FreeMint\n     * @param tokenId_ YING: Hello New World token id\n     */\n    function isFreeMintToken(uint256 tokenId_)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return _freeMintTokens[tokenId_];\n    }\n\n    /**\n     * @notice Determine whether it is the Token of a FreeMint\n     * @param tokenId_ YING token id\n     */\n    function isFreeMintYINGToken(uint256 tokenId_)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return _freeMintYINGTokens[tokenId_];\n    }\n\n    /**\n     * Gets the number of Mint of the holder\n     */\n    function getHolderMinted(\n        address contractAddr_,\n        uint256[] calldata tokenIDs_\n    ) external view returns (uint256[] memory) {\n        mapping(uint256 => uint256) storage tokenAmount = _holderMintedAmounts[\n            contractAddr_\n        ];\n        uint256[] memory amounts = new uint256[](tokenIDs_.length);\n        for (uint256 i = 0; i < tokenIDs_.length; i++) {\n            amounts[i] = tokenAmount[tokenIDs_[i]];\n        }\n        return amounts;\n    }\n\n    /**\n     * gets the number of Mint during the whitelist and the public sale\n     */\n    function getSaleBalanceOf(address owner) public view returns (uint256) {\n       return _getAux(owner);\n    }\n\n    /**\n     * @notice reveal is used to open the blind box.\n     * @param tokenId_ tokenId of the blind box to be revealed.\n     * @return tokenId after revealing the blind box.\n     */\n    function reveal(uint256 tokenId_)\n        external\n        callerIsUser\n        nonReentrant\n        returns (uint256)\n    {\n        require(isRevealEnabled(), \"reveal has not enabled\");\n        require(ownerOf(tokenId_) == _msgSender(), \"caller is not owner\");\n        _burn(tokenId_);\n        YINGInterface yingContract = YINGInterface(revealCfg.yingAddress);\n        uint256 yingTokenId = yingContract.mintTransfer(_msgSender(), tokenId_);\n        if (isFreeMintToken(tokenId_)) {\n            _freeMintYINGTokens[yingTokenId] = true;\n        }\n        return yingTokenId;\n    }\n\n    function revealBatch(uint256[] calldata tokenIds_)\n        external\n        callerIsUser\n        nonReentrant\n        returns (uint256[] memory)\n    {\n        require(isRevealEnabled(), \"reveal has not enabled\");\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\n            uint256 tokenId = tokenIds_[i];\n            require(ownerOf(tokenId) == _msgSender(), \"caller is not owner\");\n            _burn(tokenId);\n        }\n        YINGInterface yingContract = YINGInterface(revealCfg.yingAddress);\n        uint256[] memory yingTokenIds = yingContract.mintTransferBatch(\n            _msgSender(),\n            tokenIds_\n        );\n        for (uint256 i = 0; i < yingTokenIds.length; i++) {\n            if (isFreeMintToken(tokenIds_[i])) {\n                _freeMintYINGTokens[yingTokenIds[i]] = true;\n            }\n        }\n        return yingTokenIds;\n    }\n\n    /***********************************|\n    |        HootBaseERC721Refund       |\n    |__________________________________*/\n    function _refundPrice(uint256 tokenId_)\n        internal\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        if (yingCfg.rejectFreeMintRefund) {\n            require(\n                !_freeMintTokens[tokenId_],\n                \"No refunds are allowed for free mint token\"\n            );\n        }\n        return super._refundPrice(tokenId_);\n    }\n\n    /***********************************|\n    | HootBaseERC721URIStorageWithLevel |\n    |__________________________________*/\n    function tokenURI(uint256 tokenId_)\n        public\n        view\n        virtual\n        override(ERC721A, HootBaseERC721URISample)\n        returns (string memory)\n    {\n        return HootBaseERC721URISample.tokenURI(tokenId_);\n    }\n\n    /***********************************|\n    |               ERC721A             |\n    |__________________________________*/\n    /**\n     * @notice hook function, used to intercept the transfer of token.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual override(HootBaseERC721Raising, HootERC721A) {\n        HootBaseERC721Raising._beforeTokenTransfers(\n            from,\n            to,\n            startTokenId,\n            quantity\n        );\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
9     },
10     "contracts/hootbase/base/erc721/features/HootBaseERC721URISample.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"../../common/HootBase.sol\";\nimport \"../extensions/HootBaseERC721Owners.sol\";\n\n/**\n * @title HootBaseERC721URISample\n * @author HootLabs\n */\nabstract contract HootBaseERC721URISample is\n    HootBase,\n    HootBaseERC721Owners,\n    IERC721,\n    IERC721Metadata\n{\n    using Strings for uint256;\n\n    event BaseURIChanged(string uri);\n\n    string private _preURI;\n\n    function _baseURI(\n        uint256 /* tokenId_*/\n    ) internal view virtual returns (string memory) {\n        return _preURI;\n    }\n\n    function setBaseURI(string calldata uri_) external onlyOwner {\n        _preURI = uri_;\n        emit BaseURIChanged(uri_);\n    }\n\n    function tokenURI(uint256 tokenId_)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(this.exists(tokenId_), \"token is not exist\");\n\n        string memory baseURI = _baseURI(tokenId_);\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId_.toString()))\n                : \"\";\n    }\n\n    function unsafeTokenURIBatch(uint256[] calldata tokenIds_)\n        public\n        view\n        virtual\n        returns (string[] memory)\n    {\n        string[] memory uris = new string[](tokenIds_.length);\n        for (uint256 i = 0; i < tokenIds_.length; ++i) {\n            uint256 tokenId = tokenIds_[i];\n            if(!this.exists(tokenId)){\n                uris[i]=\"\";\n                continue;\n            }\n            string memory baseURI = _baseURI(tokenId);\n            uris[i] = bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n        }\n        return uris;\n    }\n}\n"
12     },
13     "contracts/hootbase/base/erc721/features/HootBaseERC721Refund.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../../common/HootBase.sol\";\n\n/**\n * @title HootBaseERC721Refund\n * @author HootLabs\n */\nabstract contract HootBaseERC721Refund is HootBase, IERC721 {\n    using Address for address;\n\n    event RefundConfigChanged(RefundConfig config);\n    event RefundAddressChanged(address indexed refundAddress);\n    event Refunded(address indexed from, address indexed to, uint256 tokenId, uint256 amount);\n\n    constructor(){\n        refundAddress = _msgSender();\n    }\n    // mint State Variables\n    address public refundAddress;\n\n    struct RefundConfig {\n        uint256 startTime;\n        uint256 stopTime;\n        uint256 price;\n    }\n    RefundConfig public refundConfig;\n\n    // refund config\n    function isRefundEnabled() public view virtual returns (bool) {\n        return block.timestamp > refundConfig.startTime && block.timestamp < refundConfig.stopTime;\n    }\n    function setRefundAddress(address refundAddress_) external onlyOwner {\n        refundAddress = refundAddress_;\n        emit RefundAddressChanged(refundAddress_);\n    }\n    function setRefundConfig(RefundConfig calldata cfg_) external onlyOwner {\n        refundConfig = cfg_;\n        emit RefundConfigChanged(refundConfig);\n    }\n\n    function _refundPrice(uint256 /*tokenId_*/) internal view virtual returns (uint256) {\n        return refundConfig.price;\n    }\n\n    // refund\n    function refund(uint256 tokenId_) external callerIsUser nonReentrant {\n        require(_msgSender() == this.ownerOf(tokenId_), \"not token owner\");\n        require(_msgSender() != refundAddress, \"stock account refunds are not allowed\");\n        require(isRefundEnabled(), \"outside the refundable period\");\n\n        uint256 refundPrice = _refundPrice(tokenId_);\n        require(refundPrice > 0, \"only sale NFT can be refunded\");\n        require(address(this).balance >= refundPrice, \"insufficient contract funds\");\n\n        this.safeTransferFrom(_msgSender(), refundAddress, tokenId_);\n        //Address.sendValue(payable(_msgSender()), refundPrice);\n        payable(_msgSender()).transfer(refundPrice);\n\n        emit Refunded(_msgSender(), refundAddress, tokenId_, refundPrice);\n    }\n}"
15     },
16     "contracts/hootbase/base/erc721/features/HootBaseERC721Raising.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../../common/HootBase.sol\";\nimport \"../extensions/HootBaseERC721Owners.sol\";\n\n/**\n * @title HootBaseERC721Raising\n * @author HootLabs\n */\nabstract contract HootBaseERC721Raising is\n    HootBase,\n    HootBaseERC721Owners,\n    IERC721\n{\n    event RaisingStatusChanged(\n        uint256 indexed tokenId,\n        address indexed owner,\n        uint16 indexed raisingType,\n        bool isStart\n    );\n    event RaisingInterrupted(uint256 indexed tokenId, address indexed operator);\n    event RaisingTokenTransfered(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n    event RaisingAllowedFlagChanged(\n        bool isRaisingAllowed,\n        bool isRaisingTransferAllowed\n    );\n\n    struct RaisingStatus {\n        uint256 raisingStartTime;\n        uint256 total;\n        uint16 raisingType;\n        bool provisionalFree;\n    }\n    struct RaisingCurrentStatus {\n        uint256 total;\n        uint256 current;\n        uint16 raisingType;\n        bool isRaising;\n    }\n    mapping(uint256 => RaisingStatus) private _raisingStatuses;\n    bool public isRaisingAllowed;\n    bool public isRaisingTransferAllowed;\n\n    /***********************************|\n    |               Raising Config      |\n    |__________________________________*/\n    /**\n     * @notice setIsRaisingAllowed is used to set the global switch to control whether users are allowed to brew.\n     * @param isRaisingAllowed_ set to true to allow\n     */\n    function setIsRaisingAllowed(\n        bool isRaisingAllowed_,\n        bool isRaisingTransferAllowed_\n    ) external atLeastMaintainer {\n        isRaisingAllowed = isRaisingAllowed_;\n        isRaisingTransferAllowed = isRaisingTransferAllowed_;\n        emit RaisingAllowedFlagChanged(\n            isRaisingAllowed_,\n            isRaisingTransferAllowed_\n        );\n    }\n\n    /***********************************|\n    |               Raising Core        |\n    |__________________________________*/\n    /**\n     * @notice safeTransferWhileRaising is used to safely transfer tokens while raising\n     * @param from_ transfer from address, cannot be the zero.\n     * @param to_ transfer to address, cannot be the zero.\n     * @param tokenId_ token must exist and be owned by `from`.\n     */\n    function safeTransferWhileRaising(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) external nonReentrant {\n        require(this.ownerOf(tokenId_) == _msgSender(), \"caller is not owner\");\n        require(\n            isRaisingTransferAllowed,\n            \"transfer while raising is not enabled\"\n        );\n        _raisingStatuses[tokenId_].provisionalFree = true;\n        this.safeTransferFrom(from_, to_, tokenId_);\n        _raisingStatuses[tokenId_].provisionalFree = false;\n        if (_raisingStatuses[tokenId_].raisingStartTime != 0) {\n            emit RaisingTokenTransfered(from_, to_, tokenId_);\n        }\n    }\n\n    /**\n     * @notice getTokenRaisingStatus is used to get the detailed raising status of a specific token.\n     * @param tokenIDs_ token id\n     * @return RaisingCurrentStatus[] how long the token has been raising in the hands of the current hodler.\n     */\n    function getTokenRaisingStatus(uint256[] calldata tokenIDs_)\n        external\n        view\n        returns (RaisingCurrentStatus[] memory)\n    {\n        RaisingCurrentStatus[] memory statusList = new RaisingCurrentStatus[](tokenIDs_.length);\n        for (uint256 i = 0; i < tokenIDs_.length; ++i) {\n            uint256 tokenId = tokenIDs_[i];\n            if(!this.exists(tokenId)){\n                continue;\n            }\n            RaisingStatus memory status = _raisingStatuses[tokenId];\n            if (status.raisingStartTime != 0) {\n                statusList[i].isRaising = true;\n                statusList[i].raisingType = status.raisingType;\n                statusList[i].current = block.timestamp - status.raisingStartTime;\n            }\n            statusList[i].total = status.total + statusList[i].current;\n        }\n        return statusList;\n    }\n\n    function _isTokenRaising(uint256 tokenId_) internal view returns (bool) {\n        return _raisingStatuses[tokenId_].raisingStartTime != 0;\n    }\n\n    /**\n     * @notice setTokenRaisingState is used to modify the Raising state of the Token,\n     * only the Owner of the Token has this permission.\n     * @param tokenIds_ list of tokenId\n     */\n    function doTokenRaising(\n        uint256[] calldata tokenIds_,\n        uint16 raisingType_,\n        bool isStart_\n    ) external nonReentrant {\n        if (isStart_) {\n            require(isRaisingAllowed, \"raising is not allowed\");\n        }\n        unchecked {\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\n                uint256 tokenId = tokenIds_[i];\n                require(\n                    this.ownerOf(tokenId) == _msgSender(),\n                    \"caller is not owner\"\n                );\n\n                RaisingStatus storage status = _raisingStatuses[tokenId];\n                uint256 raisingStartTime = status.raisingStartTime;\n                if (isStart_) {\n                    if (raisingStartTime == 0) {\n                        status.raisingStartTime = block.timestamp;\n                        status.raisingType = raisingType_;\n                        emit RaisingStatusChanged(\n                            tokenId,\n                            _msgSender(),\n                            raisingType_,\n                            isStart_\n                        );\n                    } else {\n                        require(\n                            status.raisingType == raisingType_,\n                            \"raising is already started, but with a different raising type set\"\n                        );\n                    }\n                } else {\n                    if (raisingStartTime > 0) {\n                        status.total += block.timestamp - raisingStartTime;\n                        status.raisingStartTime = 0;\n                        emit RaisingStatusChanged(\n                            tokenId,\n                            _msgSender(),\n                            raisingType_,\n                            isStart_\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice interruptTokenRaising gives the issuer the right to forcibly interrupt the raising state of the token.\n     * One scenario of using it is: someone may maliciously place low-priced raising tokens on\n     * the secondary market (because raising tokens cannot be traded).\n     * @param tokenIds_ the tokenId list to operate\n     */\n    function interruptTokenRaising(uint256[] calldata tokenIds_)\n        external\n        nonReentrant\n        atLeastMaintainer\n    {\n        unchecked {\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\n                uint256 tokenId = tokenIds_[i];\n                address owner = this.ownerOf(tokenId);\n                RaisingStatus storage status = _raisingStatuses[tokenId];\n                if (status.raisingStartTime == 0) {\n                    continue;\n                }\n                status.total += block.timestamp - status.raisingStartTime;\n                status.raisingStartTime = 0;\n                emit RaisingStatusChanged(\n                    tokenId,\n                    owner,\n                    status.raisingType,\n                    false\n                );\n                emit RaisingInterrupted(tokenId, _msgSender());\n            }\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address, /*from_*/\n        address, /*to_*/\n        uint256 tokenId_\n    ) internal virtual {\n        if (_isTokenRaising(tokenId_)) {\n            require(\n                _raisingStatuses[tokenId_].provisionalFree,\n                \"token is raising\"\n            );\n        }\n    }\n\n    function _beforeTokenTransfers(\n        address, /*from_*/\n        address, /*to_*/\n        uint256 startTokenId_,\n        uint256 quantity_\n    ) internal virtual {\n        for (uint256 i = 0; i < quantity_; ++i) {\n            if (_isTokenRaising(startTokenId_ + i)) {\n                require(\n                    _raisingStatuses[startTokenId_ + i].provisionalFree,\n                    \"token is raising\"\n                );\n            }\n        }\n    }\n}\n"
18     },
19     "contracts/hootbase/base/erc721/HootERC721A.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../../standard/erc721a/ERC721A.sol\";\nimport \"../../base/common/HootBase.sol\";\nimport \"./extensions/HootBaseERC721Owners.sol\";\n\n/**\n * @title Hootbirds\n * @author HootLabs\n */\ncontract HootERC721A is\n    HootBase,\n    HootBaseERC721Owners,\n    ERC721A,\n    IERC721Enumerable\n{\n    using Strings for uint256;\n\n    constructor(string memory name_, string memory symbol_)\n        ERC721A(name_, symbol_)\n    {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721A, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /***********************************|\n    |               Config              |\n    |__________________________________*/\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;\n    }\n\n    /***********************************|\n    |               Core                |\n    |__________________________________*/\n\n    /**\n     * @notice issuer have permission to burn token.\n     * @param tokenIds_ list of tokenId\n     */\n    function burn(uint256[] calldata tokenIds_)\n        external\n        onlyOwner\n        nonReentrant\n    {\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\n            uint256 tokenId = tokenIds_[i];\n            require(ownerOf(tokenId) == _msgSender(), \"caller is not owner\");\n            _burn(tokenId);\n        }\n    }\n\n    function totalBurned() external view returns (uint256) {\n        return _totalBurned();\n    }\n    function totalMinted() external view returns (uint256) {\n        return _totalMinted();\n    }\n\n    /***********************************|\n    |        IERC721Enumerable          |\n    |__________________________________*/\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see `_totalMinted`.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _totalMinted() - _totalBurned();\n        }\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(owner != address(0), \"invalid owner\");\n        uint256 stopTokenId = _startTokenId() + _totalMinted();\n        uint256 scanIndex = 0;\n        for (uint256 tokenId = _startTokenId(); tokenId < stopTokenId; tokenId++) {\n            if (unsafeOwnerOf(tokenId) != owner) {\n                continue;\n            }\n            if (scanIndex == index) {\n                return tokenId;\n            }\n            ++scanIndex;\n        }\n        return 0;\n    }\n\n    function tokenByIndex(uint256 index) external view override returns (uint256) {\n        require(index < _totalMinted(), \"out of range\");\n        return _startTokenId() + index;\n    }\n\n    /***********************************|\n    |        HootBaseERC721Owners       |\n    |__________________________________*/\n    function _unsafeOwnerOf(uint256 tokenId_) internal view virtual override returns (address){\n        return unsafeOwnerOf(tokenId_);\n    }\n\n    /***********************************|\n    |               ERC721A             |\n    |__________________________________*/\n    /**\n     * @notice hook function, used to intercept the transfer of token.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual override {\n        require(!paused(), \"token transfer paused\");\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\n    }\n}\n"
21     },
22     "contracts/hootbase/base/erc721/extensions/HootBaseERC721Owners.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\n/**\n * @title HootBaseERC721Refund\n * @author HootLabs\n */\nabstract contract HootBaseERC721Owners {\n    /***********************************|\n    |               abstract            |\n    |__________________________________*/\n    function _unsafeOwnerOf(uint256 tokenId_)\n        internal\n        view\n        virtual\n        returns (address);\n\n    /***********************************|\n    |               Core                |\n    |__________________________________*/\n    function exists(uint256 tokenId_) public view virtual returns (bool) {\n        return _unsafeOwnerOf(tokenId_) != address(0);\n    }\n\n    function ownersOf(uint256[] calldata tokenIDs_)\n        external\n        view\n        virtual\n        returns (address[] memory)\n    {\n        address[] memory owners = new address[](tokenIDs_.length);\n        for (uint256 i = 0; i < tokenIDs_.length; ++i) {\n            owners[i] = _unsafeOwnerOf(tokenIDs_[i]);\n        }\n        return owners;\n    }\n}\n"
24     },
25     "contracts/hootbase/base/common/HootBase.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n/*\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n+                                                                                                                 +\n+                                                                                                                 +\n.                        .^!!~:                                                 .^!!^.                            .\n.                            :7Y5Y7^.                                       .^!J5Y7^.                             .\n.                              :!5B#GY7^.                             .^!JP##P7:                                  .\n.   7777??!         ~????7.        :5@@@@&GY7^.                    .^!JG#@@@@G^        7????????????^ ~????77     .\n.   @@@@@G          P@@@@@:       J#@@@@@@@@@@&G57~.          .^7YG#@@@@@@@@@@&5:      #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:     :B@@@@@BJG@@@@@@@@@&B5?~:^7YG#@@@@@@@@BJP@@@ @@&!!     #@@@@@@@@@@@@@? P@@@@@@    .\n.   @@@@@G          5@@@@@:    .B@@@@#!!J@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@P   ^G@@@@@~.   ^~~~~~^J@ @@@@??:~~~~~    .\n.   @@@@@B^^^^^^^^. 5@@@@@:   J@@@@&^   G@7?@@@@@@&@@@@@@@@@@@&@J7&@@@@@#.   .B@@@@P           !@@@@@?            .\n.   @@@@@@@@@@@@@@! 5@@@@@:   5@@@@B   ^B&&@@@@@#!#@@@@@@@@@@7G&&@@@@@#!     Y@@@@#.           !@@@@@?            .\n.   @@@@@@@@@@@@@@! P@@@@@:   ?@@@@&^    !YPGPY!  !@@@@@Y&@@@@Y  ~YPGP57.    .B@@@@P           !@@@@@?            .\n.   @@@@@B~~~~~~~!!.?GPPGP:   .B@@@@&7           ?&@@@@P ?@@@@@5.          ~B@@@@&^            !@@@@@?            .\n.   @@@@@G          ^~~~~~.    :G@@@@@BY7~^^~75#@@@@@5.    J@@@@@&P?~^^^!JG@@@@@#~             !@@@@@?            .\n.   @@@@@G          5@@@@@:      ?B@@@@@@@@@@@@@@@@B!!      ^P@@@@@@@@@@@@@@@@&Y               !@@@@@?            .\n.   @@@@@G.         P@@@@@:        !YB&@@@@@@@@&BY~           ^JG#@@@@@@@@&#P7.                !@@@@@?            .\n.   YYYYY7          !YJJJJ.            :~!7??7!^:                 .^!7??7!~:                   ^YJJJY~            .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                                                                                                 .\n.                                  ………………               …………………………………………                  …………………………………………        .\n.   PBGGB??                      7&######&5            :B##############&5               .G#################^      .\n.   &@@@@5                      ?@@@@@@@@@@           :@@@@@@@@@@@@@@@@@G               &@@@@@@@@@@@@ @@@@@^      .\n.   PBBBBJ                 !!!!!JPPPPPPPPPY !!!!!     :&@@@@P?JJJJJJJJJJJJJJ?      :JJJJJJJJJJJJJJJJJJJJJJ.       .\n.   ~~~~~:                .#@@@@Y          ~@@@@@~    :&@@@@7           ~@@@&.      ^@@@@.                        .\n.   #@@@@Y                .#@@@@G?JJJJJJJJ?5@@@@@~    :&@@@@7   !JJJJJJJJJJJJ?     :JJJJJJJJJJJJJJJJJ!!           .\n.   #@@@@Y                .#@@@@@@@@@@@@@@@@@@@@@@~   :&@@@@7   G@@@@@@@@G &@@             @@@@@@@@@@P            .\n.   #@@@@Y                .#@@@@&##########&@@@@@~    :&@@@@7   7YYYYYYYYJ???7             JYYYYYYYYYYYYJ???7     .\n.   #@@@@Y                .#@@@@5 ........ !@@@@@~    :&@@@@7            ~@@@&.                         !@@@#     .\n.   #@@@@#5PPPPPPPPPJJ    .#@@@@Y          !@@@@@~    :&@@@@P7??????????JYY5J      .?????????? ???????JYY5J       .\n.   &@@@@@@@@@@@@@@@@@    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@@@P            .\n.   PBBBBBBBBBBBBBBBBY    .#@@@@Y          !@@@@@~    :&@@@@@@@@@@@@@@@@@G         ^@@@@@@@@@@@@@@@ @@5           .\n+                                                                                                                 +\n+                                                                                                                 +\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ncontract HootBase is ReentrancyGuard, Pausable, Ownable {\n    event PermissionChanged(address indexed addr, uint8 permission);\n\n    event Deposit(address indexed account, uint256 amount);\n    event Withdraw(address indexed account, uint256 amount);\n    event ContractParsed();\n    event ContractUnparsed();\n    event ContractSealed();\n\n    uint8 public constant NO_PERMISSION = 0;\n    uint8 public constant MANAGER = 1;\n    uint8 public constant MAINTAINER = 2;\n    uint8 public constant OPERATOR = 3;\n\n    mapping(address => uint8) private _permissions;\n    address[] maintainers;\n\n    bool public contractSealed = false;\n\n    /***********************************|\n    |               Config              |\n    |__________________________________*/\n    /**\n     * @notice setManagerAddress is used to allow the issuer to modify the maintainerAddress\n     */\n    function setPermission(address address_, uint8 permission_)\n        external\n        onlyOwner\n    {\n        if (permission_ == NO_PERMISSION) {\n            delete _permissions[address_];\n        } else {\n            _permissions[address_] = permission_;\n        }\n\n        emit PermissionChanged(address_, permission_);\n    }\n\n    function getPermissions()\n        external\n        view\n        atLeastManager\n        returns (address[] memory, uint8[] memory)\n    {\n        uint8[] memory permissions = new uint8[](maintainers.length);\n        unchecked {\n            for (uint256 i = 0; i < maintainers.length; i++) {\n                permissions[i] = _permissions[maintainers[i]];\n            }\n        }\n        return (maintainers, permissions);\n    }\n\n    function getPermission(address address_) external view returns (uint8) {\n        return _permissions[address_];\n    }\n\n    /***********************************|\n    |               Core                |\n    |__________________________________*/\n    /**\n     * @notice issuer deposit ETH into the contract. only issuer have permission\n     */\n    function deposit() external payable atLeastMaintainer nonReentrant {\n        emit Deposit(_msgSender(), msg.value);\n    }\n\n    /**\n     * issuer withdraws the ETH temporarily stored in the contract through this method.\n     */\n    function withdraw() external onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        payable(_msgSender()).transfer(balance);\n        emit Withdraw(_msgSender(), balance);\n    }\n\n    /***********************************|\n    |               Basic               |\n    |__________________________________*/\n    /**\n     * @notice for the purpose of protecting user assets, under extreme conditions,\n     * the circulation of all tokens in the contract needs to be frozen.\n     * This process is under the supervision of the community.\n     */\n    function emergencyPause() external atLeastManager notSealed {\n        _pause();\n        emit ContractParsed();\n    }\n\n    /**\n     * @notice unpause the contract\n     */\n    function unpause() external atLeastManager notSealed {\n        _unpause();\n        emit ContractUnparsed();\n    }\n\n    /**\n     * @notice when the project is stable enough, the issuer will call sealContract\n     * to give up the permission to call emergencyPause and unpause.\n     */\n    function sealContract() external onlyOwner {\n        contractSealed = true;\n        emit ContractSealed();\n    }\n\n    /***********************************|\n    |               Modifier            |\n    |__________________________________*/\n    /**\n     * @notice only owner or manager has the permission to call this method\n     */\n    modifier atLeastManager() {\n        uint8 permission = _permissions[_msgSender()];\n        require(\n            owner() == _msgSender() || permission == MANAGER,\n            \"not authorized\"\n        );\n        _;\n    }\n    /**\n     * @notice only owner, manager or maintainer has the permission to call this method\n     */\n    modifier atLeastMaintainer() {\n        uint8 permission = _permissions[_msgSender()];\n        require(\n            owner() == _msgSender() ||\n                permission == MAINTAINER ||\n                permission == MANAGER,\n            \"not authorized\"\n        );\n        _;\n    }\n    /**\n     * @notice only owner, manager or maintainer or operator has the permission to call this method\n     */\n    modifier atLeastOperator() {\n        uint8 permission = _permissions[_msgSender()];\n        require(\n            owner() == _msgSender() ||\n                permission == MAINTAINER ||\n                permission == MANAGER ||\n                permission == OPERATOR,\n            \"not authorized\"\n        );\n        _;\n    }\n\n    /**\n     * @notice for security reasons, CA is not allowed to call sensitive methods.\n     */\n    modifier callerIsUser() {\n        require(tx.origin == _msgSender(), \"caller is another contract\");\n        _;\n    }\n\n    /**\n     * @notice function call is only allowed when the contract has not been sealed\n     */\n    modifier notSealed() {\n        require(!contractSealed, \"contract sealed\");\n        _;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Strings.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Address.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
39     },
40     "contracts/hootbase/standard/erc721a/ERC721A.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.0.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC721Extra.sol\";\n\n/**\n * @dev ERC721 token receiver interface.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Extra {\n    // Mask of an entry in packed address data.\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant BITMASK_BURNED = 1 << 224;\n    \n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The tokenId of the next token to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See `_packedOwnershipOf` implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * @dev Returns the starting token ID. \n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to `_startTokenId()`\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view returns (uint256) {\n        return _burnCounter;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        assembly { // Cast aux without masking.\n            auxCasted := aux\n        }\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _unsafePackedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an ownership that has an address and is not burned\n                        // before an ownership that does not have an address and is not burned.\n                        // Hence, curr will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed is zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        return 0;\n    }\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 packed = _unsafePackedOwnershipOf(tokenId);\n        if(packed == 0){\n            revert OwnerQueryForNonexistentToken();\n        }\n        return packed;\n    }\n\n    /**\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & BITMASK_BURNED != 0;\n    }\n\n    /**\n     * Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n    function unsafeOwnerOf(uint256 tokenId) public view virtual returns (address) {\n        return address(uint160(_unsafePackedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev Casts the address to uint256 without masking.\n     */\n    function _addressToUint256(address value) private pure returns (uint256 result) {\n        assembly {\n            result := value\n        }\n    }\n\n    /**\n     * @dev Casts the boolean to uint256 without branching.\n     */\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\n        assembly {\n            result := value\n        }\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the balance and number minted.\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _addressToUint256(to) |\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (to.code.length != 0) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex < end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex < end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the balance and number minted.\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _addressToUint256(to) |\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            do {\n                emit Transfer(address(0), to, updatedIndex++);\n            } while (updatedIndex < end);\n\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\n            isApprovedForAll(from, _msgSenderERC721A()) ||\n            getApproved(tokenId) == _msgSenderERC721A());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        delete _tokenApprovals[tokenId];\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _addressToUint256(to) |\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\n                BITMASK_NEXT_INITIALIZED;\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\n                isApprovedForAll(from, _msgSenderERC721A()) ||\n                getApproved(tokenId) == _msgSenderERC721A());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        delete _tokenApprovals[tokenId];\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _addressToUint256(from) |\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\n                BITMASK_BURNED | \n                BITMASK_NEXT_INITIALIZED;\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length, \n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n            ptr := add(mload(0x40), 128)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, ptr)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := ptr\n\n            // We write the string from the rightmost digit to the leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // Costs a bit more than early returning for the zero case,\n            // but cheaper in terms of deployment and overall runtime costs.\n            for { \n                // Initialize and perform the first pass without check.\n                let temp := value\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\n                ptr := sub(ptr, 1)\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n            } temp { \n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n            } { // Body of the for loop.\n                ptr := sub(ptr, 1)\n                mstore8(ptr, add(48, mod(temp, 10)))\n            }\n            \n            let length := sub(end, ptr)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            ptr := sub(ptr, 32)\n            // Store the length.\n            mstore(ptr, length)\n        }\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
45     },
46     "contracts/hootbase/standard/erc721a/IERC721Extra.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.0.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721Extra {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/utils/Context.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
57     },
58     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
60     },
61     "@openzeppelin/contracts/access/Ownable.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
63     },
64     "@openzeppelin/contracts/security/Pausable.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
66     },
67     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
69     }
70   },
71   "settings": {
72     "optimizer": {
73       "enabled": true,
74       "runs": 200
75     },
76     "outputSelection": {
77       "*": {
78         "*": [
79           "evm.bytecode",
80           "evm.deployedBytecode",
81           "abi"
82         ]
83       }
84     }
85   }
86 }}