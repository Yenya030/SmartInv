1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/HONKLER.sol": {
5       "content": "/**\r\n\r\n    Website: ClownWorldPepe.com\r\n    Twitter: https://twitter.com/ClownWorldPepe_\r\n    Telegram: https://t.me/ClownWorldPepe\r\n     \r\n**/\r\n\r\npragma solidity 0.8.2;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ninterface IUniswapV2Factory {\r\n   function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n   function factory() external pure returns (address);\r\n   function WETH() external pure returns (address);\r\n   function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n   function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract HONKLER is Ownable, ERC20 {\r\n\tusing SafeMath for uint256;\r\n\t\r\n    mapping (address => uint256) public _rOwned;\r\n    mapping (address => uint256) public _tOwned;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n\tmapping (address => bool) public _isExcludedFromMaxTokenPerWallet;\r\n    mapping (address => bool) public _isExcludedFromReward;\r\n\tmapping (address => bool) public _automatedMarketMakerPairs;\r\n\t\r\n    address[] private _excluded;\r\n\taddress public marketingWallet = payable(0xBf4A0c2325583C444307Fd81ADAa194B36A017De);\r\n\t\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 555555555555 * (10**18);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\t\r\n\tuint256 public liquidityFeeTotal;\r\n    uint256 public marketingFeeTotal;\r\n\t\r\n\tuint256[] public liquidityFee;\r\n\tuint256[] public marketingFee;\r\n\tuint256[] public reflectionFee;\r\n\t\r\n\tuint256 private _liquidityFee;\r\n\tuint256 private _marketingFee;\r\n\tuint256 private _reflectionFee;\r\n\t\r\n    IUniswapV2Router public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\t\r\n\tbool private swapping;\r\n\tbool public swapAndLiquifyEnabled;\r\n\t\r\n    uint256 public swapTokensAtAmount = 500000000 * (10**18);\r\n\tuint256 public maxTokenPerWallet = 11111111110 * (10**18);\r\n\t\r\n\tevent SwapTokensAmountUpdated(uint256 amount);\r\n\tevent MarketingWalletUpdated(address newWallet);\r\n\tevent SwapAndLiquifyStatusUpdated(bool status);\r\n\tevent AutomatedMarketMakerPairUpdated(address pair, bool status);\r\n\tevent MigrateTokens(address token, address receiver, uint256 amount);\r\n\tevent TransferETH(address recipient, uint256 amount);\r\n\tevent LiquidityFeeUpdated(uint256 buy, uint256 sell, uint256 p2p);\r\n\tevent MarketingFeeUpdated(uint256 buy, uint256 sell, uint256 p2p);\r\n\tevent ReflectionFeeUpdated(uint256 buy, uint256 sell, uint256 p2p);\r\n\t\r\n    constructor (address owner) ERC20(\"Clown World Pepe\", \"$HONKLER\") {\r\n        _rOwned[owner] = _rTotal;\r\n        \r\n        uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n\t\t_setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\t\t\r\n        _isExcludedFromFee[owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\t\t\r\n\t\t_isExcludedFromMaxTokenPerWallet[address(uniswapV2Pair)] = true;\r\n\t\t_isExcludedFromMaxTokenPerWallet[address(this)] = true;\r\n\t\t_isExcludedFromMaxTokenPerWallet[owner] = true;\r\n\t\t\r\n\t\tliquidityFee.push(100);\r\n\t\tliquidityFee.push(100);\r\n\t\tliquidityFee.push(0);\r\n\t\t\r\n\t\tmarketingFee.push(200);\r\n\t\tmarketingFee.push(200);\r\n\t\tmarketingFee.push(0);\r\n\r\n\t\treflectionFee.push(100);\r\n\t\treflectionFee.push(100);\r\n\t\treflectionFee.push(0);\r\n\t\t\r\n\t\t_excludeFromReward(address(uniswapV2Pair));\r\n\t\t_excludeFromReward(address(this));\r\n\t\t\r\n\t\tswapAndLiquifyEnabled = true;\r\n\t\t\r\n        emit Transfer(address(0), owner, _tTotal);\r\n    }\r\n\t\r\n\treceive() external payable {}\r\n\r\n    function totalSupply() public override pure returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\t\r\n\tfunction excludeFromFee(address account, bool status) external onlyOwner {\r\n\t    require(_isExcludedFromFee[account] != status, \"Account is already the value of 'status'\");\r\n\t    _isExcludedFromFee[account] = status;\r\n\t}\r\n\t\r\n\tfunction excludeFromMaxTokenPerWallet(address account, bool status) external onlyOwner {\r\n\t    require(_isExcludedFromMaxTokenPerWallet[account] != status, \"Account is already the value of 'status'\");\r\n\t    _isExcludedFromMaxTokenPerWallet[account] = status;\r\n\t}\r\n\t\r\n\tfunction excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcludedFromReward[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromReward[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\t\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromReward[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromReward[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\t\r\n\tfunction setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n  \t    require(amount <= totalSupply(), \"Amount cannot be over the total supply.\");\r\n\t\t\r\n\t\tswapTokensAtAmount = amount;\r\n\t\temit SwapTokensAmountUpdated(amount);\r\n  \t}\r\n\t\r\n\tfunction setMarketingWallet(address payable _marketingWallet) external onlyOwner{\r\n\t   require(_marketingWallet != address(0), \"Zero address\");\r\n\t   \r\n\t   marketingWallet = _marketingWallet;\r\n\t   emit MarketingWalletUpdated(_marketingWallet);\r\n    }\r\n\t\r\n\tfunction setSwapAndLiquifyEnabled(bool status) external onlyOwner {\r\n        require(swapAndLiquifyEnabled != status, \"Account is already the value of 'status'\");\r\n\t\t\r\n\t\tswapAndLiquifyEnabled = status;\r\n\t\temit SwapAndLiquifyStatusUpdated(status);\r\n    }\r\n\t\r\n\tfunction setAutomatedMarketMakerPair(address pair, bool status) external onlyOwner {\r\n        require(_automatedMarketMakerPairs[pair] != status, \"Automated market maker pair is already set to that value\");\r\n        require(pair != address(uniswapV2Pair), \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\t\t\r\n\t\t_automatedMarketMakerPairs[address(pair)] = status;\r\n\t\temit AutomatedMarketMakerPairUpdated(pair, status);\r\n    }\r\n\t\r\n\tfunction setLiquidityFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n\t    require(marketingFee[0] + reflectionFee[0] + buy  <= 600, \"Max fee limit reached for 'BUY'\");\r\n\t\trequire(marketingFee[1] + reflectionFee[1] + sell <= 600, \"Max fee limit reached for 'SELL'\");\r\n\t\trequire(marketingFee[2] + reflectionFee[2] + p2p  <= 600, \"Max fee limit reached for 'P2P'\");\r\n\t\t\r\n\t\tliquidityFee[0] = buy;\r\n\t\tliquidityFee[1] = sell;\r\n\t\tliquidityFee[2] = p2p;\r\n\t\t\r\n\t\temit LiquidityFeeUpdated(buy, sell, p2p);\r\n\t}\r\n\t\r\n\tfunction setMarketingFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n\t    require(liquidityFee[0] + reflectionFee[0] + buy  <= 600, \"Max fee limit reached for 'BUY'\");\r\n\t\trequire(liquidityFee[1] + reflectionFee[1] + sell <= 600, \"Max fee limit reached for 'SELL'\");\r\n\t\trequire(liquidityFee[2] + reflectionFee[2] + p2p  <= 600, \"Max fee limit reached for 'P2P'\");\r\n\t\t\r\n\t\tmarketingFee[0] = buy;\r\n\t\tmarketingFee[1] = sell;\r\n\t\tmarketingFee[2] = p2p;\r\n\t\t\r\n\t\temit MarketingFeeUpdated(buy, sell, p2p);\r\n\t}\r\n\t\r\n\tfunction setReflectionFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n\t    require(liquidityFee[0] + marketingFee[0] + buy  <= 600, \"Max fee limit reached for 'BUY'\");\r\n\t\trequire(liquidityFee[1] + marketingFee[1] + sell <= 600, \"Max fee limit reached for 'SELL'\");\r\n\t\trequire(liquidityFee[2] + marketingFee[2] + p2p  <= 600, \"Max fee limit reached for 'P2P'\");\r\n\t\t\r\n\t\treflectionFee[0] = buy;\r\n\t\treflectionFee[1] = sell;\r\n\t\treflectionFee[2] = p2p;\r\n\t\t\r\n\t\temit ReflectionFeeUpdated(buy, sell, p2p);\r\n\t}\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        if (_isExcludedFromReward[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\t\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\t\r\n\tfunction _excludeFromReward(address account) internal {\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromReward[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\t\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(_automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        _automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\t\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\t\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tMarketing, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tMarketing);\r\n    }\r\n\t\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n\t\tuint256 tFee = calculateReflectionFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tMarketing = calculateMarketingFee(tAmount);\r\n\t\t\r\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tMarketing);\r\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\r\n    }\r\n\t\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n\t\t\r\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rMarketing);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\t\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\t\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcludedFromReward[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\t\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\r\n        if(_isExcludedFromReward[address(this)])\r\n           _tOwned[address(this)] = _tOwned[address(this)].add(tMarketing);\r\n    }\r\n\t\r\n    function calculateReflectionFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_reflectionFee).div(10000);\r\n    }\r\n\t\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketingFee).div(10000);\r\n    }\r\n\t\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(10000);\r\n    }\r\n\t\r\n    function removeAllFee() private {\r\n       _reflectionFee = 0;\r\n       _marketingFee = 0;\r\n       _liquidityFee = 0;\r\n    }\r\n\t\r\n    function applyBuyFee() private {\r\n\t   _reflectionFee = reflectionFee[0];\r\n       _marketingFee = marketingFee[0];\r\n       _liquidityFee = liquidityFee[0];\r\n    }\r\n\t\r\n\tfunction applySellFee() private {\r\n\t   _reflectionFee = reflectionFee[1];\r\n       _marketingFee = marketingFee[1];\r\n       _liquidityFee = liquidityFee[1];\r\n    }\r\n\t\r\n\tfunction applyP2PFee() private {\r\n\t   _reflectionFee = reflectionFee[2];\r\n       _marketingFee = marketingFee[2];\r\n       _liquidityFee = liquidityFee[2];\r\n    }\r\n\t\r\n    function _transfer(address from, address to, uint256 amount) internal override{\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\t\r\n\t\tif(!_isExcludedFromMaxTokenPerWallet[to])\r\n\t\t{\r\n            uint256 balanceRecepient = balanceOf(to);\r\n            require(balanceRecepient + amount <= maxTokenPerWallet, \"Exceeds maximum token per wallet limit\");\r\n        }\r\n\t\t\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\t\tbool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\t\t\r\n        if (canSwap && !swapping && _automatedMarketMakerPairs[to] && swapAndLiquifyEnabled) \r\n\t\t{\r\n\t\t    uint256 tokenToLiqudity = liquidityFeeTotal.div(2);\r\n\t\t\tuint256 tokenToMarketing = marketingFeeTotal;\r\n\t\t\tuint256 tokenToSwap = tokenToLiqudity.add(tokenToMarketing);\r\n\t\t\t\r\n\t\t\tif(tokenToSwap >= swapTokensAtAmount) \r\n\t\t\t{\r\n\t\t\t    swapping = true;\r\n\t\t\t\t\r\n\t\t\t\tuint256 initialBalance = address(this).balance;\r\n\t\t\t\tswapTokensForETH(swapTokensAtAmount);\r\n\t\t\t\tuint256 newBalance = address(this).balance.sub(initialBalance);\r\n\t\t\t\t\r\n\t\t\t\tuint256 liqudityPart = newBalance.mul(tokenToLiqudity).div(tokenToSwap);\r\n\t\t\t\tuint256 marketingPart = newBalance - liqudityPart;\r\n\t\t\t\t\r\n\t\t\t\tif(liqudityPart > 0)\r\n\t\t\t\t{\r\n\t\t\t\t    uint256 liqudityToken = swapTokensAtAmount.mul(tokenToLiqudity).div(tokenToSwap);\r\n\t\t\t\t\taddLiquidity(liqudityToken, liqudityPart);\r\n\t\t\t\t\tliquidityFeeTotal = liquidityFeeTotal.sub(liqudityToken).sub(liqudityToken);\r\n\t\t\t\t}\r\n\t\t\t\tif(marketingPart > 0) \r\n\t\t\t\t{\r\n\t\t\t\t    payable(marketingWallet).transfer(marketingPart);\r\n\t\t\t\t\tmarketingFeeTotal = marketingFeeTotal.sub(swapTokensAtAmount.mul(tokenToMarketing).div(tokenToSwap));\r\n\t\t\t\t}\r\n\t\t\t\tswapping = false;\r\n\t\t\t}\r\n        }\r\n\t\t\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to])\r\n\t\t{\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\t\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n\t\t\r\n\t\tif(!takeFee) \r\n\t\t{\r\n\t\t    removeAllFee();\r\n\t\t}\r\n\t\telse if(!_automatedMarketMakerPairs[sender] && !_automatedMarketMakerPairs[recipient])\r\n\t\t{\r\n\t\t    applyP2PFee();\r\n\t\t}\r\n\t\telse if(_automatedMarketMakerPairs[recipient])\r\n\t\t{\r\n\t\t    applySellFee();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    applyBuyFee();\r\n\t\t}\r\n\t\t\r\n        if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) \r\n\t\t{\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } \r\n\t\telse if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) \r\n\t\t{\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } \r\n\t\telse if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) \r\n\t\t{\r\n            _transferStandard(sender, recipient, amount);\r\n        } \r\n\t\telse if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) \r\n\t\t{\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } \r\n\t\telse \r\n\t\t{\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\t\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\r\n        \r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rFee, tFee);\r\n\t\t\r\n\t\tliquidityFeeTotal += tLiquidity;\r\n        marketingFeeTotal += tMarketing;\r\n\t\t\r\n\t\tif(tMarketing.add(tLiquidity) > 0)\r\n\t\t{\r\n\t\t    emit Transfer(sender, address(this), tMarketing.add(tLiquidity));\r\n\t\t}\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\t\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\r\n\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rFee, tFee);\r\n\t\t\r\n\t\tliquidityFeeTotal += tLiquidity;\r\n        marketingFeeTotal += tMarketing;\r\n\t\t\r\n\t\tif(tMarketing.add(tLiquidity) > 0)\r\n\t\t{\r\n\t\t    emit Transfer(sender, address(this), tMarketing.add(tLiquidity));\r\n\t\t}\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\r\n\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rFee, tFee);\r\n\t\t\r\n\t\tliquidityFeeTotal += tLiquidity;\r\n        marketingFeeTotal += tMarketing;\r\n\t\t\r\n\t\tif(tMarketing.add(tLiquidity) > 0)\r\n\t\t{\r\n\t\t    emit Transfer(sender, address(this), tMarketing.add(tLiquidity));\r\n\t\t}\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\t\r\n\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\r\n   \r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rFee, tFee);\r\n\t\t\r\n\t\tliquidityFeeTotal += tLiquidity;\r\n        marketingFeeTotal += tMarketing;\r\n\t\t\r\n\t\tif(tMarketing.add(tLiquidity) > 0)\r\n\t\t{\r\n\t\t    emit Transfer(sender, address(this), tMarketing.add(tLiquidity));\r\n\t\t}\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\t\r\n\tfunction swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\t\t\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\t\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private{\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\t\r\n\tfunction migrateTokens(address token, address receiver, uint256 amount) external onlyOwner{\r\n       require(token != address(0), \"Zero address\");\r\n\t   require(receiver != address(0), \"Zero address\");\r\n\t   require(token != address(this), \"Incorrect Token Address\");\r\n\t   require(IERC20(token).balanceOf(address(this)) >= amount, \"Insufficient balance on contract\");  \r\n\t   \r\n\t   IERC20(token).transfer(address(receiver), amount);\r\n       emit MigrateTokens(token, receiver, amount);\r\n    }\r\n\t\r\n\tfunction resetFee(address receiver) external onlyOwner{\r\n\t   liquidityFeeTotal = 0;\r\n       marketingFeeTotal = 0;\r\n\t   \r\n\t   emit MigrateTokens(address(this), address(receiver), balanceOf(address(this)));\r\n\t   IERC20(address(this)).transfer(address(receiver), balanceOf(address(this)));\r\n    }\r\n\t\r\n\tfunction migrateETH(address payable recipient) external onlyOwner{\r\n\t   require(recipient != address(0), \"Zero address\");\r\n\t   \r\n\t   emit TransferETH(recipient, address(this).balance);\r\n       recipient.transfer(address(this).balance);\r\n    }\r\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}