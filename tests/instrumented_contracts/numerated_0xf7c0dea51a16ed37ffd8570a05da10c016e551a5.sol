1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ethereum/v2/Sale.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./ITrinviNFT.sol\";\n// import \"hardhat/console.sol\";\n\ncontract Sale is Ownable {\n\n  // =============================================================\n  //                            EVENTS\n  // =============================================================\n  event BatchSet(Batch);\n\n  // =============================================================\n  //                            ERRORS\n  // =============================================================\n  error BatchShouldStartAfterLastBatch();\n  error BatchStartMustBeInFuture();\n  error BatchEndMustBeAfterStart();\n  error LastBatchDoesNotEnd();\n  error BatchNotFound();\n  error BatchNotYetStarted();\n  error BatchHasPassed();\n  error InsufficientValueForMint();\n  error NotRegisteredInCurrentBatch();\n  error MintQtyExceedsMaxSale();\n  error MintQtyExceedsMaxSalePerAccount();\n  error MustEndInTheFuture();\n  error BatchAlreadyHasEndDate();\n  error AirdropStartMustBeInFuture();\n  error AirdropNotFound();\n  error NotRegisteredInAirdrop();\n  error MintQtyExceedsMaxQty();\n  error MintQtyExceedsMaxQtyPerAccount();\n  error AirdropNotYetStarted();\n  error AirdropHasPassed();\n\n\n  // =============================================================\n  //                            STRUCTS\n  // =============================================================\n  struct BatchParam {\n    string name;\n    uint256 start;\n    uint256 end; // set end to 0 if no end\n    uint price;\n    uint maxSale; // Set to 0 if no max\n    uint maxSalePerAccount; // Set to 0 if no max\n    bool mustRegister;\n  }\n\n  struct Batch {\n    uint idx;\n    string name;\n    uint256 start;\n    uint256 end; // set end to 0 if no end\n    uint price;\n    uint maxSale; // Set to 0 if no max\n    uint maxSalePerAccount; // Set to 0 if no max\n    uint qtySold; // track the number of qty sold\n    bytes32 whitelistMerkleRoot; //\n    bool mustRegister;\n  }\n\n  struct BatchClaim {\n    uint batchIdx;\n    address claimer;\n    uint qtyClaimed;\n  }\n\n  /// Airdrops does not have have to start and end in sequences like Batch do\n  struct AirdropParam {\n    string name;\n    uint256 start;\n    uint256 end; // set end to 0 if no end\n    uint maxClaim;\n    uint maxClaimPerAccount;\n  }\n\n  struct Airdrop {\n    uint idx;\n    string name;\n    uint256 start;\n    uint256 end; // set end to 0 if no end\n    uint maxClaim;\n    uint maxClaimPerAccount;\n    uint qtyClaimed;\n    bytes32 whitelistMerkleRoot;\n  }\n\n  struct AirdropClaim {\n    uint airdropIdx;\n    address claimer;\n    uint qtyClaimed;\n  }\n\n  // =============================================================\n  //                            STORAGE\n  // =============================================================\n  address public _nftAddress;\n  uint public _lastBatchIdx;\n  uint public _lastAirdropIdx;\n\n  // =============================================================\n  //                            MAPPINGS\n  // =============================================================\n  // id => Batch\n  mapping (uint => Batch) public _batches;\n  mapping (uint => Airdrop) public _airdrops;\n  mapping (uint => mapping(address => BatchClaim)) public _batchClaims;\n  mapping (uint => mapping(address => AirdropClaim)) public _airdropClaims;\n\n\n  // =============================================================\n  //                            MODIFIERS\n  // =============================================================\n  modifier mustSendSufficientValue(uint qty, uint batchIdx) {\n    Batch memory currBatch = _batches[batchIdx];\n    if (msg.value < (currBatch.price * qty)) {\n      revert InsufficientValueForMint();\n    }\n    _;\n  }\n\n  modifier followsBatchRules(uint batchIdx, uint mintQty, bytes32[] calldata merkleProof) {\n    Batch memory currBatch = _batches[batchIdx];\n    if (currBatch.idx == 0) {\n      revert BatchNotFound();\n    }\n    BatchClaim memory batchClaim = _batchClaims[batchIdx][msg.sender];\n    if (!hasStarted(currBatch.start)) {\n      revert BatchNotYetStarted();\n    }\n    if (hasPassed(currBatch.end)) {\n      revert BatchHasPassed();\n    }\n    if (currBatch.mustRegister && !_isInWhitelist(msg.sender, currBatch.whitelistMerkleRoot, merkleProof)) {\n      revert NotRegisteredInCurrentBatch();\n    }\n    if (!doesNotExceedMaxQty(mintQty, currBatch.maxSale, currBatch.qtySold)) {\n      revert MintQtyExceedsMaxSale();\n    }\n    if (!isAllowedToMintQty(mintQty, currBatch.maxSalePerAccount, batchClaim.qtyClaimed)) {\n      revert MintQtyExceedsMaxSalePerAccount();\n    }\n    _;\n  }\n\n  function hasStarted(uint start) internal view returns (bool) {\n    if (start > 0 && block.timestamp < start) {\n      return false;\n    }\n    return true;\n  }\n\n  function hasPassed(uint end) internal view returns (bool) {\n    if (end > 0 && block.timestamp > end) {\n      return true;\n    }\n    return false;\n  }\n\n  function _isInWhitelist(address msgSender, bytes32 whitelistMerkleRoot, bytes32[] calldata merkleProof_) internal pure returns (bool) {\n    bytes32 leaf = keccak256(abi.encodePacked(msgSender));\n    bool isValidProof = MerkleProof.verify(merkleProof_, whitelistMerkleRoot, leaf);\n    return isValidProof;\n  }\n\n  function isAllowedToMintQty(uint qty, uint maxQtyPerAccount, uint qtyMinted) internal pure returns (bool) {\n    if (maxQtyPerAccount == 0) {\n      return true;\n    }\n    uint allowedMintQty = maxQtyPerAccount - qtyMinted;\n    if (qty > allowedMintQty) {\n      return false;\n    }\n    return true;\n  }\n\n  function doesNotExceedMaxQty(uint qty, uint maxQty, uint qtyMinted) internal pure returns (bool) {\n    if (maxQty == 0) {\n      return true;\n    }\n    uint qtyRemaining = maxQty - qtyMinted;\n    if (qty > qtyRemaining) {\n      return false;\n    }\n    return true;\n  }\n\n  modifier followsAirdropRules(uint airdropIdx, uint mintQty, bytes32[] calldata merkleProof) {\n    Airdrop memory airdrop = _airdrops[airdropIdx];\n    AirdropClaim memory airdropClaim = _airdropClaims[airdropIdx][msg.sender];\n    if (!hasStarted(airdrop.start)) {\n      revert AirdropNotYetStarted();\n    }\n    if (hasPassed(airdrop.end)) {\n      revert AirdropHasPassed();\n    }\n    if (!_isInWhitelist(msg.sender, airdrop.whitelistMerkleRoot, merkleProof)) {\n      revert NotRegisteredInAirdrop();\n    }\n    if (!doesNotExceedMaxQty(mintQty, airdrop.maxClaim, airdrop.qtyClaimed)) {\n      revert MintQtyExceedsMaxQty();\n    }\n    if (!isAllowedToMintQty(mintQty, airdrop.maxClaimPerAccount, airdropClaim.qtyClaimed)) {\n      revert MintQtyExceedsMaxQtyPerAccount();\n    }\n    _;\n  }\n\n  constructor(address nftAddress) {\n    _nftAddress = nftAddress;\n  }\n\n  function mintTo(address to, uint qty, uint batchIdx, bytes32[] calldata merkleProof) external payable\n    mustSendSufficientValue(qty, batchIdx)\n    followsBatchRules(batchIdx, qty, merkleProof)\n  {\n    ITrinviNFT(_nftAddress).mintTo(to, qty);\n    recordBatchActivity(msg.sender, batchIdx, qty);\n  }\n\n  function claimAirdrop(address to, uint qty, uint airdropIdx, bytes32[] calldata merkleProof)\n    external\n    followsAirdropRules(airdropIdx, qty, merkleProof)\n  {\n    ITrinviNFT(_nftAddress).mintTo(to, qty);\n    recordAirdropActivity(msg.sender, airdropIdx, qty);\n  }\n\n  function batches(uint index) public view returns (Batch memory) {\n    return _batches[index];\n  }\n\n  function currentBatch() public view returns (Batch memory batch_) {\n    for (uint i = _lastBatchIdx; i > 0; i--) {\n      Batch memory batch = _batches[i];\n      if (block.timestamp >= batch.start && batch.end == 0) {\n        return batch;\n      }\n      if (block.timestamp >= batch.start && block.timestamp < batch.end) {\n        return batch;\n      }\n    }\n  }\n\n  function addBatches(BatchParam[] calldata batches_) external onlyOwner {\n    for (uint i = 0; i < batches_.length; i++) {\n      addBatch(batches_[i]);\n    }\n  }\n\n  function addBatch(BatchParam calldata batchParam) internal {\n    validateBatchParam(batchParam);\n\n    _lastBatchIdx++;\n\n    Batch memory batch = Batch({\n      idx: _lastBatchIdx,\n      name: batchParam.name,\n      start: batchParam.start,\n      end: batchParam.end, // set end to 0 if no end\n      price: batchParam.price,\n      maxSale: batchParam.maxSale, // Set to 0 if no max\n      maxSalePerAccount: batchParam.maxSalePerAccount, // Set to 0 if no max\n      mustRegister: batchParam.mustRegister,\n      whitelistMerkleRoot: bytes32(0),\n      qtySold: 0 // track the number of qty sold\n    });\n    _batches[_lastBatchIdx] = batch;\n  }\n\n  function setLastBatchEnd(uint batchEnd_) external onlyOwner {\n    Batch memory batch = _batches[_lastBatchIdx];\n    if (batch.end > 0) {\n      revert BatchAlreadyHasEndDate();\n    }\n    if (batchEnd_ < batch.start) {\n      revert BatchEndMustBeAfterStart();\n    }\n    batch.end = batchEnd_;\n    _batches[_lastBatchIdx] = batch;\n  }\n\n  function validateBatchParam(BatchParam memory batch) internal view {\n    if (batch.start < block.timestamp) {\n      revert BatchStartMustBeInFuture();\n    }\n    if (batch.end > 0 && batch.start > batch.end) {\n      revert BatchEndMustBeAfterStart();\n    }\n    if (_lastBatchIdx > 0) {\n      Batch memory lastBatch = _batches[_lastBatchIdx];\n      if (lastBatch.end == 0) {\n        revert LastBatchDoesNotEnd();\n      }\n      if (batch.start <= lastBatch.end) {\n        revert BatchShouldStartAfterLastBatch();\n      }\n    }\n  }\n\n  function registerAddressesToBatch(bytes32 whitelistMerkleRoot, uint batchIdx) external onlyOwner {\n    Batch memory batch = _batches[batchIdx];\n    if (batch.idx == 0) {\n      revert BatchNotFound();\n    }\n    batch.whitelistMerkleRoot = whitelistMerkleRoot;\n    _batches[batchIdx] = batch;\n  }\n\n  function isInBatchWhitelist(address address_, uint batchIdx, bytes32[] calldata merkleProof) external view returns (bool) {\n    Batch memory batch = _batches[batchIdx];\n    if (batch.idx == 0) {\n      revert BatchNotFound();\n    }\n    return _isInWhitelist(address_, batch.whitelistMerkleRoot, merkleProof);\n  }\n\n  function isInAirdropWhitelist(address address_, uint airdropIdx, bytes32[] calldata merkleProof) external view returns (bool) {\n    Airdrop memory airdrop = _airdrops[airdropIdx];\n    if (airdrop.idx == 0) {\n      revert AirdropNotFound();\n    }\n    return _isInWhitelist(address_, airdrop.whitelistMerkleRoot, merkleProof);\n  }\n\n  function recordBatchActivity(address msgSender, uint batchIdx, uint mintQty) internal returns (BatchClaim memory claim) {\n    claim = _batchClaims[batchIdx][msgSender];\n    if (claim.claimer == address(0)) {\n      claim.batchIdx = batchIdx;\n      claim.claimer = msgSender;\n    }\n    claim.qtyClaimed = claim.qtyClaimed + mintQty;\n    _batchClaims[batchIdx][msgSender] = claim;\n\n    Batch memory batch = _batches[batchIdx];\n    batch.qtySold += mintQty;\n    _batches[batchIdx] = batch;\n\n    return claim;\n  }\n  \n  function recordAirdropActivity(address msgSender, uint airdropIdx, uint mintQty) internal returns (AirdropClaim memory claim) {\n    claim = _airdropClaims[airdropIdx][msgSender];\n    if (claim.claimer == address(0)) {\n      claim.airdropIdx = airdropIdx;\n      claim.claimer = msgSender;\n    }\n    claim.qtyClaimed += mintQty;\n    _airdropClaims[airdropIdx][msgSender] = claim;\n\n    Airdrop memory airdrop = _airdrops[airdropIdx];\n    airdrop.qtyClaimed += mintQty;\n    _airdrops[airdropIdx] = airdrop;\n\n    return claim;\n  }\n\n  function addAirdrops(AirdropParam[] calldata airdrops_) external onlyOwner {\n    for (uint i = 0; i < airdrops_.length; i++) {\n      addAirdrop(airdrops_[i]);\n    }\n  }\n\n  function addAirdrop(AirdropParam calldata airdropParam) internal {\n    validateAirdropParam(airdropParam);\n\n    _lastAirdropIdx++;\n\n    Airdrop memory airdrop = Airdrop({\n      idx: _lastAirdropIdx,\n      name: airdropParam.name,\n      start: airdropParam.start,\n      end: airdropParam.end, // set end to 0 if no end\n      maxClaim: airdropParam.maxClaim, // Set to 0 if no max\n      maxClaimPerAccount: airdropParam.maxClaimPerAccount, // Set to 0 if no max\n      whitelistMerkleRoot: bytes32(0),\n      qtyClaimed: 0 // track the number of qty sold\n    });\n    _airdrops[_lastAirdropIdx] = airdrop;\n  }\n\n  function setAirdropEnd(uint airdropIdx, uint end) external onlyOwner {\n    Airdrop memory airdrop = _airdrops[airdropIdx];\n    if (airdrop.idx == 0) {\n      revert AirdropNotFound();\n    }\n    if (block.timestamp > end) {\n      revert MustEndInTheFuture();\n    }\n    airdrop.end = end;\n    _airdrops[airdropIdx] = airdrop;\n  }\n\n  function validateAirdropParam(AirdropParam memory airdrop) internal view {\n    if (airdrop.start < block.timestamp) {\n      revert AirdropStartMustBeInFuture();\n    }\n  }\n\n  function registerAddressesToAirdrop(bytes32 whitelistMerkleRoot, uint airdropIdx) external onlyOwner {\n    Airdrop memory airdrop = _airdrops[airdropIdx];\n    if (airdrop.idx == 0) {\n      revert AirdropNotFound();\n    }\n    airdrop.whitelistMerkleRoot = whitelistMerkleRoot;\n    _airdrops[airdropIdx] = airdrop;\n  }\n\n  /**\n    * Withdraw all contract's balance to specified address\n    */\n  function withdraw(address to) public onlyOwner {\n    address payable receiver = payable(to);\n    receiver.transfer(address(this).balance);\n  }\n}"
6     },
7     "contracts/ethereum/v2/ITrinviNFT.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface ITrinviNFT {\n\n  // Modifiers:\n  // - OnlySaleContract\n  // - IsInitialized\n  function mintTo(address to, uint qty) external;\n\n  // Modifiers:\n  // OnlyOwner\n  //\n  // After called successfully, `isInitialized()` should return true\n  function initialize(address saleContract) external;\n\n  function saleContractAddress() external view returns (address);\n\n  // Returns true after `setSaleContract()` is called\n  function isInitialized() external view returns (bool);\n\n}"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": true,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     },
37     "libraries": {}
38   }
39 }}