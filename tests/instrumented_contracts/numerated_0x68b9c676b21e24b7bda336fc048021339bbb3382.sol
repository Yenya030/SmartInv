1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/Pausable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Address.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Counters.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Strings.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
27     },
28     "contracts/ERC3525.sol": {
29       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./IERC721.sol\";\r\nimport \"./IERC3525.sol\";\r\nimport \"./IERC721Receiver.sol\";\r\nimport \"./IERC3525Receiver.sol\";\r\nimport \"./extensions/IERC721Enumerable.sol\";\r\nimport \"./extensions/IERC721Metadata.sol\";\r\nimport \"./extensions/IERC3525Metadata.sol\";\r\nimport \"./periphery/interface/IERC3525MetadataDescriptor.sol\";\r\n\r\ncontract ERC3525 is Context, IERC3525Metadata, IERC721Enumerable {\r\n    using Strings for address;\r\n    using Strings for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    event SetMetadataDescriptor(address indexed metadataDescriptor);\r\n\r\n    struct TokenData {\r\n        uint256 id;\r\n        uint256 slot;\r\n        uint256 balance;\r\n        address owner;\r\n        address approved;\r\n        address[] valueApprovals;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint256[] ownedTokens;\r\n        mapping(uint256 => uint256) ownedTokensIndex;\r\n        mapping(address => bool) approvals;\r\n    }\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    Counters.Counter private _tokenIdGenerator;\r\n\r\n    // id => (approval => allowance)\r\n    // @dev _approvedValues cannot be defined within TokenData, cause struct containing mappings cannot be constructed.\r\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\r\n\r\n    TokenData[] private _allTokens;\r\n\r\n    // key: id\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    IERC3525MetadataDescriptor public metadataDescriptor;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n         _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC3525).interfaceId ||\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC3525Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId || \r\n            interfaceId == type(IERC721Metadata).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals the token uses for value.\r\n     */\r\n    function valueDecimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\r\n        _requireMinted(tokenId_);\r\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\r\n        require(owner_ != address(0), \"ERC3525: invalid token ID\");\r\n    }\r\n\r\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function contractURI() public view virtual override returns (string memory) {\r\n        string memory baseURI = _baseURI();\r\n        return \r\n            address(metadataDescriptor) != address(0) ? \r\n                metadataDescriptor.constructContractURI() :\r\n                bytes(baseURI).length > 0 ? \r\n                    string(abi.encodePacked(baseURI, \"contract/\", Strings.toHexString(address(this)))) : \r\n                    \"\";\r\n    }\r\n\r\n    function slotURI(uint256 slot_) public view virtual override returns (string memory) {\r\n        string memory baseURI = _baseURI();\r\n        return \r\n            address(metadataDescriptor) != address(0) ? \r\n                metadataDescriptor.constructSlotURI(slot_) : \r\n                bytes(baseURI).length > 0 ? \r\n                    string(abi.encodePacked(baseURI, \"slot/\", slot_.toString())) : \r\n                    \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId_);\r\n        string memory baseURI = _baseURI();\r\n        return \r\n            address(metadataDescriptor) != address(0) ? \r\n                metadataDescriptor.constructTokenURI(tokenId_) : \r\n                bytes(baseURI).length > 0 ? \r\n                    string(abi.encodePacked(baseURI, tokenId_.toString())) : \r\n                    \"\";\r\n    }\r\n\r\n    function approve(uint256 tokenId_, address to_, uint256 value_) public payable virtual override {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        require(to_ != owner, \"ERC3525: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || ERC3525.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC3525: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approveValue(tokenId_, to_, value_);\r\n    }\r\n\r\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _approvedValues[tokenId_][operator_];\r\n    }\r\n\r\n    function transferFrom(\r\n        uint256 fromTokenId_,\r\n        address to_,\r\n        uint256 value_\r\n    ) public payable virtual override returns (uint256) {\r\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\r\n\r\n        uint256 newTokenId = _createDerivedTokenId(fromTokenId_);\r\n        _mint(to_, newTokenId, ERC3525.slotOf(fromTokenId_), 0);\r\n        _transferValue(fromTokenId_, newTokenId, value_);\r\n\r\n        return newTokenId;\r\n    }\r\n\r\n    function transferFrom(\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 value_\r\n    ) public payable virtual override {\r\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\r\n        _transferValue(fromTokenId_, toTokenId_, value_);\r\n    }\r\n\r\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\r\n        require(owner_ != address(0), \"ERC3525: balance query for the zero address\");\r\n        return _addressData[owner_].ownedTokens.length;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) public payable virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\r\n        _transferTokenId(from_, to_, tokenId_);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        bytes memory data_\r\n    ) public payable virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\r\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) public payable virtual override {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    function approve(address to_, uint256 tokenId_) public payable virtual override {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        require(to_ != owner, \"ERC3525: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || ERC3525.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC3525: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to_, tokenId_);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\r\n    }\r\n\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator_, approved_);\r\n    }\r\n\r\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\r\n        return _addressData[owner_].approvals[operator_];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\r\n        require(index_ < ERC3525.totalSupply(), \"ERC3525: global index out of bounds\");\r\n        return _allTokens[index_].id;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\r\n        require(index_ < ERC3525.balanceOf(owner_), \"ERC3525: owner index out of bounds\");\r\n        return _addressData[owner_].ownedTokens[index_];\r\n    }\r\n\r\n    function _setApprovalForAll(\r\n        address owner_,\r\n        address operator_,\r\n        bool approved_\r\n    ) internal virtual {\r\n        require(owner_ != operator_, \"ERC3525: approve to caller\");\r\n\r\n        _addressData[owner_].approvals[operator_] = approved_;\r\n\r\n        emit ApprovalForAll(owner_, operator_, approved_);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\r\n        _requireMinted(tokenId_);\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        return (\r\n            operator_ == owner ||\r\n            ERC3525.isApprovedForAll(owner, operator_) ||\r\n            ERC3525.getApproved(tokenId_) == operator_\r\n        );\r\n    }\r\n\r\n    function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual {\r\n        uint256 currentAllowance = ERC3525.allowance(tokenId_, operator_);\r\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= value_, \"ERC3525: insufficient allowance\");\r\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\r\n        }\r\n    }\r\n\r\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\r\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\r\n    }\r\n\r\n    function _requireMinted(uint256 tokenId_) internal view virtual {\r\n        require(_exists(tokenId_), \"ERC3525: invalid token ID\");\r\n    }\r\n\r\n    function _mint(address to_, uint256 slot_, uint256 value_) internal virtual returns (uint256) {\r\n        uint256 tokenId = _createOriginalTokenId();\r\n        _mint(to_, tokenId, slot_, value_);  \r\n        return tokenId;\r\n    }\r\n\r\n    function _mint(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual {\r\n        require(to_ != address(0), \"ERC3525: mint to the zero address\");\r\n        require(tokenId_ != 0, \"ERC3525: cannot mint zero tokenId\");\r\n        require(!_exists(tokenId_), \"ERC3525: token already minted\");\r\n\r\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\r\n        __mintToken(to_, tokenId_, slot_);\r\n        __mintValue(tokenId_, value_);\r\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\r\n    }\r\n\r\n    function _mintValue(uint256 tokenId_, uint256 value_) internal virtual {\r\n        _requireMinted(tokenId_);\r\n\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        uint256 slot = ERC3525.slotOf(tokenId_);\r\n        _beforeValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\r\n        __mintValue(tokenId_, value_);\r\n        _afterValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\r\n    }\r\n\r\n    function __mintValue(uint256 tokenId_, uint256 value_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].balance += value_;\r\n        emit TransferValue(0, tokenId_, value_);\r\n    }\r\n\r\n    function __mintToken(address to_, uint256 tokenId_, uint256 slot_) private {\r\n        TokenData memory tokenData = TokenData({\r\n            id: tokenId_,\r\n            slot: slot_,\r\n            balance: 0,\r\n            owner: to_,\r\n            approved: address(0),\r\n            valueApprovals: new address[](0)\r\n        });\r\n\r\n        _addTokenToAllTokensEnumeration(tokenData);\r\n        _addTokenToOwnerEnumeration(to_, tokenId_);\r\n\r\n        emit Transfer(address(0), to_, tokenId_);\r\n        emit SlotChanged(tokenId_, 0, slot_);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_) internal virtual {\r\n        _requireMinted(tokenId_);\r\n\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        address owner = tokenData.owner;\r\n        uint256 slot = tokenData.slot;\r\n        uint256 value = tokenData.balance;\r\n\r\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\r\n\r\n        _clearApprovedValues(tokenId_);\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\r\n        _removeTokenFromAllTokensEnumeration(tokenId_);\r\n\r\n        emit TransferValue(tokenId_, 0, value);\r\n        emit SlotChanged(tokenId_, slot, 0);\r\n        emit Transfer(owner, address(0), tokenId_);\r\n\r\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\r\n    }\r\n\r\n    function _burnValue(uint256 tokenId_, uint256 burnValue_) internal virtual {\r\n        _requireMinted(tokenId_);\r\n\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        address owner = tokenData.owner;\r\n        uint256 slot = tokenData.slot;\r\n        uint256 value = tokenData.balance;\r\n\r\n        require(value >= burnValue_, \"ERC3525: burn value exceeds balance\");\r\n\r\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\r\n        \r\n        tokenData.balance -= burnValue_;\r\n        emit TransferValue(tokenId_, 0, burnValue_);\r\n        \r\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\r\n\r\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\r\n        _addressData[to_].ownedTokens.push(tokenId_);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\r\n\r\n        AddressData storage ownerData = _addressData[from_];\r\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\r\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\r\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\r\n\r\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\r\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\r\n\r\n        delete ownerData.ownedTokensIndex[tokenId_];\r\n        ownerData.ownedTokens.pop();\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\r\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\r\n        _allTokens.push(tokenData_);\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId_];\r\n        _allTokens.pop();\r\n    }\r\n\r\n    function _approve(address to_, uint256 tokenId_) internal virtual {\r\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\r\n        emit Approval(ERC3525.ownerOf(tokenId_), to_, tokenId_);\r\n    }\r\n\r\n    function _approveValue(\r\n        uint256 tokenId_,\r\n        address to_,\r\n        uint256 value_\r\n    ) internal virtual {\r\n        require(to_ != address(0), \"ERC3525: approve value to the zero address\");\r\n        if (!_existApproveValue(to_, tokenId_)) {\r\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\r\n        }\r\n        _approvedValues[tokenId_][to_] = value_;\r\n\r\n        emit ApprovalValue(tokenId_, to_, value_);\r\n    }\r\n\r\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        uint256 length = tokenData.valueApprovals.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address approval = tokenData.valueApprovals[i];\r\n            delete _approvedValues[tokenId_][approval];\r\n        }\r\n    }\r\n\r\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\r\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _transferValue(\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 value_\r\n    ) internal virtual {\r\n        require(_exists(fromTokenId_), \"ERC3525: transfer from invalid token ID\");\r\n        require(_exists(toTokenId_), \"ERC3525: transfer to invalid token ID\");\r\n\r\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\r\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\r\n\r\n        require(fromTokenData.balance >= value_, \"ERC3525: insufficient balance for transfer\");\r\n        require(fromTokenData.slot == toTokenData.slot, \"ERC3525: transfer to token with different slot\");\r\n\r\n        _beforeValueTransfer(\r\n            fromTokenData.owner,\r\n            toTokenData.owner,\r\n            fromTokenId_,\r\n            toTokenId_,\r\n            fromTokenData.slot,\r\n            value_\r\n        );\r\n\r\n        fromTokenData.balance -= value_;\r\n        toTokenData.balance += value_;\r\n\r\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\r\n\r\n        _afterValueTransfer(\r\n            fromTokenData.owner,\r\n            toTokenData.owner,\r\n            fromTokenId_,\r\n            toTokenId_,\r\n            fromTokenData.slot,\r\n            value_\r\n        );\r\n\r\n        require(\r\n            _checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \"\"),\r\n            \"ERC3525: transfer to non ERC3525Receiver\"\r\n        );\r\n    }\r\n\r\n    function _transferTokenId(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) internal virtual {\r\n        require(ERC3525.ownerOf(tokenId_) == from_, \"ERC3525: transfer from invalid owner\");\r\n        require(to_ != address(0), \"ERC3525: transfer to the zero address\");\r\n\r\n        uint256 slot = ERC3525.slotOf(tokenId_);\r\n        uint256 value = ERC3525.balanceOf(tokenId_);\r\n\r\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\r\n\r\n        _approve(address(0), tokenId_);\r\n        _clearApprovedValues(tokenId_);\r\n\r\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\r\n        _addTokenToOwnerEnumeration(to_, tokenId_);\r\n\r\n        emit Transfer(from_, to_, tokenId_);\r\n\r\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\r\n    }\r\n\r\n    function _safeTransferTokenId(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        bytes memory data_\r\n    ) internal virtual {\r\n        _transferTokenId(from_, to_, tokenId_);\r\n        require(\r\n            _checkOnERC721Received(from_, to_, tokenId_, data_),\r\n            \"ERC3525: transfer to non ERC721Receiver\"\r\n        );\r\n    }\r\n\r\n    function _checkOnERC3525Received( \r\n        uint256 fromTokenId_, \r\n        uint256 toTokenId_, \r\n        uint256 value_, \r\n        bytes memory data_\r\n    ) private returns (bool) {\r\n        address to = ERC3525.ownerOf(toTokenId_);\r\n        if (to.isContract() && IERC165(to).supportsInterface(type(IERC3525Receiver).interfaceId)) {\r\n            try\r\n                IERC3525Receiver(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_) returns (bytes4 retval) {\r\n                return retval == IERC3525Receiver.onERC3525Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert( \"ERC3525: transfer to non ERC3525Receiver\");\r\n                } else {\r\n                    // solhint-disable-next-line\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from_ address representing the previous owner of the given token ID\r\n     * @param to_ target address that will receive the tokens\r\n     * @param tokenId_ uint256 ID of the token to be transferred\r\n     * @param data_ bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        bytes memory data_\r\n    ) private returns (bool) {\r\n        if (to_.isContract() && IERC165(to_).supportsInterface(type(IERC721Receiver).interfaceId)) {\r\n            try \r\n                IERC721Receiver(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver\");\r\n                } else {\r\n                    // solhint-disable-next-line\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* solhint-disable */\r\n    function _beforeValueTransfer(\r\n        address from_,\r\n        address to_,\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 slot_,\r\n        uint256 value_\r\n    ) internal virtual {}\r\n\r\n    function _afterValueTransfer(\r\n        address from_,\r\n        address to_,\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 slot_,\r\n        uint256 value_\r\n    ) internal virtual {}\r\n    /* solhint-enable */\r\n\r\n    function _setMetadataDescriptor(address metadataDescriptor_) internal virtual {\r\n        metadataDescriptor = IERC3525MetadataDescriptor(metadataDescriptor_);\r\n        emit SetMetadataDescriptor(metadataDescriptor_);\r\n    }\r\n\r\n    function _createOriginalTokenId() internal virtual returns (uint256) {\r\n         _tokenIdGenerator.increment();\r\n        return _tokenIdGenerator.current();\r\n    }\r\n\r\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\r\n        fromTokenId_;\r\n        return _createOriginalTokenId();\r\n    }\r\n}\r\n"
30     },
31     "contracts/extensions/IERC3525Metadata.sol": {
32       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC3525.sol\";\r\nimport \"./IERC721Metadata.sol\";\r\n\r\n/**\r\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\r\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\r\n *  (URI) for the ERC3525 contract as well as a specified slot.\r\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\r\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\r\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\r\n *  to any resource stored in a centralized system.\r\n *  See https://eips.ethereum.org/EIPS/eip-3525\r\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\r\n */\r\ninterface IERC3525Metadata is IERC3525, IERC721Metadata {\r\n    /**\r\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\r\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\r\n     *  header `data:application/json;`.\r\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\r\n     * @return The JSON formatted URI of the current ERC3525 contract\r\n     */\r\n    function contractURI() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\r\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\r\n     *  `data:application/json;`.\r\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\r\n     * @return The JSON formatted URI of `_slot`\r\n     */\r\n    function slotURI(uint256 _slot) external view returns (string memory);\r\n}\r\n"
33     },
34     "contracts/extensions/IERC721Enumerable.sol": {
35       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /** \r\n     * @notice Count NFTs tracked by this contract\r\n     * @return A count of valid NFTs tracked by this contract, where each one of\r\n     *  them has an assigned and queryable owner not equal to the zero address\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /** \r\n     * @notice Enumerate valid NFTs\r\n     * @dev Throws if `_index` >= `totalSupply()`.\r\n     * @param _index A counter less than `totalSupply()`\r\n     * @return The token identifier for the `_index`th NFT,\r\n     *  (sort order not specified)\r\n     */\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    /** \r\n     * @notice Enumerate NFTs assigned to an owner\r\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n     *  `_owner` is the zero address, representing invalid NFTs.\r\n     * @param _owner An address where we are interested in NFTs owned by them\r\n     * @param _index A counter less than `balanceOf(_owner)`\r\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n     *  (sort order not specified)\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n"
36     },
37     "contracts/extensions/IERC721Metadata.sol": {
38       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @notice A descriptive name for a collection of NFTs in this contract\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice An abbreviated name for NFTs in this contract\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n     *  Metadata JSON Schema\".\r\n     */\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n"
39     },
40     "contracts/IERC3525.sol": {
41       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-3525 Semi-Fungible Token Standard\r\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\r\n * Note: the ERC-165 identifier for this interface is 0xc97ae3d5.\r\n */\r\ninterface IERC3525 is IERC165, IERC721 {\r\n    /**\r\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\r\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\r\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\r\n     * @param _fromTokenId The token id to transfer value from\r\n     * @param _toTokenId The token id to transfer value to\r\n     * @param _value The transferred value\r\n     */\r\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\r\n\r\n    /**\r\n     * @dev MUST emits when the approval value of a token is set or changed.\r\n     * @param _tokenId The token to approve\r\n     * @param _operator The operator to approve for\r\n     * @param _value The maximum value that `_operator` is allowed to manage\r\n     */\r\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\r\n\r\n    /**\r\n     * @dev MUST emit when the slot of a token is set or changed.\r\n     * @param _tokenId The token of which slot is set or changed\r\n     * @param _oldSlot The previous slot of the token\r\n     * @param _newSlot The updated slot of the token\r\n     */ \r\n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\r\n\r\n    /**\r\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\r\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\r\n     *  Considering the compatibility with third-party wallets, this function is defined as\r\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.\r\n     * @return The number of decimals for value\r\n     */\r\n    function valueDecimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @notice Get the value of a token.\r\n     * @param _tokenId The token for which to query the balance\r\n     * @return The value of `_tokenId`\r\n     */\r\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the slot of a token.\r\n     * @param _tokenId The identifier for a token\r\n     * @return The slot of the token\r\n     */\r\n    function slotOf(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Allow an operator to manage the value of a token, up to the `_value` amount.\r\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\r\n     *  address for `_tokenId`.\r\n     *  MUST emit ApprovalValue event.\r\n     * @param _tokenId The token to approve\r\n     * @param _operator The operator to be approved\r\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\r\n     */\r\n    function approve(\r\n        uint256 _tokenId,\r\n        address _operator,\r\n        uint256 _value\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\r\n     * @param _tokenId The token for which to query the allowance\r\n     * @param _operator The address of an operator\r\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\r\n     */\r\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Transfer value from a specified token to another specified token with the same slot.\r\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\r\n     *  approved the whole `_fromTokenId` or part of it.\r\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\r\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\r\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\r\n     *  operator.\r\n     *  MUST emit `TransferValue` event.\r\n     * @param _fromTokenId The token to transfer value from\r\n     * @param _toTokenId The token to transfer value to\r\n     * @param _value The transferred value\r\n     */\r\n    function transferFrom(\r\n        uint256 _fromTokenId,\r\n        uint256 _toTokenId,\r\n        uint256 _value\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\r\n     *  `_to` is capable of receiving ERC3525 tokens.\r\n     * @dev This function MUST create a new ERC3525 token with the same slot for `_to` to receive\r\n     *  the transferred value.\r\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\r\n     *  MUST revert if `_to` is zero address.\r\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\r\n     *  operator.\r\n     *  MUST emit `Transfer` and `TransferValue` events.\r\n     * @param _fromTokenId The token to transfer value from\r\n     * @param _to The address to transfer value to\r\n     * @param _value The transferred value\r\n     * @return ID of the new token created for `_to` which receives the transferred value\r\n     */\r\n    function transferFrom(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        uint256 _value\r\n    ) external payable returns (uint256);\r\n}\r\n"
42     },
43     "contracts/IERC3525Receiver.sol": {
44       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title EIP-3525 token receiver interface\r\n * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when \r\n *  receiving values from ANY addresses or EIP-3525 tokens.\r\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\r\n */\r\ninterface IERC3525Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an EIP-3525 token value.\r\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the \r\n     *  recipient contract, if the recipient contract implements this function, the EIP-3525 \r\n     *  contract MUST call this function after a value transfer (i.e. `transferFrom(uint256,\r\n     *  uint256,uint256,bytes)`).\r\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\r\n     *  uint256,bytes)'))`) if the transfer is accepted.\r\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\r\n     * @param _operator The address which triggered the transfer\r\n     * @param _fromTokenId The token id to transfer value from\r\n     * @param _toTokenId The token id to transfer value to\r\n     * @param _value The transferred value\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))` \r\n     *  unless the transfer is rejected.\r\n     */\r\n    function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes calldata _data) external returns (bytes4);\r\n\r\n}"
45     },
46     "contracts/IERC721.sol": {
47       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/** \r\n * @title ERC-721 Non-Fungible Token Standard\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /** \r\n     * @dev This emits when ownership of any NFT changes by any mechanism.\r\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\r\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n     *  may be created and assigned without emitting Transfer. At the time of\r\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or\r\n     *  reaffirmed. The zero address indicates there is no approved address.\r\n     *  When a Transfer event emits, this also indicates that the approved\r\n     *  address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner.\r\n     *  The operator can manage all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n     * @notice Count all NFTs assigned to an owner\r\n     * @dev NFTs assigned to the zero address are considered invalid, and this\r\n     *  function throws for queries about the zero address.\r\n     * @param _owner An address for whom to query the balance\r\n     * @return The number of NFTs owned by `_owner`, possibly zero\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Find the owner of an NFT\r\n     * @dev NFTs assigned to zero address are considered invalid, and queries\r\n     *  about them do throw.\r\n     * @param _tokenId The identifier for an NFT\r\n     * @return The address of the owner of the NFT\r\n     */\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Transfers the ownership of an NFT from one address to another address\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\r\n     *  operator, or the approved address for this NFT. Throws if `_from` is\r\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\r\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     *  `onERC721Received` on `_to` and throws if the return value is not\r\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     * @param data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of an NFT from one address to another address\r\n     * @dev This works identically to the other function with an extra data parameter,\r\n     *  except this function just sets data to \"\".\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n     *  THEY MAY BE PERMANENTLY LOST\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\r\n     *  operator, or the approved address for this NFT. Throws if `_from` is\r\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\r\n     *  `_tokenId` is not a valid NFT.\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Change or reaffirm the approved address for an NFT\r\n     * @dev The zero address indicates there is no approved address.\r\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n     *  operator of the current owner.\r\n     * @param _approved The new approved NFT controller\r\n     * @param _tokenId The NFT to approve\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage\r\n     *  all of `msg.sender`'s assets\r\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\r\n     *  multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators\r\n     * @param _approved True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n     * @notice Get the approved address for a single NFT\r\n     * @dev Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for\r\n     * @return The approved address for this NFT, or the zero address if there is none\r\n     */\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Query if an address is an authorized operator for another address\r\n     * @param _owner The address that owns the NFTs\r\n     * @param _operator The address that acts on behalf of the owner\r\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n"
48     },
49     "contracts/IERC721Receiver.sol": {
50       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\r\n *  Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\n */\r\ninterface IERC721Receiver {\r\n    /** \r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     *  after a `transfer`. This function MAY throw to revert and reject the\r\n     *  transfer. Return of other than the magic value MUST result in the\r\n     *  transaction being reverted.\r\n     *  Note: the contract address is always the message sender.\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from The address which previously owned the token\r\n     * @param _tokenId The NFT identifier which is being transferred\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onERC721Received(\r\n        address _operator, \r\n        address _from, \r\n        uint256 _tokenId, \r\n        bytes calldata _data\r\n    ) external returns(bytes4);\r\n}\r\n"
51     },
52     "contracts/LOOTaDOG.sol": {
53       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./ERC3525.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\ncontract LOOTaDOG is ERC3525, Ownable, Pausable {\r\n    bool private _allow_transfer;\r\n    bool private _allow_transfer_value;\r\n\r\n    address private _signer;\r\n    mapping(uint256 => bool) private _order_ids;\r\n    string private _baseTokenURI;\r\n    uint256 private _token_count_limit;\r\n    /* Represents an un-minted NFT, which has not yet been recorded into the blockchain. A signed voucher can be redeemed for a real NFT using the redeem function. */\r\n    struct Voucher {\r\n        uint256 id;\r\n        /* The tokenId  */\r\n        uint256 tokenId;\r\n        /* The amount  */\r\n        uint256 amount;\r\n        /*expiration Time*/\r\n        uint256 expirationTime;\r\n        /*owner*/\r\n        address owner;\r\n    }\r\n\r\n    constructor() ERC3525(\"LOOTaDOG Pass Card\", \"LADT\", 2) {\r\n        _allow_transfer = false;\r\n        _allow_transfer_value = false;\r\n        _signer = msg.sender;\r\n        _token_count_limit = 1000;\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function queryId(uint256 id) public view returns (bool) {\r\n        return _order_ids[id];\r\n    }\r\n\r\n    function blockId(uint256 id) public {\r\n        _order_ids[id] = true;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function mintToken(\r\n        uint256 id,\r\n        uint256 amount,\r\n        uint256 expirationTime,\r\n        address owner,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable whenNotPaused {\r\n        require(block.timestamp < expirationTime, \"Expired voucher\");\r\n        require(totalSupply() < _token_count_limit, \"Sold out\");\r\n        require(balanceOf(msg.sender) == 0, \"Already minted\");\r\n        require(_order_ids[id] == false, \"Duplicate id\");\r\n        require(owner == msg.sender, \"Invalid owner\");\r\n        _verifySign(Voucher(id, 0, amount, expirationTime, owner), v, r, s);\r\n        _mint(msg.sender, 1, amount);\r\n        _order_ids[id] = true;\r\n    }\r\n\r\n    function mintValue(\r\n        uint256 id,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        uint256 expirationTime,\r\n        address owner,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable whenNotPaused {\r\n        require(block.timestamp < expirationTime, \"Expired voucher\");\r\n        require(_order_ids[id] == false, \"Duplicate id\");\r\n        require(owner == msg.sender, \"Invalid owner\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        _verifySign(Voucher(id, tokenId, amount, expirationTime, owner), v, r, s);\r\n        _mintValue(tokenId, amount);\r\n        _order_ids[id] = true;\r\n    }\r\n\r\n    function transferFrom(\r\n        uint256 fromTokenId_,\r\n        address to_,\r\n        uint256 value_\r\n    ) public payable virtual override whenNotPaused returns (uint256) {\r\n        require(_allow_transfer_value, \"Value does not allow transfer\");\r\n        return super.transferFrom(fromTokenId_, to_, value_);\r\n    }\r\n\r\n    function transferFrom(\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 value_\r\n    ) public payable virtual override whenNotPaused {\r\n        super.transferFrom(fromTokenId_, toTokenId_, value_);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) public payable virtual override whenNotPaused {\r\n        require(_allow_transfer, \"Token does not allow transfer\");\r\n        super.transferFrom(from_, to_, tokenId_);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        bytes memory data_\r\n    ) public payable virtual override whenNotPaused {\r\n        require(_allow_transfer, \"Token does not allow transfer\");\r\n        super.safeTransferFrom(from_, to_, tokenId_, data_);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) public payable virtual override whenNotPaused {\r\n        require(_allow_transfer, \"Token does not allow transfer\");\r\n        super.safeTransferFrom(from_, to_, tokenId_);\r\n    }\r\n\r\n    function setTokenCountLimit(uint256 count) public onlyOwner {\r\n        _token_count_limit = count;\r\n    }\r\n\r\n    function getTokenCountLimit() public view returns (uint256) {\r\n        return _token_count_limit;\r\n    }\r\n\r\n    function setSigner(address addr) public onlyOwner {\r\n        _signer = addr;\r\n    }\r\n\r\n    function getSigner() public view returns (address) {\r\n        return _signer;\r\n    }\r\n\r\n    bytes32 private constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;\r\n    //string private constant EIP712_DOMAIN =\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\";\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\r\n        0xd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472; //keccak256(bytes(EIP712_DOMAIN));\r\n\r\n    //string private constant VOUCHER_TYPE =\r\n    //\"Voucher(uint256 id,uint256 tokenId,uint256 amount,uint256 expirationTime,address owner)\";\r\n    bytes32 private constant VOUCHER_TYPEHASH = 0x4bd317336ea30fdfa31168cda381dacdf9ed1dd92eda94108d28629b6cf9b8c7; //keccak256(bytes(VOUCHER_TYPEHASH));\r\n\r\n    function _verifySign(\r\n        Voucher memory voucher,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal view {\r\n        address signer = ecrecover(_hashVoucher(voucher), v, r, s);\r\n        require(_signer == signer, \"Invalid signer\");\r\n    }\r\n\r\n    /// @notice Returns a hash of the given NFTVoucher, prepared using EIP712 typed data hashing rules.\r\n    /// @param voucher An NFTVoucher describing an unminted NFT.\r\n    function _hashVoucher(Voucher memory voucher) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _hashDomainSeparator(), _encodeVoucher(voucher)));\r\n    }\r\n\r\n    function _encodeVoucher(Voucher memory voucher) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    VOUCHER_TYPEHASH,\r\n                    voucher.id,\r\n                    voucher.tokenId,\r\n                    voucher.amount,\r\n                    voucher.expirationTime,\r\n                    voucher.owner\r\n                )\r\n            );\r\n    }\r\n\r\n    function _hashDomainSeparator() internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    EIP712_DOMAIN_TYPEHASH,\r\n                    keccak256(bytes(\"LOOTaDOG Dapp\")),\r\n                    keccak256(bytes(\"1\")),\r\n                    _getChainID(),\r\n                    address(this),\r\n                    salt\r\n                )\r\n            );\r\n    }\r\n\r\n    /*Since v0.5.12, Solidity provides a CHAINID OPCODE in assembly */\r\n    function _getChainID() internal view returns (uint256) {\r\n        return block.chainid;\r\n    }\r\n}\r\n"
54     },
55     "contracts/periphery/interface/IERC3525MetadataDescriptor.sol": {
56       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC3525MetadataDescriptor {\r\n\r\n    function constructContractURI() external view returns (string memory);\r\n\r\n    function constructSlotURI(uint256 slot) external view returns (string memory);\r\n    \r\n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}"
57     }
58   },
59   "settings": {
60     "optimizer": {
61       "enabled": true,
62       "runs": 200
63     },
64     "outputSelection": {
65       "*": {
66         "*": [
67           "evm.bytecode",
68           "evm.deployedBytecode",
69           "devdoc",
70           "userdoc",
71           "metadata",
72           "abi"
73         ]
74       }
75     },
76     "libraries": {}
77   }
78 }}