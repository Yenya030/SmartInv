1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/AnimeMetaverseReward.sol": {
5       "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.15;\n\n/// @title Anime Metaverse Reward Smart Contract\n/// @author LiquidX\n/// @notice This smart contract is used for reward on Gachapon event\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"./AmvUtils.sol\";\nimport \"./IAnimeMetaverseReward.sol\";\n\n/// @notice Thrown when invalid destination address specified (address(0) or address(this))\nerror InvalidAddress();\n\n/// @notice Thrown when given input does not meet with the expected one\nerror InvalidInput();\n\n/// @notice Thrown when mint amount is more than the maximum limit or equals to zero\nerror InvalidMintingAmount(uint256 amount);\n\n/// @notice Thrown when address is not included in Burner list\nerror InvalidBurner();\n\n/// @notice Thrown when address is not included in Minter list\nerror InvalidMinter();\n\n/// @notice Thrown when token ID is not match with the existing one\nerror InvalidTokenId();\n\n/// @notice Thrown when token ID is not available for minting\nerror InvalidMintableTokenId();\n\n/// @notice Thrown when input is equal to zero\nerror ValueCanNotBeZero();\n\n/// @notice Thrown when token supply already reaches its maximum limit\n/// @param range  Amount of token that would be minted\nerror MintAmountForTokenTypeExceeded(uint256 range);\n\n/// @notice Thrown when address is not allowed to burn the token\nerror NotAllowedToBurn();\n\n/// @notice Thrown when is not able to mint digital collectible\nerror ClaimingMerchandiseDeactivated();\n\ncontract AnimeMetaverseReward is\n    ERC1155,\n    Ownable,\n    AmvUtils,\n    IAnimeMetaverseReward\n{\n    uint256 public constant GIFT_BOX_TOKEN_TYPE = 1;\n    uint256 public constant ARTIFACTS_TOKEN_TYPE = 2;\n    uint256 public constant RUNE_CHIP_TOKEN_TYPE = 3;\n    uint256 public constant SCROLL_TOKEN_TYPE = 4;\n    uint256 public constant COLLECTIBLE__TOKEN_TYPE = 5;\n    uint256 public constant DIGITAL_COLLECTIBLE_TOKEN_TYPE = 6;\n\n    uint256 public constant MAX_MINTATBLE_TOKEN_ID = 18;\n    uint256 public constant MAX_BURNABLE_COLLECTIBLE = 1;\n    uint256 public constant COLLECTIBLE_AND_DIGITAL_COLLECTIBLE_DIFF = 3;\n    uint256 public constant MAX_TOKEN_SUPPLY = 5550;\n\n    struct TokenInfo {\n        string tokenName;\n        uint256 maxSupply;\n        uint256 totalSupply;\n        uint256 tokenType;\n    }\n\n    mapping(uint256 => TokenInfo) public tokenCollection;\n\n    /// @notice Total of token ID\n    uint256 totalToken = 0;\n    uint256 maxMintLimit = 100;\n\n    /// @notice List of address that could mint the token\n    /// @dev Use this mapping to set permission on who could mint the token\n    /// @custom:key A valid ethereum address\n    /// @custom:value Set permission in boolean. 'true' means allowed\n    mapping(address => bool) public minterList;\n\n    /// @notice List of address that could burn the token\n    /// @dev Use this mapping to set permission on who could force burn the token\n    /// @custom:key A valid ethereum address\n    /// @custom:value Set permission in boolean. 'true' means allowed\n    mapping(uint256 => mapping(address => bool)) public burnerList;\n\n    bool public claimMerchandiseActive = false;\n\n    /// @notice Base URL to store off-chain information\n    /// @dev This variable could be used to store URL for the token metadata\n    string public baseURI = \"\";\n\n    /// @notice Check whether address is valid\n    /// @param _address Any valid ethereum address\n    modifier validAddress(address _address) {\n        if (_address == address(0)) {\n            revert InvalidAddress();\n        }\n        _;\n    }\n\n    /// @notice Check whether token ID exist\n    /// @param tokenId token ID\n    modifier validTokenId(uint256 tokenId) {\n        if (tokenId < 1 || tokenId > totalToken) {\n            revert InvalidTokenId();\n        }\n        _;\n    }\n\n    /// @notice Check whether mint amount is more than maximum limit or equals to zero\n    /// @param amount Mint amount\n    modifier validMintingAmount(uint256 amount) {\n        if (amount > maxMintLimit || amount < 1) {\n            revert InvalidMintingAmount(amount);\n        }\n        _;\n    }\n\n    modifier validMintableTokenId(uint256 tokenId) {\n        if (tokenId < 1 || tokenId > MAX_MINTATBLE_TOKEN_ID) {\n            revert InvalidMintableTokenId();\n        }\n        _;\n    }\n\n    /// @notice Check whether an address has permission to mint\n    modifier onlyMinter() {\n        if (!minterList[msg.sender]) {\n            revert InvalidMinter();\n        }\n        _;\n    }\n\n    /// @notice Check whether an address has permission to force burn\n    modifier onlyBurner(uint256 id) {\n        if (!isValidBurner(id)) {\n            revert InvalidBurner();\n        }\n        _;\n    }\n\n    /// @notice There's a batch mint transaction happen\n    /// @dev Emit event when calling mintBatch function\n    /// @param drawIndex Gachapon draw Index\n    /// @param activityId Gachapon activity ID\n    /// @param minter Address who calls the function\n    /// @param to Address who receives the token\n    /// @param ids Item token ID\n    /// @param amounts Amount of item that is minted\n    event RewardMintBatch(\n        uint256 ticket,\n        uint256 drawIndex,\n        uint256 activityId,\n        address minter,\n        address to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    /// @notice There's a mint transaction happen\n    /// @dev Emit event when calling mint function\n    /// @param drawIndex Gachapon draw Index\n    /// @param activityId Gachapon activity ID\n    /// @param minter Address who calls the function\n    /// @param to Address who receives the token\n    /// @param id Item token ID\n    /// @param amount Amount of item that is minted\n    event RewardMint(\n        uint256 ticket,\n        uint256 drawIndex,\n        uint256 activityId,\n        address minter,\n        address to,\n        uint256 id,\n        uint256 amount\n    );\n\n    /// @notice There's a token being burned\n    /// @dev Emits event when forceBurn function is called\n    /// @param burner Burner address\n    /// @param Owner Token owner\n    /// @param tokenId Token ID that is being burned\n    /// @param amount Amount of token that is being burned\n    event ForceBurn(\n        address burner,\n        address Owner,\n        uint256 tokenId,\n        uint256 amount\n    );\n\n    /// @notice There's a digital collectible\n    /// @dev Emit event when digital merch is minted\n    /// @param minter Address who mints digital collectible\n    /// @param to Address who receiveses digital collectible\n    /// @param id Token ID of the digital collectible\n    /// @param amount Amount of the digital collectible that is minted\n    event MintDigitalMerch(\n        address minter,\n        address to,\n        uint256 id,\n        uint256 amount\n    );\n\n    /// @notice Sets token ID, token name, maximum supply and token type for all tokens\n    /// @dev The ERC1155 function is derived from Open Zeppelin ERC1155 library\n    constructor() ERC1155(\"\") {\n        setTokenInfo(1, \"Gift of Soul\", 170, GIFT_BOX_TOKEN_TYPE);\n\n        setTokenInfo(2, \"Sakura\", 4, ARTIFACTS_TOKEN_TYPE);\n        setTokenInfo(3, \"Starburst X\", 4000, ARTIFACTS_TOKEN_TYPE);\n        setTokenInfo(4, \"Starburst C\", 2500, ARTIFACTS_TOKEN_TYPE);\n        setTokenInfo(5, \"Starburst D\", 1896, ARTIFACTS_TOKEN_TYPE);\n        setTokenInfo(6, \"Starburst M\", 1500, ARTIFACTS_TOKEN_TYPE);\n        setTokenInfo(7, \"Starburst V\", 100, ARTIFACTS_TOKEN_TYPE);\n\n        setTokenInfo(8, \"God Rune\", 450, RUNE_CHIP_TOKEN_TYPE);\n        setTokenInfo(9, \"Man Rune\", 1500, RUNE_CHIP_TOKEN_TYPE);\n        setTokenInfo(10, \"Sun Rune\", 3000, RUNE_CHIP_TOKEN_TYPE);\n        setTokenInfo(11, \"Fire Rune\", 4500, RUNE_CHIP_TOKEN_TYPE);\n        setTokenInfo(12, \"Ice Rune\", 5550, RUNE_CHIP_TOKEN_TYPE);\n\n        setTokenInfo(13, \"Scroll of Desire\", 4715, SCROLL_TOKEN_TYPE);\n        setTokenInfo(14, \"Scroll of Prophecy\", 3301, SCROLL_TOKEN_TYPE);\n        setTokenInfo(15, \"Scroll of Fortitude\", 1414, SCROLL_TOKEN_TYPE);\n\n        setTokenInfo(16, \"Hoodie\", 200, COLLECTIBLE__TOKEN_TYPE);\n        setTokenInfo(17, \"Tshirt\", 400, COLLECTIBLE__TOKEN_TYPE);\n        setTokenInfo(18, \"Socks\", 800, COLLECTIBLE__TOKEN_TYPE);\n\n        setTokenInfo(19, \"Digital Hoodie\", 200, DIGITAL_COLLECTIBLE_TOKEN_TYPE);\n        setTokenInfo(20, \"Digital Tshirt\", 400, DIGITAL_COLLECTIBLE_TOKEN_TYPE);\n        setTokenInfo(21, \"Digital Sock\", 800, DIGITAL_COLLECTIBLE_TOKEN_TYPE);\n    }\n\n    /// @notice Sets information about specific token\n    /// @dev It will set token ID, token name, maximum supply, and token type\n    /// @param _tokenId ID for specific token\n    /// @param _tokenName Name of the token\n    /// @param _maximumSupply The maximum supply for the token\n    /// @param _tokenType Type of token\n    function setTokenInfo(\n        uint256 _tokenId,\n        string memory _tokenName,\n        uint256 _maximumSupply,\n        uint256 _tokenType\n    ) private {\n        totalToken++;\n        tokenCollection[_tokenId] = TokenInfo({\n            maxSupply: _maximumSupply,\n            totalSupply: 0,\n            tokenName: _tokenName,\n            tokenType: _tokenType\n        });\n    }\n\n    /// @notice Update token maximum supply\n    /// @dev This function can only be executed by the contract owner\n    /// @param _id Token ID\n    /// @param _maximumSupply Token new maximum supply\n    function updateTokenSupply(uint256 _id, uint256 _maximumSupply)\n        external\n        onlyOwner\n        validTokenId(_id)\n    {\n        if (tokenCollection[_id].totalSupply > _maximumSupply) {\n            revert InvalidInput();\n        }\n        tokenCollection[_id].maxSupply = _maximumSupply;\n    }\n\n    /// @notice Set maximum amount to mint token\n    /// @dev This function can only be executed by the contract owner\n    /// @param _mintLimit Maximum amount to mint\n    function setMaxMintLimit(uint256 _mintLimit) external onlyOwner {\n        require(_mintLimit >= 1, \"Can not set mintLimit less than 1.\");\n        require(\n            _mintLimit <= MAX_TOKEN_SUPPLY,\n            \"Can not set mintLimit more than 5550.\"\n        );\n        maxMintLimit = _mintLimit;\n    }\n\n    /// @notice Registers an address and sets a permission to mint\n    /// @dev This function can only be executed by the contract owner\n    /// @param _minter A valid ethereum address\n    /// @param _flag The permission to mint. 'true' means allowed\n    function setMinterAddress(address _minter, bool _flag)\n        external\n        onlyOwner\n        validAddress(_minter)\n    {\n        minterList[_minter] = _flag;\n    }\n\n    /// @notice Set claimMerchandiseActive value\n    /// @param _flag 'true' to activate claim collectible event, otherwise 'false'\n    function toggleMerchandiseClaim(bool _flag) external onlyOwner {\n        claimMerchandiseActive = _flag;\n    }\n\n    /// @notice Registers an address and sets a permission to force burn specific token\n    /// @dev This function can only be executed by the contract owner\n    /// @param _id The token id that can be burned by this address\n    /// @param _burner A valid ethereum address\n    /// @param _flag The permission to force burn. 'true' means allowed\n    function setBurnerAddress(\n        uint256 _id,\n        address _burner,\n        bool _flag\n    ) external onlyOwner validAddress(_burner) validTokenId(_id) {\n        burnerList[_id][_burner] = _flag;\n    }\n\n    /// @notice Mint token in batch\n    /// @dev This function will increase total supply for the token that\n    ///      is minted.\n    ///      Only allowed minter address that could run this function\n    /// @param _ticket Gachapon ticket counter for a draw\n    /// @param _drawIndex Gachapon draw Index\n    /// @param _activityId Gachapon activity ID\n    /// @param _to The address that will receive the token\n    /// @param _ids The token ID that will be minted\n    /// @param _amounts Amount of token that will be minted\n    /// @param _data _\n    function mintBatch(\n        uint256 _ticket,\n        uint256 _drawIndex,\n        uint256 _activityId,\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) external onlyMinter validAddress(_to) {\n        if (_amounts.length != _ids.length) {\n            revert InvalidInput();\n        }\n\n        for ( uint256 idCounter = 0; idCounter < _ids.length; idCounter = _uncheckedInc(idCounter) ) {\n            uint256 _id = _ids[idCounter];\n\n            if (_amounts[idCounter] > maxMintLimit || _amounts[idCounter] < 1) {\n                revert InvalidMintingAmount(_amounts[idCounter]);\n            }\n            if (_id < 1 || _id > MAX_MINTATBLE_TOKEN_ID) {\n                revert InvalidMintableTokenId();\n            }\n            if (\n                tokenCollection[_id].totalSupply + _amounts[idCounter] >\n                tokenCollection[_id].maxSupply\n            ) {\n                revert MintAmountForTokenTypeExceeded(_amounts[idCounter]);\n            }\n\n            unchecked {\n                tokenCollection[_id].totalSupply += _amounts[idCounter];\n            }\n        }\n\n        _mintBatch(_to, _ids, _amounts, _data);\n        emit RewardMintBatch(\n            _ticket,\n            _drawIndex,\n            _activityId,\n            msg.sender,\n            _to,\n            _ids,\n            _amounts\n        );\n    }\n\n    /// @notice Mint token\n    /// @dev This function will increase total supply for the token that\n    ///      is minted.\n    ///      Only allowed minter address that could run this function\n    /// @param _ticket Gachapon ticket counter for a draw\n    /// @param _drawIndex Gachapon draw Index\n    /// @param _activityId Gachapon activity ID\n    /// @param _to The address that will receive the token\n    /// @param _id The token ID that will be minted\n    /// @param _amount Amount of token that will be minted\n    /// @param _data _\n    function mint(\n        uint256 _ticket,\n        uint256 _drawIndex,\n        uint256 _activityId,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    )\n        external\n        onlyMinter\n        validAddress(_to)\n        validMintableTokenId(_id)\n        validMintingAmount(_amount)\n    {\n        if (\n            tokenCollection[_id].totalSupply + _amount >\n            tokenCollection[_id].maxSupply\n        ) {\n            revert MintAmountForTokenTypeExceeded(_amount);\n        }\n        unchecked {\n            tokenCollection[_id].totalSupply += _amount;\n        }\n        _mint(_to, _id, _amount, _data);\n        emit RewardMint(\n            _ticket,\n            _drawIndex,\n            _activityId,\n            msg.sender,\n            _to,\n            _id,\n            _amount\n        );\n    }\n\n    /// @notice Burns specific token from other address\n    /// @dev Only burners address who are allowed to burn the token.\n    ///      These addresses will be set by owner.\n    /// @param _account The owner address of the token\n    /// @param _id The token ID\n    /// @param _amount Amount to burn\n    function forceBurn(\n        address _account,\n        uint256 _id,\n        uint256 _amount\n    ) external validAddress(_account) onlyBurner(_id) validTokenId(_id) {\n        _burn(_account, _id, _amount);\n        emit ForceBurn(msg.sender, _account, _id, _amount);\n    }\n\n    /// @notice Checks whether the caller has the permission to burn this particular token or not\n    /// @param _id The token ID to burn\n    function isValidBurner(uint256 _id) public view returns (bool) {\n        return burnerList[_id][msg.sender];\n    }\n\n    /// @notice Set base URL for storing off-chain information\n    /// @param newuri A valid URL\n    function setURI(string memory newuri) external onlyOwner {\n        baseURI = newuri;\n    }\n\n    /// @notice Appends token ID to base URL\n    /// @param tokenId The token ID\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, intToString(tokenId)))\n                : \"\";\n    }\n\n    /// @notice Get information from specific token ID\n    /// @param _id Token ID\n    function getTokenInfo(uint256 _id)\n        external\n        view\n        validTokenId(_id)\n        returns (TokenInfo memory tokenInfo)\n    {\n        tokenInfo = tokenCollection[_id];\n    }\n\n    /// @notice Mint digital collectible\n    /// @param _to Receiver of the digital collectible\n    /// @param collectible_id Token ID that's included in COLLECTIBLE_TOKEN_TYPE\n    function mintDigitalCollectible(address _to, uint256 collectible_id)\n        internal\n    {\n        uint256 _id = collectible_id + COLLECTIBLE_AND_DIGITAL_COLLECTIBLE_DIFF;\n        tokenCollection[_id].totalSupply++;\n        _mint(_to, _id, MAX_BURNABLE_COLLECTIBLE, \"\");\n        emit MintDigitalMerch(msg.sender, _to, _id, MAX_BURNABLE_COLLECTIBLE);\n    }\n\n    /// @notice Claim collectible with digital collectible\n    /// @param _account Owner of the collectible\n    /// @param _id Token ID that's included in COLLECTIBLE_TOKEN_TYPE\n    function claimMerchandise(address _account, uint256 _id)\n        external\n        validAddress(_account)\n    {\n        if (!claimMerchandiseActive) {\n            revert ClaimingMerchandiseDeactivated();\n        }\n        if (tokenCollection[_id].tokenType != COLLECTIBLE__TOKEN_TYPE)\n            revert NotAllowedToBurn();\n        require(\n            _account == _msgSender() ||\n                isApprovedForAll(_account, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n\n        _burn(_account, _id, MAX_BURNABLE_COLLECTIBLE);\n        mintDigitalCollectible(_account, _id);\n    }\n\n    function _uncheckedInc(uint256 val) internal pure returns (uint256) {\n        unchecked {\n            return val + 1;\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
15     },
16     "contracts/AmvUtils.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/// @title Utility function for developing smart contract\n/// @author LiquidX\n/// @notice You could use function in this smart contract as \n///         a helper to do menial task\n/// @dev All function in this contract has generic purposes \n///      like converting integer to string, converting an array, etc.\n\ncontract AmvUtils {\n    /// @dev Convert integer into string\n    /// @param value Integer value that would be converted into string\n    function intToString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n}\n"
18     },
19     "contracts/IAnimeMetaverseReward.sol": {
20       "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.15;\n\ninterface IAnimeMetaverseReward {\n    function mintBatch(\n        uint256 ticket,\n        uint256 _drawIndex,\n        uint256 _activityId,\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) external;\n\n    function mint(\n        uint256 ticket,\n        uint256 _drawIndex,\n        uint256 _activityId,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) external;\n\n    function forceBurn(\n        address _account,\n        uint256 _id,\n        uint256 _amount\n    ) external;\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": false,
47       "runs": 200
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}