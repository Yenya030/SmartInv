1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/infrastructure/NiftyCloneFactory.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n//                ,|||||<              ~|||||'         `_+7ykKD%RDqmI*~`          \n//                8@@@@@@8'           `Q@@@@@`     `^oB@@@@@@@@@@@@@@@@@R|`       \n//               !@@@@@@@@Q;          L@@@@@J    '}Q@@@@@@QqonzJfk8@@@@@@@Q,      \n//               Q@@@@@@@@@@j        `Q@@@@Q`  `m@@@@@@h^`         `?Q@@@@@*      \n//              =@@@@@@@@@@@@D.      7@@@@@i  ~Q@@@@@w'              ^@@@@@*      \n//              Q@@@@@m@@@@@@@Q!    `@@@@@Q  ;@@@@@@;                .txxxx:      \n//             |@@@@@u *@@@@@@@@z   u@@@@@* `Q@@@@@^                              \n//            `Q@@@@Q`  'W@@@@@@@R.'@@@@@B  7@@@@@%        :DDDDDDDDDDDDDD5       \n//            c@@@@@7    `Z@@@@@@@QK@@@@@+  6@@@@@K        aQQQQQQQ@@@@@@@*       \n//           `@@@@@Q`      ^Q@@@@@@@@@@@W   j@@@@@@;             ,6@@@@@@#        \n//           t@@@@@L        ,8@@@@@@@@@@!   'Q@@@@@@u,        .=A@@@@@@@@^        \n//          .@@@@@Q           }@@@@@@@@D     'd@@@@@@@@gUwwU%Q@@@@@@@@@@g         \n//          j@@@@@<            +@@@@@@@;       ;wQ@@@@@@@@@@@@@@@Wf;8@@@;         \n//          ~;;;;;              .;;;;;~           '!Lx5mEEmyt|!'    ;;;~          \n//\n// Powered By:    @niftygateway\n// Author:        @niftynathang\n// Collaborators: @conviction_1 \n//                @stormihoebe\n//                @smatthewenglish\n//                @dccockfoster\n//                @blainemalone\n\nimport \"../interfaces/IERC721Cloneable.sol\";\nimport \"../interfaces/IERC721DefaultOwnerCloneable.sol\";\nimport \"../interfaces/IERC721MetadataGenerator.sol\";\nimport \"../interfaces/INiftyEntityCloneable.sol\";\nimport \"../libraries/Clones.sol\";\nimport \"../utils/NiftyPermissions.sol\";\n\ncontract NiftyCloneFactory is NiftyPermissions {\n\n    event ClonedERC721(address newToken);    \n    event ClonedERC721MetadataGenerator(address metadataGenerator);    \n    \n    constructor(address niftyRegistryContract_) {\n        initializeNiftyEntity(niftyRegistryContract_);\n    }\n        \n    function cloneERC721(address implementation, address niftyRegistryContract_, address defaultOwner_, string calldata name_, string calldata symbol_, string calldata baseURI_) external returns (address) {\n        _requireOnlyValidSender();\n        require(IERC165(implementation).supportsInterface(type(IERC721Cloneable).interfaceId), \"Not a valid ERC721 Token\");        \n        address clone = Clones.clone(implementation);\n\n        emit ClonedERC721(clone);\n\n        IERC721Cloneable(clone).initializeERC721(name_, symbol_, baseURI_);        \n\n        if(IERC165(implementation).supportsInterface(type(INiftyEntityCloneable).interfaceId)) {\n            INiftyEntityCloneable(clone).initializeNiftyEntity(niftyRegistryContract_);\n        }\n\n        if(IERC165(implementation).supportsInterface(type(IERC721DefaultOwnerCloneable).interfaceId)) {\n            IERC721DefaultOwnerCloneable(clone).initializeDefaultOwner(defaultOwner_);\n        }        \n\n        return clone;\n    }\n    \n    function cloneMetadataGenerator(address implementation, address niftyRegistryContract_) external returns (address) {\n        _requireOnlyValidSender();\n        require(IERC165(implementation).supportsInterface(type(IERC721MetadataGenerator).interfaceId), \"Not a valid Metadata Generator\");\n        address clone = Clones.clone(implementation);        \n\n        emit ClonedERC721MetadataGenerator(clone);\n        \n        if(IERC165(implementation).supportsInterface(type(INiftyEntityCloneable).interfaceId)) {\n            INiftyEntityCloneable(clone).initializeNiftyEntity(niftyRegistryContract_);\n        }        \n\n        return clone;\n    }\n}"
6     },
7     "contracts/interfaces/IERC721Cloneable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IERC721.sol\";\n\ninterface IERC721Cloneable is IERC721 {\n    function initializeERC721(string calldata name_, string calldata symbol_, string calldata baseURI_) external;    \n}"
9     },
10     "contracts/interfaces/IERC721DefaultOwnerCloneable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IERC165.sol\";\n\ninterface IERC721DefaultOwnerCloneable is IERC165 {\n    function initializeDefaultOwner(address defaultOwner_) external;    \n}"
12     },
13     "contracts/interfaces/IERC721MetadataGenerator.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IERC165.sol\";\n\ninterface IERC721MetadataGenerator is IERC165 {    \n    function tokenMetadata(uint256 tokenId, uint256 niftyType, bytes calldata data) external view returns (string memory);\n}"
15     },
16     "contracts/interfaces/INiftyEntityCloneable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IERC165.sol\";\n\ninterface INiftyEntityCloneable is IERC165 {\n    function initializeNiftyEntity(address niftyRegistryContract_) external;\n}"
18     },
19     "contracts/libraries/Clones.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}"
21     },
22     "contracts/utils/NiftyPermissions.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./ERC165.sol\";\nimport \"./GenericErrors.sol\";\nimport \"../interfaces/INiftyEntityCloneable.sol\";\nimport \"../interfaces/INiftyRegistry.sol\";\nimport \"../libraries/Context.sol\";\n\nabstract contract NiftyPermissions is Context, ERC165, GenericErrors, INiftyEntityCloneable {    \n\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\n\n    // Only allow Nifty Entity to be initialized once\n    bool internal initializedNiftyEntity;\n\n    // If address(0), use enable Nifty Gateway permissions - otherwise, specifies the address with permissions\n    address public admin;\n\n    // To prevent a mistake, transferring admin rights will be a two step process\n    // First, the current admin nominates a new admin\n    // Second, the nominee accepts admin\n    address public nominatedAdmin;\n\n    // Nifty Registry Contract\n    INiftyRegistry internal permissionsRegistry;    \n\n    function initializeNiftyEntity(address niftyRegistryContract_) public {\n        require(!initializedNiftyEntity, ERROR_REINITIALIZATION_NOT_PERMITTED);\n        permissionsRegistry = INiftyRegistry(niftyRegistryContract_);\n        initializedNiftyEntity = true;\n    }       \n    \n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return         \n        interfaceId == type(INiftyEntityCloneable).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }        \n\n    function renounceAdmin() external {\n        _requireOnlyValidSender();\n        _transferAdmin(address(0));\n    }    \n\n    function nominateAdmin(address nominee) external {\n        _requireOnlyValidSender();\n        nominatedAdmin = nominee;\n    }\n\n    function acceptAdmin() external {\n        address nominee = nominatedAdmin;\n        require(_msgSender() == nominee, ERROR_INVALID_MSG_SENDER);\n        _transferAdmin(nominee);\n    }\n    \n    function _requireOnlyValidSender() internal view {       \n        address currentAdmin = admin;     \n        if(currentAdmin == address(0)) {\n            require(permissionsRegistry.isValidNiftySender(_msgSender()), ERROR_INVALID_MSG_SENDER);\n        } else {\n            require(_msgSender() == currentAdmin, ERROR_INVALID_MSG_SENDER);\n        }\n    }        \n\n    function _transferAdmin(address newAdmin) internal {\n        address oldAdmin = admin;\n        admin = newAdmin;\n        delete nominatedAdmin;        \n        emit AdminTransferred(oldAdmin, newAdmin);\n    }\n}"
24     },
25     "contracts/interfaces/IERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}"
27     },
28     "contracts/interfaces/IERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
30     },
31     "contracts/utils/ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
33     },
34     "contracts/utils/GenericErrors.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nabstract contract GenericErrors {\n    string internal constant ERROR_INPUT_ARRAY_EMPTY = \"Input array empty\";\n    string internal constant ERROR_INPUT_ARRAY_SIZE_MISMATCH = \"Input array size mismatch\";\n    string internal constant ERROR_INVALID_MSG_SENDER = \"Invalid msg.sender\";\n    string internal constant ERROR_UNEXPECTED_DATA_SIGNER = \"Unexpected data signer\";\n    string internal constant ERROR_INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    string internal constant ERROR_WITHDRAW_UNSUCCESSFUL = \"Withdraw unsuccessful\";\n    string internal constant ERROR_CONTRACT_IS_FINALIZED = \"Contract is finalized\";\n    string internal constant ERROR_CANNOT_CHANGE_DEFAULT_OWNER = \"Cannot change default owner\";\n    string internal constant ERROR_UNCLONEABLE_REFERENCE_CONTRACT = \"Uncloneable reference contract\";\n    string internal constant ERROR_BIPS_OVER_100_PERCENT = \"Bips over 100%\";\n    string internal constant ERROR_NO_ROYALTY_RECEIVER = \"No royalty receiver\";\n    string internal constant ERROR_REINITIALIZATION_NOT_PERMITTED = \"Re-initialization not permitted\";\n    string internal constant ERROR_ZERO_ETH_TRANSFER = \"Zero ETH Transfer\";\n}"
36     },
37     "contracts/interfaces/INiftyRegistry.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface INiftyRegistry {\n   function isValidNiftySender(address sendingKey) external view returns (bool);\n}"
39     },
40     "contracts/libraries/Context.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": true,
47       "runs": 1500
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}