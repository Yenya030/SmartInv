1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/FutureQuest.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./libraries/ERC1155/ERC1155PS.sol\";\nimport \"./libraries/ERC2981/ERC2981Base.sol\";\n\n/*\n *   @title: Future-Quest\n\n *    @desc: Future Quest Dao is a web3 impact fund and accelerator that caters to \n *           entrepreneurs actively creating environment solutions related to climate\n *           change while Future Horizon is a community of influential action-driven\n *           leaders from around the world who gather to envision, build, and celebrate \n *           a sustainable future.\n\n *  @author: ahm3d.eth, ryado.eth\n *\n *       Built with â™¥ by the ProductShop team\n *\n *                  -+=-.\n *                 .++++++=-.\n *                 +++++++++++=-.\n *                ++++++++++++++++=:.\n *               =++++++==++++++++++++=:.\n *              :++++++=   .:=++++++++++++-:.\n *             .+++++++        .-=++++++++++++-:\n *             +++++++.            .-=++++++++++\n *            =++++++:                 :=+++++++\n *           -++++++-                :-+++++++++\n *          :++++++=             .-=+++++++++++-\n *         .+++++++          .:=+++++++++++=:.\n *         +++++++.       :-++++++++++++-.\n *        =++++++:    .-=+++++++++++=:\n *       -++++++=    +++++++++++=:.\n *      :++++++=     ++++++++-.\n *     .+++++++      ++++=:\n *     =++++++.      --.\n *    =++++++-\n *   -++++++=\n *  .++++++=\n *  +++++++.\n *\n */\n\ncontract FutureQuest is ERC1155PS, ERC2981Base, AccessControl {\n  using Strings for uint256;\n\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n  address public _couponSigner; // Address of the wallet that generates the coupons\n\n  string public _baseURI = \"https://future-quest.s3.amazonaws.com/metadata/\";\n  string public _contractMetadata =\n    \"https://future-quest.s3.amazonaws.com/metadata/contract-level-metadata.json\";\n\n  uint256 public _currentTokenTypeID = 0; // Used to keep track of the number of different NFTs\n  uint256 public _mintPrice = 0 ether; // Presale mint price is free\n  uint256 public _maxPublicMintPerTx = 2; // Maximum number of NFTs that can be minted at once\n\n  mapping(uint256 => uint256) public _tokenSupply;\n  mapping(uint256 => uint256) public _tokenMaxSupply;\n\n  bool public _paused = true;\n  bool public _presaleMintActive = false;\n  bool public _publicMintActive = false;\n\n  RoyaltyInfo public _royalties;\n\n  struct Coupon {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  constructor(address couponSigner) ERC1155PS(\"\") {\n    _couponSigner = couponSigner;\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(ADMIN_ROLE, msg.sender);\n  }\n\n  // modifiers\n  modifier onlyAdmin() {\n    require(hasRole(ADMIN_ROLE, msg.sender), \"Caller is not an Admin\");\n    _;\n  }\n\n  modifier noContractCaller() {\n    require(tx.origin == msg.sender, \"Caller is another contract\");\n    _;\n  }\n\n  modifier isNotPaused() {\n    require(!_paused, \"The contract is paused\");\n    _;\n  }\n\n  modifier tokenTypeExists(uint256 tokenId) {\n    require(_tokenMaxSupply[tokenId] > 0, \"Token does not exist\");\n    _;\n  }\n\n  modifier mintSupplyCompliant(uint256 tokenId, uint256 quantity) {\n    require(quantity != 0, \"Quantity must be greater than 0\");\n\n    require(\n      _tokenSupply[tokenId] + quantity <= _tokenMaxSupply[tokenId],\n      \"Mint quantity is restricted by token max supply\"\n    );\n    _;\n  }\n\n  // External functions\n\n  /**\n   * * Mint Presale Tokens\n   * @dev Minting function for tokens available during the Presale phase\n   * @notice Minting Presale tokens requires a valid coupon, associated with wallet and allotted amount\n   * @param typeId The typeId of the token being minted\n   * @param quantity The number of tokens being minted by sender\n   * @param allotted The allotted number of tokens specified in the Presale Coupon\n   * @param coupon The signed coupon\n   */\n  function presaleMint(\n    uint256 typeId,\n    uint256 allotted,\n    Coupon calldata coupon,\n    uint256 quantity\n  )\n    external\n    noContractCaller\n    isNotPaused\n    tokenTypeExists(typeId)\n    mintSupplyCompliant(typeId, quantity)\n  {\n    require(_presaleMintActive, \"Presale mint phase is not active\");\n\n    require(\n      quantity < allotted + 1,\n      \"Quantity must be less or equal to allotted\"\n    );\n\n    require(quantityMinted(typeId, _msgSender()) == 0, \"Coupon already used\");\n\n    bytes32 digest = keccak256(abi.encode(allotted, _msgSender()));\n\n    require(_isVerifiedCoupon(digest, coupon), \"Invalid Coupon\");\n\n    _tokenSupply[typeId] = _tokenSupply[typeId] + quantity;\n    _mint(msg.sender, typeId, quantity);\n  }\n\n  /**\n   * * Mint Presale Tokens\n   * @dev Minting function for tokens available during the Presale phase\n   * @notice Initial public mint will be free but subsequent mints will be at the setted mint price\n   * @param typeId The typeId of the token being minted\n   * @param quantity The number of tokens being minted by sender\n   */\n  function mint(uint256 typeId, uint256 quantity)\n    public\n    payable\n    isNotPaused\n    tokenTypeExists(typeId)\n    mintSupplyCompliant(typeId, quantity)\n  {\n    require(_publicMintActive, \"Public mint phase is not active\");\n    require(\n      quantity < _maxPublicMintPerTx + 1,\n      \"Quantity must be less or equal to max public mint quantity\"\n    );\n    require(msg.value == quantity * _mintPrice, \"Incorrect Payment\");\n\n    _tokenSupply[typeId] = _tokenSupply[typeId] + quantity;\n    _mint(msg.sender, typeId, quantity);\n  }\n\n  function mintOnBehalf(\n    uint256 typeId,\n    uint256 quantity,\n    address beneficiary\n  )\n    public\n    tokenTypeExists(typeId)\n    mintSupplyCompliant(typeId, quantity)\n    onlyAdmin\n  {\n    _tokenSupply[typeId] = _tokenSupply[typeId] + quantity;\n    _mint(beneficiary, typeId, quantity);\n  }\n\n  /**\n   * @dev Creates a new token type\n   * @return The newly created token ID\n   */\n  function create(uint256 maxSupply) external onlyAdmin returns (uint256) {\n    uint256 _id = _getNextTokenTypeID();\n    _incrementTokenTypeId();\n    _tokenMaxSupply[_id] = maxSupply;\n    return _id;\n  }\n\n  function royaltyInfo(uint256, uint256 value)\n    external\n    view\n    override\n    returns (address receiver, uint256 royaltyAmount)\n  {\n    RoyaltyInfo memory royalties = _royalties;\n    receiver = royalties.recipient;\n    royaltyAmount = (value * royalties.amount) / 10000;\n  }\n\n  //  Setters\n\n  /**\n   * @dev Sets token royalties\n   * @param recipient recipient of the royalties\n   * @param value percentage (using 2 decimals : 10000 = 100%, 0 = 0%)\n   */\n\n  function setRoyalties(address recipient, uint256 value) external onlyAdmin {\n    require(value <= 10000, \"ERC2981Royalties: Too high\");\n    _royalties = RoyaltyInfo(recipient, uint24(value));\n  }\n\n  function setPublicMintActive(bool active) external onlyAdmin {\n    _publicMintActive = active;\n  }\n\n  function setPresaleMintActive(bool active) external onlyAdmin {\n    _presaleMintActive = active;\n  }\n\n  function setMintPrice(uint256 value) external onlyAdmin {\n    _mintPrice = value;\n  }\n\n  function setMaxPublicMintPerTx(uint256 value) external onlyAdmin {\n    _maxPublicMintPerTx = value;\n  }\n\n  function grantAdminRole(address user) external onlyAdmin {\n    grantRole(ADMIN_ROLE, user);\n  }\n\n  function withdraw() external onlyAdmin {\n    payable(msg.sender).transfer(address(this).balance);\n  }\n\n  function setPaused(bool paused) external onlyAdmin {\n    _paused = paused;\n  }\n\n  function setBaseURI(string calldata baseURI) external onlyAdmin {\n    _baseURI = baseURI;\n  }\n\n  function setContractMetadata(string calldata contractMetadata)\n    external\n    onlyAdmin\n  {\n    _contractMetadata = contractMetadata;\n  }\n\n  function setCouponSigner(address newCouponSigner) external onlyAdmin {\n    _couponSigner = newCouponSigner;\n  }\n\n  /**\n   * @dev Set the quantity minted value for a user, for testing mostly\n   * @param typeId uint256 ID of the token type\n   * @param user address of the user to set the quantity minted\n   * @param quantiy uint128 quantity minted value\n   */\n  function setQuantityMinted(\n    uint256 typeId,\n    address user,\n    uint128 quantiy\n  ) external onlyAdmin {\n    _setQuantityMinted(typeId, user, quantiy);\n  }\n\n  function setTokenMaxSupply(uint256 typeId, uint256 maxSupply)\n    external\n    onlyAdmin\n  {\n    _tokenMaxSupply[typeId] = maxSupply;\n  }\n\n  // Public functions\n\n  function uri(uint256 typeId)\n    public\n    view\n    override\n    tokenTypeExists(typeId)\n    returns (string memory)\n  {\n    return string(abi.encodePacked(_baseURI, typeId.toString(), \".json\"));\n  }\n\n  /**\n   * @dev Returns the total quantity for a type of token\n   * @param typeId uint256 ID of the token type to query\n   * @return amount of token of type typeId in existence\n   */\n  function totalSupply(uint256 typeId) public view returns (uint256) {\n    return _tokenSupply[typeId];\n  }\n\n  function contractURI() public view returns (string memory) {\n    return _contractMetadata;\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC1155PS, ERC2981Base, AccessControl)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  // Internal functions\n\n  /**\n   * * Verify Coupon\n   * @dev Verify that the coupon sent was signed by the coupon signer and is a valid coupon\n   * @notice Valid coupons will include coupon signer, address, and allotted mints\n   * @notice Returns a boolean value\n   * @param digest The digest\n   * @param coupon The coupon\n   */\n  function _isVerifiedCoupon(bytes32 digest, Coupon calldata coupon)\n    private\n    view\n    returns (bool)\n  {\n    address signer = ecrecover(digest, coupon.v, coupon.r, coupon.s);\n    require(signer != address(0), \"Zero Address\");\n    return signer == _couponSigner;\n  }\n\n  // Private functions\n\n  /**\n   * @dev calculates the next token ID based on value of _currentTokenID\n   * @return uint256 for the next token ID\n   */\n  function _getNextTokenTypeID() private view returns (uint256) {\n    return _currentTokenTypeID + 1;\n  }\n\n  /**\n   * @dev increments the value of _currentTokenID\n   */\n  function _incrementTokenTypeId() private {\n    ++_currentTokenTypeID;\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/access/AccessControl.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Strings.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n Ã· 2 + 1, and for v in (302): v âˆˆ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
15     },
16     "contracts/libraries/ERC1155/ERC1155PS.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token from the ProductShop Team\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n */\ncontract ERC1155PS is Context, ERC165, IERC1155, IERC1155MetadataURI {\n  using Address for address;\n\n  struct AddressData {\n    uint128 balance;\n    uint128 quantityMinted;\n  }\n\n  // Mapping from token ID to owner address data\n  mapping(uint256 => mapping(address => AddressData)) private _addressData;\n\n  // Mapping from account to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n  string private _uri;\n\n  /**\n   * @dev See {_setURI}.\n   */\n  constructor(string memory uri_) {\n    _setURI(uri_);\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC1155).interfaceId ||\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC1155MetadataURI-uri}.\n   *\n   * This implementation returns the same URI for *all* token types. It relies\n   * on the token type ID substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * Clients calling this function must replace the `\\{id\\}` substring with the\n   * actual token type ID.\n   */\n  function uri(uint256) public view virtual override returns (string memory) {\n    return _uri;\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    require(\n      account != address(0),\n      \"ERC1155: address zero is not a valid owner\"\n    );\n    return _addressData[id][account].balance;\n  }\n\n  function quantityMinted(uint256 id, address owner)\n    public\n    view\n    returns (uint256)\n  {\n    require(\n      owner != address(0),\n      \"ERC721A: number minted query for the zero address\"\n    );\n    return _addressData[id][owner].quantityMinted;\n  }\n\n  function _setQuantityMinted(\n    uint256 id,\n    address owner,\n    uint256 newQtyMinted\n  ) internal {\n    require(\n      owner != address(0),\n      \"ERC721A: number minted query for the zero address\"\n    );\n    _addressData[id][owner].quantityMinted = uint128(newQtyMinted);\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOfBatch}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n  {\n    require(\n      accounts.length == ids.length,\n      \"ERC1155: accounts and ids length mismatch\"\n    );\n\n    uint256[] memory batchBalances = new uint256[](accounts.length);\n\n    for (uint256 i = 0; i < accounts.length; ++i) {\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\n    }\n\n    return batchBalances;\n  }\n\n  /**\n   * @dev See {IERC1155-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved)\n    public\n    virtual\n    override\n  {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC1155-isApprovedForAll}.\n   */\n  function isApprovedForAll(address account, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[account][operator];\n  }\n\n  /**\n   * @dev See {IERC1155-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) public virtual override {\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      \"ERC1155: caller is not token owner nor approved\"\n    );\n    _safeTransferFrom(from, to, id, amount, data);\n  }\n\n  /**\n   * @dev See {IERC1155-safeBatchTransferFrom}.\n   */\n  function safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) public virtual override {\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      \"ERC1155: caller is not token owner nor approved\"\n    );\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function _safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) internal virtual {\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n    address operator = _msgSender();\n    uint256[] memory ids = _asSingletonArray(id);\n    uint256[] memory amounts = _asSingletonArray(amount);\n\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    uint128 fromBalance = _addressData[id][from].balance;\n    require(\n      fromBalance >= amount,\n      \"ERC1155: insufficient balance for transfer\"\n    );\n    unchecked {\n      _addressData[id][from].balance = fromBalance - uint128(amount);\n    }\n    _addressData[id][to].balance += uint128(amount);\n\n    emit TransferSingle(operator, from, to, id, amount);\n\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function _safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {\n    require(\n      ids.length == amounts.length,\n      \"ERC1155: ids and amounts length mismatch\"\n    );\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    for (uint256 i = 0; i < ids.length; ++i) {\n      uint256 id = ids[i];\n      uint128 amount = uint128(amounts[i]);\n\n      uint128 fromBalance = _addressData[id][from].balance;\n      require(\n        fromBalance >= amount,\n        \"ERC1155: insufficient balance for transfer\"\n      );\n      unchecked {\n        _addressData[id][from].balance = fromBalance - amount;\n      }\n      _addressData[id][to].balance += amount;\n    }\n\n    emit TransferBatch(operator, from, to, ids, amounts);\n\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Sets a new URI for all token types, by relying on the token type ID\n   * substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\n   * clients with the token type ID.\n   *\n   * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n   * interpreted by clients as\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n   * for token type ID 0x4cce0.\n   *\n   * See {uri}.\n   *\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\n   * this function emits no events.\n   */\n  function _setURI(string memory newuri) internal virtual {\n    _uri = newuri;\n  }\n\n  /**\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function _mint(\n    address to,\n    uint256 id,\n    uint256 amount\n  ) internal virtual {\n    _addressData[id][to].balance += uint128(amount);\n    _addressData[id][to].quantityMinted += uint128(amount);\n    emit TransferSingle(msg.sender, address(0), to, id, amount);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function _mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {\n    require(to != address(0), \"ERC1155: mint to the zero address\");\n    require(\n      ids.length == amounts.length,\n      \"ERC1155: ids and amounts length mismatch\"\n    );\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      _addressData[ids[i]][to].balance += uint128(amounts[i]);\n      // _addressData[ids[i]][to].quantityMinted += uint128(amounts[i]);\n    }\n\n    emit TransferBatch(operator, address(0), to, ids, amounts);\n\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    _doSafeBatchTransferAcceptanceCheck(\n      operator,\n      address(0),\n      to,\n      ids,\n      amounts,\n      data\n    );\n  }\n\n  /**\n   * @dev Destroys `amount` tokens of token type `id` from `from`\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `from` must have at least `amount` tokens of token type `id`.\n   */\n  function _burn(\n    address from,\n    uint256 id,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), \"ERC1155: burn from the zero address\");\n\n    address operator = _msgSender();\n    uint256[] memory ids = _asSingletonArray(id);\n    uint256[] memory amounts = _asSingletonArray(amount);\n\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n    uint128 fromBalance = _addressData[id][from].balance;\n    require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n    unchecked {\n      _addressData[id][from].balance = fromBalance - uint128(amount);\n    }\n\n    emit TransferSingle(operator, from, address(0), id, amount);\n\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   */\n  function _burnBatch(\n    address from,\n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) internal virtual {\n    require(from != address(0), \"ERC1155: burn from the zero address\");\n    require(\n      ids.length == amounts.length,\n      \"ERC1155: ids and amounts length mismatch\"\n    );\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      uint256 id = ids[i];\n      uint128 amount = uint128(amounts[i]);\n\n      uint128 fromBalance = _addressData[id][from].balance;\n      require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n      unchecked {\n        _addressData[id][from].balance = fromBalance - amount;\n      }\n    }\n\n    emit TransferBatch(operator, from, address(0), ids, amounts);\n\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(\n    address owner,\n    address operator,\n    bool approved\n  ) internal virtual {\n    require(owner != operator, \"ERC1155: setting approval status for self\");\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting\n   * and burning, as well as batched variants.\n   *\n   * The same hook is called on both single and batched variants. For single\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\n   *\n   * Calling conditions (for each `id` and `amount` pair):\n   *\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * of token type `id` will be  transferred to `to`.\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\n   * for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n   * will be burned.\n   * - `from` and `to` are never both zero.\n   * - `ids` and `amounts` have the same, non-zero length.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting\n   * and burning, as well as batched variants.\n   *\n   * The same hook is called on both single and batched variants. For single\n   * transfers, the length of the `id` and `amount` arrays will be 1.\n   *\n   * Calling conditions (for each `id` and `amount` pair):\n   *\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * of token type `id` will be  transferred to `to`.\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\n   * for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n   * will be burned.\n   * - `from` and `to` are never both zero.\n   * - `ids` and `amounts` have the same, non-zero length.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {}\n\n  function _doSafeTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) private {\n    if (to.isContract()) {\n      try\n        IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)\n      returns (bytes4 response) {\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n      }\n    }\n  }\n\n  function _doSafeBatchTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) private {\n    if (to.isContract()) {\n      try\n        IERC1155Receiver(to).onERC1155BatchReceived(\n          operator,\n          from,\n          ids,\n          amounts,\n          data\n        )\n      returns (bytes4 response) {\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n      }\n    }\n  }\n\n  function _asSingletonArray(uint256 element)\n    private\n    pure\n    returns (uint256[] memory)\n  {\n    uint256[] memory array = new uint256[](1);\n    array[0] = element;\n\n    return array;\n  }\n}\n"
18     },
19     "contracts/libraries/ERC2981/ERC2981Base.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nimport './IERC2981Royalties.sol';\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\n    struct RoyaltyInfo {\n        address recipient;\n        uint24 amount;\n    }\n\n    /// @inheritdoc\tERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC2981Royalties).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}"
21     },
22     "@openzeppelin/contracts/access/IAccessControl.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "contracts/libraries/ERC1155/IERC1155.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n  /**\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n   */\n  event TransferSingle(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256 id,\n    uint256 value\n  );\n\n  /**\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n   * transfers.\n   */\n  event TransferBatch(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256[] ids,\n    uint256[] values\n  );\n\n  /**\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n   * `approved`.\n   */\n  event ApprovalForAll(\n    address indexed account,\n    address indexed operator,\n    bool approved\n  );\n\n  /**\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n   *\n   * If an {URI} event was emitted for `id`, the standard\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n   * returned by {IERC1155MetadataURI-uri}.\n   */\n  event URI(string value, uint256 indexed id);\n\n  /**\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    external\n    view\n    returns (uint256[] memory);\n\n  /**\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n   *\n   * Emits an {ApprovalForAll} event.\n   *\n   * Requirements:\n   *\n   * - `operator` cannot be the caller.\n   */\n  function setApprovalForAll(address operator, bool approved) external;\n\n  /**\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n   *\n   * See {setApprovalForAll}.\n   */\n  function isApprovedForAll(address account, address operator)\n    external\n    view\n    returns (bool);\n\n  /**\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes calldata data\n  ) external;\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] calldata ids,\n    uint256[] calldata amounts,\n    bytes calldata data\n  ) external;\n}\n"
36     },
37     "contracts/libraries/ERC1155/IERC1155Receiver.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n  /**\n   * @dev Handles the receipt of a single ERC1155 token type. This function is\n   * called at the end of a `safeTransferFrom` after the balance has been updated.\n   *\n   * NOTE: To accept the transfer, this must return\n   * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n   * (i.e. 0xf23a6e61, or its own function selector).\n   *\n   * @param operator The address which initiated the transfer (i.e. msg.sender)\n   * @param from The address which previously owned the token\n   * @param id The ID of the token being transferred\n   * @param value The amount of tokens being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n   */\n  function onERC1155Received(\n    address operator,\n    address from,\n    uint256 id,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bytes4);\n\n  /**\n   * @dev Handles the receipt of a multiple ERC1155 token types. This function\n   * is called at the end of a `safeBatchTransferFrom` after the balances have\n   * been updated.\n   *\n   * NOTE: To accept the transfer(s), this must return\n   * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n   * (i.e. 0xbc197c81, or its own function selector).\n   *\n   * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n   * @param from The address which previously owned the token\n   * @param ids An array containing ids of each token being transferred (order and length must match values array)\n   * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n   */\n  function onERC1155BatchReceived(\n    address operator,\n    address from,\n    uint256[] calldata ids,\n    uint256[] calldata values,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n"
39     },
40     "contracts/libraries/ERC1155/extensions/IERC1155MetadataURI.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
42     },
43     "@openzeppelin/contracts/utils/Address.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
45     },
46     "contracts/libraries/ERC2981/IERC2981Royalties.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address _receiver, uint256 _royaltyAmount);\n}"
48     },
49     "contracts-exposed/FutureQuest.sol": {
50       "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/FutureQuest.sol\";\n\ncontract $FutureQuest is FutureQuest {\n    constructor(address couponSigner) FutureQuest(couponSigner) {}\n\n    function $_checkRole(bytes32 role) external view {\n        return super._checkRole(role);\n    }\n\n    function $_checkRole(bytes32 role,address account) external view {\n        return super._checkRole(role,account);\n    }\n\n    function $_setupRole(bytes32 role,address account) external {\n        return super._setupRole(role,account);\n    }\n\n    function $_setRoleAdmin(bytes32 role,bytes32 adminRole) external {\n        return super._setRoleAdmin(role,adminRole);\n    }\n\n    function $_grantRole(bytes32 role,address account) external {\n        return super._grantRole(role,account);\n    }\n\n    function $_revokeRole(bytes32 role,address account) external {\n        return super._revokeRole(role,account);\n    }\n\n    function $_setQuantityMinted(uint256 id,address owner,uint256 newQtyMinted) external {\n        return super._setQuantityMinted(id,owner,newQtyMinted);\n    }\n\n    function $_safeTransferFrom(address from,address to,uint256 id,uint256 amount,bytes calldata data) external {\n        return super._safeTransferFrom(from,to,id,amount,data);\n    }\n\n    function $_safeBatchTransferFrom(address from,address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external {\n        return super._safeBatchTransferFrom(from,to,ids,amounts,data);\n    }\n\n    function $_setURI(string calldata newuri) external {\n        return super._setURI(newuri);\n    }\n\n    function $_mint(address to,uint256 id,uint256 amount) external {\n        return super._mint(to,id,amount);\n    }\n\n    function $_mintBatch(address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external {\n        return super._mintBatch(to,ids,amounts,data);\n    }\n\n    function $_burn(address from,uint256 id,uint256 amount) external {\n        return super._burn(from,id,amount);\n    }\n\n    function $_burnBatch(address from,uint256[] calldata ids,uint256[] calldata amounts) external {\n        return super._burnBatch(from,ids,amounts);\n    }\n\n    function $_setApprovalForAll(address owner,address operator,bool approved) external {\n        return super._setApprovalForAll(owner,operator,approved);\n    }\n\n    function $_beforeTokenTransfer(address operator,address from,address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external {\n        return super._beforeTokenTransfer(operator,from,to,ids,amounts,data);\n    }\n\n    function $_afterTokenTransfer(address operator,address from,address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external {\n        return super._afterTokenTransfer(operator,from,to,ids,amounts,data);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
51     }
52   },
53   "settings": {
54     "optimizer": {
55       "enabled": true,
56       "runs": 10000
57     },
58     "outputSelection": {
59       "*": {
60         "*": [
61           "evm.bytecode",
62           "evm.deployedBytecode",
63           "devdoc",
64           "userdoc",
65           "metadata",
66           "abi"
67         ]
68       }
69     },
70     "libraries": {}
71   }
72 }}