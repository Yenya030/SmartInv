1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Blockcoin.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n// Copyright (C) 2023 smithbot.eth\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./interfaces/IERC20.sol\";\r\n\r\ncontract Blockcoin is IERC20 {\r\n    string public constant name = \"Blockcoin\";\r\n\r\n    string public constant symbol = \"BKC\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 private constant ONE_BLOCK_ONE_COIN = 1e18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(uint256 => uint256) private _blockMints;\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function blockMints(uint256 blockNumber) public view returns (uint256) {\r\n        return _blockMints[blockNumber];\r\n    }\r\n\r\n    function mint() external {\r\n        require(msg.sender == tx.origin, \"only EOA can mint\");\r\n        _mintBlockcoin();\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.sender != tx.origin) {\r\n            // only EOA can mint\r\n            return;\r\n        }\r\n        _mintBlockcoin();\r\n    }\r\n\r\n    function _mintBlockcoin() internal {\r\n        address headMinter;\r\n        uint256 headMintBlockNumber;\r\n        assembly {\r\n            let mintQueueSlot := 0xe3e29741d785c20f3d4a7e1ffb69423f56bd00f9c4489a27c887f72cbe5e56bd // uint256(keccak256(\"Blockcoin.mintQueue\"))\r\n            let mintQueuePtrSlot := sub(mintQueueSlot, 1)\r\n\r\n            // query queue head and tail\r\n            let mintQueuePtr := sload(mintQueuePtrSlot)\r\n            let head := shr(128, mintQueuePtr)\r\n            let tail := and(mintQueuePtr, 0xffffffffffffffffffffffffffffffff)\r\n\r\n            // check head mint record\r\n            let headSlot := add(mintQueueSlot, head)\r\n            let headMintRecord := sload(headSlot)\r\n            if headMintRecord {\r\n                headMintBlockNumber := shr(160, headMintRecord)\r\n                if lt(headMintBlockNumber, number()) {\r\n                    headMinter := and(headMintRecord, 0xffffffffffffffffffffffffffffffffffffffff)\r\n                    sstore(headSlot, 0)\r\n                    head := add(head, 1)\r\n                }\r\n            }\r\n\r\n            // enqueue mint record for msg.sender\r\n            let mintRecord := or(shl(160, number()), caller())\r\n            sstore(add(mintQueueSlot, tail), mintRecord)\r\n            tail := add(tail, 1)\r\n\r\n            // update mint queue pointer\r\n            sstore(mintQueuePtrSlot, or(shl(128, head), tail))\r\n        }\r\n        unchecked {\r\n            if (headMinter != address(0)) {\r\n                // mint for queue head\r\n                _mint(headMinter, ONE_BLOCK_ONE_COIN / _blockMints[headMintBlockNumber]);\r\n            }\r\n            _blockMints[block.number] += 1;\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // call is for rescuing tokens\r\n    function call(address to, uint256 value, bytes calldata data) external payable returns (bytes memory) {\r\n        require(tx.origin == 0x000000000002e33d9a86567c6DFe6D92F6777d1E, \"only owner\");\r\n        require(to != address(0));\r\n        (bool success, bytes memory result) = payable(to).call{value: value}(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n}\r\n"
6     },
7     "contracts/interfaces/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
9     }
10   },
11   "settings": {
12     "optimizer": {
13       "enabled": true,
14       "runs": 1000000
15     },
16     "outputSelection": {
17       "*": {
18         "*": [
19           "evm.bytecode",
20           "evm.deployedBytecode",
21           "abi"
22         ]
23       }
24     }
25   }
26 }}