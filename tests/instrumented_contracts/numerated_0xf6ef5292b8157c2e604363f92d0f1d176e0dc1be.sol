1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/2.0/sePSPStakingMigratorV1.sol": {
5       "content": "pragma solidity 0.8.19;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/Utils.sol\";\n\ninterface I_sePSP2 is IERC20 {\n    function depositPSPAndEth(\n        uint256 pspAmount,\n        uint256 minBptOut,\n        bytes memory pspPermit\n    ) external payable;\n\n    function depositPSPAndWeth(\n        uint256 pspAmount,\n        uint256 wethAmount,\n        uint256 minBptOut,\n        bytes memory pspPermit\n    ) external;\n}\n\ncontract sePSPStakingMigratorV1 {\n    IERC20 public immutable PSP;\n    IERC20 public immutable WETH;\n\n    IERC20 public immutable sePSP;\n    I_sePSP2 public immutable sePSP2;\n\n    address public immutable PSP_Supplier;\n\n    constructor(\n        IERC20 _PSP,\n        IERC20 _WETH,\n        IERC20 _sePSP,\n        I_sePSP2 _sePSP2,\n        address _PSP_Supplier\n    ) {\n        PSP = _PSP;\n        WETH = _WETH;\n\n        sePSP = _sePSP;\n        sePSP2 = _sePSP2;\n\n        PSP_Supplier = _PSP_Supplier;\n\n        // pre-approve\n        PSP.approve(address(sePSP2), type(uint).max);\n        WETH.approve(address(sePSP2), type(uint).max);\n    }\n\n    function migrateSePSP1AndWETHtoSePSP2(\n        uint256 sePSP1Amount,\n        uint256 wethAmount,\n        uint256 minBptOut,\n        bytes calldata sePSPPermit\n    ) external {\n        /**\n        0.1 Migrator contract has allowance from PSP_Supplier for some amount of PSP\n        0.2 Migrator contract has allowance from user for some amount of WETH\n        1. User gives allowance or permit for sePSP1 to Migrator contract\n        2. sePSP1 is transferred to PSP_Supplier\n        3. equivalent PSP is transferred from PSP_Supplier, and WETH from user\n        4. PSP + WETH (from user) is deposited into Balancer Pool through sePSP2\n        5. resulting sePSP2 is transferred to user\n         */\n\n        if (sePSP.allowance(msg.sender, address(this)) < sePSP1Amount) {\n            Utils.permit(sePSP, sePSPPermit);\n        }\n\n        sePSP.transferFrom(msg.sender, PSP_Supplier, sePSP1Amount);\n\n        WETH.transferFrom(msg.sender, address(this), wethAmount);\n        PSP.transferFrom(PSP_Supplier, address(this), sePSP1Amount);\n\n        sePSP2.depositPSPAndWeth(sePSP1Amount, wethAmount, minBptOut, \"\");\n\n        uint256 sePSP2Balance = sePSP2.balanceOf(address(this));\n        sePSP2.transfer(msg.sender, sePSP2Balance);\n    }\n\n    function migrateSePSP1AndETHtoSePSP2(\n        uint256 sePSP1Amount,\n        uint256 minBptOut,\n        bytes calldata sePSPPermit\n    ) external payable {\n        /**\n        0. Migrator contract has allowance from PSP_Supplier for some amount of PSP\n        1. User gives allowance or permit for sePSP1 to Migrator contract\n        2. sePSP1 is transferred to PSP_Supplier\n        3. equivalent PSP is transferred from PSP_Supplier\n        4. PSP + ETH (from user) is deposited into Balancer Pool through sePSP2\n        5. resulting sePSP2 is transferred to user\n         */\n\n        if (sePSP.allowance(msg.sender, address(this)) < sePSP1Amount) {\n            Utils.permit(sePSP, sePSPPermit);\n        }\n\n\n        sePSP.transferFrom(msg.sender, PSP_Supplier, sePSP1Amount);\n\n        PSP.transferFrom(PSP_Supplier, address(this), sePSP1Amount);\n\n        sePSP2.depositPSPAndEth{ value: msg.value }(sePSP1Amount, minBptOut, \"\");\n\n        uint256 sePSP2Balance = sePSP2.balanceOf(address(this));\n        sePSP2.transfer(msg.sender, sePSP2Balance);\n    }\n}\n"
6     },
7     "contracts/2.0/utils/Utils.sol": {
8       "content": "pragma solidity ^0.8.6;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\nerror PermitFailed();\nerror TransferEthFailed();\n\nlibrary Utils {\n    function permit(IERC20 token, bytes memory permit) internal {\n        if (permit.length == 32 * 7) {\n            (bool success, ) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\n            if (!success) {\n                revert PermitFailed();\n            }\n        }\n    }\n\n    function transferETH(address payable destination, uint256 amount) internal {\n        if (amount > 0) {\n            (bool result, ) = destination.call{ value: amount }(\"\");\n            if (!result) {\n                revert TransferEthFailed();\n            }\n        }\n    }\n}\n"
9     },
10     "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "openzeppelin-solidity/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": true,
20       "runs": 1000000
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "metadata": {
35       "useLiteralContent": true
36     },
37     "libraries": {}
38   }
39 }}