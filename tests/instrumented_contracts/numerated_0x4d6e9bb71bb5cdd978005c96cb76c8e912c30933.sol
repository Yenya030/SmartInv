1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/MoopyStaking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n/*                \r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&@@@....@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%#((%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%@@@@@@@((((((((((%@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@(  ((((((((((@@(%%%%%%%%@@           @@(((((((%%@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@     ((((((((((((((%%%%@.      @@@       @&(((((%%.@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@    ((((((((((((((%%@..    @&&&&&&@      @(((%%%..@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@    ((((((((((((((@...   @&**&&&%,@.     @((%%....&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@ @*(((((((((((((@...     @@**   &@      @%%......,@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@   ((((((((((((@....      .@*  &&@     @&.........@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@     ((((((((((#@....    @ ,,,,,&@     @*.........#@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@      ((((((((((%@....    @@@@@       @*@..........@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@(     (((((((((((((@@..........@@@@@@%............,%%@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@((((((((((((((((((@@#(((((((&@@ /@@@............%%%%&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@((((((((((((((((((((((((((((@  ****@@..........%%%%%%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@(((((((((((((((((((((((((((@&   ***@........%%%%%%%%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@#(((((((((((((((((((((((((((@  ****@((/...%%%%%%%%%%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@(((((((((((((#(((((((((((((@  ****@((((((((%%%%%%%%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@((((((%%%......(((((((((((@   .**@(((((((((((((%%%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@%%%%.............(((((((((@  ***@((((((((((((((((%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@%%....%%............((((((((@@&(((((((((((((@@((((@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@%.....@@...............(((((((((((((((((((((@@((((@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@......@@...................(((((((((((((((((@(((((@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@%.....@@................         /((((((((((@((((@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@%%%#...@@...........                        @@((((@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@%%%%%%%@@...                                @((((@@@@@@@@@@@@@@@@                \r\n*/\r\n/****************************************\r\n * @author: 0xlunes              \t\t*\r\n * @team:   Moopy\t                    *\r\n ****************************************\r\n * NFT Staking implementation for Moopy\t*\r\n *\t\t\t\t\t\t\t\t\t\t*\r\n * Reward distribution based on \t\t*\r\n * Masterchef implementation\t\t\t*\r\n ****************************************/\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n// Additional method available for Mooney\r\ninterface IMooney is IERC20 {\r\n\tfunction mint(address to, uint256 amount) external;\r\n}\r\n\r\n// Additional methods available for sMoopy\r\ninterface ISmoopy is IERC721 {\r\n\tfunction mint(address to, uint256 id) external;\r\n\tfunction burn(address from, uint256 tokenId) external;\r\n}\r\n\r\ncontract MoopyStaking is Ownable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Info of each user.\r\n    struct UserInfo {\r\n        uint256 shares; // total Moopies staked     \r\n        uint256 rewardDebt; // amount of Moonies claimed at last update\r\n\t\tmapping(uint256 => bool) stakedIds; // all tokens staked by the user\r\n    }\r\n\r\n\t// Moopy Contract \r\n\tIERC721 public moopy = IERC721(0xeEE01E9364C2bF5AfF24328FB5bDFb98fF5cEeE3);\r\n\r\n\t// Mooney Contract\r\n\tIMooney public mooney = IMooney(0x2A86C73326771795E7f7e6Fd1ea7fdAB993dEc9D);\r\n\r\n\t// Smoopy Contract\r\n\tISmoopy public smoopy = ISmoopy(0x46421dA2579E1151212e11FDf61cCd836254b27D);\r\n\r\n\t// Treasury wallet address\r\n\taddress public devAddress = 0x1111d7B4976cc9310b15BcB3123395b308451111;\r\n\r\n\t// Total Mooney emission per Ethereum block \r\n\tuint256 public rewardsPerBlock = 27550000000000000000; // * 10e18\r\n\t\r\n    // Block number when staking rewards starts.\r\n    uint256 public startBlock = 1659013200;\r\n\r\n\t// Update rewards once per block\r\n\tuint256 public lastRewardBlock = startBlock;\r\n\r\n\t// Accumulated rewards per Moopy staked\r\n\tuint256 public accRewardsPerShare = 0;\r\n\r\n\t// Allows holders to stake Moopy\r\n\tbool public isStakingActive = false;\r\n\r\n\t// Details of all stakers\r\n    mapping(address => UserInfo) public userInfo;\r\n\t\r\n    event Deposit(address indexed user, uint256[] tokenIds);\r\n    event Withdraw(address indexed user, uint256[] tokenIds);\r\n    event EmergencyWithdraw(address indexed user, uint256[] tokenIds);\r\n\r\n\tconstructor() {}\r\n\r\n\tfunction updatePool() public {\r\n\t\tif(block.number < lastRewardBlock) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 totalShares = moopy.balanceOf(address(this));\r\n\r\n\t\tif(totalShares == 0) {\r\n\t\t\tlastRewardBlock = block.number;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 duration = block.number - lastRewardBlock;\r\n\t\tuint256 accRewards = rewardsPerBlock * duration;\r\n\t\t\r\n\t\tmooney.mint(devAddress, accRewards * 3 / 20);\r\n\t\tmooney.mint(address(this), accRewards);\r\n\r\n\t\taccRewardsPerShare += accRewards / totalShares;\r\n\t\tlastRewardBlock = block.number;\r\n\t}\r\n\r\n\tfunction deposit(uint256[] calldata _tokenIds) public {\r\n\t\trequire(isStakingActive, \"staking not active\");\r\n\r\n\t\tUserInfo storage user = userInfo[msg.sender];\r\n\r\n\t\tupdatePool();\r\n\r\n\t\tif (user.shares > 0) {\r\n\t\t\tuint256 pending = user.shares * accRewardsPerShare  - user.rewardDebt;\r\n\t\t\tmooney.transfer(msg.sender, pending);\r\n\t\t}\r\n\r\n\t\tuint256 length = _tokenIds.length;\r\n\t\tfor(uint256 i = 0; i < length; i++) {\r\n\t\t\tmoopy.transferFrom(msg.sender, address(this), _tokenIds[i]);\r\n\t\t\tuser.stakedIds[_tokenIds[i]] = true;\t\r\n\t\t\tsmoopy.mint(msg.sender, _tokenIds[i]);\t\r\n\t\t}\r\n\r\n\t\tuser.shares += length;\r\n\t\tuser.rewardDebt = user.shares * accRewardsPerShare;\r\n\r\n\t\temit Deposit(msg.sender, _tokenIds);\r\n\t}\r\n\r\n\tfunction withdraw(uint256[] calldata _tokenIds) public {\r\n\t\tUserInfo storage user = userInfo[msg.sender];\r\n\r\n\t\tupdatePool();\r\n\r\n\t\tuint256 pending = user.shares * accRewardsPerShare - user.rewardDebt;\r\n\r\n\t\tmooney.transfer(msg.sender, pending);\r\n\r\n\t\tuint256 length = _tokenIds.length;\t\r\n\t\t\r\n\t\tuser.shares -= length;\r\n\t\tuser.rewardDebt = user.shares * accRewardsPerShare;\r\n\r\n\t\tfor (uint256 i; i < length; i++){\r\n\t\t\trequire(user.stakedIds[_tokenIds[i]], \"token not staked\");\r\n\t\t\tmoopy.transferFrom(address(this), msg.sender, _tokenIds[i]);\r\n\t\t\tuser.stakedIds[_tokenIds[i]] = false;\r\n\r\n\t\t\tif (smoopy.ownerOf(_tokenIds[i]) != address(0)) {\r\n\t\t\t\tsmoopy.burn(smoopy.ownerOf(_tokenIds[i]), _tokenIds[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit Withdraw(msg.sender, _tokenIds);\r\n\t}\r\n\r\n\tfunction claimRewards() public {\r\n\t\tUserInfo storage user = userInfo[msg.sender];\r\n\r\n\t\tupdatePool();\r\n\r\n\t\tuint256 pending = user.shares * accRewardsPerShare - user.rewardDebt;\r\n\r\n\t\tmooney.transfer(msg.sender, pending);\r\n\r\n\t\tuser.rewardDebt = user.shares * accRewardsPerShare;\r\n\t}\r\n\r\n\tfunction emergencyWithdraw(uint256[] memory _tokenIds) public {\r\n\t\tUserInfo storage user = userInfo[msg.sender];\r\n\r\n\t\tuint256 length = _tokenIds.length;\r\n\r\n\t\tfor (uint256 i; i < length; i++){\r\n\t\t\trequire(user.stakedIds[_tokenIds[i]], \"token not staked\");\r\n\t\t\tmoopy.transferFrom(address(this), msg.sender, _tokenIds[i]);\r\n\t\t\tuser.stakedIds[_tokenIds[i]] = false;\r\n\t\t}\r\n\r\n\t\tuser.shares = 0;\r\n\t\tuser.rewardDebt = 0;\r\n\r\n\t\temit EmergencyWithdraw(msg.sender, _tokenIds);\r\n\t}\r\n\r\n\t// public view\r\n\tfunction getStakedTokens(address _user) external view returns(uint256[] memory) {\r\n\t\tUserInfo storage user = userInfo[_user];\r\n\r\n\t\trequire(user.shares > 0, \"no staked tokens\");\r\n\t\r\n\t\tuint256 count;\r\n\t\tuint256 quantity = user.shares;\r\n\t\tuint256 length = 5000;\r\n\t\tuint256[] memory wallet = new uint256[](quantity);\r\n\t\tfor (uint256 i; i < length; i++) {\r\n\t\t\tif (user.stakedIds[i]) {\r\n\t\t\t\twallet[count++] = i;\r\n\t\t\t\tif (count == quantity) break;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn wallet;\r\n\t}\r\n\r\n\tfunction pendingRewards(address _user) external view returns(uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n\t\tuint256 totalShares = moopy.balanceOf(address(this));\r\n\r\n\t\tuint256 _accRewardsPerShare = accRewardsPerShare;\r\n\r\n\t\tif(block.number >= lastRewardBlock && totalShares != 0) {\r\n\t\t\tuint256 duration = block.number - lastRewardBlock;\r\n\t\t\tuint256 accRewards = rewardsPerBlock * duration;\r\n\r\n\t\t\t_accRewardsPerShare += accRewards / totalShares;\r\n\t\t}\r\n\r\n\t\treturn user.shares * _accRewardsPerShare - user.rewardDebt;\r\n\r\n\t}\r\n\r\n\t// only owner\r\n\tfunction setStartBlock(uint256 _startBlock) public onlyOwner {\r\n\t\tstartBlock = _startBlock;\r\n\t\tlastRewardBlock = startBlock;\r\n\t}\r\n\r\n\tfunction setRewardsPerBlock(uint256 _rewardsPerBlock) public onlyOwner{\r\n\t\trewardsPerBlock = _rewardsPerBlock;\r\n\t}\r\n\r\n\tfunction setStakingActive() public onlyOwner {\r\n\t\tisStakingActive = !isStakingActive;\r\n\t}\r\n\r\n\tfunction setMoopy(address _newMoopyAddress) public onlyOwner {\r\n\t\tmoopy = IERC721(_newMoopyAddress);\r\n\t}\r\n\r\n\tfunction setSmoopy(address _newSmoopyAddress) public onlyOwner {\r\n\t\tsmoopy = ISmoopy(_newSmoopyAddress);\r\n\t}\r\n\t\r\n\tfunction setMooney(address _newMooneyAddress) public onlyOwner {\r\n\t\tmooney = IMooney(_newMooneyAddress);\r\n\t}\r\n\r\n\tfunction setDevAddr(address _devAddr) public onlyOwner {\r\n\t\tdevAddress = _devAddr;\r\n\t}\r\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Address.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
27     }
28   },
29   "settings": {
30     "optimizer": {
31       "enabled": false,
32       "runs": 200
33     },
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     },
46     "libraries": {}
47   }
48 }}