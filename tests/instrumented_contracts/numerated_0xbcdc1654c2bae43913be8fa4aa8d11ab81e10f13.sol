1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Context.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/math/Math.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
18     },
19     "contracts/library/erc721A/ERC721A.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721A.sol\";\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n\tfunction onERC721Received(\n\t\taddress operator,\n\t\taddress from,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n\t// Reference type for token approval.\n\tstruct TokenApprovalRef {\n\t\taddress value;\n\t}\n\n\t// =============================================================\n\t//                           CONSTANTS\n\t// =============================================================\n\n\t// Mask of an entry in packed address data.\n\tuint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n\t// The bit position of `numberMinted` in packed address data.\n\tuint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n\t// The bit position of `numberBurned` in packed address data.\n\tuint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n\t// The bit position of `aux` in packed address data.\n\tuint256 private constant _BITPOS_AUX = 192;\n\n\t// Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n\tuint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n\t// The bit position of `startTimestamp` in packed ownership.\n\tuint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n\t// The bit mask of the `burned` bit in packed ownership.\n\tuint256 private constant _BITMASK_BURNED = 1 << 224;\n\n\t// The bit position of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n\t// The bit mask of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n\t// The bit position of `extraData` in packed ownership.\n\tuint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n\t// Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n\tuint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n\t// The mask of the lower 160 bits for addresses.\n\tuint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n\t// The maximum `quantity` that can be minted with {_mintERC2309}.\n\t// This limit is to prevent overflows on the address data entries.\n\t// For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n\t// is required to cause an overflow, which is unrealistic.\n\tuint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n\t// The `Transfer` event signature is given by:\n\t// `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n\tbytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n\t\t0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n\t// =============================================================\n\t//                            STORAGE\n\t// =============================================================\n\n\t// The next token ID to be minted.\n\tuint256 private _currentIndex;\n\n\t// The number of tokens burned.\n\tuint256 private _burnCounter;\n\n\t// Token name\n\tstring private _name;\n\n\t// Token symbol\n\tstring private _symbol;\n\n\t// Mapping from token ID to ownership details\n\t// An empty struct value does not necessarily mean the token is unowned.\n\t// See {_packedOwnershipOf} implementation for details.\n\t//\n\t// Bits Layout:\n\t// - [0..159]   `addr`\n\t// - [160..223] `startTimestamp`\n\t// - [224]      `burned`\n\t// - [225]      `nextInitialized`\n\t// - [232..255] `extraData`\n\tmapping(uint256 => uint256) private _packedOwnerships;\n\n\t// Mapping owner address to address data.\n\t//\n\t// Bits Layout:\n\t// - [0..63]    `balance`\n\t// - [64..127]  `numberMinted`\n\t// - [128..191] `numberBurned`\n\t// - [192..255] `aux`\n\tmapping(address => uint256) private _packedAddressData;\n\n\t// Mapping from token ID to approved address.\n\tmapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n\t// Mapping from owner to operator approvals\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\n\n\t// =============================================================\n\t//                          CONSTRUCTOR\n\t// =============================================================\n\n\tconstructor(string memory name_, string memory symbol_) {\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\t_currentIndex = _startTokenId();\n\t}\n\n\t// =============================================================\n\t//                   TOKEN COUNTING OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the starting token ID.\n\t * To change the starting token ID, please override this function.\n\t */\n\tfunction _startTokenId() internal view virtual returns (uint256) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @dev Returns the next token ID to be minted.\n\t */\n\tfunction _nextTokenId() internal view virtual returns (uint256) {\n\t\treturn _currentIndex;\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens in existence.\n\t * Burned tokens will reduce the count.\n\t * To get the total number of tokens minted, please see {_totalMinted}.\n\t */\n\tfunction totalSupply() public view virtual override returns (uint256) {\n\t\t// Counter underflow is impossible as _burnCounter cannot be incremented\n\t\t// more than `_currentIndex - _startTokenId()` times.\n\t\tunchecked {\n\t\t\treturn _currentIndex - _burnCounter - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total amount of tokens minted in the contract.\n\t */\n\tfunction _totalMinted() internal view virtual returns (uint256) {\n\t\t// Counter underflow is impossible as `_currentIndex` does not decrement,\n\t\t// and it is initialized to `_startTokenId()`.\n\t\tunchecked {\n\t\t\treturn _currentIndex - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens burned.\n\t */\n\tfunction _totalBurned() internal view virtual returns (uint256) {\n\t\treturn _burnCounter;\n\t}\n\n\t// =============================================================\n\t//                    ADDRESS DATA OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the number of tokens in `owner`'s account.\n\t */\n\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\n\t\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\n\t\treturn _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens minted by `owner`.\n\t */\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens burned by or on behalf of `owner`.\n\t */\n\tfunction _numberBurned(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n\t */\n\tfunction _getAux(address owner) internal view returns (uint64) {\n\t\treturn uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n\t}\n\n\t/**\n\t * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n\t * If there are multiple variables, please pack them into a uint64.\n\t */\n\tfunction _setAux(address owner, uint64 aux) internal virtual {\n\t\tuint256 packed = _packedAddressData[owner];\n\t\tuint256 auxCasted;\n\t\t// Cast `aux` with assembly to avoid redundant masking.\n\t\tassembly {\n\t\t\tauxCasted := aux\n\t\t}\n\t\tpacked = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n\t\t_packedAddressData[owner] = packed;\n\t}\n\n\t// =============================================================\n\t//                            IERC165\n\t// =============================================================\n\n\t/**\n\t * @dev Returns true if this contract implements the interface defined by\n\t * `interfaceId`. See the corresponding\n\t * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n\t * to learn more about how these ids are created.\n\t *\n\t * This function call must use less than 30000 gas.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n\t\t// The interface IDs are constants representing the first 4 bytes\n\t\t// of the XOR of all function selectors in the interface.\n\t\t// See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n\t\t// (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n\t\treturn\n\t\t\tinterfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n\t\t\tinterfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n\t\t\tinterfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n\t}\n\n\t// =============================================================\n\t//                        IERC721Metadata\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the token collection name.\n\t */\n\tfunction name() public view virtual override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev Returns the token collection symbol.\n\t */\n\tfunction symbol() public view virtual override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n\t */\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n\t\tstring memory baseURI = _baseURI();\n\t\treturn\n\t\t\tbytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \"\";\n\t}\n\n\t/**\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n\t * by default, it can be overridden in child contracts.\n\t */\n\tfunction _baseURI() internal view virtual returns (string memory) {\n\t\treturn \"\";\n\t}\n\n\t// =============================================================\n\t//                     OWNERSHIPS OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the owner of the `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\n\t\treturn address(uint160(_packedOwnershipOf(tokenId)));\n\t}\n\n\t/**\n\t * @dev Gas spent here starts off proportional to the maximum mint batch size.\n\t * It gradually moves to O(1) as tokens get transferred around over time.\n\t */\n\tfunction _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnershipOf(tokenId));\n\t}\n\n\t/**\n\t * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n\t */\n\tfunction _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnerships[index]);\n\t}\n\n\t/**\n\t * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n\t */\n\tfunction _initializeOwnershipAt(uint256 index) internal virtual {\n\t\tif (_packedOwnerships[index] == 0) {\n\t\t\t_packedOwnerships[index] = _packedOwnershipOf(index);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the packed ownership data of `tokenId`.\n\t */\n\tfunction _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n\t\tuint256 curr = tokenId;\n\n\t\tunchecked {\n\t\t\tif (_startTokenId() <= curr)\n\t\t\t\tif (curr < _currentIndex) {\n\t\t\t\t\tuint256 packed = _packedOwnerships[curr];\n\t\t\t\t\t// If not burned.\n\t\t\t\t\tif (packed & _BITMASK_BURNED == 0) {\n\t\t\t\t\t\t// Invariant:\n\t\t\t\t\t\t// There will always be an initialized ownership slot\n\t\t\t\t\t\t// (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n\t\t\t\t\t\t// before an unintialized ownership slot\n\t\t\t\t\t\t// (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n\t\t\t\t\t\t// Hence, `curr` will not underflow.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// We can directly compare the packed value.\n\t\t\t\t\t\t// If the address is zero, packed will be zero.\n\t\t\t\t\t\twhile (packed == 0) {\n\t\t\t\t\t\t\tpacked = _packedOwnerships[--curr];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn packed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\trevert OwnerQueryForNonexistentToken();\n\t}\n\n\t/**\n\t * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n\t */\n\tfunction _unpackedOwnership(\n\t\tuint256 packed\n\t) private pure returns (TokenOwnership memory ownership) {\n\t\townership.addr = address(uint160(packed));\n\t\townership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n\t\townership.burned = packed & _BITMASK_BURNED != 0;\n\t\townership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n\t}\n\n\t/**\n\t * @dev Packs ownership data into a single uint256.\n\t */\n\tfunction _packOwnershipData(\n\t\taddress owner,\n\t\tuint256 flags\n\t) private view returns (uint256 result) {\n\t\tassembly {\n\t\t\t// Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\towner := and(owner, _BITMASK_ADDRESS)\n\t\t\t// `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n\t\t\tresult := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n\t */\n\tfunction _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n\t\t// For branchless setting of the `nextInitialized` flag.\n\t\tassembly {\n\t\t\t// `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n\t\t\tresult := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n\t\t}\n\t}\n\n\t// =============================================================\n\t//                      APPROVAL OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n\t * The approval is cleared when the token is transferred.\n\t *\n\t * Only a single account can be approved at a time, so approving the\n\t * zero address clears previous approvals.\n\t *\n\t * Requirements:\n\t *\n\t * - The caller must own the token or be an approved operator.\n\t * - `tokenId` must exist.\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address to, uint256 tokenId) public virtual override {\n\t\taddress owner = ownerOf(tokenId);\n\n\t\tif (_msgSenderERC721A() != owner)\n\t\t\tif (!isApprovedForAll(owner, _msgSenderERC721A())) {\n\t\t\t\trevert ApprovalCallerNotOwnerNorApproved();\n\t\t\t}\n\n\t\t_tokenApprovals[tokenId].value = to;\n\t\temit Approval(owner, to, tokenId);\n\t}\n\n\t/**\n\t * @dev Returns the account approved for `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\n\t\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n\t\treturn _tokenApprovals[tokenId].value;\n\t}\n\n\t/**\n\t * @dev Approve or remove `operator` as an operator for the caller.\n\t * Operators can call {transferFrom} or {safeTransferFrom}\n\t * for any token owned by the caller.\n\t *\n\t * Requirements:\n\t *\n\t * - The `operator` cannot be the caller.\n\t *\n\t * Emits an {ApprovalForAll} event.\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\n\t\tif (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n\t\t_operatorApprovals[_msgSenderERC721A()][operator] = approved;\n\t\temit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n\t}\n\n\t/**\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n\t *\n\t * See {setApprovalForAll}.\n\t */\n\tfunction isApprovedForAll(\n\t\taddress owner,\n\t\taddress operator\n\t) public view virtual override returns (bool) {\n\t\treturn _operatorApprovals[owner][operator];\n\t}\n\n\t/**\n\t * @dev Returns whether `tokenId` exists.\n\t *\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n\t *\n\t * Tokens start existing when they are minted. See {_mint}.\n\t */\n\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\n\t\treturn\n\t\t\t_startTokenId() <= tokenId &&\n\t\t\ttokenId < _currentIndex && // If within bounds,\n\t\t\t_packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n\t}\n\n\t/**\n\t * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n\t */\n\tfunction _isSenderApprovedOrOwner(\n\t\taddress approvedAddress,\n\t\taddress owner,\n\t\taddress msgSender\n\t) private pure returns (bool result) {\n\t\tassembly {\n\t\t\t// Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\towner := and(owner, _BITMASK_ADDRESS)\n\t\t\t// Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\tmsgSender := and(msgSender, _BITMASK_ADDRESS)\n\t\t\t// `msgSender == owner || msgSender == approvedAddress`.\n\t\t\tresult := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the storage slot and value for the approved address of `tokenId`.\n\t */\n\tfunction _getApprovedSlotAndAddress(\n\t\tuint256 tokenId\n\t) private view returns (uint256 approvedAddressSlot, address approvedAddress) {\n\t\tTokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n\t\t// The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n\t\tassembly {\n\t\t\tapprovedAddressSlot := tokenApproval.slot\n\t\t\tapprovedAddress := sload(approvedAddressSlot)\n\t\t}\n\t}\n\n\t// =============================================================\n\t//                      TRANSFER OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token\n\t * by either {approve} or {setApprovalForAll}.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\tif (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n\t\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(\n\t\t\ttokenId\n\t\t);\n\n\t\t// The nested ifs save around 20+ gas over a compound boolean condition.\n\t\tif (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n\t\t\tif (!isApprovedForAll(from, _msgSenderERC721A()))\n\t\t\t\trevert TransferCallerNotOwnerNorApproved();\n\n\t\tif (to == address(0)) revert TransferToZeroAddress();\n\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tassembly {\n\t\t\tif approvedAddress {\n\t\t\t\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\n\t\t\t\tsstore(approvedAddressSlot, 0)\n\t\t\t}\n\t\t}\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n\t\tunchecked {\n\t\t\t// We can directly increment and decrement the balances.\n\t\t\t--_packedAddressData[from]; // Updates: `balance -= 1`.\n\t\t\t++_packedAddressData[to]; // Updates: `balance += 1`.\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the next owner.\n\t\t\t// - `startTimestamp` to the timestamp of transfering.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\t_BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n\t\t\t);\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, to, tokenId);\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\n\t}\n\n\t/**\n\t * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n\t */\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\n\t}\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token\n\t * by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement\n\t * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) public virtual override {\n\t\ttransferFrom(from, to, tokenId);\n\t\tif (to.code.length != 0)\n\t\t\tif (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t}\n\t}\n\n\t/**\n\t * @dev Hook that is called before a set of serially-ordered token IDs\n\t * are about to be transferred. This includes minting.\n\t * And also called before burning one token.\n\t *\n\t * `startTokenId` - the first token ID to be transferred.\n\t * `quantity` - the amount to be transferred.\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _beforeTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Hook that is called after a set of serially-ordered token IDs\n\t * have been transferred. This includes minting.\n\t * And also called after one token has been burned.\n\t *\n\t * `startTokenId` - the first token ID to be transferred.\n\t * `quantity` - the amount to be transferred.\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` has been minted for `to`.\n\t * - When `to` is zero, `tokenId` has been burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _afterTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n\t *\n\t * `from` - Previous owner of the given token ID.\n\t * `to` - Target address that will receive the token.\n\t * `tokenId` - Token ID to be transferred.\n\t * `_data` - Optional data to send along with the call.\n\t *\n\t * Returns whether the call correctly returned the expected magic value.\n\t */\n\tfunction _checkContractOnERC721Received(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) private returns (bool) {\n\t\ttry\n\t\t\tERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\n\t\treturns (bytes4 retval) {\n\t\t\treturn retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n\t\t} catch (bytes memory reason) {\n\t\t\tif (reason.length == 0) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t} else {\n\t\t\t\tassembly {\n\t\t\t\t\trevert(add(32, reason), mload(reason))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// =============================================================\n\t//                        MINT OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event for each mint.\n\t */\n\tfunction _mint(address to, uint256 quantity) internal virtual {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are incredibly unrealistic.\n\t\t// `balance` and `numberMinted` have a maximum limit of 2**64.\n\t\t// `tokenId` has a maximum limit of 2**256.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the `balance` and `numberMinted`.\n\t\t\t_packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\t_nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n\t\t\t);\n\n\t\t\tuint256 toMasked;\n\t\t\tuint256 end = startTokenId + quantity;\n\n\t\t\t// Use assembly to loop and emit the `Transfer` event for gas savings.\n\t\t\tassembly {\n\t\t\t\t// Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\t\ttoMasked := and(to, _BITMASK_ADDRESS)\n\t\t\t\t// Emit the `Transfer` event.\n\t\t\t\tlog4(\n\t\t\t\t\t0, // Start of data (0, since no data).\n\t\t\t\t\t0, // End of data (0, since no data).\n\t\t\t\t\t_TRANSFER_EVENT_SIGNATURE, // Signature.\n\t\t\t\t\t0, // `address(0)`.\n\t\t\t\t\ttoMasked, // `to`.\n\t\t\t\t\tstartTokenId // `tokenId`.\n\t\t\t\t)\n\n\t\t\t\tfor {\n\t\t\t\t\tlet tokenId := add(startTokenId, 1)\n\t\t\t\t} iszero(eq(tokenId, end)) {\n\t\t\t\t\ttokenId := add(tokenId, 1)\n\t\t\t\t} {\n\t\t\t\t\t// Emit the `Transfer` event. Similar to above.\n\t\t\t\t\tlog4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (toMasked == 0) revert MintToZeroAddress();\n\n\t\t\t_currentIndex = end;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * This function is intended for efficient minting only during contract creation.\n\t *\n\t * It emits only one {ConsecutiveTransfer} as defined in\n\t * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n\t * instead of a sequence of {Transfer} event(s).\n\t *\n\t * Calling this function outside of contract creation WILL make your contract\n\t * non-compliant with the ERC721 standard.\n\t * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n\t * {ConsecutiveTransfer} event is only permissible during contract creation.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {ConsecutiveTransfer} event.\n\t */\n\tfunction _mintERC2309(address to, uint256 quantity) internal virtual {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\t\tif (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the `balance` and `numberMinted`.\n\t\t\t_packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\t_nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n\t\t\t);\n\n\t\t\temit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n\t\t\t_currentIndex = startTokenId + quantity;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - If `to` refers to a smart contract, it must implement\n\t * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * See {_mint}.\n\t *\n\t * Emits a {Transfer} event for each mint.\n\t */\n\tfunction _safeMint(address to, uint256 quantity, bytes memory _data) internal virtual {\n\t\t_mint(to, quantity);\n\n\t\tunchecked {\n\t\t\tif (to.code.length != 0) {\n\t\t\t\tuint256 end = _currentIndex;\n\t\t\t\tuint256 index = end - quantity;\n\t\t\t\tdo {\n\t\t\t\t\tif (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n\t\t\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t\t\t}\n\t\t\t\t} while (index < end);\n\t\t\t\t// Reentrancy protection.\n\t\t\t\tif (_currentIndex != end) revert();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Equivalent to `_safeMint(to, quantity, '')`.\n\t */\n\tfunction _safeMint(address to, uint256 quantity) internal virtual {\n\t\t_safeMint(to, quantity, \"\");\n\t}\n\n\t// =============================================================\n\t//                        BURN OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Equivalent to `_burn(tokenId, false)`.\n\t */\n\tfunction _burn(uint256 tokenId) internal virtual {\n\t\t_burn(tokenId, false);\n\t}\n\n\t/**\n\t * @dev Destroys `tokenId`.\n\t * The approval is cleared when the token is burned.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\taddress from = address(uint160(prevOwnershipPacked));\n\n\t\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(\n\t\t\ttokenId\n\t\t);\n\n\t\tif (approvalCheck) {\n\t\t\t// The nested ifs save around 20+ gas over a compound boolean condition.\n\t\t\tif (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n\t\t\t\tif (!isApprovedForAll(from, _msgSenderERC721A()))\n\t\t\t\t\trevert TransferCallerNotOwnerNorApproved();\n\t\t}\n\n\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tassembly {\n\t\t\tif approvedAddress {\n\t\t\t\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\n\t\t\t\tsstore(approvedAddressSlot, 0)\n\t\t\t}\n\t\t}\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance -= 1`.\n\t\t\t// - `numberBurned += 1`.\n\t\t\t//\n\t\t\t// We can directly decrement the balance, and increment the number burned.\n\t\t\t// This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n\t\t\t_packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the last owner.\n\t\t\t// - `startTimestamp` to the timestamp of burning.\n\t\t\t// - `burned` to `true`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] = _packOwnershipData(\n\t\t\t\tfrom,\n\t\t\t\t(_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\n\t\t\t\t\t_nextExtraData(from, address(0), prevOwnershipPacked)\n\t\t\t);\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, address(0), tokenId);\n\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n\t\tunchecked {\n\t\t\t_burnCounter++;\n\t\t}\n\t}\n\n\t// =============================================================\n\t//                     EXTRA DATA OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Directly sets the extra data for the ownership data `index`.\n\t */\n\tfunction _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n\t\tuint256 packed = _packedOwnerships[index];\n\t\tif (packed == 0) revert OwnershipNotInitializedForExtraData();\n\t\tuint256 extraDataCasted;\n\t\t// Cast `extraData` with assembly to avoid redundant masking.\n\t\tassembly {\n\t\t\textraDataCasted := extraData\n\t\t}\n\t\tpacked =\n\t\t\t(packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\n\t\t\t(extraDataCasted << _BITPOS_EXTRA_DATA);\n\t\t_packedOwnerships[index] = packed;\n\t}\n\n\t/**\n\t * @dev Called during each token transfer to set the 24bit `extraData` field.\n\t * Intended to be overridden by the cosumer contract.\n\t *\n\t * `previousExtraData` - the value of `extraData` before transfer.\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _extraData(\n\t\taddress from,\n\t\taddress to,\n\t\tuint24 previousExtraData\n\t) internal view virtual returns (uint24) {}\n\n\t/**\n\t * @dev Returns the next extra data for the packed ownership data.\n\t * The returned result is shifted into position.\n\t */\n\tfunction _nextExtraData(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 prevOwnershipPacked\n\t) private view returns (uint256) {\n\t\tuint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n\t\treturn uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n\t}\n\n\t// =============================================================\n\t//                       OTHER OPERATIONS\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the message sender (defaults to `msg.sender`).\n\t *\n\t * If you are writing GSN compatible contracts, you need to override this function.\n\t */\n\tfunction _msgSenderERC721A() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\t/**\n\t * @dev Converts a uint256 to its ASCII string decimal representation.\n\t */\n\tfunction _toString(uint256 value) internal pure virtual returns (string memory ptr) {\n\t\tassembly {\n\t\t\t// The maximum value of a uint256 contains 78 digits (1 byte per digit),\n\t\t\t// but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n\t\t\t// We will need 1 32-byte word to store the length,\n\t\t\t// and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n\t\t\tptr := add(mload(0x40), 128)\n\t\t\t// Update the free memory pointer to allocate.\n\t\t\tmstore(0x40, ptr)\n\n\t\t\t// Cache the end of the memory to calculate the length later.\n\t\t\tlet end := ptr\n\n\t\t\t// We write the string from the rightmost digit to the leftmost digit.\n\t\t\t// The following is essentially a do-while loop that also handles the zero case.\n\t\t\t// Costs a bit more than early returning for the zero case,\n\t\t\t// but cheaper in terms of deployment and overall runtime costs.\n\t\t\tfor {\n\t\t\t\t// Initialize and perform the first pass without check.\n\t\t\t\tlet temp := value\n\t\t\t\t// Move the pointer 1 byte leftwards to point to an empty character slot.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\t// Write the character to the pointer.\n\t\t\t\t// The ASCII index of the '0' character is 48.\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} temp {\n\t\t\t\t// Keep dividing `temp` until zero.\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} {\n\t\t\t\t// Body of the for loop.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t}\n\n\t\t\tlet length := sub(end, ptr)\n\t\t\t// Move the pointer 32 bytes leftwards to make room for the length.\n\t\t\tptr := sub(ptr, 32)\n\t\t\t// Store the length.\n\t\t\tmstore(ptr, length)\n\t\t}\n\t}\n}\n"
21     },
22     "contracts/library/erc721A/IERC721A.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror ApprovalCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror ApprovalQueryForNonexistentToken();\n\n\t/**\n\t * The caller cannot approve to their own address.\n\t */\n\terror ApproveToCaller();\n\n\t/**\n\t * Cannot query the balance for the zero address.\n\t */\n\terror BalanceQueryForZeroAddress();\n\n\t/**\n\t * Cannot mint to the zero address.\n\t */\n\terror MintToZeroAddress();\n\n\t/**\n\t * The quantity of tokens minted must be more than zero.\n\t */\n\terror MintZeroQuantity();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror OwnerQueryForNonexistentToken();\n\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror TransferCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token must be owned by `from`.\n\t */\n\terror TransferFromIncorrectOwner();\n\n\t/**\n\t * Cannot safely transfer to a contract that does not implement the\n\t * ERC721Receiver interface.\n\t */\n\terror TransferToNonERC721ReceiverImplementer();\n\n\t/**\n\t * Cannot transfer to the zero address.\n\t */\n\terror TransferToZeroAddress();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror URIQueryForNonexistentToken();\n\n\t/**\n\t * The `quantity` minted with ERC2309 exceeds the safety limit.\n\t */\n\terror MintERC2309QuantityExceedsLimit();\n\n\t/**\n\t * The `extraData` cannot be set on an unintialized ownership slot.\n\t */\n\terror OwnershipNotInitializedForExtraData();\n\n\t// =============================================================\n\t//                            STRUCTS\n\t// =============================================================\n\n\tstruct TokenOwnership {\n\t\t// The address of the owner.\n\t\taddress addr;\n\t\t// Stores the start time of ownership with minimal overhead for tokenomics.\n\t\tuint64 startTimestamp;\n\t\t// Whether the token has been burned.\n\t\tbool burned;\n\t\t// Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n\t\tuint24 extraData;\n\t}\n\n\t// =============================================================\n\t//                         TOKEN COUNTERS\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the total number of tokens in existence.\n\t * Burned tokens will reduce the count.\n\t * To get the total number of tokens minted, please see {_totalMinted}.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t// =============================================================\n\t//                            IERC165\n\t// =============================================================\n\n\t/**\n\t * @dev Returns true if this contract implements the interface defined by\n\t * `interfaceId`. See the corresponding\n\t * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n\t * to learn more about how these ids are created.\n\t *\n\t * This function call must use less than 30000 gas.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n\t// =============================================================\n\t//                            IERC721\n\t// =============================================================\n\n\t/**\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n\t */\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables or disables\n\t * (`approved`) `operator` to manage all of its assets.\n\t */\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\t/**\n\t * @dev Returns the number of tokens in `owner`'s account.\n\t */\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\n\n\t/**\n\t * @dev Returns the owner of the `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`,\n\t * checking first that contract recipients are aware of the ERC721 protocol\n\t * to prevent tokens from being forever locked.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be have been allowed to move\n\t * this token by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement\n\t * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external;\n\n\t/**\n\t * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n\t */\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n\t * whenever possible.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token\n\t * by either {approve} or {setApprovalForAll}.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\n\n\t/**\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n\t * The approval is cleared when the token is transferred.\n\t *\n\t * Only a single account can be approved at a time, so approving the\n\t * zero address clears previous approvals.\n\t *\n\t * Requirements:\n\t *\n\t * - The caller must own the token or be an approved operator.\n\t * - `tokenId` must exist.\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address to, uint256 tokenId) external;\n\n\t/**\n\t * @dev Approve or remove `operator` as an operator for the caller.\n\t * Operators can call {transferFrom} or {safeTransferFrom}\n\t * for any token owned by the caller.\n\t *\n\t * Requirements:\n\t *\n\t * - The `operator` cannot be the caller.\n\t *\n\t * Emits an {ApprovalForAll} event.\n\t */\n\tfunction setApprovalForAll(address operator, bool _approved) external;\n\n\t/**\n\t * @dev Returns the account approved for `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\n\n\t/**\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n\t *\n\t * See {setApprovalForAll}.\n\t */\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\t// =============================================================\n\t//                        IERC721Metadata\n\t// =============================================================\n\n\t/**\n\t * @dev Returns the token collection name.\n\t */\n\tfunction name() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the token collection symbol.\n\t */\n\tfunction symbol() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n\t */\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\n\n\t// =============================================================\n\t//                           IERC2309\n\t// =============================================================\n\n\t/**\n\t * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n\t * (inclusive) is transferred from `from` to `to`, as defined in the\n\t * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n\t *\n\t * See {_mintERC2309} for more details.\n\t */\n\tevent ConsecutiveTransfer(\n\t\tuint256 indexed fromTokenId,\n\t\tuint256 toTokenId,\n\t\taddress indexed from,\n\t\taddress indexed to\n\t);\n}\n"
24     },
25     "contracts/library/Neutron.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./erc721A/ERC721A.sol\";\nimport \"./operator_filterer/DefaultOperatorFilterer.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nerror Neutron__NoSaleStageActive();\n\nerror Neutron__ZeroAddressProhibited();\nerror Neutron__InvalidConfiguration();\nerror Neutron__InvalidSaleStageIndex();\nerror Neutron__InvalidInput();\n\nerror Neutron__WrongEtherAmmount();\nerror Neutron__ExceedingMaxSupply();\nerror Neutron__ExceedingTokensPerStageLimit();\nerror Neutron__ExceedingTokensPerTransactionLimit();\n\nerror Neutron__HashComparisonFailed();\nerror Neutron__UntrustedSigner();\nerror Neutron__SignatureAlreadyUsed();\n\nerror Neutron__NothingToWithdraw();\nerror Neutron__WithdrawFailed();\n\n/**\n * @dev Configuration of a sale stage.\n *\n * @param startTime The start time of the sale stage.\n * @param endTime The end time of the sale stage.\n * @param supplyLimitByTheEndOfStage The maximum number of tokens that can be minted by the end of the sale stage.\n * @param maxTokensPerWallet The maximum number of tokens that can be minted by a single wallet during the sale stage.\n * @param maxTokensPerTransaction The maximum number of tokens that can be minted in a single transaction during the sale stage.\n * @param weiTokenPrice The price of a token in wei.\n */\nstruct SaleStageConfig {\n\tuint32 startTime;\n\tuint32 endTime;\n\tuint16 supplyLimitByTheEndOfStage;\n\tuint16 maxTokensPerWallet;\n\tuint16 maxTokensPerTransaction;\n\tuint256 weiTokenPrice;\n}\n\n/**\n * @dev A signature package, that secures the minting of tokens.\n *\n * @param messageHash The hash of the minting operation message.\n * @param signature The signature for the message hash.\n * @param nonce The nonce, that is used to prevent replay attacks.\n */\nstruct SaleSignaturePackage {\n\tbytes32 messageHash;\n\tbytes signature;\n\tuint64 nonce;\n}\n\n/**\n * @title Neutron\n * @author DeployLabs.io\n *\n * @dev Neutron is a contract for managing a token collection.\n * Version 1.2.0\n */\nabstract contract Neutron is ERC721A, Ownable, DefaultOperatorFilterer {\n\tbytes8 private immutable i_hashSalt;\n\taddress private immutable i_signerAddress;\n\n\tstring private s_baseTokenUri;\n\n\tuint16[] internal s_saleStageIds;\n\tuint16 internal s_lastAssignedStageId = 0;\n\n\tmapping(uint16 => SaleStageConfig) internal s_saleStageConfigurations;\n\tmapping(uint16 => mapping(address => uint256)) internal s_numberMintedDuringStage;\n\n\tmapping(uint64 => bool) internal s_usedNonces;\n\n\tconstructor(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tbytes8 hashSalt,\n\t\taddress signerAddress\n\t) ERC721A(name, symbol) {\n\t\ti_hashSalt = hashSalt;\n\t\ti_signerAddress = signerAddress;\n\t}\n\n\t/**\n\t * @dev Mint a token to the caller.\n\t *\n\t * @param signaturePackage The signature package for security.\n\t * @param quantity The quantity of tokens to mint.\n\t */\n\tfunction mint(\n\t\tSaleSignaturePackage calldata signaturePackage,\n\t\tuint256 quantity\n\t) external payable {\n\t\tuint16 currentStageIndex = getCurrentSaleStageIndex();\n\t\tuint16 currentStageId = s_saleStageIds[currentStageIndex];\n\t\tSaleStageConfig memory config = getSaleStageConfig(currentStageIndex);\n\n\t\tif (msg.value != config.weiTokenPrice * quantity) revert Neutron__WrongEtherAmmount();\n\n\t\tbool exceedingMaxSupply = totalSupply() + quantity > config.supplyLimitByTheEndOfStage;\n\t\tbool exceedingLimitPerTransaction = quantity > config.maxTokensPerTransaction;\n\t\tbool exceedingLimitPerStage = s_numberMintedDuringStage[currentStageId][msg.sender] +\n\t\t\tquantity >\n\t\t\tconfig.maxTokensPerWallet;\n\n\t\tif (exceedingMaxSupply) revert Neutron__ExceedingMaxSupply();\n\t\tif (exceedingLimitPerStage) revert Neutron__ExceedingTokensPerStageLimit();\n\t\tif (exceedingLimitPerTransaction) revert Neutron__ExceedingTokensPerTransactionLimit();\n\n\t\tif (!_isCorrectMintOperationHash(signaturePackage, msg.sender, quantity))\n\t\t\trevert Neutron__HashComparisonFailed();\n\t\tif (!_isTrustedSigner(signaturePackage.messageHash, signaturePackage.signature))\n\t\t\trevert Neutron__UntrustedSigner();\n\t\tif (s_usedNonces[signaturePackage.nonce]) revert Neutron__SignatureAlreadyUsed();\n\n\t\ts_numberMintedDuringStage[currentStageId][msg.sender] += quantity;\n\t\ts_usedNonces[signaturePackage.nonce] = true;\n\n\t\t_safeMint(msg.sender, quantity);\n\t}\n\n\t/**\n\t * @dev Withdraw the balance of the contract.\n\t *\n\t * @param to The address to send the balance to.\n\t */\n\tfunction withdraw(address payable to) external onlyOwner {\n\t\tuint256 balance = address(this).balance;\n\t\tif (balance == 0) revert Neutron__NothingToWithdraw();\n\t\tif (to == address(0)) revert Neutron__ZeroAddressProhibited();\n\n\t\t(bool success, ) = to.call{ value: address(this).balance }(\"\");\n\t\tif (!success) revert Neutron__WithdrawFailed();\n\t}\n\n\t/**\n\t * @dev Airdrop tokens to a list of recipients.\n\t *\n\t * @param airdropTo The list of recipients.\n\t * @param quantity The list of quantities.\n\t */\n\tfunction airdrop(address[] calldata airdropTo, uint256[] calldata quantity) external onlyOwner {\n\t\tif (airdropTo.length != quantity.length) revert Neutron__InvalidInput();\n\n\t\tfor (uint256 i = 0; i < airdropTo.length; i++) {\n\t\t\t_safeMint(airdropTo[i], quantity[i]);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Add a new sale stage. The sale stage must be added in chronological order.\n\t *\n\t * @param config The configuration of the sale stage.\n\t */\n\tfunction addSaleStage(SaleStageConfig calldata config) external onlyOwner {\n\t\tif (config.startTime >= config.endTime) revert Neutron__InvalidConfiguration();\n\t\tif (config.supplyLimitByTheEndOfStage == 0) revert Neutron__InvalidConfiguration();\n\t\tif (config.maxTokensPerWallet == 0) revert Neutron__InvalidConfiguration();\n\t\tif (config.maxTokensPerTransaction == 0) revert Neutron__InvalidConfiguration();\n\n\t\ts_lastAssignedStageId += 1;\n\t\ts_saleStageIds.push(s_lastAssignedStageId);\n\t\ts_saleStageConfigurations[s_lastAssignedStageId] = config;\n\t}\n\n\t/**\n\t * @dev Remove a sale stage.\n\t *\n\t * @param stageIndex The index of the sale stage to remove.\n\t */\n\tfunction removeSaleStage(uint16 stageIndex) external onlyOwner {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\n\t\tfor (uint256 i = stageIndex; i < s_saleStageIds.length - 1; i++) {\n\t\t\ts_saleStageIds[i] = s_saleStageIds[i + 1];\n\t\t}\n\n\t\ts_saleStageIds.pop();\n\t}\n\n\t/**\n\t * @dev Edit an existing sale stage.\n\t *\n\t * @param stageIndex The index of the sale stage to edit.\n\t * @param config The new configuration of the sale stage.\n\t */\n\tfunction editSaleStage(uint16 stageIndex, SaleStageConfig calldata config) external onlyOwner {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\t\tif (config.startTime >= config.endTime) revert Neutron__InvalidConfiguration();\n\t\tif (config.supplyLimitByTheEndOfStage == 0) revert Neutron__InvalidConfiguration();\n\t\tif (config.maxTokensPerWallet == 0) revert Neutron__InvalidConfiguration();\n\t\tif (config.maxTokensPerTransaction == 0) revert Neutron__InvalidConfiguration();\n\n\t\ts_saleStageConfigurations[s_saleStageIds[stageIndex]] = config;\n\t}\n\n\t/**\n\t * @dev Reset a sale stage. This will increment the stage ID, which will invalidate all previous linked operations.\n\t *\n\t * @param stageIndex The index of the sale stage to reset.\n\t */\n\tfunction resetSaleStage(uint16 stageIndex) external onlyOwner {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\n\t\ts_lastAssignedStageId += 1;\n\t\ts_saleStageIds[stageIndex] = s_lastAssignedStageId;\n\t}\n\n\t/**\n\t * @dev Set base URI for token metadata.\n\t *\n\t * @param baseUri The base URI for token metadata.\n\t */\n\tfunction setBaseUri(string calldata baseUri) external onlyOwner {\n\t\ts_baseTokenUri = baseUri;\n\t}\n\n\t/**\n\t * @dev Get the number of sale stages.\n\t *\n\t * @return saleStagesCount The number of sale stages in the contract.\n\t */\n\tfunction getSaleStagesCount() external view returns (uint256 saleStagesCount) {\n\t\tsaleStagesCount = s_saleStageIds.length;\n\t}\n\n\t/**\n\t * @dev Get the number of tokens minted during a sale stage.\n\t *\n\t * @param stageIndex The index of the sale stage.\n\t * @param wallet The wallet to get the count for.\n\t *\n\t * @return countMintedDuringStage The number of tokens minted during the sale stage.\n\t */\n\tfunction getMintedCountDuringSaleStage(\n\t\tuint16 stageIndex,\n\t\taddress wallet\n\t) external view returns (uint256 countMintedDuringStage) {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\n\t\tcountMintedDuringStage = s_numberMintedDuringStage[s_saleStageIds[stageIndex]][wallet];\n\t}\n\n\t// Overrides for marketplace restrictions.\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public override onlyAllowedOperator(from) {\n\t\tsuper.transferFrom(from, to, tokenId);\n\t}\n\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public override onlyAllowedOperator(from) {\n\t\tsuper.safeTransferFrom(from, to, tokenId);\n\t}\n\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory data\n\t) public override onlyAllowedOperator(from) {\n\t\tsuper.safeTransferFrom(from, to, tokenId, data);\n\t}\n\n\t/**\n\t * @dev Get the sale stage configuration.\n\t *\n\t * @param stageIndex The index of the sale stage.\n\t *\n\t * @return config The sale stage configuration.\n\t */\n\tfunction getSaleStageConfig(\n\t\tuint16 stageIndex\n\t) public view returns (SaleStageConfig memory config) {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\n\t\tconfig = s_saleStageConfigurations[s_saleStageIds[stageIndex]];\n\t}\n\n\t/**\n\t * @dev Get the current sale stage index.\n\t *\n\t * @return currentStageIndex The current sale stage index.\n\t */\n\tfunction getCurrentSaleStageIndex() public view returns (uint16 currentStageIndex) {\n\t\tuint256 currentTimestamp = block.timestamp;\n\t\tuint16[] memory saleStageIds = s_saleStageIds;\n\n\t\tfor (; currentStageIndex < saleStageIds.length; currentStageIndex++) {\n\t\t\tSaleStageConfig memory config = s_saleStageConfigurations[\n\t\t\t\tsaleStageIds[currentStageIndex]\n\t\t\t];\n\n\t\t\tif (currentTimestamp >= config.startTime && currentTimestamp < config.endTime) {\n\t\t\t\treturn currentStageIndex;\n\t\t\t}\n\t\t}\n\n\t\trevert Neutron__NoSaleStageActive();\n\t}\n\n\t/**\n\t * @dev Get data used to generate the signature.\n\t *\n\t * @return hashSalt The hash salt.\n\t * @return signerAddress The signer address.\n\t */\n\tfunction getSignatureData() public view returns (bytes8 hashSalt, address signerAddress) {\n\t\treturn (i_hashSalt, i_signerAddress);\n\t}\n\n\t/**\n\t * @dev Starting ID for the tokens.\n\t *\n\t * @return The starting ID for the tokens.\n\t */\n\tfunction _startTokenId() internal view virtual override returns (uint256) {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @dev Get base token URI.\n\t *\n\t * @return The base token URI.\n\t */\n\tfunction _baseURI() internal view virtual override returns (string memory) {\n\t\treturn s_baseTokenUri;\n\t}\n\n\t/**\n\t * @dev Check whether a message hash is the one that has been signed.\n\t *\n\t * @param signaturePackage The signature package.\n\t * @param mintTo The address of the minter.\n\t * @param quantity The quantity of tokens to mint.\n\t *\n\t * @return isCorrectMintOperationHash Whether the message hash matches the one that has been signed.\n\t */\n\tfunction _isCorrectMintOperationHash(\n\t\tSaleSignaturePackage calldata signaturePackage,\n\t\taddress mintTo,\n\t\tuint256 quantity\n\t) internal view returns (bool isCorrectMintOperationHash) {\n\t\tuint16 currentSaleStageIndex = getCurrentSaleStageIndex();\n\n\t\tbytes memory message = abi.encodePacked(\n\t\t\ti_hashSalt,\n\t\t\tmintTo,\n\t\t\tuint64(block.chainid),\n\t\t\tcurrentSaleStageIndex,\n\t\t\tuint64(quantity),\n\t\t\tsignaturePackage.nonce\n\t\t);\n\t\tbytes32 messageHash = keccak256(message);\n\n\t\tisCorrectMintOperationHash = messageHash == signaturePackage.messageHash;\n\t}\n\n\t/**\n\t * @dev Check whether a message hash was signed by a trusted address.\n\t *\n\t * @param messageHash The hash of the opertaion message.\n\t * @param signature The signature for the message hash.\n\t *\n\t * @return isTrustedSigner Whether the message was signed by a trusted address.\n\t */\n\tfunction _isTrustedSigner(\n\t\tbytes32 messageHash,\n\t\tbytes memory signature\n\t) internal view returns (bool isTrustedSigner) {\n\t\tisTrustedSigner = i_signerAddress == ECDSA.recover(messageHash, signature);\n\t}\n}\n"
27     },
28     "contracts/library/operator_filterer/DefaultOperatorFilterer.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { OperatorFilterer } from \"./OperatorFilterer.sol\";\nimport { CANONICAL_CORI_SUBSCRIPTION } from \"./lib/Constants.sol\";\n\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n\t/// @dev The constructor that is called when the contract is being deployed.\n\tconstructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
30     },
31     "contracts/library/operator_filterer/IOperatorFilterRegistry.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n\t/**\n\t * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n\t *         true if supplied registrant address is not registered.\n\t */\n\tfunction isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n\t/**\n\t * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n\t */\n\tfunction register(address registrant) external;\n\n\t/**\n\t * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n\t */\n\tfunction registerAndSubscribe(address registrant, address subscription) external;\n\n\t/**\n\t * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n\t *         address without subscribing.\n\t */\n\tfunction registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n\t/**\n\t * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n\t *         Note that this does not remove any filtered addresses or codeHashes.\n\t *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n\t */\n\tfunction unregister(address addr) external;\n\n\t/**\n\t * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n\t */\n\tfunction updateOperator(address registrant, address operator, bool filtered) external;\n\n\t/**\n\t * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n\t */\n\tfunction updateOperators(\n\t\taddress registrant,\n\t\taddress[] calldata operators,\n\t\tbool filtered\n\t) external;\n\n\t/**\n\t * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n\t */\n\tfunction updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n\t/**\n\t * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n\t */\n\tfunction updateCodeHashes(\n\t\taddress registrant,\n\t\tbytes32[] calldata codeHashes,\n\t\tbool filtered\n\t) external;\n\n\t/**\n\t * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n\t *         subscription if present.\n\t *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n\t *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n\t *         used.\n\t */\n\tfunction subscribe(address registrant, address registrantToSubscribe) external;\n\n\t/**\n\t * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n\t */\n\tfunction unsubscribe(address registrant, bool copyExistingEntries) external;\n\n\t/**\n\t * @notice Get the subscription address of a given registrant, if any.\n\t */\n\tfunction subscriptionOf(address addr) external returns (address registrant);\n\n\t/**\n\t * @notice Get the set of addresses subscribed to a given registrant.\n\t *         Note that order is not guaranteed as updates are made.\n\t */\n\tfunction subscribers(address registrant) external returns (address[] memory);\n\n\t/**\n\t * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n\t *         Note that order is not guaranteed as updates are made.\n\t */\n\tfunction subscriberAt(address registrant, uint256 index) external returns (address);\n\n\t/**\n\t * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n\t */\n\tfunction copyEntriesOf(address registrant, address registrantToCopy) external;\n\n\t/**\n\t * @notice Returns true if operator is filtered by a given address or its subscription.\n\t */\n\tfunction isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n\t/**\n\t * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n\t */\n\tfunction isCodeHashOfFiltered(\n\t\taddress registrant,\n\t\taddress operatorWithCode\n\t) external returns (bool);\n\n\t/**\n\t * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n\t */\n\tfunction isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n\t/**\n\t * @notice Returns a list of filtered operators for a given address or its subscription.\n\t */\n\tfunction filteredOperators(address addr) external returns (address[] memory);\n\n\t/**\n\t * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n\t *         Note that order is not guaranteed as updates are made.\n\t */\n\tfunction filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n\t/**\n\t * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n\t *         its subscription.\n\t *         Note that order is not guaranteed as updates are made.\n\t */\n\tfunction filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n\t/**\n\t * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n\t *         its subscription.\n\t *         Note that order is not guaranteed as updates are made.\n\t */\n\tfunction filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n\t/**\n\t * @notice Returns true if an address has registered\n\t */\n\tfunction isRegistered(address addr) external returns (bool);\n\n\t/**\n\t * @dev Convenience method to compute the code hash of an arbitrary contract\n\t */\n\tfunction codeHashOf(address addr) external returns (bytes32);\n}\n"
33     },
34     "contracts/library/operator_filterer/lib/Constants.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
36     },
37     "contracts/library/operator_filterer/OperatorFilterer.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { IOperatorFilterRegistry } from \"./IOperatorFilterRegistry.sol\";\nimport { CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS } from \"./lib/Constants.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n\t/// @dev Emitted when an operator is not allowed.\n\terror OperatorNotAllowed(address operator);\n\n\tIOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n\t\tIOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n\t/// @dev The constructor that is called when the contract is being deployed.\n\tconstructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n\t\t// If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n\t\t// will not revert, but the contract will need to be registered with the registry once it is deployed in\n\t\t// order for the modifier to filter addresses.\n\t\tif (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n\t\t\tif (subscribe) {\n\t\t\t\tOPERATOR_FILTER_REGISTRY.registerAndSubscribe(\n\t\t\t\t\taddress(this),\n\t\t\t\t\tsubscriptionOrRegistrantToCopy\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif (subscriptionOrRegistrantToCopy != address(0)) {\n\t\t\t\t\tOPERATOR_FILTER_REGISTRY.registerAndCopyEntries(\n\t\t\t\t\t\taddress(this),\n\t\t\t\t\t\tsubscriptionOrRegistrantToCopy\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tOPERATOR_FILTER_REGISTRY.register(address(this));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev A helper function to check if an operator is allowed.\n\t */\n\tmodifier onlyAllowedOperator(address from) virtual {\n\t\t// Allow spending tokens from addresses with balance\n\t\t// Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n\t\t// from an EOA.\n\t\tif (from != msg.sender) {\n\t\t\t_checkFilterOperator(msg.sender);\n\t\t}\n\t\t_;\n\t}\n\n\t/**\n\t * @dev A helper function to check if an operator approval is allowed.\n\t */\n\tmodifier onlyAllowedOperatorApproval(address operator) virtual {\n\t\t_checkFilterOperator(operator);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev A helper function to check if an operator is allowed.\n\t */\n\tfunction _checkFilterOperator(address operator) internal view virtual {\n\t\t// Check registry code length to facilitate testing in environments without a deployed registry.\n\t\tif (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n\t\t\t// under normal circumstances, this function will revert rather than return false, but inheriting contracts\n\t\t\t// may specify their own OperatorFilterRegistry implementations, which may behave differently\n\t\t\tif (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n\t\t\t\trevert OperatorNotAllowed(operator);\n\t\t\t}\n\t\t}\n\t}\n}\n"
39     },
40     "contracts/Sol3Mates.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/*\n     .d8888b.   .d88888b.  888      .d8888b.  \n    d88P  Y88b d88P\" \"Y88b 888     d88P  Y88b \n    Y88b.      888     888 888          .d88P \n     \"Y888b.   888     888 888         8888\"  \n        \"Y88b. 888     888 888          \"Y8b. \n          \"888 888     888 888     888    888 \n    Y88b  d88P Y88b. .d88P 888     Y88b  d88P \n     \"Y8888P\"   \"Y88888P\"  88888888 \"Y8888P\"  \n                                          \n    Sol3Mates All Rights Reserved 2022\n    Developed by DeployLabs.io (info@deploylabs.io)\n*/\n\nimport \"./library/Neutron.sol\";\n\nerror Sol3Mates__ZeroAddressProhibited();\n\nerror Sol3Mates__NotACrossmintWallet();\nerror Sol3Mates__CrossmintNotSupportedOnThatStage();\n\n/**\n * @title Sol3Mates\n * @author DeployLabs.io\n *\n * @dev Sol3Mates is a contract for managing airdrops and sales of Sol3Mates NFTs.\n */\ncontract Sol3Mates is\n\tNeutron(\n\t\t\"SOL3MATES OG NFT\",\n\t\t\"SOL3\",\n\t\t0x67a95d40d901ae1a,\n\t\t0x3dD6175Fa612Ca0C95B810E487736108e4E53C1a\n\t)\n{\n\tuint16 private s_publicSaleStageIndex;\n\taddress private s_crossmintAddress;\n\n\t/**\n\t * @dev Mint tokens to the specified address through crossmint.io.\n\t *\n\t * @param mintTo The address to mint the token to.\n\t * @param quantity The quantity of tokens to mint.\n\t */\n\tfunction crossmintMint(address mintTo, uint256 quantity) external payable {\n\t\tif (msg.sender != s_crossmintAddress) revert Sol3Mates__NotACrossmintWallet();\n\n\t\tuint16 currentStageIndex = getCurrentSaleStageIndex();\n\t\tif (currentStageIndex != s_publicSaleStageIndex)\n\t\t\trevert Sol3Mates__CrossmintNotSupportedOnThatStage();\n\n\t\tuint16 currentStageId = s_saleStageIds[currentStageIndex];\n\t\tSaleStageConfig memory config = getSaleStageConfig(currentStageIndex);\n\n\t\tif (msg.value != config.weiTokenPrice * quantity) revert Neutron__WrongEtherAmmount();\n\n\t\tbool exceedingMaxSupply = totalSupply() + quantity > config.supplyLimitByTheEndOfStage;\n\t\tbool exceedingLimitPerTransaction = quantity > config.maxTokensPerTransaction;\n\t\tbool exceedingLimitPerStage = s_numberMintedDuringStage[currentStageId][mintTo] + quantity >\n\t\t\tconfig.maxTokensPerWallet;\n\n\t\tif (exceedingMaxSupply) revert Neutron__ExceedingMaxSupply();\n\t\tif (exceedingLimitPerStage) revert Neutron__ExceedingTokensPerStageLimit();\n\t\tif (exceedingLimitPerTransaction) revert Neutron__ExceedingTokensPerTransactionLimit();\n\n\t\ts_numberMintedDuringStage[currentStageId][mintTo] += quantity;\n\n\t\t_safeMint(mintTo, quantity);\n\t}\n\n\t/**\n\t * @dev Set the index of the public sale stage. Used for crossmint sales allowance.\n\t *\n\t * @param stageIndex The index of the public sale stage.\n\t */\n\tfunction setPublicSaleStageIndex(uint16 stageIndex) external onlyOwner {\n\t\tif (stageIndex >= s_saleStageIds.length) revert Neutron__InvalidSaleStageIndex();\n\n\t\ts_publicSaleStageIndex = stageIndex;\n\t}\n\n\t/**\n\t * @dev Set the address of the crossmint.io contract.\n\t *\n\t * @param crossmintAddress The address of the crossmint.io contract.\n\t */\n\tfunction setCrossmintAddress(address crossmintAddress) external onlyOwner {\n\t\tif (crossmintAddress == address(0)) revert Sol3Mates__ZeroAddressProhibited();\n\n\t\ts_crossmintAddress = crossmintAddress;\n\t}\n}\n"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": false,
47       "runs": 200
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "metadata": {
62       "useLiteralContent": true
63     },
64     "libraries": {}
65   }
66 }}