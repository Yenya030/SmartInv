1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Simplr/collection/ERC721A/CollectionA.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./modules/AffiliableA.sol\";\nimport \"../interface/ICollectionStruct.sol\";\nimport \"./ContractMetadata.sol\";\n\n/// @title CollectionA\n/// @author Chain Labs\n/// @notice Main contract that is made up of building blocks and is ready to be used that extends the affiliate functionality.\n/// @dev Inherits all the modules and base collection\ncontract CollectionA is ICollectionStruct, AffiliableA, ContractMetadata {\n    /// @notice setup collection\n    /// @dev setup all the modules and base collection\n    /// @param _baseCollection struct conatining setup parameters of base collection\n    /// @param _presaleable struct conatining setup parameters of presale module\n    /// @param _paymentSplitter struct conatining setup parameters of payment splitter module\n    /// @param _projectURIProvenance provenance of revealed project URI\n    /// @param _royalties struct conatining setup parameters of royalties module\n    /// @param _reserveTokens number of tokens to be reserved\n    function setup(\n        BaseCollectionStruct memory _baseCollection,\n        PresaleableStruct memory _presaleable,\n        PaymentSplitterStruct memory _paymentSplitter,\n        bytes32 _projectURIProvenance,\n        RoyaltyInfo memory _royalties,\n        uint256 _reserveTokens\n    ) external {\n        _setup(\n            _baseCollection,\n            _presaleable,\n            _paymentSplitter,\n            _projectURIProvenance,\n            _royalties,\n            _reserveTokens\n        );\n    }\n\n    /// @notice setup collection with affiliate module\n    /// @dev setup all the modules and base collection including affiliate module\n    /// @param _baseCollection struct conatining setup parameters of base collection\n    /// @param _presaleable struct conatining setup parameters of presale module\n    /// @param _paymentSplitter struct conatining setup parameters of payment splitter module\n    /// @param _projectURIProvenance provenance of revealed project URI\n    /// @param _royalties struct conatining setup parameters of royalties module\n    /// @param _reserveTokens number of tokens to be reserved\n    /// @param _registry address of Simplr Affiliate registry\n    /// @param _projectId project ID of Simplr Collection\n    function setupWithAffiliate(\n        BaseCollectionStruct memory _baseCollection,\n        PresaleableStruct memory _presaleable,\n        PaymentSplitterStruct memory _paymentSplitter,\n        bytes32 _projectURIProvenance,\n        RoyaltyInfo memory _royalties,\n        uint256 _reserveTokens,\n        IAffiliateRegistry _registry,\n        bytes32 _projectId\n    ) external {\n        _setup(\n            _baseCollection,\n            _presaleable,\n            _paymentSplitter,\n            _projectURIProvenance,\n            _royalties,\n            _reserveTokens\n        );\n        _setAffiliateModule(_registry, _projectId);\n    }\n\n    /// @notice internal method to setup collection\n    /// @dev internal method to setup all the modules and base collection\n    /// @param _baseCollection struct conatining setup parameters of base collection\n    /// @param _presaleable struct conatining setup parameters of presale module\n    /// @param _paymentSplitter struct conatining setup parameters of payment splitter module\n    /// @param _projectURIProvenance provenance of revealed project URI\n    /// @param _royalties struct conatining setup parameters of royalties module\n    /// @param _reserveTokens number of tokens to be reserved\n    function _setup(\n        BaseCollectionStruct memory _baseCollection,\n        PresaleableStruct memory _presaleable,\n        PaymentSplitterStruct memory _paymentSplitter,\n        bytes32 _projectURIProvenance,\n        RoyaltyInfo memory _royalties,\n        uint256 _reserveTokens\n    ) private initializer {\n        setupBaseCollection(\n            _baseCollection.name,\n            _baseCollection.symbol,\n            _baseCollection.admin,\n            _baseCollection.maximumTokens,\n            _baseCollection.maxPurchase,\n            _baseCollection.maxHolding,\n            _baseCollection.price,\n            _baseCollection.publicSaleStartTime,\n            _baseCollection.projectURI\n        );\n        setupPresale(\n            _presaleable.presaleReservedTokens,\n            _presaleable.presalePrice,\n            _presaleable.presaleStartTime,\n            _presaleable.presaleMaxHolding,\n            _presaleable.presaleWhitelist\n        );\n        setupPaymentSplitter(\n            _paymentSplitter.simplr,\n            _paymentSplitter.simplrShares,\n            _paymentSplitter.payees,\n            _paymentSplitter.shares\n        );\n        setProvenance(_projectURIProvenance);\n        _setReserveTokens(_reserveTokens);\n        _setRoyalties(_royalties);\n    }\n}\n"
6     },
7     "contracts/Simplr/collection/ERC721A/modules/AffiliableA.sol": {
8       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./RoyaltiesA.sol\";\nimport \"../../../affiliate/Affiliate.sol\";\n\n/// @title AffiliableA\n/// @author Chain Labs\n/// @notice Module that adds functionality of affiliate.\n/// @dev Uses Simplr Affiliate Infrastructure\ncontract AffiliableA is RoyaltiesA, Affiliate {\n    //------------------------------------------------------//\n    //\n    //  Modifiers\n    //\n    //------------------------------------------------------//\n\n    modifier affiliatePurchase(bytes memory _signature, address _affiliate) {\n        _;\n        _transferAffiliateShare(_signature, _affiliate, msg.value);\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Public function\n    //\n    //------------------------------------------------------//\n\n    /// @notice Buy using Affiliate shares\n    /// @dev Transfers the affiliate share directly to affiliate address\n    /// @param _receiver address of buyer\n    /// @param _quantity number of tokens to be bought\n    /// @param _signature unique signature of affiliate\n    /// @param _affiliate address of affiliate\n    function affiliateBuy(\n        address _receiver,\n        uint256 _quantity,\n        bytes memory _signature,\n        address _affiliate\n    ) external payable virtual affiliatePurchase(_signature, _affiliate) {\n        _buy(_receiver, _quantity);\n    }\n\n    /// @notice presale buy using Affiliate shares\n    /// @dev Transfers the affiliate share directly to affiliate address\n    /// @param _proofs merkle proof for whitelist\n    /// @param _receiver address of buyer\n    /// @param _quantity number of tokens to be bought\n    /// @param _signature unique signature of affiliate\n    /// @param _affiliate address of affiliate\n    function affiliatePresaleBuy(\n        bytes32[] calldata _proofs,\n        address _receiver,\n        uint256 _quantity,\n        bytes memory _signature,\n        address _affiliate\n    ) external payable virtual affiliatePurchase(_signature, _affiliate) {\n        _presaleBuy(_proofs, _receiver, _quantity);\n    }\n\n    /// @notice is affiliate module active or not\n    /// @dev once set, it cannot be updated\n    /// @return boolean checks if affiliate module is active or not\n    function isAffiliateModuleInitialised() external view returns (bool) {\n        return _isAffiliateModuleInitialised();\n    }\n}\n"
9     },
10     "contracts/Simplr/collection/interface/ICollectionStruct.sol": {
11       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\n/**\n * @title Collection Struct Interface\n * @dev   interface to for all the struct required for setup parameters.\n * @author Chain Labs Team\n */\n/// @title Collection Struct Interface\n/// @author Chain Labs\n/// @notice interface for all the struct required for setup parameters.\ninterface ICollectionStruct {\n    struct BaseCollectionStruct {\n        string name;\n        string symbol;\n        address admin;\n        uint256 maximumTokens;\n        uint16 maxPurchase;\n        uint16 maxHolding;\n        uint256 price;\n        uint256 publicSaleStartTime;\n        string projectURI;\n    }\n\n    struct Whitelist {\n        bytes32 root;\n        string cid;\n    }\n\n    struct PresaleableStruct {\n        uint256 presaleReservedTokens;\n        uint256 presalePrice;\n        uint256 presaleStartTime;\n        uint256 presaleMaxHolding;\n        Whitelist presaleWhitelist;\n    }\n\n    struct PaymentSplitterStruct {\n        address simplr;\n        uint256 simplrShares;\n        address[] payees;\n        uint256[] shares;\n    }\n}\n"
12     },
13     "contracts/Simplr/collection/ERC721A/ContractMetadata.sol": {
14       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\n/// @title Contract Metadata\n/// @author Chain Labs\n/// @notice Stores important constant values of contract metadata\n/// @dev constants that can help identify the collection type and version\ncontract ContractMetadata {\n    /// @notice Contract Name\n    /// @dev State used to identify the collection type\n    /// @return CONTRACT_NAME name of contract type as string\n    string public constant CONTRACT_NAME = \"CollectionA\";\n\n    /// @notice Version\n    /// @dev State used to identify the collection version\n    /// @return VERSION version of contract as string\n    string public constant VERSION = \"0.1.0\"; // contract version\n}\n"
15     },
16     "contracts/Simplr/collection/ERC721A/modules/RoyaltiesA.sol": {
17       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity ^0.8.11;\n\nimport \"./ReserveableA.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\";\n\n/// @title RoyaltiesA\n/// @author Chain Labs\n/// @notice Module that adds functionality of royalties as required by EIP-2981.\n/// @dev Core functionality inherited from OpenZeppelin's ERC2981\ncontract RoyaltiesA is ReserveableA, ERC2981Upgradeable {\n    /// @notice event that logs updated royalties info\n    /// @dev emits updated royalty receiver and royalty share fraction\n    /// @param receiver address that should receive royalty\n    /// @param royaltyFraction fraction that should be sent to receiver\n    event DefaultRoyaltyUpdated(address receiver, uint96 royaltyFraction);\n\n    //------------------------------------------------------//\n    //\n    //  Setup\n    //\n    //------------------------------------------------------//\n\n    /// @notice set royalties, only one address can receive the royalties, considers 10000 = 100%\n    /// @dev only owner can set royalties\n    /// @param _royalties a struct with royalties receiver and royalties share\n    function setRoyalties(RoyaltyInfo memory _royalties) public onlyOwner {\n        _setRoyalties(_royalties);\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Public function\n    //\n    //------------------------------------------------------//\n\n    /// @inheritdoc\tERC721AUpgradeable\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721AUpgradeable, ERC2981Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Internal function\n    //\n    //------------------------------------------------------//\n\n    /// @notice set default royalties, considers 10000 = 100%\n    /// @dev internl method to set royalties\n    /// @param _royalties a struct with royalties receiver and royalties share\n    function _setRoyalties(RoyaltyInfo memory _royalties) internal {\n        _setDefaultRoyalty(_royalties.receiver, _royalties.royaltyFraction);\n        emit DefaultRoyaltyUpdated(\n            _royalties.receiver,\n            _royalties.royaltyFraction\n        );\n    }\n}\n"
18     },
19     "contracts/Simplr/affiliate/Affiliate.sol": {
20       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./IAffiliateRegistry.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title Affiliate\n * @dev   Contract that can be inherited to make any contract interact with AffiliateRegistry.\n * @author Chain Labs Team\n */\ncontract Affiliate {\n    IAffiliateRegistry private _affiliateRegistry;\n    bytes32 private _projectId;\n\n    event AffiliateShareTransferred(\n        address indexed affiliate,\n        bytes32 indexed project,\n        uint256 value\n    );\n\n    function getAffiliateRegistry() public view returns (IAffiliateRegistry) {\n        return _affiliateRegistry;\n    }\n\n    function getProjectId() public view returns (bytes32) {\n        return _projectId;\n    }\n\n    function _setAffiliateModule(\n        IAffiliateRegistry newRegistry,\n        bytes32 projectId\n    ) internal {\n        require(\n            address(newRegistry) != address(0),\n            \"Affiliate: Registry cannot be null address\"\n        );\n        require(projectId != bytes32(0), \"Affiliate: zero project id\");\n        _affiliateRegistry = newRegistry;\n        _projectId = projectId;\n    }\n\n    function _setProjectId(bytes32 projectId) internal {\n        require(projectId != bytes32(0), \"Affiliate: zero project id\");\n        _projectId = projectId;\n    }\n\n    function _transferAffiliateShare(\n        bytes memory signature,\n        address affiliate,\n        uint256 value\n    ) internal {\n        require(_isAffiliateModuleInitialised(), \"Affiliate: not initialised\");\n        bool isAffiliate;\n        uint256 shareValue;\n        (isAffiliate, shareValue) = _affiliateRegistry.getAffiliateShareValue(\n            signature,\n            affiliate,\n            _projectId,\n            value\n        );\n        if (isAffiliate) {\n            Address.sendValue(payable(affiliate), shareValue);\n            emit AffiliateShareTransferred(affiliate, _projectId, shareValue);\n        }\n    }\n\n    function _isAffiliateModuleInitialised() internal view returns (bool) {\n        return\n            _projectId != bytes32(0) &&\n            address(_affiliateRegistry) != address(0);\n    }\n}\n"
21     },
22     "contracts/Simplr/collection/ERC721A/modules/ReserveableA.sol": {
23       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./RevealableA.sol\";\n\n/// @title ReserveableA\n/// @author Chain Labs\n/// @notice Module that adds functionality of reserving tokens from sale. Reserved tokens cannot be bought.\n/// @dev Reserves tokens from token ID 1, mints them on demand\ncontract ReserveableA is RevealableA {\n    //------------------------------------------------------//\n    //\n    //  Owner only functions\n    //\n    //------------------------------------------------------//\n\n    /// @notice mint tokens to be reserved\n    /// @dev  mint tokens to owner account to be reserved\n    /// @param _reserveTokens number of tokens to be reserved\n    function reserveTokens(uint256 _reserveTokens) external onlyOwner {\n        _setReserveTokens(_reserveTokens);\n    }\n\n    /// @notice mint tokens to be reserved\n    /// @dev internal method to mint tokens to owner account to be reserved\n    /// @param _reserveTokens number of tokens to be reserved\n    function _setReserveTokens(uint256 _reserveTokens) internal {\n        require(\n            _reserveTokens + reservedTokens + presaleReservedTokens <=\n                maximumTokens,\n            \"RS:002\"\n        );\n        if (_reserveTokens > 0) {\n            reservedTokens += _reserveTokens;\n            _safeMint(owner(), _reserveTokens);\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981Upgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\n    function __ERC2981_init() internal onlyInitializing {\n    }\n\n    function __ERC2981_init_unchained() internal onlyInitializing {\n    }\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981Upgradeable\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
27     },
28     "contracts/Simplr/collection/ERC721A/modules/RevealableA.sol": {
29       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./PresaleableA.sol\";\n\n/// @title RevealableA\n/// @author Chain Labs\n/// @notice Module that adds functionality of revealing tokens.\n/// @dev Handles revealing and structuring project URI\ncontract RevealableA is PresaleableA {\n    using StringsUpgradeable for uint256;\n    //------------------------------------------------------//\n    //\n    //  Storage\n    //\n    //------------------------------------------------------//\n    /// @notice checks if collection is revealable or not\n    /// @dev state that shows if Revealable module is active or not\n    /// @return isRevealable checks if collection is revealable or not\n    bool public isRevealable; // is the collection revealable\n\n    /// @notice checks if collection is revealed or not\n    /// @dev state that shows if collection is revealed\n    /// @return isRevealed checks if collection is revealed or not\n    bool public isRevealed; // is the collection revealed\n\n    /// @notice provenance of final IPFS CID\n    /// @dev keccak256 hash of final IPFS CID\n    /// @return projectURIProvenance hash of revealed IPFS CID\n    bytes32 public projectURIProvenance; // hash to make sure that Project URI dosen't change\n\n    //------------------------------------------------------//\n    //\n    //  Owner only functions\n    //\n    //------------------------------------------------------//\n\n    /// @notice set provenance of the collection\n    /// @dev keccak hash of IPFS CID is done off chain and passed in as parameter\n    /// @param _projectURIProvenance keccak256 hash of final IPFS CID\n    function setProvenance(bytes32 _projectURIProvenance) internal {\n        if (_projectURIProvenance != keccak256(abi.encode(projectURI))) {\n            isRevealable = true;\n            projectURIProvenance = _projectURIProvenance;\n        } else {\n            isRevealed = true;\n        }\n    }\n\n    /// @notice Reveal and update Project URI\n    /// @dev Reveal and update Project URI\n    /// @param _projectURI new project URI\n    function setProjectURIAndReveal(string memory _projectURI)\n        external\n        onlyOwner\n    {\n        require(isRevealable, \"Revealable: non revealable\");\n        isRevealed = true;\n        projectURI = _projectURI;\n    }\n\n    /// @notice set new project URI\n    /// @dev set new project URI\n    /// @param _projectURI new project URI\n    function setProjectURI(string memory _projectURI) external onlyOwner {\n        projectURI = _projectURI;\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Public function\n    //\n    //------------------------------------------------------//\n\n    /// @inheritdoc\tERC721AUpgradeable\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), \"R:004\");\n        string memory baseURI = _baseURI();\n        return\n            isRevealable\n                ? isRevealed\n                    ? string(\n                        abi.encodePacked(baseURI, tokenId.toString(), \".json\")\n                    )\n                    : baseURI\n                : string(\n                    abi.encodePacked(baseURI, tokenId.toString(), \".json\")\n                );\n    }\n}\n"
30     },
31     "contracts/Simplr/collection/ERC721A/modules/PresaleableA.sol": {
32       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"./PaymentSplitableA.sol\";\nimport \"../../interface/ICollectionStruct.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\";\n\n/// @title PresaleableA\n/// @author Chain Labs\n/// @notice Module that adds functionality of presale with an optional whitelist presale.\n/// @dev Uses merkle proofs for whitelist\ncontract PresaleableA is PaymentSplitableA, ICollectionStruct {\n    //------------------------------------------------------//\n    //\n    //  Storage\n    //\n    //------------------------------------------------------//\n    /// @notice merkle root of tree generated from whitelisted addresses\n    /// @dev list is stored on IPFS and CID is stored in the state\n    /// @return merkleRoot merkle root\n    bytes32 public merkleRoot;\n\n    /// @notice CID of file containing list of whitelisted addresses\n    /// @dev IPFS CID of JSON file with list of addresses\n    /// @return whitelistCid IPFS CID\n    string public whitelistCid;\n\n    /// @notice tokens to be sold in presale\n    /// @dev maximum tokens to be sold in presale, if not sold, will be rolled over to public sale\n    /// @return presaleReservedTokens tokens to be sold in presale\n    uint256 public presaleReservedTokens; // number of tokens reserved for presale\n\n    /// @notice maximum tokens an account can buy/mint during presale\n    /// @dev maximum tokens an account can buy/mint during presale\n    /// @return presaleMaxHolding maximum tokens an account can hold during presale\n    uint256 public presaleMaxHolding; // number of tokens a collector can hold during presale\n\n    /// @notice price per token during presale\n    /// @dev price per token during presale\n    /// @return presalePrice price per token during presale\n    uint256 public presalePrice; // price of token during presale\n\n    /// @notice timestamp when presale starts\n    /// @dev presale starts automatically at this time and ends when public sale starts\n    /// @return presaleStartTime timestamp when presale starts\n    uint256 public presaleStartTime; // presale start timestamp\n\n    /// @notice logs updated whitelist details\n    /// @dev emitted when whitelist updated, logs new merkle root and IPFS CID\n    /// @param root updated merkle root generated from new list of whitelisted addresses\n    /// @param cid IPFS CID containing updated list of whitelist addresses\n    event WhitelistUpdated(bytes32 root, string cid); // emitted when whitelist is updated\n\n    //------------------------------------------------------//\n    //\n    //  Modifiers\n    //\n    //------------------------------------------------------//\n\n    modifier presaleAllowed() {\n        require(isPresaleAllowed(), \"PR:001\");\n        _;\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Setup\n    //\n    //------------------------------------------------------//\n\n    /// @notice setup presale details including whitelist\n    /// @dev internal method and can only be invoked when Collection is being setup\n    /// @param _presaleReservedTokens maximum number of tokens to be sold in presale\n    /// @param _presalePrice price per token during presale\n    /// @param _presaleStartTime timestamp when presale starts\n    /// @param _presaleMaxHolding maximum tokens and account can hold during presale\n    /// @param _presaleWhitelist struct containing whitelist details\n    function setupPresale(\n        uint256 _presaleReservedTokens,\n        uint256 _presalePrice,\n        uint256 _presaleStartTime,\n        uint256 _presaleMaxHolding,\n        Whitelist memory _presaleWhitelist\n    ) internal {\n        if (_presaleStartTime != 0) {\n            require(_presaleReservedTokens != 0, \"PR:002\");\n            require(_presaleStartTime > block.timestamp, \"PR:003\");\n            require(_presaleMaxHolding != 0, \"PR:004\");\n            presaleReservedTokens = _presaleReservedTokens;\n            presalePrice = _presalePrice;\n            presaleStartTime = _presaleStartTime;\n            presaleMaxHolding = _presaleMaxHolding;\n            if (!(_presaleWhitelist.root == bytes32(0))) {\n                _setWhitelist(_presaleWhitelist);\n            }\n        }\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Owner only functions\n    //\n    //------------------------------------------------------//\n\n    /// @notice set new sale start time for presale and public sale\n    /// @dev single method to set timestamp for public sale and presale\n    /// @param _newSaleStartTime new timestamp\n    /// @param saleType sale type, true - set for public sale, when saleType is false - set for presale\n    function setSaleStartTime(uint256 _newSaleStartTime, bool saleType)\n        external\n        onlyOwner\n    {\n        if (saleType) {\n            require(\n                _newSaleStartTime > block.timestamp &&\n                    _newSaleStartTime != publicSaleStartTime &&\n                    _newSaleStartTime > presaleStartTime,\n                \"BC:006\"\n            );\n            publicSaleStartTime = _newSaleStartTime;\n        } else {\n            require(\n                _newSaleStartTime > block.timestamp &&\n                    _newSaleStartTime != presaleStartTime &&\n                    _newSaleStartTime < publicSaleStartTime,\n                \"PR:008\"\n            );\n            presaleStartTime = _newSaleStartTime;\n        }\n    }\n\n    /// @notice update whitelist\n    /// @dev update whitelist merkle root and IPFS CID\n    /// @param _whitelist struct containing new whitelist details\n    function updateWhitelist(Whitelist memory _whitelist)\n        external\n        onlyOwner\n        presaleAllowed\n    {\n        _setWhitelist(_whitelist);\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Public function\n    //\n    //------------------------------------------------------//\n\n    /// @notice buy tokens during presale\n    /// @dev checks for whitelist and mints tokens to buyer\n    /// @param _proofs array of merkle proofs to validate if user is whitelisted\n    /// @param _buyer address of buyer\n    /// @param _quantity amount of tokens to be bought\n    function presaleBuy(\n        bytes32[] calldata _proofs,\n        address _buyer,\n        uint256 _quantity\n    ) external payable virtual {\n        _presaleBuy(_proofs, _buyer, _quantity);\n    }\n\n    /// @notice get whitelist details\n    /// @dev get whitelist merkle root and IPFS CID\n    /// @return whitelist struct conatining whitelist details\n    function getPresaleWhitelists()\n        external\n        view\n        presaleAllowed\n        returns (Whitelist memory whitelist)\n    {\n        return Whitelist(merkleRoot, whitelistCid);\n    }\n\n    /// @notice check if an address is whitelist or not\n    /// @dev uses merkle proof to validate if account is whitelisted or not\n    /// @param _proofs array of merkle proofs\n    /// @param _account address which needs to be validated\n    /// @return boolean is address whitelisted or not\n    function isWhitelisted(bytes32[] calldata _proofs, address _account)\n        public\n        view\n        returns (bool)\n    {\n        return _isWhitelisted(_proofs, _account);\n    }\n\n    /// @notice check if presale module is active or not\n    /// @dev checks if presale module is active or not\n    /// @return boolean is presale module active or not\n    function isPresaleAllowed() public view returns (bool) {\n        return presaleReservedTokens > 0;\n    }\n\n    /// @notice check if presale is whitelisted or not\n    /// @dev if whitelisted, presale buy will check for whitelist else not\n    /// @return boolean is presale whitelisted\n    function isPresaleWhitelisted() public view returns (bool) {\n        return isPresaleAllowed() && merkleRoot != bytes32(0);\n    }\n\n    /// @notice check if presale is live or not\n    /// @dev only when presale active, tokens can be bought\n    /// @return boolean is presale active or not\n    function isPresaleActive() public view returns (bool) {\n        return\n            block.timestamp > presaleStartTime &&\n            totalSupply() - reservedTokens < presaleReservedTokens &&\n            block.timestamp < publicSaleStartTime;\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Internal function\n    //\n    //------------------------------------------------------//\n\n    /// @notice internal method to buy tokens during presale\n    /// @dev invoked by presaleBuy and affiliatePresaleBuy\n    /// @param _proofs array of merkle proofs to validate if user is whitelisted\n    /// @param _buyer address of buyer\n    /// @param _quantity amount of tokens to be bought\n    function _presaleBuy(\n        bytes32[] calldata _proofs,\n        address _buyer,\n        uint256 _quantity\n    ) internal whenNotPaused presaleAllowed {\n        require(isPresaleActive(), \"PR:009\");\n        require(\n            isPresaleWhitelisted() ? _isWhitelisted(_proofs, _buyer) : true,\n            \"PR:011\"\n        );\n        require(\n            totalSupply() - reservedTokens + _quantity <= presaleReservedTokens,\n            \"PR:013\"\n        );\n        require(msg.value == (presalePrice * _quantity), \"PR:010\");\n        require(_quantity <= maxPurchase, \"PR:014\");\n        require(balanceOf(_buyer) + _quantity <= presaleMaxHolding, \"PR:012\");\n        _manufacture(_buyer, _quantity);\n    }\n\n    /// @notice internal method to check if account if whitelisted or not\n    /// @dev internally invoked by presale buy and isWhitelisted\n    /// @param _proofs array of merkle proofs to validate if user is whitelisted\n    /// @param _account address of buyer\n    /// @return boolean is address whitelisted or not\n    function _isWhitelisted(bytes32[] calldata _proofs, address _account)\n        private\n        view\n        returns (bool)\n    {\n        bytes32 leaf = keccak256(abi.encodePacked(_account));\n        return MerkleProofUpgradeable.verify(_proofs, merkleRoot, leaf);\n    }\n\n    /// @notice internal method to update whitelist details\n    /// @dev invoked by updateWhitelist and setup\n    /// @param _whitelist struct containing whitelist details\n    function _setWhitelist(Whitelist memory _whitelist) private {\n        merkleRoot = _whitelist.root;\n        whitelistCid = _whitelist.cid;\n        emit WhitelistUpdated(_whitelist.root, _whitelist.cid);\n    }\n}\n"
33     },
34     "contracts/Simplr/collection/ERC721A/modules/PaymentSplitableA.sol": {
35       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\";\nimport \"../base/BaseCollectionA.sol\";\n\n/// @title Payment SplitableA\n/// @author Chain Labs\n/// @notice Module that adds functionality of payment splitting\n/// @dev Core functionality inherited from OpenZeppelin's Payment Splitter\ncontract PaymentSplitableA is BaseCollectionA, PaymentSplitterUpgradeable {\n    //------------------------------------------------------//\n    //\n    //  Storage\n    //\n    //------------------------------------------------------//\n    /// @notice Shares of Simplr in the sale\n    /// @dev percentage (eg. 100% - 10^18) of simplr in the sale\n    /// @return SIMPLR_SHARES shares of simplr currently set to 0.0000000000000001%\n    uint256 public SIMPLR_SHARES; // share of Simplr\n\n    /// @notice address of Simplr's Fee receiver\n    /// @dev Gnosis Safe Simplr Fee Receiver\n    /// @return SIMPLR_RECEIVER_ADDRESS address that will receive fee i.e. Simplr Shares\n    address public SIMPLR_RECEIVER_ADDRESS; // address of SIMPLR to receive shares\n\n    //------------------------------------------------------//\n    //\n    //  Setup\n    //\n    //------------------------------------------------------//\n\n    /// @notice setup payment splitting details for collection\n    /// @dev internal method and only be invoked once during setup\n    /// @param _simplr address of simplr beneficicary address\n    /// @param _simplrShares percentage share of simplr, eg. 15% = parseUnits(15,16) or toWei(0.15) or 15*10^16\n    /// @param _payees array of payee address\n    /// @param _shares array of payee shares, index for both arrays should match for a payee\n    function setupPaymentSplitter(\n        address _simplr,\n        uint256 _simplrShares,\n        address[] memory _payees,\n        uint256[] memory _shares\n    ) internal {\n        require(_payees.length == _shares.length, \"PS:001\");\n        SIMPLR_RECEIVER_ADDRESS = _simplr;\n        SIMPLR_SHARES = _simplrShares;\n        _payees[_payees.length - 1] = _simplr;\n        _shares[_payees.length - 1] = _simplrShares;\n        __PaymentSplitter_init(_payees, _shares);\n    }\n}\n"
36     },
37     "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProofUpgradeable {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
39     },
40     "@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../utils/AddressUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        __PaymentSplitter_init_unchained(payees, shares_);\n    }\n\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        AddressUpgradeable.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20Upgradeable token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[43] private __gap;\n}\n"
42     },
43     "contracts/Simplr/collection/ERC721A/base/BaseCollectionA.sol": {
44       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\nimport \"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\n/// @title Base CollectionA\n/// @author Chain Labs\n/// @notice Base contract for CollectionA\n/// @dev Uses ERC721A (developed by azuki) as NFT standard\ncontract BaseCollectionA is\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ERC721AUpgradeable\n{\n    //------------------------------------------------------//\n    //\n    //  Storage\n    //\n    //------------------------------------------------------//\n    /// @notice Maximum tokens that can ever exist\n    /// @dev maximum tokens that can be minted\n    /// @return maximumTokens maximum number of tokens\n    uint256 public maximumTokens;\n\n    /// @notice Maximum tokens that can be bought per transaction in public sale\n    /// @dev max mint/buy limit in public sale\n    /// @return maxPurchase mint limit per transaction in public sale\n    uint16 public maxPurchase;\n\n    /// @notice Maximum tokens an account can buy/mint in public sale\n    /// @dev maximum tokens an account can buy/mint in public sale\n    /// @return maxHolding maximum tokens an account can hold in public sale\n    uint16 public maxHolding;\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// @return price the return variables of a contract’s function state variable\n    uint256 public price;\n\n    /// @notice timestamp when public (main) sale starts\n    /// @dev public sale starts automatically at this time\n    /// @return publicSaleStartTime timestamp when public sale starts\n    uint256 public publicSaleStartTime;\n\n    /// @notice Base URI for assets\n    /// @dev this state accounts for both placeholer media as well as revealed media\n    /// @return projectURI base URI for assets\n    string public projectURI;\n\n    /// @notice IPFS CID of JSON file collection metadata\n    /// @dev The JSON file is created when the Simplr Collection form is filled and is used by the interface\n    /// @return metadata IPFS CID\n    string public metadata;\n\n    /// @notice number of reserved tokens\n    /// @dev this value is set in Reserveable contract\n    /// @return reservedTokens number of tokens reserved\n    uint256 public reservedTokens;\n\n    //------------------------------------------------------//\n    //\n    //  Setup\n    //\n    //------------------------------------------------------//\n\n    /// @notice setup states of public sale and collection constants\n    /// @dev internal method to setup base collection\n    /// @param _name Collection Name\n    /// @param _symbol Collection Symbol\n    /// @param _admin admin address\n    /// @param _maximumTokens maximum number of tokens\n    /// @param _maxPurchase maximum number of tokens that can be bought per transaction in public sale\n    /// @param _maxHolding maximum number of tokens an account can hold in public sale\n    /// @param _price price per NFT token during public sale.\n    /// @param _publicSaleStartTime public sale start timestamp\n    /// @param _projectURI URI for collection media and assets\n    function setupBaseCollection(\n        string memory _name,\n        string memory _symbol,\n        address _admin,\n        uint256 _maximumTokens,\n        uint16 _maxPurchase,\n        uint16 _maxHolding,\n        uint256 _price,\n        uint256 _publicSaleStartTime,\n        string memory _projectURI\n    ) internal {\n        require(_admin != address(0), \"BC:001\");\n        require(_maximumTokens != 0, \"BC:002\");\n        require(\n            _maximumTokens >= _maxHolding && _maxHolding >= _maxPurchase,\n            \"BC:003\"\n        );\n        __ERC721A_init(_name, _symbol);\n        _transferOwnership(_admin);\n        maximumTokens = _maximumTokens;\n        maxPurchase = _maxPurchase;\n        maxHolding = _maxHolding;\n        price = _price;\n        publicSaleStartTime = _publicSaleStartTime;\n        projectURI = _projectURI;\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Owner only functions\n    //\n    //------------------------------------------------------//\n\n    /// @notice updates the collection details (not collection assets)\n    /// @dev updates the IPFS CID that points to new collection details\n    /// @param _metadata new IPFS CID with updated collection details\n    function setMetadata(string memory _metadata) external {\n        // can only be invoked before setup or by owner after setup\n        require(!isSetupComplete() || msg.sender == owner(), \"BC:004\");\n        require(bytes(_metadata).length != 0, \"BC:005\");\n        metadata = _metadata;\n    }\n\n    /// @notice Pause sale of tokens\n    /// @dev pause all the open access methods like buy and presale buy\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /// @notice unpause sale of tokens\n    /// @dev unpause all the open access methods like buy and presale buy\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Public function\n    //\n    //------------------------------------------------------//\n\n    /// @notice buy during public sale\n    /// @dev method to buy during public sale without affiliate\n    /// @param _buyer address of buyer\n    /// @param _quantity number of tokens to buy/mint\n    function buy(address _buyer, uint256 _quantity) external payable virtual {\n        _buy(_buyer, _quantity);\n    }\n\n    /// @notice check if public sale is active or not\n    /// @dev it compares start time stamp with current time and check if sold or not\n    /// @return isSaleActive a boolean, true - sale active, false - sale inactive\n    function isSaleActive() public view returns (bool) {\n        return\n            block.timestamp >= publicSaleStartTime &&\n            totalSupply() != maximumTokens;\n    }\n\n    /// @notice checks if setup is complete\n    /// @dev if constants are set, setup is complete\n    /// @return boolean checks if setup is complete\n    function isSetupComplete() public view virtual returns (bool) {\n        return maximumTokens != 0 && publicSaleStartTime != 0;\n    }\n\n    //------------------------------------------------------//\n    //\n    //  Internal function\n    //\n    //------------------------------------------------------//\n\n    /// @notice internal method to buy during public sale\n    /// @dev method to buy during public sale to be used with or without affiliate\n    /// @param _buyer address of buyer\n    /// @param _quantity number of tokens to buy/mint\n    function _buy(address _buyer, uint256 _quantity) internal whenNotPaused {\n        require(isSaleActive(), \"BC:010\");\n        require(msg.value == (price * _quantity), \"BC:011\");\n        require(_quantity <= maxPurchase, \"BC:012\");\n        require(balanceOf(_buyer) + _quantity <= maxHolding, \"BC:013\");\n        _manufacture(_buyer, _quantity);\n    }\n\n    /// @notice mints amount of tokens to an account\n    /// @dev it mints tokens to an account doing sanity check of not crossing maximum tokens limit\n    /// @param _receiver address of buyer\n    /// @param _quantity amount of tokens to be minted\n    function _manufacture(address _receiver, uint256 _quantity) internal {\n        require(totalSupply() + _quantity <= maximumTokens, \"BC:014\");\n        _safeMint(_receiver, _quantity);\n    }\n\n    /// @inheritdoc ERC721AUpgradeable\n    function _baseURI() internal view virtual override returns (string memory) {\n        return projectURI;\n    }\n\n    /// @inheritdoc\tERC721AUpgradeable\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
48     },
49     "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
51     },
52     "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
54     },
55     "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
57     },
58     "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
60     },
61     "erc721a-upgradeable/contracts/ERC721AUpgradeable.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721AUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721AUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721A_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr) if (curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex < end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex < end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            do {\n                emit Transfer(address(0), to, updatedIndex++);\n            } while (updatedIndex < end);\n\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[42] private __gap;\n}\n"
63     },
64     "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
66     },
67     "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
69     },
70     "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
72     },
73     "erc721a-upgradeable/contracts/IERC721AUpgradeable.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721AUpgradeable is IERC721Upgradeable, IERC721MetadataUpgradeable {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     * \n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n"
75     },
76     "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
78     },
79     "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
80       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
81     },
82     "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
84     },
85     "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
87     },
88     "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
90     },
91     "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
92       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
93     },
94     "contracts/Simplr/affiliate/IAffiliateRegistry.sol": {
95       "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Copyright (C) 2022 Simplr\npragma solidity 0.8.11;\n\n/**\n * @title Affiliate Registry Interface\n * @dev   Interface with necessary functionalities of Affiliate Registry.\n * @author Chain Labs Team\n */\ninterface IAffiliateRegistry {\n    function setAffiliateShares(uint256 _affiliateShares, bytes32 _projectId)\n        external;\n\n    function registerProject(string memory projectName, uint256 affiliateShares)\n        external\n        returns (bytes32 projectId);\n\n    function getProjectId(string memory _projectName, address _projectOwner)\n        external\n        view\n        returns (bytes32 projectId);\n\n    function getAffiliateShareValue(\n        bytes memory signature,\n        address affiliate,\n        bytes32 projectId,\n        uint256 value\n    ) external view returns (bool _isAffiliate, uint256 _shareValue);\n}\n"
96     },
97     "@openzeppelin/contracts/utils/Address.sol": {
98       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
99     }
100   },
101   "settings": {
102     "optimizer": {
103       "enabled": true,
104       "runs": 200
105     },
106     "outputSelection": {
107       "*": {
108         "*": [
109           "evm.bytecode",
110           "evm.deployedBytecode",
111           "devdoc",
112           "userdoc",
113           "metadata",
114           "abi"
115         ]
116       }
117     },
118     "metadata": {
119       "useLiteralContent": true
120     },
121     "libraries": {}
122   }
123 }}