1 {{
2   "language": "Solidity",
3   "sources": {
4     "VersaillesHeroesCtrl.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"Ownable.sol\";\nimport \"ECDSA.sol\";\nimport \"SafeMath.sol\";\nimport \"Pausable.sol\";\nimport \"ReentrancyGuard.sol\";\n\n\ninterface NFT {\n    function mint(address to, uint256 boxId, uint256 boxCategory, uint256 quantity, bytes32 randomHash) external;\n    function transferFrom(address from,address to,uint256 tokenId) external;\n}\n\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burnFrom(address account, uint256 amount) external;\n}\n\ninterface USDT {\n    function transferFrom(address sender, address recipient, uint256 amount) external;\n}\n\ncontract VersaillesHeroesCtrl is Ownable, Pausable, ReentrancyGuard {\n    using ECDSA for bytes32;\n    using SafeMath for uint256;\n\n\n    event HeroTrade(bytes32 orderHash, address seller, address buyer, uint256 tokenId, address paymentToken, uint256 price, uint256 fee);\n    event CancelHeroOrder(bytes32 orderHash, address seller, uint256 tokenId);\n\n    event WeaponTrade(bytes32 orderHash, address seller, address buyer, uint256 tokenId, address paymentToken, uint256 price, uint256 fee);\n    event CancelWeaponOrder(bytes32 orderHash, address seller, uint256 tokenId);\n\n    event HeroUpgrade(uint256 tokenId, uint256 heroRarity, uint256 round);\n\n    event DepositMOH(address sender, uint256 amount);\n    event WithdrawMOH(bytes32 withdrawHash, address sender, uint256 amount);\n\n    event DepositVRH(address sender, uint256 amount);\n    event WithdrawVRH(bytes32 withdrawHash, address sender, uint256 amount);\n\n\n    mapping(bytes32 => bool) public hashHistory;\n\n    struct PriceInfo {\n        address paymentToken;\n        uint256 price;\n    }\n    mapping(uint256 => PriceInfo) public heroFloorPrice;\n    mapping(uint256 => PriceInfo) public weaponFloorPrice;\n    mapping(uint256 => PriceInfo) public upgradeFloorPrice;\n\n    address public signer;\n    address public fundAddress;\n\n    address public heroAddress;\n    address public weaponAddress;\n    address public mohAddress;\n    address public vrhAddress;\n    address public usdtAddress;\n\n    constructor(address _signer, address _fundAddress, address _heroAddress, address _weaponAddress, address _mohAddress, address _vrhAddress, address _usdtAddress){\n        signer = _signer;\n        fundAddress = _fundAddress;\n        heroAddress = _heroAddress;\n        weaponAddress = _weaponAddress;\n        mohAddress = _mohAddress;\n        vrhAddress = _vrhAddress;\n        usdtAddress = _usdtAddress;\n    }\n\n\n\n    function pause() public whenNotPaused onlyOwner {\n        _pause();\n    }\n\n    function unpause() public whenPaused onlyOwner {\n        _unpause();\n    }\n\n    function setSigner(address _signer) external onlyOwner {\n        signer = _signer;\n    }\n\n    function setFundAddress(address _fundAddress) external onlyOwner {\n        fundAddress = _fundAddress;\n    }\n\n\n    function setHeroPrice(uint256 _boxId, address _paymentToken, uint256 _price) external onlyOwner {\n        heroFloorPrice[_boxId] = PriceInfo(_paymentToken, _price);\n    }\n    function setWeaponPrice(uint256 _boxId, address _paymentToken, uint256 _price) external onlyOwner {\n        weaponFloorPrice[_boxId] = PriceInfo(_paymentToken, _price);\n    }\n    function setUpgradePrice(uint256 _heroRarity, address _paymentToken, uint256 _price) external onlyOwner {\n        upgradeFloorPrice[_heroRarity] = PriceInfo(_paymentToken, _price);\n    }\n\n\n\n    function checkSigner(bytes32 _hash, bytes memory _rsv, address _signer) internal {\n        require(!hashHistory[_hash], \"hash exist\");\n        hashHistory[_hash] = true;\n        address signerTemp = _hash.toEthSignedMessageHash().recover(_rsv);\n        require(signerTemp == _signer, \"signer not match\");\n    }\n\n\n    function claimFreeHero(uint256 _heroBoxId, uint256 _heroBoxCategory, bytes memory _rsv, bytes32 _randomHash)\n        external nonReentrant whenNotPaused{\n\n        bytes32 hash = keccak256(abi.encode(\"claimFreeHero\", address(this), msg.sender, _heroBoxId, _heroBoxCategory));\n        checkSigner(hash, _rsv, signer);\n\n        NFT(heroAddress).mint(msg.sender, _heroBoxId, _heroBoxCategory, 1, _randomHash);\n\n    }\n\n\n    function charge(address _paymentToken, uint256 _amount) internal{\n        if(_paymentToken == address(0)){\n            require(msg.value == _amount, \"value error\");\n\n            payable(fundAddress).transfer(msg.value);\n        }else if(_paymentToken == usdtAddress){\n            USDT(_paymentToken).transferFrom(msg.sender, fundAddress, _amount);\n        }else{\n            require(IERC20(_paymentToken).transferFrom(msg.sender, fundAddress, _amount));\n        }\n    }\n\n    function purchaseHero(uint256 _heroBoxId, uint256 _heroBoxCategory, address _paymentToken, uint256 _price,\n        uint256 _quantity, bytes32 _randomHash, bytes memory _rsv) external payable nonReentrant whenNotPaused{\n\n        require(_price > 0, \"price invalid\");\n        require(_quantity > 0, \"quantity invalid\");\n\n        //check price\n        PriceInfo memory priceInfo = heroFloorPrice[_heroBoxId];\n        if(priceInfo.price > 0){\n            require(_paymentToken == priceInfo.paymentToken &&  _price >= priceInfo.price, \"payment invalid\");\n        }\n\n        bytes32 hash = keccak256(abi.encode(\"purchaseHero\", address(this), msg.sender, _heroBoxId, _heroBoxCategory, _paymentToken, _price, _quantity, _randomHash));\n        checkSigner(hash, _rsv, signer);\n\n        uint256 amount = _price.mul(_quantity);\n        charge(_paymentToken, amount);\n\n        NFT(heroAddress).mint(msg.sender, _heroBoxId,  _heroBoxCategory, _quantity, _randomHash);\n\n    }\n\n    function purchaseWeapon(uint256 _weaponBoxId, uint256 _weaponBoxCategory, address _paymentToken, uint256 _price,\n        uint256 _quantity, bytes32 _randomHash, bytes memory _rsv) external payable nonReentrant whenNotPaused{\n\n        require(_price > 0, \"price invalid\");\n        require(_quantity > 0, \"quantity invalid\");\n\n        //check price\n        PriceInfo memory priceInfo = weaponFloorPrice[_weaponBoxId];\n        if(priceInfo.price > 0){\n            require(_paymentToken == priceInfo.paymentToken &&  _price >= priceInfo.price, \"payment invalid\");\n        }\n\n        bytes32 hash = keccak256(abi.encode(\"purchaseWeapon\", address(this), msg.sender, _weaponBoxId, _weaponBoxCategory, _paymentToken, _price, _quantity, _randomHash));\n        checkSigner(hash, _rsv, signer);\n\n        uint256 amount = _price.mul(_quantity);\n        charge(_paymentToken, amount);\n\n        NFT(weaponAddress).mint(msg.sender, _weaponBoxId,  _weaponBoxCategory, _quantity, _randomHash);\n\n    }\n\n    function upgradeHero(uint256 _tokenId, uint256 _heroRarity, address _paymentToken, uint256 _price, uint256 _round, bytes memory _rsv)\n        external payable nonReentrant whenNotPaused{\n\n        require(_price > 0, \"price invalid\");\n\n        //check price\n        PriceInfo memory priceInfo = upgradeFloorPrice[_heroRarity];\n        if(priceInfo.price > 0){\n            require(_paymentToken == priceInfo.paymentToken &&  _price >= priceInfo.price, \"payment invalid\");\n        }\n\n        bytes32 hash = keccak256(abi.encode(\"upgradeHero\", address(this), msg.sender, _tokenId, _heroRarity, _paymentToken, _price, _round));\n        checkSigner(hash, _rsv, signer);\n\n        charge(_paymentToken, _price);\n\n        emit HeroUpgrade(_tokenId, _heroRarity, _round);\n\n    }\n\n    function withdrawMOH(uint256 _amount, bytes32 _salt, bytes memory _rsv) external nonReentrant whenNotPaused{\n\n        require(_amount > 0, \"amount invalid\");\n\n        bytes32 hash = keccak256(abi.encode(\"withdrawMOH\", address(this), msg.sender, _amount, _salt));\n        checkSigner(hash, _rsv, signer);\n\n        IERC20(mohAddress).transferFrom(fundAddress, msg.sender, _amount);\n\n        emit WithdrawMOH(hash, msg.sender, _amount);\n    }\n\n\n    function withdrawVRH(uint256 _amount, bytes32 _salt, bytes memory _rsv) external nonReentrant whenNotPaused{\n\n        require(_amount > 0, \"amount invalid\");\n\n        bytes32 hash = keccak256(abi.encode(\"withdrawVRH\", address(this), msg.sender, _amount, _salt));\n        checkSigner(hash, _rsv, signer);\n\n        IERC20(vrhAddress).transferFrom(fundAddress, msg.sender, _amount);\n\n        emit WithdrawVRH(hash, msg.sender, _amount);\n    }\n\n\n\n    function depositMOH(uint256 _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"amount invalid\");\n\n        require(IERC20(mohAddress).transferFrom(msg.sender, fundAddress, _amount));\n\n        emit DepositMOH(msg.sender, _amount);\n    }\n\n    function depositVRH(uint256 _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"amount invalid\");\n\n        require(IERC20(vrhAddress).transferFrom(msg.sender, fundAddress, _amount));\n\n        emit DepositVRH(msg.sender, _amount);\n    }\n\n\n\n\n\n    function hashOrder(address _nftToken, uint256 _tokenId, address _paymentToken,uint256 _price,uint256 _fee,\n        address _seller, uint256 _listingTime, uint256 _expirationTime)  public view returns(bytes32){\n\n        return keccak256(abi.encode(address(this), _nftToken, _tokenId, _paymentToken, _price, _fee, _seller, _listingTime, _expirationTime));\n    }\n\n    function buy(address _nftToken, uint256 _tokenId, address _paymentToken, uint256 _price,uint256 _fee,\n        address _seller, uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) internal returns(bytes32){\n\n        require(_expirationTime >= block.timestamp, \"order expired\");\n        require(_fee > 0 && _fee < _price, \"fee invalid\");\n        require(_seller != msg.sender, \"buy self\" );\n\n        bytes32 hash = hashOrder(_nftToken, _tokenId, _paymentToken, _price, _fee, _seller, _listingTime, _expirationTime);\n        checkSigner(hash, _rsv, _seller);\n\n\n        //transfer price & fee\n        if(_paymentToken == address(0)){\n            require(msg.value == _price, \"price error\");\n\n            payable(fundAddress).transfer(_fee);\n            payable(_seller).transfer(_price.sub(_fee));\n        }else if(_paymentToken == usdtAddress){\n            USDT(_paymentToken).transferFrom(msg.sender, fundAddress, _price);\n            USDT(_paymentToken).transferFrom(fundAddress, _seller, _price.sub(_fee));\n        }else{\n            require(IERC20(_paymentToken).transferFrom(msg.sender, fundAddress, _price));\n            require(IERC20(_paymentToken).transferFrom(fundAddress, _seller, _price.sub(_fee)));\n        }\n\n        //transfer nft\n        NFT(_nftToken).transferFrom(_seller, msg.sender, _tokenId);\n\n        return hash;\n    }\n\n\n    function cancelSellOrder(address _nftToken, uint256 _tokenId, address _paymentToken, uint256 _price, uint256 _fee,\n        uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) internal returns(bytes32) {\n\n        bytes32 hash = hashOrder(_nftToken, _tokenId, _paymentToken, _price, _fee, msg.sender, _listingTime, _expirationTime);\n        checkSigner(hash, _rsv, msg.sender);\n\n        return hash;\n    }\n\n\n\n    function buyHero(uint256 _tokenId, address _paymentToken, uint256 _price, uint256 _fee,address _seller,\n        uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) external payable nonReentrant whenNotPaused{\n\n        bytes32 hash = buy(heroAddress, _tokenId, _paymentToken, _price, _fee, _seller, _listingTime, _expirationTime, _rsv);\n\n        emit HeroTrade(hash, _seller, msg.sender, _tokenId, _paymentToken, _price, _fee);\n    }\n\n\n    function cancelSellHero(uint256 _tokenId, address _paymentToken, uint256 _price, uint256 _fee,\n        uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) external whenNotPaused{\n\n        bytes32 hash = cancelSellOrder(heroAddress, _tokenId, _paymentToken, _price, _fee, _listingTime, _expirationTime, _rsv);\n\n        emit CancelHeroOrder(hash, msg.sender, _tokenId);\n    }\n\n\n\n\n    function buyWeapon(uint256 _tokenId, address _paymentToken, uint256 _price, uint256 _fee,address _seller,\n        uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) external payable nonReentrant whenNotPaused{\n\n        bytes32 hash = buy(weaponAddress, _tokenId, _paymentToken, _price, _fee, _seller, _listingTime, _expirationTime, _rsv);\n\n        emit WeaponTrade(hash, _seller, msg.sender, _tokenId, _paymentToken, _price, _fee);\n    }\n\n\n    function cancelSellWeapon(uint256 _tokenId, address _paymentToken, uint256 _price, uint256 _fee,\n        uint256 _listingTime, uint256 _expirationTime, bytes memory _rsv) external whenNotPaused{\n\n        bytes32 hash = cancelSellOrder(weaponAddress, _tokenId, _paymentToken, _price, _fee, _listingTime, _expirationTime, _rsv);\n\n        emit CancelWeaponOrder(hash, msg.sender, _tokenId);\n    }\n}\n"
6     },
7     "Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "ECDSA.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
15     },
16     "Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
18     },
19     "SafeMath.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
21     },
22     "Pausable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
24     },
25     "ReentrancyGuard.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
27     }
28   },
29   "settings": {
30     "evmVersion": "istanbul",
31     "optimizer": {
32       "enabled": true,
33       "runs": 200
34     },
35     "libraries": {
36       "VersaillesHeroesCtrl.sol": {}
37     },
38     "outputSelection": {
39       "*": {
40         "*": [
41           "evm.bytecode",
42           "evm.deployedBytecode",
43           "devdoc",
44           "userdoc",
45           "metadata",
46           "abi"
47         ]
48       }
49     }
50   }
51 }}