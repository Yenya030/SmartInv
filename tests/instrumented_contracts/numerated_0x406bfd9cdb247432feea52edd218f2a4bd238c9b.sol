1 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
2 
3 pragma solidity 0.5.17;
4 
5 interface IntVoteInterface {
6     //When implementing this interface please do not only override function and modifier,
7     //but also to keep the modifiers on the overridden functions.
8     modifier votable(bytes32 _proposalId) {revert("proposal is not votable"); _;}
9 
10     event NewProposal(
11         bytes32 indexed _proposalId,
12         address indexed _organization,
13         uint256 _numOfChoices,
14         address _proposer,
15         bytes32 _paramsHash
16     );
17 
18     event ExecuteProposal(bytes32 indexed _proposalId,
19         address indexed _organization,
20         uint256 _decision,
21         uint256 _totalReputation
22     );
23 
24     event VoteProposal(
25         bytes32 indexed _proposalId,
26         address indexed _organization,
27         address indexed _voter,
28         uint256 _vote,
29         uint256 _reputation
30     );
31 
32     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
33     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
34 
35     /**
36      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
37      * generated by calculating keccak256 of a incremented counter.
38      * @param _numOfChoices number of voting choices
39      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
40      * @param _proposer address
41      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
42      * @return proposal's id.
43      */
44     function propose(
45         uint256 _numOfChoices,
46         bytes32 _proposalParameters,
47         address _proposer,
48         address _organization
49         ) external returns(bytes32);
50 
51     function vote(
52         bytes32 _proposalId,
53         uint256 _vote,
54         uint256 _rep,
55         address _voter
56     )
57     external
58     returns(bool);
59 
60     function cancelVote(bytes32 _proposalId) external;
61 
62     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
63 
64     function isVotable(bytes32 _proposalId) external view returns(bool);
65 
66     /**
67      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
68      * @param _proposalId the ID of the proposal
69      * @param _choice the index in the
70      * @return voted reputation for the given choice
71      */
72     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
73 
74     /**
75      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
76      * @return bool true or false
77      */
78     function isAbstainAllow() external pure returns(bool);
79 
80     /**
81      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
82      * @return min - minimum number of choices
83                max - maximum number of choices
84      */
85     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
86 }
87 
88 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
89 
90 pragma solidity ^0.5.0;
91 
92 /**
93  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
94  * the optional functions; to access them see {ERC20Detailed}.
95  */
96 interface IERC20 {
97     /**
98      * @dev Returns the amount of tokens in existence.
99      */
100     function totalSupply() external view returns (uint256);
101 
102     /**
103      * @dev Returns the amount of tokens owned by `account`.
104      */
105     function balanceOf(address account) external view returns (uint256);
106 
107     /**
108      * @dev Moves `amount` tokens from the caller's account to `recipient`.
109      *
110      * Returns a boolean value indicating whether the operation succeeded.
111      *
112      * Emits a {Transfer} event.
113      */
114     function transfer(address recipient, uint256 amount) external returns (bool);
115 
116     /**
117      * @dev Returns the remaining number of tokens that `spender` will be
118      * allowed to spend on behalf of `owner` through {transferFrom}. This is
119      * zero by default.
120      *
121      * This value changes when {approve} or {transferFrom} are called.
122      */
123     function allowance(address owner, address spender) external view returns (uint256);
124 
125     /**
126      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
127      *
128      * Returns a boolean value indicating whether the operation succeeded.
129      *
130      * IMPORTANT: Beware that changing an allowance with this method brings the risk
131      * that someone may use both the old and the new allowance by unfortunate
132      * transaction ordering. One possible solution to mitigate this race
133      * condition is to first reduce the spender's allowance to 0 and set the
134      * desired value afterwards:
135      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
136      *
137      * Emits an {Approval} event.
138      */
139     function approve(address spender, uint256 amount) external returns (bool);
140 
141     /**
142      * @dev Moves `amount` tokens from `sender` to `recipient` using the
143      * allowance mechanism. `amount` is then deducted from the caller's
144      * allowance.
145      *
146      * Returns a boolean value indicating whether the operation succeeded.
147      *
148      * Emits a {Transfer} event.
149      */
150     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
151 
152     /**
153      * @dev Emitted when `value` tokens are moved from one account (`from`) to
154      * another (`to`).
155      *
156      * Note that `value` may be zero.
157      */
158     event Transfer(address indexed from, address indexed to, uint256 value);
159 
160     /**
161      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
162      * a call to {approve}. `value` is the new allowance.
163      */
164     event Approval(address indexed owner, address indexed spender, uint256 value);
165 }
166 
167 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
168 
169 pragma solidity 0.5.17;
170 
171 
172 interface VotingMachineCallbacksInterface {
173     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
174     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
175 
176     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
177     external
178     returns(bool);
179 
180     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
181     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
182     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
183 }
184 
185 // File: openzeppelin-solidity/contracts/GSN/Context.sol
186 
187 pragma solidity ^0.5.0;
188 
189 /*
190  * @dev Provides information about the current execution context, including the
191  * sender of the transaction and its data. While these are generally available
192  * via msg.sender and msg.data, they should not be accessed in such a direct
193  * manner, since when dealing with GSN meta-transactions the account sending and
194  * paying for execution may not be the actual sender (as far as an application
195  * is concerned).
196  *
197  * This contract is only required for intermediate, library-like contracts.
198  */
199 contract Context {
200     // Empty internal constructor, to prevent people from mistakenly deploying
201     // an instance of this contract, which should be used via inheritance.
202     constructor () internal { }
203     // solhint-disable-previous-line no-empty-blocks
204 
205     function _msgSender() internal view returns (address payable) {
206         return msg.sender;
207     }
208 
209     function _msgData() internal view returns (bytes memory) {
210         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
211         return msg.data;
212     }
213 }
214 
215 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
216 
217 pragma solidity ^0.5.0;
218 
219 /**
220  * @dev Contract module which provides a basic access control mechanism, where
221  * there is an account (an owner) that can be granted exclusive access to
222  * specific functions.
223  *
224  * This module is used through inheritance. It will make available the modifier
225  * `onlyOwner`, which can be applied to your functions to restrict their use to
226  * the owner.
227  */
228 contract Ownable is Context {
229     address private _owner;
230 
231     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
232 
233     /**
234      * @dev Initializes the contract setting the deployer as the initial owner.
235      */
236     constructor () internal {
237         _owner = _msgSender();
238         emit OwnershipTransferred(address(0), _owner);
239     }
240 
241     /**
242      * @dev Returns the address of the current owner.
243      */
244     function owner() public view returns (address) {
245         return _owner;
246     }
247 
248     /**
249      * @dev Throws if called by any account other than the owner.
250      */
251     modifier onlyOwner() {
252         require(isOwner(), "Ownable: caller is not the owner");
253         _;
254     }
255 
256     /**
257      * @dev Returns true if the caller is the current owner.
258      */
259     function isOwner() public view returns (bool) {
260         return _msgSender() == _owner;
261     }
262 
263     /**
264      * @dev Leaves the contract without owner. It will not be possible to call
265      * `onlyOwner` functions anymore. Can only be called by the current owner.
266      *
267      * NOTE: Renouncing ownership will leave the contract without an owner,
268      * thereby removing any functionality that is only available to the owner.
269      */
270     function renounceOwnership() public onlyOwner {
271         emit OwnershipTransferred(_owner, address(0));
272         _owner = address(0);
273     }
274 
275     /**
276      * @dev Transfers ownership of the contract to a new account (`newOwner`).
277      * Can only be called by the current owner.
278      */
279     function transferOwnership(address newOwner) public onlyOwner {
280         _transferOwnership(newOwner);
281     }
282 
283     /**
284      * @dev Transfers ownership of the contract to a new account (`newOwner`).
285      */
286     function _transferOwnership(address newOwner) internal {
287         require(newOwner != address(0), "Ownable: new owner is the zero address");
288         emit OwnershipTransferred(_owner, newOwner);
289         _owner = newOwner;
290     }
291 }
292 
293 // File: @daostack/infra/contracts/Reputation.sol
294 
295 pragma solidity 0.5.17;
296 
297 
298 
299 /**
300  * @title Reputation system
301  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
302  * A reputation is use to assign influence measure to a DAO'S peers.
303  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
304  * The Reputation contract maintain a map of address to reputation value.
305  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
306  */
307 contract Reputation is Ownable {
308 
309     uint8 public decimals = 18;             //Number of decimals of the smallest unit
310     // Event indicating minting of reputation to an address.
311     event Mint(address indexed _to, uint256 _amount);
312     // Event indicating burning of reputation for an address.
313     event Burn(address indexed _from, uint256 _amount);
314 
315       /// @dev `Checkpoint` is the structure that attaches a block number to a
316       ///  given value, the block number attached is the one that last changed the
317       ///  value
318     struct Checkpoint {
319 
320     // `fromBlock` is the block number that the value was generated from
321         uint128 fromBlock;
322 
323           // `value` is the amount of reputation at a specific block number
324         uint128 value;
325     }
326 
327       // `balances` is the map that tracks the balance of each address, in this
328       //  contract when the balance changes the block number that the change
329       //  occurred is also included in the map
330     mapping (address => Checkpoint[]) private balances;
331 
332       // Tracks the history of the `totalSupply` of the reputation
333     Checkpoint[] private totalSupplyHistory;
334 
335       /// @notice Generates `_amount` reputation that are assigned to `_owner`
336       /// @param _user The address that will be assigned the new reputation
337       /// @param _amount The quantity of reputation generated
338       /// @return True if the reputation are generated correctly
339     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
340         uint256 curTotalSupply = totalSupply();
341         require(curTotalSupply + _amount >= curTotalSupply, "total supply overflow"); // Check for overflow
342         uint256 previousBalanceTo = balanceOf(_user);
343         require(previousBalanceTo + _amount >= previousBalanceTo, "balace overflow"); // Check for overflow
344         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
345         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
346         emit Mint(_user, _amount);
347         return true;
348     }
349 
350       /// @notice Burns `_amount` reputation from `_owner`
351       /// @param _user The address that will lose the reputation
352       /// @param _amount The quantity of reputation to burn
353       /// @return True if the reputation are burned correctly
354     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
355         uint256 curTotalSupply = totalSupply();
356         uint256 amountBurned = _amount;
357         uint256 previousBalanceFrom = balanceOf(_user);
358         if (previousBalanceFrom < amountBurned) {
359             amountBurned = previousBalanceFrom;
360         }
361         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
362         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
363         emit Burn(_user, amountBurned);
364         return true;
365     }
366 
367     /// @dev This function makes it easy to get the total number of reputation
368     /// @return The total number of reputation
369     function totalSupply() public view returns (uint256) {
370         return totalSupplyAt(block.number);
371     }
372 
373     ////////////////
374     // Query balance and totalSupply in History
375     ////////////////
376     /**
377     * @dev return the reputation amount of a given owner
378     * @param _owner an address of the owner which we want to get his reputation
379     */
380     function balanceOf(address _owner) public view returns (uint256 balance) {
381         return balanceOfAt(_owner, block.number);
382     }
383 
384     /// @notice Total amount of reputation at a specific `_blockNumber`.
385     /// @param _blockNumber The block number when the totalSupply is queried
386     /// @return The total amount of reputation at `_blockNumber`
387     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
388         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
389             return 0;
390           // This will return the expected totalSupply during normal situations
391         } else {
392             return getValueAt(totalSupplyHistory, _blockNumber);
393         }
394     }
395 
396   /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
397   /// @param _owner The address from which the balance will be retrieved
398   /// @param _blockNumber The block number when the balance is queried
399   /// @return The balance at `_blockNumber`
400     function balanceOfAt(address _owner, uint256 _blockNumber)
401     public view returns (uint256)
402     {
403         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
404             return 0;
405         // This will return the expected balance during normal situations
406         } else {
407             return getValueAt(balances[_owner], _blockNumber);
408         }
409     }
410   ////////////////
411   // Internal helper functions to query and set a value in a snapshot array
412   ////////////////
413 
414       /// @dev `getValueAt` retrieves the number of reputation at a given block number
415       /// @param checkpoints The history of values being queried
416       /// @param _block The block number to retrieve the value at
417       /// @return The number of reputation being queried
418     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
419         if (checkpoints.length == 0) {
420             return 0;
421         }
422 
423           // Shortcut for the actual value
424         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
425             return checkpoints[checkpoints.length-1].value;
426         }
427         if (_block < checkpoints[0].fromBlock) {
428             return 0;
429         }
430 
431           // Binary search of the value in the array
432         uint256 min = 0;
433         uint256 max = checkpoints.length-1;
434         while (max > min) {
435             uint256 mid = (max + min + 1) / 2;
436             if (checkpoints[mid].fromBlock <= _block) {
437                 min = mid;
438             } else {
439                 max = mid-1;
440             }
441         }
442         return checkpoints[min].value;
443     }
444 
445       /// @dev `updateValueAtNow` used to update the `balances` map and the
446       ///  `totalSupplyHistory`
447       /// @param checkpoints The history of data being updated
448       /// @param _value The new number of reputation
449     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
450         require(uint128(_value) == _value, "reputation overflow"); //check value is in the 128 bits bounderies
451         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
452             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
453             newCheckPoint.fromBlock = uint128(block.number);
454             newCheckPoint.value = uint128(_value);
455         } else {
456             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
457             oldCheckPoint.value = uint128(_value);
458         }
459     }
460 }
461 
462 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
463 
464 pragma solidity ^0.5.0;
465 
466 /**
467  * @dev Wrappers over Solidity's arithmetic operations with added overflow
468  * checks.
469  *
470  * Arithmetic operations in Solidity wrap on overflow. This can easily result
471  * in bugs, because programmers usually assume that an overflow raises an
472  * error, which is the standard behavior in high level programming languages.
473  * `SafeMath` restores this intuition by reverting the transaction when an
474  * operation overflows.
475  *
476  * Using this library instead of the unchecked operations eliminates an entire
477  * class of bugs, so it's recommended to use it always.
478  */
479 library SafeMath {
480     /**
481      * @dev Returns the addition of two unsigned integers, reverting on
482      * overflow.
483      *
484      * Counterpart to Solidity's `+` operator.
485      *
486      * Requirements:
487      * - Addition cannot overflow.
488      */
489     function add(uint256 a, uint256 b) internal pure returns (uint256) {
490         uint256 c = a + b;
491         require(c >= a, "SafeMath: addition overflow");
492 
493         return c;
494     }
495 
496     /**
497      * @dev Returns the subtraction of two unsigned integers, reverting on
498      * overflow (when the result is negative).
499      *
500      * Counterpart to Solidity's `-` operator.
501      *
502      * Requirements:
503      * - Subtraction cannot overflow.
504      */
505     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
506         return sub(a, b, "SafeMath: subtraction overflow");
507     }
508 
509     /**
510      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
511      * overflow (when the result is negative).
512      *
513      * Counterpart to Solidity's `-` operator.
514      *
515      * Requirements:
516      * - Subtraction cannot overflow.
517      *
518      * _Available since v2.4.0._
519      */
520     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
521         require(b <= a, errorMessage);
522         uint256 c = a - b;
523 
524         return c;
525     }
526 
527     /**
528      * @dev Returns the multiplication of two unsigned integers, reverting on
529      * overflow.
530      *
531      * Counterpart to Solidity's `*` operator.
532      *
533      * Requirements:
534      * - Multiplication cannot overflow.
535      */
536     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
537         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
538         // benefit is lost if 'b' is also tested.
539         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
540         if (a == 0) {
541             return 0;
542         }
543 
544         uint256 c = a * b;
545         require(c / a == b, "SafeMath: multiplication overflow");
546 
547         return c;
548     }
549 
550     /**
551      * @dev Returns the integer division of two unsigned integers. Reverts on
552      * division by zero. The result is rounded towards zero.
553      *
554      * Counterpart to Solidity's `/` operator. Note: this function uses a
555      * `revert` opcode (which leaves remaining gas untouched) while Solidity
556      * uses an invalid opcode to revert (consuming all remaining gas).
557      *
558      * Requirements:
559      * - The divisor cannot be zero.
560      */
561     function div(uint256 a, uint256 b) internal pure returns (uint256) {
562         return div(a, b, "SafeMath: division by zero");
563     }
564 
565     /**
566      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
567      * division by zero. The result is rounded towards zero.
568      *
569      * Counterpart to Solidity's `/` operator. Note: this function uses a
570      * `revert` opcode (which leaves remaining gas untouched) while Solidity
571      * uses an invalid opcode to revert (consuming all remaining gas).
572      *
573      * Requirements:
574      * - The divisor cannot be zero.
575      *
576      * _Available since v2.4.0._
577      */
578     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
579         // Solidity only automatically asserts when dividing by 0
580         require(b > 0, errorMessage);
581         uint256 c = a / b;
582         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
583 
584         return c;
585     }
586 
587     /**
588      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
589      * Reverts when dividing by zero.
590      *
591      * Counterpart to Solidity's `%` operator. This function uses a `revert`
592      * opcode (which leaves remaining gas untouched) while Solidity uses an
593      * invalid opcode to revert (consuming all remaining gas).
594      *
595      * Requirements:
596      * - The divisor cannot be zero.
597      */
598     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
599         return mod(a, b, "SafeMath: modulo by zero");
600     }
601 
602     /**
603      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
604      * Reverts with custom message when dividing by zero.
605      *
606      * Counterpart to Solidity's `%` operator. This function uses a `revert`
607      * opcode (which leaves remaining gas untouched) while Solidity uses an
608      * invalid opcode to revert (consuming all remaining gas).
609      *
610      * Requirements:
611      * - The divisor cannot be zero.
612      *
613      * _Available since v2.4.0._
614      */
615     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
616         require(b != 0, errorMessage);
617         return a % b;
618     }
619 }
620 
621 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
622 
623 pragma solidity ^0.5.0;
624 
625 
626 
627 
628 /**
629  * @dev Implementation of the {IERC20} interface.
630  *
631  * This implementation is agnostic to the way tokens are created. This means
632  * that a supply mechanism has to be added in a derived contract using {_mint}.
633  * For a generic mechanism see {ERC20Mintable}.
634  *
635  * TIP: For a detailed writeup see our guide
636  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
637  * to implement supply mechanisms].
638  *
639  * We have followed general OpenZeppelin guidelines: functions revert instead
640  * of returning `false` on failure. This behavior is nonetheless conventional
641  * and does not conflict with the expectations of ERC20 applications.
642  *
643  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
644  * This allows applications to reconstruct the allowance for all accounts just
645  * by listening to said events. Other implementations of the EIP may not emit
646  * these events, as it isn't required by the specification.
647  *
648  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
649  * functions have been added to mitigate the well-known issues around setting
650  * allowances. See {IERC20-approve}.
651  */
652 contract ERC20 is Context, IERC20 {
653     using SafeMath for uint256;
654 
655     mapping (address => uint256) private _balances;
656 
657     mapping (address => mapping (address => uint256)) private _allowances;
658 
659     uint256 private _totalSupply;
660 
661     /**
662      * @dev See {IERC20-totalSupply}.
663      */
664     function totalSupply() public view returns (uint256) {
665         return _totalSupply;
666     }
667 
668     /**
669      * @dev See {IERC20-balanceOf}.
670      */
671     function balanceOf(address account) public view returns (uint256) {
672         return _balances[account];
673     }
674 
675     /**
676      * @dev See {IERC20-transfer}.
677      *
678      * Requirements:
679      *
680      * - `recipient` cannot be the zero address.
681      * - the caller must have a balance of at least `amount`.
682      */
683     function transfer(address recipient, uint256 amount) public returns (bool) {
684         _transfer(_msgSender(), recipient, amount);
685         return true;
686     }
687 
688     /**
689      * @dev See {IERC20-allowance}.
690      */
691     function allowance(address owner, address spender) public view returns (uint256) {
692         return _allowances[owner][spender];
693     }
694 
695     /**
696      * @dev See {IERC20-approve}.
697      *
698      * Requirements:
699      *
700      * - `spender` cannot be the zero address.
701      */
702     function approve(address spender, uint256 amount) public returns (bool) {
703         _approve(_msgSender(), spender, amount);
704         return true;
705     }
706 
707     /**
708      * @dev See {IERC20-transferFrom}.
709      *
710      * Emits an {Approval} event indicating the updated allowance. This is not
711      * required by the EIP. See the note at the beginning of {ERC20};
712      *
713      * Requirements:
714      * - `sender` and `recipient` cannot be the zero address.
715      * - `sender` must have a balance of at least `amount`.
716      * - the caller must have allowance for `sender`'s tokens of at least
717      * `amount`.
718      */
719     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
720         _transfer(sender, recipient, amount);
721         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
722         return true;
723     }
724 
725     /**
726      * @dev Atomically increases the allowance granted to `spender` by the caller.
727      *
728      * This is an alternative to {approve} that can be used as a mitigation for
729      * problems described in {IERC20-approve}.
730      *
731      * Emits an {Approval} event indicating the updated allowance.
732      *
733      * Requirements:
734      *
735      * - `spender` cannot be the zero address.
736      */
737     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
738         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
739         return true;
740     }
741 
742     /**
743      * @dev Atomically decreases the allowance granted to `spender` by the caller.
744      *
745      * This is an alternative to {approve} that can be used as a mitigation for
746      * problems described in {IERC20-approve}.
747      *
748      * Emits an {Approval} event indicating the updated allowance.
749      *
750      * Requirements:
751      *
752      * - `spender` cannot be the zero address.
753      * - `spender` must have allowance for the caller of at least
754      * `subtractedValue`.
755      */
756     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
757         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
758         return true;
759     }
760 
761     /**
762      * @dev Moves tokens `amount` from `sender` to `recipient`.
763      *
764      * This is internal function is equivalent to {transfer}, and can be used to
765      * e.g. implement automatic token fees, slashing mechanisms, etc.
766      *
767      * Emits a {Transfer} event.
768      *
769      * Requirements:
770      *
771      * - `sender` cannot be the zero address.
772      * - `recipient` cannot be the zero address.
773      * - `sender` must have a balance of at least `amount`.
774      */
775     function _transfer(address sender, address recipient, uint256 amount) internal {
776         require(sender != address(0), "ERC20: transfer from the zero address");
777         require(recipient != address(0), "ERC20: transfer to the zero address");
778 
779         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
780         _balances[recipient] = _balances[recipient].add(amount);
781         emit Transfer(sender, recipient, amount);
782     }
783 
784     /** @dev Creates `amount` tokens and assigns them to `account`, increasing
785      * the total supply.
786      *
787      * Emits a {Transfer} event with `from` set to the zero address.
788      *
789      * Requirements
790      *
791      * - `to` cannot be the zero address.
792      */
793     function _mint(address account, uint256 amount) internal {
794         require(account != address(0), "ERC20: mint to the zero address");
795 
796         _totalSupply = _totalSupply.add(amount);
797         _balances[account] = _balances[account].add(amount);
798         emit Transfer(address(0), account, amount);
799     }
800 
801      /**
802      * @dev Destroys `amount` tokens from `account`, reducing the
803      * total supply.
804      *
805      * Emits a {Transfer} event with `to` set to the zero address.
806      *
807      * Requirements
808      *
809      * - `account` cannot be the zero address.
810      * - `account` must have at least `amount` tokens.
811      */
812     function _burn(address account, uint256 amount) internal {
813         require(account != address(0), "ERC20: burn from the zero address");
814 
815         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
816         _totalSupply = _totalSupply.sub(amount);
817         emit Transfer(account, address(0), amount);
818     }
819 
820     /**
821      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
822      *
823      * This is internal function is equivalent to `approve`, and can be used to
824      * e.g. set automatic allowances for certain subsystems, etc.
825      *
826      * Emits an {Approval} event.
827      *
828      * Requirements:
829      *
830      * - `owner` cannot be the zero address.
831      * - `spender` cannot be the zero address.
832      */
833     function _approve(address owner, address spender, uint256 amount) internal {
834         require(owner != address(0), "ERC20: approve from the zero address");
835         require(spender != address(0), "ERC20: approve to the zero address");
836 
837         _allowances[owner][spender] = amount;
838         emit Approval(owner, spender, amount);
839     }
840 
841     /**
842      * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
843      * from the caller's allowance.
844      *
845      * See {_burn} and {_approve}.
846      */
847     function _burnFrom(address account, uint256 amount) internal {
848         _burn(account, amount);
849         _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
850     }
851 }
852 
853 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
854 
855 pragma solidity ^0.5.0;
856 
857 
858 
859 /**
860  * @dev Extension of {ERC20} that allows token holders to destroy both their own
861  * tokens and those that they have an allowance for, in a way that can be
862  * recognized off-chain (via event analysis).
863  */
864 contract ERC20Burnable is Context, ERC20 {
865     /**
866      * @dev Destroys `amount` tokens from the caller.
867      *
868      * See {ERC20-_burn}.
869      */
870     function burn(uint256 amount) public {
871         _burn(_msgSender(), amount);
872     }
873 
874     /**
875      * @dev See {ERC20-_burnFrom}.
876      */
877     function burnFrom(address account, uint256 amount) public {
878         _burnFrom(account, amount);
879     }
880 }
881 
882 // File: contracts/controller/DAOToken.sol
883 
884 pragma solidity 0.5.17;
885 
886 
887 
888 
889 
890 /**
891  * @title DAOToken, base on zeppelin contract.
892  * @dev ERC20 compatible token. It is a mintable, burnable token.
893  */
894 
895 contract DAOToken is ERC20, ERC20Burnable, Ownable {
896 
897     string public name;
898     string public symbol;
899     // solhint-disable-next-line const-name-snakecase
900     uint8 public constant decimals = 18;
901     uint256 public cap;
902 
903     /**
904     * @dev Constructor
905     * @param _name - token name
906     * @param _symbol - token symbol
907     * @param _cap - token cap - 0 value means no cap
908     */
909     constructor(string memory _name, string memory _symbol, uint256 _cap)
910     public {
911         name = _name;
912         symbol = _symbol;
913         cap = _cap;
914     }
915 
916     /**
917      * @dev Function to mint tokens
918      * @param _to The address that will receive the minted tokens.
919      * @param _amount The amount of tokens to mint.
920      */
921     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
922         if (cap > 0)
923             require(totalSupply().add(_amount) <= cap);
924         _mint(_to, _amount);
925         return true;
926     }
927 }
928 
929 // File: openzeppelin-solidity/contracts/utils/Address.sol
930 
931 pragma solidity ^0.5.5;
932 
933 /**
934  * @dev Collection of functions related to the address type
935  */
936 library Address {
937     /**
938      * @dev Returns true if `account` is a contract.
939      *
940      * This test is non-exhaustive, and there may be false-negatives: during the
941      * execution of a contract's constructor, its address will be reported as
942      * not containing a contract.
943      *
944      * IMPORTANT: It is unsafe to assume that an address for which this
945      * function returns false is an externally-owned account (EOA) and not a
946      * contract.
947      */
948     function isContract(address account) internal view returns (bool) {
949         // This method relies in extcodesize, which returns 0 for contracts in
950         // construction, since the code is only stored at the end of the
951         // constructor execution.
952 
953         // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
954         // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
955         // for accounts without code, i.e. `keccak256('')`
956         bytes32 codehash;
957         bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
958         // solhint-disable-next-line no-inline-assembly
959         assembly { codehash := extcodehash(account) }
960         return (codehash != 0x0 && codehash != accountHash);
961     }
962 
963     /**
964      * @dev Converts an `address` into `address payable`. Note that this is
965      * simply a type cast: the actual underlying value is not changed.
966      *
967      * _Available since v2.4.0._
968      */
969     function toPayable(address account) internal pure returns (address payable) {
970         return address(uint160(account));
971     }
972 
973     /**
974      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
975      * `recipient`, forwarding all available gas and reverting on errors.
976      *
977      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
978      * of certain opcodes, possibly making contracts go over the 2300 gas limit
979      * imposed by `transfer`, making them unable to receive funds via
980      * `transfer`. {sendValue} removes this limitation.
981      *
982      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
983      *
984      * IMPORTANT: because control is transferred to `recipient`, care must be
985      * taken to not create reentrancy vulnerabilities. Consider using
986      * {ReentrancyGuard} or the
987      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
988      *
989      * _Available since v2.4.0._
990      */
991     function sendValue(address payable recipient, uint256 amount) internal {
992         require(address(this).balance >= amount, "Address: insufficient balance");
993 
994         // solhint-disable-next-line avoid-call-value
995         (bool success, ) = recipient.call.value(amount)("");
996         require(success, "Address: unable to send value, recipient may have reverted");
997     }
998 }
999 
1000 // File: contracts/libs/SafeERC20.sol
1001 
1002 /*
1003 
1004 SafeERC20 by daostack.
1005 The code is based on a fix by SECBIT Team.
1006 
1007 USE WITH CAUTION & NO WARRANTY
1008 
1009 REFERENCE & RELATED READING
1010 - https://github.com/ethereum/solidity/issues/4116
1011 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
1012 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
1013 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
1014 
1015 */
1016 pragma solidity 0.5.17;
1017 
1018 
1019 
1020 library SafeERC20 {
1021     using Address for address;
1022 
1023     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
1024     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
1025     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
1026 
1027     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
1028 
1029         // Must be a contract addr first!
1030         require(_erc20Addr.isContract());
1031 
1032         (bool success, bytes memory returnValue) =
1033         // solhint-disable-next-line avoid-low-level-calls
1034         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
1035         // call return false when something wrong
1036         require(success);
1037         //check return value
1038         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
1039     }
1040 
1041     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
1042 
1043         // Must be a contract addr first!
1044         require(_erc20Addr.isContract());
1045 
1046         (bool success, bytes memory returnValue) =
1047         // solhint-disable-next-line avoid-low-level-calls
1048         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
1049         // call return false when something wrong
1050         require(success);
1051         //check return value
1052         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
1053     }
1054 
1055     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
1056 
1057         // Must be a contract addr first!
1058         require(_erc20Addr.isContract());
1059 
1060         // safeApprove should only be called when setting an initial allowance,
1061         // or when resetting it to zero.
1062         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
1063 
1064         (bool success, bytes memory returnValue) =
1065         // solhint-disable-next-line avoid-low-level-calls
1066         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
1067         // call return false when something wrong
1068         require(success);
1069         //check return value
1070         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
1071     }
1072 }
1073 
1074 // File: contracts/controller/Avatar.sol
1075 
1076 pragma solidity 0.5.17;
1077 
1078 
1079 
1080 
1081 
1082 
1083 
1084 /**
1085  * @title An Avatar holds tokens, reputation and ether for a controller
1086  */
1087 contract Avatar is Ownable {
1088     using SafeERC20 for address;
1089 
1090     string public orgName;
1091     DAOToken public nativeToken;
1092     Reputation public nativeReputation;
1093 
1094     event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
1095     event SendEther(uint256 _amountInWei, address indexed _to);
1096     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
1097     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
1098     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
1099     event ReceiveEther(address indexed _sender, uint256 _value);
1100     event MetaData(string _metaData);
1101 
1102     /**
1103     * @dev the constructor takes organization name, native token and reputation system
1104     and creates an avatar for a controller
1105     */
1106     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
1107         orgName = _orgName;
1108         nativeToken = _nativeToken;
1109         nativeReputation = _nativeReputation;
1110     }
1111 
1112     /**
1113     * @dev enables an avatar to receive ethers
1114     */
1115     function() external payable {
1116         emit ReceiveEther(msg.sender, msg.value);
1117     }
1118 
1119     /**
1120     * @dev perform a generic call to an arbitrary contract
1121     * @param _contract  the contract's address to call
1122     * @param _data ABI-encoded contract call to call `_contract` address.
1123     * @param _value value (ETH) to transfer with the transaction
1124     * @return bool    success or fail
1125     *         bytes - the return bytes of the called contract's function.
1126     */
1127     function genericCall(address _contract, bytes memory _data, uint256 _value)
1128     public
1129     onlyOwner
1130     returns(bool success, bytes memory returnValue) {
1131       // solhint-disable-next-line avoid-call-value
1132         (success, returnValue) = _contract.call.value(_value)(_data);
1133         emit GenericCall(_contract, _data, _value, success);
1134     }
1135 
1136     /**
1137     * @dev send ethers from the avatar's wallet
1138     * @param _amountInWei amount to send in Wei units
1139     * @param _to send the ethers to this address
1140     * @return bool which represents success
1141     */
1142     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
1143         _to.transfer(_amountInWei);
1144         emit SendEther(_amountInWei, _to);
1145         return true;
1146     }
1147 
1148     /**
1149     * @dev external token transfer
1150     * @param _externalToken the token contract
1151     * @param _to the destination address
1152     * @param _value the amount of tokens to transfer
1153     * @return bool which represents success
1154     */
1155     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
1156     public onlyOwner returns(bool)
1157     {
1158         address(_externalToken).safeTransfer(_to, _value);
1159         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
1160         return true;
1161     }
1162 
1163     /**
1164     * @dev external token transfer from a specific account
1165     * @param _externalToken the token contract
1166     * @param _from the account to spend token from
1167     * @param _to the destination address
1168     * @param _value the amount of tokens to transfer
1169     * @return bool which represents success
1170     */
1171     function externalTokenTransferFrom(
1172         IERC20 _externalToken,
1173         address _from,
1174         address _to,
1175         uint256 _value
1176     )
1177     public onlyOwner returns(bool)
1178     {
1179         address(_externalToken).safeTransferFrom(_from, _to, _value);
1180         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
1181         return true;
1182     }
1183 
1184     /**
1185     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1186     *      on behalf of msg.sender.
1187     * @param _externalToken the address of the Token Contract
1188     * @param _spender address
1189     * @param _value the amount of ether (in Wei) which the approval is referring to.
1190     * @return bool which represents a success
1191     */
1192     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
1193     public onlyOwner returns(bool)
1194     {
1195         address(_externalToken).safeApprove(_spender, _value);
1196         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
1197         return true;
1198     }
1199 
1200     /**
1201     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1202     * @param _metaData a string representing a hash of the meta data
1203     * @return bool which represents a success
1204     */
1205     function metaData(string memory _metaData) public onlyOwner returns(bool) {
1206         emit MetaData(_metaData);
1207         return true;
1208     }
1209 
1210 
1211 }
1212 
1213 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
1214 
1215 pragma solidity 0.5.17;
1216 
1217 
1218 contract UniversalSchemeInterface {
1219 
1220     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
1221     
1222 }
1223 
1224 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
1225 
1226 pragma solidity 0.5.17;
1227 
1228 
1229 contract GlobalConstraintInterface {
1230 
1231     enum CallPhase { Pre, Post, PreAndPost }
1232 
1233     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
1234     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
1235     /**
1236      * @dev when return if this globalConstraints is pre, post or both.
1237      * @return CallPhase enum indication  Pre, Post or PreAndPost.
1238      */
1239     function when() public returns(CallPhase);
1240 }
1241 
1242 // File: contracts/controller/Controller.sol
1243 
1244 pragma solidity 0.5.17;
1245 
1246 
1247 
1248 /**
1249  * @title Controller contract
1250  * @dev A controller controls the organizations tokens, reputation and avatar.
1251  * It is subject to a set of schemes and constraints that determine its behavior.
1252  * Each scheme has it own parameters and operation permissions.
1253  */
1254 contract Controller {
1255 
1256     struct Scheme {
1257         bytes32 paramsHash;  // a hash "configuration" of the scheme
1258         bytes4  permissions; // A bitwise flags of permissions,
1259                              // All 0: Not registered,
1260                              // 1st bit: Flag if the scheme is registered,
1261                              // 2nd bit: Scheme can register other schemes
1262                              // 3rd bit: Scheme can add/remove global constraints
1263                              // 4th bit: Scheme can upgrade the controller
1264                              // 5th bit: Scheme can call genericCall on behalf of
1265                              //          the organization avatar
1266     }
1267 
1268     struct GlobalConstraint {
1269         address gcAddress;
1270         bytes32 params;
1271     }
1272 
1273     struct GlobalConstraintRegister {
1274         bool isRegistered; //is registered
1275         uint256 index;    //index at globalConstraints
1276     }
1277 
1278     mapping(address=>Scheme) public schemes;
1279 
1280     Avatar public avatar;
1281     DAOToken public nativeToken;
1282     Reputation public nativeReputation;
1283   // newController will point to the new controller after the present controller is upgraded
1284     address public newController;
1285   // globalConstraintsPre that determine pre conditions for all actions on the controller
1286 
1287     GlobalConstraint[] public globalConstraintsPre;
1288   // globalConstraintsPost that determine post conditions for all actions on the controller
1289     GlobalConstraint[] public globalConstraintsPost;
1290   // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint
1291     mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;
1292   // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint
1293     mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;
1294 
1295     event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);
1296     event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);
1297     event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);
1298     event RegisterScheme (address indexed _sender, address indexed _scheme);
1299     event UnregisterScheme (address indexed _sender, address indexed _scheme);
1300     event UpgradeController(address indexed _oldController, address _newController);
1301 
1302     event AddGlobalConstraint(
1303         address indexed _globalConstraint,
1304         bytes32 _params,
1305         GlobalConstraintInterface.CallPhase _when);
1306 
1307     event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);
1308 
1309     constructor( Avatar _avatar) public {
1310         avatar = _avatar;
1311         nativeToken = avatar.nativeToken();
1312         nativeReputation = avatar.nativeReputation();
1313         schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});
1314         emit RegisterScheme (msg.sender, msg.sender);
1315     }
1316 
1317   // Do not allow mistaken calls:
1318    // solhint-disable-next-line payable-fallback
1319     function() external {
1320         revert();
1321     }
1322 
1323   // Modifiers:
1324     modifier onlyRegisteredScheme() {
1325         require(schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));
1326         _;
1327     }
1328 
1329     modifier onlyRegisteringSchemes() {
1330         require(schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));
1331         _;
1332     }
1333 
1334     modifier onlyGlobalConstraintsScheme() {
1335         require(schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));
1336         _;
1337     }
1338 
1339     modifier onlyUpgradingScheme() {
1340         require(schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));
1341         _;
1342     }
1343 
1344     modifier onlyGenericCallScheme() {
1345         require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));
1346         _;
1347     }
1348 
1349     modifier onlyMetaDataScheme() {
1350         require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));
1351         _;
1352     }
1353 
1354     modifier onlySubjectToConstraint(bytes32 func) {
1355         uint256 idx;
1356         for (idx = 0; idx < globalConstraintsPre.length; idx++) {
1357             require(
1358             (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
1359             .pre(msg.sender, globalConstraintsPre[idx].params, func));
1360         }
1361         _;
1362         for (idx = 0; idx < globalConstraintsPost.length; idx++) {
1363             require(
1364             (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
1365             .post(msg.sender, globalConstraintsPost[idx].params, func));
1366         }
1367     }
1368 
1369     modifier isAvatarValid(address _avatar) {
1370         require(_avatar == address(avatar));
1371         _;
1372     }
1373 
1374     /**
1375      * @dev Mint `_amount` of reputation that are assigned to `_to` .
1376      * @param  _amount amount of reputation to mint
1377      * @param _to beneficiary address
1378      * @return bool which represents a success
1379      */
1380     function mintReputation(uint256 _amount, address _to, address _avatar)
1381     external
1382     onlyRegisteredScheme
1383     onlySubjectToConstraint("mintReputation")
1384     isAvatarValid(_avatar)
1385     returns(bool)
1386     {
1387         emit MintReputation(msg.sender, _to, _amount);
1388         return nativeReputation.mint(_to, _amount);
1389     }
1390 
1391     /**
1392      * @dev Burns `_amount` of reputation from `_from`
1393      * @param _amount amount of reputation to burn
1394      * @param _from The address that will lose the reputation
1395      * @return bool which represents a success
1396      */
1397     function burnReputation(uint256 _amount, address _from, address _avatar)
1398     external
1399     onlyRegisteredScheme
1400     onlySubjectToConstraint("burnReputation")
1401     isAvatarValid(_avatar)
1402     returns(bool)
1403     {
1404         emit BurnReputation(msg.sender, _from, _amount);
1405         return nativeReputation.burn(_from, _amount);
1406     }
1407 
1408     /**
1409      * @dev mint tokens .
1410      * @param  _amount amount of token to mint
1411      * @param _beneficiary beneficiary address
1412      * @return bool which represents a success
1413      */
1414     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1415     external
1416     onlyRegisteredScheme
1417     onlySubjectToConstraint("mintTokens")
1418     isAvatarValid(_avatar)
1419     returns(bool)
1420     {
1421         emit MintTokens(msg.sender, _beneficiary, _amount);
1422         return nativeToken.mint(_beneficiary, _amount);
1423     }
1424 
1425   /**
1426    * @dev register a scheme
1427    * @param _scheme the address of the scheme
1428    * @param _paramsHash a hashed configuration of the usage of the scheme
1429    * @param _permissions the permissions the new scheme will have
1430    * @return bool which represents a success
1431    */
1432     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1433     external
1434     onlyRegisteringSchemes
1435     onlySubjectToConstraint("registerScheme")
1436     isAvatarValid(_avatar)
1437     returns(bool)
1438     {
1439 
1440         Scheme memory scheme = schemes[_scheme];
1441 
1442     // Check scheme has at least the permissions it is changing, and at least the current permissions:
1443     // Implementation is a bit messy. One must recall logic-circuits ^^
1444 
1445     // produces non-zero if sender does not have all of the perms that are changing between old and new
1446         require(bytes4(0x0000001f)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));
1447 
1448     // produces non-zero if sender does not have all of the perms in the old scheme
1449         require(bytes4(0x0000001f)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));
1450 
1451     // Add or change the scheme:
1452         schemes[_scheme].paramsHash = _paramsHash;
1453         schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
1454         emit RegisterScheme(msg.sender, _scheme);
1455         return true;
1456     }
1457 
1458     /**
1459      * @dev unregister a scheme
1460      * @param _scheme the address of the scheme
1461      * @return bool which represents a success
1462      */
1463     function unregisterScheme( address _scheme, address _avatar)
1464     external
1465     onlyRegisteringSchemes
1466     onlySubjectToConstraint("unregisterScheme")
1467     isAvatarValid(_avatar)
1468     returns(bool)
1469     {
1470     //check if the scheme is registered
1471         if (_isSchemeRegistered(_scheme) == false) {
1472             return false;
1473         }
1474     // Check the unregistering scheme has enough permissions:
1475         require(bytes4(0x0000001f)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));
1476 
1477     // Unregister:
1478         emit UnregisterScheme(msg.sender, _scheme);
1479         delete schemes[_scheme];
1480         return true;
1481     }
1482 
1483     /**
1484      * @dev unregister the caller's scheme
1485      * @return bool which represents a success
1486      */
1487     function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {
1488         if (_isSchemeRegistered(msg.sender) == false) {
1489             return false;
1490         }
1491         delete schemes[msg.sender];
1492         emit UnregisterScheme(msg.sender, msg.sender);
1493         return true;
1494     }
1495 
1496     /**
1497      * @dev add or update Global Constraint
1498      * @param _globalConstraint the address of the global constraint to be added.
1499      * @param _params the constraint parameters hash.
1500      * @return bool which represents a success
1501      */
1502     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1503     external
1504     onlyGlobalConstraintsScheme
1505     isAvatarValid(_avatar)
1506     returns(bool)
1507     {
1508         GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();
1509         if ((when == GlobalConstraintInterface.CallPhase.Pre)||
1510             (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
1511             if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
1512                 globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
1513                 globalConstraintsRegisterPre[_globalConstraint] =
1514                 GlobalConstraintRegister(true, globalConstraintsPre.length-1);
1515             }else {
1516                 globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
1517             }
1518         }
1519         if ((when == GlobalConstraintInterface.CallPhase.Post)||
1520             (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
1521             if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
1522                 globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
1523                 globalConstraintsRegisterPost[_globalConstraint] =
1524                 GlobalConstraintRegister(true, globalConstraintsPost.length-1);
1525             }else {
1526                 globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
1527             }
1528         }
1529         emit AddGlobalConstraint(_globalConstraint, _params, when);
1530         return true;
1531     }
1532 
1533     /**
1534      * @dev remove Global Constraint
1535      * @param _globalConstraint the address of the global constraint to be remove.
1536      * @return bool which represents a success
1537      */
1538      // solhint-disable-next-line code-complexity
1539     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1540     external
1541     onlyGlobalConstraintsScheme
1542     isAvatarValid(_avatar)
1543     returns(bool)
1544     {
1545         GlobalConstraintRegister memory globalConstraintRegister;
1546         GlobalConstraint memory globalConstraint;
1547         GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();
1548         bool retVal = false;
1549 
1550         if ((when == GlobalConstraintInterface.CallPhase.Pre)||
1551             (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
1552             globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];
1553             if (globalConstraintRegister.isRegistered) {
1554                 if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
1555                     globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
1556                     globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
1557                     globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
1558                 }
1559                 globalConstraintsPre.length--;
1560                 delete globalConstraintsRegisterPre[_globalConstraint];
1561                 retVal = true;
1562             }
1563         }
1564         if ((when == GlobalConstraintInterface.CallPhase.Post)||
1565             (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
1566             globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];
1567             if (globalConstraintRegister.isRegistered) {
1568                 if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
1569                     globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
1570                     globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
1571                     globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
1572                 }
1573                 globalConstraintsPost.length--;
1574                 delete globalConstraintsRegisterPost[_globalConstraint];
1575                 retVal = true;
1576             }
1577         }
1578         if (retVal) {
1579             emit RemoveGlobalConstraint(
1580             _globalConstraint,
1581             globalConstraintRegister.index,
1582             when == GlobalConstraintInterface.CallPhase.Pre
1583             );
1584         }
1585         return retVal;
1586     }
1587 
1588   /**
1589     * @dev upgrade the Controller
1590     *      The function will trigger an event 'UpgradeController'.
1591     * @param  _newController the address of the new controller.
1592     * @return bool which represents a success
1593     */
1594     function upgradeController(address _newController, Avatar _avatar)
1595     external
1596     onlyUpgradingScheme
1597     isAvatarValid(address(_avatar))
1598     returns(bool)
1599     {
1600         require(newController == address(0));   // so the upgrade could be done once for a contract.
1601         require(_newController != address(0));
1602         newController = _newController;
1603         avatar.transferOwnership(_newController);
1604         require(avatar.owner() == _newController);
1605         if (nativeToken.owner() == address(this)) {
1606             nativeToken.transferOwnership(_newController);
1607             require(nativeToken.owner() == _newController);
1608         }
1609         if (nativeReputation.owner() == address(this)) {
1610             nativeReputation.transferOwnership(_newController);
1611             require(nativeReputation.owner() == _newController);
1612         }
1613         emit UpgradeController(address(this), newController);
1614         return true;
1615     }
1616 
1617     /**
1618     * @dev perform a generic call to an arbitrary contract
1619     * @param _contract  the contract's address to call
1620     * @param _data ABI-encoded contract call to call `_contract` address.
1621     * @param _avatar the controller's avatar address
1622     * @param _value value (ETH) to transfer with the transaction
1623     * @return bool -success
1624     *         bytes  - the return value of the called _contract's function.
1625     */
1626     function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)
1627     external
1628     onlyGenericCallScheme
1629     onlySubjectToConstraint("genericCall")
1630     isAvatarValid(address(_avatar))
1631     returns (bool, bytes memory)
1632     {
1633         return avatar.genericCall(_contract, _data, _value);
1634     }
1635 
1636   /**
1637    * @dev send some ether
1638    * @param _amountInWei the amount of ether (in Wei) to send
1639    * @param _to address of the beneficiary
1640    * @return bool which represents a success
1641    */
1642     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1643     external
1644     onlyRegisteredScheme
1645     onlySubjectToConstraint("sendEther")
1646     isAvatarValid(address(_avatar))
1647     returns(bool)
1648     {
1649         return avatar.sendEther(_amountInWei, _to);
1650     }
1651 
1652     /**
1653     * @dev send some amount of arbitrary ERC20 Tokens
1654     * @param _externalToken the address of the Token Contract
1655     * @param _to address of the beneficiary
1656     * @param _value the amount of ether (in Wei) to send
1657     * @return bool which represents a success
1658     */
1659     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1660     external
1661     onlyRegisteredScheme
1662     onlySubjectToConstraint("externalTokenTransfer")
1663     isAvatarValid(address(_avatar))
1664     returns(bool)
1665     {
1666         return avatar.externalTokenTransfer(_externalToken, _to, _value);
1667     }
1668 
1669     /**
1670     * @dev transfer token "from" address "to" address
1671     *      One must to approve the amount of tokens which can be spend from the
1672     *      "from" account.This can be done using externalTokenApprove.
1673     * @param _externalToken the address of the Token Contract
1674     * @param _from address of the account to send from
1675     * @param _to address of the beneficiary
1676     * @param _value the amount of ether (in Wei) to send
1677     * @return bool which represents a success
1678     */
1679     function externalTokenTransferFrom(
1680     IERC20 _externalToken,
1681     address _from,
1682     address _to,
1683     uint256 _value,
1684     Avatar _avatar)
1685     external
1686     onlyRegisteredScheme
1687     onlySubjectToConstraint("externalTokenTransferFrom")
1688     isAvatarValid(address(_avatar))
1689     returns(bool)
1690     {
1691         return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);
1692     }
1693 
1694     /**
1695     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1696     *      on behalf of msg.sender.
1697     * @param _externalToken the address of the Token Contract
1698     * @param _spender address
1699     * @param _value the amount of ether (in Wei) which the approval is referring to.
1700     * @return bool which represents a success
1701     */
1702     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1703     external
1704     onlyRegisteredScheme
1705     onlySubjectToConstraint("externalTokenIncreaseApproval")
1706     isAvatarValid(address(_avatar))
1707     returns(bool)
1708     {
1709         return avatar.externalTokenApproval(_externalToken, _spender, _value);
1710     }
1711 
1712     /**
1713     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1714     * @param _metaData a string representing a hash of the meta data
1715     * @param _avatar Avatar
1716     * @return bool which represents a success
1717     */
1718     function metaData(string calldata _metaData, Avatar _avatar)
1719         external
1720         onlyMetaDataScheme
1721         isAvatarValid(address(_avatar))
1722         returns(bool)
1723         {
1724         return avatar.metaData(_metaData);
1725     }
1726 
1727     /**
1728      * @dev getNativeReputation
1729      * @param _avatar the organization avatar.
1730      * @return organization native reputation
1731      */
1732     function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {
1733         return address(nativeReputation);
1734     }
1735 
1736     function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {
1737         return _isSchemeRegistered(_scheme);
1738     }
1739 
1740     function getSchemeParameters(address _scheme, address _avatar)
1741     external
1742     isAvatarValid(_avatar)
1743     view
1744     returns(bytes32)
1745     {
1746         return schemes[_scheme].paramsHash;
1747     }
1748 
1749     function getSchemePermissions(address _scheme, address _avatar)
1750     external
1751     isAvatarValid(_avatar)
1752     view
1753     returns(bytes4)
1754     {
1755         return schemes[_scheme].permissions;
1756     }
1757 
1758     function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {
1759 
1760         GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];
1761 
1762         if (register.isRegistered) {
1763             return globalConstraintsPre[register.index].params;
1764         }
1765 
1766         register = globalConstraintsRegisterPost[_globalConstraint];
1767 
1768         if (register.isRegistered) {
1769             return globalConstraintsPost[register.index].params;
1770         }
1771     }
1772 
1773    /**
1774     * @dev globalConstraintsCount return the global constraint pre and post count
1775     * @return uint256 globalConstraintsPre count.
1776     * @return uint256 globalConstraintsPost count.
1777     */
1778     function globalConstraintsCount(address _avatar)
1779         external
1780         isAvatarValid(_avatar)
1781         view
1782         returns(uint, uint)
1783         {
1784         return (globalConstraintsPre.length, globalConstraintsPost.length);
1785     }
1786 
1787     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)
1788         external
1789         isAvatarValid(_avatar)
1790         view
1791         returns(bool)
1792         {
1793         return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||
1794                 globalConstraintsRegisterPost[_globalConstraint].isRegistered);
1795     }
1796 
1797     function _isSchemeRegistered(address _scheme) private view returns(bool) {
1798         return (schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));
1799     }
1800 }
1801 
1802 // File: contracts/universalSchemes/UniversalScheme.sol
1803 
1804 pragma solidity 0.5.17;
1805 
1806 
1807 
1808 
1809 
1810 contract UniversalScheme is UniversalSchemeInterface {
1811     /**
1812     *  @dev get the parameters for the current scheme from the controller
1813     */
1814     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1815         require(Controller(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1816         "scheme is not registered");
1817         return Controller(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1818     }
1819 }
1820 
1821 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1822 
1823 pragma solidity ^0.5.0;
1824 
1825 /**
1826  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
1827  *
1828  * These functions can be used to verify that a message was signed by the holder
1829  * of the private keys of a given address.
1830  */
1831 library ECDSA {
1832     /**
1833      * @dev Returns the address that signed a hashed message (`hash`) with
1834      * `signature`. This address can then be used for verification purposes.
1835      *
1836      * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
1837      * this function rejects them by requiring the `s` value to be in the lower
1838      * half order, and the `v` value to be either 27 or 28.
1839      *
1840      * NOTE: This call _does not revert_ if the signature is invalid, or
1841      * if the signer is otherwise unable to be retrieved. In those scenarios,
1842      * the zero address is returned.
1843      *
1844      * IMPORTANT: `hash` _must_ be the result of a hash operation for the
1845      * verification to be secure: it is possible to craft signatures that
1846      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
1847      * this is by receiving a hash of the original message (which may otherwise
1848      * be too long), and then calling {toEthSignedMessageHash} on it.
1849      */
1850     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1851         // Check the signature length
1852         if (signature.length != 65) {
1853             return (address(0));
1854         }
1855 
1856         // Divide the signature in r, s and v variables
1857         bytes32 r;
1858         bytes32 s;
1859         uint8 v;
1860 
1861         // ecrecover takes the signature parameters, and the only way to get them
1862         // currently is to use assembly.
1863         // solhint-disable-next-line no-inline-assembly
1864         assembly {
1865             r := mload(add(signature, 0x20))
1866             s := mload(add(signature, 0x40))
1867             v := byte(0, mload(add(signature, 0x60)))
1868         }
1869 
1870         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
1871         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
1872         // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
1873         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
1874         //
1875         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
1876         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
1877         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
1878         // these malleable signatures as well.
1879         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
1880             return address(0);
1881         }
1882 
1883         if (v != 27 && v != 28) {
1884             return address(0);
1885         }
1886 
1887         // If the signature is valid (and not malleable), return the signer address
1888         return ecrecover(hash, v, r, s);
1889     }
1890 
1891     /**
1892      * @dev Returns an Ethereum Signed Message, created from a `hash`. This
1893      * replicates the behavior of the
1894      * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]
1895      * JSON-RPC method.
1896      *
1897      * See {recover}.
1898      */
1899     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1900         // 32 is the length in bytes of hash,
1901         // enforced by the type signature above
1902         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1903     }
1904 }
1905 
1906 // File: @daostack/infra/contracts/libs/RealMath.sol
1907 
1908 pragma solidity 0.5.17;
1909 
1910 /**
1911  * RealMath: fixed-point math library, based on fractional and integer parts.
1912  * Using uint256 as real216x40, which isn't in Solidity yet.
1913  * Internally uses the wider uint256 for some math.
1914  *
1915  * Note that for addition, subtraction, and mod (%), you should just use the
1916  * built-in Solidity operators. Functions for these operations are not provided.
1917  *
1918  */
1919 
1920 
1921 library RealMath {
1922 
1923     /**
1924      * How many total bits are there?
1925      */
1926     uint256 constant private REAL_BITS = 256;
1927 
1928     /**
1929      * How many fractional bits are there?
1930      */
1931     uint256 constant private REAL_FBITS = 40;
1932 
1933     /**
1934      * What's the first non-fractional bit
1935      */
1936     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1937 
1938     /**
1939      * Raise a real number to any positive integer power
1940      */
1941     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1942 
1943         uint256 tempRealBase = realBase;
1944         uint256 tempExponent = exponent;
1945 
1946         // Start with the 0th power
1947         uint256 realResult = REAL_ONE;
1948         while (tempExponent != 0) {
1949             // While there are still bits set
1950             if ((tempExponent & 0x1) == 0x1) {
1951                 // If the low bit is set, multiply in the (many-times-squared) base
1952                 realResult = mul(realResult, tempRealBase);
1953             }
1954                 // Shift off the low bit
1955             tempExponent = tempExponent >> 1;
1956             if (tempExponent != 0) {
1957                 // Do the squaring
1958                 tempRealBase = mul(tempRealBase, tempRealBase);
1959             }
1960         }
1961 
1962         // Return the final result.
1963         return realResult;
1964     }
1965 
1966     /**
1967      * Create a real from a rational fraction.
1968      */
1969     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1970         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1971     }
1972 
1973     /**
1974      * Multiply one real by another. Truncates overflows.
1975      */
1976     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1977         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1978         // So we just have to clip off the extra REAL_FBITS fractional bits.
1979         uint256 res = realA * realB;
1980         require(res/realA == realB, "RealMath mul overflow");
1981         return (res >> REAL_FBITS);
1982     }
1983 
1984     /**
1985      * Divide one real by another real. Truncates overflows.
1986      */
1987     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1988         // We use the reverse of the multiplication trick: convert numerator from
1989         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1990         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1991     }
1992 
1993 }
1994 
1995 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
1996 
1997 pragma solidity 0.5.17;
1998 
1999 interface ProposalExecuteInterface {
2000     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
2001 }
2002 
2003 // File: openzeppelin-solidity/contracts/math/Math.sol
2004 
2005 pragma solidity ^0.5.0;
2006 
2007 /**
2008  * @dev Standard math utilities missing in the Solidity language.
2009  */
2010 library Math {
2011     /**
2012      * @dev Returns the largest of two numbers.
2013      */
2014     function max(uint256 a, uint256 b) internal pure returns (uint256) {
2015         return a >= b ? a : b;
2016     }
2017 
2018     /**
2019      * @dev Returns the smallest of two numbers.
2020      */
2021     function min(uint256 a, uint256 b) internal pure returns (uint256) {
2022         return a < b ? a : b;
2023     }
2024 
2025     /**
2026      * @dev Returns the average of two numbers. The result is rounded towards
2027      * zero.
2028      */
2029     function average(uint256 a, uint256 b) internal pure returns (uint256) {
2030         // (a + b) / 2 can overflow, so we distribute
2031         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
2032     }
2033 }
2034 
2035 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
2036 
2037 pragma solidity 0.5.17;
2038 
2039 
2040 
2041 
2042 
2043 
2044 
2045 
2046 
2047 
2048 
2049 /**
2050  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2051  */
2052 contract GenesisProtocolLogic is IntVoteInterface {
2053     using SafeMath for uint256;
2054     using Math for uint256;
2055     using RealMath for uint216;
2056     using RealMath for uint256;
2057     using Address for address;
2058 
2059     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
2060     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
2061 
2062     //Organization's parameters
2063     struct Parameters {
2064         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
2065         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
2066         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
2067         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
2068                                           //to be in an preparation state (stable) before boosted.
2069         uint256 thresholdConst; //constant  for threshold calculation .
2070                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
2071         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
2072                                    //in the threshold calculation to prevent overflow
2073         uint256 quietEndingPeriod; //quite ending period
2074         uint256 proposingRepReward;//proposer reputation reward.
2075         uint256 votersReputationLossRatio;//Unsuccessful pre booster
2076                                           //voters lose votersReputationLossRatio% of their reputation.
2077         uint256 minimumDaoBounty;
2078         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
2079                                //(daoBountyConst * averageBoostDownstakes)/100 .
2080         uint256 activationTime;//the point in time after which proposals can be created.
2081         //if this address is set so only this address is allowed to vote of behalf of someone else.
2082         address voteOnBehalf;
2083     }
2084 
2085     struct Voter {
2086         uint256 vote; // YES(1) ,NO(2)
2087         uint256 reputation; // amount of voter's reputation
2088         bool preBoosted;
2089     }
2090 
2091     struct Staker {
2092         uint256 vote; // YES(1) ,NO(2)
2093         uint256 amount; // amount of staker's stake
2094         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
2095     }
2096 
2097     struct Proposal {
2098         bytes32 organizationId; // the organization unique identifier the proposal is target to.
2099         address callbacks;    // should fulfill voting callbacks interface.
2100         ProposalState state;
2101         uint256 winningVote; //the winning vote.
2102         address proposer;
2103         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
2104         uint256 currentBoostedVotePeriodLimit;
2105         bytes32 paramsHash;
2106         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
2107         uint256 daoBounty;
2108         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
2109         uint256 confidenceThreshold;
2110         uint256 secondsFromTimeOutTillExecuteBoosted;
2111         uint[3] times; //times[0] - submittedTime
2112                        //times[1] - boostedPhaseTime
2113                        //times[2] -preBoostedPhaseTime;
2114         bool daoRedeemItsWinnings;
2115         //      vote      reputation
2116         mapping(uint256   =>  uint256    ) votes;
2117         //      vote      reputation
2118         mapping(uint256   =>  uint256    ) preBoostedVotes;
2119         //      address     voter
2120         mapping(address =>  Voter    ) voters;
2121         //      vote        stakes
2122         mapping(uint256   =>  uint256    ) stakes;
2123         //      address  staker
2124         mapping(address  => Staker   ) stakers;
2125     }
2126 
2127     event Stake(bytes32 indexed _proposalId,
2128         address indexed _organization,
2129         address indexed _staker,
2130         uint256 _vote,
2131         uint256 _amount
2132     );
2133 
2134     event Redeem(bytes32 indexed _proposalId,
2135         address indexed _organization,
2136         address indexed _beneficiary,
2137         uint256 _amount
2138     );
2139 
2140     event RedeemDaoBounty(bytes32 indexed _proposalId,
2141         address indexed _organization,
2142         address indexed _beneficiary,
2143         uint256 _amount
2144     );
2145 
2146     event RedeemReputation(bytes32 indexed _proposalId,
2147         address indexed _organization,
2148         address indexed _beneficiary,
2149         uint256 _amount
2150     );
2151 
2152     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
2153     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
2154     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
2155     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
2156 
2157     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
2158     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
2159     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
2160            //organizationId => organization
2161     mapping(bytes32        => address     ) public organizations;
2162           //organizationId => averageBoostDownstakes
2163     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
2164     uint256 constant public NUM_OF_CHOICES = 2;
2165     uint256 constant public NO = 2;
2166     uint256 constant public YES = 1;
2167     uint256 public proposalsCnt; // Total number of proposals
2168     IERC20 public stakingToken;
2169     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
2170     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
2171 
2172     /**
2173      * @dev Constructor
2174      */
2175     constructor(IERC20 _stakingToken) public {
2176       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
2177       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
2178       //If such contract address does not exist in the network (e.g ganache)
2179       //the contract will use the _stakingToken param as the
2180       //staking token address.
2181         if (address(GEN_TOKEN_ADDRESS).isContract()) {
2182             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
2183         } else {
2184             stakingToken = _stakingToken;
2185         }
2186     }
2187 
2188   /**
2189    * @dev Check that the proposal is votable
2190    * a proposal is votable if it is in one of the following states:
2191    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
2192    */
2193     modifier votable(bytes32 _proposalId) {
2194         require(_isVotable(_proposalId), "proposal is not votable");
2195         _;
2196     }
2197 
2198     /**
2199      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
2200      * generated by calculating keccak256 of a incremented counter.
2201      * @param _paramsHash parameters hash
2202      * @param _proposer address
2203      * @param _organization address
2204      */
2205     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
2206         external
2207         returns(bytes32)
2208     {
2209       // solhint-disable-next-line not-rely-on-time
2210         require(now > parameters[_paramsHash].activationTime, "not active yet");
2211         //Check parameters existence.
2212         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50, "no parameters exist");
2213         // Generate a unique ID:
2214         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
2215         proposalsCnt = proposalsCnt.add(1);
2216          // Open proposal:
2217         Proposal memory proposal;
2218         proposal.callbacks = msg.sender;
2219         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
2220 
2221         proposal.state = ProposalState.Queued;
2222         // solhint-disable-next-line not-rely-on-time
2223         proposal.times[0] = now;//submitted time
2224         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
2225         proposal.proposer = _proposer;
2226         proposal.winningVote = NO;
2227         proposal.paramsHash = _paramsHash;
2228         if (organizations[proposal.organizationId] == address(0)) {
2229             if (_organization == address(0)) {
2230                 organizations[proposal.organizationId] = msg.sender;
2231             } else {
2232                 organizations[proposal.organizationId] = _organization;
2233             }
2234         }
2235         //calc dao bounty
2236         uint256 daoBounty =
2237         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
2238         proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);
2239         proposals[proposalId] = proposal;
2240         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
2241 
2242         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
2243         return proposalId;
2244     }
2245 
2246     /**
2247       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
2248       * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.
2249       * P = t/150, where t is the number of seconds passed since the the proposal's timeout.
2250       * P is capped by 10%.
2251       * @param _proposalId the id of the proposal
2252       * @return uint256 expirationCallBounty the bounty amount for the expiration call
2253      */
2254     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
2255         Proposal storage proposal = proposals[_proposalId];
2256         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
2257         "proposal state in not Boosted nor QuietEndingPeriod");
2258         require(_execute(_proposalId), "proposal need to expire");
2259 
2260         proposal.secondsFromTimeOutTillExecuteBoosted =
2261         // solhint-disable-next-line not-rely-on-time
2262         now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));
2263 
2264         expirationCallBounty = calcExecuteCallBounty(_proposalId);
2265         proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);
2266         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
2267         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
2268     }
2269 
2270     /**
2271      * @dev hash the parameters, save them if necessary, and return the hash value
2272      * @param _params a parameters array
2273      *    _params[0] - _queuedVoteRequiredPercentage,
2274      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
2275      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
2276      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
2277      *                  state (stable) before boosted.
2278      *    _params[4] -_thresholdConst
2279      *    _params[5] -_quietEndingPeriod
2280      *    _params[6] -_proposingRepReward
2281      *    _params[7] -_votersReputationLossRatio
2282      *    _params[8] -_minimumDaoBounty
2283      *    _params[9] -_daoBountyConst
2284      *    _params[10] -_activationTime
2285      * @param _voteOnBehalf - authorized to vote on behalf of others.
2286     */
2287     function setParameters(
2288         uint[11] calldata _params, //use array here due to stack too deep issue.
2289         address _voteOnBehalf
2290     )
2291     external
2292     returns(bytes32)
2293     {
2294         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
2295         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
2296         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
2297         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
2298         require(_params[8] > 0, "minimumDaoBounty should be > 0");
2299         require(_params[9] > 0, "daoBountyConst should be > 0");
2300 
2301         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
2302 
2303         if (parameters[paramsHash].queuedVoteRequiredPercentage > 0) {
2304             //parameters already been set
2305             return paramsHash;
2306         }
2307 
2308         //set a limit for power for a given alpha to prevent overflow
2309         uint256 limitExponent = 172;//for alpha less or equal 2
2310         uint256 j = 2;
2311         for (uint256 i = 2000; i < 16000; i = i*2) {
2312             if ((_params[4] > i) && (_params[4] <= i*2)) {
2313                 limitExponent = limitExponent/j;
2314                 break;
2315             }
2316             j++;
2317         }
2318 
2319         parameters[paramsHash] = Parameters({
2320             queuedVoteRequiredPercentage: _params[0],
2321             queuedVotePeriodLimit: _params[1],
2322             boostedVotePeriodLimit: _params[2],
2323             preBoostedVotePeriodLimit: _params[3],
2324             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
2325             limitExponentValue:limitExponent,
2326             quietEndingPeriod: _params[5],
2327             proposingRepReward: _params[6],
2328             votersReputationLossRatio:_params[7],
2329             minimumDaoBounty:_params[8],
2330             daoBountyConst:_params[9],
2331             activationTime:_params[10],
2332             voteOnBehalf:_voteOnBehalf
2333         });
2334         return paramsHash;
2335     }
2336 
2337     /**
2338      * @dev redeem a reward for a successful stake, vote or proposing.
2339      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
2340      * users to redeem on behalf of someone else.
2341      * @param _proposalId the ID of the proposal
2342      * @param _beneficiary - the beneficiary address
2343      * @return rewards -
2344      *           [0] stakerTokenReward
2345      *           [1] voterReputationReward
2346      *           [2] proposerReputationReward
2347      */
2348      // solhint-disable-next-line function-max-lines,code-complexity
2349     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
2350         Proposal storage proposal = proposals[_proposalId];
2351         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
2352         "Proposal should be Executed or ExpiredInQueue");
2353         Parameters memory params = parameters[proposal.paramsHash];
2354         //as staker
2355         Staker storage staker = proposal.stakers[_beneficiary];
2356         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
2357         uint256 totalStakesLeftAfterCallBounty =
2358         proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));
2359         if (staker.amount > 0) {
2360 
2361             if (proposal.state == ProposalState.ExpiredInQueue) {
2362                 //Stakes of a proposal that expires in Queue are sent back to stakers
2363                 rewards[0] = staker.amount;
2364             } else if (staker.vote == proposal.winningVote) {
2365                 if (staker.vote == YES) {
2366                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
2367                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
2368                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
2369                     }
2370                 } else {
2371                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
2372                 }
2373             }
2374             staker.amount = 0;
2375         }
2376             //dao redeem its winnings
2377         if (proposal.daoRedeemItsWinnings == false &&
2378             _beneficiary == organizations[proposal.organizationId] &&
2379             proposal.state != ProposalState.ExpiredInQueue &&
2380             proposal.winningVote == NO) {
2381             rewards[0] =
2382             rewards[0]
2383             .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)
2384             .sub(proposal.daoBounty);
2385             proposal.daoRedeemItsWinnings = true;
2386         }
2387 
2388         //as voter
2389         Voter storage voter = proposal.voters[_beneficiary];
2390         if ((voter.reputation != 0) && (voter.preBoosted)) {
2391             if (proposal.state == ProposalState.ExpiredInQueue) {
2392               //give back reputation for the voter
2393                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
2394             } else if (proposal.winningVote == voter.vote) {
2395                 uint256 lostReputation;
2396                 if (proposal.winningVote == YES) {
2397                     lostReputation = proposal.preBoostedVotes[NO];
2398                 } else {
2399                     lostReputation = proposal.preBoostedVotes[YES];
2400                 }
2401                 lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
2402                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
2403                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
2404             }
2405             voter.reputation = 0;
2406         }
2407         //as proposer
2408         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
2409             rewards[2] = params.proposingRepReward;
2410             proposal.proposer = address(0);
2411         }
2412         if (rewards[0] != 0) {
2413             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
2414             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
2415             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
2416         }
2417         if (rewards[1].add(rewards[2]) != 0) {
2418             VotingMachineCallbacksInterface(proposal.callbacks)
2419             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
2420             emit RedeemReputation(
2421             _proposalId,
2422             organizations[proposal.organizationId],
2423             _beneficiary,
2424             rewards[1].add(rewards[2])
2425             );
2426         }
2427     }
2428 
2429     /**
2430      * @dev redeemDaoBounty a reward for a successful stake.
2431      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
2432      * users to redeem on behalf of someone else.
2433      * @param _proposalId the ID of the proposal
2434      * @param _beneficiary - the beneficiary address
2435      * @return redeemedAmount - redeem token amount
2436      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
2437      */
2438     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
2439     public
2440     returns(uint256 redeemedAmount, uint256 potentialAmount) {
2441         Proposal storage proposal = proposals[_proposalId];
2442         require(proposal.state == ProposalState.Executed, "proposal state must be executed");
2443         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
2444         Staker storage staker = proposal.stakers[_beneficiary];
2445         if (
2446             (staker.amount4Bounty > 0)&&
2447             (staker.vote == proposal.winningVote)&&
2448             (proposal.winningVote == YES)&&
2449             (totalWinningStakes != 0)) {
2450             //as staker
2451                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
2452             }
2453         if ((potentialAmount != 0)&&
2454             (VotingMachineCallbacksInterface(proposal.callbacks)
2455             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
2456             staker.amount4Bounty = 0;
2457             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
2458             require(
2459             VotingMachineCallbacksInterface(proposal.callbacks)
2460             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId),
2461             "failed at stakingTokenTransfer");
2462             redeemedAmount = potentialAmount;
2463             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
2464         }
2465     }
2466 
2467     /**
2468       * @dev calcExecuteCallBounty calculate the execute boosted call bounty
2469       * @param _proposalId the ID of the proposal
2470       * @return uint256 executeCallBounty
2471     */
2472     function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {
2473         uint maxRewardSeconds = 1500;
2474         uint rewardSeconds =
2475         uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);
2476         return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);
2477     }
2478 
2479     /**
2480      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
2481      * @param _proposalId the ID of the proposal
2482      * @return bool true or false.
2483      */
2484     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
2485         Proposal memory proposal = proposals[_proposalId];
2486         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
2487     }
2488 
2489     /**
2490      * @dev threshold return the organization's score threshold which required by
2491      * a proposal to shift to boosted state.
2492      * This threshold is dynamically set and it depend on the number of boosted proposal.
2493      * @param _organizationId the organization identifier
2494      * @param _paramsHash the organization parameters hash
2495      * @return uint256 organization's score threshold as real number.
2496      */
2497     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
2498         uint256 power = orgBoostedProposalsCnt[_organizationId];
2499         Parameters storage params = parameters[_paramsHash];
2500 
2501         if (power > params.limitExponentValue) {
2502             power = params.limitExponentValue;
2503         }
2504 
2505         return params.thresholdConst.pow(power);
2506     }
2507 
2508   /**
2509    * @dev hashParameters returns a hash of the given parameters
2510    */
2511     function getParametersHash(
2512         uint[11] memory _params,//use array here due to stack too deep issue.
2513         address _voteOnBehalf
2514     )
2515         public
2516         pure
2517         returns(bytes32)
2518         {
2519         //double call to keccak256 to avoid deep stack issue when call with too many params.
2520         return keccak256(
2521             abi.encodePacked(
2522             keccak256(
2523             abi.encodePacked(
2524                 _params[0],
2525                 _params[1],
2526                 _params[2],
2527                 _params[3],
2528                 _params[4],
2529                 _params[5],
2530                 _params[6],
2531                 _params[7],
2532                 _params[8],
2533                 _params[9],
2534                 _params[10])
2535             ),
2536             _voteOnBehalf
2537         ));
2538     }
2539 
2540     /**
2541       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2542       * @param _proposalId the id of the proposal
2543       * @return bool true - the proposal has been executed
2544       *              false - otherwise.
2545      */
2546      // solhint-disable-next-line function-max-lines,code-complexity
2547     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
2548         Proposal storage proposal = proposals[_proposalId];
2549         Parameters memory params = parameters[proposal.paramsHash];
2550         Proposal memory tmpProposal = proposal;
2551         uint256 totalReputation =
2552         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
2553         //first divide by 100 to prevent overflow
2554         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
2555         ExecutionState executionState = ExecutionState.None;
2556         uint256 averageDownstakesOfBoosted;
2557         uint256 confidenceThreshold;
2558 
2559         if (proposal.votes[proposal.winningVote] > executionBar) {
2560          // someone crossed the absolute vote execution bar.
2561             if (proposal.state == ProposalState.Queued) {
2562                 executionState = ExecutionState.QueueBarCrossed;
2563             } else if (proposal.state == ProposalState.PreBoosted) {
2564                 executionState = ExecutionState.PreBoostedBarCrossed;
2565             } else {
2566                 executionState = ExecutionState.BoostedBarCrossed;
2567             }
2568             proposal.state = ProposalState.Executed;
2569         } else {
2570             if (proposal.state == ProposalState.Queued) {
2571                 // solhint-disable-next-line not-rely-on-time
2572                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
2573                     proposal.state = ProposalState.ExpiredInQueue;
2574                     proposal.winningVote = NO;
2575                     executionState = ExecutionState.QueueTimeOut;
2576                 } else {
2577                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
2578                     if (_score(_proposalId) > confidenceThreshold) {
2579                         //change proposal mode to PreBoosted mode.
2580                         proposal.state = ProposalState.PreBoosted;
2581                         // solhint-disable-next-line not-rely-on-time
2582                         proposal.times[2] = now;
2583                         proposal.confidenceThreshold = confidenceThreshold;
2584                     }
2585                 }
2586             }
2587 
2588             if (proposal.state == ProposalState.PreBoosted) {
2589                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
2590               // solhint-disable-next-line not-rely-on-time
2591                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
2592                     if (_score(_proposalId) > confidenceThreshold) {
2593                         if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {
2594                          //change proposal mode to Boosted mode.
2595                             proposal.state = ProposalState.Boosted;
2596                          // solhint-disable-next-line not-rely-on-time
2597                             proposal.times[1] = now;
2598                             orgBoostedProposalsCnt[proposal.organizationId]++;
2599                          //add a value to average -> average = average + ((value - average) / nbValues)
2600                             averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2601                           // solium-disable-next-line indentation
2602                             averagesDownstakesOfBoosted[proposal.organizationId] =
2603                                 uint256(int256(averageDownstakesOfBoosted) +
2604                                 ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
2605                                 int256(orgBoostedProposalsCnt[proposal.organizationId])));
2606                         }
2607                     } else {
2608                         proposal.state = ProposalState.Queued;
2609                     }
2610                 } else { //check the Confidence level is stable
2611                     uint256 proposalScore = _score(_proposalId);
2612                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
2613                         proposal.state = ProposalState.Queued;
2614                     } else if (proposal.confidenceThreshold > proposalScore) {
2615                         proposal.confidenceThreshold = confidenceThreshold;
2616                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
2617                     }
2618                 }
2619             }
2620         }
2621 
2622         if ((proposal.state == ProposalState.Boosted) ||
2623             (proposal.state == ProposalState.QuietEndingPeriod)) {
2624             // solhint-disable-next-line not-rely-on-time
2625             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
2626                 proposal.state = ProposalState.Executed;
2627                 executionState = ExecutionState.BoostedTimeOut;
2628             }
2629         }
2630 
2631         if (executionState != ExecutionState.None) {
2632             if ((executionState == ExecutionState.BoostedTimeOut) ||
2633                 (executionState == ExecutionState.BoostedBarCrossed)) {
2634                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
2635                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
2636                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2637                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2638                 if (boostedProposals == 0) {
2639                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2640                 } else {
2641                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2642                     averagesDownstakesOfBoosted[proposal.organizationId] =
2643                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2644                 }
2645             }
2646             emit ExecuteProposal(
2647             _proposalId,
2648             organizations[proposal.organizationId],
2649             proposal.winningVote,
2650             totalReputation
2651             );
2652             emit GPExecuteProposal(_proposalId, executionState);
2653             proposal.daoBounty = proposal.daoBountyRemain;
2654             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2655         }
2656         if (tmpProposal.state != proposal.state) {
2657             emit StateChange(_proposalId, proposal.state);
2658         }
2659         return (executionState != ExecutionState.None);
2660     }
2661 
2662     /**
2663      * @dev staking function
2664      * @param _proposalId id of the proposal
2665      * @param _vote  NO(2) or YES(1).
2666      * @param _amount the betting amount
2667      * @return bool true - the proposal has been executed
2668      *              false - otherwise.
2669      */
2670     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2671         // 0 is not a valid vote.
2672         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2673         require(_amount > 0, "staking amount should be >0");
2674 
2675         if (_execute(_proposalId)) {
2676             return true;
2677         }
2678         Proposal storage proposal = proposals[_proposalId];
2679 
2680         if ((proposal.state != ProposalState.PreBoosted) &&
2681             (proposal.state != ProposalState.Queued)) {
2682             return false;
2683         }
2684 
2685         // enable to increase stake only on the previous stake vote
2686         Staker storage staker = proposal.stakers[_staker];
2687         if ((staker.amount > 0) && (staker.vote != _vote)) {
2688             return false;
2689         }
2690 
2691         uint256 amount = _amount;
2692         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2693         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2694         staker.amount = staker.amount.add(amount);
2695         //This is to prevent average downstakes calculation overflow
2696         //Note that any how GEN cap is 100000000 ether.
2697         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2698         require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),
2699                 "total stakes is too high");
2700 
2701         if (_vote == YES) {
2702             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2703         }
2704         staker.vote = _vote;
2705 
2706         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2707         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2708         return _execute(_proposalId);
2709     }
2710 
2711     /**
2712      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2713      * @param _proposalId id of the proposal
2714      * @param _voter used in case the vote is cast for someone else
2715      * @param _vote a value between 0 to and the proposal's number of choices.
2716      * @param _rep how many reputation the voter would like to stake for this vote.
2717      *         if  _rep==0 so the voter full reputation will be use.
2718      * @return true in case of proposal execution otherwise false
2719      * throws if proposal is not open or if it has been executed
2720      * NB: executes the proposal if a decision has been reached
2721      */
2722      // solhint-disable-next-line function-max-lines,code-complexity
2723     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2724         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2725         if (_execute(_proposalId)) {
2726             return true;
2727         }
2728 
2729         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2730         Proposal storage proposal = proposals[_proposalId];
2731 
2732         // Check voter has enough reputation:
2733         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2734         require(reputation > 0, "_voter must have reputation");
2735         require(reputation >= _rep, "reputation >= _rep");
2736         uint256 rep = _rep;
2737         if (rep == 0) {
2738             rep = reputation;
2739         }
2740         // If this voter has already voted, return false.
2741         if (proposal.voters[_voter].reputation != 0) {
2742             return false;
2743         }
2744         // The voting itself:
2745         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2746         //check if the current winningVote changed or there is a tie.
2747         //for the case there is a tie the current winningVote set to NO.
2748         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2749             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2750             proposal.winningVote == YES)) {
2751             if (proposal.state == ProposalState.Boosted &&
2752             // solhint-disable-next-line not-rely-on-time
2753                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2754                 proposal.state == ProposalState.QuietEndingPeriod) {
2755                 //quietEndingPeriod
2756                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2757                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2758                     proposal.state = ProposalState.QuietEndingPeriod;
2759                     emit StateChange(_proposalId, proposal.state);
2760                 }
2761                 // solhint-disable-next-line not-rely-on-time
2762                 proposal.times[1] = now;
2763             }
2764             proposal.winningVote = _vote;
2765         }
2766         proposal.voters[_voter] = Voter({
2767             reputation: rep,
2768             vote: _vote,
2769             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2770         });
2771         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2772             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2773             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2774             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2775         }
2776         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2777         return _execute(_proposalId);
2778     }
2779 
2780     /**
2781      * @dev _score return the proposal score (Confidence level)
2782      * For dual choice proposal S = (S+)/(S-)
2783      * @param _proposalId the ID of the proposal
2784      * @return uint256 proposal score as real number.
2785      */
2786     function _score(bytes32 _proposalId) internal view returns(uint256) {
2787         Proposal storage proposal = proposals[_proposalId];
2788         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2789         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2790     }
2791 
2792     /**
2793       * @dev _isVotable check if the proposal is votable
2794       * @param _proposalId the ID of the proposal
2795       * @return bool true or false
2796     */
2797     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2798         ProposalState pState = proposals[_proposalId].state;
2799         return ((pState == ProposalState.PreBoosted)||
2800                 (pState == ProposalState.Boosted)||
2801                 (pState == ProposalState.QuietEndingPeriod)||
2802                 (pState == ProposalState.Queued)
2803         );
2804     }
2805 }
2806 
2807 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2808 
2809 pragma solidity 0.5.17;
2810 
2811 
2812 
2813 
2814 /**
2815  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2816  */
2817 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2818     using ECDSA for bytes32;
2819 
2820     // Digest describing the data the user signs according EIP 712.
2821     // Needs to match what is passed to Metamask.
2822     bytes32 public constant DELEGATION_HASH_EIP712 =
2823     keccak256(abi.encodePacked(
2824     "address GenesisProtocolAddress",
2825     "bytes32 ProposalId",
2826     "uint256 Vote",
2827     "uint256 AmountToStake",
2828     "uint256 Nonce"
2829     ));
2830 
2831     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2832 
2833     /**
2834      * @dev Constructor
2835      */
2836     constructor(IERC20 _stakingToken)
2837     public
2838     // solhint-disable-next-line no-empty-blocks
2839     GenesisProtocolLogic(_stakingToken) {
2840     }
2841 
2842     /**
2843      * @dev staking function
2844      * @param _proposalId id of the proposal
2845      * @param _vote  NO(2) or YES(1).
2846      * @param _amount the betting amount
2847      * @return bool true - the proposal has been executed
2848      *              false - otherwise.
2849      */
2850     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2851         return _stake(_proposalId, _vote, _amount, msg.sender);
2852     }
2853 
2854     /**
2855      * @dev stakeWithSignature function
2856      * @param _proposalId id of the proposal
2857      * @param _vote  NO(2) or YES(1).
2858      * @param _amount the betting amount
2859      * @param _nonce nonce value ,it is part of the signature to ensure that
2860               a signature can be received only once.
2861      * @param _signatureType signature type
2862               1 - for web3.eth.sign
2863               2 - for eth_signTypedData according to EIP #712.
2864      * @param _signature  - signed data by the staker
2865      * @return bool true - the proposal has been executed
2866      *              false - otherwise.
2867      */
2868     function stakeWithSignature(
2869         bytes32 _proposalId,
2870         uint256 _vote,
2871         uint256 _amount,
2872         uint256 _nonce,
2873         uint256 _signatureType,
2874         bytes calldata _signature
2875         )
2876         external
2877         returns(bool)
2878         {
2879         // Recreate the digest the user signed
2880         bytes32 delegationDigest;
2881         if (_signatureType == 2) {
2882             delegationDigest = keccak256(
2883                 abi.encodePacked(
2884                     DELEGATION_HASH_EIP712, keccak256(
2885                         abi.encodePacked(
2886                         address(this),
2887                         _proposalId,
2888                         _vote,
2889                         _amount,
2890                         _nonce)
2891                     )
2892                 )
2893             );
2894         } else {
2895             delegationDigest = keccak256(
2896                         abi.encodePacked(
2897                         address(this),
2898                         _proposalId,
2899                         _vote,
2900                         _amount,
2901                         _nonce)
2902                     ).toEthSignedMessageHash();
2903         }
2904         address staker = delegationDigest.recover(_signature);
2905         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2906         require(staker != address(0), "staker address cannot be 0");
2907         require(stakesNonce[staker] == _nonce, "wrong nonce");
2908         stakesNonce[staker] = stakesNonce[staker].add(1);
2909         return _stake(_proposalId, _vote, _amount, staker);
2910     }
2911 
2912     /**
2913      * @dev voting function
2914      * @param _proposalId id of the proposal
2915      * @param _vote NO(2) or YES(1).
2916      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2917      * @param _voter voter address
2918      * @return bool true - the proposal has been executed
2919      *              false - otherwise.
2920      */
2921     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2922     external
2923     votable(_proposalId)
2924     returns(bool) {
2925         Proposal storage proposal = proposals[_proposalId];
2926         Parameters memory params = parameters[proposal.paramsHash];
2927         address voter;
2928         if (params.voteOnBehalf != address(0)) {
2929             require(msg.sender == params.voteOnBehalf, "msg.sender is not authorized to vote");
2930             voter = _voter;
2931         } else {
2932             voter = msg.sender;
2933         }
2934         return internalVote(_proposalId, voter, _vote, _amount);
2935     }
2936 
2937   /**
2938    * @dev Cancel the vote of the msg.sender.
2939    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2940    * This function is here in order to comply to the IntVoteInterface .
2941    */
2942     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2943        //this is not allowed
2944         return;
2945     }
2946 
2947     /**
2948       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2949       * @param _proposalId the id of the proposal
2950       * @return bool true - the proposal has been executed
2951       *              false - otherwise.
2952      */
2953     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2954         return _execute(_proposalId);
2955     }
2956 
2957   /**
2958     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2959     * @return uint256 that contains number of choices
2960     */
2961     function getNumberOfChoices(bytes32) external view returns(uint256) {
2962         return NUM_OF_CHOICES;
2963     }
2964 
2965     /**
2966       * @dev getProposalTimes returns proposals times variables.
2967       * @param _proposalId id of the proposal
2968       * @return proposals times array
2969       */
2970     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2971         return proposals[_proposalId].times;
2972     }
2973 
2974     /**
2975      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2976      * @param _proposalId the ID of the proposal
2977      * @param _voter the address of the voter
2978      * @return uint256 vote - the voters vote
2979      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2980      */
2981     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2982         Voter memory voter = proposals[_proposalId].voters[_voter];
2983         return (voter.vote, voter.reputation);
2984     }
2985 
2986     /**
2987     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2988     * @param _proposalId the ID of the proposal
2989     * @param _choice the index in the
2990     * @return voted reputation for the given choice
2991     */
2992     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2993         return proposals[_proposalId].votes[_choice];
2994     }
2995 
2996     /**
2997     * @dev isVotable check if the proposal is votable
2998     * @param _proposalId the ID of the proposal
2999     * @return bool true or false
3000     */
3001     function isVotable(bytes32 _proposalId) external view returns(bool) {
3002         return _isVotable(_proposalId);
3003     }
3004 
3005     /**
3006     * @dev proposalStatus return the total votes and stakes for a given proposal
3007     * @param _proposalId the ID of the proposal
3008     * @return uint256 preBoostedVotes YES
3009     * @return uint256 preBoostedVotes NO
3010     * @return uint256 total stakes YES
3011     * @return uint256 total stakes NO
3012     */
3013     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
3014         return (
3015                 proposals[_proposalId].preBoostedVotes[YES],
3016                 proposals[_proposalId].preBoostedVotes[NO],
3017                 proposals[_proposalId].stakes[YES],
3018                 proposals[_proposalId].stakes[NO]
3019         );
3020     }
3021 
3022   /**
3023     * @dev getProposalOrganization return the organizationId for a given proposal
3024     * @param _proposalId the ID of the proposal
3025     * @return bytes32 organization identifier
3026     */
3027     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
3028         return (proposals[_proposalId].organizationId);
3029     }
3030 
3031     /**
3032       * @dev getStaker return the vote and stake amount for a given proposal and staker
3033       * @param _proposalId the ID of the proposal
3034       * @param _staker staker address
3035       * @return uint256 vote
3036       * @return uint256 amount
3037     */
3038     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
3039         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
3040     }
3041 
3042     /**
3043       * @dev voteStake return the amount stakes for a given proposal and vote
3044       * @param _proposalId the ID of the proposal
3045       * @param _vote vote number
3046       * @return uint256 stake amount
3047     */
3048     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
3049         return proposals[_proposalId].stakes[_vote];
3050     }
3051 
3052   /**
3053     * @dev voteStake return the winningVote for a given proposal
3054     * @param _proposalId the ID of the proposal
3055     * @return uint256 winningVote
3056     */
3057     function winningVote(bytes32 _proposalId) external view returns(uint256) {
3058         return proposals[_proposalId].winningVote;
3059     }
3060 
3061     /**
3062       * @dev voteStake return the state for a given proposal
3063       * @param _proposalId the ID of the proposal
3064       * @return ProposalState proposal state
3065     */
3066     function state(bytes32 _proposalId) external view returns(ProposalState) {
3067         return proposals[_proposalId].state;
3068     }
3069 
3070    /**
3071     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
3072     * @return bool true or false
3073     */
3074     function isAbstainAllow() external pure returns(bool) {
3075         return false;
3076     }
3077 
3078     /**
3079      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
3080      * @return min - minimum number of choices
3081                max - maximum number of choices
3082      */
3083     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
3084         return (YES, NO);
3085     }
3086 
3087     /**
3088      * @dev score return the proposal score
3089      * @param _proposalId the ID of the proposal
3090      * @return uint256 proposal score.
3091      */
3092     function score(bytes32 _proposalId) public view returns(uint256) {
3093         return  _score(_proposalId);
3094     }
3095 }
3096 
3097 // File: contracts/votingMachines/VotingMachineCallbacks.sol
3098 
3099 pragma solidity 0.5.17;
3100 
3101 
3102 
3103 
3104 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
3105 
3106     struct ProposalInfo {
3107         uint256 blockNumber; // the proposal's block number
3108         Avatar avatar; // the proposal's avatar
3109     }
3110 
3111     modifier onlyVotingMachine(bytes32 _proposalId) {
3112         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
3113         _;
3114     }
3115 
3116     // VotingMaching  ->  proposalId  ->  ProposalInfo
3117     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
3118 
3119     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
3120     external
3121     onlyVotingMachine(_proposalId)
3122     returns(bool)
3123     {
3124         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
3125         if (avatar == Avatar(0)) {
3126             return false;
3127         }
3128         return Controller(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
3129     }
3130 
3131     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
3132     external
3133     onlyVotingMachine(_proposalId)
3134     returns(bool)
3135     {
3136         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
3137         if (avatar == Avatar(0)) {
3138             return false;
3139         }
3140         return Controller(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
3141     }
3142 
3143     function stakingTokenTransfer(
3144         IERC20 _stakingToken,
3145         address _beneficiary,
3146         uint256 _amount,
3147         bytes32 _proposalId)
3148     external
3149     onlyVotingMachine(_proposalId)
3150     returns(bool)
3151     {
3152         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
3153         if (avatar == Avatar(0)) {
3154             return false;
3155         }
3156         return Controller(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
3157     }
3158 
3159     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
3160         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
3161         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
3162             return 0;
3163         }
3164         return _stakingToken.balanceOf(address(avatar));
3165     }
3166 
3167     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
3168         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
3169         if (proposal.avatar == Avatar(0)) {
3170             return 0;
3171         }
3172         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
3173     }
3174 
3175     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
3176         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
3177         if (proposal.avatar == Avatar(0)) {
3178             return 0;
3179         }
3180         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
3181     }
3182 }
3183 
3184 // File: contracts/universalSchemes/ContributionReward.sol
3185 
3186 pragma solidity 0.5.17;
3187 
3188 
3189 
3190 
3191 
3192 
3193 /**
3194  * @title A scheme for proposing and rewarding contributions to an organization
3195  * @dev An agent can ask an organization to recognize a contribution and reward
3196  * him with token, reputation, ether or any combination.
3197  */
3198 
3199 contract ContributionReward is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
3200     using SafeMath for uint;
3201 
3202     event NewContributionProposal(
3203         address indexed _avatar,
3204         bytes32 indexed _proposalId,
3205         address indexed _intVoteInterface,
3206         string _descriptionHash,
3207         int256 _reputationChange,
3208         uint[5]  _rewards,
3209         IERC20 _externalToken,
3210         address _beneficiary
3211     );
3212 
3213     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
3214 
3215     event RedeemReputation(
3216         address indexed _avatar,
3217         bytes32 indexed _proposalId,
3218         address indexed _beneficiary,
3219         int256 _amount);
3220 
3221     event RedeemEther(address indexed _avatar,
3222         bytes32 indexed _proposalId,
3223         address indexed _beneficiary,
3224         uint256 _amount);
3225 
3226     event RedeemNativeToken(address indexed _avatar,
3227         bytes32 indexed _proposalId,
3228         address indexed _beneficiary,
3229         uint256 _amount);
3230 
3231     event RedeemExternalToken(address indexed _avatar,
3232         bytes32 indexed _proposalId,
3233         address indexed _beneficiary,
3234         uint256 _amount);
3235 
3236     // A struct holding the data for a contribution proposal
3237     struct ContributionProposal {
3238         uint256 nativeTokenReward; // Reward asked in the native token of the organization.
3239         int256 reputationChange; // Organization reputation reward requested.
3240         uint256 ethReward;
3241         IERC20 externalToken;
3242         uint256 externalTokenReward;
3243         address payable beneficiary;
3244         uint256 periodLength;
3245         uint256 numberOfPeriods;
3246         uint256 executionTime;
3247         uint[4] redeemedPeriods;
3248     }
3249 
3250     // A mapping from the organization (Avatar) address to the saved data of the organization:
3251     mapping(address=>mapping(bytes32=>ContributionProposal)) public organizationsProposals;
3252 
3253     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
3254     struct Parameters {
3255         bytes32 voteApproveParams;
3256         IntVoteInterface intVote;
3257     }
3258 
3259     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
3260     mapping(bytes32=>Parameters) public parameters;
3261 
3262     /**
3263     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
3264     * @param _proposalId the ID of the voting in the voting machine
3265     * @param _param a parameter of the voting result, 1 yes and 2 is no.
3266     */
3267     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
3268         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
3269         require(organizationsProposals[address(proposal.avatar)][_proposalId].executionTime == 0);
3270         require(organizationsProposals[address(proposal.avatar)][_proposalId].beneficiary != address(0));
3271         // Check if vote was successful:
3272         if (_param == 1) {
3273           // solhint-disable-next-line not-rely-on-time
3274             organizationsProposals[address(proposal.avatar)][_proposalId].executionTime = now;
3275         }
3276         emit ProposalExecuted(address(proposal.avatar), _proposalId, _param);
3277         return true;
3278     }
3279 
3280     /**
3281     * @dev hash the parameters, save them if necessary, and return the hash value
3282     */
3283     function setParameters(
3284         bytes32 _voteApproveParams,
3285         IntVoteInterface _intVote
3286     ) public returns(bytes32)
3287     {
3288         bytes32 paramsHash = getParametersHash(
3289             _voteApproveParams,
3290             _intVote
3291         );
3292         parameters[paramsHash].voteApproveParams = _voteApproveParams;
3293         parameters[paramsHash].intVote = _intVote;
3294         return paramsHash;
3295     }
3296 
3297     /**
3298     * @dev Submit a proposal for a reward for a contribution:
3299     * @param _avatar Avatar of the organization that the contribution was made for
3300     * @param _descriptionHash A hash of the proposal's description
3301     * @param _reputationChange - Amount of reputation change requested .Can be negative.
3302     * @param _rewards rewards array:
3303     *         rewards[0] - Amount of tokens requested per period
3304     *         rewards[1] - Amount of ETH requested per period
3305     *         rewards[2] - Amount of external tokens requested per period
3306     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
3307     *         rewards[4] - Number of periods
3308     * @param _externalToken Address of external token, if reward is requested there
3309     * @param _beneficiary Who gets the rewards
3310     */
3311     function proposeContributionReward(
3312         Avatar _avatar,
3313         string memory _descriptionHash,
3314         int256 _reputationChange,
3315         uint[5] memory _rewards,
3316         IERC20 _externalToken,
3317         address payable _beneficiary
3318     )
3319     public
3320     returns(bytes32)
3321     {
3322         validateProposalParams(_reputationChange, _rewards);
3323         Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];
3324 
3325         bytes32 contributionId = controllerParams.intVote.propose(
3326         2,
3327         controllerParams.voteApproveParams,
3328         msg.sender,
3329         address(_avatar)
3330         );
3331 
3332         address payable beneficiary = _beneficiary;
3333         if (beneficiary == address(0)) {
3334             beneficiary = msg.sender;
3335         }
3336 
3337         ContributionProposal memory proposal = ContributionProposal({
3338             nativeTokenReward: _rewards[0],
3339             reputationChange: _reputationChange,
3340             ethReward: _rewards[1],
3341             externalToken: _externalToken,
3342             externalTokenReward: _rewards[2],
3343             beneficiary: beneficiary,
3344             periodLength: _rewards[3],
3345             numberOfPeriods: _rewards[4],
3346             executionTime: 0,
3347             redeemedPeriods:[uint(0), uint(0), uint(0), uint(0)]
3348         });
3349         organizationsProposals[address(_avatar)][contributionId] = proposal;
3350 
3351         emit NewContributionProposal(
3352             address(_avatar),
3353             contributionId,
3354             address(controllerParams.intVote),
3355             _descriptionHash,
3356             _reputationChange,
3357             _rewards,
3358             _externalToken,
3359             beneficiary
3360         );
3361 
3362         proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({
3363             blockNumber:block.number,
3364             avatar:_avatar
3365         });
3366         return contributionId;
3367     }
3368 
3369     /**
3370     * @dev RedeemReputation reward for proposal
3371     * @param _proposalId the ID of the voting in the voting machine
3372     * @param _avatar address of the controller
3373     * @return reputation the redeemed reputation.
3374     */
3375     function redeemReputation(bytes32 _proposalId, Avatar _avatar) public returns(int256 reputation) {
3376 
3377         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
3378         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
3379         require(proposal.executionTime != 0);
3380         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 0);
3381 
3382         //set proposal reward to zero to prevent reentrancy attack.
3383         proposal.reputationChange = 0;
3384         reputation = int(periodsToPay) * _proposal.reputationChange;
3385         if (reputation > 0) {
3386             require(
3387             Controller(
3388             _avatar.owner()).mintReputation(uint(reputation), _proposal.beneficiary, address(_avatar)));
3389         } else if (reputation < 0) {
3390             require(
3391             Controller(
3392             _avatar.owner()).burnReputation(uint(reputation*(-1)), _proposal.beneficiary, address(_avatar)));
3393         }
3394         if (reputation != 0) {
3395             proposal.redeemedPeriods[0] = proposal.redeemedPeriods[0].add(periodsToPay);
3396             emit RedeemReputation(address(_avatar), _proposalId, _proposal.beneficiary, reputation);
3397         }
3398         //restore proposal reward.
3399         proposal.reputationChange = _proposal.reputationChange;
3400     }
3401 
3402     /**
3403     * @dev RedeemNativeToken reward for proposal
3404     * @param _proposalId the ID of the voting in the voting machine
3405     * @param _avatar address of the controller
3406     * @return amount the redeemed nativeToken.
3407     */
3408     function redeemNativeToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
3409 
3410         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
3411         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
3412         require(proposal.executionTime != 0);
3413         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 1);
3414         //set proposal rewards to zero to prevent reentrancy attack.
3415         proposal.nativeTokenReward = 0;
3416 
3417         amount = periodsToPay.mul(_proposal.nativeTokenReward);
3418         if (amount > 0) {
3419             require(Controller(_avatar.owner()).mintTokens(amount, _proposal.beneficiary, address(_avatar)));
3420             proposal.redeemedPeriods[1] = proposal.redeemedPeriods[1].add(periodsToPay);
3421             emit RedeemNativeToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
3422         }
3423 
3424         //restore proposal reward.
3425         proposal.nativeTokenReward = _proposal.nativeTokenReward;
3426     }
3427 
3428     /**
3429     * @dev RedeemEther reward for proposal
3430     * @param _proposalId the ID of the voting in the voting machine
3431     * @param _avatar address of the controller
3432     * @return amount ether redeemed amount
3433     */
3434     function redeemEther(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
3435 
3436         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
3437         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
3438         require(proposal.executionTime != 0);
3439         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 2);
3440         //set proposal rewards to zero to prevent reentrancy attack.
3441         proposal.ethReward = 0;
3442         amount = periodsToPay.mul(_proposal.ethReward);
3443 
3444         if (amount > 0) {
3445             require(Controller(_avatar.owner()).sendEther(amount, _proposal.beneficiary, _avatar));
3446             proposal.redeemedPeriods[2] = proposal.redeemedPeriods[2].add(periodsToPay);
3447             emit RedeemEther(address(_avatar), _proposalId, _proposal.beneficiary, amount);
3448         }
3449 
3450         //restore proposal reward.
3451         proposal.ethReward = _proposal.ethReward;
3452     }
3453 
3454     /**
3455     * @dev RedeemNativeToken reward for proposal
3456     * @param _proposalId the ID of the voting in the voting machine
3457     * @param _avatar address of the controller
3458     * @return amount the external token redeemed amount
3459     */
3460     function redeemExternalToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
3461 
3462         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
3463         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
3464         require(proposal.executionTime != 0);
3465         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 3);
3466         //set proposal rewards to zero to prevent reentrancy attack.
3467         proposal.externalTokenReward = 0;
3468 
3469         if (proposal.externalToken != IERC20(0) && _proposal.externalTokenReward > 0) {
3470             amount = periodsToPay.mul(_proposal.externalTokenReward);
3471             if (amount > 0) {
3472                 require(
3473                 Controller(
3474                 _avatar.owner())
3475                 .externalTokenTransfer(_proposal.externalToken, _proposal.beneficiary, amount, _avatar));
3476                 proposal.redeemedPeriods[3] = proposal.redeemedPeriods[3].add(periodsToPay);
3477                 emit RedeemExternalToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
3478             }
3479         }
3480         //restore proposal reward.
3481         proposal.externalTokenReward = _proposal.externalTokenReward;
3482     }
3483 
3484     /**
3485     * @dev redeem rewards for proposal
3486     * @param _proposalId the ID of the voting in the voting machine
3487     * @param _avatar address of the controller
3488     * @param _whatToRedeem whatToRedeem array:
3489     *         whatToRedeem[0] - reputation
3490     *         whatToRedeem[1] - nativeTokenReward
3491     *         whatToRedeem[2] - Ether
3492     *         whatToRedeem[3] - ExternalToken
3493     * @return  result boolean array for each redeem type.
3494     */
3495     function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] memory _whatToRedeem)
3496     public
3497     returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)
3498     {
3499 
3500         if (_whatToRedeem[0]) {
3501             reputationReward = redeemReputation(_proposalId, _avatar);
3502         }
3503 
3504         if (_whatToRedeem[1]) {
3505             nativeTokenReward = redeemNativeToken(_proposalId, _avatar);
3506         }
3507 
3508         if (_whatToRedeem[2]) {
3509             etherReward = redeemEther(_proposalId, _avatar);
3510         }
3511 
3512         if (_whatToRedeem[3]) {
3513             externalTokenReward = redeemExternalToken(_proposalId, _avatar);
3514         }
3515     }
3516 
3517     /**
3518     * @dev getPeriodsToPay return the periods left to be paid for reputation,nativeToken,ether or externalToken.
3519     * The function ignore the reward amount to be paid (which can be zero).
3520     * @param _proposalId the ID of the voting in the voting machine
3521     * @param _avatar address of the controller
3522     * @param _redeemType - the type of the reward  :
3523     *         0 - reputation
3524     *         1 - nativeTokenReward
3525     *         2 - Ether
3526     *         3 - ExternalToken
3527     * @return  periods left to be paid.
3528     */
3529     function getPeriodsToPay(bytes32 _proposalId, address _avatar, uint256 _redeemType) public view returns (uint256) {
3530         require(_redeemType <= 3, "should be in the redeemedPeriods range");
3531         ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];
3532         if (_proposal.executionTime == 0)
3533             return 0;
3534         uint256 periodsFromExecution;
3535         if (_proposal.periodLength > 0) {
3536           // solhint-disable-next-line not-rely-on-time
3537             periodsFromExecution = (now.sub(_proposal.executionTime))/(_proposal.periodLength);
3538         }
3539         uint256 periodsToPay;
3540         if ((_proposal.periodLength == 0) || (periodsFromExecution >= _proposal.numberOfPeriods)) {
3541             periodsToPay = _proposal.numberOfPeriods.sub(_proposal.redeemedPeriods[_redeemType]);
3542         } else {
3543             periodsToPay = periodsFromExecution.sub(_proposal.redeemedPeriods[_redeemType]);
3544         }
3545         return periodsToPay;
3546     }
3547 
3548     /**
3549     * @dev getRedeemedPeriods return the already redeemed periods for reputation, nativeToken, ether or externalToken.
3550     * @param _proposalId the ID of the voting in the voting machine
3551     * @param _avatar address of the controller
3552     * @param _redeemType - the type of the reward  :
3553     *         0 - reputation
3554     *         1 - nativeTokenReward
3555     *         2 - Ether
3556     *         3 - ExternalToken
3557     * @return redeemed period.
3558     */
3559     function getRedeemedPeriods(bytes32 _proposalId, address _avatar, uint256 _redeemType)
3560     public
3561     view
3562     returns (uint256) {
3563         return organizationsProposals[_avatar][_proposalId].redeemedPeriods[_redeemType];
3564     }
3565 
3566     function getProposalEthReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3567         return organizationsProposals[_avatar][_proposalId].ethReward;
3568     }
3569 
3570     function getProposalExternalTokenReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3571         return organizationsProposals[_avatar][_proposalId].externalTokenReward;
3572     }
3573 
3574     function getProposalExternalToken(bytes32 _proposalId, address _avatar) public view returns (address) {
3575         return address(organizationsProposals[_avatar][_proposalId].externalToken);
3576     }
3577 
3578     function getProposalExecutionTime(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3579         return organizationsProposals[_avatar][_proposalId].executionTime;
3580     }
3581 
3582     /**
3583     * @dev return a hash of the given parameters
3584     * @param _voteApproveParams parameters for the voting machine used to approve a contribution
3585     * @param _intVote the voting machine used to approve a contribution
3586     * @return a hash of the parameters
3587     */
3588     function getParametersHash(
3589         bytes32 _voteApproveParams,
3590         IntVoteInterface _intVote
3591     ) public pure returns(bytes32)
3592     {
3593         return (keccak256(abi.encodePacked(_voteApproveParams, _intVote)));
3594     }
3595 
3596     /**
3597     * @dev validateProposalParams validate proposal's rewards parameters.
3598     * The function check for potential overflow upon proposal's redeem.
3599     * The function reverts if the params are not valid.
3600     * @param _reputationChange - Amount of reputation change requested .Can be negative.
3601     * @param _rewards rewards array:
3602     *         rewards[0] - Amount of tokens requested per period
3603     *         rewards[1] - Amount of ETH requested per period
3604     *         rewards[2] - Amount of external tokens requested per period
3605     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
3606     *         rewards[4] - Number of periods
3607     */
3608     function validateProposalParams(int256 _reputationChange, uint[5] memory _rewards) private pure {
3609         require(((_rewards[3] > 0) || (_rewards[4] == 1)), "periodLength equal 0 require numberOfPeriods to be 1");
3610         if (_rewards[4] > 0) {
3611             // This is the only case of overflow not detected by the check below
3612             require(!(int(_rewards[4]) == -1 && _reputationChange == (-2**255)),
3613             "numberOfPeriods * _reputationChange will overflow");
3614            //check that numberOfPeriods * _reputationChange will not overflow
3615             require((int(_rewards[4]) * _reputationChange) / int(_rewards[4]) == _reputationChange,
3616             "numberOfPeriods * reputationChange will overflow");
3617             //check that numberOfPeriods * tokenReward will not overflow
3618             require((_rewards[4] * _rewards[0]) / _rewards[4] == _rewards[0],
3619             "numberOfPeriods * tokenReward will overflow");
3620             //check that numberOfPeriods * ethReward will not overflow
3621             require((_rewards[4] * _rewards[1]) / _rewards[4] == _rewards[1],
3622             "numberOfPeriods * ethReward will overflow");
3623             //check that numberOfPeriods * texternalTokenReward will not overflow
3624             require((_rewards[4] * _rewards[2]) / _rewards[4] == _rewards[2],
3625             "numberOfPeriods * texternalTokenReward will overflow");
3626         }
3627     }
3628 
3629 }
3630 
3631 // File: contracts/schemes/ContributionRewardExt.sol
3632 
3633 pragma solidity 0.5.17;
3634 
3635 
3636 
3637 
3638 
3639 
3640 /**
3641  * @title A scheme for proposing and rewarding contributions to an organization
3642  * @dev An agent can ask an organization to recognize a contribution and reward
3643  * him with token, reputation, ether or any combination.
3644  * This scheme extend the functionality of the ContributionReward scheme.
3645  * It enable to assign a rewarder, which, after the contributionreward has been accepted,
3646  * can then later distribute the assets as it would like.
3647  */
3648 contract ContributionRewardExt is VotingMachineCallbacks, ProposalExecuteInterface {
3649     using SafeMath for uint;
3650     using SafeERC20 for address;
3651 
3652     event NewContributionProposal(
3653         address indexed _avatar,
3654         bytes32 indexed _proposalId,
3655         address indexed _intVoteInterface,
3656         string _descriptionHash,
3657         int256 _reputationChange,
3658         uint[3]  _rewards,
3659         IERC20 _externalToken,
3660         address _beneficiary,
3661         address _proposer
3662     );
3663 
3664     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
3665 
3666     event RedeemReputation(
3667         address indexed _avatar,
3668         bytes32 indexed _proposalId,
3669         address indexed _beneficiary,
3670         int256 _amount);
3671 
3672     event RedeemEther(address indexed _avatar,
3673         bytes32 indexed _proposalId,
3674         address indexed _beneficiary,
3675         uint256 _amount);
3676 
3677     event RedeemNativeToken(address indexed _avatar,
3678         bytes32 indexed _proposalId,
3679         address indexed _beneficiary,
3680         uint256 _amount);
3681 
3682     event RedeemExternalToken(address indexed _avatar,
3683         bytes32 indexed _proposalId,
3684         address indexed _beneficiary,
3685         uint256 _amount);
3686 
3687     // A struct holding the data for a contribution proposal
3688     struct ContributionProposal {
3689         uint256 nativeTokenReward; // Reward asked in the native token of the organization.
3690         int256 reputationChange; // Organization reputation reward requested.
3691         uint256 ethReward;
3692         IERC20 externalToken;
3693         uint256 externalTokenReward;
3694         address payable beneficiary;
3695         uint256 nativeTokenRewardLeft;
3696         uint256 reputationChangeLeft;
3697         uint256 ethRewardLeft;
3698         uint256 externalTokenRewardLeft;
3699         bool acceptedByVotingMachine;
3700     }
3701 
3702     modifier onlyRewarder() {
3703         require(msg.sender == rewarder, "msg.sender is not authorized");
3704         _;
3705     }
3706 
3707     mapping(bytes32=>ContributionProposal) public organizationProposals;
3708 
3709     IntVoteInterface public votingMachine;
3710     bytes32 public voteParams;
3711     Avatar public avatar;
3712     address public rewarder;
3713 
3714     /**
3715     * @dev enables this contract to receive ethers
3716     */
3717     function() external payable {
3718     }
3719 
3720     /**
3721      * @dev initialize
3722      * @param _avatar the avatar to mint reputation from
3723      * @param _votingMachine the voting machines address
3724      * @param _voteParams voting machine parameters
3725      * @param _rewarder an address which allowed to redeem the contribution.
3726        if _rewarder is 0 this param is agnored.
3727      */
3728     function initialize(
3729         Avatar _avatar,
3730         IntVoteInterface _votingMachine,
3731         bytes32 _voteParams,
3732         address _rewarder
3733     )
3734     external
3735     {
3736         require(avatar == Avatar(0), "can be called only one time");
3737         require(_avatar != Avatar(0), "avatar cannot be zero");
3738         require(_votingMachine != IntVoteInterface(0), "votingMachine cannot be zero");
3739         avatar = _avatar;
3740         votingMachine = _votingMachine;
3741         voteParams = _voteParams;
3742         rewarder = _rewarder;
3743     }
3744 
3745     /**
3746     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
3747     * @param _proposalId the ID of the proposal in the voting machine
3748     * @param _decision a parameter of the voting result, 1 yes and 2 is no.
3749     */
3750     function executeProposal(bytes32 _proposalId, int256 _decision)
3751     external
3752     onlyVotingMachine(_proposalId)
3753     returns(bool) {
3754         require(organizationProposals[_proposalId].acceptedByVotingMachine == false);
3755         require(organizationProposals[_proposalId].beneficiary != address(0));
3756         if (_decision == 1) {
3757             organizationProposals[_proposalId].acceptedByVotingMachine = true;
3758         }
3759         emit ProposalExecuted(address(avatar), _proposalId, _decision);
3760         return true;
3761     }
3762 
3763     /**
3764     * @dev Submit a proposal for a reward for a contribution:
3765     * @param _descriptionHash A hash of the proposal's description
3766     * @param _reputationChange - Amount of reputation change requested .Can be negative.
3767     * @param _rewards rewards array:
3768     *         rewards[0] - Amount of tokens requested
3769     *         rewards[1] - Amount of ETH requested
3770     *         rewards[2] - Amount of external tokens
3771     * @param _externalToken Address of external token, if reward is requested there
3772     * @param _beneficiary Who gets the rewards. if equal to 0 the beneficiary will be msg.sender.
3773     * @param _proposer proposer . if equal to 0 the proposer will be msg.sender.
3774     */
3775     function proposeContributionReward(
3776         string memory _descriptionHash,
3777         int256 _reputationChange,
3778         uint[3] memory _rewards,
3779         IERC20 _externalToken,
3780         address payable _beneficiary,
3781         address _proposer
3782     )
3783     public
3784     returns(bytes32 proposalId)
3785     {
3786         address proposer = _proposer;
3787         if (proposer == address(0)) {
3788             proposer = msg.sender;
3789         }
3790         proposalId = votingMachine.propose(2, voteParams, proposer, address(avatar));
3791         address payable beneficiary = _beneficiary;
3792         if (beneficiary == address(0)) {
3793             beneficiary = msg.sender;
3794         }
3795         if (beneficiary == address(this)) {
3796             require(_reputationChange >= 0, "negative rep change not allowed for this case");
3797         }
3798 
3799         ContributionProposal memory proposal = ContributionProposal({
3800             nativeTokenReward: _rewards[0],
3801             reputationChange: _reputationChange,
3802             ethReward: _rewards[1],
3803             externalToken: _externalToken,
3804             externalTokenReward: _rewards[2],
3805             beneficiary: beneficiary,
3806             nativeTokenRewardLeft: 0,
3807             reputationChangeLeft: 0,
3808             ethRewardLeft: 0,
3809             externalTokenRewardLeft: 0,
3810             acceptedByVotingMachine: false
3811         });
3812         organizationProposals[proposalId] = proposal;
3813 
3814         emit NewContributionProposal(
3815             address(avatar),
3816             proposalId,
3817             address(votingMachine),
3818             _descriptionHash,
3819             _reputationChange,
3820             _rewards,
3821             _externalToken,
3822             beneficiary,
3823             proposer
3824         );
3825 
3826         proposalsInfo[address(votingMachine)][proposalId] = ProposalInfo({
3827             blockNumber:block.number,
3828             avatar:avatar
3829         });
3830     }
3831 
3832     /**
3833     * @dev RedeemReputation reward for proposal
3834     * @param _proposalId the ID of the voting in the voting machine
3835     * @return reputation the redeemed reputation.
3836     */
3837     function redeemReputation(bytes32 _proposalId) public returns(int256 reputation) {
3838         ContributionProposal storage proposal = organizationProposals[_proposalId];
3839         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3840 
3841         //if the beneficiary is the current contract, we are not minting the rep to it
3842         //but instead refer to a mechanism in which the rep can be minted by the current contract
3843         //per request of the rewarder
3844         if (proposal.beneficiary == address(this)) {
3845             if (proposal.reputationChangeLeft == 0) {//for now only mint(not burn) rep allowed from ext contract.
3846                 proposal.reputationChangeLeft = uint256(proposal.reputationChange);
3847                 proposal.reputationChange = 0;
3848             }
3849         } else {
3850             reputation = proposal.reputationChange;
3851             //set proposal reward to zero to prevent reentrancy attack.
3852             proposal.reputationChange = 0;
3853 
3854             if (reputation > 0) {
3855                 require(
3856                 Controller(
3857                 avatar.owner()).mintReputation(uint(reputation), proposal.beneficiary, address(avatar)));
3858             } else if (reputation < 0) {
3859                 require(
3860                 Controller(
3861                 avatar.owner()).burnReputation(uint(reputation*(-1)), proposal.beneficiary, address(avatar)));
3862             }
3863             if (reputation != 0) {
3864                 emit RedeemReputation(address(avatar), _proposalId, proposal.beneficiary, reputation);
3865             }
3866         }
3867     }
3868 
3869     /**
3870     * @dev RedeemNativeToken reward for proposal
3871     * @param _proposalId the ID of the voting in the voting machine
3872     * @return amount the redeemed nativeToken.
3873     */
3874     function redeemNativeToken(bytes32 _proposalId) public returns(uint256 amount) {
3875 
3876         ContributionProposal storage proposal = organizationProposals[_proposalId];
3877         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3878 
3879         if (proposal.beneficiary == address(this)) {
3880             //ensure nativeTokenRewardLeft can be set only one time
3881             if (proposal.nativeTokenRewardLeft == 0) {
3882                 proposal.nativeTokenRewardLeft = proposal.nativeTokenReward;
3883             }
3884         }
3885         amount = proposal.nativeTokenReward;
3886         //set proposal rewards to zero to prevent reentrancy attack.
3887         proposal.nativeTokenReward = 0;
3888         if (amount > 0) {
3889             require(Controller(avatar.owner()).mintTokens(amount, proposal.beneficiary, address(avatar)));
3890             emit RedeemNativeToken(address(avatar), _proposalId, proposal.beneficiary, amount);
3891         }
3892     }
3893 
3894     /**
3895     * @dev RedeemEther reward for proposal
3896     * @param _proposalId the ID of the voting in the voting machine
3897     * @return amount ether redeemed amount
3898     */
3899     function redeemEther(bytes32 _proposalId) public returns(uint256 amount) {
3900         ContributionProposal storage proposal = organizationProposals[_proposalId];
3901         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3902 
3903         if (proposal.beneficiary == address(this)) {
3904             if (proposal.ethRewardLeft == 0) {
3905                 proposal.ethRewardLeft = proposal.ethReward;
3906             }
3907         }
3908         amount = proposal.ethReward;
3909         //set proposal rewards to zero to prevent reentrancy attack.
3910         proposal.ethReward = 0;
3911         if (amount > 0) {
3912             require(Controller(avatar.owner()).sendEther(amount, proposal.beneficiary, avatar));
3913             emit RedeemEther(address(avatar), _proposalId, proposal.beneficiary, amount);
3914         }
3915     }
3916 
3917     /**
3918     * @dev RedeemNativeToken reward for proposal
3919     * @param _proposalId the ID of the voting in the voting machine
3920     * @return amount the external token redeemed amount
3921     */
3922     function redeemExternalToken(bytes32 _proposalId) public returns(uint256 amount) {
3923         ContributionProposal storage proposal = organizationProposals[_proposalId];
3924         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3925 
3926 
3927         if (proposal.beneficiary == address(this)) {
3928             if (proposal.externalTokenRewardLeft == 0) {
3929                 proposal.externalTokenRewardLeft = proposal.externalTokenReward;
3930             }
3931         }
3932 
3933         if (proposal.externalToken != IERC20(0) && proposal.externalTokenReward > 0) {
3934             amount = proposal.externalTokenReward;
3935             //set proposal rewards to zero to prevent reentrancy attack.
3936             proposal.externalTokenReward = 0;
3937             require(
3938             Controller(
3939             avatar.owner())
3940             .externalTokenTransfer(proposal.externalToken, proposal.beneficiary, amount, avatar));
3941             emit RedeemExternalToken(address(avatar), _proposalId, proposal.beneficiary, amount);
3942         }
3943     }
3944 
3945     /**
3946     * @dev redeemReputationByRewarder redeem reward for proposal
3947     * @param _proposalId the ID of the voting in the voting machine
3948     * @param _beneficiary the beneficiary to mint reputation to.
3949     * @param _reputation the reputation amount to mint
3950     *        note: burn reputation is not supported via this function
3951     */
3952     function redeemReputationByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _reputation)
3953     public
3954     onlyRewarder
3955     {
3956         ContributionProposal storage proposal = organizationProposals[_proposalId];
3957         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3958         //this will ensure sum zero of reputation
3959         //and that there was a privious call to redeemReputation function.
3960         proposal.reputationChangeLeft =
3961         proposal.reputationChangeLeft.sub(_reputation,
3962         "cannot redeem more reputation than allocated for this proposal or no redeemReputation was called");
3963         require(
3964         Controller(
3965         avatar.owner()).mintReputation(_reputation, _beneficiary, address(avatar)));
3966         if (_reputation != 0) {
3967             emit RedeemReputation(address(avatar), _proposalId, _beneficiary, int256(_reputation));
3968         }
3969     }
3970 
3971     /**
3972     * @dev redeemNativeTokenByRewarder redeem reward for proposal
3973     * @param _proposalId the ID of the voting in the voting machine
3974     * @param _beneficiary the beneficiary to mint tokens to.
3975     * @param _amount the tokens amount to mint
3976     */
3977     function redeemNativeTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount)
3978     public
3979     onlyRewarder
3980     {
3981         ContributionProposal storage proposal = organizationProposals[_proposalId];
3982         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
3983         //this will ensure sum zero of reputation
3984         //and that there was a privious call to redeemNativeToken function.
3985         proposal.nativeTokenRewardLeft =
3986         proposal.nativeTokenRewardLeft.sub(_amount,
3987         "cannot redeem more tokens than allocated for this proposal or no redeemNativeToken was called");
3988 
3989         if (_amount > 0) {
3990             address(avatar.nativeToken()).safeTransfer(_beneficiary, _amount);
3991             emit RedeemNativeToken(address(avatar), _proposalId, _beneficiary, _amount);
3992         }
3993     }
3994 
3995     /**
3996     * @dev redeemEtherByRewarder redeem reward for proposal
3997     * @param _proposalId the ID of the voting in the voting machine
3998     * @param _beneficiary the beneficiary to send eth to.
3999     * @param _amount eth amount to send
4000     */
4001     function redeemEtherByRewarder(bytes32 _proposalId, address payable _beneficiary, uint256 _amount)
4002     public
4003     onlyRewarder
4004     {
4005         ContributionProposal storage proposal = organizationProposals[_proposalId];
4006         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
4007         //this will ensure sum zero of reputation.
4008         //and that there was a privious call to redeemEther function.
4009         proposal.ethRewardLeft = proposal.ethRewardLeft.sub(_amount,
4010         "cannot redeem more Ether than allocated for this proposal or no redeemEther was called");
4011 
4012         if (_amount > 0) {
4013             _beneficiary.transfer(_amount);
4014             emit RedeemEther(address(avatar), _proposalId, _beneficiary, _amount);
4015         }
4016     }
4017 
4018     /**
4019     * @dev redeemExternalTokenByRewarder redeem reward for proposal
4020     * @param _proposalId the ID of the voting in the voting machine
4021     * @param _beneficiary the beneficiary to send the external token to.
4022     * @param _amount the amount of external token to send
4023     */
4024     function redeemExternalTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount)
4025     public
4026     onlyRewarder {
4027         ContributionProposal storage proposal = organizationProposals[_proposalId];
4028         require(proposal.acceptedByVotingMachine, "proposal was not accepted by the voting machine");
4029         //this will ensure sum zero of reputation.
4030         //and that there was a privious call to redeemExternalToken function.
4031         proposal.externalTokenRewardLeft =
4032         proposal.externalTokenRewardLeft.sub(_amount,
4033         "cannot redeem more tokens than allocated for this proposal or no redeemExternalToken was called");
4034 
4035         if (proposal.externalToken != IERC20(0)) {
4036             if (_amount > 0) {
4037                 address(proposal.externalToken).safeTransfer(_beneficiary, _amount);
4038                 emit RedeemExternalToken(address(avatar), _proposalId, _beneficiary, _amount);
4039             }
4040         }
4041     }
4042 
4043     /**
4044     * @dev redeem rewards for proposal
4045     * @param _proposalId the ID of the voting in the voting machine
4046     * @param _whatToRedeem whatToRedeem array of boolean values:
4047     *         whatToRedeem[0] - reputation
4048     *         whatToRedeem[1] - nativeTokenReward
4049     *         whatToRedeem[2] - Ether
4050     *         whatToRedeem[3] - ExternalToken
4051     * @return  result boolean array for each redeem type.
4052     */
4053     function redeem(bytes32 _proposalId, bool[4] memory _whatToRedeem)
4054     public
4055     returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)
4056     {
4057 
4058         if (_whatToRedeem[0]) {
4059             reputationReward = redeemReputation(_proposalId);
4060         }
4061 
4062         if (_whatToRedeem[1]) {
4063             nativeTokenReward = redeemNativeToken(_proposalId);
4064         }
4065 
4066         if (_whatToRedeem[2]) {
4067             etherReward = redeemEther(_proposalId);
4068         }
4069 
4070         if (_whatToRedeem[3]) {
4071             externalTokenReward = redeemExternalToken(_proposalId);
4072         }
4073     }
4074 
4075     function getProposalEthReward(bytes32 _proposalId) public view returns (uint256) {
4076         return organizationProposals[_proposalId].ethReward;
4077     }
4078 
4079     function getProposalExternalTokenReward(bytes32 _proposalId) public view returns (uint256) {
4080         return organizationProposals[_proposalId].externalTokenReward;
4081     }
4082 
4083     function getProposalExternalToken(bytes32 _proposalId) public view returns (address) {
4084         return address(organizationProposals[_proposalId].externalToken);
4085     }
4086 
4087     function getProposalReputationReward(bytes32 _proposalId) public view returns (int256) {
4088         return organizationProposals[_proposalId].reputationChange;
4089     }
4090 
4091     function getProposalNativeTokenReward(bytes32 _proposalId) public view returns (uint256) {
4092         return organizationProposals[_proposalId].nativeTokenReward;
4093     }
4094 
4095     function getProposalAcceptedByVotingMachine(bytes32 _proposalId) public view returns (bool) {
4096         return organizationProposals[_proposalId].acceptedByVotingMachine;
4097     }
4098 
4099 }
4100 
4101 // File: contracts/utils/Redeemer.sol
4102 
4103 pragma solidity 0.5.17;
4104 
4105 
4106 
4107 
4108 
4109 
4110 contract Redeemer {
4111     using SafeMath for uint;
4112 
4113    /**
4114     * @dev helper to redeem rewards for a proposal
4115     * It calls execute on the proposal if it is not yet executed.
4116     * It tries to redeem reputation and stake from the GenesisProtocol.
4117     * It tries to redeem proposal rewards from the contribution rewards scheme.
4118     * This function does not emit events.
4119     * A client should listen to GenesisProtocol and ContributionReward redemption events
4120     * to monitor redemption operations.
4121     * @param _contributionReward contributionReward
4122     * @param _genesisProtocol genesisProtocol
4123     * @param _proposalId the ID of the voting in the voting machine
4124     * @param _avatar address of the controller
4125     * @param _beneficiary beneficiary
4126     * @return gpRewards array
4127     *          gpRewards[0] - stakerTokenAmount
4128     *          gpRewards[1] - voterReputationAmount
4129     *          gpRewards[2] - proposerReputationAmount
4130     * @return gpDaoBountyReward array
4131     *         gpDaoBountyReward[0] - staker dao bounty reward -
4132     *                                will be zero for the case there is not enough tokens in avatar for the reward.
4133     *         gpDaoBountyReward[1] - staker potential dao bounty reward.
4134     * @return executed  bool true or false
4135     * @return winningVote
4136     *                   1 - executed or closed and the winning vote is YES
4137     *                   2 - executed or closed and the winning vote is NO
4138     * @return int256 crReputationReward Reputation - from ContributionReward
4139     * @return int256 crNativeTokenReward NativeTokenReward - from ContributionReward
4140     * @return int256 crEthReward Ether - from ContributionReward
4141     * @return int256 crExternalTokenReward ExternalToken - from ContributionReward
4142     */
4143     function redeem(ContributionReward _contributionReward,
4144                     GenesisProtocol _genesisProtocol,
4145                     bytes32 _proposalId,
4146                     Avatar _avatar,
4147                     address _beneficiary)
4148     external
4149     returns(uint[3] memory gpRewards,
4150             uint[2] memory gpDaoBountyReward,
4151             bool executed,
4152             uint256 winningVote,
4153             int256 crReputationReward,
4154             uint256 crNativeTokenReward,
4155             uint256 crEthReward,
4156             uint256 crExternalTokenReward)
4157     {
4158         bool callContributionReward;
4159         (gpRewards, gpDaoBountyReward, executed, winningVote, callContributionReward) =
4160         genesisProtocolRedeem(_genesisProtocol, _proposalId, _beneficiary);
4161         if (callContributionReward) {
4162             //redeem from contributionReward only if it executed
4163             if (_contributionReward.getProposalExecutionTime(_proposalId, address(_avatar)) > 0) {
4164                 (crReputationReward, crNativeTokenReward, crEthReward, crExternalTokenReward) =
4165                 contributionRewardRedeem(_contributionReward, _proposalId, _avatar);
4166             }
4167         }
4168     }
4169 
4170     /**
4171      * @dev helper to redeem rewards for a proposal
4172      * It calls execute on the proposal if it is not yet executed.
4173      * It tries to redeem reputation and stake from the GenesisProtocol.
4174      * It tries to redeem proposal rewards from the contribution rewards scheme.
4175      * This function does not emit events.
4176      * A client should listen to GenesisProtocol and ContributionReward redemption events
4177      * to monitor redemption operations.
4178      * @param _contributionRewardExt contributionRewardExt
4179      * @param _genesisProtocol genesisProtocol
4180      * @param _proposalId the ID of the voting in the voting machine
4181      * @param _beneficiary beneficiary
4182      * @return gpRewards array
4183      *          gpRewards[0] - stakerTokenAmount
4184      *          gpRewards[1] - voterReputationAmount
4185      *          gpRewards[2] - proposerReputationAmount
4186      * @return gpDaoBountyReward array
4187      *         gpDaoBountyReward[0] - staker dao bounty reward -
4188      *                                will be zero for the case there is not enough tokens in avatar for the reward.
4189      *         gpDaoBountyReward[1] - staker potential dao bounty reward.
4190      * @return executed  bool true or false
4191      * @return winningVote
4192      *                   1 - executed or closed and the winning vote is YES
4193      *                   2 - executed or closed and the winning vote is NO
4194      * @return int256 crReputationReward Reputation - from ContributionReward
4195      * @return int256 crNativeTokenReward NativeTokenReward - from ContributionReward
4196      * @return int256 crEthReward Ether - from ContributionReward
4197      * @return int256 crExternalTokenReward ExternalToken - from ContributionReward
4198      */
4199     function redeemFromCRExt(ContributionRewardExt _contributionRewardExt,
4200                             GenesisProtocol _genesisProtocol,
4201                             bytes32 _proposalId,
4202                             address _beneficiary)
4203         external
4204         returns(uint[3] memory gpRewards,
4205                 uint[2] memory gpDaoBountyReward,
4206                 bool executed,
4207                 uint256 winningVote,
4208                 int256 crReputationReward,
4209                 uint256 crNativeTokenReward,
4210                 uint256 crEthReward,
4211                 uint256 crExternalTokenReward)
4212     {
4213         bool callContributionReward;
4214         (gpRewards, gpDaoBountyReward, executed, winningVote, callContributionReward) =
4215         genesisProtocolRedeem(_genesisProtocol, _proposalId, _beneficiary);
4216         if (callContributionReward) {
4217                //redeem from contributionReward only if it executed
4218             if (_contributionRewardExt.getProposalAcceptedByVotingMachine(_proposalId)) {
4219                 (crReputationReward, crNativeTokenReward, crEthReward, crExternalTokenReward) =
4220                 contributionRewardExtRedeem(_contributionRewardExt, _proposalId);
4221             }
4222         }
4223     }
4224 
4225     function genesisProtocolRedeem(GenesisProtocol _genesisProtocol,
4226                                     bytes32 _proposalId,
4227                                     address _beneficiary)
4228     private
4229     returns(uint[3] memory gpRewards,
4230             uint[2] memory gpDaoBountyReward,
4231             bool executed,
4232             uint256 winningVote,
4233             bool callContributionReward) {
4234         GenesisProtocol.ProposalState pState = _genesisProtocol.state(_proposalId);
4235 
4236         if ((pState == GenesisProtocolLogic.ProposalState.Queued)||
4237             (pState == GenesisProtocolLogic.ProposalState.PreBoosted)||
4238             (pState == GenesisProtocolLogic.ProposalState.Boosted)||
4239             (pState == GenesisProtocolLogic.ProposalState.QuietEndingPeriod)) {
4240             executed = _genesisProtocol.execute(_proposalId);
4241         }
4242         pState = _genesisProtocol.state(_proposalId);
4243         if ((pState == GenesisProtocolLogic.ProposalState.Executed) ||
4244             (pState == GenesisProtocolLogic.ProposalState.ExpiredInQueue)) {
4245             gpRewards = _genesisProtocol.redeem(_proposalId, _beneficiary);
4246             if (pState == GenesisProtocolLogic.ProposalState.Executed) {
4247                 (gpDaoBountyReward[0], gpDaoBountyReward[1]) =
4248                 _genesisProtocol.redeemDaoBounty(_proposalId, _beneficiary);
4249             }
4250             winningVote = _genesisProtocol.winningVote(_proposalId);
4251             callContributionReward = true;
4252         }
4253     }
4254 
4255     function contributionRewardRedeem(ContributionReward _contributionReward, bytes32 _proposalId, Avatar _avatar)
4256     private
4257     returns (int256 reputation, uint256 nativeToken, uint256 eth, uint256 externalToken)
4258     {
4259         bool[4] memory whatToRedeem;
4260         whatToRedeem[0] = true; //reputation
4261         whatToRedeem[1] = true; //nativeToken
4262         uint256 periodsToPay = _contributionReward.getPeriodsToPay(_proposalId, address(_avatar), 2);
4263         uint256 ethReward = _contributionReward.getProposalEthReward(_proposalId, address(_avatar));
4264         uint256 externalTokenReward = _contributionReward.getProposalExternalTokenReward(_proposalId, address(_avatar));
4265         address externalTokenAddress = _contributionReward.getProposalExternalToken(_proposalId, address(_avatar));
4266         ethReward = periodsToPay.mul(ethReward);
4267         if ((ethReward == 0) || (address(_avatar).balance < ethReward)) {
4268             whatToRedeem[2] = false;
4269         } else {
4270             whatToRedeem[2] = true;
4271         }
4272         periodsToPay = _contributionReward.getPeriodsToPay(_proposalId, address(_avatar), 3);
4273         externalTokenReward = periodsToPay.mul(externalTokenReward);
4274         if ((externalTokenReward == 0) ||
4275             (IERC20(externalTokenAddress).balanceOf(address(_avatar)) < externalTokenReward)) {
4276             whatToRedeem[3] = false;
4277         } else {
4278             whatToRedeem[3] = true;
4279         }
4280         (reputation, nativeToken, eth, externalToken) = _contributionReward.redeem(_proposalId, _avatar, whatToRedeem);
4281     }
4282 
4283     function contributionRewardExtRedeem(ContributionRewardExt _contributionRewardExt, bytes32 _proposalId)
4284     private
4285     returns (int256 reputation, uint256 nativeToken, uint256 eth, uint256 externalToken)
4286     {
4287         bool[4] memory whatToRedeem;
4288         whatToRedeem[0] = true; //reputation
4289         whatToRedeem[1] = true; //nativeToken
4290         uint256 ethReward = _contributionRewardExt.getProposalEthReward(_proposalId);
4291         uint256 externalTokenReward = _contributionRewardExt.getProposalExternalTokenReward(_proposalId);
4292         address externalTokenAddress = _contributionRewardExt.getProposalExternalToken(_proposalId);
4293         if ((ethReward == 0) || (address(_contributionRewardExt.avatar()).balance < ethReward)) {
4294             whatToRedeem[2] = false;
4295         } else {
4296             whatToRedeem[2] = true;
4297         }
4298         if ((externalTokenReward == 0) ||
4299             (IERC20(externalTokenAddress).balanceOf(address(_contributionRewardExt.avatar())) < externalTokenReward)) {
4300             whatToRedeem[3] = false;
4301         } else {
4302             whatToRedeem[3] = true;
4303         }
4304         (reputation, nativeToken, eth, externalToken) = _contributionRewardExt.redeem(_proposalId, whatToRedeem);
4305     }
4306 }