1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
6     },
7     "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
9     },
10     "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
12     },
13     "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
15     },
16     "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
18     },
19     "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
21     },
22     "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
24     },
25     "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
27     },
28     "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/access/Ownable.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/proxy/Clones.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
39     },
40     "contracts/Token_Factory.sol": {
41       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"./Token_Implementation.sol\";\r\n\r\ncontract TokenFactory is Ownable {\r\n    address public logicContract;\r\n\r\n    event ProxyCreated(address indexed proxy);\r\n\r\n    constructor(address _logicContract) {\r\n        logicContract = _logicContract;\r\n    }\r\n\r\n    function createProxy(address owner, string memory name, string memory symbol, uint256 initialSupply) public onlyOwner returns (address) {\r\n        address newToken = Clones.clone(logicContract);\r\n        TokenImplementation(newToken).initialize(owner, name, symbol, initialSupply);\r\n        emit ProxyCreated(newToken);\r\n        return newToken;\r\n    }\r\n}\r\n"
42     },
43     "contracts/Token_Implementation.sol": {
44       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/security/Pausable.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (a supervisor) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the supervisor account will be the one that deploys the contract. This\r\n * can later be changed with {transferSupervisorOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlySupervisor`, which can be applied to your functions to restrict their use to\r\n * the supervisor.\r\n */\r\nabstract contract Supervisable is Initializable, ContextUpgradeable {\r\n    address private _supervisor;\r\n\r\n    event SupervisorOwnershipTransferred(address indexed previouSupervisor, address indexed newSupervisor);\r\n\r\n    function __Supervisable_init() internal onlyInitializing {\r\n        __Supervisable_init_unchained();\r\n    }\r\n\r\n    function __Supervisable_init_unchained() internal onlyInitializing {\r\n        _transferSupervisorOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current supervisor.\r\n     */\r\n    function supervisor() public view virtual returns (address) {\r\n        return _supervisor;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the supervisor.\r\n     */\r\n    modifier onlySupervisor() {\r\n        require(supervisor() == _msgSender(), \"Supervisable: caller is not the supervisor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers supervisor ownership of the contract to a new account (`newSupervisor`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferSupervisorOwnership(address newSupervisor) internal virtual {\r\n        address oldSupervisor = _supervisor;\r\n        _supervisor = newSupervisor;\r\n        emit SupervisorOwnershipTransferred(oldSupervisor, newSupervisor);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract Burnable is ContextUpgradeable {\r\n    mapping(address => bool) private _burners;\r\n\r\n    event BurnerAdded(address indexed account);\r\n    event BurnerRemoved(address indexed account);\r\n\r\n    /**\r\n     * @dev Returns whether the address is burner.\r\n     */\r\n    function isBurner(address account) public view returns (bool) {\r\n        return _burners[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the burner.\r\n     */\r\n    modifier onlyBurner() {\r\n        require(_burners[_msgSender()], \"Burnable: caller is not a burner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Add burner, only owner can add burner.\r\n     */\r\n    function _addBurner(address account) internal {\r\n        _burners[account] = true;\r\n        emit BurnerAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove operator, only owner can remove operator\r\n     */\r\n    function _removeBurner(address account) internal {\r\n        _burners[account] = false;\r\n        emit BurnerRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract for freezing mechanism.\r\n * Owner can add freezed account.\r\n * Supervisor can remove freezed account.\r\n */\r\ncontract Freezable is ContextUpgradeable {\r\n    mapping(address => bool) private _freezes;\r\n\r\n    event Freezed(address indexed account);\r\n    event Unfreezed(address indexed account);\r\n\r\n    /**\r\n     * @dev Freeze account, only owner can freeze\r\n     */\r\n    function _freeze(address account) internal {\r\n        _freezes[account] = true;\r\n        emit Freezed(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze account, only supervisor can unfreeze\r\n     */\r\n    function _unfreeze(address account) internal {\r\n        _freezes[account] = false;\r\n        emit Unfreezed(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the address is freezed.\r\n     */\r\n    function isFreezed(address account) public view returns (bool) {\r\n        return _freezes[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract for locking mechanism.\r\n * Locker can add and remove locked account.\r\n */\r\ncontract Lockable is ContextUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    struct TimeLock {\r\n        uint256 amount;\r\n        uint256 lockedAt;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    struct VestingLock {\r\n        uint256 amount;\r\n        uint256 lockedAt;\r\n        uint256 startsAt;\r\n        uint256 period;\r\n        uint256 count;\r\n    }\r\n\r\n    mapping(address => bool) private _lockers;\r\n    mapping(address => TimeLock[]) private _timeLocks;\r\n    mapping(address => VestingLock[]) private _vestingLocks;\r\n\r\n    event LockerAdded(address indexed account);\r\n    event LockerRemoved(address indexed account);\r\n    event TimeLocked(address indexed account);\r\n    event TimeUnlocked(address indexed account);\r\n    event VestingLocked(address indexed account);\r\n    event VestingUnlocked(address indexed account);\r\n    event VestingUpdated(address indexed account, uint256 index);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the locker.\r\n     */\r\n    modifier onlyLocker() {\r\n        require(_lockers[_msgSender()], \"Lockable: caller is not a locker\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the address is locker.\r\n     */\r\n    function isLocker(address account) public view returns (bool) {\r\n        return _lockers[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Add locker, only owner can add locker\r\n     */\r\n    function _addLocker(address account) internal {\r\n        _lockers[account] = true;\r\n        emit LockerAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove locker, only owner can remove locker\r\n     */\r\n    function _removeLocker(address account) internal {\r\n        _lockers[account] = false;\r\n        emit LockerRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Add time lock, only locker can add\r\n     */\r\n    function _addTimeLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 expiresAt\r\n    ) internal {\r\n        require(amount > 0, \"TimeLock: lock amount is 0\");\r\n        require(expiresAt > block.timestamp, \"TimeLock: invalid expire date\");\r\n        _timeLocks[account].push(TimeLock(amount, block.timestamp, expiresAt));\r\n        emit TimeLocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove time lock, only locker can remove\r\n     * @param account The address want to remove time lock\r\n     * @param index Time lock index\r\n     */\r\n    function _removeTimeLock(address account, uint8 index) internal {\r\n        require(_timeLocks[account].length > index && index >= 0, \"TimeLock: invalid index\");\r\n\r\n        uint256 len = _timeLocks[account].length;\r\n        if (len - 1 != index) {\r\n            // if it is not last item, swap it\r\n            _timeLocks[account][index] = _timeLocks[account][len - 1];\r\n        }\r\n        _timeLocks[account].pop();\r\n        emit TimeUnlocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Get time lock array length\r\n     * @param account The address want to know the time lock length.\r\n     * @return time lock length\r\n     */\r\n    function getTimeLockLength(address account) public view returns (uint256) {\r\n        return _timeLocks[account].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get time lock info\r\n     * @param account The address want to know the time lock state.\r\n     * @param index Time lock index\r\n     * @return time lock info\r\n     */\r\n    function getTimeLock(address account, uint8 index) public view returns (uint256, uint256) {\r\n        require(_timeLocks[account].length > index && index >= 0, \"TimeLock: invalid index\");\r\n        return (_timeLocks[account][index].amount, _timeLocks[account][index].expiresAt);\r\n    }\r\n\r\n    function getAllTimeLocks(address account) public view returns (TimeLock[] memory) {\r\n        require(account != address(0), \"TimeLock: query for the zero address\");\r\n        return _timeLocks[account];\r\n    }\r\n\r\n    /**\r\n     * @dev get total time locked amount of address\r\n     * @param account The address want to know the time lock amount.\r\n     * @return time locked amount\r\n     */\r\n    function getTimeLockedAmount(address account) public view returns (uint256) {\r\n        uint256 timeLockedAmount = 0;\r\n\r\n        uint256 len = _timeLocks[account].length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (block.timestamp < _timeLocks[account][i].expiresAt) {\r\n                timeLockedAmount = timeLockedAmount + _timeLocks[account][i].amount;\r\n            }\r\n        }\r\n        return timeLockedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Add vesting lock, only locker can add\r\n     * @param account vesting lock account.\r\n     * @param amount vesting lock amount.\r\n     * @param startsAt vesting lock release start date.\r\n     * @param period vesting lock period. End date is startsAt + (period - 1) * count\r\n     * @param count vesting lock count. If count is 1, it works like a time lock\r\n     */\r\n    function _addVestingLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) internal {\r\n        require(account != address(0), \"VestingLock: lock from the zero address\");\r\n        // require(startsAt > block.timestamp, \"VestingLock: must set after now\");\r\n        require(period > 0, \"VestingLock: period is 0\");\r\n        require(count > 0, \"VestingLock: count is 0\");\r\n        _vestingLocks[account].push(VestingLock(amount, block.timestamp, startsAt, period, count));\r\n        emit VestingLocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove vesting lock, only supervisor can remove\r\n     * @param account The address want to remove the vesting lock\r\n     */\r\n    function _removeVestingLock(address account, uint256 index) internal {\r\n        require(index < _vestingLocks[account].length, \"Invalid index\");\r\n\r\n        if (index != _vestingLocks[account].length - 1) {\r\n            _vestingLocks[account][index] = _vestingLocks[account][_vestingLocks[account].length - 1];\r\n        }\r\n        _vestingLocks[account].pop();\r\n    }\r\n\r\n    function _updateVestingLock(\r\n        address account,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) internal {\r\n        require(account != address(0), \"VestingLock: lock from the zero address\");\r\n        // require(startsAt > block.timestamp, \"VestingLock: must set after now\");\r\n        require(amount > 0, \"VestingLock: amount is 0\");\r\n        require(period > 0, \"VestingLock: period is 0\");\r\n        require(count > 0, \"VestingLock: count is 0\");\r\n\r\n        VestingLock storage lock = _vestingLocks[account][index];\r\n        lock.amount = amount;\r\n        lock.startsAt = startsAt;\r\n        lock.period = period;\r\n        lock.count = count;\r\n\r\n        emit VestingUpdated(account, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Get vesting lock info\r\n     * @param account The address want to know the vesting lock state.\r\n     * @return vesting lock info\r\n     */\r\n    function getVestingLock(address account, uint256 index) public view returns (VestingLock memory) {\r\n        return _vestingLocks[account][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Get total vesting locked amount of address, locked amount will be released by 100%/months\r\n     * If months is 5, locked amount released 20% per 1 month.\r\n     * @param account The address want to know the vesting lock amount.\r\n     * @return vesting locked amount\r\n     */\r\n    function getVestingLockedAmount(address account) public view returns (uint256) {\r\n        uint256 vestingLockedAmount = 0;\r\n        for (uint256 i = 0; i < _vestingLocks[account].length; i++) {\r\n          VestingLock memory lock = _vestingLocks[account][i];\r\n          \r\n          uint256 amount = lock.amount;\r\n          if (amount > 0) {\r\n              uint256 startsAt = lock.startsAt;\r\n              uint256 period = lock.period;\r\n              uint256 count = lock.count;\r\n              uint256 expiresAt = startsAt + period * (count);\r\n              uint256 timestamp = block.timestamp;\r\n              if (timestamp < startsAt) {\r\n                  vestingLockedAmount += amount;\r\n              } else if (timestamp < expiresAt) {\r\n                  vestingLockedAmount += (amount * ((expiresAt - timestamp) / period)) / count;\r\n              }\r\n          }\r\n        }\r\n        return vestingLockedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get all locked amount\r\n     * @param account The address want to know the all locked amount\r\n     * @return all locked amount\r\n     */\r\n    function getAllLockedAmount(address account) public view returns (uint256) {\r\n        return getTimeLockedAmount(account) + getVestingLockedAmount(account);\r\n    }\r\n\r\n    function getAllVestingCount(address account) public view returns (uint256) {\r\n        require(account != address(0), \"VestingLock: query for the zero address\");\r\n        return _vestingLocks[account].length;\r\n    }\r\n\r\n    function getAllVestings(address account) public view returns (VestingLock[] memory) {\r\n        require(account != address(0), \"VestingLock: query for the zero address\");\r\n        return _vestingLocks[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract for vesting, timelock enabled ERC-20 token\r\n */\r\ncontract TokenImplementation is Initializable, PausableUpgradeable, OwnableUpgradeable, Supervisable, Burnable, Freezable, Lockable, ERC20Upgradeable {\r\n\r\n    function initialize(address owner, string memory name, string memory symbol, uint256 initialSupply) public initializer {\r\n        __Ownable_init();\r\n        __Supervisable_init();\r\n        __ERC20_init(name, symbol);\r\n        _mint(owner, initialSupply * 10 ** decimals());\r\n\r\n        addLocker(owner);\r\n        transferSupervisorOwnership(owner);\r\n        transferOwnership(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Recover ERC20 token in contract address.\r\n     * @param tokenAddress The token contract address\r\n     * @param tokenAmount Number of tokens to be sent\r\n     */\r\n    function recoverToken(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        IERC20Upgradeable(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev lock and pause before transfer token\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20Upgradeable) {\r\n        require(!isFreezed(from), \"Freezable: token transfer from freezed account\");\r\n        require(!isFreezed(to), \"Freezable: token transfer to freezed account\");\r\n        require(!isFreezed(_msgSender()), \"Freezable: token transfer called from freezed account\");\r\n        require(!paused(), \"Pausable: token transfer while paused\");\r\n        if (from != address(0)) require(balanceOf(from) - getAllLockedAmount(from) >= amount, \"Lockable: insufficient transfer amount\");\r\n\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev only supervisor can renounce supervisor ownership\r\n     */\r\n    function renounceSupervisorOwnership() public onlySupervisor whenNotPaused {\r\n        _transferSupervisorOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev only supervisor can transfer supervisor ownership\r\n     */\r\n    function transferSupervisorOwnership(address newSupervisor) public onlySupervisor whenNotPaused {\r\n        require(newSupervisor != address(0), \"Supervisable: new supervisor is the zero address\");\r\n        _transferSupervisorOwnership(newSupervisor);\r\n    }\r\n\r\n    /**\r\n     * @dev pause all coin transfer\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev unpause all coin transfer\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can lock account\r\n     */\r\n    function freeze(address account) public onlyOwner whenNotPaused {\r\n        _freeze(account);\r\n    }\r\n\r\n    /**\r\n     * @dev only supervisor can unfreeze account\r\n     */\r\n    function unfreeze(address account) public onlySupervisor whenNotPaused {\r\n        _unfreeze(account);\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can add burner\r\n     */\r\n    function addBurner(address account) public onlyOwner whenNotPaused {\r\n        _addBurner(account);\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can remove burner\r\n     */\r\n    function removeBurner(address account) public onlyOwner whenNotPaused {\r\n        _removeBurner(account);\r\n    }\r\n\r\n    /**\r\n     * @dev burn burner's coin\r\n     */\r\n    function burn(uint256 amount) public onlyBurner whenNotPaused {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can add locker\r\n     */\r\n    function addLocker(address account) public onlyOwner whenNotPaused {\r\n        _addLocker(account);\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can remove locker\r\n     */\r\n    function removeLocker(address account) public onlyOwner whenNotPaused {\r\n        _removeLocker(account);\r\n    }\r\n\r\n    /**\r\n     * @dev only locker can add time lock\r\n     */\r\n    function addTimeLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 expiresAt\r\n    ) public onlyLocker whenNotPaused {\r\n        _addTimeLock(account, amount, expiresAt);\r\n    }\r\n\r\n    /**\r\n     * @dev only supervisor can remove time lock\r\n     */\r\n    function removeTimeLock(address account, uint8 index) public onlySupervisor whenNotPaused {\r\n        _removeTimeLock(account, index);\r\n    }\r\n\r\n    /**\r\n     * @dev only locker can add vesting lock\r\n     */\r\n    function addVestingLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyLocker whenNotPaused {\r\n        require(amount > 0 && balanceOf(account) >= amount, \"VestingLock: amount is 0 or over balance\");\r\n        _addVestingLock(account, amount, startsAt, period, count);\r\n    }\r\n\r\n    function updateVestingLock(\r\n        address account,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyLocker whenNotPaused {\r\n        _updateVestingLock(account, index, amount, startsAt, period, count);\r\n    }\r\n\r\n    /**\r\n     * @dev only supervisor can remove vesting lock\r\n     */\r\n    function removeVestingLock(address account, uint index) public onlySupervisor whenNotPaused {\r\n        _removeVestingLock(account, index);\r\n    }\r\n\r\n    function batchTransfer(address[] memory recipients, uint256[] memory amounts) public {\r\n        require(recipients.length == amounts.length, \"EML: recipients and amounts length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            transfer(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function vestedTransfer(\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyLocker whenNotPaused {\r\n        // Transfer tokens to the recipient\r\n        transfer(recipient, amount);\r\n\r\n        // Add a vesting lock for the recipient\r\n        addVestingLock(recipient, amount, startsAt, period, count);\r\n    }\r\n\r\n    function lockedTransfer(\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 expiresAt\r\n    ) public onlyLocker whenNotPaused {\r\n        // Transfer tokens to the recipient\r\n        transfer(recipient, amount);\r\n\r\n        // Add a timed lock for the recipient\r\n        addTimeLock(recipient, amount, expiresAt);\r\n    }\r\n\r\n    function batchVestedTransfer(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint256[] memory startsAt,\r\n        uint256[] memory periods,\r\n        uint256[] memory counts\r\n    ) public onlyLocker whenNotPaused {\r\n        require(\r\n            recipients.length == amounts.length &&\r\n            ((recipients.length == startsAt.length && recipients.length == periods.length && recipients.length == counts.length) || \r\n            (startsAt.length == 1 && periods.length == 1 && counts.length == 1)),\r\n            \"EML: arrays must have the same length\"\r\n        );\r\n\r\n        if (startsAt.length == 1 && periods.length == 1 && counts.length == 1) {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addVestingLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    startsAt[0],\r\n                    periods[0],\r\n                    counts[0]\r\n                );\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addVestingLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    startsAt[i],\r\n                    periods[i],\r\n                    counts[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchTimeLockedTransfer(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint256[] memory expiresAt\r\n    ) public onlyLocker whenNotPaused {\r\n        require(\r\n            recipients.length == amounts.length &&\r\n            ((recipients.length == expiresAt.length) || (expiresAt.length == 1)),\r\n            \"EML: arrays must have the same length\"\r\n        );\r\n\r\n        if (expiresAt.length == 1) {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addTimeLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    expiresAt[0]\r\n                );\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addTimeLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    expiresAt[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n}"
45     }
46   },
47   "settings": {
48     "optimizer": {
49       "enabled": true,
50       "runs": 200
51     },
52     "outputSelection": {
53       "*": {
54         "*": [
55           "evm.bytecode",
56           "evm.deployedBytecode",
57           "abi"
58         ]
59       }
60     }
61   }
62 }}