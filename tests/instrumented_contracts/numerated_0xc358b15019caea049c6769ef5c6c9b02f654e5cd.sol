1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/NONLaunchpad.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\n//   _   _  ____  _   _   _                            _                     _\r\n//  | \\ | |/ __ \\| \\ | | | |                          | |                   | |\r\n//  |  \\| | |  | |  \\| | | |     __ _ _   _ _ __   ___| |__  _ __   __ _  __| |\r\n//  | . ` | |  | | . ` | | |    / _` | | | | '_ \\ / __| '_ \\| '_ \\ / _` |/ _` |\r\n//  | |\\  | |__| | |\\  | | |___| (_| | |_| | | | | (__| | | | |_) | (_| | (_| |\r\n//  |_| \\_|\\____/|_| \\_| |______\\__,_|\\__,_|_| |_|\\___|_| |_| .__/ \\__,_|\\__,_|\r\n//                                                          | |\r\n//                                                          |_|\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"./enum/LaunchpadEnums.sol\";\r\nimport \"./interface/ILaunchpadProxy.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n// NON Launchpad\r\ncontract NONLaunchpad is Ownable, ReentrancyGuard, Pausable {\r\n    event LaunchpadBuyEvt(\r\n        bytes4 indexed proxyId,\r\n        bytes4 launchpadId,\r\n        uint256 roundsIdx,\r\n        uint256 quantity,\r\n        uint256 payValue\r\n    );\r\n    event ProxyRegistered(\r\n        bytes4 indexed launchpadProxyId,\r\n        address indexed proxyAddress\r\n    );\r\n    event LaunchpadSetBaseURIEvt(\r\n        bytes4 proxyId,\r\n        bytes4 launchpadId,\r\n        string baseURI\r\n    );\r\n    mapping(bytes4 => address) public launchpadRegistry;\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * Register LaunchpadProxy\r\n     */\r\n    function registerLaunchpadProxy(address proxy) external onlyOwner {\r\n        bytes4 registryProxyId = ILaunchpadProxy(proxy).getProxyId();\r\n        require(\r\n            launchpadRegistry[registryProxyId] == address(0),\r\n            LaunchpadEnums.PROXY_ID_ALREADY_EXIST\r\n        );\r\n        launchpadRegistry[registryProxyId] = proxy;\r\n        emit ProxyRegistered(registryProxyId, proxy);\r\n    }\r\n\r\n    /**\r\n     * GetRegistry\r\n     */\r\n    function getRegistry(bytes4 proxyId) external view returns (address) {\r\n        return launchpadRegistry[proxyId];\r\n    }\r\n\r\n    /**\r\n     * LaunchpadBuy - main method\r\n     */\r\n    function launchpadBuy(\r\n        bytes4 proxyId,\r\n        bytes4 launchpadId,\r\n        uint256 roundsIdx,\r\n        uint256 quantity,\r\n        bytes memory signature\r\n    ) external payable nonReentrant whenNotPaused {\r\n        address proxy = launchpadRegistry[proxyId];\r\n        require(proxy != address(0), LaunchpadEnums.PROXY_ID_NOT_EXIST);\r\n        uint256 paymentValue = ILaunchpadProxy(proxy).launchpadBuy{\r\n            value: msg.value\r\n        }(_msgSender(), launchpadId, roundsIdx, quantity, signature);\r\n        emit LaunchpadBuyEvt(\r\n            proxyId,\r\n            launchpadId,\r\n            roundsIdx,\r\n            quantity,\r\n            paymentValue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * LaunchpadSetBaseURI\r\n     */\r\n    function launchpadSetBaseURI(\r\n        bytes4 proxyId,\r\n        bytes4 launchpadId,\r\n        string memory baseURI\r\n    ) external nonReentrant whenNotPaused {\r\n        address proxy = launchpadRegistry[proxyId];\r\n        require(proxy != address(0), LaunchpadEnums.PROXY_ID_NOT_EXIST);\r\n        ILaunchpadProxy(proxy).launchpadSetBaseURI(\r\n            _msgSender(),\r\n            launchpadId,\r\n            baseURI\r\n        );\r\n        emit LaunchpadSetBaseURIEvt(proxyId, launchpadId, baseURI);\r\n    }\r\n\r\n    /**\r\n     * IsInWhiteList\r\n     */\r\n    function isInWhiteList(\r\n        bytes4 proxyId,\r\n        bytes4 launchpadId,\r\n        uint256 roundsIdx,\r\n        bytes memory signature,\r\n        address msgSender\r\n    ) external view returns (uint32) {\r\n        address proxy = launchpadRegistry[proxyId];\r\n        require(proxy != address(0), LaunchpadEnums.PROXY_ID_NOT_EXIST);\r\n        return\r\n            ILaunchpadProxy(proxy).isInWhiteList(\r\n                launchpadId,\r\n                roundsIdx,\r\n                signature,\r\n                msgSender\r\n            );\r\n    }\r\n}\r\n"
6     },
7     "/contracts/interface/ILaunchpadProxy.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n\r\n//   _   _  ____  _   _   _____ _                            _                     _ _____\r\n//  | \\ | |/ __ \\| \\ | | |_   _| |                          | |                   | |  __ \\\r\n//  |  \\| | |  | |  \\| |   | | | |     __ _ _   _ _ __   ___| |__  _ __   __ _  __| | |__) | __ _____  ___   _\r\n//  | . ` | |  | | . ` |   | | | |    / _` | | | | '_ \\ / __| '_ \\| '_ \\ / _` |/ _` |  ___/ '__/ _ \\ \\/ / | | |\r\n//  | |\\  | |__| | |\\  |  _| |_| |___| (_| | |_| | | | | (__| | | | |_) | (_| | (_| | |   | | | (_) >  <| |_| |\r\n//  |_| \\_|\\____/|_| \\_| |_____|______\\__,_|\\__,_|_| |_|\\___|_| |_| .__/ \\__,_|\\__,_|_|   |_|  \\___/_/\\_\\\\__, |\r\n//                                                                | |                                     __/ |\r\n//                                                                |_|                                    |___/                                                          |_|\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface ILaunchpadProxy {\r\n    function getProxyId() external pure returns (bytes4);\r\n\r\n    function launchpadBuy(\r\n        address sender,\r\n        bytes4 launchpadId,\r\n        uint256 roundsIdx,\r\n        uint256 quantity,\r\n        bytes memory signature\r\n    ) external payable returns (uint256);\r\n\r\n    function launchpadSetBaseURI(\r\n        address sender,\r\n        bytes4 launchpadId,\r\n        string memory baseURI\r\n    ) external;\r\n\r\n    function isInWhiteList(\r\n        bytes4 launchpadId,\r\n        uint256 roundsIdx,\r\n        bytes memory signature,\r\n        address msgSender\r\n    ) external view returns (uint32);\r\n}\r\n"
9     },
10     "/contracts/enum/LaunchpadEnums.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nlibrary LaunchpadEnums {\r\n    // 'ok'\r\n    string public constant OK = \"0\";\r\n    // 'proxy not exist'\r\n    string public constant PROXY_ID_NOT_EXIST = \"1\";\r\n    // 'proxy id already exists'\r\n    string public constant PROXY_ID_ALREADY_EXIST = \"2\";\r\n}\r\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/security/Pausable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "remappings": [],
28     "optimizer": {
29       "enabled": true,
30       "runs": 200
31     },
32     "evmVersion": "istanbul",
33     "libraries": {},
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     }
46   }
47 }}