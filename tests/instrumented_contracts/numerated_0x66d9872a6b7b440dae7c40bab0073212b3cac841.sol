1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/JIRAX.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/// @title JIRAX Sales Controller\n/// @author @whiteoakkong\n/// @notice This contract is designed to control the sale of JIRAX - the off-chain token for PG and associated projects.\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract JIRAXSalesController is Ownable {\n    event Deposit(address indexed sender, uint256 amount, address partner);\n\n    mapping(address => uint256) public PartnerRegistry;\n\n    address public JIRA;\n    address public INFINIT3;\n\n    uint256 private developerSplit;\n\n    constructor(address _JIRA, address _INFINIT3, uint256 _developerSplit) {\n        JIRA = _JIRA;\n        INFINIT3 = _INFINIT3;\n        developerSplit = _developerSplit;\n    }\n\n    function deposit(address partner) external payable {\n        uint256 affiliateSplit = (msg.value * PartnerRegistry[partner]) / 100;\n        if (affiliateSplit > 0) {\n            (bool success, ) = payable(partner).call{value: affiliateSplit}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n        emit Deposit(msg.sender, msg.value, partner);\n    }\n\n    function setPartner(address partner, uint256 split) external onlyOwner {\n        PartnerRegistry[partner] = split;\n    }\n\n    function withdraw() external {\n        require(msg.sender == INFINIT3 || msg.sender == JIRA || msg.sender == owner(), \"Not authorized\");\n        uint256 fee = (address(this).balance * developerSplit) / 100;\n        (bool success, ) = payable(INFINIT3).call{value: fee}(\"\");\n        require(success, \"Transfer failed.\");\n        (success, ) = payable(JIRA).call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function setDeveloperSplit(uint256 _developerSplit) external onlyOwner {\n        developerSplit = _developerSplit;\n    }\n\n    function changeWallets(address _address, uint256 selector) external onlyOwner {\n        if (selector == 0) JIRA = _address;\n        else if (selector == 1) INFINIT3 == _address;\n        else revert(\"Incorrect selector\");\n    }\n\n}\n\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": true,
17       "runs": 2000
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     }
31   }
32 }}