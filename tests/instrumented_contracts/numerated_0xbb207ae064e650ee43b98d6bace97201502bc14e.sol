1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "src/ZogzFunSales.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IPepeEditions {\n    function burn(address __from, uint256 __id, uint256 __amount) external;\n}\n\ninterface IZogzEditions {\n    function mint(address __account, uint256 __id, uint256 __amount) external;\n\n    function mintBatch(\n        address __account,\n        uint256[] memory __ids,\n        uint256[] memory __amounts\n    ) external;\n}\n\ncontract ZogzFunSales is Ownable, Pausable, ReentrancyGuard {\n    error AmountExceedsTransactionLimit();\n    error BurnAmountDoesNotMatch();\n    error BurnAmountMustBeExact();\n    error DayNotFound();\n    error FamilySetAlreadyExists();\n    error Forbidden();\n    error HasEnded();\n    error HasNotEnded();\n    error HasNotStarted();\n    error IncorrectPrice();\n    error InvalidAddress();\n    error InvalidAmount();\n    error InvalidBurnAmount();\n    error PepeEditionNotFound();\n    error WithdrawFailed();\n    error ZogzEditionNotFound();\n\n    event DailySetPurchase(address __account, uint256 __day, uint256 __amount);\n    event FamilySets(Family[] __families, uint256[][] __ids);\n    event FamilySetPurchase(\n        address __account,\n        Family __family,\n        uint256 __amount\n    );\n    event FullSetPurchase(address __account, uint256 __amount);\n    event Redemption(address __account, Special __special, uint256 __amount);\n    event SinglePurchase(\n        address __account,\n        uint256 __tokenID,\n        uint256 __amount\n    );\n    event TransactionLimit(uint256 __transactionLimit);\n    event Withdraw(uint256 __amount);\n\n    struct DailySet {\n        uint256 from;\n        uint256 start;\n        uint256 end;\n    }\n\n    enum Family {\n        RIPPERZ,\n        KILLERZ,\n        ALIENZ,\n        TRIPPERZ,\n        FLIPPERZ,\n        TROLLZ,\n        PHATTZ,\n        SLAPPERZ,\n        SMOKERZ,\n        LORDZ\n    }\n\n    enum Special {\n        RIPPER,\n        KILLER,\n        ALIEN,\n        TRIPPER,\n        FLIPPER,\n        TROLL,\n        PHATT,\n        SLAPPER,\n        SMOKER,\n        LORD,\n        GREATEST\n    }\n\n    struct SpecialData {\n        uint256 id;\n        uint256 cost;\n    }\n\n    uint256 public constant FULL_SET_SUPPLY = 100;\n    uint256 public constant DAILY_SET_SUPPLY = 10;\n\n    uint256 public constant MINT_PRICE = 0.01234 ether;\n\n    mapping(uint256 => uint256) public BURN_MULTIPLIERS;\n\n    uint256 public constant SALE_START = 1683565200;\n    uint256 public constant SALE_END = 1684601999;\n\n    mapping(uint256 => DailySet) public DAILY_SETS;\n    mapping(Family => uint256[]) public FAMILY_SETS;\n    mapping(Special => SpecialData) public SPECIAL_ZOGZ;\n\n    mapping(uint256 => uint256) _tokenToDailySet;\n\n    IPepeEditions public _pepeEditionsContract;\n    IZogzEditions public _zogzEditionsContract;\n\n    uint256 public transactionLimit = 1000;\n\n    constructor(\n        address __pepeEditionsContractAddress,\n        address __zogzEditionsContractAddress\n    ) {\n        if (__pepeEditionsContractAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (__zogzEditionsContractAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        _pepeEditionsContract = IPepeEditions(__pepeEditionsContractAddress);\n        _zogzEditionsContract = IZogzEditions(__zogzEditionsContractAddress);\n\n        BURN_MULTIPLIERS[1] = 1; // ZOGZ Pepe\n        BURN_MULTIPLIERS[3] = 10; // ZOGGED Pepe\n        BURN_MULTIPLIERS[2] = 50; // HEDZ Pepe\n        BURN_MULTIPLIERS[5] = 500; // RARE PEPZOGZ Pepe\n        BURN_MULTIPLIERS[4] = 600; // PEGZOGZ Pepe\n\n        SPECIAL_ZOGZ[Special.RIPPER] = SpecialData({id: 101, cost: 10});\n        SPECIAL_ZOGZ[Special.KILLER] = SpecialData({id: 102, cost: 20});\n        SPECIAL_ZOGZ[Special.ALIEN] = SpecialData({id: 103, cost: 20});\n        SPECIAL_ZOGZ[Special.TRIPPER] = SpecialData({id: 104, cost: 20});\n        SPECIAL_ZOGZ[Special.FLIPPER] = SpecialData({id: 105, cost: 5});\n        SPECIAL_ZOGZ[Special.TROLL] = SpecialData({id: 106, cost: 5});\n        SPECIAL_ZOGZ[Special.PHATT] = SpecialData({id: 107, cost: 7});\n        SPECIAL_ZOGZ[Special.SLAPPER] = SpecialData({id: 108, cost: 3});\n        SPECIAL_ZOGZ[Special.SMOKER] = SpecialData({id: 109, cost: 9});\n        SPECIAL_ZOGZ[Special.LORD] = SpecialData({id: 110, cost: 1});\n        SPECIAL_ZOGZ[Special.GREATEST] = SpecialData({id: 111, cost: 100});\n\n        DAILY_SETS[1] = DailySet({from: 1, start: 1683565200, end: 1683651599});\n        DAILY_SETS[2] = DailySet({\n            from: 11,\n            start: 1683651600,\n            end: 1683737999\n        });\n        DAILY_SETS[3] = DailySet({\n            from: 21,\n            start: 1683738000,\n            end: 1683824399\n        });\n        DAILY_SETS[4] = DailySet({\n            from: 31,\n            start: 1683824400,\n            end: 1683910799\n        });\n        DAILY_SETS[5] = DailySet({\n            from: 41,\n            start: 1683910800,\n            end: 1683997199\n        });\n        DAILY_SETS[6] = DailySet({\n            from: 51,\n            start: 1684170000,\n            end: 1684256399\n        });\n        DAILY_SETS[7] = DailySet({\n            from: 61,\n            start: 1684256400,\n            end: 1684342799\n        });\n        DAILY_SETS[8] = DailySet({\n            from: 71,\n            start: 1684342800,\n            end: 1684429199\n        });\n        DAILY_SETS[9] = DailySet({\n            from: 81,\n            start: 1684429200,\n            end: 1684515599\n        });\n        DAILY_SETS[10] = DailySet({\n            from: 91,\n            start: 1684515600,\n            end: 1684601999\n        });\n\n        for (uint256 id = 1; id <= FULL_SET_SUPPLY; id++) {\n            if (id > 90) {\n                _tokenToDailySet[id] = 10;\n            } else if (id > 80) {\n                _tokenToDailySet[id] = 9;\n            } else if (id > 70) {\n                _tokenToDailySet[id] = 8;\n            } else if (id > 60) {\n                _tokenToDailySet[id] = 7;\n            } else if (id > 50) {\n                _tokenToDailySet[id] = 6;\n            } else if (id > 40) {\n                _tokenToDailySet[id] = 5;\n            } else if (id > 30) {\n                _tokenToDailySet[id] = 4;\n            } else if (id > 20) {\n                _tokenToDailySet[id] = 3;\n            } else if (id > 10) {\n                _tokenToDailySet[id] = 2;\n            } else {\n                _tokenToDailySet[id] = 1;\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // MODIFIERS\n    ////////////////////////////////////////////////////////////////////////////\n\n    modifier onlyEOA() {\n        if (tx.origin != msg.sender) {\n            revert Forbidden();\n        }\n        _;\n    }\n\n    modifier onlyExistingDay(uint256 __day) {\n        if (__day == 0 || __day > 10) {\n            revert DayNotFound();\n        }\n        _;\n    }\n\n    modifier onlyExistingPepeEdition(uint256 __tokenID) {\n        if (__tokenID == 0 || __tokenID > 5) {\n            revert PepeEditionNotFound();\n        }\n        _;\n    }\n\n    modifier onlyExistingSpecialEdition(Special __special) {\n        if (SPECIAL_ZOGZ[__special].id == 0) {\n            revert ZogzEditionNotFound();\n        }\n        _;\n    }\n\n    modifier onlyExistingZogzEdition(uint256 __tokenID) {\n        if (__tokenID == 0 || __tokenID > 100) {\n            revert ZogzEditionNotFound();\n        }\n        _;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // OWNER\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Used to pause sales.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Used to unpause sales.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Used to set new transaction limit.\n     */\n    function setTransactionLimit(\n        uint256 __transactionLimit\n    ) external onlyOwner {\n        transactionLimit = __transactionLimit;\n\n        emit TransactionLimit(__transactionLimit);\n    }\n\n    /**\n     * @dev Used to set family sets.\n     */\n    function setFamilySets(\n        Family[] calldata __familySets,\n        uint256[][] calldata __ids\n    ) external onlyOwner {\n        for (uint256 i = 0; i < __familySets.length; i++) {\n            if (FAMILY_SETS[__familySets[i]].length > 0) {\n                revert FamilySetAlreadyExists();\n            }\n            FAMILY_SETS[__familySets[i]] = __ids[i];\n        }\n\n        emit FamilySets(__familySets, __ids);\n    }\n\n    /**\n     * @dev Used to withdraw funds from the contract.\n     */\n    function withdraw(uint256 __amount) external onlyOwner {\n        (bool success, ) = owner().call{value: __amount}(\"\");\n\n        if (!success) revert WithdrawFailed();\n\n        emit Withdraw(__amount);\n    }\n\n    /**\n     * @dev Used to withdraw all funds from the contract.\n     */\n    function withdrawAll() external onlyOwner {\n        uint256 amount = address(this).balance;\n\n        (bool success, ) = owner().call{value: amount}(\"\");\n\n        if (!success) revert WithdrawFailed();\n\n        emit Withdraw(amount);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // INTERNALS\n    ////////////////////////////////////////////////////////////////////////////\n\n    function _burn(\n        uint256 __burnTokenId,\n        uint256 __burnAmount,\n        uint256 __burnMultiplier\n    ) internal {\n        if (__burnAmount == 0) {\n            revert InvalidBurnAmount();\n        }\n\n        uint256 burnAmountRemainder = __burnMultiplier %\n            BURN_MULTIPLIERS[__burnTokenId];\n\n        if (burnAmountRemainder != 0) {\n            revert BurnAmountMustBeExact();\n        }\n\n        uint256 calculatedBurnAmount = __burnMultiplier /\n            BURN_MULTIPLIERS[__burnTokenId];\n\n        if (calculatedBurnAmount == 0) {\n            revert InvalidBurnAmount();\n        }\n\n        if (calculatedBurnAmount != __burnAmount) {\n            revert BurnAmountDoesNotMatch();\n        }\n\n        _pepeEditionsContract.burn(\n            _msgSender(),\n            __burnTokenId,\n            calculatedBurnAmount\n        );\n    }\n\n    function _mint(uint256 __tokenID, uint256 __amount) internal {\n        _zogzEditionsContract.mint(_msgSender(), __tokenID, __amount);\n    }\n\n    function _mintBatch(\n        uint256 __from,\n        uint256 __to,\n        uint256 __amount\n    ) internal {\n        uint256 total = __to - __from + 1;\n\n        uint256[] memory ids = new uint256[](total);\n        uint256[] memory amounts = new uint256[](total);\n        for (uint256 i = 0; i < total; i++) {\n            ids[i] = i + __from;\n            amounts[i] = __amount;\n        }\n\n        _zogzEditionsContract.mintBatch(_msgSender(), ids, amounts);\n    }\n\n    function _mintBatchIds(uint256[] memory __ids, uint256 __amount) internal {\n        uint256[] memory amounts = new uint256[](__ids.length);\n        for (uint256 i = 0; i < __ids.length; i++) {\n            amounts[i] = __amount;\n        }\n\n        _zogzEditionsContract.mintBatch(_msgSender(), __ids, amounts);\n    }\n\n    function _validateTotalAmountAndPrice(uint256 __totalAmount) internal view {\n        if (__totalAmount == 0) {\n            revert InvalidAmount();\n        }\n\n        if (__totalAmount > transactionLimit) {\n            revert AmountExceedsTransactionLimit();\n        }\n\n        if (msg.value != MINT_PRICE * __totalAmount) {\n            revert IncorrectPrice();\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // WRITES\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Used to buy a Full Set (burn-gating).\n     *\n     * Requirements:\n     *\n     * - `__amount` must be greater than `0`.\n     * - `__burnTokenId` must be an existing Pepe Edition.\n     * - `__burnAmount` must match the burn amount needed for `__amount`.\n     *\n     * Emits a {FullSetPurchase} event.\n     *\n     */\n    function buyFullSetWithBurn(\n        uint256 __amount,\n        uint256 __burnTokenId,\n        uint256 __burnAmount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingPepeEdition(__burnTokenId)\n    {\n        uint256 totalAmount = __amount * FULL_SET_SUPPLY;\n\n        _validateTotalAmountAndPrice(totalAmount);\n\n        if (block.timestamp < SALE_START) {\n            revert HasNotStarted();\n        }\n\n        _burn(__burnTokenId, __burnAmount, totalAmount);\n        _mintBatch(1, FULL_SET_SUPPLY, __amount);\n\n        emit FullSetPurchase(_msgSender(), __amount);\n    }\n\n    /**\n     * @dev Used to buy a Single ZOGZ.\n     *\n     * Requirements:\n     *\n     * - `__tokenID` must be a valid ZOGZ (1-100).\n     * - `__amount` must be greater than `0`.\n     *\n     * Emits a {SinglePurchase} event.\n     *\n     */\n    function buySingle(\n        uint256 __tokenID,\n        uint256 __amount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingZogzEdition(__tokenID)\n    {\n        _validateTotalAmountAndPrice(__amount);\n\n        DailySet memory dailySet = DAILY_SETS[_tokenToDailySet[__tokenID]];\n\n        if (block.timestamp < dailySet.start) {\n            revert HasNotStarted();\n        }\n        if (block.timestamp > dailySet.end) {\n            revert HasEnded();\n        }\n\n        _mint(__tokenID, __amount);\n\n        emit SinglePurchase(_msgSender(), __tokenID, __amount);\n    }\n\n    /**\n     * @dev Used to buy a Single ZOGZ (burn-gating).\n     *\n     * Requirements:\n     *\n     * - `__tokenID` must be a valid ZOGZ (1-100).\n     * - `__amount` must be greater than `0`.\n     * - `__burnTokenId` must be an existing Pepe Edition.\n     * - `__burnAmount` must match the burn amount needed for `__amount`.\n     *\n     * Emits a {SinglePurchase} event.\n     *\n     */\n    function buySingleWithBurn(\n        uint256 __tokenID,\n        uint256 __amount,\n        uint256 __burnTokenId,\n        uint256 __burnAmount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingZogzEdition(__tokenID)\n        onlyExistingPepeEdition(__burnTokenId)\n    {\n        _validateTotalAmountAndPrice(__amount);\n\n        DailySet memory dailySet = DAILY_SETS[_tokenToDailySet[__tokenID]];\n\n        if (block.timestamp < dailySet.end) {\n            revert HasNotStarted();\n        }\n\n        _burn(__burnTokenId, __burnAmount, __amount);\n        _mint(__tokenID, __amount);\n\n        emit SinglePurchase(_msgSender(), __tokenID, __amount);\n    }\n\n    /**\n     * @dev Used to buy a Daily Set.\n     *\n     * Requirements:\n     *\n     * - `__day` must be a valid Day (1-10).\n     * - `__amount` must be greater than `0`.\n     *\n     * Emits a {DailySetPurchase} event.\n     *\n     */\n    function buyDailySet(\n        uint256 __day,\n        uint256 __amount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingDay(__day)\n    {\n        _validateTotalAmountAndPrice(__amount * DAILY_SET_SUPPLY);\n\n        DailySet memory dailySet = DAILY_SETS[__day];\n\n        if (block.timestamp < dailySet.start) {\n            revert HasNotStarted();\n        }\n        if (block.timestamp > dailySet.end) {\n            revert HasEnded();\n        }\n\n        _mintBatch(\n            dailySet.from,\n            dailySet.from + DAILY_SET_SUPPLY - 1,\n            __amount\n        );\n\n        emit DailySetPurchase(_msgSender(), __day, __amount);\n    }\n\n    /**\n     * @dev Used to buy a Daily Set (burn-gating).\n     *\n     * Requirements:\n     *\n     * - `__day` must be a valid Day (1-10).\n     * - `__amount` must be greater than `0`.\n     * - `__burnTokenId` must be an existing Pepe Edition.\n     * - `__burnAmount` must match the burn amount needed for `__day` x `__amount`.\n     *\n     * Emits a {DailySetPurchase} event.\n     *\n     */\n    function buyDailySetWithBurn(\n        uint256 __day,\n        uint256 __amount,\n        uint256 __burnTokenId,\n        uint256 __burnAmount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingDay(__day)\n    {\n        DailySet memory dailySet = DAILY_SETS[__day];\n\n        uint256 totalAmount = __amount * DAILY_SET_SUPPLY;\n\n        _validateTotalAmountAndPrice(totalAmount);\n\n        if (block.timestamp < dailySet.end) {\n            revert HasNotStarted();\n        }\n\n        _burn(__burnTokenId, __burnAmount, totalAmount);\n        _mintBatch(\n            dailySet.from,\n            dailySet.from + DAILY_SET_SUPPLY - 1,\n            __amount\n        );\n\n        emit DailySetPurchase(_msgSender(), __day, __amount);\n    }\n\n    /**\n     * @dev Used to buy a Family Set (burn-gating).\n     *\n     * Requirements:\n     *\n     * - `__family` must be an existing Family Set.\n     * - `__amount` must be greater than `0`.\n     * - `__burnTokenId` must be an existing Pepe Edition.\n     * - `__burnAmount` must match the burn amount needed for `__family` x `__amount`.\n     *\n     * Emits a {FamilySetPurchase} event.\n     *\n     */\n    function buyFamilySetWithBurn(\n        Family __family,\n        uint256 __amount,\n        uint256 __burnTokenId,\n        uint256 __burnAmount\n    )\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingPepeEdition(__burnTokenId)\n    {\n        uint256[] memory ids = FAMILY_SETS[__family];\n\n        if (block.timestamp < SALE_END) {\n            revert HasNotStarted();\n        }\n\n        uint256 totalAmount = __amount * ids.length;\n\n        _validateTotalAmountAndPrice(totalAmount);\n\n        _burn(__burnTokenId, __burnAmount, totalAmount);\n        _mintBatchIds(ids, __amount);\n\n        emit FamilySetPurchase(_msgSender(), __family, __amount);\n    }\n\n    /**\n     * @dev Used to redeem Special ZOGZ.\n     *\n     * Requirements:\n     *\n     * - `__special` must be an existing Special ZOGZ.\n     * - `__amount` must be greater than `0`.\n     * - `__burnTokenId` must be an existing Pepe Edition.\n     * - `__burnAmount` must match the burn amount needed for `__special` x `__amount`.\n     *\n     * Emits a {Redemption} event.\n     *\n     */\n    function redeemSpecialZogz(\n        Special __special,\n        uint256 __amount,\n        uint256 __burnTokenId,\n        uint256 __burnAmount\n    )\n        external\n        nonReentrant\n        whenNotPaused\n        onlyEOA\n        onlyExistingPepeEdition(__burnTokenId)\n        onlyExistingSpecialEdition(__special)\n    {\n        if (block.timestamp < SALE_START) {\n            revert HasNotStarted();\n        }\n\n        uint256 totalAmount = __amount * SPECIAL_ZOGZ[__special].cost;\n\n        _burn(__burnTokenId, __burnAmount, totalAmount);\n        _mint(SPECIAL_ZOGZ[__special].id, __amount);\n\n        emit Redemption(_msgSender(), __special, __amount);\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "remappings": [
22       "@openzeppelin/=lib/openzeppelin-contracts/",
23       "ds-test/=lib/forge-std/lib/ds-test/src/",
24       "forge-std/=lib/forge-std/src/",
25       "openzeppelin-contracts/=lib/openzeppelin-contracts/"
26     ],
27     "optimizer": {
28       "enabled": true,
29       "runs": 1000000
30     },
31     "metadata": {
32       "bytecodeHash": "ipfs",
33       "appendCBOR": true
34     },
35     "outputSelection": {
36       "*": {
37         "*": [
38           "evm.bytecode",
39           "evm.deployedBytecode",
40           "devdoc",
41           "userdoc",
42           "metadata",
43           "abi"
44         ]
45       }
46     },
47     "evmVersion": "london",
48     "libraries": {}
49   }
50 }}