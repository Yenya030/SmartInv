1 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
2 
3 pragma solidity ^0.5.4;
4 
5 interface IntVoteInterface {
6     //When implementing this interface please do not only override function and modifier,
7     //but also to keep the modifiers on the overridden functions.
8     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
9     modifier votable(bytes32 _proposalId) {revert(); _;}
10 
11     event NewProposal(
12         bytes32 indexed _proposalId,
13         address indexed _organization,
14         uint256 _numOfChoices,
15         address _proposer,
16         bytes32 _paramsHash
17     );
18 
19     event ExecuteProposal(bytes32 indexed _proposalId,
20         address indexed _organization,
21         uint256 _decision,
22         uint256 _totalReputation
23     );
24 
25     event VoteProposal(
26         bytes32 indexed _proposalId,
27         address indexed _organization,
28         address indexed _voter,
29         uint256 _vote,
30         uint256 _reputation
31     );
32 
33     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
34     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
35 
36     /**
37      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
38      * generated by calculating keccak256 of a incremented counter.
39      * @param _numOfChoices number of voting choices
40      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
41      * @param _proposer address
42      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
43      * @return proposal's id.
44      */
45     function propose(
46         uint256 _numOfChoices,
47         bytes32 _proposalParameters,
48         address _proposer,
49         address _organization
50         ) external returns(bytes32);
51 
52     function vote(
53         bytes32 _proposalId,
54         uint256 _vote,
55         uint256 _rep,
56         address _voter
57     )
58     external
59     returns(bool);
60 
61     function cancelVote(bytes32 _proposalId) external;
62 
63     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
64 
65     function isVotable(bytes32 _proposalId) external view returns(bool);
66 
67     /**
68      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
69      * @param _proposalId the ID of the proposal
70      * @param _choice the index in the
71      * @return voted reputation for the given choice
72      */
73     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
74 
75     /**
76      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
77      * @return bool true or false
78      */
79     function isAbstainAllow() external pure returns(bool);
80 
81     /**
82      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
83      * @return min - minimum number of choices
84                max - maximum number of choices
85      */
86     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
87 }
88 
89 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
90 
91 pragma solidity ^0.5.0;
92 
93 /**
94  * @title ERC20 interface
95  * @dev see https://github.com/ethereum/EIPs/issues/20
96  */
97 interface IERC20 {
98     function transfer(address to, uint256 value) external returns (bool);
99 
100     function approve(address spender, uint256 value) external returns (bool);
101 
102     function transferFrom(address from, address to, uint256 value) external returns (bool);
103 
104     function totalSupply() external view returns (uint256);
105 
106     function balanceOf(address who) external view returns (uint256);
107 
108     function allowance(address owner, address spender) external view returns (uint256);
109 
110     event Transfer(address indexed from, address indexed to, uint256 value);
111 
112     event Approval(address indexed owner, address indexed spender, uint256 value);
113 }
114 
115 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
116 
117 pragma solidity ^0.5.4;
118 
119 
120 interface VotingMachineCallbacksInterface {
121     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
122     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
123 
124     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
125     external
126     returns(bool);
127 
128     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
129     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
130     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
131 }
132 
133 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
134 
135 pragma solidity ^0.5.0;
136 
137 /**
138  * @title Ownable
139  * @dev The Ownable contract has an owner address, and provides basic authorization control
140  * functions, this simplifies the implementation of "user permissions".
141  */
142 contract Ownable {
143     address private _owner;
144 
145     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
146 
147     /**
148      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
149      * account.
150      */
151     constructor () internal {
152         _owner = msg.sender;
153         emit OwnershipTransferred(address(0), _owner);
154     }
155 
156     /**
157      * @return the address of the owner.
158      */
159     function owner() public view returns (address) {
160         return _owner;
161     }
162 
163     /**
164      * @dev Throws if called by any account other than the owner.
165      */
166     modifier onlyOwner() {
167         require(isOwner());
168         _;
169     }
170 
171     /**
172      * @return true if `msg.sender` is the owner of the contract.
173      */
174     function isOwner() public view returns (bool) {
175         return msg.sender == _owner;
176     }
177 
178     /**
179      * @dev Allows the current owner to relinquish control of the contract.
180      * @notice Renouncing to ownership will leave the contract without an owner.
181      * It will not be possible to call the functions with the `onlyOwner`
182      * modifier anymore.
183      */
184     function renounceOwnership() public onlyOwner {
185         emit OwnershipTransferred(_owner, address(0));
186         _owner = address(0);
187     }
188 
189     /**
190      * @dev Allows the current owner to transfer control of the contract to a newOwner.
191      * @param newOwner The address to transfer ownership to.
192      */
193     function transferOwnership(address newOwner) public onlyOwner {
194         _transferOwnership(newOwner);
195     }
196 
197     /**
198      * @dev Transfers control of the contract to a newOwner.
199      * @param newOwner The address to transfer ownership to.
200      */
201     function _transferOwnership(address newOwner) internal {
202         require(newOwner != address(0));
203         emit OwnershipTransferred(_owner, newOwner);
204         _owner = newOwner;
205     }
206 }
207 
208 // File: @daostack/infra/contracts/Reputation.sol
209 
210 pragma solidity ^0.5.4;
211 
212 
213 
214 /**
215  * @title Reputation system
216  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
217  * A reputation is use to assign influence measure to a DAO'S peers.
218  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
219  * The Reputation contract maintain a map of address to reputation value.
220  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
221  */
222 
223 contract Reputation is Ownable {
224 
225     uint8 public decimals = 18;             //Number of decimals of the smallest unit
226     // Event indicating minting of reputation to an address.
227     event Mint(address indexed _to, uint256 _amount);
228     // Event indicating burning of reputation for an address.
229     event Burn(address indexed _from, uint256 _amount);
230 
231       /// @dev `Checkpoint` is the structure that attaches a block number to a
232       ///  given value, the block number attached is the one that last changed the
233       ///  value
234     struct Checkpoint {
235 
236     // `fromBlock` is the block number that the value was generated from
237         uint128 fromBlock;
238 
239           // `value` is the amount of reputation at a specific block number
240         uint128 value;
241     }
242 
243       // `balances` is the map that tracks the balance of each address, in this
244       //  contract when the balance changes the block number that the change
245       //  occurred is also included in the map
246     mapping (address => Checkpoint[]) balances;
247 
248       // Tracks the history of the `totalSupply` of the reputation
249     Checkpoint[] totalSupplyHistory;
250 
251     /// @notice Constructor to create a Reputation
252     constructor(
253     ) public
254     {
255     }
256 
257     /// @dev This function makes it easy to get the total number of reputation
258     /// @return The total number of reputation
259     function totalSupply() public view returns (uint256) {
260         return totalSupplyAt(block.number);
261     }
262 
263   ////////////////
264   // Query balance and totalSupply in History
265   ////////////////
266     /**
267     * @dev return the reputation amount of a given owner
268     * @param _owner an address of the owner which we want to get his reputation
269     */
270     function balanceOf(address _owner) public view returns (uint256 balance) {
271         return balanceOfAt(_owner, block.number);
272     }
273 
274       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
275       /// @param _owner The address from which the balance will be retrieved
276       /// @param _blockNumber The block number when the balance is queried
277       /// @return The balance at `_blockNumber`
278     function balanceOfAt(address _owner, uint256 _blockNumber)
279     public view returns (uint256)
280     {
281         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
282             return 0;
283           // This will return the expected balance during normal situations
284         } else {
285             return getValueAt(balances[_owner], _blockNumber);
286         }
287     }
288 
289       /// @notice Total amount of reputation at a specific `_blockNumber`.
290       /// @param _blockNumber The block number when the totalSupply is queried
291       /// @return The total amount of reputation at `_blockNumber`
292     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
293         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
294             return 0;
295           // This will return the expected totalSupply during normal situations
296         } else {
297             return getValueAt(totalSupplyHistory, _blockNumber);
298         }
299     }
300 
301       /// @notice Generates `_amount` reputation that are assigned to `_owner`
302       /// @param _user The address that will be assigned the new reputation
303       /// @param _amount The quantity of reputation generated
304       /// @return True if the reputation are generated correctly
305     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
306         uint256 curTotalSupply = totalSupply();
307         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
308         uint256 previousBalanceTo = balanceOf(_user);
309         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
310         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
311         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
312         emit Mint(_user, _amount);
313         return true;
314     }
315 
316       /// @notice Burns `_amount` reputation from `_owner`
317       /// @param _user The address that will lose the reputation
318       /// @param _amount The quantity of reputation to burn
319       /// @return True if the reputation are burned correctly
320     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
321         uint256 curTotalSupply = totalSupply();
322         uint256 amountBurned = _amount;
323         uint256 previousBalanceFrom = balanceOf(_user);
324         if (previousBalanceFrom < amountBurned) {
325             amountBurned = previousBalanceFrom;
326         }
327         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
328         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
329         emit Burn(_user, amountBurned);
330         return true;
331     }
332 
333   ////////////////
334   // Internal helper functions to query and set a value in a snapshot array
335   ////////////////
336 
337       /// @dev `getValueAt` retrieves the number of reputation at a given block number
338       /// @param checkpoints The history of values being queried
339       /// @param _block The block number to retrieve the value at
340       /// @return The number of reputation being queried
341     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
342         if (checkpoints.length == 0) {
343             return 0;
344         }
345 
346           // Shortcut for the actual value
347         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
348             return checkpoints[checkpoints.length-1].value;
349         }
350         if (_block < checkpoints[0].fromBlock) {
351             return 0;
352         }
353 
354           // Binary search of the value in the array
355         uint256 min = 0;
356         uint256 max = checkpoints.length-1;
357         while (max > min) {
358             uint256 mid = (max + min + 1) / 2;
359             if (checkpoints[mid].fromBlock<=_block) {
360                 min = mid;
361             } else {
362                 max = mid-1;
363             }
364         }
365         return checkpoints[min].value;
366     }
367 
368       /// @dev `updateValueAtNow` used to update the `balances` map and the
369       ///  `totalSupplyHistory`
370       /// @param checkpoints The history of data being updated
371       /// @param _value The new number of reputation
372     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
373         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
374         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
375             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
376             newCheckPoint.fromBlock = uint128(block.number);
377             newCheckPoint.value = uint128(_value);
378         } else {
379             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
380             oldCheckPoint.value = uint128(_value);
381         }
382     }
383 }
384 
385 // File: ../../openzeppelin-solidity/contracts/math/SafeMath.sol
386 
387 pragma solidity ^0.5.0;
388 
389 /**
390  * @title SafeMath
391  * @dev Unsigned math operations with safety checks that revert on error
392  */
393 library SafeMath {
394     /**
395     * @dev Multiplies two unsigned integers, reverts on overflow.
396     */
397     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
398         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
399         // benefit is lost if 'b' is also tested.
400         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
401         if (a == 0) {
402             return 0;
403         }
404 
405         uint256 c = a * b;
406         require(c / a == b);
407 
408         return c;
409     }
410 
411     /**
412     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.
413     */
414     function div(uint256 a, uint256 b) internal pure returns (uint256) {
415         // Solidity only automatically asserts when dividing by 0
416         require(b > 0);
417         uint256 c = a / b;
418         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
419 
420         return c;
421     }
422 
423     /**
424     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
425     */
426     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
427         require(b <= a);
428         uint256 c = a - b;
429 
430         return c;
431     }
432 
433     /**
434     * @dev Adds two unsigned integers, reverts on overflow.
435     */
436     function add(uint256 a, uint256 b) internal pure returns (uint256) {
437         uint256 c = a + b;
438         require(c >= a);
439 
440         return c;
441     }
442 
443     /**
444     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),
445     * reverts when dividing by zero.
446     */
447     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
448         require(b != 0);
449         return a % b;
450     }
451 }
452 
453 // File: ../../openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
454 
455 pragma solidity ^0.5.0;
456 
457 
458 
459 /**
460  * @title Standard ERC20 token
461  *
462  * @dev Implementation of the basic standard token.
463  * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
464  * Originally based on code by FirstBlood:
465  * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
466  *
467  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for
468  * all accounts just by listening to said events. Note that this isn't required by the specification, and other
469  * compliant implementations may not do it.
470  */
471 contract ERC20 is IERC20 {
472     using SafeMath for uint256;
473 
474     mapping (address => uint256) private _balances;
475 
476     mapping (address => mapping (address => uint256)) private _allowed;
477 
478     uint256 private _totalSupply;
479 
480     /**
481     * @dev Total number of tokens in existence
482     */
483     function totalSupply() public view returns (uint256) {
484         return _totalSupply;
485     }
486 
487     /**
488     * @dev Gets the balance of the specified address.
489     * @param owner The address to query the balance of.
490     * @return An uint256 representing the amount owned by the passed address.
491     */
492     function balanceOf(address owner) public view returns (uint256) {
493         return _balances[owner];
494     }
495 
496     /**
497      * @dev Function to check the amount of tokens that an owner allowed to a spender.
498      * @param owner address The address which owns the funds.
499      * @param spender address The address which will spend the funds.
500      * @return A uint256 specifying the amount of tokens still available for the spender.
501      */
502     function allowance(address owner, address spender) public view returns (uint256) {
503         return _allowed[owner][spender];
504     }
505 
506     /**
507     * @dev Transfer token for a specified address
508     * @param to The address to transfer to.
509     * @param value The amount to be transferred.
510     */
511     function transfer(address to, uint256 value) public returns (bool) {
512         _transfer(msg.sender, to, value);
513         return true;
514     }
515 
516     /**
517      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
518      * Beware that changing an allowance with this method brings the risk that someone may use both the old
519      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
520      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
521      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
522      * @param spender The address which will spend the funds.
523      * @param value The amount of tokens to be spent.
524      */
525     function approve(address spender, uint256 value) public returns (bool) {
526         require(spender != address(0));
527 
528         _allowed[msg.sender][spender] = value;
529         emit Approval(msg.sender, spender, value);
530         return true;
531     }
532 
533     /**
534      * @dev Transfer tokens from one address to another.
535      * Note that while this function emits an Approval event, this is not required as per the specification,
536      * and other compliant implementations may not emit the event.
537      * @param from address The address which you want to send tokens from
538      * @param to address The address which you want to transfer to
539      * @param value uint256 the amount of tokens to be transferred
540      */
541     function transferFrom(address from, address to, uint256 value) public returns (bool) {
542         _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
543         _transfer(from, to, value);
544         emit Approval(from, msg.sender, _allowed[from][msg.sender]);
545         return true;
546     }
547 
548     /**
549      * @dev Increase the amount of tokens that an owner allowed to a spender.
550      * approve should be called when allowed_[_spender] == 0. To increment
551      * allowed value is better to use this function to avoid 2 calls (and wait until
552      * the first transaction is mined)
553      * From MonolithDAO Token.sol
554      * Emits an Approval event.
555      * @param spender The address which will spend the funds.
556      * @param addedValue The amount of tokens to increase the allowance by.
557      */
558     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
559         require(spender != address(0));
560 
561         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
562         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
563         return true;
564     }
565 
566     /**
567      * @dev Decrease the amount of tokens that an owner allowed to a spender.
568      * approve should be called when allowed_[_spender] == 0. To decrement
569      * allowed value is better to use this function to avoid 2 calls (and wait until
570      * the first transaction is mined)
571      * From MonolithDAO Token.sol
572      * Emits an Approval event.
573      * @param spender The address which will spend the funds.
574      * @param subtractedValue The amount of tokens to decrease the allowance by.
575      */
576     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
577         require(spender != address(0));
578 
579         _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
580         emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
581         return true;
582     }
583 
584     /**
585     * @dev Transfer token for a specified addresses
586     * @param from The address to transfer from.
587     * @param to The address to transfer to.
588     * @param value The amount to be transferred.
589     */
590     function _transfer(address from, address to, uint256 value) internal {
591         require(to != address(0));
592 
593         _balances[from] = _balances[from].sub(value);
594         _balances[to] = _balances[to].add(value);
595         emit Transfer(from, to, value);
596     }
597 
598     /**
599      * @dev Internal function that mints an amount of the token and assigns it to
600      * an account. This encapsulates the modification of balances such that the
601      * proper events are emitted.
602      * @param account The account that will receive the created tokens.
603      * @param value The amount that will be created.
604      */
605     function _mint(address account, uint256 value) internal {
606         require(account != address(0));
607 
608         _totalSupply = _totalSupply.add(value);
609         _balances[account] = _balances[account].add(value);
610         emit Transfer(address(0), account, value);
611     }
612 
613     /**
614      * @dev Internal function that burns an amount of the token of a given
615      * account.
616      * @param account The account whose tokens will be burnt.
617      * @param value The amount that will be burnt.
618      */
619     function _burn(address account, uint256 value) internal {
620         require(account != address(0));
621 
622         _totalSupply = _totalSupply.sub(value);
623         _balances[account] = _balances[account].sub(value);
624         emit Transfer(account, address(0), value);
625     }
626 
627     /**
628      * @dev Internal function that burns an amount of the token of a given
629      * account, deducting from the sender's allowance for said account. Uses the
630      * internal burn function.
631      * Emits an Approval event (reflecting the reduced allowance).
632      * @param account The account whose tokens will be burnt.
633      * @param value The amount that will be burnt.
634      */
635     function _burnFrom(address account, uint256 value) internal {
636         _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
637         _burn(account, value);
638         emit Approval(account, msg.sender, _allowed[account][msg.sender]);
639     }
640 }
641 
642 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
643 
644 pragma solidity ^0.5.0;
645 
646 
647 /**
648  * @title Burnable Token
649  * @dev Token that can be irreversibly burned (destroyed).
650  */
651 contract ERC20Burnable is ERC20 {
652     /**
653      * @dev Burns a specific amount of tokens.
654      * @param value The amount of token to be burned.
655      */
656     function burn(uint256 value) public {
657         _burn(msg.sender, value);
658     }
659 
660     /**
661      * @dev Burns a specific amount of tokens from the target address and decrements allowance
662      * @param from address The address which you want to send tokens from
663      * @param value uint256 The amount of token to be burned
664      */
665     function burnFrom(address from, uint256 value) public {
666         _burnFrom(from, value);
667     }
668 }
669 
670 // File: contracts/controller/DAOToken.sol
671 
672 pragma solidity ^0.5.4;
673 
674 
675 
676 
677 
678 /**
679  * @title DAOToken, base on zeppelin contract.
680  * @dev ERC20 compatible token. It is a mintable, burnable token.
681  */
682 
683 contract DAOToken is ERC20, ERC20Burnable, Ownable {
684 
685     string public name;
686     string public symbol;
687     // solhint-disable-next-line const-name-snakecase
688     uint8 public constant decimals = 18;
689     uint256 public cap;
690 
691     /**
692     * @dev Constructor
693     * @param _name - token name
694     * @param _symbol - token symbol
695     * @param _cap - token cap - 0 value means no cap
696     */
697     constructor(string memory _name, string memory _symbol, uint256 _cap)
698     public {
699         name = _name;
700         symbol = _symbol;
701         cap = _cap;
702     }
703 
704     /**
705      * @dev Function to mint tokens
706      * @param _to The address that will receive the minted tokens.
707      * @param _amount The amount of tokens to mint.
708      */
709     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
710         if (cap > 0)
711             require(totalSupply().add(_amount) <= cap);
712         _mint(_to, _amount);
713         return true;
714     }
715 }
716 
717 // File: openzeppelin-solidity/contracts/utils/Address.sol
718 
719 pragma solidity ^0.5.0;
720 
721 /**
722  * Utility library of inline functions on addresses
723  */
724 library Address {
725     /**
726      * Returns whether the target address is a contract
727      * @dev This function will return false if invoked during the constructor of a contract,
728      * as the code is not actually created until after the constructor finishes.
729      * @param account address of the account to check
730      * @return whether the target address is a contract
731      */
732     function isContract(address account) internal view returns (bool) {
733         uint256 size;
734         // XXX Currently there is no better way to check if there is a contract in an address
735         // than to check the size of the code at that address.
736         // See https://ethereum.stackexchange.com/a/14016/36603
737         // for more details about how this works.
738         // TODO Check this again before the Serenity release, because all addresses will be
739         // contracts then.
740         // solhint-disable-next-line no-inline-assembly
741         assembly { size := extcodesize(account) }
742         return size > 0;
743     }
744 }
745 
746 // File: contracts/libs/SafeERC20.sol
747 
748 /*
749 
750 SafeERC20 by daostack.
751 The code is based on a fix by SECBIT Team.
752 
753 USE WITH CAUTION & NO WARRANTY
754 
755 REFERENCE & RELATED READING
756 - https://github.com/ethereum/solidity/issues/4116
757 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
758 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
759 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
760 
761 */
762 pragma solidity ^0.5.4;
763 
764 
765 
766 library SafeERC20 {
767     using Address for address;
768 
769     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
770     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
771     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
772 
773     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
774 
775         // Must be a contract addr first!
776         require(_erc20Addr.isContract());
777 
778         (bool success, bytes memory returnValue) =
779         // solhint-disable-next-line avoid-low-level-calls
780         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
781         // call return false when something wrong
782         require(success);
783         //check return value
784         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
785     }
786 
787     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
788 
789         // Must be a contract addr first!
790         require(_erc20Addr.isContract());
791 
792         (bool success, bytes memory returnValue) =
793         // solhint-disable-next-line avoid-low-level-calls
794         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
795         // call return false when something wrong
796         require(success);
797         //check return value
798         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
799     }
800 
801     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
802 
803         // Must be a contract addr first!
804         require(_erc20Addr.isContract());
805 
806         // safeApprove should only be called when setting an initial allowance,
807         // or when resetting it to zero.
808         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
809 
810         (bool success, bytes memory returnValue) =
811         // solhint-disable-next-line avoid-low-level-calls
812         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
813         // call return false when something wrong
814         require(success);
815         //check return value
816         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
817     }
818 }
819 
820 // File: contracts/controller/Avatar.sol
821 
822 pragma solidity ^0.5.4;
823 
824 
825 
826 
827 
828 
829 
830 /**
831  * @title An Avatar holds tokens, reputation and ether for a controller
832  */
833 contract Avatar is Ownable {
834     using SafeERC20 for address;
835 
836     string public orgName;
837     DAOToken public nativeToken;
838     Reputation public nativeReputation;
839 
840     event GenericCall(address indexed _contract, bytes _params, bool _success);
841     event SendEther(uint256 _amountInWei, address indexed _to);
842     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
843     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
844     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
845     event ReceiveEther(address indexed _sender, uint256 _value);
846     event MetaData(string _metaData);
847 
848     /**
849     * @dev the constructor takes organization name, native token and reputation system
850     and creates an avatar for a controller
851     */
852     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
853         orgName = _orgName;
854         nativeToken = _nativeToken;
855         nativeReputation = _nativeReputation;
856     }
857 
858     /**
859     * @dev enables an avatar to receive ethers
860     */
861     function() external payable {
862         emit ReceiveEther(msg.sender, msg.value);
863     }
864 
865     /**
866     * @dev perform a generic call to an arbitrary contract
867     * @param _contract  the contract's address to call
868     * @param _data ABI-encoded contract call to call `_contract` address.
869     * @return bool    success or fail
870     *         bytes - the return bytes of the called contract's function.
871     */
872     function genericCall(address _contract, bytes memory _data)
873     public
874     onlyOwner
875     returns(bool success, bytes memory returnValue) {
876       // solhint-disable-next-line avoid-low-level-calls
877         (success, returnValue) = _contract.call(_data);
878         emit GenericCall(_contract, _data, success);
879     }
880 
881     /**
882     * @dev send ethers from the avatar's wallet
883     * @param _amountInWei amount to send in Wei units
884     * @param _to send the ethers to this address
885     * @return bool which represents success
886     */
887     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
888         _to.transfer(_amountInWei);
889         emit SendEther(_amountInWei, _to);
890         return true;
891     }
892 
893     /**
894     * @dev external token transfer
895     * @param _externalToken the token contract
896     * @param _to the destination address
897     * @param _value the amount of tokens to transfer
898     * @return bool which represents success
899     */
900     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
901     public onlyOwner returns(bool)
902     {
903         address(_externalToken).safeTransfer(_to, _value);
904         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
905         return true;
906     }
907 
908     /**
909     * @dev external token transfer from a specific account
910     * @param _externalToken the token contract
911     * @param _from the account to spend token from
912     * @param _to the destination address
913     * @param _value the amount of tokens to transfer
914     * @return bool which represents success
915     */
916     function externalTokenTransferFrom(
917         IERC20 _externalToken,
918         address _from,
919         address _to,
920         uint256 _value
921     )
922     public onlyOwner returns(bool)
923     {
924         address(_externalToken).safeTransferFrom(_from, _to, _value);
925         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
926         return true;
927     }
928 
929     /**
930     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
931     *      on behalf of msg.sender.
932     * @param _externalToken the address of the Token Contract
933     * @param _spender address
934     * @param _value the amount of ether (in Wei) which the approval is referring to.
935     * @return bool which represents a success
936     */
937     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
938     public onlyOwner returns(bool)
939     {
940         address(_externalToken).safeApprove(_spender, _value);
941         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
942         return true;
943     }
944 
945     /**
946     * @dev metaData emits an event with a string, should contain the hash of some meta data.
947     * @param _metaData a string representing a hash of the meta data
948     * @return bool which represents a success
949     */
950     function metaData(string memory _metaData) public onlyOwner returns(bool) {
951         emit MetaData(_metaData);
952         return true;
953     }
954 
955 
956 }
957 
958 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
959 
960 pragma solidity ^0.5.4;
961 
962 
963 contract UniversalSchemeInterface {
964 
965     function updateParameters(bytes32 _hashedParameters) public;
966 
967     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
968 }
969 
970 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
971 
972 pragma solidity ^0.5.4;
973 
974 
975 contract GlobalConstraintInterface {
976 
977     enum CallPhase { Pre, Post, PreAndPost }
978 
979     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
980     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
981     /**
982      * @dev when return if this globalConstraints is pre, post or both.
983      * @return CallPhase enum indication  Pre, Post or PreAndPost.
984      */
985     function when() public returns(CallPhase);
986 }
987 
988 // File: contracts/controller/ControllerInterface.sol
989 
990 pragma solidity ^0.5.4;
991 
992 
993 
994 /**
995  * @title Controller contract
996  * @dev A controller controls the organizations tokens ,reputation and avatar.
997  * It is subject to a set of schemes and constraints that determine its behavior.
998  * Each scheme has it own parameters and operation permissions.
999  */
1000 interface ControllerInterface {
1001 
1002     /**
1003      * @dev Mint `_amount` of reputation that are assigned to `_to` .
1004      * @param  _amount amount of reputation to mint
1005      * @param _to beneficiary address
1006      * @return bool which represents a success
1007     */
1008     function mintReputation(uint256 _amount, address _to, address _avatar)
1009     external
1010     returns(bool);
1011 
1012     /**
1013      * @dev Burns `_amount` of reputation from `_from`
1014      * @param _amount amount of reputation to burn
1015      * @param _from The address that will lose the reputation
1016      * @return bool which represents a success
1017      */
1018     function burnReputation(uint256 _amount, address _from, address _avatar)
1019     external
1020     returns(bool);
1021 
1022     /**
1023      * @dev mint tokens .
1024      * @param  _amount amount of token to mint
1025      * @param _beneficiary beneficiary address
1026      * @param _avatar address
1027      * @return bool which represents a success
1028      */
1029     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1030     external
1031     returns(bool);
1032 
1033   /**
1034    * @dev register or update a scheme
1035    * @param _scheme the address of the scheme
1036    * @param _paramsHash a hashed configuration of the usage of the scheme
1037    * @param _permissions the permissions the new scheme will have
1038    * @param _avatar address
1039    * @return bool which represents a success
1040    */
1041     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1042     external
1043     returns(bool);
1044 
1045     /**
1046      * @dev unregister a scheme
1047      * @param _avatar address
1048      * @param _scheme the address of the scheme
1049      * @return bool which represents a success
1050      */
1051     function unregisterScheme(address _scheme, address _avatar)
1052     external
1053     returns(bool);
1054 
1055     /**
1056      * @dev unregister the caller's scheme
1057      * @param _avatar address
1058      * @return bool which represents a success
1059      */
1060     function unregisterSelf(address _avatar) external returns(bool);
1061 
1062     /**
1063      * @dev add or update Global Constraint
1064      * @param _globalConstraint the address of the global constraint to be added.
1065      * @param _params the constraint parameters hash.
1066      * @param _avatar the avatar of the organization
1067      * @return bool which represents a success
1068      */
1069     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1070     external returns(bool);
1071 
1072     /**
1073      * @dev remove Global Constraint
1074      * @param _globalConstraint the address of the global constraint to be remove.
1075      * @param _avatar the organization avatar.
1076      * @return bool which represents a success
1077      */
1078     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1079     external  returns(bool);
1080 
1081   /**
1082     * @dev upgrade the Controller
1083     *      The function will trigger an event 'UpgradeController'.
1084     * @param  _newController the address of the new controller.
1085     * @param _avatar address
1086     * @return bool which represents a success
1087     */
1088     function upgradeController(address _newController, Avatar _avatar)
1089     external returns(bool);
1090 
1091     /**
1092     * @dev perform a generic call to an arbitrary contract
1093     * @param _contract  the contract's address to call
1094     * @param _data ABI-encoded contract call to call `_contract` address.
1095     * @param _avatar the controller's avatar address
1096     * @return bool -success
1097     *         bytes  - the return value of the called _contract's function.
1098     */
1099     function genericCall(address _contract, bytes calldata _data, Avatar _avatar)
1100     external
1101     returns(bool, bytes memory);
1102 
1103   /**
1104    * @dev send some ether
1105    * @param _amountInWei the amount of ether (in Wei) to send
1106    * @param _to address of the beneficiary
1107    * @param _avatar address
1108    * @return bool which represents a success
1109    */
1110     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1111     external returns(bool);
1112 
1113     /**
1114     * @dev send some amount of arbitrary ERC20 Tokens
1115     * @param _externalToken the address of the Token Contract
1116     * @param _to address of the beneficiary
1117     * @param _value the amount of ether (in Wei) to send
1118     * @param _avatar address
1119     * @return bool which represents a success
1120     */
1121     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1122     external
1123     returns(bool);
1124 
1125     /**
1126     * @dev transfer token "from" address "to" address
1127     *      One must to approve the amount of tokens which can be spend from the
1128     *      "from" account.This can be done using externalTokenApprove.
1129     * @param _externalToken the address of the Token Contract
1130     * @param _from address of the account to send from
1131     * @param _to address of the beneficiary
1132     * @param _value the amount of ether (in Wei) to send
1133     * @param _avatar address
1134     * @return bool which represents a success
1135     */
1136     function externalTokenTransferFrom(
1137     IERC20 _externalToken,
1138     address _from,
1139     address _to,
1140     uint256 _value,
1141     Avatar _avatar)
1142     external
1143     returns(bool);
1144 
1145     /**
1146     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1147     *      on behalf of msg.sender.
1148     * @param _externalToken the address of the Token Contract
1149     * @param _spender address
1150     * @param _value the amount of ether (in Wei) which the approval is referring to.
1151     * @return bool which represents a success
1152     */
1153     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1154     external
1155     returns(bool);
1156 
1157     /**
1158     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1159     * @param _metaData a string representing a hash of the meta data
1160     * @param _avatar Avatar
1161     * @return bool which represents a success
1162     */
1163     function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);
1164 
1165     /**
1166      * @dev getNativeReputation
1167      * @param _avatar the organization avatar.
1168      * @return organization native reputation
1169      */
1170     function getNativeReputation(address _avatar)
1171     external
1172     view
1173     returns(address);
1174 
1175     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1176 
1177     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1178 
1179     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1180 
1181     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1182 
1183     /**
1184      * @dev globalConstraintsCount return the global constraint pre and post count
1185      * @return uint256 globalConstraintsPre count.
1186      * @return uint256 globalConstraintsPost count.
1187      */
1188     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1189 
1190     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1191 }
1192 
1193 // File: contracts/universalSchemes/UniversalScheme.sol
1194 
1195 pragma solidity ^0.5.4;
1196 
1197 
1198 
1199 
1200 
1201 
1202 contract UniversalScheme is Ownable, UniversalSchemeInterface {
1203     bytes32 public hashedParameters; // For other parameters.
1204 
1205     function updateParameters(
1206         bytes32 _hashedParameters
1207     )
1208         public
1209         onlyOwner
1210     {
1211         hashedParameters = _hashedParameters;
1212     }
1213 
1214     /**
1215     *  @dev get the parameters for the current scheme from the controller
1216     */
1217     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1218         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1219         "scheme is not registered");
1220         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1221     }
1222 }
1223 
1224 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1225 
1226 pragma solidity ^0.5.0;
1227 
1228 /**
1229  * @title Elliptic curve signature operations
1230  * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
1231  * TODO Remove this library once solidity supports passing a signature to ecrecover.
1232  * See https://github.com/ethereum/solidity/issues/864
1233  */
1234 
1235 library ECDSA {
1236     /**
1237      * @dev Recover signer address from a message by using their signature
1238      * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
1239      * @param signature bytes signature, the signature is generated using web3.eth.sign()
1240      */
1241     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1242         bytes32 r;
1243         bytes32 s;
1244         uint8 v;
1245 
1246         // Check the signature length
1247         if (signature.length != 65) {
1248             return (address(0));
1249         }
1250 
1251         // Divide the signature in r, s and v variables
1252         // ecrecover takes the signature parameters, and the only way to get them
1253         // currently is to use assembly.
1254         // solhint-disable-next-line no-inline-assembly
1255         assembly {
1256             r := mload(add(signature, 0x20))
1257             s := mload(add(signature, 0x40))
1258             v := byte(0, mload(add(signature, 0x60)))
1259         }
1260 
1261         // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
1262         if (v < 27) {
1263             v += 27;
1264         }
1265 
1266         // If the version is correct return the signer address
1267         if (v != 27 && v != 28) {
1268             return (address(0));
1269         } else {
1270             return ecrecover(hash, v, r, s);
1271         }
1272     }
1273 
1274     /**
1275      * toEthSignedMessageHash
1276      * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
1277      * and hash the result
1278      */
1279     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1280         // 32 is the length in bytes of hash,
1281         // enforced by the type signature above
1282         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1283     }
1284 }
1285 
1286 // File: ../infra/contracts/libs/RealMath.sol
1287 
1288 pragma solidity ^0.5.4;
1289 
1290 /**
1291  * RealMath: fixed-point math library, based on fractional and integer parts.
1292  * Using uint256 as real216x40, which isn't in Solidity yet.
1293  * Internally uses the wider uint256 for some math.
1294  *
1295  * Note that for addition, subtraction, and mod (%), you should just use the
1296  * built-in Solidity operators. Functions for these operations are not provided.
1297  *
1298  */
1299 
1300 
1301 library RealMath {
1302 
1303     /**
1304      * How many total bits are there?
1305      */
1306     uint256 constant private REAL_BITS = 256;
1307 
1308     /**
1309      * How many fractional bits are there?
1310      */
1311     uint256 constant private REAL_FBITS = 40;
1312 
1313     /**
1314      * What's the first non-fractional bit
1315      */
1316     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1317 
1318     /**
1319      * Raise a real number to any positive integer power
1320      */
1321     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1322 
1323         uint256 tempRealBase = realBase;
1324         uint256 tempExponent = exponent;
1325 
1326         // Start with the 0th power
1327         uint256 realResult = REAL_ONE;
1328         while (tempExponent != 0) {
1329             // While there are still bits set
1330             if ((tempExponent & 0x1) == 0x1) {
1331                 // If the low bit is set, multiply in the (many-times-squared) base
1332                 realResult = mul(realResult, tempRealBase);
1333             }
1334                 // Shift off the low bit
1335             tempExponent = tempExponent >> 1;
1336             if (tempExponent != 0) {
1337                 // Do the squaring
1338                 tempRealBase = mul(tempRealBase, tempRealBase);
1339             }
1340         }
1341 
1342         // Return the final result.
1343         return realResult;
1344     }
1345 
1346     /**
1347      * Create a real from a rational fraction.
1348      */
1349     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1350         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1351     }
1352 
1353     /**
1354      * Multiply one real by another. Truncates overflows.
1355      */
1356     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1357         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1358         // So we just have to clip off the extra REAL_FBITS fractional bits.
1359         uint256 res = realA * realB;
1360         require(res/realA == realB, "RealMath mul overflow");
1361         return (res >> REAL_FBITS);
1362     }
1363 
1364     /**
1365      * Divide one real by another real. Truncates overflows.
1366      */
1367     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1368         // We use the reverse of the multiplication trick: convert numerator from
1369         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1370         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1371     }
1372 
1373 }
1374 
1375 // File: ../infra/contracts/votingMachines/ProposalExecuteInterface.sol
1376 
1377 pragma solidity ^0.5.4;
1378 
1379 interface ProposalExecuteInterface {
1380     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
1381 }
1382 
1383 // File: openzeppelin-solidity/contracts/math/Math.sol
1384 
1385 pragma solidity ^0.5.0;
1386 
1387 /**
1388  * @title Math
1389  * @dev Assorted math operations
1390  */
1391 library Math {
1392     /**
1393     * @dev Returns the largest of two numbers.
1394     */
1395     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1396         return a >= b ? a : b;
1397     }
1398 
1399     /**
1400     * @dev Returns the smallest of two numbers.
1401     */
1402     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1403         return a < b ? a : b;
1404     }
1405 
1406     /**
1407     * @dev Calculates the average of two numbers. Since these are integers,
1408     * averages of an even and odd number cannot be represented, and will be
1409     * rounded down.
1410     */
1411     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1412         // (a + b) / 2 can overflow, so we distribute
1413         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1414     }
1415 }
1416 
1417 // File: ../infra/contracts/votingMachines/GenesisProtocolLogic.sol
1418 
1419 pragma solidity ^0.5.4;
1420 
1421 
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 /**
1432  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1433  */
1434 contract GenesisProtocolLogic is IntVoteInterface {
1435     using SafeMath for uint256;
1436     using Math for uint256;
1437     using RealMath for uint216;
1438     using RealMath for uint256;
1439     using Address for address;
1440 
1441     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1442     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1443 
1444     //Organization's parameters
1445     struct Parameters {
1446         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1447         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1448         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1449         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1450                                           //to be in an preparation state (stable) before boosted.
1451         uint256 thresholdConst; //constant  for threshold calculation .
1452                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1453         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1454                                    //in the threshold calculation to prevent overflow
1455         uint256 quietEndingPeriod; //quite ending period
1456         uint256 proposingRepReward;//proposer reputation reward.
1457         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1458                                           //voters lose votersReputationLossRatio% of their reputation.
1459         uint256 minimumDaoBounty;
1460         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1461                                //(daoBountyConst * averageBoostDownstakes)/100 .
1462         uint256 activationTime;//the point in time after which proposals can be created.
1463         //if this address is set so only this address is allowed to vote of behalf of someone else.
1464         address voteOnBehalf;
1465     }
1466 
1467     struct Voter {
1468         uint256 vote; // YES(1) ,NO(2)
1469         uint256 reputation; // amount of voter's reputation
1470         bool preBoosted;
1471     }
1472 
1473     struct Staker {
1474         uint256 vote; // YES(1) ,NO(2)
1475         uint256 amount; // amount of staker's stake
1476         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1477     }
1478 
1479     struct Proposal {
1480         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1481         address callbacks;    // should fulfill voting callbacks interface.
1482         ProposalState state;
1483         uint256 winningVote; //the winning vote.
1484         address proposer;
1485         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1486         uint256 currentBoostedVotePeriodLimit;
1487         bytes32 paramsHash;
1488         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1489         uint256 daoBounty;
1490         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1491         uint256 confidenceThreshold;
1492         //The percentage from upper stakes which the caller for the expiration was given.
1493         uint256 expirationCallBountyPercentage;
1494         uint[3] times; //times[0] - submittedTime
1495                        //times[1] - boostedPhaseTime
1496                        //times[2] -preBoostedPhaseTime;
1497         bool daoRedeemItsWinnings;
1498         //      vote      reputation
1499         mapping(uint256   =>  uint256    ) votes;
1500         //      vote      reputation
1501         mapping(uint256   =>  uint256    ) preBoostedVotes;
1502         //      address     voter
1503         mapping(address =>  Voter    ) voters;
1504         //      vote        stakes
1505         mapping(uint256   =>  uint256    ) stakes;
1506         //      address  staker
1507         mapping(address  => Staker   ) stakers;
1508     }
1509 
1510     event Stake(bytes32 indexed _proposalId,
1511         address indexed _organization,
1512         address indexed _staker,
1513         uint256 _vote,
1514         uint256 _amount
1515     );
1516 
1517     event Redeem(bytes32 indexed _proposalId,
1518         address indexed _organization,
1519         address indexed _beneficiary,
1520         uint256 _amount
1521     );
1522 
1523     event RedeemDaoBounty(bytes32 indexed _proposalId,
1524         address indexed _organization,
1525         address indexed _beneficiary,
1526         uint256 _amount
1527     );
1528 
1529     event RedeemReputation(bytes32 indexed _proposalId,
1530         address indexed _organization,
1531         address indexed _beneficiary,
1532         uint256 _amount
1533     );
1534 
1535     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1536     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1537     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1538     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
1539 
1540     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1541     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1542     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1543            //organizationId => organization
1544     mapping(bytes32        => address     ) public organizations;
1545           //organizationId => averageBoostDownstakes
1546     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1547     uint256 constant public NUM_OF_CHOICES = 2;
1548     uint256 constant public NO = 2;
1549     uint256 constant public YES = 1;
1550     uint256 public proposalsCnt; // Total number of proposals
1551     IERC20 public stakingToken;
1552     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1553     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1554 
1555     /**
1556      * @dev Constructor
1557      */
1558     constructor(IERC20 _stakingToken) public {
1559       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1560       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1561       //If such contract address does not exist in the network (e.g ganache)
1562       //the contract will use the _stakingToken param as the
1563       //staking token address.
1564         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1565             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1566         } else {
1567             stakingToken = _stakingToken;
1568         }
1569     }
1570 
1571   /**
1572    * @dev Check that the proposal is votable
1573    * a proposal is votable if it is in one of the following states:
1574    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1575    */
1576     modifier votable(bytes32 _proposalId) {
1577         require(_isVotable(_proposalId));
1578         _;
1579     }
1580 
1581     /**
1582      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1583      * generated by calculating keccak256 of a incremented counter.
1584      * @param _paramsHash parameters hash
1585      * @param _proposer address
1586      * @param _organization address
1587      */
1588     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1589         external
1590         returns(bytes32)
1591     {
1592       // solhint-disable-next-line not-rely-on-time
1593         require(now > parameters[_paramsHash].activationTime, "not active yet");
1594         //Check parameters existence.
1595         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1596         // Generate a unique ID:
1597         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1598         proposalsCnt = proposalsCnt.add(1);
1599          // Open proposal:
1600         Proposal memory proposal;
1601         proposal.callbacks = msg.sender;
1602         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1603 
1604         proposal.state = ProposalState.Queued;
1605         // solhint-disable-next-line not-rely-on-time
1606         proposal.times[0] = now;//submitted time
1607         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1608         proposal.proposer = _proposer;
1609         proposal.winningVote = NO;
1610         proposal.paramsHash = _paramsHash;
1611         if (organizations[proposal.organizationId] == address(0)) {
1612             if (_organization == address(0)) {
1613                 organizations[proposal.organizationId] = msg.sender;
1614             } else {
1615                 organizations[proposal.organizationId] = _organization;
1616             }
1617         }
1618         //calc dao bounty
1619         uint256 daoBounty =
1620         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1621         if (daoBounty < parameters[_paramsHash].minimumDaoBounty) {
1622             proposal.daoBountyRemain = parameters[_paramsHash].minimumDaoBounty;
1623         } else {
1624             proposal.daoBountyRemain = daoBounty;
1625         }
1626         proposal.totalStakes = proposal.daoBountyRemain;
1627         proposals[proposalId] = proposal;
1628         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1629 
1630         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1631         return proposalId;
1632     }
1633 
1634     /**
1635       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
1636       * @param _proposalId the id of the proposal
1637       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1638      */
1639     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1640         Proposal storage proposal = proposals[_proposalId];
1641         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
1642         "proposal state in not Boosted nor QuietEndingPeriod");
1643         require(_execute(_proposalId), "proposal need to expire");
1644         uint256 expirationCallBountyPercentage =
1645         // solhint-disable-next-line not-rely-on-time
1646         (uint(1).add(now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1])).div(15)));
1647         if (expirationCallBountyPercentage > 100) {
1648             expirationCallBountyPercentage = 100;
1649         }
1650         proposal.expirationCallBountyPercentage = expirationCallBountyPercentage;
1651         expirationCallBounty = expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100);
1652         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1653         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1654     }
1655 
1656     /**
1657      * @dev hash the parameters, save them if necessary, and return the hash value
1658      * @param _params a parameters array
1659      *    _params[0] - _queuedVoteRequiredPercentage,
1660      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1661      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1662      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1663      *                  state (stable) before boosted.
1664      *    _params[4] -_thresholdConst
1665      *    _params[5] -_quietEndingPeriod
1666      *    _params[6] -_proposingRepReward
1667      *    _params[7] -_votersReputationLossRatio
1668      *    _params[8] -_minimumDaoBounty
1669      *    _params[9] -_daoBountyConst
1670      *    _params[10] -_activationTime
1671      * @param _voteOnBehalf - authorized to vote on behalf of others.
1672     */
1673     function setParameters(
1674         uint[11] calldata _params, //use array here due to stack too deep issue.
1675         address _voteOnBehalf
1676     )
1677     external
1678     returns(bytes32)
1679     {
1680         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1681         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1682         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1683         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1684         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1685         require(_params[9] > 0, "daoBountyConst should be > 0");
1686 
1687         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1688         //set a limit for power for a given alpha to prevent overflow
1689         uint256 limitExponent = 172;//for alpha less or equal 2
1690         uint256 j = 2;
1691         for (uint256 i = 2000; i < 16000; i = i*2) {
1692             if ((_params[4] > i) && (_params[4] <= i*2)) {
1693                 limitExponent = limitExponent/j;
1694                 break;
1695             }
1696             j++;
1697         }
1698 
1699         parameters[paramsHash] = Parameters({
1700             queuedVoteRequiredPercentage: _params[0],
1701             queuedVotePeriodLimit: _params[1],
1702             boostedVotePeriodLimit: _params[2],
1703             preBoostedVotePeriodLimit: _params[3],
1704             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1705             limitExponentValue:limitExponent,
1706             quietEndingPeriod: _params[5],
1707             proposingRepReward: _params[6],
1708             votersReputationLossRatio:_params[7],
1709             minimumDaoBounty:_params[8],
1710             daoBountyConst:_params[9],
1711             activationTime:_params[10],
1712             voteOnBehalf:_voteOnBehalf
1713         });
1714         return paramsHash;
1715     }
1716 
1717     /**
1718      * @dev redeem a reward for a successful stake, vote or proposing.
1719      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1720      * users to redeem on behalf of someone else.
1721      * @param _proposalId the ID of the proposal
1722      * @param _beneficiary - the beneficiary address
1723      * @return rewards -
1724      *           [0] stakerTokenReward
1725      *           [1] voterReputationReward
1726      *           [2] proposerReputationReward
1727      */
1728      // solhint-disable-next-line function-max-lines,code-complexity
1729     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1730         Proposal storage proposal = proposals[_proposalId];
1731         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1732         "Proposal should be Executed or ExpiredInQueue");
1733         Parameters memory params = parameters[proposal.paramsHash];
1734         uint256 lostReputation;
1735         if (proposal.winningVote == YES) {
1736             lostReputation = proposal.preBoostedVotes[NO];
1737         } else {
1738             lostReputation = proposal.preBoostedVotes[YES];
1739         }
1740         lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1741         //as staker
1742         Staker storage staker = proposal.stakers[_beneficiary];
1743         uint256 totalStakes = proposal.stakes[NO].add(proposal.stakes[YES]);
1744         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1745 
1746         if (staker.amount > 0) {
1747             uint256 totalStakesLeftAfterCallBounty =
1748             totalStakes.sub(proposal.expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100));
1749             if (proposal.state == ProposalState.ExpiredInQueue) {
1750                 //Stakes of a proposal that expires in Queue are sent back to stakers
1751                 rewards[0] = staker.amount;
1752             } else if (staker.vote == proposal.winningVote) {
1753                 if (staker.vote == YES) {
1754                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
1755                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
1756                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1757                     }
1758                 } else {
1759                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
1760                 }
1761             }
1762             staker.amount = 0;
1763         }
1764             //dao redeem its winnings
1765         if (proposal.daoRedeemItsWinnings == false &&
1766             _beneficiary == organizations[proposal.organizationId] &&
1767             proposal.state != ProposalState.ExpiredInQueue &&
1768             proposal.winningVote == NO) {
1769             rewards[0] =
1770             rewards[0].add((proposal.daoBounty.mul(totalStakes))/totalWinningStakes).sub(proposal.daoBounty);
1771             proposal.daoRedeemItsWinnings = true;
1772         }
1773 
1774         //as voter
1775         Voter storage voter = proposal.voters[_beneficiary];
1776         if ((voter.reputation != 0) && (voter.preBoosted)) {
1777             if (proposal.state == ProposalState.ExpiredInQueue) {
1778               //give back reputation for the voter
1779                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1780             } else if (proposal.winningVote == voter.vote) {
1781                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1782                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
1783             }
1784             voter.reputation = 0;
1785         }
1786         //as proposer
1787         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1788             rewards[2] = params.proposingRepReward;
1789             proposal.proposer = address(0);
1790         }
1791         if (rewards[0] != 0) {
1792             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1793             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1794             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1795         }
1796         if (rewards[1].add(rewards[2]) != 0) {
1797             VotingMachineCallbacksInterface(proposal.callbacks)
1798             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1799             emit RedeemReputation(
1800             _proposalId,
1801             organizations[proposal.organizationId],
1802             _beneficiary,
1803             rewards[1].add(rewards[2])
1804             );
1805         }
1806     }
1807 
1808     /**
1809      * @dev redeemDaoBounty a reward for a successful stake.
1810      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1811      * users to redeem on behalf of someone else.
1812      * @param _proposalId the ID of the proposal
1813      * @param _beneficiary - the beneficiary address
1814      * @return redeemedAmount - redeem token amount
1815      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1816      */
1817     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1818     public
1819     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1820         Proposal storage proposal = proposals[_proposalId];
1821         require(proposal.state == ProposalState.Executed);
1822         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1823         Staker storage staker = proposal.stakers[_beneficiary];
1824         if (
1825             (staker.amount4Bounty > 0)&&
1826             (staker.vote == proposal.winningVote)&&
1827             (proposal.winningVote == YES)&&
1828             (totalWinningStakes != 0)) {
1829             //as staker
1830                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1831             }
1832         if ((potentialAmount != 0)&&
1833             (VotingMachineCallbacksInterface(proposal.callbacks)
1834             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1835             staker.amount4Bounty = 0;
1836             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1837             require(
1838             VotingMachineCallbacksInterface(proposal.callbacks)
1839             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1840             redeemedAmount = potentialAmount;
1841             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1842         }
1843     }
1844 
1845     /**
1846      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
1847      * @param _proposalId the ID of the proposal
1848      * @return bool true or false.
1849      */
1850     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
1851         Proposal memory proposal = proposals[_proposalId];
1852         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
1853     }
1854 
1855     /**
1856      * @dev threshold return the organization's score threshold which required by
1857      * a proposal to shift to boosted state.
1858      * This threshold is dynamically set and it depend on the number of boosted proposal.
1859      * @param _organizationId the organization identifier
1860      * @param _paramsHash the organization parameters hash
1861      * @return uint256 organization's score threshold as real number.
1862      */
1863     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
1864         uint256 power = orgBoostedProposalsCnt[_organizationId];
1865         Parameters storage params = parameters[_paramsHash];
1866 
1867         if (power > params.limitExponentValue) {
1868             power = params.limitExponentValue;
1869         }
1870 
1871         return params.thresholdConst.pow(power);
1872     }
1873 
1874   /**
1875    * @dev hashParameters returns a hash of the given parameters
1876    */
1877     function getParametersHash(
1878         uint[11] memory _params,//use array here due to stack too deep issue.
1879         address _voteOnBehalf
1880     )
1881         public
1882         pure
1883         returns(bytes32)
1884         {
1885         //double call to keccak256 to avoid deep stack issue when call with too many params.
1886         return keccak256(
1887             abi.encodePacked(
1888             keccak256(
1889             abi.encodePacked(
1890                 _params[0],
1891                 _params[1],
1892                 _params[2],
1893                 _params[3],
1894                 _params[4],
1895                 _params[5],
1896                 _params[6],
1897                 _params[7],
1898                 _params[8],
1899                 _params[9],
1900                 _params[10])
1901             ),
1902             _voteOnBehalf
1903         ));
1904     }
1905 
1906     /**
1907       * @dev execute check if the proposal has been decided, and if so, execute the proposal
1908       * @param _proposalId the id of the proposal
1909       * @return bool true - the proposal has been executed
1910       *              false - otherwise.
1911      */
1912      // solhint-disable-next-line function-max-lines,code-complexity
1913     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
1914         Proposal storage proposal = proposals[_proposalId];
1915         Parameters memory params = parameters[proposal.paramsHash];
1916         Proposal memory tmpProposal = proposal;
1917         uint256 totalReputation =
1918         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
1919         //first divide by 100 to prevent overflow
1920         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
1921         ExecutionState executionState = ExecutionState.None;
1922         uint256 averageDownstakesOfBoosted;
1923         uint256 confidenceThreshold;
1924 
1925         if (proposal.votes[proposal.winningVote] > executionBar) {
1926          // someone crossed the absolute vote execution bar.
1927             if (proposal.state == ProposalState.Queued) {
1928                 executionState = ExecutionState.QueueBarCrossed;
1929             } else if (proposal.state == ProposalState.PreBoosted) {
1930                 executionState = ExecutionState.PreBoostedBarCrossed;
1931             } else {
1932                 executionState = ExecutionState.BoostedBarCrossed;
1933             }
1934             proposal.state = ProposalState.Executed;
1935         } else {
1936             if (proposal.state == ProposalState.Queued) {
1937                 // solhint-disable-next-line not-rely-on-time
1938                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
1939                     proposal.state = ProposalState.ExpiredInQueue;
1940                     proposal.winningVote = NO;
1941                     executionState = ExecutionState.QueueTimeOut;
1942                 } else {
1943                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1944                     if (_score(_proposalId) > confidenceThreshold) {
1945                         //change proposal mode to PreBoosted mode.
1946                         proposal.state = ProposalState.PreBoosted;
1947                         // solhint-disable-next-line not-rely-on-time
1948                         proposal.times[2] = now;
1949                         proposal.confidenceThreshold = confidenceThreshold;
1950                     }
1951                 }
1952             }
1953 
1954             if (proposal.state == ProposalState.PreBoosted) {
1955                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
1956               // solhint-disable-next-line not-rely-on-time
1957                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
1958                     if ((_score(_proposalId) > confidenceThreshold) &&
1959                         (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS)) {
1960                        //change proposal mode to Boosted mode.
1961                         proposal.state = ProposalState.Boosted;
1962                        // solhint-disable-next-line not-rely-on-time
1963                         proposal.times[1] = now;
1964                         orgBoostedProposalsCnt[proposal.organizationId]++;
1965                        //add a value to average -> average = average + ((value - average) / nbValues)
1966                         averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
1967                         // solium-disable-next-line indentation
1968                         averagesDownstakesOfBoosted[proposal.organizationId] =
1969                             uint256(int256(averageDownstakesOfBoosted) +
1970                             ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
1971                             int256(orgBoostedProposalsCnt[proposal.organizationId])));
1972                     }
1973                 } else { //check the Confidence level is stable
1974                     uint256 proposalScore = _score(_proposalId);
1975                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
1976                         proposal.state = ProposalState.Queued;
1977                     } else if (proposal.confidenceThreshold > proposalScore) {
1978                         proposal.confidenceThreshold = confidenceThreshold;
1979                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
1980                     }
1981                 }
1982             }
1983         }
1984 
1985         if ((proposal.state == ProposalState.Boosted) ||
1986             (proposal.state == ProposalState.QuietEndingPeriod)) {
1987             // solhint-disable-next-line not-rely-on-time
1988             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
1989                 proposal.state = ProposalState.Executed;
1990                 executionState = ExecutionState.BoostedTimeOut;
1991             }
1992         }
1993 
1994         if (executionState != ExecutionState.None) {
1995             if ((executionState == ExecutionState.BoostedTimeOut) ||
1996                 (executionState == ExecutionState.BoostedBarCrossed)) {
1997                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
1998                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
1999                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2000                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2001                 if (boostedProposals == 0) {
2002                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2003                 } else {
2004                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2005                     averagesDownstakesOfBoosted[proposal.organizationId] =
2006                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2007                 }
2008             }
2009             emit ExecuteProposal(
2010             _proposalId,
2011             organizations[proposal.organizationId],
2012             proposal.winningVote,
2013             totalReputation
2014             );
2015             emit GPExecuteProposal(_proposalId, executionState);
2016             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2017             proposal.daoBounty = proposal.daoBountyRemain;
2018         }
2019         if (tmpProposal.state != proposal.state) {
2020             emit StateChange(_proposalId, proposal.state);
2021         }
2022         return (executionState != ExecutionState.None);
2023     }
2024 
2025     /**
2026      * @dev staking function
2027      * @param _proposalId id of the proposal
2028      * @param _vote  NO(2) or YES(1).
2029      * @param _amount the betting amount
2030      * @return bool true - the proposal has been executed
2031      *              false - otherwise.
2032      */
2033     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2034         // 0 is not a valid vote.
2035         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2036         require(_amount > 0, "staking amount should be >0");
2037 
2038         if (_execute(_proposalId)) {
2039             return true;
2040         }
2041         Proposal storage proposal = proposals[_proposalId];
2042 
2043         if ((proposal.state != ProposalState.PreBoosted) &&
2044             (proposal.state != ProposalState.Queued)) {
2045             return false;
2046         }
2047 
2048         // enable to increase stake only on the previous stake vote
2049         Staker storage staker = proposal.stakers[_staker];
2050         if ((staker.amount > 0) && (staker.vote != _vote)) {
2051             return false;
2052         }
2053 
2054         uint256 amount = _amount;
2055         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2056         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2057         staker.amount = staker.amount.add(amount);
2058         //This is to prevent average downstakes calculation overflow
2059         //Note that any how GEN cap is 100000000 ether.
2060         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2061         require(proposal.totalStakes <= 0x100000000000000000000000000000000, "total stakes is too high");
2062 
2063         if (_vote == YES) {
2064             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2065         }
2066         staker.vote = _vote;
2067 
2068         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2069         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2070         return _execute(_proposalId);
2071     }
2072 
2073     /**
2074      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2075      * @param _proposalId id of the proposal
2076      * @param _voter used in case the vote is cast for someone else
2077      * @param _vote a value between 0 to and the proposal's number of choices.
2078      * @param _rep how many reputation the voter would like to stake for this vote.
2079      *         if  _rep==0 so the voter full reputation will be use.
2080      * @return true in case of proposal execution otherwise false
2081      * throws if proposal is not open or if it has been executed
2082      * NB: executes the proposal if a decision has been reached
2083      */
2084      // solhint-disable-next-line function-max-lines,code-complexity
2085     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2086         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2087         if (_execute(_proposalId)) {
2088             return true;
2089         }
2090 
2091         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2092         Proposal storage proposal = proposals[_proposalId];
2093 
2094         // Check voter has enough reputation:
2095         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2096         require(reputation > 0, "_voter must have reputation");
2097         require(reputation >= _rep, "reputation >= _rep");
2098         uint256 rep = _rep;
2099         if (rep == 0) {
2100             rep = reputation;
2101         }
2102         // If this voter has already voted, return false.
2103         if (proposal.voters[_voter].reputation != 0) {
2104             return false;
2105         }
2106         // The voting itself:
2107         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2108         //check if the current winningVote changed or there is a tie.
2109         //for the case there is a tie the current winningVote set to NO.
2110         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2111             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2112             proposal.winningVote == YES)) {
2113             if (proposal.state == ProposalState.Boosted &&
2114             // solhint-disable-next-line not-rely-on-time
2115                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2116                 proposal.state == ProposalState.QuietEndingPeriod) {
2117                 //quietEndingPeriod
2118                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2119                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2120                     proposal.state = ProposalState.QuietEndingPeriod;
2121                 }
2122                 // solhint-disable-next-line not-rely-on-time
2123                 proposal.times[1] = now;
2124             }
2125             proposal.winningVote = _vote;
2126         }
2127         proposal.voters[_voter] = Voter({
2128             reputation: rep,
2129             vote: _vote,
2130             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2131         });
2132         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2133             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2134             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2135             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2136         }
2137         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2138         return _execute(_proposalId);
2139     }
2140 
2141     /**
2142      * @dev _score return the proposal score (Confidence level)
2143      * For dual choice proposal S = (S+)/(S-)
2144      * @param _proposalId the ID of the proposal
2145      * @return uint256 proposal score as real number.
2146      */
2147     function _score(bytes32 _proposalId) internal view returns(uint256) {
2148         Proposal storage proposal = proposals[_proposalId];
2149         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2150         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2151     }
2152 
2153     /**
2154       * @dev _isVotable check if the proposal is votable
2155       * @param _proposalId the ID of the proposal
2156       * @return bool true or false
2157     */
2158     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2159         ProposalState pState = proposals[_proposalId].state;
2160         return ((pState == ProposalState.PreBoosted)||
2161                 (pState == ProposalState.Boosted)||
2162                 (pState == ProposalState.QuietEndingPeriod)||
2163                 (pState == ProposalState.Queued)
2164         );
2165     }
2166 }
2167 
2168 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2169 
2170 pragma solidity ^0.5.4;
2171 
2172 
2173 
2174 
2175 /**
2176  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2177  */
2178 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2179     using ECDSA for bytes32;
2180 
2181     // Digest describing the data the user signs according EIP 712.
2182     // Needs to match what is passed to Metamask.
2183     bytes32 public constant DELEGATION_HASH_EIP712 =
2184     keccak256(abi.encodePacked(
2185     "address GenesisProtocolAddress",
2186     "bytes32 ProposalId",
2187     "uint256 Vote",
2188     "uint256 AmountToStake",
2189     "uint256 Nonce"
2190     ));
2191 
2192     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2193 
2194     /**
2195      * @dev Constructor
2196      */
2197     constructor(IERC20 _stakingToken)
2198     public
2199     // solhint-disable-next-line no-empty-blocks
2200     GenesisProtocolLogic(_stakingToken) {
2201     }
2202 
2203     /**
2204      * @dev staking function
2205      * @param _proposalId id of the proposal
2206      * @param _vote  NO(2) or YES(1).
2207      * @param _amount the betting amount
2208      * @return bool true - the proposal has been executed
2209      *              false - otherwise.
2210      */
2211     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2212         return _stake(_proposalId, _vote, _amount, msg.sender);
2213     }
2214 
2215     /**
2216      * @dev stakeWithSignature function
2217      * @param _proposalId id of the proposal
2218      * @param _vote  NO(2) or YES(1).
2219      * @param _amount the betting amount
2220      * @param _nonce nonce value ,it is part of the signature to ensure that
2221               a signature can be received only once.
2222      * @param _signatureType signature type
2223               1 - for web3.eth.sign
2224               2 - for eth_signTypedData according to EIP #712.
2225      * @param _signature  - signed data by the staker
2226      * @return bool true - the proposal has been executed
2227      *              false - otherwise.
2228      */
2229     function stakeWithSignature(
2230         bytes32 _proposalId,
2231         uint256 _vote,
2232         uint256 _amount,
2233         uint256 _nonce,
2234         uint256 _signatureType,
2235         bytes calldata _signature
2236         )
2237         external
2238         returns(bool)
2239         {
2240         // Recreate the digest the user signed
2241         bytes32 delegationDigest;
2242         if (_signatureType == 2) {
2243             delegationDigest = keccak256(
2244                 abi.encodePacked(
2245                     DELEGATION_HASH_EIP712, keccak256(
2246                         abi.encodePacked(
2247                         address(this),
2248                         _proposalId,
2249                         _vote,
2250                         _amount,
2251                         _nonce)
2252                     )
2253                 )
2254             );
2255         } else {
2256             delegationDigest = keccak256(
2257                         abi.encodePacked(
2258                         address(this),
2259                         _proposalId,
2260                         _vote,
2261                         _amount,
2262                         _nonce)
2263                     ).toEthSignedMessageHash();
2264         }
2265         address staker = delegationDigest.recover(_signature);
2266         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2267         require(staker != address(0), "staker address cannot be 0");
2268         require(stakesNonce[staker] == _nonce);
2269         stakesNonce[staker] = stakesNonce[staker].add(1);
2270         return _stake(_proposalId, _vote, _amount, staker);
2271     }
2272 
2273     /**
2274      * @dev voting function
2275      * @param _proposalId id of the proposal
2276      * @param _vote NO(2) or YES(1).
2277      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2278      * @param _voter voter address
2279      * @return bool true - the proposal has been executed
2280      *              false - otherwise.
2281      */
2282     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2283     external
2284     votable(_proposalId)
2285     returns(bool) {
2286         Proposal storage proposal = proposals[_proposalId];
2287         Parameters memory params = parameters[proposal.paramsHash];
2288         address voter;
2289         if (params.voteOnBehalf != address(0)) {
2290             require(msg.sender == params.voteOnBehalf);
2291             voter = _voter;
2292         } else {
2293             voter = msg.sender;
2294         }
2295         return internalVote(_proposalId, voter, _vote, _amount);
2296     }
2297 
2298   /**
2299    * @dev Cancel the vote of the msg.sender.
2300    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2301    * This function is here in order to comply to the IntVoteInterface .
2302    */
2303     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2304        //this is not allowed
2305         return;
2306     }
2307 
2308     /**
2309       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2310       * @param _proposalId the id of the proposal
2311       * @return bool true - the proposal has been executed
2312       *              false - otherwise.
2313      */
2314     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2315         return _execute(_proposalId);
2316     }
2317 
2318   /**
2319     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2320     * @return uint256 that contains number of choices
2321     */
2322     function getNumberOfChoices(bytes32) external view returns(uint256) {
2323         return NUM_OF_CHOICES;
2324     }
2325 
2326     /**
2327       * @dev getProposalTimes returns proposals times variables.
2328       * @param _proposalId id of the proposal
2329       * @return proposals times array
2330       */
2331     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2332         return proposals[_proposalId].times;
2333     }
2334 
2335     /**
2336      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2337      * @param _proposalId the ID of the proposal
2338      * @param _voter the address of the voter
2339      * @return uint256 vote - the voters vote
2340      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2341      */
2342     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2343         Voter memory voter = proposals[_proposalId].voters[_voter];
2344         return (voter.vote, voter.reputation);
2345     }
2346 
2347     /**
2348     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2349     * @param _proposalId the ID of the proposal
2350     * @param _choice the index in the
2351     * @return voted reputation for the given choice
2352     */
2353     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2354         return proposals[_proposalId].votes[_choice];
2355     }
2356 
2357     /**
2358     * @dev isVotable check if the proposal is votable
2359     * @param _proposalId the ID of the proposal
2360     * @return bool true or false
2361     */
2362     function isVotable(bytes32 _proposalId) external view returns(bool) {
2363         return _isVotable(_proposalId);
2364     }
2365 
2366     /**
2367     * @dev proposalStatus return the total votes and stakes for a given proposal
2368     * @param _proposalId the ID of the proposal
2369     * @return uint256 preBoostedVotes YES
2370     * @return uint256 preBoostedVotes NO
2371     * @return uint256 total stakes YES
2372     * @return uint256 total stakes NO
2373     */
2374     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2375         return (
2376                 proposals[_proposalId].preBoostedVotes[YES],
2377                 proposals[_proposalId].preBoostedVotes[NO],
2378                 proposals[_proposalId].stakes[YES],
2379                 proposals[_proposalId].stakes[NO]
2380         );
2381     }
2382 
2383   /**
2384     * @dev getProposalOrganization return the organizationId for a given proposal
2385     * @param _proposalId the ID of the proposal
2386     * @return bytes32 organization identifier
2387     */
2388     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2389         return (proposals[_proposalId].organizationId);
2390     }
2391 
2392     /**
2393       * @dev getStaker return the vote and stake amount for a given proposal and staker
2394       * @param _proposalId the ID of the proposal
2395       * @param _staker staker address
2396       * @return uint256 vote
2397       * @return uint256 amount
2398     */
2399     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2400         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2401     }
2402 
2403     /**
2404       * @dev voteStake return the amount stakes for a given proposal and vote
2405       * @param _proposalId the ID of the proposal
2406       * @param _vote vote number
2407       * @return uint256 stake amount
2408     */
2409     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2410         return proposals[_proposalId].stakes[_vote];
2411     }
2412 
2413   /**
2414     * @dev voteStake return the winningVote for a given proposal
2415     * @param _proposalId the ID of the proposal
2416     * @return uint256 winningVote
2417     */
2418     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2419         return proposals[_proposalId].winningVote;
2420     }
2421 
2422     /**
2423       * @dev voteStake return the state for a given proposal
2424       * @param _proposalId the ID of the proposal
2425       * @return ProposalState proposal state
2426     */
2427     function state(bytes32 _proposalId) external view returns(ProposalState) {
2428         return proposals[_proposalId].state;
2429     }
2430 
2431    /**
2432     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2433     * @return bool true or false
2434     */
2435     function isAbstainAllow() external pure returns(bool) {
2436         return false;
2437     }
2438 
2439     /**
2440      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2441      * @return min - minimum number of choices
2442                max - maximum number of choices
2443      */
2444     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2445         return (YES, NO);
2446     }
2447 
2448     /**
2449      * @dev score return the proposal score
2450      * @param _proposalId the ID of the proposal
2451      * @return uint256 proposal score.
2452      */
2453     function score(bytes32 _proposalId) public view returns(uint256) {
2454         return  _score(_proposalId);
2455     }
2456 }
2457 
2458 // File: contracts/votingMachines/VotingMachineCallbacks.sol
2459 
2460 pragma solidity ^0.5.4;
2461 
2462 
2463 
2464 
2465 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2466 
2467     struct ProposalInfo {
2468         uint256 blockNumber; // the proposal's block number
2469         Avatar avatar; // the proposal's avatar
2470     }
2471 
2472     modifier onlyVotingMachine(bytes32 _proposalId) {
2473         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
2474         _;
2475     }
2476 
2477     // VotingMaching  ->  proposalId  ->  ProposalInfo
2478     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
2479 
2480     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2481     external
2482     onlyVotingMachine(_proposalId)
2483     returns(bool)
2484     {
2485         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2486         if (avatar == Avatar(0)) {
2487             return false;
2488         }
2489         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2490     }
2491 
2492     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2493     external
2494     onlyVotingMachine(_proposalId)
2495     returns(bool)
2496     {
2497         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2498         if (avatar == Avatar(0)) {
2499             return false;
2500         }
2501         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2502     }
2503 
2504     function stakingTokenTransfer(
2505         IERC20 _stakingToken,
2506         address _beneficiary,
2507         uint256 _amount,
2508         bytes32 _proposalId)
2509     external
2510     onlyVotingMachine(_proposalId)
2511     returns(bool)
2512     {
2513         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2514         if (avatar == Avatar(0)) {
2515             return false;
2516         }
2517         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2518     }
2519 
2520     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2521         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2522         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
2523             return 0;
2524         }
2525         return _stakingToken.balanceOf(address(avatar));
2526     }
2527 
2528     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2529         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2530         if (proposal.avatar == Avatar(0)) {
2531             return 0;
2532         }
2533         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2534     }
2535 
2536     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2537         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2538         if (proposal.avatar == Avatar(0)) {
2539             return 0;
2540         }
2541         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2542     }
2543 }
2544 
2545 // File: universalSchemes/GenericScheme.sol
2546 
2547 pragma solidity ^0.5.4;
2548 
2549 
2550 
2551 
2552 
2553 
2554 /**
2555  * @title GenericScheme.
2556  * @dev  A scheme for proposing and executing calls to an arbitrary function
2557  * on a specific contract on behalf of the organization avatar.
2558  */
2559 contract GenericScheme is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2560     event NewCallProposal(
2561         address indexed _avatar,
2562         bytes32 indexed _proposalId,
2563         bytes   _callData,
2564         string  _descriptionHash
2565     );
2566 
2567     event ProposalExecuted(
2568         address indexed _avatar,
2569         bytes32 indexed _proposalId,
2570         bytes _genericCallReturnValue
2571     );
2572 
2573     event ProposalExecutedByVotingMachine(
2574         address indexed _avatar,
2575         bytes32 indexed _proposalId,
2576         int256 _param
2577     );
2578 
2579     event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);
2580 
2581     // Details of a voting proposal:
2582     struct CallProposal {
2583         bytes callData;
2584         bool exist;
2585         bool passed;
2586     }
2587 
2588     // A mapping from the organization (Avatar) address to the saved data of the organization:
2589     mapping(address=>mapping(bytes32=>CallProposal)) public organizationsProposals;
2590 
2591     struct Parameters {
2592         IntVoteInterface intVote;
2593         bytes32 voteParams;
2594         address contractToCall;
2595     }
2596 
2597     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2598     mapping(bytes32=>Parameters) public parameters;
2599 
2600     /**
2601     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2602     * @param _proposalId the ID of the voting in the voting machine
2603     * @param _decision a parameter of the voting result, 1 yes and 2 is no.
2604     * @return bool success
2605     */
2606     function executeProposal(bytes32 _proposalId, int256 _decision)
2607     external
2608     onlyVotingMachine(_proposalId)
2609     returns(bool) {
2610         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2611         CallProposal storage proposal = organizationsProposals[address(avatar)][_proposalId];
2612         require(proposal.exist, "must be a live proposal");
2613         require(proposal.passed == false, "cannot execute twice");
2614 
2615         if (_decision == 1) {
2616             proposal.passed = true;
2617             execute(avatar, _proposalId);
2618         } else {
2619             delete organizationsProposals[address(avatar)][_proposalId];
2620             emit ProposalDeleted(address(avatar), _proposalId);
2621         }
2622 
2623         emit ProposalExecutedByVotingMachine(address(avatar), _proposalId, _decision);
2624         return true;
2625     }
2626 
2627     /**
2628     * @dev execution of proposals after it has been decided by the voting machine
2629     * @param _proposalId the ID of the voting in the voting machine
2630     */
2631     function execute(Avatar _avatar, bytes32 _proposalId) public {
2632         Parameters memory params = parameters[getParametersFromController(_avatar)];
2633         CallProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2634         require(proposal.exist, "must be a live proposal");
2635         require(proposal.passed, "proposal must passed by voting machine");
2636         proposal.exist = false;
2637         bytes memory genericCallReturnValue;
2638         bool success;
2639         ControllerInterface controller = ControllerInterface(_avatar.owner());
2640         (success, genericCallReturnValue) = controller.genericCall(params.contractToCall, proposal.callData, _avatar);
2641         if (success) {
2642             delete organizationsProposals[address(_avatar)][_proposalId];
2643             emit ProposalDeleted(address(_avatar), _proposalId);
2644             emit ProposalExecuted(address(_avatar), _proposalId, genericCallReturnValue);
2645         } else {
2646             proposal.exist = true;
2647         }
2648     }
2649 
2650     /**
2651     * @dev Hash the parameters, save them if necessary, and return the hash value
2652     * @param _voteParams -  voting parameters
2653     * @param _intVote  - voting machine contract.
2654     * @return bytes32 -the parameters hash
2655     */
2656     function setParameters(
2657         bytes32 _voteParams,
2658         IntVoteInterface _intVote,
2659         address _contractToCall
2660     ) public returns(bytes32)
2661     {
2662         bytes32 paramsHash = getParametersHash(_voteParams, _intVote, _contractToCall);
2663         parameters[paramsHash].voteParams = _voteParams;
2664         parameters[paramsHash].intVote = _intVote;
2665         parameters[paramsHash].contractToCall = _contractToCall;
2666         return paramsHash;
2667     }
2668 
2669     /**
2670     * @dev Hash the parameters, and return the hash value
2671     * @param _voteParams -  voting parameters
2672     * @param _intVote  - voting machine contract.
2673     * @return bytes32 -the parameters hash
2674     */
2675     function getParametersHash(
2676         bytes32 _voteParams,
2677         IntVoteInterface _intVote,
2678         address _contractToCall
2679     ) public pure returns(bytes32)
2680     {
2681         return keccak256(abi.encodePacked(_voteParams, _intVote, _contractToCall));
2682     }
2683 
2684     /**
2685     * @dev propose to call on behalf of the _avatar
2686     *      The function trigger NewCallProposal event
2687     * @param _callData - The abi encode data for the call
2688     * @param _avatar avatar of the organization
2689     * @param _descriptionHash proposal description hash
2690     * @return an id which represents the proposal
2691     */
2692     function proposeCall(Avatar _avatar, bytes memory _callData, string memory _descriptionHash)
2693     public
2694     returns(bytes32)
2695     {
2696         Parameters memory params = parameters[getParametersFromController(_avatar)];
2697         IntVoteInterface intVote = params.intVote;
2698 
2699         bytes32 proposalId = intVote.propose(2, params.voteParams, msg.sender, address(_avatar));
2700 
2701         organizationsProposals[address(_avatar)][proposalId] = CallProposal({
2702             callData: _callData,
2703             exist: true,
2704             passed: false
2705         });
2706         proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({
2707             blockNumber:block.number,
2708             avatar:_avatar
2709         });
2710         emit NewCallProposal(address(_avatar), proposalId, _callData, _descriptionHash);
2711         return proposalId;
2712     }
2713 
2714     /**
2715     * @dev getContractToCall return the contract this scheme is calling
2716     * @param _avatar address of the organization's avatar
2717     * @return address the address of the contract this scheme is calling to
2718     * on behalf of the avatar
2719     */
2720     function getContractToCall(Avatar _avatar) public view returns(address) {
2721         return parameters[getParametersFromController(_avatar)].contractToCall;
2722     }
2723 
2724 }