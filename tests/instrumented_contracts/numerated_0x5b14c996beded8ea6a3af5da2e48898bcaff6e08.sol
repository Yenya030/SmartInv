1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ZRRNFT.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ERC721G.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {DefaultOperatorFilterer} from \"./DefaultOperatorFilterer.sol\";\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n\ncontract ZRRNFT is ERC721G, DefaultOperatorFilterer, Ownable, ERC721Holder{\n    using Strings for uint256;\n\n    bool public isPublic;\n    bool public isNotWhite;\n    uint256 public maxSupply;\n    address public devAddress;\n    uint256 public constant WHITE_PRICE = 300000000000000000; //0.3 ETH\n    uint256 public constant PRIV_PRICE = 300000000000000000; //0.3 ETH\n    uint256 public constant PUB_PRICE = 430000000000000000; //0.43 ETH\n    string private _baseTokenURI;\n    constructor() ERC721G(\"Zodiac Rankings Race\", \"ZRR\", 1, 3) {\n        maxSupply = 999;\n        devAddress = msg.sender;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == devAddress || msg.sender == owner(), \"ZRR: Only Governance\");\n        _;\n    }\n\n    function chgToPub() external onlyGovernance {\n        isPublic = !isPublic;\n    }\n\n    function chgToNotWhite() external onlyGovernance {\n        isNotWhite = !isNotWhite;\n    }\n\n    function setBaseURI(string calldata baseURI) external onlyGovernance {\n        _baseTokenURI = baseURI;\n    }\n\n    function withdrawETH() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function withdrawToken(address _tokenContract, uint256 _amount) external onlyOwner{\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\n    }\n    \n    function mint(uint256 _amount) payable external{\n        if(!isNotWhite) {\n            require(_amount <= 1, \"ZRR: Max 1 per mint\");\n            require(msg.value == WHITE_PRICE * _amount, \"ZRR: Priv Insufficient ETH\");\n            require(_balanceData[msg.sender].mintedAmount < 1, \"ZRR: Max 1 mint per address\");\n            require(_amount + totalSupply() <= 40, \"ZRR: End for whitelist sales\");\n        }\n        else {\n            require(_amount <= 3, \"ZRR: Max 3 per mint\");\n            require(_balanceData[msg.sender].mintedAmount < 3, \"ZRR: Max 3 mint per address\");\n            if (!isPublic) {\n                require(msg.value == PRIV_PRICE * _amount, \"ZRR: Insufficient ETH\");\n                require(_amount + totalSupply() <= 666, \"ZRR: End for private sales\");\n\n            }\n            else {\n                require(msg.value == PUB_PRICE * _amount, \"ZRR: Insufficient ETH\");\n                require(_amount + totalSupply() <= maxSupply, \"ZRR: All minted\");\n\n            }\n        }\n\n        _mint(msg.sender, _amount);\n    }\n\n    function _baseURI() internal view returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function tokenURI(uint256 tokenId_) public override view returns (string memory) {\n        require(tokenId_ > 0, \"ZRR: Id starts from 1\");\n        require(_exists(tokenId_),\"ZRR: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0  ? string(abi.encodePacked(baseURI, tokenId_.toString())) : \"\";\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\n        public\n        override\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n}"
6     },
7     "contracts/ERC721G.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//////////////////////////////////////////////\r\n//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★//\r\n//★    _______  _____  _______ ___  _____  ★//\r\n//★   / __/ _ \\/ ___/ /_  /_  <  / / ___/  ★//\r\n//★  / _// , _/ /__    / / __// / / (_ /   ★//\r\n//★ /___/_/|_|\\___/   /_/____/_/  \\___/    ★//\r\n//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★//\r\n//  by: 0xInuarashi                         //\r\n//////////////////////////////////////////////\r\n//  Audits: 0xAkihiko, 0xFoobar             //\r\n//////////////////////////////////////////////        \r\n//  Default: Staking Disabled               //\r\n//////////////////////////////////////////////\r\n\r\ncontract ERC721G {\r\n\r\n    // Standard ERC721 Events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved,\r\n        uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator,\r\n        bool approved);\r\n \r\n    // Standard ERC721 Global Variables\r\n    string public name; // Token Name\r\n    string public symbol; // Token Symbol\r\n\r\n    // ERC721G Global Variables\r\n    uint256 public tokenIndex; // The running index for the next TokenId\r\n    uint256 public immutable startTokenId; // Bytes Storage for the starting TokenId\r\n    uint256 public immutable maxBatchSize;\r\n\r\n    // ERC721G Staking Address Target\r\n    function stakingAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    /** @dev instructions:\r\n     *  name_ sets the token name\r\n     *  symbol_ sets the token symbol\r\n     *  startId_ sets the starting tokenId (recommended 0-1)\r\n     *  maxBatchSize_ sets the maximum batch size for each mint (recommended 5-20)\r\n     */\r\n    constructor(\r\n    string memory name_, string memory symbol_, \r\n    uint256 startId_, uint256 maxBatchSize_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        tokenIndex = startId_;\r\n        startTokenId = startId_;\r\n        maxBatchSize = maxBatchSize_;\r\n    }\r\n\r\n    // ERC721G Structs\r\n    struct OwnerStruct {\r\n        address owner; // stores owner address for OwnerOf\r\n        uint32 lastTransfer; // stores the last transfer of the token\r\n    }\r\n\r\n    struct BalanceStruct {\r\n        uint32 balance; // stores the token balance of the address\r\n        uint32 mintedAmount; // stores the minted amount of the address on mint\r\n        // 24 Free Bytes\r\n    }\r\n\r\n    // ERC721G Mappings\r\n    mapping(uint256 => OwnerStruct) public _tokenData; // ownerOf replacement\r\n    mapping(address => BalanceStruct) public _balanceData; // balanceOf replacement\r\n    mapping(uint256 => OwnerStruct) public mintIndex; // uninitialized ownerOf pointer\r\n\r\n    // ERC721 Mappings\r\n    mapping(uint256 => address) public getApproved; // for single token approvals\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll; // approveal\r\n\r\n    ///// ERC721G: ERC721-Like Simple Read Outputs /////\r\n    function totalSupply() public virtual view returns (uint256) {\r\n        return tokenIndex - startTokenId;\r\n    }\r\n    function balanceOf(address address_) public virtual view returns (uint256) {\r\n        return _balanceData[address_].balance;\r\n    }\r\n\r\n    ///// ERC721G: Range-Based Logic /////\r\n    \r\n    /** @dev explanation:\r\n     *  _getTokenDataOf() finds and returns either the (and in priority)\r\n     *      - the initialized storage pointer from _tokenData\r\n     *      - the uninitialized storage pointer from mintIndex\r\n     * \r\n     *  if the _tokenData storage slot is populated, return it\r\n     *  otherwise, do a reverse-lookup to find the uninitialized pointer from mintIndex\r\n     */\r\n    function _getTokenDataOf(uint256 tokenId_) public virtual view\r\n    returns (OwnerStruct memory) {\r\n        // The tokenId must be above startTokenId only\r\n        require(tokenId_ >= startTokenId, \"TokenId below starting Id!\");\r\n        \r\n        // If the _tokenData is initialized (not 0x0), return the _tokenData\r\n        if (_tokenData[tokenId_].owner != address(0)\r\n            || tokenId_ >= tokenIndex) {\r\n            return _tokenData[tokenId_];\r\n        }\r\n\r\n        // Else, do a reverse-lookup to find  the corresponding uninitialized pointer\r\n        else { unchecked {\r\n            uint256 _lowerRange = tokenId_;\r\n            while (mintIndex[_lowerRange].owner == address(0)) { _lowerRange--; }\r\n            return mintIndex[_lowerRange];\r\n        }}\r\n    }\r\n\r\n    /** @dev explanation: \r\n     *  ownerOf calls _getTokenDataOf() which returns either the initialized or \r\n     *  uninitialized pointer. \r\n     *  Then, it checks if the token is staked or not through stakeTimestamp.\r\n     *  If the token is staked, return the stakingAddress, otherwise, return the owner.\r\n     */\r\n    function ownerOf(uint256 tokenId_) public virtual view returns (address) {\r\n        OwnerStruct memory _OwnerStruct = _getTokenDataOf(tokenId_);\r\n        return _OwnerStruct.owner;\r\n    }\r\n\r\n    /** @dev explanation:\r\n     *  _trueOwnerOf() calls _getTokenDataOf() which returns either the initialized or\r\n     *  uninitialized pointer.\r\n     *  It returns the owner directly without any checks. \r\n     *  Used internally for proving the staker address on unstake.\r\n     */\r\n    function _trueOwnerOf(uint256 tokenId_) public virtual view returns (address) {\r\n        return _getTokenDataOf(tokenId_).owner;\r\n    }\r\n\r\n    ///// ERC721G: Internal Single-Contract Staking Logic /////\r\n    \r\n    /** @dev explanation:\r\n     *  _initializeTokenIf() is used as a beginning-hook to functions that require\r\n     *  that the token is explicitly INITIALIZED before the function is able to be used.\r\n     *  It will check if the _tokenData slot is initialized or not. \r\n     *  If it is not, it will initialize it.\r\n     *  Used internally for staking logic.\r\n     */\r\n    function _initializeTokenIf(uint256 tokenId_, OwnerStruct memory _OwnerStruct) \r\n    internal virtual {\r\n        // If the target _tokenData is not initialized, initialize it.\r\n        if (_tokenData[tokenId_].owner == address(0)) {\r\n            _tokenData[tokenId_] = _OwnerStruct;\r\n        }\r\n    }\r\n\r\n    ///// ERC721G Range-Based Internal Minting Logic /////\r\n    \r\n    /** @dev explanation:\r\n     *  _mintInternal() is our internal batch minting logic. \r\n     *  First, we store the uninitialized pointer at mintIndex of _startId\r\n     *  Then, we process the balances changes\r\n     *  Finally, we phantom-mint the tokens using Transfer events loop.\r\n     */\r\n    function _mintInternal(address to_, uint256 amount_) internal virtual {\r\n        // cannot mint to 0x0\r\n        require(to_ != address(0), \"ERC721G: _mintInternal to 0x0\");\r\n\r\n        // we limit max mints to prevent expensive gas lookup\r\n        require(amount_ <= maxBatchSize, \r\n            \"ERC721G: _mintInternal over maxBatchSize\");\r\n\r\n        // process the token id data\r\n        uint256 _startId = tokenIndex;\r\n        uint256 _endId = _startId + amount_;\r\n\r\n        // push the required phantom mint data to mintIndex\r\n        mintIndex[_startId].owner = to_;\r\n\r\n        // process the balance changes and do a loop to phantom-mint the tokens to to_\r\n        unchecked { \r\n            _balanceData[to_].balance += uint32(amount_);\r\n            _balanceData[to_].mintedAmount += uint32(amount_);\r\n\r\n            do { emit Transfer(address(0), to_, _startId); } while (++_startId < _endId);\r\n        }\r\n\r\n        // set the new token index\r\n        tokenIndex = _endId;\r\n    }\r\n\r\n    /** @dev explanation:\r\n     *  _mint() is the function that calls _mintInternal() using a while-loop\r\n     *  based on the maximum batch size (maxBatchSize)\r\n     */\r\n    function _mint(address to_, uint256 amount_) internal virtual {\r\n        uint256 _amountToMint = amount_;\r\n        while (_amountToMint > maxBatchSize) {\r\n            _amountToMint -= maxBatchSize;\r\n            _mintInternal(to_, maxBatchSize);\r\n        }\r\n        _mintInternal(to_, _amountToMint);\r\n    }\r\n\r\n    /** @dev explanation:\r\n     *  _transfer() is the internal function that transfers the token from_ to to_\r\n     *  it has ERC721-standard require checks\r\n     *  and then uses solmate-style approval clearing\r\n     * \r\n     *  afterwards, it sets the _tokenData to the data of the to_ (transferee) as well as\r\n     *  set the balanceData.\r\n     *  \r\n     *  this results in INITIALIZATION of the token, if it has not been initialized yet. \r\n     */\r\n    function _transfer(address from_, address to_, uint256 tokenId_) internal virtual {\r\n        // the from_ address must be the ownerOf\r\n        require(from_ == ownerOf(tokenId_), \"ERC721G: _transfer != ownerOf\");\r\n        // cannot transfer to 0x0\r\n        require(to_ != address(0), \"ERC721G: _transfer to 0x0\");\r\n\r\n        // delete any approvals\r\n        delete getApproved[tokenId_];\r\n\r\n        // set _tokenData to to_\r\n        _tokenData[tokenId_].owner = to_;\r\n\r\n        // update the balance data\r\n        unchecked { \r\n            _balanceData[from_].balance--;\r\n            _balanceData[to_].balance++;\r\n        }\r\n\r\n        // emit a standard Transfer\r\n        emit Transfer(from_, to_, tokenId_);\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////\r\n    ///// ERC721G: ERC721 Standard Logic                             /////\r\n    //////////////////////////////////////////////////////////////////////\r\n    /** @dev clarification:\r\n     *  no explanations here as these are standard ERC721 logics.\r\n     *  the reason that we can use standard ERC721 logics is because\r\n     *  the ERC721G logic is compartmentalized and supports internally \r\n     *  these ERC721 logics without any need of modification.\r\n     */\r\n    function _isApprovedOrOwner(address spender_, uint256 tokenId_) internal \r\n    view virtual returns (bool) {\r\n        address _owner = ownerOf(tokenId_);\r\n        return (\r\n            // \"i am the owner of the token, and i am transferring it\"\r\n            _owner == spender_\r\n            // \"the token's approved spender is me\"\r\n            || getApproved[tokenId_] == spender_\r\n            // \"the owner has approved me to spend all his tokens\"\r\n            || isApprovedForAll[_owner][spender_]);\r\n    }\r\n    \r\n    /** @dev clarification:\r\n     *  sets a specific address to be able to spend a specific token.\r\n     */\r\n    function _approve(address to_, uint256 tokenId_) internal virtual {\r\n        getApproved[tokenId_] = to_;\r\n        emit Approval(ownerOf(tokenId_), to_, tokenId_);\r\n    }\r\n\r\n    function approve(address to_, uint256 tokenId_) public virtual {\r\n        address _owner = ownerOf(tokenId_);\r\n        require(\r\n            // \"i am the owner, and i am approving this token.\"\r\n            _owner == msg.sender \r\n            // \"i am isApprovedForAll, so i can approve this token too.\"\r\n            || isApprovedForAll[_owner][msg.sender],\r\n            \"ERC721G: approve not authorized\");\r\n\r\n        _approve(to_, tokenId_);\r\n    }\r\n\r\n    function _setApprovalForAll(address owner_, address operator_, bool approved_) \r\n    internal virtual {\r\n        isApprovedForAll[owner_][operator_] = approved_;\r\n        emit ApprovalForAll(owner_, operator_, approved_);\r\n    }\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        // this function can only be used as self-approvalforall for others. \r\n        _setApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n\r\n    function _exists(uint256 tokenId_) internal virtual view returns (bool) {\r\n        return ownerOf(tokenId_) != address(0);\r\n    }\r\n\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId_),\r\n            \"ERC721G: transferFrom unauthorized\");\r\n        _transfer(from_, to_, tokenId_);\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_,\r\n    bytes memory data_) public virtual {\r\n        transferFrom(from_, to_, tokenId_);\r\n        if (to_.code.length != 0) {\r\n            (, bytes memory _returned) = to_.call(abi.encodeWithSelector(\r\n                0x150b7a02, msg.sender, from_, tokenId_, data_));\r\n            bytes4 _selector = abi.decode(_returned, (bytes4));\r\n            require(_selector == 0x150b7a02, \r\n                \"ERC721G: safeTransferFrom to_ non-ERC721Receivable!\");\r\n        }\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) \r\n    public virtual {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    /** @dev description: walletOfOwner to query an array of wallet's\r\n     *  owned tokens. A view-intensive alternative ERC721Enumerable function.\r\n     */\r\n    function walletOfOwner(address address_) public virtual view \r\n    returns (uint256[] memory) {\r\n        uint256 _balance = balanceOf(address_);\r\n        uint256[] memory _tokens = new uint256[] (_balance);\r\n        uint256 _currentIndex;\r\n        uint256 i = startTokenId;\r\n        while (_currentIndex < _balance) {\r\n            if (ownerOf(i) == address_) { _tokens[_currentIndex++] = i; }\r\n            unchecked { ++i; }\r\n        }\r\n        return _tokens;\r\n    }\r\n    //////////////////////////////////////////////////////////////////////\r\n    ///// ERC721G: ERC721 Standard Logic                             /////\r\n    //////////////////////////////////////////////////////////////////////\r\n\r\n    /** @dev requirement: You MUST implement your own tokenURI logic here \r\n     *  recommended to use through an override function in your main contract.\r\n     */\r\n    function tokenURI(uint256 tokenId_) public virtual view returns (string memory) {}\r\n}"
9     },
10     "contracts/DefaultOperatorFilterer.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Strings.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
21     },
22     "contracts/OperatorFilterer.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry constant operatorFilterRegistry =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (subscribe) {\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    operatorFilterRegistry.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            // Allow spending tokens from addresses with balance\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n            // from an EOA.\n            if (from == msg.sender) {\n                _;\n                return;\n            }\n            if (\n                !(\n                    operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\n                        && operatorFilterRegistry.isOperatorAllowed(address(this), from)\n                )\n            ) {\n                revert OperatorNotAllowed(msg.sender);\n            }\n        }\n        _;\n    }\n}\n"
24     },
25     "contracts/IOperatorFilterRegistry.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
27     },
28     "@openzeppelin/contracts/utils/math/Math.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Context.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     },
55     "libraries": {}
56   }
57 }}