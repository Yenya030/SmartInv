1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CheckPass.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC721{\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n}\n\ncontract CheckPass is Ownable {\n\n    address public CheckBirdsNft=0xc597A66d3c37dB76eB0bC08A5bD5908c2beBe489;\n    address public CheckBirdsburn=0x0000000000000000000000000000000000000000;\n    bool public BurnMintStatus;\n    bool public RareBurnMintStatus;\n\n    mapping(uint256 => bool) public rarecheckbirdslist;\n    mapping(address => uint256) public burninfos;\n    mapping(address => uint256) public rareburninfos;\n    constructor() {}\n\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"Must from real wallet address\");\n        _;\n    }\n\n    function burn(uint256[] memory tokenids) public payable callerIsUser{\n        require(BurnMintStatus,\"Error: Burn stage closed\");\n        require(tokenids.length == 3, \"Error: Wrong quantity\");\n        require(burninfos[msg.sender] == 0, \"Error: You have only have one chance\");\n        for (uint i = 0; i < tokenids.length; i++) {\n            address owner = IERC721(CheckBirdsNft).ownerOf(tokenids[i]);\n            require(msg.sender == owner, \"Error: Not ERC721 owner\");\n            IERC721(CheckBirdsNft).safeTransferFrom(msg.sender,CheckBirdsburn,tokenids[i]);\n        }\n        burninfos[msg.sender] += 1;\n    }\n\n   function rareburn(uint256[] memory tokenids) public payable callerIsUser{\n        require(RareBurnMintStatus,\"Error: Burn stage closed\");\n        require(tokenids.length == 3, \"Error: Wrong quantity\");\n        require(rareburninfos[msg.sender] == 0, \"Error: You have only have one chance\");\n        for (uint i = 0; i < tokenids.length; i++) {\n            require(rarecheckbirdslist[tokenids[i]],\"Error: Not 1/1 Nft\");\n            address owner = IERC721(CheckBirdsNft).ownerOf(tokenids[i]);\n            require(msg.sender == owner, \"Error: Not ERC721 owner\");\n            IERC721(CheckBirdsNft).safeTransferFrom(msg.sender,CheckBirdsburn,tokenids[i]);\n        }\n        rareburninfos[msg.sender] += 1;\n    }\n\n\n    function setBurnStatus(bool status) external onlyOwner {\n        BurnMintStatus = status;\n    }\n\n    function setRareBurnStatus(bool status) external onlyOwner {\n        RareBurnMintStatus = status;\n    }\n\n    function setCheckBirdsNft(address checkbirdsnft) external onlyOwner {\n        CheckBirdsNft = checkbirdsnft;\n    }\n\n    function setCheckBirdsBurn(address checkbirdsburn) external onlyOwner {\n        CheckBirdsburn = checkbirdsburn;\n    }\n\n    function setRarecheckbirdslist(uint256[] memory tokenids, bool status) external onlyOwner {\n        for (uint256 i; i < tokenids.length; ++i) {\n            rarecheckbirdslist[tokenids[i]] = status;\n        }\n    }\n\n    function withdraw() external onlyOwner {\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": true,
17       "runs": 200
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     },
31     "libraries": {}
32   }
33 }}