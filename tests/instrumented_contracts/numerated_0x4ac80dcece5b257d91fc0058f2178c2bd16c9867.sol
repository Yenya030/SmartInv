1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Timeout.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport { Ownable } from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\r\nimport { ReentrancyGuard } from \"../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\";\r\nimport \"../lib/ERC721A/contracts/ERC721A.sol\";\r\nimport \"../lib/ERC721A/contracts/extensions/ERC721AQueryable.sol\";\r\nimport { DataLibrarry } from \"./lib/DataLibrarry.sol\";\r\nimport { FunctionLib } from \"./lib/FunctionLib.sol\";\r\nimport { ITimeout } from \"./ITimeout.sol\";\r\nimport { Address } from \"../lib/openzeppelin-contracts/contracts/utils/Address.sol\";\r\nimport { Strings } from \"../lib/openzeppelin-contracts/contracts/utils/Strings.sol\";\r\nimport { Base64 } from \"../lib/openzeppelin-contracts/contracts/utils/Base64.sol\";\r\n\r\n/**\r\n* @title Timeout\r\n* @author chixx.eth & @mouradmki\r\n* @notice ERC721A Royalties With fusion, claim for the genesis holder\r\n*/\r\ncontract Timeout is ITimeout, ERC721A, ERC721AQueryable, Ownable, ERC2981, ReentrancyGuard {\r\n  using Strings for uint256;\r\n  uint256 public gameFunds;\r\n  uint256 public claimFunds;\r\n\r\n  uint16 public constant maxSupplyToMint = 8192;\r\n  uint16 public constant supplyPremint = 2505;\r\n\r\n  uint8 private constant maxMintPerWallet_phase03 = 2;\r\n  uint8 private constant maxMintPerWallet_phase04 = 5;\r\n\r\n  uint16 public indexMint = 2505;\r\n\r\n  uint16 private indexEvolution1Blue;\r\n  uint16 private indexEvolution1Pink;\r\n  uint16 private indexEvolution2Blue;\r\n  uint16 private indexEvolution2Pink;\r\n  uint16 private indexEvolution3Blue;\r\n  uint16 private indexEvolution3Pink;\r\n  uint16 private indexEvolution4Blue;\r\n  uint16 private indexEvolution4Pink;\r\n  uint16 private indexEvolution5Blue;\r\n  uint16 private indexEvolution5Pink;\r\n  uint16 private indexEvolution6Blue;\r\n  uint16 private indexEvolution6Pink;\r\n\r\n  uint16 private constant maxSupplyEvolution1PinkAndBlue = 2048;\r\n  uint16 private constant maxSupplyEvolution2PinkAndBlue = 1024;\r\n  uint16 private constant maxSupplyEvolution3PinkAndBlue = 512;\r\n  uint16 private constant maxSupplyEvolution4PinkAndBlue = 256;\r\n  uint16 private constant maxSupplyEvolution5PinkAndBlue = 128;\r\n  uint16 private constant maxSupplyEvolution6PinkAndBlue = 64;\r\n\r\n  uint16 private constant portionForClaim = 1294;\r\n\r\n  uint16 private index = 2506;\r\n  uint16 private maxSupplyPrivateSale = 1901;\r\n  uint16 private constant maxSupplyPremint = 2505;\r\n\r\n  uint16 public phaseForClaim;\r\n\r\n  address private WhiteListSigner = 0x99A7130dc775dB71E5252dE59F0f156DF1B96d89;\r\n\r\n  string public baseURI = \"ipfs://QmaCF1nHa7imHxox33rhXw6mMDu69PUWncpCVK7H1Kmc6B/\";\r\n\r\n  bool private isPremint;\r\n\r\n  DataLibrarry.SalePhase public phase = DataLibrarry.SalePhase.Phase01;\r\n\r\n  mapping(uint256 => DataLibrarry.Metadata) private metadatas;\r\n  /**\r\n  * @notice mapping for know for each phase if the tokenId have claim\r\n  * @dev\r\n  * {\r\n  *   uint256 => phase\r\n  *   addres => user address\r\n  *   bool => isClaimed\r\n  * }\r\n  */\r\n  mapping(uint256 => mapping(address => bool)) public isClaimed;\r\n  mapping(address =>  bool) public isFreeMinted;\r\n  mapping(address => uint16) private mintCountPhase03;\r\n  mapping(address => uint16) private mintCountPhase04;\r\n\r\n  event NewURI(string newURI, address updatedBy);\r\n  event updatePhase(DataLibrarry.SalePhase phase);\r\n  event updatePhaseForClaim(uint16 phase);\r\n  event Receive(address sender, uint256 amount);\r\n  event ClaimGame(uint256 tokenIdEvo7, address user, uint256 amountClaim);\r\n  event Claim(address user, uint256 amount, uint16 phase);\r\n  event Withdraw(uint256 amount);\r\n  event WithdrawGameFunds(uint256 amount);\r\n  event WithdrawClaimFunds(uint256 amount);\r\n\r\n  constructor() ERC721A(\"TimeoutOrigin\", \"TOO\") {\r\n    _setDefaultRoyalty(address(this), 1500);\r\n  }\r\n\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC2981, IERC721A, ERC721A) returns (bool) {\r\n    return interfaceId == type(IERC2981).interfaceId // interface ID for royalties\r\n      || interfaceId == type(IERC165).interfaceId\r\n      || interfaceId == 0x80ac58cd // interface ID for ERC721.\r\n      || interfaceId == 0x5b5e139f // interface ID for ERC721Metadata.\r\n      || super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  modifier onlyPhase05() {\r\n    require(phase == DataLibrarry.SalePhase.Phase05, \"Invalid phase\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @notice receive eth for royalties.\r\n  */\r\n  receive() external payable {\r\n    uint256 value = msg.value;\r\n    if(msg.sender == owner())\r\n      gameFunds += value;\r\n    else {\r\n      gameFunds += value * 75 / 100;\r\n      claimFunds += value * 25 / 100;\r\n    }\r\n    emit Receive(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n  * @notice withdraw the funds for the game.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only owner of contract can call this function\r\n  */\r\n  function withdrawGameFunds() external onlyOwner {\r\n    (bool success, ) = payable(msg.sender).call{value: gameFunds}(\"\");\r\n    if (!success) revert FailToWithdraw();\r\n    emit WithdrawGameFunds(gameFunds);\r\n  }\r\n\r\n  /**\r\n  * @notice withdraw the funds for the claim.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only owner of contract can call this function\r\n  */\r\n  function withdrawClaimFunds() external onlyOwner {\r\n    (bool success, ) = payable(msg.sender).call{value: claimFunds}(\"\");\r\n    if (!success) revert FailToWithdraw();\r\n    emit WithdrawClaimFunds(claimFunds);\r\n  }\r\n\r\n  /**\r\n  * @notice Returns the starting token ID.\r\n  */\r\n  function _startTokenId() internal view virtual override returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n  * @notice set the phase for mint\r\n  */\r\n  function setPhase(DataLibrarry.SalePhase _phase)\r\n    external\r\n    onlyOwner\r\n  {\r\n    phase = _phase;\r\n    emit updatePhase(_phase);\r\n  }\r\n\r\n  /**\r\n  * @notice set the phase for claim\r\n  */\r\n  function setPhaseForClaim(uint8 newPhase)\r\n    external\r\n    onlyOwner\r\n  {\r\n    phaseForClaim = newPhase;\r\n    emit updatePhaseForClaim(newPhase);\r\n  }\r\n\r\n  /**\r\n  * @notice get if msg.sender has claim in the current phase\r\n  */\r\n  function hasClaimed() external view returns (bool) {\r\n    return isClaimed[phaseForClaim][msg.sender];\r\n  }\r\n\r\n  /**\r\n  * @notice updates the new token URI in contract.\r\n  *\r\n  * Emits a {NewURI} event.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only owner of contract can call this function\r\n  **/\r\n  function setBaseUri(string memory uri)\r\n    external\r\n    onlyOwner\r\n  {\r\n    baseURI = uri;\r\n    emit NewURI(uri, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev See {IERC721Metadata-tokenURI}.\r\n  */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    override(ERC721A,IERC721A)\r\n    returns(string memory)\r\n  {\r\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n    DataLibrarry.Metadata memory datas = getMetadatas(tokenId);\r\n\r\n    bytes memory json1 = abi.encodePacked(\r\n      '{',\r\n        '\"name\": \"TimeOutOrigin #',tokenId.toString(),'\"',',',\r\n        '\"image\": ',\r\n        '\"',\r\n        baseURI,\r\n        uint256(datas.evolution).toString(),\r\n        '-',\r\n        uint256(datas.types).toString(),\r\n        '.jpeg\",'\r\n    );\r\n    bytes memory json = abi.encodePacked(\r\n      json1,\r\n      '\"attributes\": [{\"trait_type\": \"Evolution\",\"value\": \"',\r\n      uint256(datas.evolution).toString(), '\"},',\r\n      '{\"trait_type\": \"type\",\"value\": \"',\r\n      datas.types == 0 ? \"B\" : \"A\", '\"}]',\r\n      '}'\r\n    );\r\n    return string(\r\n      abi.encodePacked(\r\n        \"data:application/json;base64,\",\r\n        Base64.encode(json)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @notice premint mint 2505 for the owner.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only owner of contract can call this function\r\n  **/\r\n  function premint() external onlyOwner {\r\n    if (isPremint) revert AlreadyUsePremint();\r\n    if (phase != DataLibrarry.SalePhase.Phase01) revert InvalidPhase();\r\n    _mint(msg.sender, supplyPremint);\r\n    isPremint = true;\r\n  }\r\n\r\n  /**\r\n  * @notice privatesalesmint mint on private sale.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only whitelisted address can mint\r\n  **/\r\n  function privatesalesmint(\r\n    DataLibrarry.Coupon memory coupon,\r\n    DataLibrarry.CouponType couponType,\r\n    DataLibrarry.CouponTypeCount memory count\r\n  )\r\n    external\r\n  {\r\n    if(phase != DataLibrarry.SalePhase.Phase02) revert InvalidPhase();\r\n    if(isFreeMinted[msg.sender] == true) revert AlreadyUsePrivateSalesMint();\r\n    FunctionLib.verifyCoupon(WhiteListSigner, coupon, couponType, count);\r\n    if (couponType == DataLibrarry.CouponType.WhiteListSales)\r\n      revert InvalidWhitelist();\r\n    uint16 quantity;\r\n    unchecked {\r\n      quantity =\r\n        (count.BasicCount * 2)\r\n        + (count.UltrarareCount * 3)\r\n        + (count.LegendaireCount * 4)\r\n        + (count.eggCount * 2);\r\n    }\r\n    if (indexMint + quantity > maxSupplyPrivateSale + maxSupplyPremint) revert MaxSupplyPrivateSaleReach();\r\n    _mint(msg.sender, quantity);\r\n    unchecked {\r\n      index += quantity;\r\n      indexMint += quantity;\r\n      isFreeMinted[msg.sender] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice whitelistsalesmint mint on whitelist sale.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - Only whitelisted address can mint\r\n  **/\r\n  function whitelistsalesmint(\r\n    uint16 quantityToMint,\r\n    DataLibrarry.Coupon memory coupon,\r\n    DataLibrarry.CouponType couponType,\r\n    DataLibrarry.CouponTypeCount memory count\r\n  )\r\n    external\r\n  {\r\n    if(phase != DataLibrarry.SalePhase.Phase03) revert InvalidPhase();\r\n    FunctionLib.verifyCoupon(WhiteListSigner, coupon, couponType, count);\r\n    if (mintCountPhase03[msg.sender] + quantityToMint > maxMintPerWallet_phase03)\r\n      revert InvalidQuantity();\r\n    if (indexMint + quantityToMint > maxSupplyToMint) revert MaxSupplyReach();\r\n    _mint(msg.sender, quantityToMint);\r\n    unchecked {\r\n      mintCountPhase03[msg.sender] += quantityToMint;\r\n      index += quantityToMint;\r\n      indexMint += quantityToMint;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice mint on public sale.\r\n  **/\r\n  function mint(\r\n    uint8 quantityToMint\r\n  )\r\n    external\r\n  {\r\n    if(phase !=  DataLibrarry.SalePhase.Phase04) revert InvalidPhase();\r\n    if (mintCountPhase04[msg.sender] + quantityToMint > maxMintPerWallet_phase04\r\n    ) revert InvalidQuantity();\r\n    if (indexMint + quantityToMint > maxSupplyToMint) revert MaxSupplyReach();\r\n    _mint(msg.sender, quantityToMint);\r\n    unchecked { \r\n      mintCountPhase04[msg.sender] += quantityToMint;\r\n      index += quantityToMint;\r\n      indexMint += quantityToMint;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice get the metadata from a tokenId\r\n  * @return data struct contain the metadata\r\n  */\r\n  function getMetadatas(uint256 tokenId) public view returns(DataLibrarry.Metadata memory data) {\r\n    if (!_exists(tokenId)) revert QueryForNonExistantTokenId();\r\n    if (metadatas[tokenId].evolution == 0) {\r\n      if (tokenId % 2 == 0) {\r\n        data.types = 0;\r\n      } else {\r\n        data.types = 1;\r\n      }\r\n      return data;\r\n    }\r\n    return metadatas[tokenId];\r\n  }\r\n\r\n  /**\r\n  * @notice clacule a pseudo random number\r\n  * @return uint8 0 or 1\r\n  */\r\n  function random() public view returns(uint8) {\r\n    return\r\n      uint8(uint256(keccak256(abi.encodePacked(\r\n        block.difficulty, block.timestamp\r\n      ))) % 2);\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo0 for evo1.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo0 blue and evo0 pink\r\n  **/\r\n  function fusionEvo0(uint256 tokenId0, uint256 tokenId1) external onlyPhase05 {\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if (metadatas[tokenId0].evolution != 0 || metadatas[tokenId1].evolution != 0)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      uint8 metadata0 = uint8(tokenId0 % 2);\r\n      uint8 metadata1 = uint8(tokenId1 % 2);\r\n      if ((metadata0 == metadata1))\r\n        revert InvalidTokenIdsForFusion();\r\n      _random = FunctionLib.logicRandomEvo(\r\n        _random, indexEvolution1Blue,\r\n        indexEvolution1Pink,\r\n        maxSupplyEvolution1PinkAndBlue\r\n      );\r\n      if (_random == 0) {\r\n        metadata.types = 0;\r\n        unchecked { ++indexEvolution1Blue; }\r\n      }\r\n      else {\r\n        metadata.types = 1;\r\n        unchecked { ++indexEvolution1Pink; }\r\n      }\r\n      metadata.evolution = 1;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo1 for evo2.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo1 blue and evo1 pink\r\n  **/\r\n  function fusionEvo1(uint256 tokenId0, uint256 tokenId1) external onlyPhase05 {\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 1 || metadatas[tokenId1].evolution != 1)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      _random = FunctionLib.logicRandomEvo(\r\n        _random, indexEvolution2Blue,\r\n        indexEvolution2Pink,\r\n        maxSupplyEvolution2PinkAndBlue\r\n      );\r\n      if (_random == 0) {\r\n        metadata.types = 0;\r\n        unchecked { ++indexEvolution2Blue; }\r\n      }\r\n      else {\r\n        metadata.types = 1;\r\n        unchecked { ++indexEvolution2Pink; }\r\n      }\r\n      metadata.evolution = 2;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo2 for evo3.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo2 blue and evo1 pink\r\n  **/\r\n  function fusionEvo2(uint256 tokenId0, uint256 tokenId1) external onlyPhase05 {\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 2 || metadatas[tokenId1].evolution != 2)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      _random = FunctionLib.logicRandomEvo(\r\n          _random,\r\n          indexEvolution3Blue,\r\n          indexEvolution3Pink,\r\n          maxSupplyEvolution3PinkAndBlue\r\n        );\r\n        if (_random == 0) {\r\n          metadata.types = 0;\r\n          unchecked { ++indexEvolution3Blue; }\r\n        }\r\n        else {\r\n          metadata.types = 1;\r\n          unchecked { ++indexEvolution3Pink; }\r\n        }\r\n        metadata.evolution = 3;\r\n        metadatas[index] = metadata;\r\n        _burn(tokenId0);\r\n        _burn(tokenId1);\r\n        _mint(msg.sender, 1);\r\n        unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo3 for evo4.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo3 blue and evo3 pink\r\n  **/\r\n  function fusionEvo3(uint256 tokenId0, uint256 tokenId1) external onlyPhase05{\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 3 || metadatas[tokenId1].evolution != 3)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      _random = FunctionLib.logicRandomEvo(\r\n        _random,\r\n        indexEvolution4Blue,\r\n        indexEvolution4Pink,\r\n        maxSupplyEvolution4PinkAndBlue\r\n      );\r\n      if (_random == 0) {\r\n        metadata.types = 0;\r\n        unchecked { ++indexEvolution4Blue; }\r\n      }\r\n      else {\r\n        metadata.types = 1;\r\n        unchecked { ++indexEvolution4Pink; }\r\n      }\r\n      metadata.evolution = 4;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo4 for evo5.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo4 blue and evo4 pink\r\n  **/\r\n  function fusionEvo4(uint256 tokenId0, uint256 tokenId1) external onlyPhase05{\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 4 || metadatas[tokenId1].evolution != 4)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      _random = FunctionLib.logicRandomEvo(\r\n        _random,\r\n        indexEvolution5Blue,\r\n        indexEvolution5Pink,\r\n        maxSupplyEvolution5PinkAndBlue\r\n      );\r\n      if (_random == 0) {\r\n        metadata.types = 0;\r\n        unchecked { ++indexEvolution5Blue; }\r\n      }\r\n      else {\r\n        metadata.types = 1;\r\n        unchecked { ++indexEvolution5Pink; }\r\n      }\r\n      metadata.evolution = 5;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo5 for evo6.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo5 blue and evo5 pink\r\n  **/\r\n  function fusionEvo5(uint256 tokenId0, uint256 tokenId1) external onlyPhase05{\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    uint8 _random = random();\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 5 || metadatas[tokenId1].evolution != 5)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      _random = FunctionLib.logicRandomEvo(\r\n        _random,\r\n        indexEvolution6Blue,\r\n        indexEvolution6Pink,\r\n        maxSupplyEvolution6PinkAndBlue\r\n      );\r\n      if (_random == 0) {\r\n        metadata.types = 0;\r\n        unchecked { ++indexEvolution6Blue; }\r\n      }\r\n      else {\r\n        metadata.types = 1;\r\n        unchecked { ++indexEvolution6Pink; }\r\n      }\r\n      metadata.evolution = 6;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice fusion 2 evo6 for evo7.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo6 blue and evo6 pink\r\n  **/\r\n  function fusionEvo6(uint256 tokenId0, uint256 tokenId1) external onlyPhase05 {\r\n    if (!_exists(tokenId0) || !_exists(tokenId1)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenId0) != msg.sender || ownerOf(tokenId1) != msg.sender)\r\n      revert CallerNotOwnerOfTokenId();\r\n    DataLibrarry.Metadata memory metadata;\r\n    if ((metadatas[tokenId0].types == 0 && metadatas[tokenId1].types == 0)\r\n      || (metadatas[tokenId0].types == 1 && metadatas[tokenId1].types == 1))\r\n      revert InvalidTokenIdsForFusion();\r\n    if (metadatas[tokenId0].evolution != 6 || metadatas[tokenId1].evolution != 6)\r\n      revert InvalidTokenIdsForFusion();\r\n    else {\r\n      metadata.evolution = 7;\r\n      metadata.types = 3;\r\n      metadatas[index] = metadata;\r\n      _burn(tokenId0);\r\n      _burn(tokenId1);\r\n      _mint(msg.sender, 1);\r\n      unchecked { ++index; }\r\n    }\r\n   }\r\n\r\n  /**\r\n  * @notice claim 50% of the game funds.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need evo7\r\n  **/\r\n  function claimGame(uint256 tokenIdEvo7) external nonReentrant() {\r\n    if (Address.isContract(msg.sender)) revert SenderIsContract();\r\n    if (!_exists(tokenIdEvo7)) revert QueryForNonExistantTokenId();\r\n    if (ownerOf(tokenIdEvo7) != msg.sender) revert CallerNotOwnerOfTokenId();\r\n    if (metadatas[tokenIdEvo7].evolution != 7) revert InvalidEvolution();\r\n    gameFunds = gameFunds / 2;\r\n    (bool success, ) = payable(address(msg.sender)).call{value: gameFunds}(\"\");\r\n    if (!success) revert FailToTransferGameFunds();\r\n    _burn(tokenIdEvo7);\r\n    emit ClaimGame(tokenIdEvo7, msg.sender, gameFunds);\r\n  }\r\n\r\n  /**\r\n  * @notice claim for genesis holder.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - need to be whitelisted, snapchot\r\n  **/\r\n  function claim(\r\n    DataLibrarry.Coupon memory coupon,\r\n    DataLibrarry.CouponClaim memory couponClaim\r\n  )\r\n    external\r\n    nonReentrant()\r\n  {\r\n    if (Address.isContract(msg.sender)) revert SenderIsContract();\r\n    if (msg.sender != couponClaim.user) revert InvalidUser();\r\n    if (isClaimed[phaseForClaim][msg.sender]) revert UserAlreadyClaimForThisPhase();\r\n    if (couponClaim.phase != phaseForClaim) revert InvalidPhase();\r\n    FunctionLib.verifyCouponForClaim(WhiteListSigner, coupon, couponClaim);\r\n    uint256 portion = (couponClaim.legCount * 10)\r\n      + (couponClaim.urEggCount * 6)\r\n      + (couponClaim.urCount * 5)\r\n      + (couponClaim.basicEggCount * 2)\r\n      + (couponClaim.basicCount * 1);\r\n    uint256 totalClaim = claimFunds / portionForClaim * portion;\r\n    (bool success, ) = payable(address(msg.sender)).call{value: totalClaim}(\"\");\r\n    if (!success) revert FailToTransferClaimFunds();\r\n    isClaimed[phaseForClaim][msg.sender] = true;\r\n    emit Claim(msg.sender, totalClaim, phaseForClaim);\r\n  }\r\n}"
6     },
7     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
9     },
10     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"
12     },
13     "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../interfaces/IERC2981.sol\";\r\nimport \"../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\r\n *\r\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\r\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\r\n *\r\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\r\n * fee is specified in basis points by default.\r\n *\r\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\r\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\r\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\r\n *\r\n * _Available since v4.5._\r\n */\r\nabstract contract ERC2981 is IERC2981, ERC165 {\r\n    struct RoyaltyInfo {\r\n        address receiver;\r\n        uint96 royaltyFraction;\r\n    }\r\n\r\n    RoyaltyInfo private _defaultRoyaltyInfo;\r\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC2981\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\r\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n        if (royalty.receiver == address(0)) {\r\n            royalty = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\r\n\r\n        return (royalty.receiver, royaltyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\r\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\r\n     * override.\r\n     */\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information that all ids in this contract will default to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes default royalty information.\r\n     */\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        delete _defaultRoyaltyInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setTokenRoyalty(\r\n        uint256 tokenId,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\r\n\r\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Resets royalty information for the token id back to the global default.\r\n     */\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        delete _tokenRoyaltyInfo[tokenId];\r\n    }\r\n}\r\n"
15     },
16     "lib/ERC721A/contracts/ERC721A.sol": {
17       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport './IERC721A.sol';\r\n\r\n/**\r\n * @dev ERC721 token receiver interface.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\r\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at `_startTokenId()`\r\n * (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See `_packedOwnershipOf` implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see `_totalMinted`.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to `_startTokenId()`\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\r\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\r\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an ownership that has an address and is not burned\r\n                        // before an ownership that does not have an address and is not burned.\r\n                        // Hence, curr will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed is zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        assembly {\r\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return\r\n            _startTokenId() <= tokenId &&\r\n            tokenId < _currentIndex && // If within bounds,\r\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            uint256 tokenId = startTokenId;\r\n            uint256 end = startTokenId + quantity;\r\n            do {\r\n                emit Transfer(address(0), to, tokenId++);\r\n            } while (tokenId < end);\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\r\n        assembly {\r\n            // Compute the slot.\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, tokenApprovalsPtr.slot)\r\n            approvedAddressSlot := keccak256(0x00, 0x40)\r\n            // Load the slot's value from storage.\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\r\n     */\r\n    function _isOwnerOrApproved(\r\n        address approvedAddress,\r\n        address from,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        assembly {\r\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            from := and(from, BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, BITMASK_ADDRESS)\r\n            // `msgSender == from || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\r\n     * This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\r\n     * This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\r\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\r\n            // We will need 1 32-byte word to store the length,\r\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\r\n            ptr := add(mload(0x40), 128)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, ptr)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := ptr\r\n\r\n            // We write the string from the rightmost digit to the leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // Costs a bit more than early returning for the zero case,\r\n            // but cheaper in terms of deployment and overall runtime costs.\r\n            for {\r\n                // Initialize and perform the first pass without check.\r\n                let temp := value\r\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\r\n                ptr := sub(ptr, 1)\r\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n            } temp {\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n            } {\r\n                // Body of the for loop.\r\n                ptr := sub(ptr, 1)\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n            }\r\n\r\n            let length := sub(end, ptr)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            ptr := sub(ptr, 32)\r\n            // Store the length.\r\n            mstore(ptr, length)\r\n        }\r\n    }\r\n}\r\n"
18     },
19     "lib/ERC721A/contracts/extensions/ERC721AQueryable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport './IERC721AQueryable.sol';\r\nimport '../ERC721A.sol';\r\n\r\n/**\r\n * @title ERC721A Queryable\r\n * @dev ERC721A subclass with convenience query functions.\r\n */\r\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\r\n    /**\r\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\r\n     *\r\n     * If the `tokenId` is out of bounds:\r\n     *   - `addr` = `address(0)`\r\n     *   - `startTimestamp` = `0`\r\n     *   - `burned` = `false`\r\n     *   - `extraData` = `0`\r\n     *\r\n     * If the `tokenId` is burned:\r\n     *   - `addr` = `<Address of owner before token was burned>`\r\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\r\n     *   - `burned = `true`\r\n     *   - `extraData` = `<Extra data when token was burned>`\r\n     *\r\n     * Otherwise:\r\n     *   - `addr` = `<Address of owner>`\r\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\r\n     *   - `burned = `false`\r\n     *   - `extraData` = `<Extra data at start of ownership>`\r\n     */\r\n    function explicitOwnershipOf(uint256 tokenId) public view override returns (TokenOwnership memory) {\r\n        TokenOwnership memory ownership;\r\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\r\n            return ownership;\r\n        }\r\n        ownership = _ownershipAt(tokenId);\r\n        if (ownership.burned) {\r\n            return ownership;\r\n        }\r\n        return _ownershipOf(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\r\n     * See {ERC721AQueryable-explicitOwnershipOf}\r\n     */\r\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view override returns (TokenOwnership[] memory) {\r\n        unchecked {\r\n            uint256 tokenIdsLength = tokenIds.length;\r\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\r\n            for (uint256 i; i != tokenIdsLength; ++i) {\r\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\r\n            }\r\n            return ownerships;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`,\r\n     * in the range [`start`, `stop`)\r\n     * (i.e. `start <= tokenId < stop`).\r\n     *\r\n     * This function allows for tokens to be queried if the collection\r\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `start` < `stop`\r\n     */\r\n    function tokensOfOwnerIn(\r\n        address owner,\r\n        uint256 start,\r\n        uint256 stop\r\n    ) external view override returns (uint256[] memory) {\r\n        unchecked {\r\n            if (start >= stop) revert InvalidQueryRange();\r\n            uint256 tokenIdsIdx;\r\n            uint256 stopLimit = _nextTokenId();\r\n            // Set `start = max(start, _startTokenId())`.\r\n            if (start < _startTokenId()) {\r\n                start = _startTokenId();\r\n            }\r\n            // Set `stop = min(stop, stopLimit)`.\r\n            if (stop > stopLimit) {\r\n                stop = stopLimit;\r\n            }\r\n            uint256 tokenIdsMaxLength = balanceOf(owner);\r\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\r\n            // to cater for cases where `balanceOf(owner)` is too big.\r\n            if (start < stop) {\r\n                uint256 rangeLength = stop - start;\r\n                if (rangeLength < tokenIdsMaxLength) {\r\n                    tokenIdsMaxLength = rangeLength;\r\n                }\r\n            } else {\r\n                tokenIdsMaxLength = 0;\r\n            }\r\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\r\n            if (tokenIdsMaxLength == 0) {\r\n                return tokenIds;\r\n            }\r\n            // We need to call `explicitOwnershipOf(start)`,\r\n            // because the slot at `start` may not be initialized.\r\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\r\n            address currOwnershipAddr;\r\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\r\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\r\n            if (!ownership.burned) {\r\n                currOwnershipAddr = ownership.addr;\r\n            }\r\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\r\n                ownership = _ownershipAt(i);\r\n                if (ownership.burned) {\r\n                    continue;\r\n                }\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    tokenIds[tokenIdsIdx++] = i;\r\n                }\r\n            }\r\n            // Downsize the array to fit.\r\n            assembly {\r\n                mstore(tokenIds, tokenIdsIdx)\r\n            }\r\n            return tokenIds;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`.\r\n     *\r\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\r\n     * It is meant to be called off-chain.\r\n     *\r\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\r\n     * multiple smaller scans if the collection is large enough to cause\r\n     * an out-of-gas error (10K pfp collections should be fine).\r\n     */\r\n    function tokensOfOwner(address owner) external view override returns (uint256[] memory) {\r\n        unchecked {\r\n            uint256 tokenIdsIdx;\r\n            address currOwnershipAddr;\r\n            uint256 tokenIdsLength = balanceOf(owner);\r\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\r\n            TokenOwnership memory ownership;\r\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\r\n                ownership = _ownershipAt(i);\r\n                if (ownership.burned) {\r\n                    continue;\r\n                }\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    tokenIds[tokenIdsIdx++] = i;\r\n                }\r\n            }\r\n            return tokenIds;\r\n        }\r\n    }\r\n}\r\n"
21     },
22     "contracts/lib/DataLibrarry.sol": {
23       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nlibrary DataLibrarry {\r\n  struct Coupon {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n  }\r\n\r\n  struct Metadata {\r\n    uint8 evolution;\r\n    uint8 types;\r\n  }\r\n\r\n  enum MetadataType {\r\n    blue,\r\n    pink\r\n  }\r\n\r\n  enum SalePhase {\r\n    Phase01,\r\n    Phase02,\r\n    Phase03,\r\n    Phase04,\r\n    Phase05\r\n  }\r\n\r\n  enum CouponType {\r\n    PrivateSales,\r\n    WhiteListSales\r\n  }\r\n\r\n  struct CouponTypeCount {\r\n    uint16 BasicCount;\r\n    uint16 UltrarareCount;\r\n    uint16 LegendaireCount;\r\n    uint16 eggCount;\r\n  }\r\n\r\n  struct CouponClaim {\r\n    address user;\r\n    uint256 legCount;\r\n    uint256 urEggCount;\r\n    uint256 urCount;\r\n    uint256 basicEggCount;\r\n    uint256 basicCount;\r\n    uint256 phase;\r\n  }\r\n}"
24     },
25     "contracts/lib/FunctionLib.sol": {
26       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport { DataLibrarry } from \"./DataLibrarry.sol\";\r\nimport { ITimeout } from \"../ITimeout.sol\";\r\n\r\nlibrary FunctionLib {\r\n  /**\r\n  * @notice verifyCoupon verify the coupon\r\n  * @dev hash the info and check if valid signature\r\n  */\r\n  function verifyCoupon(\r\n    address signer,\r\n    DataLibrarry.Coupon memory coupon,\r\n    DataLibrarry.CouponType couponType,\r\n    DataLibrarry.CouponTypeCount memory couponTypeCount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    bytes32 digest = getMessageHash(\r\n      couponType,\r\n      couponTypeCount\r\n    );\r\n    if (_isVerifiedCoupon(digest, coupon) != signer)\r\n      revert ITimeout.InvalidCoupon();\r\n  }\r\n\r\n  function getMessageHash(\r\n    DataLibrarry.CouponType couponType,\r\n    DataLibrarry.CouponTypeCount memory couponTypeCount\r\n  )\r\n    internal\r\n    view\r\n    returns(bytes32)\r\n  {\r\n    return keccak256(\r\n      abi.encode(\r\n        couponType,\r\n        couponTypeCount.BasicCount,\r\n        couponTypeCount.UltrarareCount,\r\n        couponTypeCount.LegendaireCount,\r\n        couponTypeCount.eggCount,\r\n        msg.sender\r\n      )\r\n    );\r\n  }\r\n\r\n  function getMessageHashForAddress(\r\n    DataLibrarry.CouponType couponType,\r\n    DataLibrarry.CouponTypeCount memory couponTypeCount,\r\n    address addressToEncode\r\n  )\r\n    internal\r\n    pure\r\n    returns(bytes32)\r\n  {\r\n    return keccak256(\r\n      abi.encode(\r\n        couponType,\r\n        couponTypeCount.BasicCount,\r\n        couponTypeCount.UltrarareCount,\r\n        couponTypeCount.LegendaireCount,\r\n        couponTypeCount.eggCount,\r\n        addressToEncode\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @notice verifyCouponForClaim verify the coupon for claim\r\n  * @dev hash the info and check if valid signature\r\n  */\r\n  function verifyCouponForClaim(\r\n    address signer,\r\n    DataLibrarry.Coupon memory coupon,\r\n    DataLibrarry.CouponClaim memory couponClaim\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    bytes32 digest = getMessageHashForClaim(couponClaim);\r\n    if (_isVerifiedCoupon(digest, coupon) != signer)\r\n      revert ITimeout.InvalidCoupon();\r\n  }\r\n\r\n  function getMessageHashForClaim(DataLibrarry.CouponClaim memory couponClaim)\r\n    internal\r\n    pure\r\n    returns(bytes32)\r\n  {\r\n    return keccak256(\r\n      abi.encode(\r\n        couponClaim.user,\r\n        couponClaim.legCount,\r\n        couponClaim.urEggCount,\r\n        couponClaim.urCount,\r\n        couponClaim.basicEggCount,\r\n        couponClaim.basicCount,\r\n        couponClaim.phase\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @notice _isVerifiedCoupon verify the coupon\r\n  * @return bool true or false if signature valid\r\n  */\r\n  function _isVerifiedCoupon(bytes32 digest, DataLibrarry.Coupon memory coupon)\r\n    internal\r\n    pure\r\n    returns(address)\r\n  {\r\n    address signer = ecrecover(digest, coupon.v, coupon.r, coupon.s);\r\n    return signer;\r\n  }\r\n\r\n  function logicRandomEvo(\r\n    uint8 random,\r\n    uint32 indexEvolutionBlue,\r\n    uint32 indexEvolutionPink,\r\n    uint32 maxSupplyEvo\r\n  )\r\n    internal\r\n    pure\r\n    returns(uint8)\r\n  {\r\n    if (random == 0) {\r\n      if (indexEvolutionBlue > indexEvolutionPink) {\r\n        uint32 plage = indexEvolutionBlue - indexEvolutionPink;\r\n        if (plage > 4) {\r\n          random = 1;\r\n        }\r\n      }\r\n    } else {\r\n      if (indexEvolutionBlue < indexEvolutionPink) {\r\n        uint32 plage = indexEvolutionPink - indexEvolutionBlue;\r\n        if (plage > 4) {\r\n          random = 0;\r\n        }\r\n      }\r\n    }\r\n    if (indexEvolutionBlue >= maxSupplyEvo - 5 && indexEvolutionPink >= maxSupplyEvo - 5) {\r\n      if (indexEvolutionBlue > indexEvolutionPink) {\r\n        uint32 plage = indexEvolutionBlue - indexEvolutionPink;\r\n        if (plage >= 1) {\r\n          random = 1;\r\n        }\r\n      }\r\n      if (indexEvolutionBlue < indexEvolutionPink) {\r\n        uint32 plage = indexEvolutionPink - indexEvolutionBlue;\r\n        if (plage >= 1) {\r\n          random = 0;\r\n        }\r\n      }\r\n    }\r\n    return random;\r\n  }\r\n}"
27     },
28     "contracts/ITimeout.sol": {
29       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ninterface ITimeout {\r\n  // mint error\r\n\r\n  error InvalidCoupon();\r\n\r\n  error InvalidWhitelist();\r\n\r\n  error InvalidQuantity();\r\n\r\n  error QueryForNonExistantTokenId();\r\n\r\n  error AlreadyUsePremint();\r\n\r\n  error AlreadyUsePrivateSalesMint();\r\n\r\n  error MaxSupplyPrivateSaleReach();\r\n\r\n  error MaxSupplyReach();\r\n\r\n  error InvalidPhase();\r\n\r\n\r\n  // fusion error\r\n\r\n  error CallerNotOwnerOfTokenId();\r\n\r\n  error InvalidTokenIdsForFusion();\r\n\r\n  // claim error\r\n\r\n  error SenderIsContract();\r\n\r\n  error InvalidEvolution();\r\n\r\n  error ThisTokenIdAlreadyClaim();\r\n\r\n  error FailToTransferGameFunds();\r\n\r\n  error InvalidUser();\r\n\r\n  error FailToTransferClaimFunds();\r\n\r\n  error UserAlreadyClaimForThisPhase();\r\n\r\n  // withdraw error\r\n\r\n  error FailToWithdraw();\r\n}"
30     },
31     "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
33     },
34     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
35       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"
36     },
37     "lib/openzeppelin-contracts/contracts/utils/Base64.sol": {
38       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides a set of functions to operate with Base64 strings.\r\n *\r\n * _Available since v4.5._\r\n */\r\nlibrary Base64 {\r\n    /**\r\n     * @dev Base64 Encoding/Decoding Table\r\n     */\r\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /**\r\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\r\n     */\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        /**\r\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\r\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\r\n         */\r\n        if (data.length == 0) return \"\";\r\n\r\n        // Loads the table into memory\r\n        string memory table = _TABLE;\r\n\r\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\r\n        // and split into 4 numbers of 6 bits.\r\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\r\n        // - `data.length + 2`  -> Round up\r\n        // - `/ 3`              -> Number of 3-bytes chunks\r\n        // - `4 *`              -> 4 characters for each chunk\r\n        string memory result = new string(4 * ((data.length + 2) / 3));\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Prepare the lookup table (skip the first \"length\" byte)\r\n            let tablePtr := add(table, 1)\r\n\r\n            // Prepare result pointer, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // Run over the input, 3 bytes at a time\r\n            for {\r\n                let dataPtr := data\r\n                let endPtr := add(data, mload(data))\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                // Advance 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // To write each character, shift the 3 bytes (18 bits) chunk\r\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\r\n                // and apply logical AND with 0x3F which is the number of\r\n                // the previous character in the ASCII table prior to the Base64 Table\r\n                // The result is then added to the table to get the character to write,\r\n                // and finally write it in the result pointer but with a left shift\r\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n            }\r\n\r\n            // When data `bytes` is not exactly 3 bytes long\r\n            // it is padded with `=` characters at the end\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore8(sub(resultPtr, 1), 0x3d)\r\n                mstore8(sub(resultPtr, 2), 0x3d)\r\n            }\r\n            case 2 {\r\n                mstore8(sub(resultPtr, 1), 0x3d)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
39     },
40     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
41       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
42     },
43     "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
44       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n"
45     },
46     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
47       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
48     },
49     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
51     },
52     "lib/ERC721A/contracts/IERC721A.sol": {
53       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\r\n        uint24 extraData;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     *\r\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // ==============================\r\n    //            IERC165\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // ==============================\r\n    //            IERC721\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // ==============================\r\n    //        IERC721Metadata\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // ==============================\r\n    //            IERC2309\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\r\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n"
54     },
55     "lib/ERC721A/contracts/extensions/IERC721AQueryable.sol": {
56       "content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '../IERC721A.sol';\r\n\r\n/**\r\n * @dev Interface of an ERC721AQueryable compliant contract.\r\n */\r\ninterface IERC721AQueryable is IERC721A {\r\n    /**\r\n     * Invalid query range (`start` >= `stop`).\r\n     */\r\n    error InvalidQueryRange();\r\n\r\n    /**\r\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\r\n     *\r\n     * If the `tokenId` is out of bounds:\r\n     *   - `addr` = `address(0)`\r\n     *   - `startTimestamp` = `0`\r\n     *   - `burned` = `false`\r\n     *\r\n     * If the `tokenId` is burned:\r\n     *   - `addr` = `<Address of owner before token was burned>`\r\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\r\n     *   - `burned = `true`\r\n     *\r\n     * Otherwise:\r\n     *   - `addr` = `<Address of owner>`\r\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\r\n     *   - `burned = `false`\r\n     */\r\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\r\n\r\n    /**\r\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\r\n     * See {ERC721AQueryable-explicitOwnershipOf}\r\n     */\r\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`,\r\n     * in the range [`start`, `stop`)\r\n     * (i.e. `start <= tokenId < stop`).\r\n     *\r\n     * This function allows for tokens to be queried if the collection\r\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `start` < `stop`\r\n     */\r\n    function tokensOfOwnerIn(\r\n        address owner,\r\n        uint256 start,\r\n        uint256 stop\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`.\r\n     *\r\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\r\n     * It is meant to be called off-chain.\r\n     *\r\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\r\n     * multiple smaller scans if the collection is large enough to cause\r\n     * an out-of-gas error (10K pfp collections should be fine).\r\n     */\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n}\r\n"
57     }
58   },
59   "settings": {
60     "optimizer": {
61       "enabled": true,
62       "runs": 200
63     },
64     "outputSelection": {
65       "*": {
66         "*": [
67           "evm.bytecode",
68           "evm.deployedBytecode",
69           "devdoc",
70           "userdoc",
71           "metadata",
72           "abi"
73         ]
74       }
75     },
76     "libraries": {}
77   }
78 }}