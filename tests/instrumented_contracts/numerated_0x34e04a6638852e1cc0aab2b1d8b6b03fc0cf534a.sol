1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/KillaChroniclesMerger.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nstruct Recipe {\n    uint256 result;\n    uint256[] ingredients;\n    uint256[] quantities;\n}\n\ninterface IKillaChronicles {\n    function mint(\n        uint256 tokenId,\n        address recipient,\n        uint256 qty\n    ) external;\n\n    function burn(\n        uint256 tokenId,\n        address owner,\n        uint256 qty\n    ) external;\n}\n\ninterface IKillaChroniclesSBT {\n    function increaseBalance(\n        address recipient,\n        uint256 volumeId,\n        uint256 qty\n    ) external;\n}\n\n/* ----------\n    Contract\n   ---------- */\n\ncontract KillaChroniclesMerger is Ownable {\n    IKillaChronicles immutable chroniclesContract;\n    IKillaChroniclesSBT sbtContract;\n\n    uint256 recipeCount;\n    mapping(uint256 => Recipe) recipes;\n\n    constructor(address chronicles, address sbt) {\n        chroniclesContract = IKillaChronicles(chronicles);\n        sbtContract = IKillaChroniclesSBT(sbt);\n    }\n\n    error NonExistentMergeRecipe();\n\n    /* ---------\n        Merging\n       --------- */\n\n    /// @notice Merge chronicles\n    function merge(uint256 id, uint256 qty) external {\n        Recipe storage recipe = recipes[id];\n        if (recipe.result == 0) revert NonExistentMergeRecipe();\n        for (uint256 i = 0; i < recipe.ingredients.length; i++) {\n            chroniclesContract.burn(\n                recipe.ingredients[i],\n                msg.sender,\n                qty * recipe.quantities[i]\n            );\n            sbtContract.increaseBalance(\n                msg.sender,\n                recipe.ingredients[i],\n                qty * recipe.quantities[i]\n            );\n        }\n        chroniclesContract.mint(recipe.result, msg.sender, qty);\n    }\n\n    /* -------\n        Admin\n       ------- */\n\n    /// @notice Configure a merge recipe\n    function configureRecipe(uint256 id, Recipe calldata recipe)\n        external\n        onlyOwner\n    {\n        recipes[id] = recipe;\n    }\n\n    /// @notice Remove a merge recipe\n    function removeRecipe(uint256 id) external onlyOwner {\n        delete recipes[id];\n    }\n\n    /// @notice Changes the address of the SBT contract\n    function setSBTContract(address sbt) external onlyOwner {\n        sbtContract = IKillaChroniclesSBT(sbt);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": true,
17       "runs": 200
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     },
31     "libraries": {}
32   }
33 }}