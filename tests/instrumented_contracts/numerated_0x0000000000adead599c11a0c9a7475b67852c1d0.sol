1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/RaffleV2.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {LowLevelWETH} from \"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelWETH.sol\";\nimport {LowLevelERC20Transfer} from \"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol\";\nimport {LowLevelERC721Transfer} from \"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC721Transfer.sol\";\nimport {LowLevelERC1155Transfer} from \"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC1155Transfer.sol\";\nimport {OwnableTwoSteps} from \"@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol\";\nimport {PackableReentrancyGuard} from \"@looksrare/contracts-libs/contracts/PackableReentrancyGuard.sol\";\nimport {Pausable} from \"@looksrare/contracts-libs/contracts/Pausable.sol\";\nimport {ITransferManager} from \"@looksrare/contracts-transfer-manager/contracts/interfaces/ITransferManager.sol\";\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nimport {Arrays} from \"./libraries/Arrays.sol\";\n\nimport {WinningEntrySearchLogicV2} from \"./WinningEntrySearchLogicV2.sol\";\n\nimport {IRaffleV2} from \"./interfaces/IRaffleV2.sol\";\n\n// ....................................................................................................\n// .......................................,,,,,,.......................................................\n// ....................................,;+??????*;;:..................,,,,,,,,.........................\n// ..................................,+?????????????*;,............:;*????????*;,......................\n// ................................,+??????????????*???+,.......:+*??????????????*:....................\n// ..............................:+?????????*????????*???+:,.,;*???????????????????*,..................\n// ............................,*???????????%%%%%%%%%%??*???*???????????????????????*,.................\n// ..........................,;???????????%%??????????%%%?*????????????????????????*?;.................\n// .........................:???????????%%???????????????%%???????*?????????????*?**?*.................\n// ........................:%%%???????%%?*??????????????**?%?**???%%%%%%%%%%%%%%??????,,,,.............\n// ......................,*SSSSS?????%?*??????????*??????%??%%??????????????***???????????*;:..........\n// .....................:%S%%%%SS??????????????*??%%%%%%%?????%%%%??*????????????????????????+,........\n// ....................:SS%%%%%%#?*????????????%%%????**???????*??%%%?*??%%%%%%%?????????%%%%%:........\n// ....................+S?%%%%%%S%*?????????*?%%?**??%%%%%%%%%%%??*?%??%%??????????%%%%%?????%?+,......\n// ..................,;%%%%%%%%%%S*???????*??%?*??%%%???????????%%%??S%????%%%%%%???????%%%%????*,.....\n// .................;?S#%%%%?SS%%S*???????%%%?*?%%??*??****????????%%%?%%%?????????*++++*?%%%%%??:.....\n// ...............,*%?S%%%%%%S%%SS*????%%%????%%??*????%SSS##S***?????%???*????*;,,:::;:,,:+???%S+.....\n// ..............,*?*?S%%%%%%#SSS?????%???*?%%???????%@@@@@@##S:.,:+????????+:,..:%@@@%@#*,..:*???+....\n// ..............+????S%%%%%%S%???????????%%??*???+:+#@@@@@SS@@#:...,;????+,....;@@@@@%@@@#+...:???:...\n// .............:?????S%%%%%%S*????%%%%%%%??????+,.,#+S@@@;.+@@@%.....+%*,.....,S@@@@@?;*#@@+...,+?,...\n// .............*?????S%%%%%%S*????%**???**???+,...?@#@@@S..,#@@@;....;*.......+%?@@@%...;@@#,....;:...\n// ............;??????S%%%%%%S?????%%???????+,....,#@@@@@#:.,#@@@%....;,.......S@@@@@*....#@@+....,;...\n// ...........,???????S%%%%%%S????????%%%%:,......:@@@@@@@S*%@@@@#,..,;.......,#@@@@@?....S@@%....:;...\n// ...........;???????%S%%%%%SS*??????**???:......:@@@@@@@@@@@@@@@+..::.......,@@@@@@#;,.;@@@#,..,+,...\n// ..........,?????????S%%%%%%S?????????????*:....,#@@@@@@@@@@@@@@?.,+:.......,@@@@@@@@#S@@@@@:.;+,....\n// ..........;????????*S%%%%%%SS*?????????????*:...S@@@@@@@@@@@@@@S+?%*::,....,#@@@@@@@@@@@@@@?*%;.....\n// ..........*????????*SS%S#S?%S??????????%?**??*;,*@@@@@@@@@@@@#S%???%???**+;:S@@@@@@@@##S%?????:.....\n// .........:?????????*%#S%%S%%%S???*??????%%%??????####@@@@#S%?***?%%?????????%%%%??????*****?*:......\n// .........*?????????*%#?*%S%%%S?*?%%%%%%%%?%%%%%%%%???????****??%%%????????????????????????%;........\n// ........:?????????*%#?**S%?%%%S%%%?????%%%%%????????%%%%%%%%%%%?????????????%%%%%%%%%%%%%%+.........\n// ........*??????????#%*?*%SSSS%S#???????????%%%%%??***???????????????????????*??*??*?????*%+:........\n// .......:?????????*%#?????%%%S%%S%??????????????%%%%%???***??????????????????????????**??%%%%+.......\n// .......*??????????#%*???***S%%%%#????S#S%%?????????%%%%%%?????*?????????????????**???%%%%????.......\n// ......:?????????*SS*???????SSSS%SS??SS%S#%%%%???????????%%%%%%%%?????????????????%%%%%???????.......\n// ......+????????*?#????????????%S%SSSS%%%SS?%%%%%%?????????????%%%%%%%%%%%%%%%%%%%%?????????%+.......\n// ......*?????????#S??????????*?S%%%SS%%%%%S%????%%%%%?????????????????????????????????????%%+,.......\n// ......*???????*%#SS?????????*%%%%%%%%%%%%%#???????%%%%%%%?????????????????????????????%%?+:.........\n// ......*????????SS%SS?*?????*%%%%%%%%%%%%%%SS???????????%%%%%%%??????????????????%%%%%%%%*...........\n// .....;S%???????#%%%SS?*???*%#%%%%%%%%%%%%%%#%%?????????????%%%%%%%%%%%%%%%%%%%%%%%%??????,..........\n// ...,?SSS%*???*SS%%%%S#?*?*%#%#%%%%%%%%%%%%%S?%%%%????????????????????????????????????????,..........\n// ...?S%%%S?*???S%%%%%%S#?*?#?*%SS%%%%%%%%%%%S?*??%%%%???????????????????????????????????%?...........\n// .,?S%%%%SS%?*%S%%%%%%%SS?S%*?*?SS%%%%%%%%%%S????*??%%%%%%%????????????????????????????%%:...........\n// .*#%%%%%%%SS%S%%%%%%%%%S#S??????%S#S%%%%?%SS???????*?????%%%%%%%%%%%%%%%%%??????????%%*:............\n// ;S%%%%%%%%%S#S%%%%%%%%%S#????????*?SSSSSSS#??????????????*?????????%%%%%%%%%%%%%S%??+,..............\n// %S%%%%%%%%%SS%%%%%%%%%%S%*????????**%%%%%##????????????????????????*******??????+,..................\n// S%%%%%%%%%SS%%%%%%%%%%S#%%?????**???****?SS%*??????????????????????????????**+:,....................\n// %%%%%%%%S#S%%%%%%%%%%%S???%%%%%%?????????SSS*??????????????????***??+;;;::,.........................\n// %%%%%%%S#S%%%%%%%%%%%SS?***??????%%%%%%%%SSS?????????????????????%?:................................\n// %%%%%%SSS%%%%%%%%%%%S#SS%????*****???????%SS%%%%%%%%%%%%%%%%%??%%+,.................................\n// %%%%%%%%%%%%%%%%%%%%SS%SSSSSS%%????******%SS?************?***?%*:...................................\n// %%%%%%%%%%%%%%%%%%%%#S%%%%%%SSSSSSS%%%???%SS%???????????????%S#+....................................\n// %%%%%%%%%%%%%%%%%%%S#%%%%%%%%%%%%%SSSSSSSS#%#SSSSSSSSSSSSSSSS%S%,...................................\n// %%%%%%%%%%%%%%%%%%%#S%%%%%%%%%%%%%%%%%S####%#%%%%%%%%%%%%%%%%%%S+...................................\n// %%%%%%%%%%%%%%%%%%S#%%%%%%%%%%%%%%%%%%#S%S@%#S%%%%%%%%%%%%%%%%%S%,..................................\n// %%%%%%%%%%%%%%%%%%#S%%%%%%%%%%%%%%%%%SS%#S#%SS%%%%%%%%%%%%%%%%%%S*..................................\n// %%%%%%%%%%%%%%%%%S#S%%%%%%%%%%%%%%%%%SSSS##S%#%%%%%%%%%%%%%%%%%%%S:.................................\n// %%%%%%%%%%%%%%%%%SS%%%%%%%%%%%%%%%%%%%#####%%#%%%%%%%%%%%%%%%%%%%S*.................................\n// %%%%%%%%%%%%%%%%%#S%%%%%%%%%%%%%%%%%%%S#S%%?S#%%%%%%%%%%%%%%%%%%%SS,................................\n// %%%%%%%%%%%%%%%%S#S%%%%%%%%%%%%%%%%%%%%S#SS##S%%%%%%%%%%%%%%%%%%%%S;................................\n// %%%%%%%%%%%%%%%%SS%%%%%%%%%%%%%%%%%%%%%%SS##S%%%%%%%%%%%%%%%%%%%%%S?................................\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%SSS%%%%%%%%%%%%%%%%%%%%%S%,...............................\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#SS%%%%%%%%%%%%%%%%%%%%%%S:...............................\n// ...................... [Calling the blockchain to get provably fair results] .......................\n\n/**\n * @title RaffleV2\n * @notice This contract allows anyone to permissionlessly host raffles on LooksRare.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract RaffleV2 is\n    IRaffleV2,\n    LowLevelWETH,\n    LowLevelERC20Transfer,\n    LowLevelERC721Transfer,\n    LowLevelERC1155Transfer,\n    VRFConsumerBaseV2,\n    OwnableTwoSteps,\n    PackableReentrancyGuard,\n    Pausable,\n    WinningEntrySearchLogicV2\n{\n    using Arrays for uint256[];\n\n    address private immutable WETH;\n\n    uint256 private constant ONE_DAY = 86_400 seconds;\n    uint256 private constant ONE_WEEK = 604_800 seconds;\n\n    /**\n     * @notice 100% in basis points.\n     */\n    uint256 private constant ONE_HUNDRED_PERCENT_BP = 10_000;\n\n    /**\n     * @notice The raffles created.\n     * @dev The key is the raffle ID.\n     */\n    mapping(uint256 => Raffle) public raffles;\n\n    /**\n     * @notice The participants stats of the raffles.\n     * @dev The key is the raffle ID and the nested key is the participant address.\n     */\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\n\n    /**\n     * @notice It checks whether the currency is allowed.\n     * @dev 0 is not allowed, 1 is allowed.\n     */\n    mapping(address => uint256) public isCurrencyAllowed;\n\n    /**\n     * @notice The maximum number of prizes per raffle.\n     *         Each individual ERC-721 counts as one prize.\n     *         Each ETH/ERC-20/ERC-1155 with winnersCount > 1 counts as one prize.\n     */\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 200;\n\n    /**\n     * @notice The maximum number of winners per raffle.\n     */\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 200;\n\n    /**\n     * @notice The key hash of the Chainlink VRF.\n     */\n    bytes32 private immutable KEY_HASH;\n\n    /**\n     * @notice The subscription ID of the Chainlink VRF.\n     */\n    uint64 public immutable SUBSCRIPTION_ID;\n\n    /**\n     * @notice The Chainlink VRF coordinator.\n     */\n    VRFCoordinatorV2Interface private immutable VRF_COORDINATOR;\n\n    /**\n     * @notice The randomness requests.\n     * @dev The key is the request ID returned by Chainlink.\n     */\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\n\n    /**\n     * @notice The maximum protocol fee in basis points, which is 25%.\n     */\n    uint16 public constant MAXIMUM_PROTOCOL_FEE_BP = 2_500;\n\n    /**\n     * @notice The number of raffles created.\n     * @dev In this smart contract, raffleId is an uint256 but its\n     *      max value can only be 2^80 - 1. Realistically we will still\n     *      not reach this number.\n     */\n    uint80 public rafflesCount;\n\n    /**\n     * @notice The protocol fee recipient.\n     */\n    address public protocolFeeRecipient;\n\n    /**\n     * @notice The protocol fee in basis points.\n     */\n    uint16 public protocolFeeBp;\n\n    /**\n     * @notice The maximum number of pricing options per raffle.\n     */\n    uint256 public constant MAXIMUM_PRICING_OPTIONS_PER_RAFFLE = 5;\n\n    /**\n     * @notice Transfer manager faciliates token transfers.\n     */\n    ITransferManager private immutable transferManager;\n\n    /**\n     * @param _weth The WETH address\n     * @param _keyHash Chainlink VRF key hash\n     * @param _subscriptionId Chainlink VRF subscription ID\n     * @param _vrfCoordinator Chainlink VRF coordinator address\n     * @param _owner The owner of the contract\n     * @param _protocolFeeRecipient The recipient of the protocol fees\n     * @param _protocolFeeBp The protocol fee in basis points\n     * @param _transferManager The transfer manager address\n     */\n    constructor(\n        address _weth,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        address _vrfCoordinator,\n        address _owner,\n        address _protocolFeeRecipient,\n        uint16 _protocolFeeBp,\n        address _transferManager\n    ) VRFConsumerBaseV2(_vrfCoordinator) OwnableTwoSteps(_owner) {\n        _setProtocolFeeBp(_protocolFeeBp);\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n\n        WETH = _weth;\n        KEY_HASH = _keyHash;\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\n        SUBSCRIPTION_ID = _subscriptionId;\n        transferManager = ITransferManager(_transferManager);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function createRaffle(CreateRaffleCalldata calldata params)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        returns (uint256 raffleId)\n    {\n        uint40 cutoffTime = params.cutoffTime;\n        if (_unsafeAdd(block.timestamp, ONE_DAY) > cutoffTime || cutoffTime > _unsafeAdd(block.timestamp, ONE_WEEK)) {\n            revert InvalidCutoffTime();\n        }\n\n        uint16 agreedProtocolFeeBp = params.protocolFeeBp;\n        if (agreedProtocolFeeBp != protocolFeeBp) {\n            revert InvalidProtocolFeeBp();\n        }\n\n        address feeTokenAddress = params.feeTokenAddress;\n        if (feeTokenAddress != address(0)) {\n            _validateCurrency(feeTokenAddress);\n        }\n\n        uint256 prizesCount = params.prizes.length;\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\n            revert InvalidPrizesCount();\n        }\n\n        unchecked {\n            raffleId = ++rafflesCount;\n        }\n\n        // The storage layout of a prize struct (3 slots) is as follows:\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeAddress (160 bits) | prizeTier (8 bits) | prizeType (8 bits) | cumulativeWinnersCount (40 bits) | winnersCount (40 bits) |\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeId (256 bits)                                                                                                            |\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeAmount (256 bits)                                                                                                        |\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 4 is used to store the length of the prizes array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 4) + i * 3 is used to store the prize at the i-th index\n        // (x 3 because each prize consumes 3 slots).\n        //\n        // The assembly blocks are equivalent to `raffle.prizes.push(prize);`\n        //\n        // The primary benefit of using assembly is we only write the prizes length once instead of once per prize.\n        uint256 raffleSlot;\n        uint256 prizesLengthSlot;\n        uint256 individualPrizeSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            raffleSlot := keccak256(0x00, 0x40)\n\n            prizesLengthSlot := add(keccak256(0x00, 0x40), 4)\n\n            mstore(0x00, prizesLengthSlot)\n            individualPrizeSlotOffset := keccak256(0x00, 0x20)\n        }\n\n        uint256 expectedEthValue;\n        uint40 cumulativeWinnersCount;\n        {\n            uint8 currentPrizeTier;\n            for (uint256 i; i < prizesCount; ) {\n                Prize memory prize = params.prizes[i];\n                uint8 prizeTier = prize.prizeTier;\n                if (prizeTier < currentPrizeTier) {\n                    revert InvalidPrize();\n                }\n                _validatePrize(prize);\n\n                TokenType prizeType = prize.prizeType;\n                uint40 winnersCount = prize.winnersCount;\n                address prizeAddress = prize.prizeAddress;\n                uint256 prizeId = prize.prizeId;\n                uint256 prizeAmount = prize.prizeAmount;\n                if (prizeType == TokenType.ERC721) {\n                    transferManager.transferItemERC721(prizeAddress, msg.sender, address(this), prizeId);\n                } else if (prizeType == TokenType.ERC20) {\n                    transferManager.transferERC20(prizeAddress, msg.sender, address(this), prizeAmount * winnersCount);\n                } else if (prizeType == TokenType.ETH) {\n                    expectedEthValue += (prizeAmount * winnersCount);\n                } else {\n                    transferManager.transferItemERC1155(\n                        prizeAddress,\n                        msg.sender,\n                        address(this),\n                        prizeId,\n                        prizeAmount * winnersCount\n                    );\n                }\n\n                cumulativeWinnersCount += winnersCount;\n                currentPrizeTier = prizeTier;\n\n                assembly {\n                    let prizeSlotOne := winnersCount\n                    prizeSlotOne := or(prizeSlotOne, shl(40, cumulativeWinnersCount))\n                    prizeSlotOne := or(prizeSlotOne, shl(80, prizeType))\n                    prizeSlotOne := or(prizeSlotOne, shl(88, prizeTier))\n                    prizeSlotOne := or(prizeSlotOne, shl(96, prizeAddress))\n\n                    let currentPrizeSlotOffset := add(individualPrizeSlotOffset, mul(i, 3))\n                    sstore(currentPrizeSlotOffset, prizeSlotOne)\n                    sstore(add(currentPrizeSlotOffset, 1), prizeId)\n                    sstore(add(currentPrizeSlotOffset, 2), prizeAmount)\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            assembly {\n                sstore(prizesLengthSlot, prizesCount)\n            }\n        }\n        _validateExpectedEthValueOrRefund(expectedEthValue);\n\n        uint40 minimumEntries = params.minimumEntries;\n        if (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\n            revert InvalidWinnersCount();\n        }\n\n        _validateAndSetPricingOptions(raffleId, minimumEntries, params.pricingOptions);\n\n        bool isMinimumEntriesFixed = params.isMinimumEntriesFixed;\n        uint40 maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\n        // The storage layout of a raffle's first 2 slots is as follows:\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        // | drawnAt (40 bits) | cutoffTime (40 bits) | isMinimumEntriesFixed (8 bits) | status (8 bits) | owner (160 bits)                 |\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        // | agreedProtocolFeeBp (16 bits) | feeTokenAddress (160 bits) | maximumEntriesPerParticipant (40 bits) | minimumEntries (40 bits) |\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        //\n        // And the slots for these values are calculated by the following formulas:\n        // slot 1 = keccak256(raffleId, rafflesSlot)\n        // slot 2 = keccak256(raffleId, rafflesSlot) + 1\n        //\n        // This assembly block is equivalent to\n        // raffle.owner = msg.sender;\n        // raffle.status = RaffleStatus.Open;\n        // raffle.isMinimumEntriesFixed = isMinimumEntriesFixed;\n        // raffle.cutoffTime = cutoffTime;\n        // raffle.minimumEntries = minimumEntries;\n        // raffle.maximumEntriesPerParticipant = maximumEntriesPerParticipant;\n        // raffle.protocolFeeBp = agreedProtocolFeeBp;\n        // raffle.feeTokenAddress = feeTokenAddress;\n        assembly {\n            let raffleSlotOneValue := caller()\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(160, 1))\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(168, isMinimumEntriesFixed))\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(176, cutoffTime))\n\n            let raffleSlotTwoValue := minimumEntries\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(40, maximumEntriesPerParticipant))\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(80, feeTokenAddress))\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(240, agreedProtocolFeeBp))\n\n            sstore(raffleSlot, raffleSlotOneValue)\n            sstore(add(raffleSlot, 1), raffleSlotTwoValue)\n        }\n\n        emit RaffleStatusUpdated(raffleId, RaffleStatus.Open);\n    }\n\n    /**\n     * @dev This function is required in order for the contract to receive ERC-1155 tokens.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice If it is a delegated recipient, the amount paid should still be accrued to the payer.\n     *         If a raffle is cancelled, the payer should be refunded and not the recipient.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant whenNotPaused {\n        (address feeTokenAddress, uint208 expectedValue) = _enterRaffles(entries);\n        _chargeUser(feeTokenAddress, expectedValue);\n    }\n\n    /**\n     * @param _requestId The ID of the request\n     * @param _randomWords The random words returned by Chainlink\n     */\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n        if (randomnessRequests[_requestId].exists) {\n            uint256 raffleId = randomnessRequests[_requestId].raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status == RaffleStatus.Drawing) {\n                _setRaffleStatus(raffle, raffleId, RaffleStatus.RandomnessFulfilled);\n                randomnessRequests[_requestId].randomWord = _randomWords[0];\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function selectWinners(uint256 requestId) external {\n        RandomnessRequest memory randomnessRequest = randomnessRequests[requestId];\n        if (!randomnessRequest.exists) {\n            revert RandomnessRequestDoesNotExist();\n        }\n\n        uint256 raffleId = randomnessRequest.raffleId;\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.RandomnessFulfilled);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\n\n        Prize[] storage prizes = raffle.prizes;\n        uint256 prizesCount = prizes.length;\n        uint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\n\n        Entry[] memory entries = raffle.entries;\n        uint256 entriesCount = entries.length;\n\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\n        for (uint256 i; i < entriesCount; ) {\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 currentEntryIndex = uint256(currentEntryIndexArray[entriesCount - 1]);\n\n        uint256[] memory winningEntriesBitmap = new uint256[]((currentEntryIndex >> 8) + 1);\n\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\n        for (uint256 i; i < prizesCount; ) {\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 randomWord = randomnessRequest.randomWord;\n        uint256 winningEntry;\n\n        // The storage layout of a winner slot is as follows:\n        // ------------------------------------------------------------------------------------------------------------|\n        // | unused (40 bits) | entryIndex (40 bits) | prizeIndex (8 bits) | claimed (8 bits) | participant (160 bits) |\n        // ------------------------------------------------------------------------------------------------------------|\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 6 is used to store the length of the winners array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 6) + i is used to store the winner at the i-th index.\n        //\n        // The assembly blocks are equivalent to\n        // raffle.winners.push(\n        //   Winner({\n        //     participant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\n        //     claimed: false,\n        //     prizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1))),\n        //     entryIndex: uint40(winningEntry)\n        //   })\n        // );\n        //\n        // The primary benefit of using assembly is we only write the winners length once instead of once per winner.\n        uint256 winnersLengthSlot;\n        uint256 individualWinnerSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            winnersLengthSlot := add(keccak256(0x00, 0x40), 6)\n\n            mstore(0x00, winnersLengthSlot)\n            individualWinnerSlotOffset := keccak256(0x00, 0x20)\n        }\n\n        for (uint256 i; i < winnersCount; ) {\n            (randomWord, winningEntry, winningEntriesBitmap) = _searchForWinningEntryUntilThereIsNotADuplicate(\n                randomWord,\n                currentEntryIndex,\n                winningEntriesBitmap\n            );\n\n            address participant = entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant;\n            uint256 prizeIndex = cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1));\n\n            assembly {\n                let winnerSlotValue := participant\n                winnerSlotValue := or(winnerSlotValue, shl(168, prizeIndex))\n                winnerSlotValue := or(winnerSlotValue, shl(176, winningEntry))\n\n                sstore(add(individualWinnerSlotOffset, i), winnerSlotValue)\n            }\n\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        assembly {\n            sstore(winnersLengthSlot, winnersCount)\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimPrize(uint256 raffleId, uint256 winnerIndex) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        if (raffle.status != RaffleStatus.Drawn) {\n            _validateRaffleStatus(raffle, RaffleStatus.Complete);\n        }\n\n        Winner[] storage winners = raffle.winners;\n        if (winnerIndex >= winners.length) {\n            revert InvalidIndex();\n        }\n\n        Winner storage winner = winners[winnerIndex];\n        if (winner.claimed) {\n            revert NothingToClaim();\n        }\n        _validateCaller(winner.participant);\n        winner.claimed = true;\n\n        _transferPrize({prize: raffle.prizes[winner.prizeIndex], recipient: msg.sender, multiplier: 1});\n\n        emit PrizeClaimed(raffleId, winnerIndex);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external nonReentrant whenNotPaused {\n        TransferAccumulator memory transferAccumulator;\n\n        for (uint256 i; i < claimPrizesCalldata.length; ) {\n            ClaimPrizesCalldata calldata perRaffleClaimPrizesCalldata = claimPrizesCalldata[i];\n            uint256 raffleId = perRaffleClaimPrizesCalldata.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n            if (raffle.status != RaffleStatus.Drawn) {\n                _validateRaffleStatus(raffle, RaffleStatus.Complete);\n            }\n\n            Winner[] storage winners = raffle.winners;\n            uint256[] calldata winnerIndices = perRaffleClaimPrizesCalldata.winnerIndices;\n            uint256 winnersCount = winners.length;\n            uint256 claimsCount = winnerIndices.length;\n\n            for (uint256 j; j < claimsCount; ) {\n                uint256 winnerIndex = winnerIndices[j];\n\n                if (winnerIndex >= winnersCount) {\n                    revert InvalidIndex();\n                }\n\n                Winner storage winner = winners[winnerIndex];\n                if (winner.claimed) {\n                    revert NothingToClaim();\n                }\n                _validateCaller(winner.participant);\n                winner.claimed = true;\n\n                Prize storage prize = raffle.prizes[winner.prizeIndex];\n                if (prize.prizeType > TokenType.ERC1155) {\n                    address prizeAddress = prize.prizeAddress;\n                    if (prizeAddress == transferAccumulator.tokenAddress) {\n                        transferAccumulator.amount += prize.prizeAmount;\n                    } else {\n                        if (transferAccumulator.amount != 0) {\n                            _transferFungibleTokens(transferAccumulator);\n                        }\n\n                        transferAccumulator.tokenAddress = prizeAddress;\n                        transferAccumulator.amount = prize.prizeAmount;\n                    }\n                } else {\n                    _transferPrize({prize: prize, recipient: msg.sender, multiplier: 1});\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            emit PrizesClaimed(raffleId, winnerIndices);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (transferAccumulator.amount != 0) {\n            _transferFungibleTokens(transferAccumulator);\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimFees(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\n\n        address raffleOwner = raffle.owner;\n        if (msg.sender != raffleOwner) {\n            _validateCaller(owner);\n        }\n\n        uint208 claimableFees = raffle.claimableFees;\n        uint208 protocolFees = (claimableFees * uint208(raffle.protocolFeeBp)) / uint208(ONE_HUNDRED_PERCENT_BP);\n        unchecked {\n            claimableFees -= protocolFees;\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\n\n        raffle.claimableFees = 0;\n\n        address feeTokenAddress = raffle.feeTokenAddress;\n        _transferFungibleTokens(feeTokenAddress, raffleOwner, claimableFees);\n\n        if (protocolFees != 0) {\n            _transferFungibleTokens(feeTokenAddress, protocolFeeRecipient, protocolFees);\n        }\n\n        emit FeesClaimed(raffleId, claimableFees);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function cancel(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRafflePostCutoffTimeStatusTransferability(raffle);\n        if (block.timestamp < raffle.cutoffTime + 1 hours) {\n            _validateCaller(raffle.owner);\n        }\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Refundable);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice A raffle cannot be drawn if there are less entries than prizes.\n     */\n    function drawWinners(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n\n        Entry[] storage entries = raffle.entries;\n        uint256 entriesCount = entries.length;\n        if (entriesCount == 0) {\n            revert NotEnoughEntries();\n        }\n\n        Prize[] storage prizes = raffle.prizes;\n\n        if (prizes[prizes.length - 1].cumulativeWinnersCount > entries[entriesCount - 1].currentEntryIndex + 1) {\n            revert NotEnoughEntries();\n        }\n\n        _validateRafflePostCutoffTimeStatusTransferability(raffle);\n        _validateCaller(raffle.owner);\n        _drawWinners(raffleId, raffle);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n\n        _validateRaffleStatus(raffle, RaffleStatus.Drawing);\n\n        if (block.timestamp < raffle.drawnAt + ONE_DAY) {\n            revert DrawExpirationTimeNotReached();\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Refundable);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function withdrawPrizes(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Refundable);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Cancelled);\n\n        uint256 prizesCount = raffle.prizes.length;\n        address raffleOwner = raffle.owner;\n        for (uint256 i; i < prizesCount; ) {\n            Prize storage prize = raffle.prizes[i];\n            _transferPrize({prize: prize, recipient: raffleOwner, multiplier: uint256(prize.winnersCount)});\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @dev Refundable and Cancelled are the only statuses that allow refunds.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external nonReentrant whenNotPaused {\n        (address feeTokenAddress, uint208 refundAmount) = _claimRefund(raffleIds);\n        _transferFungibleTokens(feeTokenAddress, msg.sender, refundAmount);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice The fee token address for all the raffles involved must be the same.\n     * @dev Refundable and Cancelled are the only statuses that allow refunds.\n     */\n    function rollover(uint256[] calldata refundableRaffleIds, EntryCalldata[] calldata entries)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        (address refundFeeTokenAddress, uint208 rolloverAmount) = _claimRefund(refundableRaffleIds);\n        (address enterRafflesFeeTokenAddress, uint208 expectedValue) = _enterRaffles(entries);\n\n        if (refundFeeTokenAddress != enterRafflesFeeTokenAddress) {\n            revert InvalidCurrency();\n        }\n\n        if (rolloverAmount > expectedValue) {\n            _transferFungibleTokens(refundFeeTokenAddress, msg.sender, _unsafeSubtract(rolloverAmount, expectedValue));\n        } else if (rolloverAmount < expectedValue) {\n            _chargeUser(refundFeeTokenAddress, _unsafeSubtract(expectedValue, rolloverAmount));\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function setProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function setProtocolFeeBp(uint16 _protocolFeeBp) external onlyOwner {\n        _setProtocolFeeBp(_protocolFeeBp);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\n        uint256 count = currencies.length;\n        for (uint256 i; i < count; ) {\n            isCurrencyAllowed[currencies[i]] = (isAllowed ? 1 : 0);\n            unchecked {\n                ++i;\n            }\n        }\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function togglePaused() external onlyOwner {\n        paused() ? _unpause() : _pause();\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\n        winners = raffles[raffleId].winners;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\n        prizes = raffles[raffleId].prizes;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\n        entries = raffles[raffleId].entries;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[] memory pricingOptions) {\n        pricingOptions = raffles[raffleId].pricingOptions;\n    }\n\n    /**\n     * @param _protocolFeeRecipient The new protocol fee recipient address\n     */\n    function _setProtocolFeeRecipient(address _protocolFeeRecipient) private {\n        if (_protocolFeeRecipient == address(0)) {\n            revert InvalidProtocolFeeRecipient();\n        }\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\n    }\n\n    /**\n     * @param _protocolFeeBp The new protocol fee in basis points\n     */\n    function _setProtocolFeeBp(uint16 _protocolFeeBp) private {\n        if (_protocolFeeBp > MAXIMUM_PROTOCOL_FEE_BP) {\n            revert InvalidProtocolFeeBp();\n        }\n        protocolFeeBp = _protocolFeeBp;\n        emit ProtocolFeeBpUpdated(_protocolFeeBp);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    function _validateAndSetPricingOptions(\n        uint256 raffleId,\n        uint40 minimumEntries,\n        PricingOption[] calldata pricingOptions\n    ) private {\n        uint256 count = pricingOptions.length;\n\n        if (count == 0 || count > MAXIMUM_PRICING_OPTIONS_PER_RAFFLE) {\n            revert InvalidPricingOptionsCount();\n        }\n\n        uint40 lowestEntriesCount = pricingOptions[0].entriesCount;\n\n        // The storage layout of a pricing option slot is as follows:\n        // ---------------------------------------------------------------|\n        // | unused (8 bits) | price (208 bits) | entries count (40 bits) |\n        // ---------------------------------------------------------------|\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 3 is used to store the length of the pricing options array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 3) + i is used to store the pricing option at the i-th index.\n        //\n        // The assembly blocks are equivalent to `raffles[raffleId].pricingOptions.push(pricingOption);`\n        //\n        // The primary benefit of using assembly is we only write the pricing options length once instead of once per pricing option.\n        uint256 pricingOptionsLengthSlot;\n        uint256 individualPricingOptionSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            pricingOptionsLengthSlot := add(keccak256(0x00, 0x40), 3)\n\n            mstore(0x00, pricingOptionsLengthSlot)\n            individualPricingOptionSlotOffset := keccak256(0x00, 0x20)\n        }\n\n        for (uint256 i; i < count; ) {\n            PricingOption memory pricingOption = pricingOptions[i];\n\n            uint40 entriesCount = pricingOption.entriesCount;\n            uint208 price = pricingOption.price;\n\n            if (i == 0) {\n                if (minimumEntries % entriesCount != 0 || price == 0) {\n                    revert InvalidPricingOption();\n                }\n            } else {\n                PricingOption memory lastPricingOption = pricingOptions[_unsafeSubtract(i, 1)];\n                uint208 lastPrice = lastPricingOption.price;\n                uint40 lastEntriesCount = lastPricingOption.entriesCount;\n\n                if (\n                    entriesCount % lowestEntriesCount != 0 ||\n                    price % entriesCount != 0 ||\n                    entriesCount <= lastEntriesCount ||\n                    price <= lastPrice ||\n                    price / entriesCount > lastPrice / lastEntriesCount\n                ) {\n                    revert InvalidPricingOption();\n                }\n            }\n\n            assembly {\n                let pricingOptionValue := entriesCount\n                pricingOptionValue := or(pricingOptionValue, shl(40, price))\n                sstore(add(individualPricingOptionSlotOffset, i), pricingOptionValue)\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        assembly {\n            sstore(pricingOptionsLengthSlot, count)\n        }\n    }\n\n    /**\n     * @param prize The prize.\n     */\n    function _validatePrize(Prize memory prize) private view {\n        TokenType prizeType = prize.prizeType;\n        if (prizeType == TokenType.ERC721) {\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\n                revert InvalidPrize();\n            }\n        } else {\n            if (prizeType == TokenType.ERC20) {\n                _validateCurrency(prize.prizeAddress);\n            }\n\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\n                revert InvalidPrize();\n            }\n        }\n    }\n\n    /**\n     * @param prize The prize to transfer.\n     * @param recipient The recipient of the prize.\n     * @param multiplier The multiplier to apply to the prize amount.\n     */\n    function _transferPrize(\n        Prize storage prize,\n        address recipient,\n        uint256 multiplier\n    ) private {\n        TokenType prizeType = prize.prizeType;\n        address prizeAddress = prize.prizeAddress;\n        if (prizeType == TokenType.ERC721) {\n            _executeERC721TransferFrom(prizeAddress, address(this), recipient, prize.prizeId);\n        } else if (prizeType == TokenType.ERC1155) {\n            _executeERC1155SafeTransferFrom(\n                prizeAddress,\n                address(this),\n                recipient,\n                prize.prizeId,\n                prize.prizeAmount * multiplier\n            );\n        } else {\n            _transferFungibleTokens(prizeAddress, recipient, prize.prizeAmount * multiplier);\n        }\n    }\n\n    /**\n     * @param currency The currency to transfer.\n     * @param recipient The recipient of the currency.\n     * @param amount The amount of currency to transfer.\n     */\n    function _transferFungibleTokens(\n        address currency,\n        address recipient,\n        uint256 amount\n    ) private {\n        if (currency == address(0)) {\n            _transferETHAndWrapIfFailWithGasLimit(WETH, recipient, amount, gasleft());\n        } else {\n            _executeERC20DirectTransfer(currency, recipient, amount);\n        }\n    }\n\n    /**\n     * @param transferAccumulator The transfer accumulator.\n     */\n    function _transferFungibleTokens(TransferAccumulator memory transferAccumulator) private {\n        _transferFungibleTokens(transferAccumulator.tokenAddress, msg.sender, transferAccumulator.amount);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle to draw winners for.\n     * @param raffle The raffle to draw winners for.\n     */\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\n        raffle.drawnAt = uint40(block.timestamp);\n\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords({\n            keyHash: KEY_HASH,\n            subId: SUBSCRIPTION_ID,\n            minimumRequestConfirmations: uint16(3),\n            callbackGasLimit: uint32(500_000),\n            numWords: uint32(1)\n        });\n\n        if (randomnessRequests[requestId].exists) {\n            revert RandomnessRequestAlreadyExists();\n        }\n\n        randomnessRequests[requestId].exists = true;\n        randomnessRequests[requestId].raffleId = uint80(raffleId);\n\n        emit RandomnessRequested(raffleId, requestId);\n    }\n\n    /**\n     * @param raffle The raffle to check the status of.\n     * @param status The expected status of the raffle\n     */\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\n        if (raffle.status != status) {\n            revert InvalidStatus();\n        }\n    }\n\n    /**\n     * @param entries The entries to enter.\n     */\n    function _enterRaffles(EntryCalldata[] calldata entries)\n        private\n        returns (address feeTokenAddress, uint208 expectedValue)\n    {\n        uint256 count = entries.length;\n        for (uint256 i; i < count; ) {\n            EntryCalldata calldata entry = entries[i];\n\n            address recipient = entry.recipient == address(0) ? msg.sender : entry.recipient;\n\n            uint256 raffleId = entry.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            if (i == 0) {\n                feeTokenAddress = raffle.feeTokenAddress;\n            } else if (raffle.feeTokenAddress != feeTokenAddress) {\n                revert InvalidCurrency();\n            }\n\n            if (entry.pricingOptionIndex >= raffle.pricingOptions.length) {\n                revert InvalidIndex();\n            }\n\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n            if (block.timestamp >= raffle.cutoffTime) {\n                revert CutoffTimeReached();\n            }\n\n            uint40 entriesCount;\n            uint208 price;\n            {\n                PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\n\n                uint40 multiplier = entry.count;\n                if (multiplier == 0) {\n                    revert InvalidCount();\n                }\n\n                entriesCount = pricingOption.entriesCount * multiplier;\n                price = pricingOption.price * multiplier;\n\n                uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][recipient].entriesCount +\n                    entriesCount;\n                if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\n                    revert MaximumEntriesPerParticipantReached();\n                }\n                rafflesParticipantsStats[raffleId][recipient].entriesCount = newParticipantEntriesCount;\n            }\n\n            expectedValue += price;\n\n            uint256 raffleEntriesCount = raffle.entries.length;\n            uint40 currentEntryIndex;\n            if (raffleEntriesCount == 0) {\n                currentEntryIndex = uint40(_unsafeSubtract(entriesCount, 1));\n            } else {\n                currentEntryIndex =\n                    raffle.entries[_unsafeSubtract(raffleEntriesCount, 1)].currentEntryIndex +\n                    entriesCount;\n            }\n\n            if (raffle.isMinimumEntriesFixed) {\n                if (currentEntryIndex >= raffle.minimumEntries) {\n                    revert MaximumEntriesReached();\n                }\n            }\n\n            _pushEntry(raffle, currentEntryIndex, recipient);\n            raffle.claimableFees += price;\n\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\n\n            emit EntrySold(raffleId, msg.sender, recipient, entriesCount, price);\n\n            if (currentEntryIndex >= _unsafeSubtract(raffle.minimumEntries, 1)) {\n                _drawWinners(raffleId, raffle);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param feeTokenAddress The address of the token to charge the fee in.\n     * @param expectedValue The expected value of the fee.\n     */\n    function _chargeUser(address feeTokenAddress, uint256 expectedValue) private {\n        if (feeTokenAddress == address(0)) {\n            _validateExpectedEthValueOrRefund(expectedValue);\n        } else {\n            transferManager.transferERC20(feeTokenAddress, msg.sender, address(this), expectedValue);\n        }\n    }\n\n    /**\n     * @param raffleIds The IDs of the raffles to claim refunds for.\n     */\n    function _claimRefund(uint256[] calldata raffleIds)\n        private\n        returns (address feeTokenAddress, uint208 refundAmount)\n    {\n        uint256 count = raffleIds.length;\n\n        for (uint256 i; i < count; ) {\n            uint256 raffleId = raffleIds[i];\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status < RaffleStatus.Refundable) {\n                revert InvalidStatus();\n            }\n\n            ParticipantStats storage stats = rafflesParticipantsStats[raffleId][msg.sender];\n            uint208 amountPaid = stats.amountPaid;\n\n            if (stats.refunded || amountPaid == 0) {\n                revert NothingToClaim();\n            }\n\n            if (i == 0) {\n                feeTokenAddress = raffle.feeTokenAddress;\n            } else if (feeTokenAddress != raffle.feeTokenAddress) {\n                revert InvalidCurrency();\n            }\n\n            stats.refunded = true;\n            refundAmount += amountPaid;\n\n            emit EntryRefunded(raffleId, msg.sender, amountPaid);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param caller The expected caller.\n     */\n    function _validateCaller(address caller) private view {\n        if (msg.sender != caller) {\n            revert InvalidCaller();\n        }\n    }\n\n    /**\n     * @param currency The currency to validate.\n     */\n    function _validateCurrency(address currency) private view {\n        if (isCurrencyAllowed[currency] != 1) {\n            revert InvalidCurrency();\n        }\n    }\n\n    /**\n     * @param expectedEthValue The expected ETH value to be sent by the caller.\n     */\n    function _validateExpectedEthValueOrRefund(uint256 expectedEthValue) private {\n        if (expectedEthValue > msg.value) {\n            revert InsufficientNativeTokensSupplied();\n        } else if (msg.value > expectedEthValue) {\n            _transferETHAndWrapIfFailWithGasLimit(\n                WETH,\n                msg.sender,\n                _unsafeSubtract(msg.value, expectedEthValue),\n                gasleft()\n            );\n        }\n    }\n\n    /**\n     * @param raffle The raffle to validate.\n     */\n    function _validateRafflePostCutoffTimeStatusTransferability(Raffle storage raffle) private view {\n        _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n        if (raffle.cutoffTime > block.timestamp) {\n            revert CutoffTimeNotReached();\n        }\n    }\n\n    /**\n     * @param raffle The raffle to set the status of.\n     * @param raffleId The ID of the raffle to set the status of.\n     * @param status The status to set.\n     */\n    function _setRaffleStatus(\n        Raffle storage raffle,\n        uint256 raffleId,\n        RaffleStatus status\n    ) private {\n        raffle.status = status;\n        emit RaffleStatusUpdated(raffleId, status);\n    }\n\n    /**\n     * @param raffle The raffle to add the entry to.\n     * @param currentEntryIndex The cumulative number of entries in the raffle minus one.\n     * @param recipient The recipient of the entry.\n     */\n    function _pushEntry(\n        Raffle storage raffle,\n        uint40 currentEntryIndex,\n        address recipient\n    ) private {\n        raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: recipient}));\n    }\n\n    /**\n     * Unsafe math functions.\n     */\n\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a + b;\n        }\n    }\n\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a - b;\n        }\n    }\n}\n"
6     },
7     "node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelWETH.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IWETH} from \"../interfaces/generic/IWETH.sol\";\n\n/**\n * @title LowLevelWETH\n * @notice This contract contains a function to transfer ETH with an option to wrap to WETH.\n *         If the ETH transfer fails within a gas limit, the amount in ETH is wrapped to WETH and then transferred.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract LowLevelWETH {\n    /**\n     * @notice It transfers ETH to a recipient with a specified gas limit.\n     *         If the original transfers fails, it wraps to WETH and transfers the WETH to recipient.\n     * @param _WETH WETH address\n     * @param _to Recipient address\n     * @param _amount Amount to transfer\n     * @param _gasLimit Gas limit to perform the ETH transfer\n     */\n    function _transferETHAndWrapIfFailWithGasLimit(\n        address _WETH,\n        address _to,\n        uint256 _amount,\n        uint256 _gasLimit\n    ) internal {\n        bool status;\n\n        assembly {\n            status := call(_gasLimit, _to, _amount, 0, 0, 0, 0)\n        }\n\n        if (!status) {\n            IWETH(_WETH).deposit{value: _amount}();\n            IWETH(_WETH).transfer(_to, _amount);\n        }\n    }\n}\n"
9     },
10     "node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC20} from \"../interfaces/generic/IERC20.sol\";\n\n// Errors\nimport {ERC20TransferFail, ERC20TransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC20Transfer\n * @notice This contract contains low-level calls to transfer ERC20 tokens.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract LowLevelERC20Transfer {\n    /**\n     * @notice Execute ERC20 transferFrom\n     * @param currency Currency address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFromFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFromFail();\n            }\n        }\n    }\n\n    /**\n     * @notice Execute ERC20 (direct) transfer\n     * @param currency Currency address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFail();\n            }\n        }\n    }\n}\n"
12     },
13     "node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC721Transfer.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC721} from \"../interfaces/generic/IERC721.sol\";\n\n// Errors\nimport {ERC721TransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC721Transfer\n * @notice This contract contains low-level calls to transfer ERC721 tokens.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract LowLevelERC721Transfer {\n    /**\n     * @notice Execute ERC721 transferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenId tokenId to transfer\n     */\n    function _executeERC721TransferFrom(address collection, address from, address to, uint256 tokenId) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(abi.encodeCall(IERC721.transferFrom, (from, to, tokenId)));\n\n        if (!status) {\n            revert ERC721TransferFromFail();\n        }\n    }\n}\n"
15     },
16     "node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC1155Transfer.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC1155} from \"../interfaces/generic/IERC1155.sol\";\n\n// Errors\nimport {ERC1155SafeTransferFromFail, ERC1155SafeBatchTransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC1155Transfer\n * @notice This contract contains low-level calls to transfer ERC1155 tokens.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract LowLevelERC1155Transfer {\n    /**\n     * @notice Execute ERC1155 safeTransferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenId tokenId to transfer\n     * @param amount Amount to transfer\n     */\n    function _executeERC1155SafeTransferFrom(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(abi.encodeCall(IERC1155.safeTransferFrom, (from, to, tokenId, amount, \"\")));\n\n        if (!status) {\n            revert ERC1155SafeTransferFromFail();\n        }\n    }\n\n    /**\n     * @notice Execute ERC1155 safeBatchTransferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenIds Array of tokenIds to transfer\n     * @param amounts Array of amounts to transfer\n     */\n    function _executeERC1155SafeBatchTransferFrom(\n        address collection,\n        address from,\n        address to,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(\n            abi.encodeCall(IERC1155.safeBatchTransferFrom, (from, to, tokenIds, amounts, \"\"))\n        );\n\n        if (!status) {\n            revert ERC1155SafeBatchTransferFromFail();\n        }\n    }\n}\n"
18     },
19     "node_modules/@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IOwnableTwoSteps} from \"./interfaces/IOwnableTwoSteps.sol\";\n\n/**\n * @title OwnableTwoSteps\n * @notice This contract offers transfer of ownership in two steps with potential owner\n *         having to confirm the transaction to become the owner.\n *         Renouncement of the ownership is also a two-step process since the next potential owner is the address(0).\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\nabstract contract OwnableTwoSteps is IOwnableTwoSteps {\n    /**\n     * @notice Address of the current owner.\n     */\n    address public owner;\n\n    /**\n     * @notice Address of the potential owner.\n     */\n    address public potentialOwner;\n\n    /**\n     * @notice Ownership status.\n     */\n    Status public ownershipStatus;\n\n    /**\n     * @notice Modifier to wrap functions for contracts that inherit this contract.\n     */\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @notice Constructor\n     * @param _owner The contract's owner\n     */\n    constructor(address _owner) {\n        owner = _owner;\n        emit NewOwner(_owner);\n    }\n\n    /**\n     * @notice This function is used to cancel the ownership transfer.\n     * @dev This function can be used for both cancelling a transfer to a new owner and\n     *      cancelling the renouncement of the ownership.\n     */\n    function cancelOwnershipTransfer() external onlyOwner {\n        Status _ownershipStatus = ownershipStatus;\n        if (_ownershipStatus == Status.NoOngoingTransfer) {\n            revert NoOngoingTransferInProgress();\n        }\n\n        if (_ownershipStatus == Status.TransferInProgress) {\n            delete potentialOwner;\n        }\n\n        delete ownershipStatus;\n\n        emit CancelOwnershipTransfer();\n    }\n\n    /**\n     * @notice This function is used to confirm the ownership renouncement.\n     */\n    function confirmOwnershipRenouncement() external onlyOwner {\n        if (ownershipStatus != Status.RenouncementInProgress) {\n            revert RenouncementNotInProgress();\n        }\n\n        delete owner;\n        delete ownershipStatus;\n\n        emit NewOwner(address(0));\n    }\n\n    /**\n     * @notice This function is used to confirm the ownership transfer.\n     * @dev This function can only be called by the current potential owner.\n     */\n    function confirmOwnershipTransfer() external {\n        if (ownershipStatus != Status.TransferInProgress) {\n            revert TransferNotInProgress();\n        }\n\n        if (msg.sender != potentialOwner) {\n            revert WrongPotentialOwner();\n        }\n\n        owner = msg.sender;\n        delete ownershipStatus;\n        delete potentialOwner;\n\n        emit NewOwner(msg.sender);\n    }\n\n    /**\n     * @notice This function is used to initiate the transfer of ownership to a new owner.\n     * @param newPotentialOwner New potential owner address\n     */\n    function initiateOwnershipTransfer(address newPotentialOwner) external onlyOwner {\n        if (ownershipStatus != Status.NoOngoingTransfer) {\n            revert TransferAlreadyInProgress();\n        }\n\n        ownershipStatus = Status.TransferInProgress;\n        potentialOwner = newPotentialOwner;\n\n        /**\n         * @dev This function can only be called by the owner, so msg.sender is the owner.\n         *      We don't have to SLOAD the owner again.\n         */\n        emit InitiateOwnershipTransfer(msg.sender, newPotentialOwner);\n    }\n\n    /**\n     * @notice This function is used to initiate the ownership renouncement.\n     */\n    function initiateOwnershipRenouncement() external onlyOwner {\n        if (ownershipStatus != Status.NoOngoingTransfer) {\n            revert TransferAlreadyInProgress();\n        }\n\n        ownershipStatus = Status.RenouncementInProgress;\n\n        emit InitiateOwnershipRenouncement();\n    }\n\n    function _onlyOwner() private view {\n        if (msg.sender != owner) revert NotOwner();\n    }\n}\n"
21     },
22     "node_modules/@looksrare/contracts-libs/contracts/PackableReentrancyGuard.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IReentrancyGuard} from \"./interfaces/IReentrancyGuard.sol\";\n\n/**\n * @title PackableReentrancyGuard\n * @notice This contract protects against reentrancy attacks.\n *         It is adjusted from OpenZeppelin.\n *         The only difference between this contract and ReentrancyGuard\n *         is that _status is uint8 instead of uint256 so that it can be\n *         packed with other contracts' storage variables.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\nabstract contract PackableReentrancyGuard is IReentrancyGuard {\n    uint8 private _status;\n\n    /**\n     * @notice Modifier to wrap functions to prevent reentrancy calls.\n     */\n    modifier nonReentrant() {\n        if (_status == 2) {\n            revert ReentrancyFail();\n        }\n\n        _status = 2;\n        _;\n        _status = 1;\n    }\n\n    constructor() {\n        _status = 1;\n    }\n}\n"
24     },
25     "node_modules/@looksrare/contracts-libs/contracts/Pausable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title Pausable\n * @notice This contract makes it possible to pause the contract.\n *         It is adjusted from OpenZeppelin.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\nabstract contract Pausable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    error IsPaused();\n    error NotPaused();\n\n    bool private _paused;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert IsPaused();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert NotPaused();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"
27     },
28     "node_modules/@looksrare/contracts-transfer-manager/contracts/interfaces/ITransferManager.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// Enums\nimport {TokenType} from \"../enums/TokenType.sol\";\n\n/**\n * @title ITransferManager\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ninterface ITransferManager {\n    /**\n     * @notice This struct is only used for transferBatchItemsAcrossCollections.\n     * @param tokenAddress Token address\n     * @param tokenType 0 for ERC721, 1 for ERC1155\n     * @param itemIds Array of item ids to transfer\n     * @param amounts Array of amounts to transfer\n     */\n    struct BatchTransferItem {\n        address tokenAddress;\n        TokenType tokenType;\n        uint256[] itemIds;\n        uint256[] amounts;\n    }\n\n    /**\n     * @notice It is emitted if operators' approvals to transfer NFTs are granted by a user.\n     * @param user Address of the user\n     * @param operators Array of operator addresses\n     */\n    event ApprovalsGranted(address user, address[] operators);\n\n    /**\n     * @notice It is emitted if operators' approvals to transfer NFTs are revoked by a user.\n     * @param user Address of the user\n     * @param operators Array of operator addresses\n     */\n    event ApprovalsRemoved(address user, address[] operators);\n\n    /**\n     * @notice It is emitted if a new operator is added to the global allowlist.\n     * @param operator Operator address\n     */\n    event OperatorAllowed(address operator);\n\n    /**\n     * @notice It is emitted if an operator is removed from the global allowlist.\n     * @param operator Operator address\n     */\n    event OperatorRemoved(address operator);\n\n    /**\n     * @notice It is returned if the operator to approve has already been approved by the user.\n     */\n    error OperatorAlreadyApprovedByUser();\n\n    /**\n     * @notice It is returned if the operator to revoke has not been previously approved by the user.\n     */\n    error OperatorNotApprovedByUser();\n\n    /**\n     * @notice It is returned if the transfer caller is already allowed by the owner.\n     * @dev This error can only be returned for owner operations.\n     */\n    error OperatorAlreadyAllowed();\n\n    /**\n     * @notice It is returned if the operator to approve is not in the global allowlist defined by the owner.\n     * @dev This error can be returned if the user tries to grant approval to an operator address not in the\n     *      allowlist or if the owner tries to remove the operator from the global allowlist.\n     */\n    error OperatorNotAllowed();\n\n    /**\n     * @notice It is returned if the transfer caller is invalid.\n     *         For a transfer called to be valid, the operator must be in the global allowlist and\n     *         approved by the 'from' user.\n     */\n    error TransferCallerInvalid();\n\n    /**\n     * @notice This function transfers ERC20 tokens.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount amount\n     */\n    function transferERC20(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice This function transfers a single item for a single ERC721 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemId Item ID\n     */\n    function transferItemERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId\n    ) external;\n\n    /**\n     * @notice This function transfers items for a single ERC721 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemIds Array of itemIds\n     * @param amounts Array of amounts\n     */\n    function transferItemsERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external;\n\n    /**\n     * @notice This function transfers a single item for a single ERC1155 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemId Item ID\n     * @param amount Amount\n     */\n    function transferItemERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice This function transfers items for a single ERC1155 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemIds Array of itemIds\n     * @param amounts Array of amounts\n     * @dev It does not allow batch transferring if from = msg.sender since native function should be used.\n     */\n    function transferItemsERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external;\n\n    /**\n     * @notice This function transfers items across an array of tokens that can be ERC20, ERC721 and ERC1155.\n     * @param items Array of BatchTransferItem\n     * @param from Sender address\n     * @param to Recipient address\n     */\n    function transferBatchItemsAcrossCollections(\n        BatchTransferItem[] calldata items,\n        address from,\n        address to\n    ) external;\n\n    /**\n     * @notice This function allows a user to grant approvals for an array of operators.\n     *         Users cannot grant approvals if the operator is not allowed by this contract's owner.\n     * @param operators Array of operator addresses\n     * @dev Each operator address must be globally allowed to be approved.\n     */\n    function grantApprovals(address[] calldata operators) external;\n\n    /**\n     * @notice This function allows a user to revoke existing approvals for an array of operators.\n     * @param operators Array of operator addresses\n     * @dev Each operator address must be approved at the user level to be revoked.\n     */\n    function revokeApprovals(address[] calldata operators) external;\n\n    /**\n     * @notice This function allows an operator to be added for the shared transfer system.\n     *         Once the operator is allowed, users can grant NFT approvals to this operator.\n     * @param operator Operator address to allow\n     * @dev Only callable by owner.\n     */\n    function allowOperator(address operator) external;\n\n    /**\n     * @notice This function allows the user to remove an operator for the shared transfer system.\n     * @param operator Operator address to remove\n     * @dev Only callable by owner.\n     */\n    function removeOperator(address operator) external;\n}\n"
30     },
31     "node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
33     },
34     "node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
36     },
37     "contracts/libraries/Arrays.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            unchecked {\n                return low - 1;\n            }\n        } else {\n            return low;\n        }\n    }\n}\n"
39     },
40     "contracts/WinningEntrySearchLogicV2.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**\n * @title WinningEntrySearchLogicV2\n * @notice This contract contains the logic to search for a winning entry.\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ncontract WinningEntrySearchLogicV2 {\n    /**\n     * @param randomWord The random word.\n     * @param currentEntryIndex The current entry index.\n     * @param winningEntriesBitmap The bitmap of winning entries.\n     */\n    function _searchForWinningEntryUntilThereIsNotADuplicate(\n        uint256 randomWord,\n        uint256 currentEntryIndex,\n        uint256[] memory winningEntriesBitmap\n    )\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256[] memory\n        )\n    {\n        uint256 winningEntry = randomWord % (currentEntryIndex + 1);\n\n        uint256 bucket = winningEntry >> 8;\n        uint256 mask = 1 << (winningEntry & 0xff);\n        while (winningEntriesBitmap[bucket] & mask != 0) {\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\n            winningEntry = randomWord % (currentEntryIndex + 1);\n            bucket = winningEntry >> 8;\n            mask = 1 << (winningEntry & 0xff);\n        }\n\n        winningEntriesBitmap[bucket] |= mask;\n\n        return (randomWord, winningEntry, winningEntriesBitmap);\n    }\n}\n"
42     },
43     "contracts/interfaces/IRaffleV2.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IRaffleV2 {\n    enum RaffleStatus {\n        None,\n        Open,\n        Drawing,\n        RandomnessFulfilled,\n        Drawn,\n        Complete,\n        Refundable,\n        Cancelled\n    }\n\n    enum TokenType {\n        ERC721,\n        ERC1155,\n        ETH,\n        ERC20\n    }\n\n    /**\n     * @param entriesCount The number of entries that can be purchased for the given price.\n     * @param price The price of the entries.\n     */\n    struct PricingOption {\n        uint40 entriesCount;\n        uint208 price;\n    }\n\n    /**\n     * @param currentEntryIndex The cumulative number of entries in the raffle minus one.\n     * @param participant The address of the participant.\n     */\n    struct Entry {\n        uint40 currentEntryIndex;\n        address participant;\n    }\n\n    /**\n     * @param participant The address of the winner.\n     * @param claimed Whether the winner has claimed the prize.\n     * @param prizeIndex The index of the prize that was won.\n     * @param entryIndex The index of the entry that won.\n     */\n    struct Winner {\n        address participant;\n        bool claimed;\n        uint8 prizeIndex;\n        uint40 entryIndex;\n    }\n\n    /**\n     * @param winnersCount The number of winners.\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\n     * @param prizeType The type of the prize.\n     * @param prizeTier The tier of the prize.\n     * @param prizeAddress The address of the prize.\n     * @param prizeId The id of the prize.\n     * @param prizeAmount The amount of the prize.\n     */\n    struct Prize {\n        uint40 winnersCount;\n        uint40 cumulativeWinnersCount;\n        TokenType prizeType;\n        uint8 prizeTier;\n        address prizeAddress;\n        uint256 prizeId;\n        uint256 prizeAmount;\n    }\n\n    /**\n     * @param owner The address of the raffle owner.\n     * @param status The status of the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param cutoffTime The time after which the raffle cannot be entered.\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param claimableFees The amount of fees collected from selling entries.\n     * @param pricingOptions The pricing options for the raffle.\n     * @param prizes The prizes to be distributed.\n     * @param entries The entries that have been sold.\n     * @param winners The winners of the raffle.\n     */\n    struct Raffle {\n        address owner;\n        RaffleStatus status;\n        bool isMinimumEntriesFixed;\n        uint40 cutoffTime;\n        uint40 drawnAt;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        address feeTokenAddress;\n        uint16 protocolFeeBp;\n        uint208 claimableFees;\n        PricingOption[] pricingOptions;\n        Prize[] prizes;\n        Entry[] entries;\n        Winner[] winners;\n    }\n\n    /**\n     * @param amountPaid The amount paid by the participant.\n     * @param entriesCount The number of entries purchased by the participant.\n     * @param refunded Whether the participant has been refunded.\n     */\n    struct ParticipantStats {\n        uint208 amountPaid;\n        uint40 entriesCount;\n        bool refunded;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param pricingOptionIndex The index of the selected pricing option.\n     * @param count The number of entries to be purchased.\n     * @param recipient The recipient of the entries.\n     */\n    struct EntryCalldata {\n        uint256 raffleId;\n        uint256 pricingOptionIndex;\n        uint40 count;\n        address recipient;\n    }\n\n    /**\n     * @param cutoffTime The time at which the raffle will be closed.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param prizes The prizes to be distributed.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    struct CreateRaffleCalldata {\n        uint40 cutoffTime;\n        bool isMinimumEntriesFixed;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        uint16 protocolFeeBp;\n        address feeTokenAddress;\n        Prize[] prizes;\n        PricingOption[] pricingOptions;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param winnerIndices The indices of the winners to be claimed.\n     */\n    struct ClaimPrizesCalldata {\n        uint256 raffleId;\n        uint256[] winnerIndices;\n    }\n\n    /**\n     * @param exists Whether the request exists.\n     * @param randomWord The random words returned by Chainlink VRF.\n     *                   If randomWord == 0, then the request is still pending.\n     * @param raffleId The id of the raffle.\n     */\n    struct RandomnessRequest {\n        bool exists;\n        uint80 raffleId;\n        uint256 randomWord;\n    }\n\n    /**\n     * @notice This is used to accumulate the amount of tokens to be transferred.\n     * @param tokenAddress The address of the token.\n     * @param amount The amount of tokens accumulated.\n     */\n    struct TransferAccumulator {\n        address tokenAddress;\n        uint256 amount;\n    }\n\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\n    event EntrySold(uint256 raffleId, address buyer, address recipient, uint40 entriesCount, uint208 price);\n    event FeesClaimed(uint256 raffleId, uint256 amount);\n    event PrizeClaimed(uint256 raffleId, uint256 winnerIndex);\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\n    event ProtocolFeeBpUpdated(uint16 protocolFeeBp);\n    event ProtocolFeeRecipientUpdated(address protocolFeeRecipient);\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\n    event RandomnessRequested(uint256 raffleId, uint256 requestId);\n\n    error CutoffTimeNotReached();\n    error CutoffTimeReached();\n    error DrawExpirationTimeNotReached();\n    error InsufficientNativeTokensSupplied();\n    error InvalidCaller();\n    error InvalidCount();\n    error InvalidCurrency();\n    error InvalidCutoffTime();\n    error InvalidIndex();\n    error InvalidPricingOption();\n    error InvalidPricingOptionsCount();\n    error InvalidPrize();\n    error InvalidPrizesCount();\n    error InvalidProtocolFeeBp();\n    error InvalidProtocolFeeRecipient();\n    error InvalidStatus();\n    error InvalidWinnersCount();\n    error MaximumEntriesPerParticipantReached();\n    error MaximumEntriesReached();\n    error NothingToClaim();\n    error NotEnoughEntries();\n    error RandomnessRequestAlreadyExists();\n    error RandomnessRequestDoesNotExist();\n\n    /**\n     * @notice Creates a new raffle.\n     * @param params The parameters of the raffle.\n     * @return raffleId The id of the newly created raffle.\n     */\n    function createRaffle(CreateRaffleCalldata calldata params) external payable returns (uint256 raffleId);\n\n    /**\n     * @notice Enters a raffle or multiple raffles.\n     * @param entries The entries to be made.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\n     * @param requestId The request id returned by Chainlink.\n     */\n    function selectWinners(uint256 requestId) external;\n\n    /**\n     * @notice Claims a single prize for a winner.\n     * @param raffleId The id of the raffle.\n     * @param winnerIndex The index of the winner.\n     */\n    function claimPrize(uint256 raffleId, uint256 winnerIndex) external;\n\n    /**\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\n     *         from multiple raffles in a single transaction.\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\n\n    /**\n     * @notice Claims the fees collected for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function claimFees(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle beyond cut-off time without meeting minimum entries.\n     * @param raffleId The id of the raffle.\n     */\n    function cancel(uint256 raffleId) external;\n\n    /**\n     * @notice Draws winners for a raffle beyond cut-off time without meeting minimum entries.\n     * @param raffleId The id of the raffle.\n     */\n    function drawWinners(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle after randomness request if the randomness request\n     *         does not arrive after a certain amount of time.\n     *         Only callable by contract owner.\n     * @param raffleId The id of the raffle.\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external;\n\n    /**\n     * @notice Withdraws the prizes for a raffle after it has been marked as refundable.\n     * @param raffleId The id of the raffle.\n     */\n    function withdrawPrizes(uint256 raffleId) external;\n\n    /**\n     * @notice Rollover entries from cancelled raffles to open raffles.\n     * @param refundableRaffleIds The ids of the refundable raffles.\n     * @param entries The entries to be made.\n     */\n    function rollover(uint256[] calldata refundableRaffleIds, EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Claims the refund for a cancelled raffle.\n     * @param raffleIds The ids of the raffles.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external;\n\n    /**\n     * @notice Sets the protocol fee in basis points. Only callable by contract owner.\n     * @param protocolFeeBp The protocol fee in basis points.\n     */\n    function setProtocolFeeBp(uint16 protocolFeeBp) external;\n\n    /**\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\n     * @param protocolFeeRecipient The protocol fee recipient.\n     */\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\n\n    /**\n     * @notice This function allows the owner to update currency statuses.\n     * @param currencies Currency addresses (address(0) for ETH)\n     * @param isAllowed Whether the currencies should be allowed for trading\n     * @dev Only callable by owner.\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\n\n    /**\n     * @notice Toggle the contract's paused status. Only callable by contract owner.\n     */\n    function togglePaused() external;\n\n    /**\n     * @notice Gets the winners for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return winners The winners of the raffle.\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\n\n    /**\n     * @notice Gets the pricing options for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return pricingOptions The pricing options for the raffle.\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[] memory);\n\n    /**\n     * @notice Gets the prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return prizes The prizes to be distributed.\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\n\n    /**\n     * @notice Gets the entries for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return entries The entries entered for the raffle.\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\n}\n"
45     },
46     "node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IWETH.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n}\n"
48     },
49     "node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IERC20.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
51     },
52     "node_modules/@looksrare/contracts-libs/contracts/errors/LowLevelErrors.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the ETH transfer fails.\n */\nerror ETHTransferFail();\n\n/**\n * @notice It is emitted if the ERC20 approval fails.\n */\nerror ERC20ApprovalFail();\n\n/**\n * @notice It is emitted if the ERC20 transfer fails.\n */\nerror ERC20TransferFail();\n\n/**\n * @notice It is emitted if the ERC20 transferFrom fails.\n */\nerror ERC20TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC721 transferFrom fails.\n */\nerror ERC721TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeTransferFrom fails.\n */\nerror ERC1155SafeTransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeBatchTransferFrom fails.\n */\nerror ERC1155SafeBatchTransferFromFail();\n"
54     },
55     "node_modules/@looksrare/contracts-libs/contracts/errors/GenericErrors.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the call recipient is not a contract.\n */\nerror NotAContract();\n"
57     },
58     "node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IERC721.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
60     },
61     "node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IERC1155.sol": {
62       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC1155 {\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    event URI(string value, uint256 indexed id);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
63     },
64     "node_modules/@looksrare/contracts-libs/contracts/interfaces/IOwnableTwoSteps.sol": {
65       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IOwnableTwoSteps\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ninterface IOwnableTwoSteps {\n    /**\n     * @notice This enum keeps track of the ownership status.\n     * @param NoOngoingTransfer The default status when the owner is set\n     * @param TransferInProgress The status when a transfer to a new owner is initialized\n     * @param RenouncementInProgress The status when a transfer to address(0) is initialized\n     */\n    enum Status {\n        NoOngoingTransfer,\n        TransferInProgress,\n        RenouncementInProgress\n    }\n\n    /**\n     * @notice This is returned when there is no transfer of ownership in progress.\n     */\n    error NoOngoingTransferInProgress();\n\n    /**\n     * @notice This is returned when the caller is not the owner.\n     */\n    error NotOwner();\n\n    /**\n     * @notice This is returned when there is no renouncement in progress but\n     *         the owner tries to validate the ownership renouncement.\n     */\n    error RenouncementNotInProgress();\n\n    /**\n     * @notice This is returned when the transfer is already in progress but the owner tries\n     *         initiate a new ownership transfer.\n     */\n    error TransferAlreadyInProgress();\n\n    /**\n     * @notice This is returned when there is no ownership transfer in progress but the\n     *         ownership change tries to be approved.\n     */\n    error TransferNotInProgress();\n\n    /**\n     * @notice This is returned when the ownership transfer is attempted to be validated by the\n     *         a caller that is not the potential owner.\n     */\n    error WrongPotentialOwner();\n\n    /**\n     * @notice This is emitted if the ownership transfer is cancelled.\n     */\n    event CancelOwnershipTransfer();\n\n    /**\n     * @notice This is emitted if the ownership renouncement is initiated.\n     */\n    event InitiateOwnershipRenouncement();\n\n    /**\n     * @notice This is emitted if the ownership transfer is initiated.\n     * @param previousOwner Previous/current owner\n     * @param potentialOwner Potential/future owner\n     */\n    event InitiateOwnershipTransfer(address previousOwner, address potentialOwner);\n\n    /**\n     * @notice This is emitted when there is a new owner.\n     */\n    event NewOwner(address newOwner);\n}\n"
66     },
67     "node_modules/@looksrare/contracts-libs/contracts/interfaces/IReentrancyGuard.sol": {
68       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IReentrancyGuard\n * @author LooksRare protocol team (ðŸ‘€,ðŸ’Ž)\n */\ninterface IReentrancyGuard {\n    /**\n     * @notice This is returned when there is a reentrant call.\n     */\n    error ReentrancyFail();\n}\n"
69     },
70     "node_modules/@looksrare/contracts-transfer-manager/contracts/enums/TokenType.sol": {
71       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nenum TokenType {\n    ERC20,\n    ERC721,\n    ERC1155\n}\n"
72     },
73     "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
75     }
76   },
77   "settings": {
78     "remappings": [
79       "@chainlink/=node_modules/@chainlink/",
80       "@ensdomains/=node_modules/@ensdomains/",
81       "@eth-optimism/=node_modules/@eth-optimism/",
82       "@looksrare/=node_modules/@looksrare/",
83       "@openzeppelin/=node_modules/@openzeppelin/",
84       "ds-test/=lib/forge-std/lib/ds-test/src/",
85       "eth-gas-reporter/=node_modules/eth-gas-reporter/",
86       "forge-std/=lib/forge-std/src/",
87       "hardhat/=node_modules/hardhat/"
88     ],
89     "optimizer": {
90       "enabled": true,
91       "runs": 888888
92     },
93     "metadata": {
94       "useLiteralContent": false,
95       "bytecodeHash": "ipfs",
96       "appendCBOR": true
97     },
98     "outputSelection": {
99       "*": {
100         "*": [
101           "evm.bytecode",
102           "evm.deployedBytecode",
103           "devdoc",
104           "userdoc",
105           "metadata",
106           "abi"
107         ]
108       }
109     },
110     "evmVersion": "london",
111     "viaIR": true,
112     "libraries": {}
113   }
114 }}