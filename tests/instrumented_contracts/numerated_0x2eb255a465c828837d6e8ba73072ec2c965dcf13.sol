1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/MTGStaking.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\ninterface IArcada {\r\n    function proxyMint(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IMTG {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ncontract MTGStaking is Ownable, ReentrancyGuard {\r\n    IArcada public Arcada;\r\n    IMTG public MTG;\r\n\r\n    uint256 public constant DAY = 24 * 60 * 60;\r\n    uint256 public constant LOCKIN_PERIODS = 7 * DAY;\r\n\r\n    uint256 public START;\r\n    uint256 public GAMER_RATE = Math.ceilDiv(8 * 10 ** 18, DAY);\r\n    uint256 public ROYAL_GAMER_RATE = Math.ceilDiv(24 * 10 ** 18, DAY);\r\n\r\n    address public MTGAddress = 0x49907029e80dE1cBB3A46fD44247BF8BA8B5f12F;\r\n    address public ArcadaAddress = 0x22d811658Dc32293fbB5680EC5df85Cc2B605dC7;\r\n    bool public emergencyUnstakePaused = true;\r\n\r\n    struct stakeRecord {\r\n        address tokenOwner;\r\n        uint256 tokenId;\r\n        uint256 lockInEndAt;\r\n        uint256 stakedAt;\r\n    }\r\n\r\n    mapping(uint256 => stakeRecord) public stakingRecords;\r\n\r\n    mapping(address => uint256) public numOfTokenStaked;\r\n\r\n    event Staked(address owner, uint256 amount);\r\n\r\n    event Claimed(address owner, uint256 rewards);\r\n\r\n    event Unstaked(address owner, uint256 amount);\r\n\r\n    event EmergencyUnstake(address indexed user, uint256 tokenId);\r\n\r\n    constructor() {\r\n        START = block.timestamp;\r\n        MTG = IMTG(MTGAddress);\r\n        Arcada = IArcada(ArcadaAddress);\r\n    }\r\n\r\n    // STAKING\r\n    function batchStake(\r\n        uint256[] calldata tokenIds\r\n    )\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _stake(_msgSender(), tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function _stake(\r\n        address _user,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        require(\r\n            MTG.ownerOf(_tokenId) == _msgSender(),\r\n            \"You must own the NFT.\"\r\n        );\r\n        uint256 lockInEndAt = block.timestamp + LOCKIN_PERIODS;\r\n\r\n        stakingRecords[_tokenId] = stakeRecord(\r\n            _user,\r\n            _tokenId,\r\n            lockInEndAt,\r\n            block.timestamp\r\n        );\r\n        numOfTokenStaked[_user] = numOfTokenStaked[_user] + 1;\r\n        MTG.safeTransferFrom(\r\n            _user,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n\r\n        emit Staked(_user, _tokenId);\r\n    }\r\n\r\n    // RESTAKE\r\n    function batchClaim(\r\n        uint256[] calldata tokenIds\r\n    )\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _claim(_msgSender(), tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function _claim(\r\n        address _user,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        require(\r\n            stakingRecords[_tokenId].tokenOwner == _msgSender(),\r\n            \"Token does not belong to you.\"\r\n        );\r\n\r\n        uint256 rewards = getPendingRewards(_tokenId);\r\n        stakingRecords[_tokenId].stakedAt = block.timestamp;\r\n        Arcada.proxyMint(_user, rewards);\r\n\r\n        emit Staked(_user, _tokenId);\r\n        emit Claimed(_user, rewards);\r\n    }\r\n\r\n    // UNSTAKE\r\n    function batchUnstake(uint256[] calldata tokenIds) external nonReentrant {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _unstake(_msgSender(), tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function _unstake(address _user, uint256 _tokenId) internal {\r\n        require(\r\n            block.timestamp >= stakingRecords[_tokenId].lockInEndAt,\r\n            \"NFT is locked.\"\r\n        );\r\n        require(\r\n            stakingRecords[_tokenId].tokenOwner == _msgSender(),\r\n            \"Token does not belong to you.\"\r\n        );\r\n\r\n        uint256 rewards = getPendingRewards(_tokenId);\r\n        delete stakingRecords[_tokenId];\r\n        numOfTokenStaked[_user]--;\r\n        MTG.safeTransferFrom(\r\n            address(this),\r\n            _user,\r\n            _tokenId\r\n        );\r\n        Arcada.proxyMint(_user, rewards);\r\n\r\n        emit Unstaked(_user, _tokenId);\r\n        emit Claimed(_user, rewards);\r\n    }\r\n\r\n    function getStakingRecords(address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory tokenIds = new uint256[](numOfTokenStaked[user]);\r\n        uint256[] memory expiries = new uint256[](numOfTokenStaked[user]);\r\n        uint256[] memory rewards = new uint256[](numOfTokenStaked[user]);\r\n        uint256 counter = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i < MTG.totalSupply();\r\n            i++\r\n        ) {\r\n            if (stakingRecords[i].tokenOwner == user) {\r\n                tokenIds[counter] = stakingRecords[i].tokenId;\r\n                expiries[counter] = stakingRecords[i].lockInEndAt;\r\n                rewards[counter] = getPendingRewards(tokenIds[counter]);\r\n                counter++;\r\n            }\r\n        }\r\n        return (tokenIds, expiries, rewards);\r\n    }\r\n\r\n    function getPendingRewards(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(stakingRecords[tokenId].stakedAt > START, \"NFT is not staked.\");\r\n        if (tokenId <= 100) {\r\n            return (block.timestamp - stakingRecords[tokenId].stakedAt) * ROYAL_GAMER_RATE;\r\n        }\r\n        return (block.timestamp - stakingRecords[tokenId].stakedAt) * GAMER_RATE;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    // SETTER\r\n    function setGamerRewardRate(uint256 rewardPerDay) external onlyOwner {\r\n        GAMER_RATE = Math.ceilDiv(rewardPerDay, DAY);\r\n    }\r\n\r\n    function setRoyalGamerRewardRate(uint256 rewardPerDay) external onlyOwner {\r\n        ROYAL_GAMER_RATE = Math.ceilDiv(rewardPerDay, DAY);\r\n    }\r\n\r\n    // MIGRATION ONLY.\r\n    function setMTGNFTContract(address operator) external onlyOwner {\r\n        MTG = IMTG(operator);\r\n    }\r\n\r\n    function setArcadaContract(address operator) external onlyOwner {\r\n        Arcada = IArcada(operator);\r\n    }\r\n\r\n    // EMERGENCY ONLY.\r\n    function setEmergencyUnstakePaused(bool paused)\r\n        public\r\n        onlyOwner\r\n    {\r\n        emergencyUnstakePaused = paused;\r\n    }\r\n\r\n    function emergencyUnstake(uint256 tokenId) external nonReentrant {\r\n        require(!emergencyUnstakePaused, \"No emergency unstake.\");\r\n        _unstake(msg.sender, tokenId);\r\n        emit EmergencyUnstake(msg.sender, tokenId);\r\n    }\r\n\r\n    function emergencyUnstakeByOwner(uint256[] calldata tokenIds) external onlyOwner nonReentrant {\r\n        require(!emergencyUnstakePaused, \"No emergency unstake.\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            address user = stakingRecords[tokenId].tokenOwner;\r\n            require(user != address(0x0), \"Need owner exists.\");\r\n            delete stakingRecords[tokenId];\r\n            numOfTokenStaked[user]--;\r\n            MTG.safeTransferFrom(\r\n                address(this),\r\n                user,\r\n                tokenId\r\n            );\r\n            emit EmergencyUnstake(user, tokenId);\r\n        }\r\n    }\r\n}"
6     },
7     "@openzeppelin/contracts/utils/math/Math.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": false,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "devdoc",
34           "userdoc",
35           "metadata",
36           "abi"
37         ]
38       }
39     }
40   }
41 }}