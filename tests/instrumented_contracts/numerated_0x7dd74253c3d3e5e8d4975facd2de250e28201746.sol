1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/PioneerPass/PioneerPass.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\n/*\n\n         _______                   _____                    _____                    _____                    _____\n        /::\\    \\                 /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\\n       /::::\\    \\               /::\\____\\                /::\\    \\                /::\\    \\                /::\\____\\\n      /::::::\\    \\             /::::|   |               /::::\\    \\              /::::\\    \\              /:::/    /\n     /::::::::\\    \\           /:::::|   |              /::::::\\    \\            /::::::\\    \\            /:::/    /\n    /:::/~~\\:::\\    \\         /::::::|   |             /:::/\\:::\\    \\          /:::/\\:::\\    \\          /:::/    /\n   /:::/    \\:::\\    \\       /:::/|::|   |            /:::/__\\:::\\    \\        /:::/  \\:::\\    \\        /:::/    /\n  /:::/    / \\:::\\    \\     /:::/ |::|   |           /::::\\   \\:::\\    \\      /:::/    \\:::\\    \\      /:::/    /\n /:::/____/   \\:::\\____\\   /:::/  |::|   | _____    /::::::\\   \\:::\\    \\    /:::/    / \\:::\\    \\    /:::/    /      _____\n|:::|    |     |:::|    | /:::/   |::|   |/\\    \\  /:::/\\:::\\   \\:::\\    \\  /:::/    /   \\:::\\    \\  /:::/____/      /\\    \\\n|:::|____|     |:::|    |/:: /    |::|   /::\\____\\/:::/__\\:::\\   \\:::\\____\\/:::/____/     \\:::\\____\\|:::|    /      /::\\____\\\n \\:::\\    \\   /:::/    / \\::/    /|::|  /:::/    /\\:::\\   \\:::\\   \\::/    /\\:::\\    \\      \\::/    /|:::|____\\     /:::/    /\n  \\:::\\    \\ /:::/    /   \\/____/ |::| /:::/    /  \\:::\\   \\:::\\   \\/____/  \\:::\\    \\      \\/____/  \\:::\\    \\   /:::/    /\n   \\:::\\    /:::/    /            |::|/:::/    /    \\:::\\   \\:::\\    \\       \\:::\\    \\               \\:::\\    \\ /:::/    /\n    \\:::\\__/:::/    /             |::::::/    /      \\:::\\   \\:::\\____\\       \\:::\\    \\               \\:::\\    /:::/    /\n     \\::::::::/    /              |:::::/    /        \\:::\\   \\::/    /        \\:::\\    \\               \\:::\\__/:::/    /\n      \\::::::/    /               |::::/    /          \\:::\\   \\/____/          \\:::\\    \\               \\::::::::/    /\n       \\::::/    /                /:::/    /            \\:::\\    \\               \\:::\\    \\               \\::::::/    /\n        \\::/____/                /:::/    /              \\:::\\____\\               \\:::\\____\\               \\::::/    /\n         ~~                      \\::/    /                \\::/    /                \\::/    /                \\::/____/\n                                  \\/____/                  \\/____/                  \\/____/                  ~~\n\n                                                 _______________________\n                                               //   __..--~~~~--..__    \\\\\n                                              ||___/  |  |   |  |   \\ __/ |\n                                              ||  /   ___________    \\    |\n                                              ||_/   /.......... \\    |   |\n                                              | |   /..........   \\   |   |\n                         _____________________| |  /...........    \\  |   |________________\n                          ;   . . .   .       |_| |...........      | |   | .''.\"...  ... .\n                         ___   ..~.         _.' | |..........       | |   |         . ~\n                          .      '     .   / \\_.| |..........       | |   |\\ ~.   ._..---._\n                                          |. /| \\ \\............     / /   |/ .    /\\      /\\\n                            '\"\"\" ... ~~~  | \\|| _\\ \\............   / /-.__|      // ~-._./ -\\\n                          ..~             |  |_.~\\\\ \\_____________/ /// '.|     /__       __.\\\n                          ___   ..~.      |_.~    \\\\_______________//   _ ~-.  ~~~~..  ~~~~~.\n                                         .~ -.     \\__.---.________/   ______\\.\n                         .''.\"...  ... ./\\        _|      |---|  = |__ \\__\\===\\   '\"\"\" ... ~~~\n                                       /  '.  .  |_|=     |---|    | _| \\======\\ ___   ..~.\n                           ..~        / .   \\      |=     |___|    ||       __. \\\n                                     /           _ |_______________|   _.        \\\n                         .''.\"...  ./                /   \\___    ~~  \\            \\  '\" ..   ~~\n                                   /          '' /   \\      /         \\           /\\\n                         ___   .  /     -- .   /'   __\\____/       ____\\___.'   --  \\ ___   ..~.\n                                 /            /    / \\\\ --  _____//          ~ - .   \\\n                          ..--  /_..-       ./.   /  _/   _|___  \\\\       .     -   _/)\n                               /   ___     ./|__  / _/   (_____ / \\\\  .          \\ ~ /   .\n                           .  /___////_   /  |   / _/    (_____ \\  \\\\       _./ ..__/\n                             /___/__/_ \\ /  _|  /__/ _-- (_____  \\: \\\\_____________/      ._\n                         _  /         \\ /_.' | /  /       (_________/ ~~-|\n                           /           //   _|/  /-              .    __ |..~. _____ -.. '  \"\n                         ..\\==========/'   \\_/ _/  __      ___..     /  \\|\n                             / _____  \\'.______/___....------......__\\__/|\n                         '  |          \\     |\\__________________|__|___/|  ~~~~~..   - ~  '\n                          ~ |        _  \\   /~      \\     \\ --  /         \\\n                            | | | | | \\_|  |   \\     \\ ~      //           |\n                         _. |_| | | | .    |-----..   \\       /  /-      __|..~. _____ -.. '  \"\n                              |_|_|_|   _. |       \\_  \\\\ _ ./          ___|\n                          ~~~  ..   - ~  ' |         \\__\\___/__...------   |  ~~~~~..   - ~  '\n                                           |  .-         | | .       __    |\n                                           |     __..    | |    ______     |      .     ~\n                        ..~. _  __ -.. '   \\           __| |   |      |    | _        .\n                                           /             | | ~ |__.___|.   |\n                                           |    __       | |   |      |    |              .. '\n                          ~~~~~..   - ~  ' | ''          / \\   |      |    |___     __.\n                          ....   -         |  _____...   | |   \\______/    |  ~~~~~..   - ~  '\n                                           | /        '--| |      ~~       |\n                             ~..   - ~  '  |/            | |    __----  .. |   .      .     _\n                                           ||____......._| |               |\n                                           |----         | |               |  ~~~~~..   - ~  '\n                           '\"\"\" ... ~~~    |       -.    | |       _..     |\n                                           | ..         // |               | _~\"\".    .\n                                           |          -  \\ | __----.   ..  \\\n                          ~~~..   - ~  '   |_____________| |_______________/\n                                           \\_____________| |______________/   '    ...  __  ~\n                                            /     ----- \\   /----------- \\\n                           __~~..   - ~  ' /___      ----\\ /--...___      \\\n                                          /    ..--      | | __..     ___./  .     .   ~\n                              - ~  '..    \\  __________./  |_____________/  .   - ~  ' ~~~~\n                          ..._____~~~~~~JRO\\___________/    \\___________/  -_______...._____\n                        ..            ___ . ~~~~~~~~~~~. __\\ ~~~~~~~~~~~~~...      _  ~\n                        __    ....         ''        ...\"\"       ....'''      -_~~~     ~~~...\n\n*/\n\npragma solidity ^0.8.17;\n\nimport \"./PioneerPassToken.sol\";\n\ncontract PioneerPass is PioneerPassToken {\n    string public name = \"1CU Pioneer Pass\";\n    string public symbol = \"PNRP\";\n\n    constructor(string memory _contractURI, address royaltyAddress) PioneerPassToken(_contractURI, royaltyAddress){}\n\n    function mint(bytes32[] calldata _merkleProof, uint256 _passId, uint16 _amount, bool whitelisted) external payable callerIsUser {\n        Library.Pass storage pass = passIdToCollectionPass[_passId];\n        require(pass.passId > 0, \"Invalid Pass\");\n        require(pass.preSale || pass.publicSale, \"No active sales\");\n        if (whitelisted) {\n            require(!PioneerPassStorage.whitelistMinted[msg.sender][_passId], \"Already minted\");\n            require(Library.ValidatePresaleMint(pass, _amount, true, _merkleProof));\n            PioneerPassStorage.whitelistMinted[msg.sender][_passId] = true;\n        } else if (pass.preSale) {\n            require(_passId != 1, \"No pre-sale for the ark\");\n            require(!PioneerPassStorage.presaleMinted[msg.sender][_passId], \"Already minted\");\n            for (uint bar = 0; bar < _passId - 1; bar++) {\n                require(balanceOf(msg.sender, passIdIndex[bar]) > 0, \"Does not own previous tokens\");\n            }\n            require(Library.ValidatePresaleMint(pass, _amount, false, _merkleProof));\n            PioneerPassStorage.presaleMinted[msg.sender][_passId] = true;\n        } else {\n            uint16 _hodls;\n            if (balanceOf(msg.sender, passIdIndex[0]) > 0) {\n                if (_passId > 1) {\n                    for (uint bar = 0; bar < _passId - 1; bar++) {\n                        if (balanceOf(msg.sender, passIdIndex[bar]) > 0) {\n                            _hodls += 1;\n                        }\n                    }\n                }\n            }\n            else {\n                _hodls = 0;\n            }\n            require(Library.ValidatePublicMint(pass, _amount, _hodls));\n        }\n        pass.totalMinted += _amount;\n        _mint(msg.sender, _passId, _amount, \"\");\n    }\n\n    function reservedMints(uint256 _passId, uint16 _amount) external payable onlyOwner {\n        Library.Pass storage pass = passIdToCollectionPass[_passId];\n        require(pass.passId > 0, \"Invalid Pass\");\n        require(pass.maxSupply >= _amount + pass.totalMinted, \"Exceeds available supply\");\n        pass.totalMinted += _amount;\n        _mint(msg.sender, _passId, _amount, \"\");\n    }\n}"
6     },
7     "contracts/PioneerPass/PioneerPassToken.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\npragma solidity ^0.8.17;\n\nimport \"./openzeppelin/ERC1155.sol\";\nimport \"./openzeppelin/Ownable.sol\";\nimport \"./PioneerPassLibrary.sol\";\nimport \"./PioneerPassStorage.sol\";\nimport \"./PioneerPassUtils.sol\";\nimport \"./ContractURI.sol\";\nimport \"./Staking.sol\";\n\ncontract PioneerPassToken is ERC1155, Ownable, PioneerPassStorage, ContractURI, Stacking, PioneerPassUtils {\n    address private royaltiesTeamWallet;\n    mapping(uint256 => bool) private transfersLock;\n\n    constructor(string memory _contractURI, address _royaltyAddress){\n        _setContractURI(_contractURI);\n        royaltiesTeamWallet = _royaltyAddress;\n    }\n\n    /**\n    *   Pause control\n    */\n\n    function setTransfersLock(uint256 _passId, bool _value) external onlyOwner {\n        transfersLock[_passId] = _value;\n    }\n\n    /**\n    *   Royalties - EIP2981\n    */\n\n    function royaltyInfo(uint256 _passId, uint256 _salePrice) external view\n    returns (address receiver, uint256 royaltyAmount)\n    {\n        if (_passId == 1) {\n            return (royaltiesTeamWallet, _salePrice * 80 / 1000);\n        } else\n        {\n            return (royaltiesTeamWallet, _salePrice * 50 / 1000);\n        }\n    }\n\n    function setRoyaltyAddress(address _teamWallet) external onlyOwner {\n        royaltiesTeamWallet = _teamWallet;\n    }\n\n    /**\n    *   Burn implementation\n    */\n\n    function burn(\n        address from,\n        uint id,\n        uint256 amount\n    ) external {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _burn(from, id, amount);\n    }\n\n    /**\n    *   Token & Contract metadata\n    */\n\n    function setContractURI(string memory _contractURI) external onlyOwner {\n        _setContractURI(_contractURI);\n    }\n\n    function setUri(uint256 _tokenId, string memory _tokenURI) external onlyOwner {\n        _tokenURIs[_tokenId] = _tokenURI;\n    }\n\n    function uri(uint256 _passId)\n    external\n    view\n    override\n    returns (string memory)\n    {\n        require(passIdToCollectionPass[_passId].passId != 0, \"Invalid pass\");\n        return string(\n            abi.encodePacked(_baseURI, _tokenURIs[_passId])\n        );\n    }\n\n    /**\n    *   Withdraw\n    */\n\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    /**\n    *   Stacking & Transfers lock require these overrides\n    */\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override(ERC1155) {\n        for (uint bar = 0; bar < ids.length; bar++) {\n            require(!transfersLock[ids[bar]], \"Transfers locked\");\n        }\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override(ERC1155) {\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\n        Stacking.stakeTransfer(ids, amounts, to, from);\n    }\n}"
9     },
10     "contracts/PioneerPass/PioneerPassStorage.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\npragma solidity ^0.8.17;\n\nimport \"./openzeppelin/Ownable.sol\";\nimport \"./PioneerPassLibrary.sol\";\n\ncontract PioneerPassStorage is Ownable {\n    mapping(address => mapping(uint256 => bool)) internal presaleMinted;\n    mapping(address => mapping(uint256 => bool)) internal whitelistMinted;\n    mapping(uint256 => Library.Pass) internal passIdToCollectionPass;\n    uint256[] internal passIdIndex;\n\n    /**\n    *   Retrieve a PioneerPass details\n    */\n\n    function getPioneerPassDetails(uint256 _passId) external view returns (Library.Pass memory){\n        require(passIdToCollectionPass[_passId].passId != 0, \"Invalid Pass\");\n        return passIdToCollectionPass[_passId];\n    }\n\n    /**\n    *   Utils - Checks if the wallet address already minted\n    */\n\n    function getMinted(uint256 _passId, address _account) external view returns (bool presale, bool whitelist) {\n        return (presaleMinted[_account][_passId], whitelistMinted[_account][_passId]);\n    }\n\n    /**\n    *   Adds a new type of Pioneer Pass\n    */\n\n    function addPass(\n        uint256 _passId,\n        uint16 _maxSupply,\n        uint8 _maxMint,\n        uint24 _stakingPoints,\n        bytes32 _whitelistMerkleRoot,\n        uint256 _mintPrice,\n        uint256 _whitelistPrice,\n        uint256 _hodlersPrice\n    ) external onlyOwner {\n        require(_passId != 0, \"Invalid Id\");\n        require(passIdToCollectionPass[_passId].passId != _passId, \"Pass ID duplicate\");\n        Library.Pass memory pass = Library.Pass(\n            false,\n            false,\n            _maxSupply,\n            0,\n            _maxMint,\n            _stakingPoints,\n            _whitelistMerkleRoot,\n            _passId,\n            _mintPrice,\n            _whitelistPrice,\n            _hodlersPrice\n        );\n        passIdToCollectionPass[_passId] = pass;\n        passIdIndex.push(_passId);\n    }\n\n    /**\n    *   Utils - Modify PioneerPass types\n    */\n\n    function updatePass(\n        uint256 _passId,\n        uint8 _maxMint,\n        uint16 _maxSupply,\n        uint16 _stackingPoints,\n        bytes32 _merkleRoot,\n        uint256 _mintPrice,\n        uint256 _whitelistPrice,\n        uint256 _hodlersPrice\n    ) external onlyOwner {\n        passIdToCollectionPass[_passId].maxSupply = _maxSupply;\n        passIdToCollectionPass[_passId].stakingPoints = _stackingPoints;\n        passIdToCollectionPass[_passId].maxMint = _maxMint;\n        passIdToCollectionPass[_passId].whitelistMerkleRoot = _merkleRoot;\n        passIdToCollectionPass[_passId].mintPrice = _mintPrice;\n        passIdToCollectionPass[_passId].whitelistPrice = _whitelistPrice;\n        passIdToCollectionPass[_passId].hodlersPrice = _hodlersPrice;\n    }\n\n    function setSaleStatus(uint256 _passId, bool _presale, bool _publicSale) external onlyOwner {\n        passIdToCollectionPass[_passId].publicSale = _publicSale;\n        passIdToCollectionPass[_passId].preSale = _presale;\n    }\n}\n\n\n\n\n\n"
12     },
13     "contracts/PioneerPass/PioneerPassUtils.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\npragma solidity ^0.8.17;\n\ncontract PioneerPassUtils {\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"The caller is another contract\");\n        _;\n    }\n}"
15     },
16     "contracts/PioneerPass/PioneerPassLibrary.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\npragma solidity ^0.8.17;\n\nimport \"./openzeppelin/MerkleProof.sol\";\n\nlibrary Library {\n    struct Pass {\n        bool publicSale;\n        bool preSale;\n        uint16 maxSupply;\n        uint16 totalMinted;\n        uint8 maxMint;\n        uint24 stakingPoints;\n        bytes32 whitelistMerkleRoot;\n        uint256 passId;\n        uint256 mintPrice;\n        uint256 whitelistPrice;\n        uint256 hodlersPrice;\n    }\n\n    /**\n    *   Public sale validation\n    *   Mint price -> For anyone in the public sale\n    *   Mint price with discount -> If you hold the ark, you get starting 3% + 3% per held token-type\n    */\n\n    function ValidatePublicMint(\n        Pass memory pass,\n        uint16 _amount,\n        uint16 _hodls\n    ) public view returns (bool){\n        require(pass.maxSupply >= (_amount + pass.totalMinted), \"Exceeds available supply\");\n        require(msg.value >= ((pass.mintPrice) - ((pass.mintPrice * (_hodls * 30)) / 1000)) * _amount, \"Invalid tx amount\");\n        require(_amount <= pass.maxMint, \"Too many mints\");\n        return true;\n    }\n\n    /**\n    *   Presale validation\n    *   Hodlers price -> For holders of all preceding moments\n    *   Whitelist price -> For people in the whitelist\n    */\n\n    function ValidatePresaleMint(\n        Pass memory pass,\n        uint16 _amount,\n        bool _whitelisted,\n        bytes32[] calldata merkleProof\n    ) public view returns (bool){\n        require(pass.maxSupply >= (_amount + pass.totalMinted), \"Exceeds available supply\");\n        require(_amount <= pass.maxMint, \"Too many mints\");\n        if (_whitelisted) {\n            require(MerkleProof.verify(\n                    merkleProof, pass.whitelistMerkleRoot, keccak256(abi.encodePacked(msg.sender))\n                ), \"Invalid proof\");\n            require(msg.value == pass.whitelistPrice * _amount, \"Invalid tx amount\");\n        } else {\n            require(msg.value == pass.hodlersPrice * _amount, \"Invalid tx amount\");\n        }\n        return true;\n    }\n}"
18     },
19     "contracts/PioneerPass/openzeppelin/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "contracts/PioneerPass/Staking.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\n\npragma solidity ^0.8.17;\n\nimport \"./openzeppelin/Ownable.sol\";\nimport \"./PioneerPassLibrary.sol\";\n\ncontract Stacking is Ownable {\n\n    /**\n    *   Stores the time when the staking for a token type starts - block.timestamp\n    */\n\n    mapping(uint256 => uint256) private StackingTimer;\n\n    /**\n    *   Stores whenever the Staking timer already started - It starts once after the first mint of a pass\n    */\n\n    mapping(uint256 => bool) private BoOoOmBaby;\n\n    /**\n    *   Stores a Timestamp per owned token type in an address\n    */\n\n    mapping(address => mapping(uint256 => uint256[])) private lastBoughtTimestamp;\n\n    /**\n    *   Staking Point x (Days holding / Total days from the presale)\n    *\n    *   NOTE: SELLING YOUR TOKENS ERASE YOUR HOLDING TIME >:)\n    *\n    *   MORE NOTES: SELLING YOUR TOKENS WILL ERASE YOUR HOLDING TIME STARTING FROM THE\n    *   LATEST BOUGHT TOKEN ;)\n    */\n\n    function stakeTransfer(uint256[] memory _passId, uint256[] memory _amount, address _to, address _from) internal {\n        if (_from != address(0)) {\n            for (uint foo = 0; foo < _passId.length; foo++) {\n                for (uint bar = 0; bar < _amount[foo]; bar++) {\n                    lastBoughtTimestamp[_to][_passId[foo]].push(block.timestamp);\n                    lastBoughtTimestamp[_from][_passId[foo]].pop();\n                }\n            }\n        } else if (_to == address(0)) {\n                for (uint bar = 0; bar < _amount[0]; bar++) {\n                    lastBoughtTimestamp[_from][_passId[0]].pop();\n                }\n        } else {\n            if (BoOoOmBaby[_passId[0]] != true) {\n                BoOoOmBaby[_passId[0]] = true;\n                StackingTimer[_passId[0]] = block.timestamp;\n            }\n            for (uint i = 0; i < _amount[0]; i++) {\n                lastBoughtTimestamp[_to][_passId[0]].push(block.timestamp);\n            }\n        }\n    }\n\n    /**\n    *   Get Stacking info\n    */\n\n    function getStakingTimer(uint256 _passId) external view returns (uint256){\n        return StackingTimer[_passId];\n    }\n\n    function getStakes(uint256 _passId, address _user) external view returns (uint256[] memory){\n        return lastBoughtTimestamp[_user][_passId];\n    }\n\n}"
24     },
25     "contracts/PioneerPass/ContractURI.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// Creator: @casareafer at 1TM.io\npragma solidity ^0.8.17;\n\ncontract ContractURI {\n    string internal contractURI_ = \"\";\n\n    function _setContractURI(string memory _contractURI) internal {\n        contractURI_ = _contractURI;\n    }\n\n    function contractURI() external view returns (string memory) {\n        return contractURI_;\n    }\n}"
27     },
28     "contracts/PioneerPass/openzeppelin/ERC1155.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./ERC1155URIStorage.sol\";\nimport \"./interfaces/IERC1155Receiver.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\nimport \"./ERC165.sol\";\n\nabstract contract ERC1155 is Context, ERC165, ERC1155URIStorage {\n    using Address for address;\n\n    /**\n    *   Mapping from token ID to account balances\n    */\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    /**\n    *   Mapping from account to operator approvals\n    */\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n    *   Uri override\n    */\n\n    function uri(uint256 id) external view virtual override returns (string memory);\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *  Passing the 0 address will return the amount of burnt tokens\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n    unchecked {\n        _balances[id][from] = fromBalance - amount;\n    }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n    unchecked {\n        _balances[id][from] = fromBalance - amount;\n    }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
30     },
31     "contracts/PioneerPass/openzeppelin/MerkleProof.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
33     },
34     "contracts/PioneerPass/openzeppelin/Context.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
36     },
37     "contracts/PioneerPass/openzeppelin/ERC1155URIStorage.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts\n\npragma solidity ^0.8.17;\n\nimport \"./ERC1155.sol\";\n\ncontract ERC1155URIStorage {\n    string internal _baseURI = \"ipfs:/\";\n    mapping(uint256 => string) internal _tokenURIs;\n}"
39     },
40     "contracts/PioneerPass/openzeppelin/Address.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
42     },
43     "contracts/PioneerPass/openzeppelin/ERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./interfaces/IERC165.sol\";\nimport \"./interfaces/IERC1155.sol\";\nimport \"./interfaces/IERC1155MetadataURI.sol\";\n\n\nabstract contract ERC165 is IERC165, IERC1155, IERC1155MetadataURI {\n    mapping(bytes4 => bool) private interfaces;\n    bytes4 private constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    constructor () {\n        /**\n        *   I guess I will just register everything here, to keep it simple\n        */\n        registerInterface(type(IERC165).interfaceId);\n        registerInterface(type(IERC1155).interfaceId);\n        registerInterface(type(IERC1155MetadataURI).interfaceId);\n        registerInterface(INTERFACE_ID_ERC2981);\n    }\n\n    function registerInterface(bytes4 interfaceId) private {\n        interfaces[interfaceId] = true;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return interfaces[interfaceId];\n    }\n}\n\n"
45     },
46     "contracts/PioneerPass/openzeppelin/interfaces/IERC1155Receiver.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
48     },
49     "contracts/PioneerPass/openzeppelin/interfaces/IERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
51     },
52     "contracts/PioneerPass/openzeppelin/interfaces/IERC1155.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
54     },
55     "contracts/PioneerPass/openzeppelin/interfaces/IERC1155MetadataURI.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
57     }
58   },
59   "settings": {
60     "optimizer": {
61       "enabled": false,
62       "runs": 200
63     },
64     "outputSelection": {
65       "*": {
66         "*": [
67           "evm.bytecode",
68           "evm.deployedBytecode",
69           "devdoc",
70           "userdoc",
71           "metadata",
72           "abi"
73         ]
74       }
75     },
76     "metadata": {
77       "useLiteralContent": true
78     },
79     "libraries": {
80       "contracts/PioneerPass/PioneerPassLibrary.sol": {
81         "Library": "0x53707a16bcd126734f86053903bc00512efcef47"
82       }
83     }
84   }
85 }}