1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Minter.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/**************************************\n\n    security-contact:\n    - marcin@angelblock.io\n    - piotr@angelblock.io\n    - mikolaj@angelblock.io\n\n**************************************/\n\n// OpenZeppelin\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\n// Local\nimport { IAbNFT } from \"./interfaces/IAbNFT.sol\";\nimport { Configurable } from \"./utils/Configurable.sol\";\n\n/**************************************\n\n    Minter for AB NFT\n\n **************************************/\n\ncontract Minter is Ownable, Configurable {\n\n    // using\n    using Address for address payable;\n\n    // enum\n    enum RevealAction {\n        FOLLOW, // pass unsold nfts to next batch\n        CLAIM // mint not sold NFTs in batch to owner\n    }\n    enum BatchState {\n        BLIND,\n        REVEALED\n    }\n\n    // constants\n    uint256 public constant TOTAL_SUPPLY_LIMIT = 6900;\n    uint256 public constant INITIAL_MINT = 50;\n    uint256 public constant MIN_BATCH_PRICE = 0.001 ether;\n\n    // structs\n    struct MintingBatch {\n        uint256 mintingDate;\n        uint256 mintingCap;\n        uint256 mintingPrice;\n        RevealAction actionWhenReveal;\n        BatchState state;\n    }\n\n    // contracts\n    IAbNFT public immutable nftContract;\n    address public vesting;\n\n    // storage\n    uint256 public mintLimitPerWallet;\n    uint256 public immutable totalBatches;\n    MintingBatch[] public mintingBatches;\n    mapping (address => uint256) public minted;\n\n    // errors\n    error MintingLimitReached(uint256 alreadyMinted, uint256 toMint, uint256 mintLimit);\n    error MintingNotStarted(uint256 mintingBatch);\n    error MintingAboveSupply(uint256 nftSupply, uint256 toMint, uint256 supplyLimit);\n    error BatchLimitReached(uint256 totalBatches);\n    error NotEnoughNFTAvailableToMint(uint256 toMint, uint256 available);\n    error AlreadyInitialised();\n    error InvalidPayment(address owner, uint256 value, uint256 numberToMint);\n    error AlreadyRevealed(uint256 batchNo);\n    error NotYetRevealed();\n    error NothingToWithdraw();\n    error MintingDateNotInFuture(uint256 mintingDate, uint256 timeNow);\n    error InvalidMintingCap();\n    error BatchNotStarted(uint256 batchNo);\n    error InvalidPriceForBatch(uint256 price);\n\n    // events\n    event NewBatchAdded(MintingBatch batch);\n    event RevealActionPerformed(uint256 batchNo, RevealAction action);\n    event Withdrawal(address owner, uint256 amount);\n\n    /**************************************\n    \n        Constructor\n\n     **************************************/\n\n    constructor(\n        address _abNFT,\n        address _vesting,\n        uint256 _mintLimitPerWallet,\n        uint256 _totalBatches,\n        MintingBatch memory _firstBatch\n    )\n    Ownable() {\n        \n        // nft contract\n        nftContract = IAbNFT(_abNFT);\n\n        // vesting\n        vesting = _vesting;\n\n        // mint limit per wallet\n        mintLimitPerWallet = _mintLimitPerWallet;\n\n        // batch size\n        totalBatches = _totalBatches;\n\n        // batch\n        mintingBatches.push(_firstBatch);\n\n        // event\n        emit Initialised(abi.encode(\n            _abNFT,\n            _vesting,\n            _mintLimitPerWallet,\n            _totalBatches,\n            _firstBatch\n        ));\n\n    }\n\n    /**************************************\n\n        Set as configured\n\n     **************************************/\n\n    function setConfigured() public virtual override\n    onlyInState(State.UNCONFIGURED)\n    onlyOwner {\n\n        // tx.members\n        address owner_ = msg.sender;\n\n        // batch mint\n        nftContract.mint(_prepMint(INITIAL_MINT), owner_);\n\n        // super\n        super.setConfigured();\n\n        // event\n        emit Configured(abi.encode(\n            msg.sender,\n            INITIAL_MINT\n        ));\n\n    }\n\n    /**************************************\n\n        Add new batch\n\n     **************************************/\n\n    function addNewBatch(MintingBatch calldata _batch) external\n    onlyOwner {\n\n        // tx.members\n        uint256 now_ = block.timestamp;\n\n        // check if under limit\n        if (mintingBatches.length + 1 > totalBatches) {\n            revert BatchLimitReached(totalBatches);\n        }\n\n        // check if date in future\n        if (_batch.mintingDate <= now_) {\n            revert MintingDateNotInFuture(_batch.mintingDate, now_);\n        }\n\n        // check minting size\n        if (_batch.mintingCap == 0) {\n            revert InvalidMintingCap();\n        }\n\n        // check minting price\n        if (_batch.mintingPrice < MIN_BATCH_PRICE) {\n            revert InvalidPriceForBatch(_batch.mintingPrice);\n        }\n\n        // storage\n        mintingBatches.push(_batch);\n\n        // event\n        emit NewBatchAdded(_batch);\n\n    }\n\n    /**************************************\n\n        Get batch count\n\n     **************************************/\n\n    function getActiveBatchCount() external view\n    returns (uint256) {\n\n        // return\n        return mintingBatches.length;\n\n    }\n\n    /**************************************\n\n        Get latest batch\n\n     **************************************/\n\n    function getLatestBatch() public view\n    returns (int256) {\n\n        // tx.members\n        uint256 now_ = block.timestamp;\n\n        // loop through batches from end\n        for (uint256 i = mintingBatches.length; i > 0; i--) {\n\n            // return if already started\n            if (now_ >= mintingBatches[i - 1].mintingDate) return int256(i - 1);\n\n        }\n\n        // no active batch yet\n        return -1;\n\n    }\n\n    /**************************************\n\n        Get latest active batch\n\n     **************************************/\n\n    function getLatestActiveBatch() public view\n    returns (uint256) {\n\n        // get latest batch\n        int256 batchNo_ = getLatestBatch();\n\n        // check latest batch number\n        if (batchNo_ < 0) revert MintingNotStarted(0);\n\n        // return\n        return uint256(batchNo_);\n\n    }\n\n    /**************************************\n    \n        Get time left to next batch\n\n     **************************************/\n\n    function getTimeLeft() external view\n    returns (uint256) {\n\n        // tx.members\n        uint256 now_ = block.timestamp;\n\n        // length\n        uint256 length_ = mintingBatches.length;\n\n        // loop through batches\n        for (uint256 i = 0; i < length_; i++) {\n\n            // batch from start\n            MintingBatch memory batch_ = mintingBatches[i];\n            if (batch_.mintingDate > now_) return batch_.mintingDate - now_;\n\n        }\n\n        // return\n        return 0;\n\n    }\n\n    /**************************************\n\n        Get tokens left in current batch\n\n     **************************************/\n\n    function getTokensLeftInLatestBatch() public view\n    returns (uint256) {\n\n        // batch number\n        int256 batchNo_ = getLatestBatch();\n\n        // check batch number\n        if (batchNo_ >= 0) {\n\n            return getTokensLeftInBatch(uint256(batchNo_));\n\n        }\n\n        // return\n        return 0;\n\n    }\n\n    /**************************************\n\n        Get tokens left in specified batch\n\n     **************************************/\n\n    function getTokensLeftInBatch(uint256 _batchNo) public view\n    returns (uint256) {\n\n        // batch\n        MintingBatch memory batch_ = mintingBatches[_batchNo];\n\n        // supply\n        uint256 currentSupply_ = nftContract.totalSupply();\n\n        // return tokens left\n        if (currentSupply_ >= batch_.mintingCap) return 0;\n        else return batch_.mintingCap - currentSupply_;\n\n    }\n\n    /**************************************\n\n        Get tokens left to mint\n\n     **************************************/\n\n    function getTokensLeft() external view\n    returns (uint256) {\n\n        // return\n        return TOTAL_SUPPLY_LIMIT - nftContract.totalSupply();\n\n    }\n\n    /**************************************\n    \n        Mint new NFT\n\n     **************************************/\n\n    function mint(uint256 _numberToMint) external payable\n    onlyInState(State.CONFIGURED) {\n\n        // tx.members\n        address owner_ = msg.sender;\n\n        // assert\n        _assertMint(_numberToMint);\n\n        // storage\n        minted[owner_] += _numberToMint;\n\n        // mint\n        nftContract.mint(_prepMint(_numberToMint), owner_);\n\n    }\n\n    /**************************************\n\n        Internal: assert for public mint\n\n     **************************************/\n\n    function _assertMint(uint256 _numberToMint) internal view {\n\n        // tx.members\n        address owner_ = msg.sender;\n        uint256 value_ = msg.value;\n\n        // get latest batch\n        uint256 batchNo_ = getLatestActiveBatch();\n        \n        // batch\n        MintingBatch memory batch_ = mintingBatches[batchNo_];\n\n        // check if batch not revealed\n        if (batch_.state == BatchState.REVEALED) {\n            revert AlreadyRevealed(batchNo_);\n        }\n\n        // check if tokens can be minted\n        uint256 availableToMint_ = getTokensLeftInBatch(batchNo_);\n        if (_numberToMint > availableToMint_) {\n            revert NotEnoughNFTAvailableToMint(\n                _numberToMint,\n                availableToMint_\n            );\n        }\n\n        // check funds\n        if (value_ != _numberToMint * batch_.mintingPrice) {\n            revert InvalidPayment(\n                owner_,\n                value_,\n                _numberToMint\n            );\n        }\n\n        // check nft supply\n        uint256 nftSupply_ = nftContract.totalSupply();\n        if (nftSupply_ + _numberToMint > TOTAL_SUPPLY_LIMIT) {\n            revert MintingAboveSupply(\n                nftSupply_,\n                _numberToMint,\n                TOTAL_SUPPLY_LIMIT\n            );\n        }\n\n        // check limit for minting\n        if (minted[owner_] + _numberToMint > mintLimitPerWallet) {\n            revert MintingLimitReached(\n                minted[owner_],\n                _numberToMint,\n                mintLimitPerWallet\n            );\n        }\n\n    }\n\n    /**************************************\n\n        Internal: prep mint\n\n     **************************************/\n\n    function _prepMint(uint256 _numberToMint) internal view returns (uint256[] memory) {\n\n        // alloc\n        uint256[] memory toBeMinted_ = new uint256[](_numberToMint);\n\n        // supply\n        uint256 totalSupply_ = nftContract.totalSupply();\n\n        // populate\n        for (uint256 i = 0; i < _numberToMint; i++) {\n            toBeMinted_[i] = totalSupply_ + i;\n        }\n\n        // return\n        return toBeMinted_;\n\n    }\n\n    /**************************************\n\n        Reveal\n\n     **************************************/\n\n    function reveal(\n        uint256 _batchNo,\n        string memory _revealedURI\n    ) external\n    onlyInState(State.CONFIGURED)\n    onlyOwner {\n\n        // get latest batch\n        uint256 batchNo_ = getLatestActiveBatch();\n\n        // check if batch started\n        if (batchNo_ < _batchNo) revert BatchNotStarted(_batchNo);\n\n        // batch\n        MintingBatch storage batch_ = mintingBatches[_batchNo];\n\n        // check if not revealed\n        if (batch_.state == BatchState.REVEALED) {\n            revert AlreadyRevealed(_batchNo);\n        }\n\n        // claim\n        uint256 toVest_ = 0;\n\n        // check if there are tokens in batch\n        uint256 tokensLeft_ = getTokensLeftInBatch(_batchNo);\n\n        // check if there are remaining NFTs\n        if (tokensLeft_ > 0) {\n\n            // decrease available tokens for mint\n            batch_.mintingCap -= tokensLeft_;\n\n            // check action on reveal\n            if (batch_.actionWhenReveal == RevealAction.CLAIM) {\n\n                // move tokens to vesting\n                toVest_ += tokensLeft_;\n\n            }\n\n        }\n\n        // storage\n        batch_.state = BatchState.REVEALED;\n\n        // fallback to total supply if latest batch\n        uint256 cap_ = batch_.mintingCap;\n        if (_batchNo == totalBatches - 1) {\n            cap_ = TOTAL_SUPPLY_LIMIT;\n        }\n\n        // reveal\n        nftContract.reveal(\n            cap_,\n            _revealedURI,\n            toVest_\n        );\n\n        // event\n        emit RevealActionPerformed(\n            batchNo_,\n            batch_.actionWhenReveal\n        );\n\n    }\n\n    /**************************************\n\n        Vested claim NFT\n\n     **************************************/\n\n    function vestedClaim(uint256 _numberToMint) external\n    onlyInState(State.CONFIGURED)\n    onlyOwner {\n\n        // claim\n        nftContract.vestedClaim(_prepMint(_numberToMint), vesting);\n\n    }\n\n    /**************************************\n\n        Withdraw\n\n     **************************************/\n\n    function withdraw() external\n    onlyInState(State.CONFIGURED)\n    onlyOwner {\n\n        // tx.members\n        address sender_ = msg.sender;\n        uint256 balance_ = address(this).balance;\n\n        // check balance\n        if (balance_ == 0) {\n            revert NothingToWithdraw();\n        }\n\n        // withdraw\n        payable(sender_).sendValue(balance_);\n\n        // event\n        emit Withdrawal(sender_, balance_);\n\n    }\n\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Address.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
12     },
13     "contracts/interfaces/IAbNFT.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/**************************************\n\n    security-contact:\n    - marcin@angelblock.io\n    - piotr@angelblock.io\n    - mikolaj@angelblock.io\n\n**************************************/\n\n// OpenZeppelin\nimport { IERC721Enumerable } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\n/**************************************\n\n    Minter interface\n\n **************************************/\n\ninterface IAbNFT is IERC721Enumerable {\n\n    // external functions\n    function mint(uint256[] calldata _nftIds, address _owner) external;\n    function reveal(uint256 _range, string memory _revealedURI, uint256 _toClaim) external;\n    function vestedClaim(uint256[] calldata _nftIds, address _owner) external;\n\n}\n"
15     },
16     "contracts/utils/Configurable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/**************************************\n\n    security-contact:\n    - marcin@angelblock.io\n    - piotr@angelblock.io\n    - mikolaj@angelblock.io\n\n**************************************/\n\n/**************************************\n\n    Configurable\n\n    ------------\n\n    Base contract that should be inherited\n    and setConfigured function should be overridden\n\n **************************************/\n\nabstract contract Configurable {\n\n    // enum\n    enum State {\n        UNCONFIGURED,\n        CONFIGURED\n    }\n\n    // storage\n    State public state; // default -> State.UNCONFIGURED;\n\n    // events\n    event Initialised(bytes);\n    event Configured(bytes);\n\n    // errors\n    error InvalidState(State current, State expected);\n\n    // modifier\n    modifier onlyInState(State _state) {\n\n        // check state\n        if (state != _state) revert InvalidState(state, _state);\n        _;\n\n    }\n\n    /**************************************\n\n        Configuration\n\n        -------------\n\n        Should be overridden with\n        proper access control\n\n     **************************************/\n\n    function setConfigured() public virtual\n    onlyInState(State.UNCONFIGURED) {\n\n        // set as configured\n        state = State.CONFIGURED;\n\n    }\n\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
27     },
28     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
30     }
31   },
32   "settings": {
33     "outputSelection": {
34       "*": {
35         "*": [
36           "evm.bytecode",
37           "evm.deployedBytecode",
38           "devdoc",
39           "userdoc",
40           "metadata",
41           "abi"
42         ]
43       }
44     },
45     "optimizer": {
46       "enabled": false,
47       "runs": 200
48     },
49     "libraries": {}
50   }
51 }}