1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/limit-break/adventures/IAdventure.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventure\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventure` contracts must conform to.\n * @dev All contracts that implement the adventure/quest system and interact with an {IAdventurous} token are required to implement this interface.\n */\ninterface IAdventure is IERC165 {\n\n    /**\n     * @dev Returns whether or not quests on this adventure lock tokens.\n     * Developers of adventure contract should ensure that this is immutable \n     * after deployment of the adventure contract.  Failure to do so\n     * can lead to error that deadlock token transfers.\n     */\n    function questsLockTokens() external view returns (bool);\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestEntered(address adventurer, uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully exited.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestExited(address adventurer, uint256 tokenId, uint256 questId, uint256 questStartTimestamp) external;\n}\n"
6     },
7     "lib/limit-break/adventures/IAdventurous.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Quest.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventurous\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventurous` token contracts must conform to in order to support adventures and quests.\n * @dev All contracts that support adventures and quests are required to implement this interface.\n */\ninterface IAdventurous is IERC165 {\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets, for special in-game adventures.\n     */ \n    event AdventureApprovalForAll(address indexed tokenOwner, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when a token enters or exits a quest\n     */\n    event QuestUpdated(uint256 indexed tokenId, address indexed tokenOwner, address indexed adventure, uint256 questId, bool active, bool booted);\n\n    /**\n     * @notice Transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Safe transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureSafeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Burns a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureBurn(uint256 tokenId) external;\n\n    /**\n     * @notice Enters a player's token into a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function enterQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Exits a player's token from a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function exitQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Returns the number of quests a token is actively participating in for a specified adventure\n     */\n    function getQuestCount(uint256 tokenId, address adventure) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of time a token has been participating in the specified quest\n     */\n    function getTimeOnQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a token is currently participating in the specified quest as well as the time it was started and the quest index\n     */\n    function isParticipatingInQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (bool participatingInQuest, uint256 startTimestamp, uint256 index);\n\n    /**\n     * @notice Returns a list of all active quests for the specified token id and adventure\n     */\n    function getActiveQuests(uint256 tokenId, address adventure) external view returns (Quest[] memory activeQuests);\n}\n"
9     },
10     "lib/limit-break/adventures/IAdventurousERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IAdventurous.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IAdventurousERC721\n * @author Limit Break, Inc.\n * @notice Combines all {IAdventurous} and all {IERC721} functionality into a single, unified interface.\n * @dev This interface may be used as a convenience to interact with tokens that support both interface standards.\n */\ninterface IAdventurousERC721 is IERC721, IAdventurous {\n\n}"
12     },
13     "lib/limit-break/adventures/Quest.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title Quest\n * @author Limit Break, Inc.\n * @notice Quest data structure for {IAdventurous} contracts.\n */\nstruct Quest {\n    bool isActive;\n    uint32 questId;\n    uint64 startTimestamp;\n    uint32 arrayIndex;\n}"
15     },
16     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
21     },
22     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
30     },
31     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
33     },
34     "src/IAdventureApproval.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IAdventureApproval {\n    function setAdventuresApprovedForAll(address operator, bool approved) external;\n    function areAdventuresApprovedForAll(address owner, address operator) external view returns (bool);\n    function isAdventureWhitelisted(address account) external view returns (bool);\n}\n"
36     },
37     "src/IMintableVillain.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/**\n * @dev Required interface of mintable villain contracts.\n */\ninterface IMintableVillain {\n\n    /**\n     * @notice Mints multiple villains unmasked with the specified masked villain token ids\n     */\n    function unmaskVillainsBatch(address to, uint256[] calldata villainTokenIds, uint256[] calldata potionTokenIds) external;\n}\n"
39     },
40     "src/IMinterWhitelist.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/**\n * @dev Required interface to determine if a minter is whitelisted\n */\ninterface IMinterWhitelist {\n    /**\n     * @notice Determines if an address is a whitelisted minter\n     */\n    function whitelistedMinters(address account) external view returns (bool);\n}\n"
42     },
43     "src/VillainCustodian.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IAdventureApproval.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title VillainCustodian\n * @author Limit Break, Inc.\n * @notice Holds masked villain and potion tokens that are currently on a villain unmasking adventure.\n */\ncontract VillainCustodian {\n\n    /// @dev Specify the villain unmasking adventure, masked villain, super villain potion and villain potion contract addresses during creation\n    constructor(address villainUnmaskingAdventure, address maskedVillainAddress, address superVillainPotionAddress, address villainPotionAddress) {\n        IERC721(maskedVillainAddress).setApprovalForAll(villainUnmaskingAdventure, true);\n        IERC721(superVillainPotionAddress).setApprovalForAll(villainUnmaskingAdventure, true);\n        IERC721(villainPotionAddress).setApprovalForAll(villainUnmaskingAdventure, true);\n        IAdventureApproval(maskedVillainAddress).setAdventuresApprovedForAll(villainUnmaskingAdventure, true);\n        IAdventureApproval(superVillainPotionAddress).setAdventuresApprovedForAll(villainUnmaskingAdventure, true);\n        IAdventureApproval(villainPotionAddress).setAdventuresApprovedForAll(villainUnmaskingAdventure, true);\n    }\n}\n"
45     },
46     "src/VillainUnmaskingAdventure.sol": {
47       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"./IMintableVillain.sol\";\nimport \"./IMinterWhitelist.sol\";\nimport \"./VillainCustodian.sol\";\nimport \"@limit-break/adventures/IAdventure.sol\";\nimport \"@limit-break/adventures/IAdventurousERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nerror CallbackNotImplemented();\nerror CallerDidNotCreateClaimId();\nerror CallerNotOwnerOfSuperVillainPotion();\nerror CallerNotOwnerOfMaskedVillain();\nerror CallerNotOwnerOfVillainPotion();\nerror CannotIncludeMoreThanOnePotion();\nerror CannotSpecifyZeroAddressForSuperVillainContract();\nerror CannotSpecifyZeroAddressForVillainContract();\nerror CannotSpecifyZeroAddressForSuperVillainPotionContract();\nerror CannotSpecifyZeroAddressForMaskedVillainContract();\nerror CannotSpecifyZeroAddressForVillainPotionContract();\nerror CompleteQuestToUnmaskVillain();\nerror InputArrayLengthMismatch();\nerror MustIncludeMaskedVillain();\nerror NewUnmaskingDurationMustBeLessThanCurrentDuration();\nerror NoUnmaskingQuestFoundForSpecifiedClaimId();\nerror PotionGreaterThanAllocatedSpace();\nerror QuantityMustBeGreaterThanZero();\nerror QuestCompleteVillainMustBeUnmasked();\n\n/**\n * @title VillainUnmaskingAdventure\n * @author Limit Break, Inc.\n * @notice An adventure that unmasks villains based on the provided potion\n */\ncontract VillainUnmaskingAdventure is Ownable, Pausable, ERC165, IAdventure {\n\n    struct UnmaskingQuest {\n        uint64 startTimestamp;\n        uint16 villainTokenId;\n        uint16 potionBitmap;\n        address adventurer;\n    }\n\n    /// @dev An unchangeable reference to the villain potion contract optionally used in an unmasking quest\n    IAdventurousERC721 immutable public villainPotionContract;\n\n    /// @dev An unchangeable reference to the super villain potion contract optionally used in an unmasking quest\n    IAdventurousERC721 immutable public superVillainPotionContract;\n\n    /// @dev An unchangeable reference to the masked villain contract to be unmasked\n    IAdventurousERC721 immutable public maskedVillainContract;\n\n    /// @dev An unchangeable reference to the villain contract unmasked at the end of a quest\n    IMintableVillain immutable public villainContract;\n\n    /// @dev An unchangeable reference to the super villain contract unmasked at the end of a quest\n    IMintableVillain immutable public superVillainContract;\n\n    /// @dev An unchangeable reference to a custodial holding contract for masked villains and potions\n    VillainCustodian immutable public custodian;\n\n    /// @dev A counter for claim ids\n    uint256 public lastClaimId;\n\n    /// @dev The amount of time the user must remain in a quest to complete it and receive their unmasked villain\n    uint256 public unmaskingDuration = 7 days;\n    \n    /// @dev Map claim id to unmasking quest details\n    mapping (uint256 => UnmaskingQuest) public unmaskingQuestLookup;\n\n    /// @dev Designation of uint(1) to be used for bitmap functions\n    uint constant private ONE = uint(1);\n\n    /// @dev Maximum value stored in 15 bits.  Used to prevent falsely setting the 16th bit on the potionBitmap.\n    uint256 constant private MAX_15_BIT_VALUE = 32767;\n\n    /// @dev Emitted when an adventurer cancels a villain unmasking\n    event VillainMasked(address indexed adventurer, uint256 indexed claimId, bool isSuperVillain);\n\n    /// @dev Emitted when the unmaskingDuration is updated.\n    event UnmaskingDurationUpdated(uint256 oldUnmaskingDuration, uint256 newUnmaskingDuration);\n\n    /// @dev Emitted when an adventurer starts unmasking a villain\n    event UnmaskingVillain(address indexed adventurer, uint256 indexed claimId, uint256 potionTokenId, uint256 villainTokenId, bool isSuperVillain);\n\n    /// @dev Emitted when an adventurer unmasks their villain\n    event UnmaskedVillain(address indexed adventurer, uint256 indexed claimId, bool isSuperVillain);\n\n    constructor(address villainPotionAddress, address superVillainPotionAddress, address maskedVillainAddress, address villainAddress, address superVillainAddress) {\n        if(villainPotionAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForVillainPotionContract();\n        }\n\n        if(superVillainPotionAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForSuperVillainPotionContract();\n        }\n\n        if(maskedVillainAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForMaskedVillainContract();\n        }\n\n        if(villainAddress == address(0)) { \n            revert CannotSpecifyZeroAddressForVillainContract();\n        }\n\n        if(superVillainAddress == address(0)) {\n            revert CannotSpecifyZeroAddressForSuperVillainContract();\n        }\n\n        villainPotionContract = IAdventurousERC721(villainPotionAddress);\n        superVillainPotionContract = IAdventurousERC721(superVillainPotionAddress);\n        maskedVillainContract = IAdventurousERC721(maskedVillainAddress);\n        \n        villainContract = IMintableVillain(villainAddress);\n        superVillainContract = IMintableVillain(superVillainAddress);\n\n        custodian = new VillainCustodian(address(this), maskedVillainAddress, superVillainPotionAddress, villainPotionAddress);\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n    /// Throws in all cases quest entry for this adventure is fulfilled via adventureTransferFrom instead of enterQuest, and this callback should not be triggered.\n    function onQuestEntered(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/) external override pure {\n        revert CallbackNotImplemented();\n    }\n\n    /// @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n    /// Throws in all cases quest exit for this adventure is fulfilled via transferFrom or adventureBurn instead of exitQuest, and this callback should not be triggered.\n    function onQuestExited(address /*adventurer*/, uint256 /*tokenId*/, uint256 /*questId*/, uint256 /*questStartTimestamp*/) external override pure {\n        revert CallbackNotImplemented();\n    }\n\n    /// @dev Returns false - this quest uses hard staking\n    function questsLockTokens() external override pure returns (bool) {\n        return false;\n    }\n\n    /// @dev Pauses and blocks adventurers from starting new villain unmasking quests\n    /// Throws if the adventure is already paused\n    function pauseNewQuestEntries() external onlyOwner {\n        _pause();\n    }\n\n    /// @dev Unpauses and allows adventurers to start new villain unmasking quests\n    /// Throws if the adventure is already unpaused\n    function unpauseNewQuestEntries() external onlyOwner {\n        _unpause();\n    }\n\n    /// @dev Sets the unmasking duration for the quest\n    /// Throws if the unmasking duration is greater than current unmasking duration\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The unmasking duration is updated to the provided new unmasking duration.\n    function setUnmaskingDuration(uint256 unmaskingDuration_) external onlyOwner {\n        uint256 currentUnmaskingDuration = unmaskingDuration;\n        if(unmaskingDuration_ >= currentUnmaskingDuration) {\n            revert NewUnmaskingDurationMustBeLessThanCurrentDuration();\n        }\n        emit UnmaskingDurationUpdated(currentUnmaskingDuration, unmaskingDuration_);\n        unmaskingDuration = unmaskingDuration_;\n    }\n\n    /// @notice Returns the mask to multiple villains referenced by the specifed claim ids before the required unmasking duration has been met.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the claim id arrays.\n    /// Throws when no unmasking quest is found for one or more of the specified claim ids (start timestamp is zero).\n    /// Throws when the caller did not create one or more of the specified claim id (adventurer not the same as caller).\n    /// Throws when the one or more of the villains are ready to redeem (required unmasking duration has been met or exceeded).\n    ///  - This is invalid if any of the potions or masked villain contracts are removed from the adventure whitelist or the adventure is removed\n    ///    as a whitelisted minter for the villain or super villain contracts.\n    ///    In these cases, the user can remask the villain to recover their potion and masked villain since redemption is not possible.\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The masked villains that were in use to unmask have been returned to the adventurer that started the quest.\n    /// The potions that were in use to unmask the villains have been returned to the adventurer that started the quest.\n    /// The unmasking quest lookup entries for the specified claim ids have been removed.\n    /// `quantity` VillainMasked events have been emitted, where `quantity` is the length of the claim id array.\n    function maskVillainsBatch(uint256[] calldata claimIds) external {\n        if(claimIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        for(uint256 i = 0; i < claimIds.length;) {\n            _maskVillain(claimIds[i]);\n            \n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Enters the villain unmasking quests with a batch of specified masked villains and optional potions.\n    /// Villain Potion token ids may be 0, in which case it means no villain potion will be used to enhance the unmasking.\n    /// Super Villain token ids may be 0, in which case it means no super villain potion will be used to enhance the unmasking.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the token id arrays.\n    /// Throws when token id array lengths don't match.\n    /// Throws when the caller does not own a specified masked villain token.\n    /// Throws when the caller does not own a specified villain potion token.\n    /// Throws when the caller does not own a specified super villain potion token.\n    /// Throws when both a villain potion and super villain potion token are specified (non 0 values for both ids at the same array index).\n    /// Throws when adventureTransferFrom throws, typically for one of the following reasons:\n    ///   - This adventure contract is not in the adventure whitelist for included contracts.\n    ///   - The caller has not set adventure approval for this contract.\n    /// Throws when the contract is paused\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The specified masked villains are now owned by the custodian.\n    /// The specified potions are now owned by the custodian.\n    /// The value of the lastClaimId counter has increased by `quantity`, where `quantity` is the length of the token id arrays.\n    /// The unmasking quest lookup for the newly created claim ids contains the following information:\n    ///   - The block timestamp of this transaction (the time at which unmasking the villain began).\n    ///   - The specified masked villain token id.\n    ///   - A bitmap containing the potion token ID and an indicator in the 16th bit, `1` if it is a super villain, `0` otherwise.\n    ///   - The address of the adventurer that is permitted to retrieve their masked villain and potion or unmask their villain.\n    /// `quantity` UnmaskingVillain events have been emitted, where `quantity` is the length of the token id arrays.\n    function startUnmaskingVillainsBatch(uint256[] calldata maskedVillainTokenIds, uint256[] calldata villainPotionTokenIds, uint256[] calldata superVillainPotionTokenIds) external whenNotPaused {\n        if(maskedVillainTokenIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        if(maskedVillainTokenIds.length != villainPotionTokenIds.length || villainPotionTokenIds.length != superVillainPotionTokenIds.length) {\n            revert InputArrayLengthMismatch();\n        }\n\n        uint256 claimId;\n        unchecked {\n            claimId = lastClaimId;\n            lastClaimId = claimId + maskedVillainTokenIds.length;\n            ++claimId;\n        }\n\n        for(uint256 i = 0; i < maskedVillainTokenIds.length;) {\n            _startUnmaskingVillain(claimId + i, maskedVillainTokenIds[i], villainPotionTokenIds[i], superVillainPotionTokenIds[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Unmasks multiple villains referenced by the specifed claim ids after the required unmasking duration has been met.\n    ///\n    /// Throws when `quantity` is zero, where `quantity` is the length of the claim id arrays.\n    /// Throws when no unmasking quest is found for one or more of the specified claim ids (start timestamp is zero).\n    /// Throws when the caller did not create one or more of the specified claim ids (adventurer not the same as caller).\n    /// Throws when one or more of the villains is not ready to unmask (required unmasking duration has not been met).\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The villain or super villain potion that was in use to unmask the villain has been burnt.\n    /// The masked villain that was in use to unmask has been burnt.\n    /// The unmasking quest lookup entry for the specified claim id has been removed.\n    /// An unmasked villain or super villain has been minted to the adventurer who completed the quest.\n    /// `quantity` UnmaskedVillain events have been emitted, where `quantity` is the length of the claim id arrays.\n    function unmaskVillainsBatch(uint256[] calldata claimIds) external {\n        if(claimIds.length == 0) {\n            revert QuantityMustBeGreaterThanZero();\n        }\n\n        uint256[] memory tempVillainTokenIds = new uint256[](claimIds.length);\n        uint256[] memory tempSuperVillainTokenIds = new uint256[](claimIds.length);\n        uint256[] memory potionTokenIds = new uint256[](claimIds.length);\n\n        uint256 villainCounter = 0;\n        uint256 superVillainCounter = 0;\n\n        for(uint256 i = 0; i < claimIds.length;) {\n            (uint256 villainTokenId, uint256 potionTokenId, bool isSuperVillain) = _unmaskVillain(claimIds[i]);\n            unchecked {\n                if (isSuperVillain) {\n                    tempSuperVillainTokenIds[i] = villainTokenId;\n                    ++superVillainCounter;\n                } else {\n                    tempVillainTokenIds[i] = villainTokenId;\n                    ++villainCounter;\n                }\n                potionTokenIds[i] = potionTokenId;\n                ++i;\n            }\n        }\n\n        uint256[] memory villainTokenIds = new uint256[](villainCounter);\n        uint256[] memory villainPotionTokenIds = new uint256[](villainCounter);\n\n        uint256[] memory superVillainTokenIds = new uint256[](superVillainCounter);\n        uint256[] memory superVillainPotionTokenIds = new uint256[](superVillainCounter);\n\n        uint256 villainPotionCounter = 0;\n        uint256 superVillainPotionCounter = 0;\n\n        unchecked {\n            for(uint256 i = 0; i < claimIds.length; ++i) {\n                uint256 villainTokenId = tempVillainTokenIds[i];        \n                uint256 superVillainTokenId = tempSuperVillainTokenIds[i];\n\n                if(villainTokenId > 0) {\n                    villainPotionTokenIds[villainPotionCounter] = potionTokenIds[i];\n                    villainTokenIds[villainPotionCounter] = villainTokenId;\n                    ++villainPotionCounter;\n                } else {\n                    superVillainPotionTokenIds[superVillainPotionCounter] = potionTokenIds[i];\n                    superVillainTokenIds[superVillainPotionCounter] = superVillainTokenId;\n                    ++superVillainPotionCounter;\n                }\n            }\n        }\n\n        if(villainCounter > 0) {\n            villainContract.unmaskVillainsBatch(_msgSender(), villainTokenIds, villainPotionTokenIds);\n        }\n\n        if(superVillainCounter > 0) {\n            superVillainContract.unmaskVillainsBatch(_msgSender(), superVillainTokenIds, superVillainPotionTokenIds);\n        }\n    }\n\n\n    /// @dev Enumerates all specified claim ids and returns the unmasking quest details for each.\n    /// Never use this function in a transaction context - it is fine for a read-only query for \n    /// external applications, but will consume a lot of gas when used in a transaction.\n    function getUnmaskingQuestDetailsBatch(uint256[] calldata claimIds) external view returns (UnmaskingQuest[] memory unmaskingQuests) {\n        unmaskingQuests = new UnmaskingQuest[](claimIds.length);\n        unchecked {\n             for(uint256 i = 0; i < claimIds.length; ++i) {\n                 unmaskingQuests[i] = unmaskingQuestLookup[claimIds[i]];\n             }\n        }\n    }\n\n    /// @dev ERC-165 interface support\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdventure).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @dev Records the details of an unmasking quest with the specified claim id and transfers\n    /// specified masked villain token and potion to the custodian\n    ///\n    /// Throws when the caller does not own a specified masked villain token.\n    /// Throws when the caller does not own a specified villain potion token.\n    /// Throws when the caller does not own a specified super villain potion token.\n    /// Throws when both a villain potion and super villain potion token are specified (non 0 values for both ids at the same array index).\n    /// Throws when adventureTransferFrom throws, typically for one of the following reasons:\n    ///   - This adventure contract is not in the adventure whitelist for included contracts.\n    ///   - The caller has not set adventure approval for this contract.\n    /// Throws when the contract is paused\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The specified masked villain is now owned by the custodian.\n    /// The specified potion is now owned by the custodian.\n    /// The unmasking quest lookup for the newly created claim ids contains the following information:\n    ///   - The block timestamp of this transaction (the time at which unmasking the villain began).\n    ///   - The specified masked villain token id.\n    ///   - A bitmap containing the potion token ID and an indicator in the 16th bit `1` if it is a super villain, `0` otherwise.\n    ///   - The address of the adventurer that is permitted to retrieve their masked villain and potion or unmask their villain.\n    /// A UnmaskingVillain event has been emitted.\n    function _startUnmaskingVillain(uint256 claimId, uint256 maskedVillainTokenId, uint256 villainPotionTokenId, uint256 superVillainPotionTokenId) private {\n        if(villainPotionTokenId != 0 && superVillainPotionTokenId != 0) {\n            revert CannotIncludeMoreThanOnePotion();\n        }\n        if(maskedVillainTokenId == 0) {\n            revert MustIncludeMaskedVillain();\n        }\n        \n        if(superVillainPotionTokenId > MAX_15_BIT_VALUE || villainPotionTokenId > MAX_15_BIT_VALUE) {\n            revert PotionGreaterThanAllocatedSpace();\n        }\n\n        address caller = _msgSender();\n        uint16 potionTokenId = villainPotionTokenId == 0 ? uint16(superVillainPotionTokenId) : uint16(villainPotionTokenId);\n        uint16 potionBitmap = potionTokenId;\n        if(superVillainPotionTokenId > 0) {\n            potionBitmap = potionBitmap | uint16(ONE << 15);\n        }\n\n        unmaskingQuestLookup[claimId].startTimestamp =  uint64(block.timestamp);\n        unmaskingQuestLookup[claimId].villainTokenId = uint16(maskedVillainTokenId);\n        unmaskingQuestLookup[claimId].potionBitmap = potionBitmap;\n        unmaskingQuestLookup[claimId].adventurer = caller;\n\n        emit UnmaskingVillain(caller, claimId, potionTokenId, unmaskingQuestLookup[claimId].villainTokenId, superVillainPotionTokenId > 0);\n\n        if (maskedVillainContract.ownerOf(maskedVillainTokenId) != caller) {\n            revert CallerNotOwnerOfMaskedVillain();\n        }\n        maskedVillainContract.adventureTransferFrom(caller, address(custodian), maskedVillainTokenId);\n\n        if (villainPotionTokenId > 0) {\n            if (villainPotionContract.ownerOf(villainPotionTokenId) != caller) {\n                revert CallerNotOwnerOfVillainPotion();\n            }\n            villainPotionContract.adventureTransferFrom(caller, address(custodian), villainPotionTokenId);\n        }\n\n        if (superVillainPotionTokenId > 0) {\n            if (superVillainPotionContract.ownerOf(superVillainPotionTokenId) != caller) {\n                revert CallerNotOwnerOfSuperVillainPotion();\n            }\n            superVillainPotionContract.adventureTransferFrom(caller, address(custodian), superVillainPotionTokenId);\n        }\n    }\n\n    /// @dev Returns the mask to the villain referenced by the claim id before the required unmasking duration has been met.\n    ///\n    /// Throws when no unmasking quest is found for the specified claim id (start timestamp is zero).\n    /// Throws when the caller did not create the specified claim id (adventurer not the same as caller).\n    /// Throws when the villain is ready to unmask (required unmasking duration has been met or exceeded).\n    ///  - This is invalid if any of the potions or masked villain contracts are removed from the adventure whitelist or the adventure is removed\n    ///    as a whitelisted minter for the villain or super villain contracts.\n    ///    In these cases, the user can remask the villain to recover their potion and masked villain since redemption is not possible.\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The masked villain that was in use to unmask has been returned to the adventurer that started the quest.\n    /// The potion that was in use to unmask the villain has been returned to the adventurer that started the quest.\n    /// The unmasking quest lookup entry for the specified claim id has been removed.\n    /// A VillainMasked event has been emitted.\n    function _maskVillain(uint256 claimId) private {\n        (address adventurer, uint256 villainTokenId, uint256 potionTokenId, bool isSuperVillain, bool questCompleted) = _getAndClearUnmaskingQuestStatus(claimId);\n\n        bool allowUserToReturnMaskAfterQuestCompleted = false;\n        if(!IAdventureApproval(address(maskedVillainContract)).isAdventureWhitelisted(address(this)) || \n            !IAdventureApproval(address(villainPotionContract)).isAdventureWhitelisted(address(this)) || \n            !IAdventureApproval(address(superVillainPotionContract)).isAdventureWhitelisted(address(this)) || \n            !IMinterWhitelist(address(villainContract)).whitelistedMinters(address(this)) ||\n            !IMinterWhitelist(address(superVillainContract)).whitelistedMinters(address(this))) {\n            allowUserToReturnMaskAfterQuestCompleted = true;\n        }\n\n        if(questCompleted && !allowUserToReturnMaskAfterQuestCompleted) {\n            revert QuestCompleteVillainMustBeUnmasked();\n        }\n\n        emit VillainMasked(adventurer, claimId, isSuperVillain);\n\n        maskedVillainContract.transferFrom(address(custodian), adventurer, villainTokenId);\n\n        if(potionTokenId > 0) {\n            if(isSuperVillain) {\n                superVillainPotionContract.transferFrom(address(custodian), adventurer, potionTokenId);\n            } else {\n                villainPotionContract.transferFrom(address(custodian), adventurer, potionTokenId);\n            }\n        }\n    }\n\n    /// @dev Unmasks a villain referenced by the claim id after the required unmasking duration has been met.\n    ///\n    /// Throws when no unmasking quest is found for the specified claim id (start timestamp is zero).\n    /// Throws when the caller did not create the specified claim id (adventurer not the same as caller).\n    /// Throws when the villain is not ready to unmask (required unmasking duration has not been met).\n    ///\n    /// Postconditions:\n    /// ---------------\n    /// The villain or super villain potion used to unmask has been burned.\n    /// The masked villain has been burned.\n    /// The unmasking quest lookup entry for the specified claim id has been removed.\n    /// A villain or super villain has been minted to the adventurer who removed the mask.\n    /// A UnmaskedVillain event has been emitted.\n    function _unmaskVillain(uint256 claimId) private returns (uint256, uint256, bool) {\n        (address adventurer, uint256 villainTokenId, uint256 potionTokenId, bool isSuperVillain, bool questCompleted) = _getAndClearUnmaskingQuestStatus(claimId);\n\n        if(!questCompleted) {\n            revert CompleteQuestToUnmaskVillain();\n        }\n\n        emit UnmaskedVillain(adventurer, claimId, isSuperVillain);\n\n        if(isSuperVillain) {\n            superVillainPotionContract.adventureBurn(potionTokenId);\n        } else if(potionTokenId > 0) {\n            villainPotionContract.adventureBurn(potionTokenId);\n        }\n\n        maskedVillainContract.adventureBurn(villainTokenId);\n\n        return (villainTokenId, potionTokenId, isSuperVillain);\n    }\n\n\n    /// @dev Returns unmasking quest details and removes the lookup entry\n    ///\n    /// Throws when no unmasking quest is found\n    /// Throws when the caller did not create the claim id (caller != adventurer)\n    function _getAndClearUnmaskingQuestStatus(uint256 claimId) private returns (address adventurer, uint256 villainTokenId, uint256 potionTokenId, bool isSuperVillain, bool questCompleted) {\n        UnmaskingQuest memory unmaskingQuest = unmaskingQuestLookup[claimId];\n\n        uint256 startTimestamp = unmaskingQuest.startTimestamp;\n        adventurer = unmaskingQuest.adventurer;\n        villainTokenId = unmaskingQuest.villainTokenId;\n        uint16 potionBitmap = unmaskingQuest.potionBitmap;\n        isSuperVillain = potionBitmap >> 15 & 1 == 1;\n        potionTokenId = potionBitmap & ~(ONE << 15);\n\n        if (startTimestamp == 0) {\n            revert NoUnmaskingQuestFoundForSpecifiedClaimId();\n        }\n\n        if (adventurer != _msgSender()) {\n            revert CallerDidNotCreateClaimId();\n        }\n\n        unchecked {\n            questCompleted = block.timestamp - startTimestamp >= unmaskingDuration;\n        }\n\n        delete unmaskingQuestLookup[claimId];\n        return (adventurer, villainTokenId, potionTokenId, isSuperVillain, questCompleted);\n    }\n\n}\n"
48     }
49   },
50   "settings": {
51     "remappings": [
52       "@limit-break/=lib/limit-break/",
53       "@openzeppelin/=lib/openzeppelin-contracts/",
54       "ds-test/=lib/forge-std/lib/ds-test/src/",
55       "forge-std/=lib/forge-std/src/",
56       "limit-break/=lib/limit-break/",
57       "openzeppelin-contracts/=lib/openzeppelin-contracts/"
58     ],
59     "optimizer": {
60       "enabled": true,
61       "runs": 200
62     },
63     "metadata": {
64       "bytecodeHash": "ipfs"
65     },
66     "outputSelection": {
67       "*": {
68         "*": [
69           "evm.bytecode",
70           "evm.deployedBytecode",
71           "devdoc",
72           "userdoc",
73           "metadata",
74           "abi"
75         ]
76       }
77     },
78     "evmVersion": "london",
79     "libraries": {}
80   }
81 }}