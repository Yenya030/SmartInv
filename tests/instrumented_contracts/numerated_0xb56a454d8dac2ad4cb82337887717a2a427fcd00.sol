1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/veiZi.sol": {
5       "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.4;\n\nimport \"./libraries/multicall.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/FixedPoints.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\n\n// import \"hardhat/console.sol\";\n\ncontract veiZi is Ownable, Multicall, ReentrancyGuard, ERC721Enumerable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n    \n    /// @dev Point of epochs\n    /// for each epoch, y = bias - (t - timestamp) * slope\n    struct Point {\n        int256 bias;\n        int256 slope;\n        // start of segment\n        uint256 timestamp;\n    }\n\n    /// @dev locked info of a nft\n    struct LockedBalance {\n        // amount of token locked\n        int256 amount;\n        // end block\n        uint256 end;\n    }\n\n    int128 constant DEPOSIT_FOR_TYPE = 0;\n    int128 constant CREATE_LOCK_TYPE = 1;\n    int128 constant INCREASE_LOCK_AMOUNT = 2;\n    int128 constant INCREASE_UNLOCK_TIME = 3;\n\n    /// @notice emit if successfully deposit (calling increaseAmount, createLock, increaseUnlockTime)\n    /// @param nftId id of nft, starts from 1\n    /// @param value amount of token locked\n    /// @param lockBlk end block\n    /// @param depositType createLock / increaseAmount / increaseUnlockTime / depositFor\n    /// @param timestamp start timestamp\n    event Deposit(uint256 indexed nftId, uint256 value, uint256 indexed lockBlk, int128 depositType, uint256 timestamp);\n\n    /// @notice emit if successfuly withdraw\n    /// @param nftId id of nft, starts from 1\n    /// @param value amount of token released\n    /// @param timestamp block timestamp when calling withdraw(...)\n    event Withdraw(uint256 indexed nftId, uint256 value, uint256 timestamp);\n\n    /// @notice emit if an user successfully staked a nft\n    /// @param nftId id of nft, starts from 1\n    /// @param owner address of user\n    event Stake(uint256 indexed nftId, address indexed owner);\n\n    /// @notice emit if an user unstaked a staked nft\n    /// @param nftId id of nft, starts from 1\n    /// @param owner address of user\n    event Unstake(uint256 indexed nftId, address indexed owner);\n\n    /// @notice emit if the total amount of locked token changes\n    /// @param preSupply total amount before change\n    /// @param supply total amount after change\n    event Supply(uint256 preSupply, uint256 supply);\n\n    /// @notice number of block in a week (estimated)\n    uint256 public WEEK;\n    /// @notice number of block for 4 years\n    uint256 public MAXTIME;\n    /// @notice block delta \n    uint256 public secondsPerBlockX64;\n\n    /// @notice erc-20 token to lock\n    address public token;\n    /// @notice total amount of locked token\n    uint256 public supply;\n\n    /// @notice num of nft generated\n    uint256 public nftNum = 0;\n\n    /// @notice locked info for each nft\n    mapping(uint256 => LockedBalance) public nftLocked;\n\n    uint256 public epoch;\n\n    /// @notice weight-curve(veiZi amount) of total-weight for all nft\n    mapping(uint256 => Point) public pointHistory;\n    mapping(uint256 => int256) public slopeChanges;\n\n    /// @notice weight-curve of each nft\n    mapping(uint256 => mapping(uint256 => Point)) public nftPointHistory;\n    mapping(uint256 => uint256) public nftPointEpoch;\n\n    /// @notice total num of nft staked\n    uint256 public stakeNum = 0; // +1 every time when calling stake(...)\n    /// @notice total amount of staked iZi\n    uint256 public stakeiZiAmount = 0;\n\n    struct StakingStatus {\n        uint256 stakingId;\n        uint256 lockAmount;\n        uint256 lastVeiZi;\n        uint256 lastTouchBlock;\n        uint256 lastTouchAccRewardPerShare;\n    }\n    \n    /// @notice nftId to staking status\n    mapping(uint256 => StakingStatus) public stakingStatus;\n    /// @notice owner address of staked nft\n    mapping(uint256 => address) public stakedNftOwners;\n    /// @notice nftid the user staked, 0 for no staked. each user can stake at most 1 nft\n    mapping(address => uint256) public stakedNft;\n\n    string public baseTokenURI;\n\n    mapping(uint256 => address) public delegateAddress;\n\n    struct RewardInfo {\n        /// @dev who provides reward\n        address provider;\n        /// @dev Accumulated Reward Tokens per share, times Q128.\n        uint256 accRewardPerShare;\n        /// @dev Reward amount for each block.\n        uint256 rewardPerBlock;\n        /// @dev Last block number that the accRewardRerShare is touched.\n        uint256 lastTouchBlock;\n\n        /// @dev The block number when NFT mining rewards starts/ends.\n        uint256 startBlock;\n        /// @dev The block number when NFT mining rewards starts/ends.\n        uint256 endBlock;\n    }\n\n    /// @dev reward infos\n    RewardInfo public rewardInfo;\n\n    modifier checkAuth(uint256 nftId, bool allowStaked) {\n        bool auth = _isApprovedOrOwner(msg.sender, nftId);\n        if (allowStaked) {\n            auth = auth || (stakedNft[msg.sender] == nftId);\n        }\n        require(auth, \"Not Owner or Not exist!\");\n        _;\n    }\n\n    /// @notice constructor\n    /// @param tokenAddr address of locked token\n    /// @param _rewardInfo reward info\n    constructor(address tokenAddr, RewardInfo memory _rewardInfo) ERC721(\"iZUMi DAO veNFT\", \"veiZi\") {\n        token = tokenAddr;\n        pointHistory[0].timestamp = block.timestamp;\n\n        WEEK = 7 * 24 * 3600;\n        MAXTIME = (4 * 365 + 1) * 24 * 3600;\n\n        rewardInfo = _rewardInfo;\n        rewardInfo.accRewardPerShare = 0;\n        rewardInfo.lastTouchBlock = Math.max(_rewardInfo.startBlock, block.number);\n\n    }\n\n    /// @notice Used for ERC721 safeTransferFrom\n    function onERC721Received(address, address, uint256, bytes memory) \n        public \n        virtual \n        override \n        returns (bytes4) \n    {\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice get slope of last epoch of weight-curve of an nft\n    /// @param nftId id of nft, starts from 1\n    function getLastNftSlope(uint256 nftId) external view returns(int256) {\n        uint256 uepoch = nftPointEpoch[nftId];\n        return nftPointHistory[nftId][uepoch].slope;\n    }\n\n    struct CheckPointState {\n        int256 oldDslope;\n        int256 newDslope;\n        uint256 _epoch;\n    }\n\n    function _checkPoint(uint256 nftId, LockedBalance memory oldLocked, LockedBalance memory newLocked) internal {\n\n        Point memory uOld;\n        Point memory uNew;\n        CheckPointState memory cpState;\n        cpState.oldDslope = 0;\n        cpState.newDslope = 0;\n        cpState._epoch = epoch;\n\n        if (nftId != 0) {\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\n                uOld.slope = oldLocked.amount / int256(MAXTIME);\n                uOld.bias = uOld.slope * int256(oldLocked.end - block.timestamp);\n            }\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\n                uNew.slope = newLocked.amount / int256(MAXTIME);\n                uNew.bias = uNew.slope * int256(newLocked.end - block.timestamp);\n            }\n            cpState.oldDslope = slopeChanges[oldLocked.end];\n            if (newLocked.end != 0) {\n                if (newLocked.end == oldLocked.end) {\n                    cpState.newDslope = cpState.oldDslope;\n                } else {\n                    cpState.newDslope = slopeChanges[newLocked.end];\n                }\n            }\n        }\n\n        Point memory lastPoint = Point({bias: 0, slope: 0, timestamp: block.timestamp});\n        if (cpState._epoch > 0) {\n            lastPoint = pointHistory[cpState._epoch];\n        }\n        uint256 lastCheckPoint = lastPoint.timestamp;\n\n        uint256 ti = (lastCheckPoint / WEEK) * WEEK;\n        \n        for (uint24 i = 0; i < 255; i ++) {\n            ti += WEEK;\n            int256 dSlope = 0;\n            if (ti > block.timestamp) {\n                ti = block.timestamp;\n            } else {\n                dSlope = slopeChanges[ti];\n            }\n            // ti >= lastCheckPoint\n            \n            lastPoint.bias -= lastPoint.slope * int256(ti - lastCheckPoint);\n            lastPoint.slope += dSlope;\n            if (lastPoint.bias < 0) {\n                lastPoint.bias = 0;\n            }\n            if (lastPoint.slope < 0) {\n                lastPoint.slope = 0;\n            }\n            lastCheckPoint = ti;\n            lastPoint.timestamp = ti;\n            if (ti == block.timestamp) {\n                cpState._epoch += 1;\n                break;\n            } else {\n                if (dSlope != 0) {\n                    // slope changes\n                    cpState._epoch += 1;\n                    pointHistory[cpState._epoch] = lastPoint;\n                }\n            }\n        }\n\n        epoch = cpState._epoch;\n\n        if (nftId != 0) {\n            lastPoint.slope += (uNew.slope - uOld.slope);\n            lastPoint.bias += (uNew.bias - uOld.bias);\n            if (lastPoint.slope < 0) {\n                lastPoint.slope = 0;\n            }\n            if (lastPoint.bias < 0) {\n                lastPoint.bias = 0;\n            }\n\n        }\n\n        pointHistory[cpState._epoch] = lastPoint;\n\n        if (nftId != 0) {\n            if (oldLocked.end > block.timestamp) {\n                cpState.oldDslope += uOld.slope;\n                if (newLocked.end == oldLocked.end) {\n                    cpState.oldDslope -= uNew.slope;\n                }\n                slopeChanges[oldLocked.end] = cpState.oldDslope;\n            }\n            if (newLocked.end > block.timestamp) {\n                if (newLocked.end > oldLocked.end) {\n                    cpState.newDslope -= uNew.slope;\n                    slopeChanges[newLocked.end] = cpState.newDslope;\n                }\n            }\n            uint256 nftEpoch = nftPointEpoch[nftId] + 1;\n            uNew.timestamp = block.timestamp;\n            nftPointHistory[nftId][nftEpoch] = uNew;\n            nftPointEpoch[nftId] = nftEpoch;\n        }\n        \n    }\n\n    function _depositFor(uint256 nftId, uint256 _value, uint256 unlockTime, LockedBalance memory lockedBalance, int128 depositType) internal {\n        \n        LockedBalance memory _locked = lockedBalance;\n        uint256 supplyBefore = supply;\n\n        supply = supplyBefore + _value;\n\n        LockedBalance memory oldLocked = LockedBalance({amount: _locked.amount, end: _locked.end});\n\n        _locked.amount += int256(_value);\n\n        if (unlockTime != 0) {\n            _locked.end = unlockTime;\n        }\n        _checkPoint(nftId, oldLocked, _locked);\n        nftLocked[nftId] = _locked;\n        if (_value != 0) {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), _value);\n        }\n        emit Deposit(nftId, _value, _locked.end, depositType, block.timestamp);\n        emit Supply(supplyBefore, supplyBefore + _value);\n    }\n\n    /// @notice update global curve status to current block\n    function checkPoint() external {\n        _checkPoint(0, LockedBalance({amount: 0, end: 0}), LockedBalance({amount: 0, end: 0}));\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenURI;\n    }\n\n    function setBaseURI(string calldata baseURI) external onlyOwner {\n        baseTokenURI = baseURI;\n    }\n\n    /// @notice create a new lock and generate a new nft\n    /// @param _value amount of token to lock\n    /// @param _unlockTime future timestamp to unlock\n    /// @return nftId id of generated nft, starts from 1\n    function createLock(uint256 _value, uint256 _unlockTime) external nonReentrant returns(uint256 nftId) {\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\n        nftNum ++;\n        nftId = nftNum; // id starts from 1\n        _mint(msg.sender, nftId);\n        LockedBalance memory _locked = nftLocked[nftId];\n        require(_value > 0, \"Amount should >0\");\n        require(_locked.amount == 0, \"Withdraw old tokens first\");\n        require(unlockTime > block.timestamp, \"Can only lock until time in the future\");\n        require(unlockTime <= block.timestamp + MAXTIME, \"Voting lock can be 4 years max\");\n        _depositFor(nftId, _value, unlockTime, _locked, CREATE_LOCK_TYPE);\n    }\n\n    /// @notice increase amount of locked token in an nft\n    /// @param nftId id of nft, starts from 1\n    /// @param _value increase amount\n    function increaseAmount(uint256 nftId, uint256 _value) external nonReentrant {\n        LockedBalance memory _locked = nftLocked[nftId];\n        require(_value > 0, \"Amount should >0\");\n        require(_locked.end > block.timestamp, \"Can only lock until time in the future\");\n        _depositFor(nftId, _value, 0, _locked, (msg.sender == ownerOf(nftId) || stakedNft[msg.sender] == nftId) ? INCREASE_LOCK_AMOUNT : DEPOSIT_FOR_TYPE);\n        if (stakingStatus[nftId].stakingId != 0) {\n            _updateGlobalStatus();\n            // this nft is staking\n            // donot collect reward\n            stakeiZiAmount += _value;\n            stakingStatus[nftId].lockAmount += _value;\n        }\n    }\n\n    /// @notice increase unlock time of an nft\n    /// @param nftId id of nft\n    /// @param _unlockTime future block number to unlock\n    function increaseUnlockTime(uint256 nftId, uint256 _unlockTime) external checkAuth(nftId, true) nonReentrant {\n        LockedBalance memory _locked = nftLocked[nftId];\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\n\n        require(unlockTime > _locked.end, \"Can only increase unlock time\");\n        require(unlockTime > block.timestamp, \"Can only lock until time in the future\");\n        require(unlockTime <= block.timestamp + MAXTIME, \"Voting lock can be 4 years max\");\n\n        _depositFor(nftId, 0, unlockTime, _locked, INCREASE_UNLOCK_TIME);\n        if (stakingStatus[nftId].stakingId != 0) {\n            // this nft is staking\n            address stakingOwner = stakedNftOwners[nftId];\n            _collectReward(nftId, stakingOwner);\n        }\n    }\n\n    /// @notice withdraw an unstaked-nft\n    /// @param nftId id of nft\n    function withdraw(uint256 nftId) external checkAuth(nftId, false) nonReentrant {\n        LockedBalance memory _locked = nftLocked[nftId];\n        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\n        uint256 value = uint256(_locked.amount);\n\n        LockedBalance memory oldLocked = LockedBalance({amount: _locked.amount, end: _locked.end});\n        _locked.end = 0;\n        _locked.amount  = 0;\n        nftLocked[nftId] = _locked;\n        uint256 supplyBefore = supply;\n        supply = supplyBefore - value;\n\n        _checkPoint(nftId, oldLocked, _locked);\n        IERC20(token).safeTransfer(msg.sender, value);\n\n        emit Withdraw(nftId, value, block.timestamp);\n        emit Supply(supplyBefore, supplyBefore - value);\n    }\n\n    /// @notice burn an unstaked-nft (dangerous!!!)\n    /// @param nftId id of nft\n    function burn(uint256 nftId) external checkAuth(nftId, false) nonReentrant {\n        LockedBalance memory _locked = nftLocked[nftId];\n        require(_locked.amount == 0, \"Not Withdrawed!\");\n        _burn(nftId);\n    }\n\n    /// @notice merge nftFrom to nftTo\n    /// @param nftFrom nft id of nftFrom, cannot be staked, owner must be msg.sender\n    /// @param nftTo nft id of nftTo, cannot be staked, owner must be msg.sender\n    function merge(uint256 nftFrom, uint256 nftTo) external nonReentrant {\n        require(_isApprovedOrOwner(msg.sender, nftFrom), \"Not Owner of nftFrom\");\n        require(_isApprovedOrOwner(msg.sender, nftTo), \"Not Owner of nftTo\");\n        require(stakingStatus[nftFrom].stakingId == 0, \"nftFrom is staked\");\n        require(stakingStatus[nftTo].stakingId == 0, \"nftTo is staked\");\n        require(nftFrom != nftTo, 'Same nft!');\n\n        LockedBalance memory lockedFrom = nftLocked[nftFrom];\n        LockedBalance memory lockedTo = nftLocked[nftTo];\n        require(lockedTo.end >= lockedFrom.end, \"Endblock: nftFrom > nftTo\");\n\n        // cancel lockedFrom in the weight-curve\n        _checkPoint(nftFrom, LockedBalance({amount: lockedFrom.amount, end: lockedFrom.end}), LockedBalance({amount: 0, end: lockedFrom.end}));\n\n        // add locked iZi of nftFrom to nftTo\n        _checkPoint(nftTo, LockedBalance({amount: lockedTo.amount, end: lockedTo.end}), LockedBalance({amount: lockedTo.amount + lockedFrom.amount, end: lockedTo.end}));\n        nftLocked[nftFrom].amount = 0;\n        nftLocked[nftTo].amount = lockedTo.amount + lockedFrom.amount;\n    }\n\n    function _findTimestampEpoch(uint256 _timestamp, uint256 maxEpoch) internal view returns(uint256) {\n        uint256 _min = 0;\n        uint256 _max = maxEpoch;\n        for (uint24 i = 0; i < 128; i ++) {\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (pointHistory[_mid].timestamp <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    function _findNftTimestampEpoch(uint256 nftId, uint256 _timestamp) internal view returns(uint256) {\n\n        uint256 _min = 0;\n        uint256 _max = nftPointEpoch[nftId];\n\n        for (uint24 i = 0; i < 128; i ++) {\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (nftPointHistory[nftId][_mid].timestamp <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /// @notice weight of nft (veiZi amount) at certain time after latest update of that nft\n    /// @param nftId id of nft\n    /// @param timestamp specified timestamp after latest update of this nft (amount change or end change)\n    /// @return weight\n    function nftVeiZi(uint256 nftId, uint256 timestamp) public view returns(uint256) {\n        uint256 _epoch = nftPointEpoch[nftId];\n        if (_epoch == 0) {\n            return 0;\n        } else {\n            Point memory lastPoint = nftPointHistory[nftId][_epoch];\n            require(timestamp >= lastPoint.timestamp, \"Too early\");\n            lastPoint.bias -= lastPoint.slope * int256(timestamp - lastPoint.timestamp);\n            if (lastPoint.bias < 0) {\n                lastPoint.bias = 0;\n            }\n            return uint256(lastPoint.bias);\n        }\n    }\n    \n    /// @notice weight of nft (veiZi amount) at certain time\n    /// @param nftId id of nft\n    /// @param timestamp specified timestamp after latest update of this nft (amount change or end change)\n    /// @return weight\n    function nftVeiZiAt(uint256 nftId, uint256 timestamp) public view returns(uint256) {\n\n        uint256 targetEpoch = _findNftTimestampEpoch(nftId, timestamp);\n        Point memory uPoint = nftPointHistory[nftId][targetEpoch];\n        if (timestamp < uPoint.timestamp) {\n            return 0;\n        }\n        uPoint.bias -= uPoint.slope * (int256(timestamp) - int256(uPoint.timestamp));\n        if (uPoint.bias < 0) {\n            uPoint.bias = 0;\n        }\n        return uint256(uPoint.bias);\n    }\n\n    function _totalVeiZiAt(Point memory point, uint256 timestamp) internal view returns(uint256) {\n        Point memory lastPoint = point;\n        uint256 ti = (lastPoint.timestamp / WEEK) * WEEK;\n        for (uint24 i = 0; i < 255; i ++) {\n            ti += WEEK;\n            int256 dSlope = 0;\n            if (ti > timestamp) {\n                ti = timestamp;\n            } else {\n                dSlope = slopeChanges[ti];\n            }\n            lastPoint.bias -= lastPoint.slope * int256(ti - lastPoint.timestamp);\n            if (lastPoint.bias <= 0) {\n                lastPoint.bias = 0;\n                break;\n            }\n            if (ti == timestamp) {\n                break;\n            }\n            lastPoint.slope += dSlope;\n            lastPoint.timestamp = ti;\n        }\n        return uint256(lastPoint.bias);\n    }\n\n    /// @notice total weight of all nft at a certain time after check-point of all-nft-collection's curve\n    /// @param timestamp specified blockNumber, \"certain time\" in above line\n    /// @return total weight\n    function totalVeiZi(uint256 timestamp) external view returns(uint256) {\n        uint256 _epoch = epoch;\n        Point memory lastPoint = pointHistory[_epoch];\n        require(timestamp >= lastPoint.timestamp, \"Too Early\");\n        return _totalVeiZiAt(lastPoint, timestamp);\n    }\n\n    /// @notice total weight of all nft at a certain time\n    /// @param timestamp specified blockNumber, \"certain time\" in above line\n    /// @return total weight\n    function totalVeiZiAt(uint256 timestamp) external view returns(uint256) {\n        uint256 _epoch = epoch;\n        uint256 targetEpoch = _findTimestampEpoch(timestamp, _epoch);\n\n        Point memory point = pointHistory[targetEpoch];\n        if (timestamp < point.timestamp) {\n            return 0;\n        }\n        if (targetEpoch == _epoch) {\n            return _totalVeiZiAt(point, timestamp);\n        } else {\n            point.bias = point.bias - point.slope * (int256(timestamp) - int256(point.timestamp));\n            if (point.bias < 0) {\n                point.bias = 0;\n            }\n            return uint256(point.bias);\n        }\n    }\n\n    function _updateStakingStatus(uint256 nftId) internal {\n        StakingStatus storage t = stakingStatus[nftId];\n        t.lastTouchBlock = rewardInfo.lastTouchBlock;\n        t.lastTouchAccRewardPerShare = rewardInfo.accRewardPerShare;\n        t.lastVeiZi = t.lockAmount / MAXTIME * (Math.max(block.timestamp, nftLocked[nftId].end) - block.timestamp);\n    }\n\n    /// @notice Collect pending reward for a single veizi-nft. \n    /// @param nftId The related position id.\n    /// @param recipient who acquires reward\n    function _collectReward(uint256 nftId, address recipient) internal {\n        StakingStatus memory t = stakingStatus[nftId];\n        \n        _updateGlobalStatus();\n        uint256 reward = (t.lastVeiZi * (rewardInfo.accRewardPerShare - t.lastTouchAccRewardPerShare)) / FixedPoints.Q128;\n        if (reward > 0) {\n            IERC20(token).safeTransferFrom(\n                rewardInfo.provider,\n                recipient,\n                reward\n            );\n        }\n        _updateStakingStatus(nftId);\n    }\n\n    function setDelegateAddress(uint256 nftId, address addr) external checkAuth(nftId, true) nonReentrant {\n        delegateAddress[nftId] = addr;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 nftId) internal virtual override {\n        super._beforeTokenTransfer(from, to, nftId);\n        // when calling stake() or unStake() (to is contract address, or from is contract address)\n        // delegateAddress will not change\n        if (from != address(this) && to != address(this)) {\n            delegateAddress[nftId] = address(0);\n        }\n    }\n\n    /// @notice stake an nft\n    /// @param nftId id of nft\n    function stake(uint256 nftId) external nonReentrant {\n        require(nftLocked[nftId].end > block.timestamp, \"Lock expired\");\n        // nftId starts from 1, zero or not owner(including staked) cannot be transfered\n        safeTransferFrom(msg.sender, address(this), nftId);\n        require(stakedNft[msg.sender] == 0, \"Has Staked!\");\n\n        _updateGlobalStatus();\n\n        stakedNft[msg.sender] = nftId;\n        stakedNftOwners[nftId] = msg.sender;\n\n        stakeNum += 1;\n        uint256 lockAmount = uint256(nftLocked[nftId].amount);\n        stakingStatus[nftId] = StakingStatus({\n            stakingId: stakeNum,\n            lockAmount: lockAmount,\n            lastVeiZi: lockAmount / MAXTIME * (Math.max(block.timestamp, nftLocked[nftId].end) - block.timestamp),\n            lastTouchBlock: rewardInfo.lastTouchBlock,\n            lastTouchAccRewardPerShare: rewardInfo.accRewardPerShare\n        });\n        stakeiZiAmount += lockAmount;\n\n        emit Stake(nftId, msg.sender);\n    }\n\n    /// @notice unstake an nft\n    function unStake() external nonReentrant {\n        uint256 nftId = stakedNft[msg.sender];\n        require(nftId != 0, \"No Staked Nft!\");\n        stakingStatus[nftId].stakingId = 0;\n        stakedNft[msg.sender] = 0;\n        stakedNftOwners[nftId] = address(0);\n        _collectReward(nftId, msg.sender);\n        // refund nft\n        // note we can not use safeTransferFrom here because the\n        // opterator is msg.sender who is not approved\n        _safeTransfer(address(this), msg.sender, nftId, \"\");\n\n        stakeiZiAmount -= uint256(nftLocked[nftId].amount);\n        emit Unstake(nftId, msg.sender);\n    }\n\n    /// @notice get user's staking info\n    /// @param user address of user\n    /// @return nftId id of veizi-nft\n    /// @return stakingId id of stake\n    /// @return amount amount of locked iZi in nft\n    function stakingInfo(address user) external view returns(uint256 nftId, uint256 stakingId, uint256 amount) {\n        nftId = stakedNft[user];\n        if (nftId != 0) {\n            stakingId = stakingStatus[nftId].stakingId;\n            amount = uint256(nftLocked[nftId].amount);\n            uint256 remainBlock = Math.max(nftLocked[nftId].end, block.timestamp) - block.timestamp;\n            amount = amount / MAXTIME * remainBlock;\n        } else {\n            stakingId = 0;\n            amount = 0;\n        }\n    }\n    \n    /// @notice Update the global status.\n    function _updateGlobalStatus() internal {\n        if (block.number <= rewardInfo.lastTouchBlock) {\n            return;\n        }\n        if (rewardInfo.lastTouchBlock >= rewardInfo.endBlock) {\n            return;\n        }\n        uint256 currBlockNumber = Math.min(block.number, rewardInfo.endBlock);\n        if (stakeiZiAmount == 0) {\n            rewardInfo.lastTouchBlock = currBlockNumber;\n            return;\n        }\n\n        // tokenReward < 2^25 * 2^64 * 2^10, 15 years, 1000 r/block\n        uint256 tokenReward = (currBlockNumber - rewardInfo.lastTouchBlock) * rewardInfo.rewardPerBlock;\n        // tokenReward * Q128 < 2^(25 + 64 + 10 + 128)\n        rewardInfo.accRewardPerShare = rewardInfo.accRewardPerShare + ((tokenReward * FixedPoints.Q128) / stakeiZiAmount);\n        \n        rewardInfo.lastTouchBlock = currBlockNumber;\n    }\n\n    /// @notice Return reward multiplier over the given _from to _to block.\n    /// @param _from The start block.\n    /// @param _to The end block.\n    function _getRewardBlockNum(uint256 _from, uint256 _to)\n        internal\n        view\n        returns (uint256)\n    {\n        if (_from > _to) {\n            return 0;\n        }\n        if (_to <= rewardInfo.endBlock) {\n            return _to - _from;\n        } else if (_from >= rewardInfo.endBlock) {\n            return 0;\n        } else {\n            return rewardInfo.endBlock - _from;\n        }\n    }\n\n    /// @notice View function to see pending Reward for a staked NFT.\n    /// @param nftId The staked NFT id.\n    /// @return reward iZi reward amount\n    function pendingRewardOfToken(uint256 nftId)\n        public\n        view\n        returns (uint256 reward)\n    {\n        reward = 0;\n        StakingStatus memory t = stakingStatus[nftId];\n        if (t.stakingId != 0) {\n            // we are sure that stakeiZiAmount is not 0\n            uint256 tokenReward = _getRewardBlockNum(\n                rewardInfo.lastTouchBlock,\n                block.number\n            ) * rewardInfo.rewardPerBlock;\n            // we are sure that stakeiZiAmount >= t.lockAmount > 0\n            uint256 rewardPerShare = rewardInfo.accRewardPerShare + (tokenReward * FixedPoints.Q128) / stakeiZiAmount;\n            // l * (currentAcc - lastAcc)\n            reward = (t.lastVeiZi * (rewardPerShare - t.lastTouchAccRewardPerShare)) / FixedPoints.Q128;\n        }\n    }\n\n    /// @notice View function to see pending Reward for a user.\n    /// @param user The related user address.\n    /// @return reward iZi reward amount\n    function pendingRewardOfAddress(address user)\n        public\n        view\n        returns (uint256 reward)\n    {\n        reward = 0;\n        uint256 nftId = stakedNft[user];\n        if (nftId != 0) {\n            reward = pendingRewardOfToken(nftId);\n        }\n    }\n\n    /// @notice collect pending reward if some user has a staked veizi-nft\n    function collect() external nonReentrant {\n        uint256 nftId = stakedNft[msg.sender];\n        require(nftId != 0, 'No Staked veizi-nft!');\n        _collectReward(nftId, msg.sender);\n    }\n\n\n    /// @notice Set new reward end block.\n    /// @param endBlock New end block.\n    function modifyEndBlock(uint256 endBlock) external onlyOwner {\n        require(endBlock > block.number, \"OUT OF DATE\");\n        _updateGlobalStatus();\n        // jump if origin endBlock < block.number\n        rewardInfo.lastTouchBlock = block.number;\n        rewardInfo.endBlock = endBlock;\n    }\n\n    /// @notice Set new reward per block.\n    /// @param _rewardPerBlock new reward per block\n    function modifyRewardPerBlock(uint256 _rewardPerBlock)\n        external\n        onlyOwner\n    {\n        _updateGlobalStatus();\n        rewardInfo.rewardPerBlock = _rewardPerBlock;\n    }\n\n    function modifyStartBlock(uint256 startBlock) external onlyOwner {\n        require(rewardInfo.startBlock > block.number, 'has started!');\n        require(startBlock > block.number, 'Too Early!');\n        require(startBlock < rewardInfo.endBlock, 'Too Late!');\n        rewardInfo.startBlock = startBlock;\n        rewardInfo.lastTouchBlock = startBlock; // before start, lastTouchBlock = max(block.number, startBlock)\n    }\n\n\n    /// @notice Set new reward provider.\n    /// @param provider New provider\n    function modifyProvider(address provider)\n        external\n        onlyOwner\n    {\n        rewardInfo.provider = provider;\n    }\n}"
6     },
7     "contracts/libraries/multicall.sol": {
8       "content": "//  SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall {\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}"
9     },
10     "contracts/libraries/Math.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title Simple math library for Max and Min.\nlibrary Math {\n    function max(int24 a, int24 b) internal pure returns (int24) {\n        return a >= b ? a : b;\n    }\n\n    function min(int24 a, int24 b) internal pure returns (int24) {\n        return a < b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function tickFloor(int24 tick, int24 tickSpacing)\n        internal\n        pure\n        returns (int24)\n    {\n        int24 c = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) {\n            c = c - 1;\n        }\n        c = c * tickSpacing;\n        return c;\n    }\n\n    function tickUpper(int24 tick, int24 tickSpacing)\n        internal\n        pure\n        returns (int24)\n    {\n        int24 c = tick / tickSpacing;\n        if (tick > 0 && tick % tickSpacing != 0) {\n            c = c + 1;\n        }\n        c = c * tickSpacing;\n        return c;\n    }\n}"
12     },
13     "contracts/libraries/FixedPoints.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary FixedPoints {\n    uint256 constant Q32 = (1 << 32);\n    uint256 constant Q64 = (1 << 64);\n    uint256 constant Q96 = (1 << 96);\n    uint256 constant Q128 = (1 << 128);\n    uint256 constant Q160 = (1 << 160);\n}"
15     },
16     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Address.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
48     },
49     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
51     },
52     "@openzeppelin/contracts/utils/Strings.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
57     },
58     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 20
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "libraries": {}
80   }
81 }}