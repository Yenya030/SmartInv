1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/ThriveCoinRewardSeasonIERC20GasRefundable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.14;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./ThriveCoinRewardSeasonGasRefundable.sol\";\n\n/**\n * @author vigan.abd\n * @title ThriveCoin reward season contract with refund gas ability on add reward methods.\n *\n * @dev ThriveCoinRewardSeasonIERC20GasRefundable is a simple smart contract that is used to store reward seasons and\n * their respective IERC20 user rewards. It supports these key functionalities:\n * - Managing reward seasons where there is at most one active season, seasons can be added only by ADMIN_ROLE\n * - Adding user rewards to a season, only by WRITER_ROLE, gas is refunded in these methods\n * - Reading user rewards publicly\n * - Sending IERC20 user rewards to destination, done by reward owner or reward destinaion\n * - Sending unclaimed IERC20 rewards to default destination, can be done only by admin\n */\ncontract ThriveCoinRewardSeasonIERC20GasRefundable is ThriveCoinRewardSeasonGasRefundable {\n  address tokenAddress;\n\n  /**\n   * @dev Stores first season with default destination and close dates, additionally grants `DEFAULT_ADMIN_ROLE` and\n   * `WRITER_ROLE` to the account that deploys the contract. Additionally it sets fixed gas cost applied on top of gas\n   * used until payable transfer call in methods that are refundable.\n   *\n   * @param defaultDestination - Address where remaining funds will be sent once opportunity is closed\n   * @param closeDate - Determines time when season will be closed, end users can't claim rewards prior to this date\n   * @param claimCloseDate - Determines the date until funds are available to claim, should be after season close date\n   * @param _fixedGasFee - Fixed gas cost applied on top of gas used until payable transfer call in methods that are\n   *                       refundable.\n   * @param _tokenAddress - IERC20 token address used for distributing rewards\n   */\n  constructor(\n    address defaultDestination,\n    uint256 closeDate,\n    uint256 claimCloseDate,\n    uint256 _fixedGasFee,\n    address _tokenAddress\n  ) ThriveCoinRewardSeasonGasRefundable(defaultDestination, closeDate, claimCloseDate, _fixedGasFee) {\n    tokenAddress = _tokenAddress;\n  }\n\n  /**\n   * @dev Can be called by owner or destination of reward to send IERC2- funds to destination. It can be called only\n   * after close date is reached and before claim close date is reached. Reward can be claimed at most once and only for\n   * current season.\n   *\n   * @param owner - Owner from whom the funds will be claimed\n   */\n  function claimReward(address owner) public override {\n    super.claimReward(owner);\n\n    UserReward memory reward = rewards[seasonIndex][owner];\n    SafeERC20.safeTransfer(IERC20(tokenAddress), reward.destination, reward.amount);\n  }\n\n  /**\n   * @dev Used to send unclaimed IERC20 funds after claim close date to default destination. Can be called only by\n   * admins.\n   */\n  function sendUnclaimedFunds() public override onlyAdmin {\n    super.sendUnclaimedFunds();\n\n    Season memory season = seasons[seasonIndex];\n    SafeERC20.safeTransfer(\n      IERC20(tokenAddress),\n      season.defaultDestination,\n      season.totalRewards - season.claimedRewards\n    );\n  }\n\n  /**\n   * @dev Withdraw remaining ERC20 from smart contract, only admins can do this.\n   * This is useful when contract has more funds than needed to fulfill rewards.\n   *\n   * @param account - Destination of ERC20 funds\n   * @param amount - Amount that will be withdrawn\n   */\n  function withdrawERC20(address account, uint256 amount) public onlyAdmin {\n    Season memory season = seasons[seasonIndex];\n    require(block.timestamp > season.claimCloseDate, \"ThriveCoinRewardSeason: previous season not fully closed\");\n    require(\n      season.totalRewards - season.claimedRewards == 0 || season.unclaimedFundsSent,\n      \"ThriveCoinRewardSeason: unclaimed funds not sent yet\"\n    );\n\n    uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(this));\n    require(contractBalance >= amount, \"ThriveCoinRewardSeason: not enough funds available\");\n\n    SafeERC20.safeTransfer(IERC20(tokenAddress), account, amount);\n  }\n}\n"
6     },
7     "/contracts/ThriveCoinRewardSeasonGasRefundable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.14;\n\nimport \"./ThriveCoinRewardSeason.sol\";\n\n/**\n * @author vigan.abd\n * @title ThriveCoin reward season contract with refund gas ability on add reward methods.\n *\n * @dev ThriveCoinRewardSeasonGasRefundable is a simple smart contract that is used to store reward seasons and their\n * respective user rewards. It supports these key functionalities:\n * - Managing reward seasons where there is at most one active season, seasons can be added only by ADMIN_ROLE\n * - Adding user rewards to a season, only by WRITER_ROLE, gas is refunded in these methods\n * - Reading user rewards publicly\n * - Sending user rewards to destination, done by reward owner or reward destinaion\n * - Sending unclaimed rewards to default destination, can be done only by admin\n */\ncontract ThriveCoinRewardSeasonGasRefundable is ThriveCoinRewardSeason {\n  /**\n   * @dev Fixed gas cost applied on top of gas used until payable transfer call.\n   */\n  uint256 fixedGasFee;\n\n  /**\n   * @dev Stores first season with default destination and close dates, additionally grants `DEFAULT_ADMIN_ROLE` and\n   * `WRITER_ROLE` to the account that deploys the contract. Additionally it sets fixed gas cost applied on top of gas\n   * used until payable transfer call in methods that are refundable.\n   *\n   * @param defaultDestination - Address where remaining funds will be sent once opportunity is closed\n   * @param closeDate - Determines time when season will be closed, end users can't claim rewards prior to this date\n   * @param claimCloseDate - Determines the date until funds are available to claim, should be after season close date\n   * @param _fixedGasFee - Fixed gas cost applied on top of gas used until payable transfer call in methods that are\n   *                       refundable.\n   */\n  constructor(\n    address defaultDestination,\n    uint256 closeDate,\n    uint256 claimCloseDate,\n    uint256 _fixedGasFee\n  ) ThriveCoinRewardSeason(defaultDestination, closeDate, claimCloseDate) {\n    fixedGasFee = _fixedGasFee;\n  }\n\n  /**\n   * @dev Refunds the gas to transaction origin once the function is executed.\n   */\n  modifier refundGasCost() {\n    uint256 remainingGasStart = gasleft();\n\n    _;\n\n    uint256 usedGas = remainingGasStart - gasleft() + fixedGasFee;\n    uint256 gasCost = usedGas * tx.gasprice;\n    require(address(this).balance >= gasCost, \"ThriveCoinRewardSeasonGasRefundable: not enough funds for transaction\");\n    payable(tx.origin).transfer(gasCost);\n  }\n\n  /**\n   * @dev Returns fixed gas cost applied on top of gas used until payable\n   * transfer call in methods that are refundable.\n   */\n  function getFixedGasFee() public view returns (uint256) {\n    return fixedGasFee;\n  }\n\n  /**\n   * @dev Sets fixed gas cost applied on top of gas used until payable\n   * transfer call in methods that are refundable.\n   */\n  function setFixedGasFee(uint256 _fixedGasFee) public virtual onlyAdmin {\n    fixedGasFee = _fixedGasFee;\n  }\n\n  /**\n   * @dev Function to receive ether when msg.data is empty\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Function to receive ether when msg.data is not empty\n   */\n  fallback() external payable {}\n\n  /**\n   * @dev Withdraw ether from smart contract, only admins can do this\n   *\n   * @param account - Destination of ether funds\n   * @param amount - Amount that will be withdrawn\n   */\n  function withdrawEther(address account, uint256 amount) public onlyAdmin {\n    require(address(this).balance >= amount, \"ThriveCoinRewardSeasonGasRefundable: not enough funds\");\n\n    address payable to = payable(account);\n    to.transfer(amount);\n  }\n\n  /**\n   * @dev Beside storing reward it refunds the gas cost to transaction origin.\n   * See {ThriveCoinRewardSeason-addReward} for more details.\n   */\n  function addReward(\n    UserRewardRequest calldata entry\n  ) public virtual override(ThriveCoinRewardSeason) onlyWriter refundGasCost {\n    super.addReward(entry);\n  }\n\n  /**\n   * @dev Beside storing rewards it refunds the gas cost to transaction origin.\n   * See {ThriveCoinRewardSeason-addRewardBatch} for more details.\n   */\n  function addRewardBatch(\n    UserRewardRequest[] calldata entries\n  ) public virtual override(ThriveCoinRewardSeason) onlyWriter refundGasCost {\n    super.addRewardBatch(entries);\n  }\n}\n"
9     },
10     "/contracts/ThriveCoinRewardSeason.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.14;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\n\n/**\n * @author vigan.abd\n * @title ThriveCoin reward season contract\n *\n * @dev ThriveCoinRewardSeason is a simple smart contract that is used to store reward seasons and their respective\n * user rewards. It supports these key functionalities:\n * - Managing reward seasons where there is at most one active season, seasons can be added only by ADMIN_ROLE\n * - Adding user rewards to a season, only by WRITER_ROLE\n * - Reading user rewards publicly\n * - Sending user rewards to destination, done by reward owner or reward destinaion\n * - Sending unclaimed rewards to default destination, can be done only by admin\n *\n * NOTE: extends openzeppelin v4.6.0 contracts:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/access/AccessControlEnumerable.sol\n */\ncontract ThriveCoinRewardSeason is AccessControlEnumerable {\n  /**\n   * @dev Structure that holds reward season.\n   *\n   * @property defaultDestination - Address where remaining funds will be sent once opportunity is closed\n   * @property closeDate - Determines time when season will be closed, end users can't claim rewards prior to this date\n   * @property claimCloseDate - Determines the date until funds are available to claim,\n   *                            should be after season close date\n   * @property totalRewards - Determines total rewards that will be distributed once season is closed\n   * @property claimedRewards - Determines total claimed rewards by end users\n   * @property unclaimedFundsSent - Determines flag indicating that unclaimed funds are sent to default destination\n   *                                once season is fully closed including also claim close date.\n   * @property rewardCount - Total number of user rewards\n   */\n  struct Season {\n    address defaultDestination;\n    uint256 closeDate;\n    uint256 claimCloseDate;\n    uint256 totalRewards;\n    uint256 claimedRewards;\n    uint256 rewardCount;\n    bool unclaimedFundsSent;\n  }\n\n  /**\n   * @dev Structure that represents stored user rewards\n   * @property destination - Address where reward will be sent\n   * @property amount - Amount that will be rewarded\n   * @property claimed - Flag specifying that funds were claimed\n   */\n  struct UserReward {\n    address destination;\n    uint256 amount;\n    bool claimed;\n  }\n\n  /**\n   * @dev Structure for adding user reward through external call\n   *\n   * @property owner - Address that represents owner of the reward,\n   *                   funds can be sent to destination either by owner or\n   *                   destination address through external call\n   * @property destination - Address where reward will be sent\n   * @property amount - Amount that will be rewarded\n   */\n  struct UserRewardRequest {\n    address owner;\n    address destination;\n    uint256 amount;\n  }\n\n  bytes32 public constant WRITER_ROLE = keccak256(\"WRITER_ROLE\");\n\n  /**\n   * @dev Storage of seasons in format season_index => season_data\n   */\n  mapping(uint256 => Season) internal seasons;\n\n  /**\n   * @dev Storage of user rewards in format season_index => (owner => reward)\n   */\n  mapping(uint256 => mapping(address => UserReward)) internal rewards;\n\n  /**\n   * @dev Storage of user rewards address in format season_index => (index => owner)\n   */\n  mapping(uint256 => mapping(uint256 => address)) internal rewardsAddresses;\n\n  /**\n   * @dev Active/current season, always incremented only\n   */\n  uint256 internal seasonIndex = 1;\n\n  /**\n   * @dev Stores first season with default destination and close dates, additionally grants `DEFAULT_ADMIN_ROLE` and\n   * `WRITER_ROLE` to the account that deploys the contract.\n   *\n   * @param defaultDestination - Address where remaining funds will be sent once opportunity is closed\n   * @param closeDate - Determines time when season will be closed, end users can't claim rewards prior to this date\n   * @param claimCloseDate - Determines the date until funds are available to claim, should be after season close date\n   */\n  constructor(address defaultDestination, uint256 closeDate, uint256 claimCloseDate) {\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    _setupRole(WRITER_ROLE, _msgSender());\n\n    require(defaultDestination != address(0), \"ThriveCoinRewardSeason: default destination cannot be zero address\");\n    require(closeDate > block.timestamp, \"ThriveCoinRewardSeason: close date already reached\");\n    require(closeDate < claimCloseDate, \"ThriveCoinRewardSeason: close date should be before claim close date\");\n    seasons[seasonIndex] = Season(defaultDestination, closeDate, claimCloseDate, 0, 0, 0, false);\n  }\n\n  modifier onlyWriter() {\n    require(hasRole(WRITER_ROLE, _msgSender()), \"ThriveCoinRewardSeason: must have writer role\");\n    _;\n  }\n\n  modifier onlyAdmin() {\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"ThriveCoinRewardSeason: must have admin role\");\n    _;\n  }\n\n  /**\n   * @dev Returns active/current season index\n   */\n  function currentSeason() public view returns (uint256) {\n    return seasonIndex;\n  }\n\n  /**\n   * @dev Returns information for season related to index\n   */\n  function readSeasonInfo(uint256 index) public view returns (Season memory season) {\n    return seasons[index];\n  }\n\n  /**\n   * @dev Starts a new season with default destination and close dates, can be called only by admin and it requires\n   * the following conditions:\n   * - previous season claim close date is reached\n   * - unclaimed rewards for previous season are sent to default destination\n   * - new season close date is before new season claim close date\n   *\n   * @param defaultDestination - Address where remaining funds will be sent once opportunity is closed\n   * @param closeDate - Determines time when season will be closed, end users can't claim rewards prior to this date\n   * @param claimCloseDate - Determines the date until funds are available to claim, should be after season close date\n   */\n  function addSeason(address defaultDestination, uint256 closeDate, uint256 claimCloseDate) public onlyAdmin {\n    Season memory prevSeason = seasons[seasonIndex];\n    require(block.timestamp > prevSeason.claimCloseDate, \"ThriveCoinRewardSeason: previous season not fully closed\");\n    require(\n      prevSeason.totalRewards - prevSeason.claimedRewards == 0 || prevSeason.unclaimedFundsSent,\n      \"ThriveCoinRewardSeason: unclaimed funds not sent yet\"\n    );\n    require(defaultDestination != address(0), \"ThriveCoinRewardSeason: default destination cannot be zero address\");\n    require(closeDate > block.timestamp, \"ThriveCoinRewardSeason: close date already reached\");\n    require(closeDate < claimCloseDate, \"ThriveCoinRewardSeason: close date should be before claim close date\");\n\n    seasonIndex++;\n    seasons[seasonIndex] = Season(defaultDestination, closeDate, claimCloseDate, 0, 0, 0, false);\n  }\n\n  /**\n   * @dev Returns reward information for owner\n   *\n   * @param season - Season index\n   * @param owner - Owner of the reward\n   */\n  function readReward(uint256 season, address owner) public view returns (UserReward memory reward) {\n    return rewards[season][owner];\n  }\n\n  /**\n   * @dev Returns reward information based on index\n   *\n   * @param season - Season index\n   * @param index - Reward list index\n   */\n  function readRewardByIndex(\n    uint256 season,\n    uint256 index\n  ) public view returns (address owner, UserReward memory reward) {\n    address _owner = rewardsAddresses[season][index];\n    return (_owner, rewards[season][_owner]);\n  }\n\n  /**\n   * @dev Adds a new reward entry or overrides old reward entry. It's important to notice that if a previous reward is\n   * found for owner the amount won't be added as sum of previous amount and new one, but it will replace the\n   * previous one. Rewards cannot be added once season is closed.\n   *\n   * @param entry - User reward entry that constists of owner, destination and amount.\n   */\n  function addReward(UserRewardRequest calldata entry) public virtual onlyWriter {\n    Season storage season = seasons[seasonIndex];\n    require(block.timestamp <= season.closeDate, \"ThriveCoinRewardSeason: season is closed\");\n\n    // possible override of current season reward\n    UserReward storage reward = rewards[seasonIndex][entry.owner];\n    uint256 oldReward = reward.amount;\n\n    if (reward.destination == address(0)) {\n      rewardsAddresses[seasonIndex][season.rewardCount] = entry.owner;\n      season.rewardCount++;\n    }\n\n    reward.amount = entry.amount;\n    reward.destination = entry.destination;\n    reward.claimed = false;\n\n    season.totalRewards = season.totalRewards + entry.amount - oldReward;\n  }\n\n  /**\n   * @dev Adds/overrides multiple rewards in batch. It's important to notice that if a previous reward for owner is\n   * detected amount won't be added as sum of previous amount and new one, but it will replace the previous one.\n   * Rewards cannot be added once season is closed.\n   *\n   * @param entries - Lis of user reward entries that constists of owner, destination and amount.\n   */\n  function addRewardBatch(UserRewardRequest[] calldata entries) public virtual onlyWriter {\n    Season storage season = seasons[seasonIndex];\n    require(block.timestamp <= season.closeDate, \"ThriveCoinRewardSeason: season is closed\");\n\n    for (uint256 i = 0; i < entries.length; i++) {\n      UserRewardRequest calldata entry = entries[i];\n\n      // possible override of current season reward\n      UserReward storage reward = rewards[seasonIndex][entry.owner];\n      uint256 oldReward = reward.amount;\n\n      if (reward.destination == address(0)) {\n        rewardsAddresses[seasonIndex][season.rewardCount] = entry.owner;\n        season.rewardCount++;\n      }\n\n      reward.amount = entry.amount;\n      reward.destination = entry.destination;\n      reward.claimed = false;\n\n      season.totalRewards = season.totalRewards + entry.amount - oldReward;\n    }\n  }\n\n  /**\n   * @dev Can be called by owner or destination of reward to send funds to destination. It can be called only after\n   * close date is reached and before claim close date is reached. Reward can be claimed at most once and only for\n   * current season.\n   *\n   * @param owner - Owner from whom the funds will be claimed\n   */\n  function claimReward(address owner) public virtual {\n    Season storage season = seasons[seasonIndex];\n    require(block.timestamp > season.closeDate, \"ThriveCoinRewardSeason: season is not closed yet\");\n    require(block.timestamp <= season.claimCloseDate, \"ThriveCoinRewardSeason: deadline for claiming reached\");\n\n    UserReward storage reward = rewards[seasonIndex][owner];\n    require(reward.amount > 0, \"ThriveCoinRewardSeason: reward not found\");\n    require(reward.claimed == false, \"ThriveCoinRewardSeason: reward is already claimed\");\n    require(\n      owner == _msgSender() || reward.destination == _msgSender(),\n      \"ThriveCoinRewardSeason: caller is not allowed to claim the reward\"\n    );\n\n    reward.claimed = true;\n    season.claimedRewards += reward.amount;\n  }\n\n  /**\n   * @dev Used to send unclaimed funds after claim close date to default destination. Can be called only by admins.\n   */\n  function sendUnclaimedFunds() public virtual onlyAdmin {\n    Season storage season = seasons[seasonIndex];\n    require(block.timestamp > season.claimCloseDate, \"ThriveCoinRewardSeason: deadline for claiming not reached\");\n    require(season.totalRewards - season.claimedRewards > 0, \"ThriveCoinRewardSeason: no funds available\");\n    require(season.unclaimedFundsSent == false, \"ThriveCoinRewardSeason: funds already sent\");\n\n    season.unclaimedFundsSent = true;\n  }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Strings.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Address.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
36     },
37     "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
39     },
40     "@openzeppelin/contracts/access/IAccessControl.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
42     },
43     "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/access/AccessControl.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
48     }
49   },
50   "settings": {
51     "remappings": [],
52     "optimizer": {
53       "enabled": false,
54       "runs": 200
55     },
56     "evmVersion": "london",
57     "libraries": {},
58     "outputSelection": {
59       "*": {
60         "*": [
61           "evm.bytecode",
62           "evm.deployedBytecode",
63           "devdoc",
64           "userdoc",
65           "metadata",
66           "abi"
67         ]
68       }
69     }
70   }
71 }}