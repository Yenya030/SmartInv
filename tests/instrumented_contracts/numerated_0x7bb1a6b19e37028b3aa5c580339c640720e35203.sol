1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Dynaset.sol": {
5       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./libs/OneInchSwapValidation.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/OneInchAggregator.sol\";\nimport \"./AbstractDynaset.sol\";\n\ncontract Dynaset is AbstractDynaset {\n    using SafeERC20 for IERC20;\n    using OneInchSwapValidation for address;\n\n    /* ==========  Constants  ========== */\n    address private constant ONEINCH_V4_AGREGATION_ROUTER = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /* ==========  State variables  ========== */\n    address public uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    uint256 public deadline;\n\n    /* ==========  Events  ========== */\n    event Swap(\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin\n    );\n\n    /* ==========  Constructor  ========== */\n    constructor(\n        address factoryContract,\n        address dam,\n        address controller_,\n        string memory name,\n        string memory symbol\n    ) AbstractDynaset(factoryContract, dam, controller_, name, symbol) {\n    }\n\n    /* ==========  Token Swaps  ========== */\n    function swapUniswap(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external payable nonReentrant {\n        onlyDigitalAssetManager();\n        _checkBounds(tokenIn, tokenOut); \n        //next we need to allow the uniswapv2 router to spend the token we just sent to this contract\n        //by calling IERC20 approve you allow the uniswap contract to spend the tokens in this contract\n        IERC20(tokenIn).safeIncreaseAllowance(uniswapV2Router, amountIn);\n        //path is an array of addresses.\n        //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\n        //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\n        address[] memory path;\n        if (tokenIn == WETH || tokenOut == WETH) {\n            path = new address[](2);\n            path[0] = tokenIn;\n            path[1] = tokenOut;\n        } else {\n            path = new address[](3);\n            path[0] = tokenIn;\n            path[1] = WETH;\n            path[2] = tokenOut;\n        }\n        //then we will call swapExactTokensForTokens\n        //for the deadline we will pass in block.timestamp + deadline\n        //the deadline is the latest time the trade is valid for\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            address(this),\n            block.timestamp + deadline\n        );\n        _afterSwap(tokenIn, tokenOut, amountIn, amountOutMin);\n    }\n\n\n\n    // swap using 1inch API\n    function swapOneInch(\n        address tokenIn,\n        address tokenOut,\n        uint256 amount,\n        uint256 minReturn,\n        bytes32[] calldata pools\n    ) external payable nonReentrant {\n        onlyDigitalAssetManager();\n        _checkBounds(tokenIn, tokenOut); \n        tokenIn.validateUnoswap(tokenOut, pools);\n        IERC20(tokenIn).safeIncreaseAllowance(ONEINCH_V4_AGREGATION_ROUTER, amount);\n        OneInchAggregator(ONEINCH_V4_AGREGATION_ROUTER).unoswap(\n            tokenIn,\n            amount,\n            minReturn,\n            pools\n        );\n        _afterSwap(tokenIn, tokenOut, amount, minReturn);\n    }\n\n    // swap on uniswapV3 using 1inch API\n    function swapOneInchUniV3(\n        address tokenIn,\n        address tokenOut,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata pools\n    ) external payable nonReentrant {\n        onlyDigitalAssetManager();\n        _checkBounds(tokenIn, tokenOut); \n        tokenIn.validateUniswapV3Swap(tokenOut, pools);\n        IERC20(tokenIn).safeIncreaseAllowance(ONEINCH_V4_AGREGATION_ROUTER, amount);\n        OneInchAggregator(ONEINCH_V4_AGREGATION_ROUTER).uniswapV3Swap(\n            amount,\n            minReturn,\n            pools\n        );\n        _afterSwap(tokenIn, tokenOut, amount, minReturn);\n    }\n    \n    /* =========== Internal functions ============ */\n    \n    function _checkBounds(address tokenIn, address tokenOut) internal view {\n        require(records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(records[tokenOut].bound, \"ERR_NOT_BOUND\");    \n    }\n    \n    function _afterSwap(address tokenIn, address tokenOut, uint256 amount, uint256 minReturn) internal {\n        updateAfterSwap(tokenIn, tokenOut);\n        emit Swap(tokenIn, tokenOut, amount, minReturn);    \n    }\n\n    /* =========== Privileged configuration functions ============ */\n\n    function setDeadline(uint256 newDeadline) external {\n        onlyController();\n        deadline = newDeadline;\n    }\n\n    function upgradeUniswapV2Router(address newUniswapV2Router) external {\n        onlyController();\n        require(newUniswapV2Router != address(0), \"ERR_ADDRESS_ZERO\");\n        uniswapV2Router = newUniswapV2Router;\n    }\n\n}\n"
6     },
7     "contracts/AbstractDynaset.sol": {
8       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\n/* ========== Internal Inheritance ========== */\nimport {DToken} from \"./DToken.sol\";\n\n/* ========== Internal Interfaces ========== */\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IDynasetContract.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IDynasetTvlOracle.sol\";\nimport \"./balancer/BNum.sol\";\n\n/************************************************************************************************\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\n\nSubject to the GPL-3.0 license \n*************************************************************************************************/\nabstract contract AbstractDynaset is DToken, BNum, IDynasetContract, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /* ==========  Storage  ========== */\n\n    // Account with CONTROL role.\n    // set mint/burn forges.\n    address internal controller;\n\n    address internal factory;\n\n    address internal digitalAssetManager;\n\n    mapping(address => bool) internal mintForges;\n    mapping(address => bool) internal burnForges;\n    // Array of underlying tokens in the dynaset.\n    address[] internal dynasetTokens;\n    // Internal records of the dynaset's underlying tokens\n    mapping(address => Record) internal records;\n    address internal dynasetTvlOracle;\n\n    /* ==========  Events  ========== */\n\n    event LogTokenAdded(address indexed tokenIn, address indexed provider);\n    event LogTokenRemoved(address indexed tokenOut);\n    event DynasetInitialized(\n        address[] indexed tokens,\n        uint256[] balances,\n        address indexed tokenProvider\n    );\n    event MintForge(address indexed forgeAddress);\n    event BurnForge(address indexed forgeAddress);\n    event WithdrawalFee(address token, uint256 indexed amount);\n\n    /* ==========  Access Modifiers (changed to internal functions to decrease contract size)  ========== */\n\n    function onlyFactory() internal view {\n        require(msg.sender == factory, \"ERR_NOT_FACTORY\");\n    }\n\n    function onlyController() internal view {\n        require(msg.sender == controller, \"ERR_NOT_CONTROLLER\");\n    }\n\n    function onlyDigitalAssetManager() internal view {\n        require(msg.sender == digitalAssetManager, \"ERR_NOT_DAM\");\n    }\n\n    /* ==========  Constructor  ========== */\n    constructor(\n        address factoryContract,\n        address dam,\n        address controller_,\n        string memory name,\n        string memory symbol\n    ) {\n        require(\n            factoryContract != address(0) &&\n                dam != address(0) &&\n                controller_ != address(0),\n            \"ERR_ZERO_ADDRESS\"\n        );\n        factory = factoryContract;\n        controller = controller_;\n        digitalAssetManager = dam;\n        _initializeToken(name, symbol);\n    }\n\n    /* ==========  External Functions  ========== */\n    /**\n     * @dev Sets up the initial assets for the pool.\n     *\n     * Note: `tokenProvider` must have approved the pool to transfer the\n     * corresponding `balances` of `tokens`.\n     *\n     * @param tokens Underlying tokens to initialize the pool with\n     * @param balances Initial balances to transfer\n     * @param tokenProvider Address to transfer the balances from\n     */\n    function initialize(\n        address[] calldata tokens,\n        uint256[] calldata balances,\n        address tokenProvider\n    ) external nonReentrant override {\n        onlyFactory();\n        require(dynasetTokens.length == 0, \"ERR_INITIALIZED\");\n        require(tokenProvider != address(0), \"INVALID_TOKEN_PROVIDER\");\n        uint256 len = tokens.length;\n        require(len >= MIN_BOUND_TOKENS, \"ERR_MIN_TOKENS\");\n        require(len <= MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n        _mint(INIT_POOL_SUPPLY);\n        address token;\n        uint256 balance;\n        for (uint256 i = 0; i < len; i++) {\n            token = tokens[i];\n            require(token != address(0), \"INVALID_TOKEN\");\n            balance = balances[i];\n            require(balance > 0, \"ERR_MIN_BALANCE\");\n            records[token] = Record({\n                bound: true,\n                ready: true,\n                index: uint8(i),\n                balance: balance\n            });\n\n            dynasetTokens.push(token);\n            // ! external interaction\n            _pullUnderlying(token, tokenProvider, balance);\n        }\n        _push(tokenProvider, INIT_POOL_SUPPLY);\n        emit DynasetInitialized(tokens, balances, tokenProvider);\n    }\n\n    function addToken(\n        address token,\n        uint256 minimumBalance,\n        address tokenProvider\n    ) external nonReentrant {\n        onlyDigitalAssetManager();\n        require(token != address(0), \"ERR_ZERO_TOKEN\");\n        require(dynasetTokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n        require(tokenProvider != address(0), \"ERR_ZERO_TOKEN_PROVIDER\");\n        require(!records[token].bound, \"ERR_IS_BOUND\");\n        require(minimumBalance > 0, \"ERR_MIN_BALANCE\");\n        require(\n            IERC20(token).allowance(address(tokenProvider), address(this)) >=\n                minimumBalance,\n            \"ERR_INSUFFICIENT_ALLOWANCE\"\n        );\n        records[token] = Record({\n            bound: true,\n            ready: true,\n            index: uint8(dynasetTokens.length),\n            balance: minimumBalance\n        });\n        dynasetTokens.push(token);\n        _pullUnderlying(token, tokenProvider, minimumBalance);\n        emit LogTokenAdded(token, tokenProvider);\n    }\n\n    function removeToken(address token) external nonReentrant {\n        onlyDigitalAssetManager();\n        require(dynasetTokens.length > MIN_BOUND_TOKENS, \"ERR_MIN_TOKENS\");\n        Record memory record = records[token];\n        uint256 tokenBalance = record.balance;\n        require(tokenBalance == 0, \"ERR_CAN_NOT_REMOVE_TOKEN\");\n        // Swap the token-to-unbind with the last token,\n        // then delete the last token\n        uint256 index = record.index;\n        uint256 last = dynasetTokens.length - 1;\n        // Only swap the token with the last token if it is not\n        // already at the end of the array.\n        if (index != last) {\n            dynasetTokens[index] = dynasetTokens[last];\n            records[dynasetTokens[index]].index = uint8(index);\n            records[dynasetTokens[index]].balance = records[dynasetTokens[last]]\n                .balance;\n        }\n        dynasetTokens.pop();\n        records[token] = Record({\n            bound: false,\n            ready: false,\n            index: 0,\n            balance: 0\n        });\n        emit LogTokenRemoved(token);\n    }\n\n    function setMintForge(address newMintForge) external {\n        onlyController();\n        require(!mintForges[newMintForge], \"ERR_FORGE_ALREADY_ADDED\");\n        mintForges[newMintForge] = true;\n        emit MintForge(newMintForge);\n    }\n\n    function setBurnForge(address newBurnForge) external {\n        onlyController();\n        require(!burnForges[newBurnForge], \"ERR_FORGE_ALREADY_ADDED\");\n        burnForges[newBurnForge] = true;\n        emit BurnForge(newBurnForge);\n    }\n\n    function setDynasetOracle(address oracleAddress) external {\n        onlyFactory();\n        dynasetTvlOracle = oracleAddress;\n    }\n\n    /**\n    NOTE The function can only be called using dynaset factory contract.\n    * It is made sure that fee is not taken too frequently or \n    * not more than 25% more details can be found in DynasetFactory contract \n    * collectFee funciton.\n    */\n    function withdrawFee(address token, uint256 amount) external {\n        onlyFactory();\n        IERC20 token_ = IERC20(token);\n        token_.safeTransfer(msg.sender, amount);\n        emit WithdrawalFee(token, amount);\n    }\n\n    /**\n     *\n     * @param amount is number of dynaset amount\n     * @return tokens returns the tokens list in the dynasets and\n     * their respective @return amounts which combines make same\n     * usd value as the amount of dynasets\n     */\n    function calcTokensForAmount(uint256 amount)\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts)\n    {\n        uint256 dynasetTotal = totalSupply();\n        uint256 ratio = bdiv(amount, dynasetTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n        tokens = dynasetTokens;\n        amounts = new uint256[](dynasetTokens.length);\n        uint256 tokenAmountIn;\n        for (uint256 i = 0; i < dynasetTokens.length; i++) {\n            (Record memory record, ) = _getInputToken(tokens[i]);\n            tokenAmountIn = bmul(ratio, record.balance);\n            amounts[i] = tokenAmountIn;\n        }\n    }\n\n    function getTokenAmounts()\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts)\n    {\n        tokens = dynasetTokens;\n        amounts = new uint256[](dynasetTokens.length);\n        for (uint256 i = 0; i < dynasetTokens.length; i++) {\n            amounts[i] = records[tokens[i]].balance;\n        }\n    }\n\n    /**\n     * @dev Returns the controller address.\n     */\n    function getController() external view override returns (address) {\n        return controller;\n    }\n\n    /**\n     * @dev Check if a token is bound to the dynaset.\n     */\n    function isBound(address token) external view override returns (bool) {\n        return records[token].bound;\n    }\n\n    /**\n     * @dev Get the number of tokens bound to the dynaset.\n     */\n    function getNumTokens() external view override returns (uint256) {\n        return dynasetTokens.length;\n    }\n\n    /**\n     * @dev Returns the record for a token bound to the dynaset.\n     */\n    function getTokenRecord(address token)\n        external\n        view\n        override\n        returns (Record memory record)\n    {\n        record = records[token];\n        require(record.bound, \"ERR_NOT_BOUND\");\n    }\n\n    /**\n     * @dev Returns the stored balance of a bound token.\n     */\n    function getBalance(address token)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        Record memory record = records[token];\n        require(record.bound, \"ERR_NOT_BOUND\");\n        return record.balance;\n    }\n\n    /**\n     * @dev Get all bound tokens.\n     */\n    function getCurrentTokens()\n        external\n        view\n        override\n        returns (address[] memory tokens)\n    {\n        tokens = dynasetTokens;\n    }\n\n    /* ==========  Public Functions  ========== */\n    /**\n     * @dev Absorb any tokens that have been sent to the dynaset.\n     * If the token is not bound, it will be sent to the unbound\n     * token handler.\n     */\n    function updateAfterSwap(address tokenIn, address tokenOut) public {\n        uint256 balanceIn = IERC20(tokenIn).balanceOf(address(this));\n        uint256 balanceOut = IERC20(tokenOut).balanceOf(address(this));\n\n        records[tokenIn].balance = balanceIn;\n        records[tokenOut].balance = balanceOut;\n    }\n\n    /*\n     * @dev Mint new dynaset tokens by providing the proportional amount of each\n     * underlying token's balance relative to the proportion of dynaset tokens minted.\n     *\n     * NOTE: function can only be called by the forge contracts and min/max amounts checks are\n     * implemented in forge contracts.\n     * For any underlying tokens which are not initialized, the caller must provide\n     * the proportional share of the minimum balance for the token rather than the\n     * actual balance.\n     *\n     * @param dynasetAmountOut Amount of dynaset tokens to mint\n     * order as the dynaset's dynasetTokens list.\n     */\n    function joinDynaset(uint256 expectedSharesToMint)\n        external\n        override\n        nonReentrant\n        returns (uint256 sharesToMint)\n    {\n        require(mintForges[msg.sender], \"ERR_NOT_FORGE\");\n        require(dynasetTvlOracle != address(0), \"ERR_DYNASET_ORACLE_NOT_SET\");\n        sharesToMint = expectedSharesToMint;\n        uint256 dynasetTotal = totalSupply();\n        uint256 ratio = bdiv(sharesToMint, dynasetTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n        uint256 tokenAmountIn;\n        address token;\n        uint256 dynaset_usd_value_before_join = IDynasetTvlOracle(dynasetTvlOracle).dynasetTvlUsdc();\n        for (uint256 i = 0; i < dynasetTokens.length; i++) {\n            token = dynasetTokens[i];\n            (, uint256 realBalance) = _getInputToken(token);\n            tokenAmountIn = bmul(ratio, realBalance);\n            require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\n            uint256 forgeTokenBalance = IERC20(token).balanceOf(msg.sender);\n            if (forgeTokenBalance < tokenAmountIn) {\n                tokenAmountIn = forgeTokenBalance;\n            }\n            uint256 forgeTokenAllowance = IERC20(token).allowance(msg.sender, address(this));\n            if (forgeTokenAllowance < tokenAmountIn) {\n               tokenAmountIn = forgeTokenAllowance;\n            }\n            _updateInputToken(token, badd(realBalance, tokenAmountIn));\n            _pullUnderlying(token, msg.sender, tokenAmountIn);\n            emit LOG_JOIN(token, msg.sender, tokenAmountIn);\n        }\n        // calculate correct sharesToMint\n        uint256 dynaset_added_value = IDynasetTvlOracle(dynasetTvlOracle).dynasetTvlUsdc() \n                                      - dynaset_usd_value_before_join;\n        sharesToMint = dynaset_added_value * dynasetTotal / dynaset_usd_value_before_join;\n        require(sharesToMint > 0, \"MINT_ZERO_DYNASETS\");\n        _mint(sharesToMint);\n        _push(msg.sender, sharesToMint);\n    }\n\n    /**\n     * @dev Burns `_amount` dynaset tokens in exchange for the amounts of each\n     * underlying token's balance proportional to the ratio of tokens burned to\n     * total dynaset supply.\n     *\n     * @param dynasetAmountIn Exact amount of dynaset tokens to burn\n     */\n    function exitDynaset(uint256 dynasetAmountIn)\n        external\n        override\n        nonReentrant\n    {\n        require(burnForges[msg.sender], \"ERR_NOT_FORGE\");\n        uint256 dynasetTotal = totalSupply();\n        uint256 ratio = bdiv(dynasetAmountIn, dynasetTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n        _pull(msg.sender, dynasetAmountIn);\n        _burn(dynasetAmountIn);\n        address token;\n        Record memory record;\n        uint256 tokenAmountOut;\n        for (uint256 i = 0; i < dynasetTokens.length; i++) {\n            token = dynasetTokens[i];\n            record = records[token];\n            require(record.ready, \"ERR_OUT_NOT_READY\");\n            tokenAmountOut = bmul(ratio, record.balance);\n            require(tokenAmountOut != 0, \"ERR_MATH_APPROX\");\n\n            records[token].balance = bsub(record.balance, tokenAmountOut);\n            _pushUnderlying(token, msg.sender, tokenAmountOut);\n            emit LOG_EXIT(msg.sender, token, tokenAmountOut);\n        }\n    }\n\n    /* ==========  Underlying Token Internal Functions  ========== */\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\n    function _pullUnderlying(\n        address erc20,\n        address from,\n        uint256 amount\n    ) internal {\n        IERC20(erc20).safeTransferFrom(from, address(this), amount);\n    }\n\n    function _pushUnderlying(\n        address erc20,\n        address to,\n        uint256 amount\n    ) internal {\n        IERC20(erc20).safeTransfer(to, amount);\n    }\n\n    /* ==========  Token Management Internal Functions  ========== */\n\n    /**\n     * @dev Handles weight changes and initialization of an\n     * input token.\n     * @param token Address of the input token\n     * @param realBalance real balance is set to the records for token\n     * and weight if the token was uninitialized.\n     */\n    function _updateInputToken(address token, uint256 realBalance) internal {\n        records[token].balance = realBalance;\n    }\n\n    /* ==========  Token Query Internal Functions  ========== */\n\n    /**\n     * @dev Get the record for a token.\n     * The token must be bound to the dynaset. If the token is not\n     * initialized (meaning it does not have the minimum balance)\n     * this function will return the actual balance of the token\n     */\n    function _getInputToken(address token)\n        internal\n        view\n        returns (Record memory record, uint256 realBalance)\n    {\n        record = records[token];\n        require(record.bound, \"ERR_NOT_BOUND\");\n        realBalance = record.balance;\n    }\n}\n"
9     },
10     "contracts/interfaces/IUniswapV2Router.sol": {
11       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        //amount of tokens we are sending in\n        uint256 amountIn,\n        //the minimum amount of tokens we want out of the trade\n        uint256 amountOutMin,\n        //list of token addresses we are going to trade in.  this is necessary to calculate amounts\n        address[] calldata path,\n        //this is the address we are going to send the output tokens to\n        address to,\n        //the last time that the trade is valid for\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
12     },
13     "contracts/libs/OneInchSwapValidation.sol": {
14       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\nlibrary OneInchSwapValidation {\n    function getOutputTokenForInputTokenAndPair(address tokenIn, address pair)\n        internal\n        view\n        returns (address)\n    {\n        address token0 = IUniswapV2Pair(pair).token0();\n        address token1 = IUniswapV2Pair(pair).token1();\n        if (token0 == tokenIn) {\n            return token1;\n        }\n        if (token1 == tokenIn) {\n            return token0;\n        }\n        revert(\"ERR_TOKEN_MISSING_IN_PAIR\");\n    }\n\n    function validateUnoswap(\n        address tokenIn,\n        address tokenOut,\n        bytes32[] calldata pools\n    ) internal view {\n        address outputToken = tokenIn;\n        for (uint8 i = 0; i < pools.length; i++) {\n            outputToken = getOutputTokenForInputTokenAndPair(\n                outputToken,\n                address(uint160(uint256(pools[i])))\n            );\n        }\n        require(outputToken == tokenOut, \"ERR_OUTPUT_TOKEN\");\n    }\n\n    function validateUniswapV3Swap(\n        address tokenIn,\n        address tokenOut,\n        uint256[] calldata pools\n    ) internal view {\n        address outputToken = tokenIn;\n        for (uint8 i = 0; i < pools.length; i++) {\n            outputToken = getOutputTokenForInputTokenAndPair(\n                outputToken,\n                address(uint160(pools[i]))\n            );\n        }\n        require(outputToken == tokenOut, \"ERR_OUTPUT_TOKEN\");\n    }\n\n    \n}"
15     },
16     "contracts/interfaces/OneInchAggregator.sol": {
17       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface OneInchAggregator {\n    function unoswap(\n        address srcToken,\n        uint256 amount,\n        uint256 minReturn,\n        bytes32[] calldata _pools\n    ) external payable returns (uint256 returnAmount);\n\n    function uniswapV3Swap(\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata pools\n    ) external payable returns (uint256 returnAmount);\n}\n"
18     },
19     "contracts/DToken.sol": {
20       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./interfaces/IERC20.sol\";\n\n/************************************************************************************************\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BToken.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\ncontract DTokenBase {\n    mapping(address => uint256) internal _balance;\n    mapping(address => mapping(address => uint256)) internal _allowance;\n    uint256 internal _totalSupply;\n\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\n\n    function _mint(uint256 amt) internal {\n        _balance[address(this)] = (_balance[address(this)] + amt);\n        _totalSupply = (_totalSupply + amt);\n        emit Transfer(address(0), address(this), amt);\n    }\n\n    function _burn(uint256 amt) internal {\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n        _balance[address(this)] = (_balance[address(this)] - amt);\n        _totalSupply = (_totalSupply - amt);\n        emit Transfer(address(this), address(0), amt);\n    }\n\n    function _move(\n        address src,\n        address dst,\n        uint256 amt\n    ) internal {\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n        _balance[src] = (_balance[src] - amt);\n        _balance[dst] = (_balance[dst] + amt);\n        emit Transfer(src, dst, amt);\n    }\n\n    function _push(address to, uint256 amt) internal {\n        _move(address(this), to, amt);\n    }\n\n    function _pull(address from, uint256 amt) internal {\n        _move(from, address(this), amt);\n    }\n}\n\ncontract DToken is DTokenBase, IERC20 {\n    uint8 private constant DECIMALS = 18;\n    string private _name;\n    string private _symbol;\n\n    function _initializeToken(string memory name_, string memory symbol_)\n        internal\n    {\n        require(\n            bytes(_name).length == 0 &&\n                bytes(name_).length != 0 &&\n                bytes(symbol_).length != 0,\n            \"ERR_BTOKEN_INITIALIZED\"\n        );\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return DECIMALS;\n    }\n\n    function allowance(address src, address dst)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowance[src][dst];\n    }\n\n    function balanceOf(address whom) external view override returns (uint256) {\n        return _balance[whom];\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function approve(address dst, uint256 amt)\n        external\n        override\n        returns (bool)\n    {\n        _allowance[msg.sender][dst] = amt;\n        emit Approval(msg.sender, dst, amt);\n        return true;\n    }\n\n    function increaseApproval(address dst, uint256 amt)\n        external\n        returns (bool)\n    {\n        _allowance[msg.sender][dst] = (_allowance[msg.sender][dst] + amt);\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\n        return true;\n    }\n\n    function decreaseApproval(address dst, uint256 amt)\n        external\n        returns (bool)\n    {\n        uint256 oldValue = _allowance[msg.sender][dst];\n        if (amt > oldValue) {\n            _allowance[msg.sender][dst] = 0;\n        } else {\n            _allowance[msg.sender][dst] = (oldValue - amt);\n        }\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\n        return true;\n    }\n\n    function transfer(address dst, uint256 amt)\n        external\n        override\n        returns (bool)\n    {\n        _move(msg.sender, dst, amt);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amt\n    ) external override returns (bool) {\n        require(\n            msg.sender == src || amt <= _allowance[src][msg.sender],\n            \"ERR_BTOKEN_BAD_CALLER\"\n        );\n        _move(src, dst, amt);\n        if (\n            msg.sender != src &&\n            _allowance[src][msg.sender] != type(uint128).max\n        ) {\n            _allowance[src][msg.sender] = (_allowance[src][msg.sender] - amt);\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n        }\n        return true;\n    }\n}\n"
21     },
22     "contracts/interfaces/IDynasetContract.sol": {
23       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface IDynasetContract {\n    /**\n     * @dev Token record data structure\n     * @param bound is token bound to pool\n     * @param ready has token been initialized\n     * @param lastDenormUpdate timestamp of last denorm change\n     * @param desiredDenorm desired denormalized weight (used for incremental changes)\n     * @param index of address in tokens array\n     * @param balance token balance\n     */\n    struct Record {\n        bool bound; // is token bound to dynaset\n        bool ready;\n        uint256 index; // private\n        uint256 balance;\n    }\n\n    event LOG_SWAP(\n        address indexed caller,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 tokenAmountIn,\n        uint256 tokenAmountOut\n    );\n\n    event LOG_JOIN(\n        address indexed tokenIn,\n        address indexed caller,\n        uint256 tokenAmountIn\n    );\n\n    event LOG_EXIT(\n        address indexed caller,\n        address indexed tokenOut,\n        uint256 tokenAmountOut\n    );\n\n    event LOG_DENORM_UPDATED(address indexed token, uint256 newDenorm);\n\n    event LOG_DESIRED_DENORM_SET(address indexed token, uint256 desiredDenorm);\n\n    event LOG_MINIMUM_BALANCE_UPDATED(address token, uint256 minimumBalance);\n\n    event LOG_TOKEN_READY(address indexed token);\n\n    event LOG_PUBLIC_SWAP_TOGGLED(bool enabled);\n\n    function initialize(\n        address[] calldata tokens,\n        uint256[] calldata balances,\n        address tokenProvider\n    ) external;\n\n    function joinDynaset(uint256 _amount) external returns (uint256);\n\n    function exitDynaset(uint256 _amount) external;\n\n    function getController() external view returns (address);\n\n    function isBound(address t) external view returns (bool);\n\n    function getNumTokens() external view returns (uint256);\n\n    function getCurrentTokens() external view returns (address[] memory tokens);\n\n    function getTokenRecord(address token)\n        external\n        view\n        returns (Record memory record);\n\n    function getBalance(address token) external view returns (uint256);\n\n    function setDynasetOracle(address oracle) external;\n    \n    function withdrawFee(address token, uint256 amount) external;\n\n}\n"
24     },
25     "contracts/interfaces/IDynasetTvlOracle.sol": {
26       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface IDynasetTvlOracle {\n    function dynasetTvlUsdc() external view returns (uint256 total_usd);\n\n    function tokenUsdcValue(address _tokenIn, uint256 _amount) external view returns (uint256);\n\n    function dynasetUsdcValuePerShare() external view returns (uint256);\n\n    function dynasetTokenUsdcRatios() external view returns (address[] memory, uint256[] memory, uint256);\n    \n}\n"
27     },
28     "contracts/balancer/BNum.sol": {
29       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./BConst.sol\";\n\n/************************************************************************************************\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\ncontract BNum is BConst {\n    function btoi(uint256 a) internal pure returns (uint256) {\n        return a / BONE;\n    }\n\n    function bfloor(uint256 a) internal pure returns (uint256) {\n        return btoi(a) * BONE;\n    }\n\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\n        return c;\n    }\n\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (uint256 c, bool flag) = bsubSign(a, b);\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\n        return c;\n    }\n\n    function bsubSign(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256, bool)\n    {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c0 = a * b;\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n        uint256 c1 = c0 + (BONE / 2);\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n        uint256 c2 = c1 / BONE;\n        return c2;\n    }\n\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint256 c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n        uint256 c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n        uint256 c2 = c1 / b;\n        return c2;\n    }\n\n    // DSMath.wpow\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\n        uint256 z = n % 2 != 0 ? a : BONE;\n\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n    // of approximation of b^0.w\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n        uint256 whole = bfloor(exp);\n        uint256 remain = bsub(exp, whole);\n\n        uint256 wholePow = bpowi(base, btoi(whole));\n\n        if (remain == 0) {\n            return wholePow;\n        }\n\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(\n        uint256 base,\n        uint256 exp,\n        uint256 precision\n    ) internal pure returns (uint256) {\n        // term 0:\n        uint256 a = exp;\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\n        uint256 term = BONE;\n        uint256 sum = term;\n        bool negative = false;\n\n        // term(k) = numer / denom\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\n        // continue until term is less than precision\n        for (uint256 i = 1; term >= precision; i++) {\n            uint256 bigK = i * BONE;\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n\n        return sum;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
36     },
37     "contracts/interfaces/IERC20.sol": {
38       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface IERC20 {\n    event Approval(address indexed _src, address indexed _dst, uint256 _amount);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _whom) external view returns (uint256);\n\n    function allowance(address _src, address _dst)\n        external\n        view\n        returns (uint256);\n\n    function approve(address _dst, uint256 _amount) external returns (bool);\n\n    function transfer(address _dst, uint256 _amount) external returns (bool);\n\n    function transferFrom(\n        address _src,\n        address _dst,\n        uint256 _amount\n    ) external returns (bool);\n}\n"
39     },
40     "contracts/balancer/BConst.sol": {
41       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\n/************************************************************************************************\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\ncontract BConst {\n    uint256 public constant VERSION_NUMBER = 1;\n\n    /* ---  Weight Updates  --- */\n\n    // Minimum time passed between each weight update for a token.\n    uint256 internal constant WEIGHT_UPDATE_DELAY = 1 hours;\n\n    // Maximum percent by which a weight can adjust at a time\n    // relative to the current weight.\n    // The number of iterations needed to move from weight A to weight B is the floor of:\n    // (A > B): (ln(A) - ln(B)) / ln(1.01)\n    // (B > A): (ln(A) - ln(B)) / ln(0.99)\n    uint256 internal constant WEIGHT_CHANGE_PCT = BONE / 100;\n\n    uint256 internal constant BONE = 10**18;\n\n    uint256 internal constant MIN_BOUND_TOKENS = 2;\n    uint256 internal constant MAX_BOUND_TOKENS = 20;\n    // Minimum swap fee.\n    uint256 internal constant MIN_FEE = BONE / 10**6;\n    // Maximum swap or exit fee.\n    uint256 internal constant MAX_FEE = BONE / 10;\n    // Actual exit fee.\n    uint256 internal constant EXIT_FEE = 5e15;\n\n    // Minimum weight for any token (1/100).\n    uint256 internal constant MIN_WEIGHT = BONE;\n    uint256 internal constant MAX_WEIGHT = BONE * 50;\n    // Maximum total weight.\n    uint256 internal constant MAX_TOTAL_WEIGHT = BONE * 50;\n    // Minimum balance for a token (only applied at initialization)\n    // uint256 internal constant MIN_BALANCE = BONE / 10**12;\n    // Initial pool tokens\n    uint256 internal constant INIT_POOL_SUPPLY = BONE * 100;\n\n    uint256 internal constant MIN_BPOW_BASE = 1 wei;\n    uint256 internal constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\n    uint256 internal constant BPOW_PRECISION = BONE / 10**10;\n\n    // Maximum ratio of input tokens to balance for swaps.\n    uint256 internal constant MAX_IN_RATIO = BONE / 2;\n    // Maximum ratio of output tokens to balance for swaps.\n    uint256 internal constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
45     },
46     "@openzeppelin/contracts/utils/Address.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
51     },
52     "contracts/interfaces/IUniswapV2Pair.sol": {
53       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
54     }
55   },
56   "settings": {
57     "optimizer": {
58       "enabled": true,
59       "runs": 200
60     },
61     "outputSelection": {
62       "*": {
63         "*": [
64           "evm.bytecode",
65           "evm.deployedBytecode",
66           "devdoc",
67           "userdoc",
68           "metadata",
69           "abi"
70         ]
71       }
72     },
73     "metadata": {
74       "useLiteralContent": true
75     },
76     "libraries": {}
77   }
78 }}