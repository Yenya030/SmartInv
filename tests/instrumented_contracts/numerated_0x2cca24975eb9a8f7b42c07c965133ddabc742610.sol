1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
21     },
22     "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
30     },
31     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
33     },
34     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
39     },
40     "src/Connectors.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title Connectors\n/// @author swa.eth\n\n/*********************************\n *           0       0           *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |░░░|░░░|░░░|░░░|░░░|░░░|░░░| *\n * |                           | *\n *********************************/\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"src/Generator.sol\";\nimport \"src/interfaces/IConnectors.sol\";\nimport \"src/lib/Base64.sol\";\n\n/// @notice Just a friendly on-chain game of Connect Four\ncontract Connectors is IConnectors, ERC721, ERC721Holder, Ownable {\n    using Strings for uint8;\n    using Strings for uint160;\n    using Strings for uint256;\n    /// @dev Interface identifier for royalty standard\n    bytes4 constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// @notice Maximum supply of NFTs\n    uint16 public constant MAX_SUPPLY = 420;\n    /// @notice Address of Generator contract\n    address public immutable generator;\n    /// @notice Current supply of NFTs\n    uint16 public totalSupply;\n    /// @notice Ether amount required to play (per player)\n    uint64 public fee = 0.0420 ether;\n    /// @notice Mapping of game ID to game info\n    mapping(uint256 => Game) public games;\n\n    /// @dev Deploys Generator contract\n    constructor() payable ERC721(\"Connectors\", \"C4\") {\n        generator = address(new Generator());\n    }\n\n    /// @notice Creates new game and mints empty game board\n    /// @dev Game can only become active once opponent calls begin\n    /// @param _opponent Address of opponent\n    function challenge(address _opponent) external payable {\n        // Reverts if caller is also the opponent\n        if (msg.sender == _opponent) revert InvalidMatchup();\n        // Reverts if max supply has been minted\n        if (totalSupply == MAX_SUPPLY) revert InsufficientSupply();\n        // Reverts if payment amount is incorrect\n        if (msg.value != fee) revert InvalidPayment();\n\n        // Initializes game info\n        Game storage game = games[++totalSupply];\n        game.player1 = msg.sender;\n        game.player2 = _opponent;\n        game.turn = PLAYER_2;\n\n        // Mints new board to this contract\n        _safeMint(address(this), totalSupply);\n\n        // Emits event for challenging opponent\n        emit Challenge(totalSupply, msg.sender, _opponent);\n    }\n\n    /// @notice Activates new game and executes first move on board\n    /// @dev Column numbers are zero-indexed\n    /// @param _gameId ID of the game\n    /// @param _col Value of column placement on board (0-6)\n    function begin(uint256 _gameId, uint8 _col) external payable {\n        // Reverts if game does not exist\n        if (_gameId == 0 || _gameId > totalSupply) revert InvalidGame();\n        Game storage game = games[_gameId];\n        uint8 playerId = _getPlayerId(game, msg.sender);\n        // Reverts if game state is not Inactive\n        if (game.state != State.INACTIVE) revert InvalidState();\n        // Reverts if caller is not authorized to execute move\n        if (game.turn != playerId) revert NotAuthorized();\n        // Reverts if payment amount is incorrect\n        if (msg.value != fee) revert InvalidPayment();\n\n        // Sets game state to Active\n        game.state = State.ACTIVE;\n\n        // Emits event for beginning a new game\n        emit Begin(_gameId, msg.sender, game.state);\n\n        // Executes first move on board\n        move(_gameId, _col);\n    }\n\n    /// @notice Executes next placement on active board\n    /// @dev Column numbers are zero-indexed\n    /// @param _gameId ID of the game\n    /// @param _col Value of column placement on board (0-6)\n    function move(uint256 _gameId, uint8 _col) public returns (bool result) {\n        // Reverts if game does not exist\n        if (_gameId == 0 || _gameId > totalSupply) revert InvalidGame();\n        Game storage game = games[_gameId];\n        uint8[COL][ROW] storage board = game.board;\n        uint8 playerId = _getPlayerId(game, msg.sender);\n        uint8 row = getNextRow(board, _col);\n        // Reverts if game state is not Active\n        if (game.state != State.ACTIVE) revert InvalidState();\n        // Reverts if caller is not authorized to execute move\n        if (game.turn != playerId) revert NotAuthorized();\n        // Reverts if column is fully occupied\n        if (board[row][_col] != 0) revert InvalidMove();\n\n        // Increments total number of moves made\n        ++game.moves;\n        uint8 moves = game.moves;\n\n        // Records player move\n        game.row = row;\n        game.col = _col;\n        board[row][_col] = playerId;\n\n        // Emits event for creating new move on board\n        emit Move(_gameId, msg.sender, moves, row, _col);\n\n        // Only checks board for win if minimum number of moves have been made\n        if (moves > 6) result = _checkBoard(playerId, row, _col, board);\n\n        // Checks if game has been won\n        if (result) {\n            _success(_gameId, game);\n        } else {\n            // Updates player turn based on caller\n            game.turn = (msg.sender == game.player1) ? PLAYER_2 : PLAYER_1;\n\n            // Checks if number of moves has reached maximum moves\n            if (moves == ROW * COL) _draw(_gameId, game);\n        }\n    }\n\n    /// @notice Sets fee amount required to play game\n    /// @param _fee Amount in ether\n    function setFee(uint64 _fee) external payable onlyOwner {\n        fee = _fee;\n    }\n\n    /// @notice Withdraws balance from this contract\n    /// @param _to Target address for transferring balance to\n    function withdraw(address payable _to) external payable onlyOwner {\n        (bool success, ) = _to.call{value: address(this).balance}(\"\");\n        if (!success) revert TransferFailed();\n    }\n\n    /// @notice Gets the entire column for a given row\n    /// @param _gameId ID of the game\n    /// @param _row Value of row number on board\n    function getColumn(uint256 _gameId, uint8 _row) external view returns (uint8[COL] memory) {\n        Game memory game = games[_gameId];\n        return game.board[_row];\n    }\n\n    /// @notice Returns royalty information for secondary sales\n    function royaltyInfo(\n        uint256 /* _tokenId */,\n        uint256 _salePrice\n    ) external view returns (address receiver, uint256 royalty) {\n        receiver = owner();\n        royalty = (_salePrice * 1000) / 10000;\n    }\n\n    /// @notice Supports interface for ERC-165 implementation\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return interfaceId == _INTERFACE_ID_ERC2981 || super.supportsInterface(interfaceId); // ERC165 Interface ID for ERC2981\n    }\n\n    /// @notice Gets metadata of token in JSON format\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n        _requireMinted(_tokenId);\n\n        Game memory game = games[_tokenId];\n        uint8[COL][ROW] memory board = game.board;\n        address player1 = game.player1;\n        address player2 = game.player2;\n        string memory name = (game.state == State.SUCCESS)\n            ? string.concat(\"Connector #\", _tokenId.toString())\n            : string.concat(\"Game #\", _tokenId.toString());\n        string memory description = \"Just a friendly on-chain game of Connect Four. Your move anon.\";\n        string memory gameTraits = _generateGameTraits(game);\n        string memory playerTraits = _generatePlayerTraits(_tokenId, player1, player2);\n        string memory image = Base64.encode(\n            abi.encodePacked(IGenerator(generator).generateSVG(_tokenId, game.row, game.col, board))\n        );\n\n        return\n            string.concat(\n                \"data:application/json;base64,\",\n                Base64.encode(\n                    abi.encodePacked(\n                        string.concat(\n                            '{\"name\":\"',\n                                name,\n                            '\",',\n                            '\"description\":\"',\n                                description,\n                            '\",',\n                            '\"image\": \"data:image/svg+xml;base64,',\n                                image,\n                            '\",',\n                            '\"attributes\": [',\n                                playerTraits,\n                                gameTraits,\n                            \"]}\"\n                        )\n                    )\n                )\n            );\n    }\n\n    /// @notice Gets the next row value for the given column\n    /// @param _board Current state of the game board\n    /// @param _col Value of the column placement\n    function getNextRow(uint8[COL][ROW] memory _board, uint8 _col) public pure returns (uint8) {\n        unchecked {\n            for (uint8 row; row < ROW; ++row) {\n                if (_board[row][_col] == 0)  {\n                    return row;\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    /// @dev Sets game as success and transfers connector to winner\n    function _success(uint256 _gameId, Game storage _game) internal {\n        _game.state = State.SUCCESS;\n        emit Result(_gameId, msg.sender, _game.state, _game.board);\n\n        _burn(_gameId);\n        _safeMint(msg.sender, _gameId);\n    }\n\n    /// @dev Sets game as draw\n    function _draw(uint256 _gameId, Game storage _game) internal {\n        _game.turn = 0;\n        _game.state = State.DRAW;\n\n        emit Result(_gameId, address(0), _game.state, _game.board);\n    }\n\n    /// @dev Checks if move wins game in any of the four directions\n    function _checkBoard(\n        uint8 _playerId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] storage _board\n    ) internal view returns (bool result) {\n        result = _checkHorizontal(_playerId, _row, _col, _board);\n        if (!result) result = _checkVertical(_playerId, _row, _col, _board);\n        if (!result) result = _checkAscending(_playerId, _row, _col, _board);\n        if (!result) result = _checkDescending(_playerId, _row, _col, _board);\n    }\n\n    /// @dev Checks horizontal placement of move on board\n    function _checkHorizontal(\n        uint8 _playerId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] storage _board\n    ) internal view returns (bool result) {\n        uint8 i;\n        uint8 counter;\n        unchecked {\n            for (i = 1; i < 4; ++i) {\n                if (_col == 0) break;\n                if (_board[_row][_col - i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n                if (_col - i == 0) break;\n            }\n\n            for (i = 1; i < 4; ++i) {\n                if (_col + i == COL) break;\n                if (_board[_row][_col + i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if (counter > 2) result = true;\n    }\n\n    /// @dev Checks vertical placement of move on board\n    function _checkVertical(\n        uint8 _playerId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] storage _board\n    ) internal view returns (bool result) {\n        uint8 i;\n        uint8 counter;\n        unchecked {\n            for (i = 1; i < 4; ++i) {\n                if (_row == 0) break;\n                if (_board[_row - i][_col] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n                if (_row - i == 0) break;\n            }\n\n            for (i = 1; i < 4; ++i) {\n                if (_row + i == ROW) break;\n                if (_board[_row + i][_col] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if (counter > 2) result = true;\n    }\n\n    /// @dev Checks diagonal placement of move ascending from left to right\n    function _checkAscending(\n        uint8 _playerId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] storage _board\n    ) internal view returns (bool result) {\n        uint8 i;\n        uint8 counter;\n        unchecked {\n            for (i = 1; i < 4; ++i) {\n                if (_row == 0 || _col == 0) break;\n                if (_board[_row - i][_col - i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n                if (_row - i == 0 || _col - i == 0) break;\n            }\n\n            for (i = 1; i < 4; ++i) {\n                if (_row + i == ROW || _col + i == COL) break;\n                if (_board[_row + i][_col + i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if (counter > 2) result = true;\n    }\n\n    /// @dev Checks diagonal placement of move descending from left to right\n    function _checkDescending(\n        uint8 _playerId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] storage _board\n    ) internal view returns (bool result) {\n        uint8 i;\n        uint8 counter;\n        unchecked {\n            for (i = 1; i < 4; ++i) {\n                if (_row + i == ROW || _col == 0) break;\n                if (_board[_row + i][_col - i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n                if (_col - i == 0) break;\n            }\n\n            for (i = 1; i < 4; ++i) {\n                if (_row == 0 || _col + i == COL) break;\n                if (_board[_row - i][_col + i] == _playerId) {\n                    ++counter;\n                } else {\n                    break;\n                }\n                if (_row - i == 0) break;\n            }\n        }\n\n        if (counter > 2) result = true;\n    }\n\n    /// @dev Generates JSON formatted data of game traits\n    function _generateGameTraits(Game memory _game) internal view returns (string memory) {\n        string memory moves = _game.moves.toString();\n        string memory status = IGenerator(generator).getStatus(_game.state);\n        string memory label = (_game.state == State.SUCCESS) ? \"Winner\" : \"Turn\";\n        string memory turn = uint160(address(0)).toHexString(20);\n        if (_game.turn == PLAYER_1) {\n            turn = uint160(_game.player1).toHexString(20);\n        } else if (_game.turn == PLAYER_2) {\n            turn = uint160(_game.player2).toHexString(20);\n        }\n        string memory latest = string.concat(\n            \"(\",\n            _game.row.toString(),\n            \", \",\n            _game.col.toString(),\n            \")\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    '{\"trait_type\":\"Latest\", \"value\":\"',\n                        latest,\n                    '\"},',\n                    '{\"trait_type\":\"Moves\", \"value\":\"',\n                        moves,\n                    '\"},',\n                    '{\"trait_type\":\"Status\", \"value\":\"',\n                        status,\n                    '\"},',\n                    '{\"trait_type\":\"',\n                        label,\n                    '\", \"value\":\"',\n                        turn,\n                    '\"}'\n                )\n            );\n    }\n\n    /// @dev Generates JSON formatted data of player traits\n    function _generatePlayerTraits(\n        uint256 _gameId,\n        address _player1,\n        address _player2\n    ) internal view returns (string memory) {\n        string memory player1 = uint160(_player1).toHexString(20);\n        string memory player2 = uint160(_player2).toHexString(20);\n        (string memory checker1, string memory checker2) = IGenerator(generator).getCheckers(_gameId);\n\n        return\n            string(\n                abi.encodePacked(\n                    '{\"trait_type\":\"',\n                        checker1,\n                    '\", \"value\":\"',\n                        player1,\n                    '\"},',\n                    '{\"trait_type\":\"',\n                        checker2,\n                    '\", \"value\":\"',\n                        player2,\n                    '\"},'\n                )\n            );\n    }\n\n    /// @dev Gets player ID of caller\n    function _getPlayerId(\n        Game storage _game,\n        address _player\n    ) internal view returns (uint8 playerId) {\n        if (_player == _game.player1) {\n            playerId = PLAYER_1;\n        } else if (_player == _game.player2) {\n            playerId = PLAYER_2;\n        }\n    }\n}\n"
42     },
43     "src/Generator.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"src/interfaces/IGenerator.sol\";\n\ncontract Generator is IGenerator {\n    using Strings for uint256;\n    string public constant BLUE = \"#29335c\";\n    string public constant RED = \"#DB2B39\";\n    string public constant YELLOW = \"#F3A712\";\n\n    constructor() payable {}\n\n    function generateSVG(\n        uint256 _gameId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] memory _board\n    ) external pure returns (string memory svg) {\n        string memory board = _generateBoard();\n        (string memory base, string memory player1, string memory player2) = _getPalette(_gameId);\n        for (uint8 y; y < COL; ++y) {\n            board = string.concat(board, _generateGrid(y));\n            for (uint8 x; x < ROW; ++x) {\n                string memory cell;\n                if (_board[x][y] == PLAYER_1) {\n                    cell = _generateCell(x, y, _row, _col, player1);\n                } else if (_board[x][y] == PLAYER_2) {\n                    cell = _generateCell(x, y, _row, _col, player2);\n                }\n                board = string.concat(board, cell);\n            }\n            board = string.concat(board, _generateBase(base));\n        }\n        svg = string.concat(board, \"</svg>\");\n    }\n\n    function getCheckers(\n        uint256 _gameId\n    ) external pure returns (string memory checker1, string memory checker2) {\n        (, string memory player1, string memory player2) = _getPalette(_gameId);\n        checker1 = _getColor(player1);\n        checker2 = _getColor(player2);\n    }\n\n    function getStatus(State _state) external pure returns (string memory status) {\n        if (_state == State.INACTIVE) status = \"Inactive\";\n        else if (_state == State.ACTIVE) status = \"Active\";\n        else if (_state == State.SUCCESS) status = \"Success\";\n        else status = \"Draw\";\n    }\n\n    function _generateBoard() internal pure returns (string memory) {\n        return\n            \"<svg viewBox='0 0 700 600' xmlns='http://www.w3.org/2000/svg'><defs><pattern id='cell-pattern' patternUnits='userSpaceOnUse' width='100' height='100'><circle cx='50' cy='50' r='45' fill='black'></circle></pattern><mask id='cell-mask'><rect width='100' height='600' fill='white'></rect><rect width='100' height='600' fill='url(#cell-pattern)'></rect></mask></defs>\";\n    }\n\n    function _generateGrid(uint256 _col) internal pure returns (string memory) {\n        uint256 x = _col * 100;\n        string[3] memory grid;\n        grid[0] = \"<svg x='\";\n        grid[1] = x.toString();\n        grid[2] = \"' y='0'>\";\n\n        return string(abi.encodePacked(grid[0], grid[1], grid[2]));\n    }\n\n    function _generateCell(\n        uint256 _x,\n        uint256 _y,\n        uint8 _row,\n        uint8 _col,\n        string memory _checker\n    ) internal pure returns (string memory cell) {\n        uint256 cy = 550 - (_x * 100);\n        if (_x == _row && _y == _col) {\n            cell = _animateCell(cy, _checker);\n        } else {\n            cell = _staticCell(cy, _checker);\n        }\n    }\n\n    function _animateCell(\n        uint256 _cy,\n        string memory _checker\n    ) internal pure returns (string memory) {\n        uint256 duration = (_cy / 100 == 0) ? 1 : _cy / 100;\n        string memory secs = string.concat(duration.toString(), \"s\");\n        string[7] memory cell;\n        cell[0] = \"<circle cx='50' r='45' fill='\";\n        cell[1] = _checker;\n        cell[2] = \"'><animate attributeName='cy' from='0' to='\";\n        cell[3] = _cy.toString();\n        cell[4] = \"' dur='\";\n        cell[5] = secs;\n        cell[6] = \"' begin='2s' fill='freeze'></animate></circle>\";\n\n        return string(abi.encodePacked(cell[0], cell[1], cell[2], cell[3], cell[4], cell[5], cell[6]));\n    }\n\n    function _staticCell(\n        uint256 _cy,\n        string memory _checker\n    ) internal pure returns (string memory) {\n        string[5] memory cell;\n        cell[0] = \"<circle cx='50' cy='\";\n        cell[1] = _cy.toString();\n        cell[2] = \"' r='45' fill='\";\n        cell[3] = _checker;\n        cell[4] = \"'></circle>\";\n\n        return string(abi.encodePacked(cell[0], cell[1], cell[2], cell[3], cell[4]));\n    }\n\n    function _generateBase(string memory _base) internal pure returns (string memory) {\n        string[3] memory base;\n        base[0] = \"<rect width='100' height='600' fill='\";\n        base[1] = _base;\n        base[2] = \"' mask='url(#cell-mask)'></rect></svg>\";\n\n        return string(abi.encodePacked(base[0], base[1], base[2]));\n    }\n\n    function _getPalette(\n        uint256 _gameId\n    ) internal pure returns (string memory base, string memory player1, string memory player2) {\n        if (_gameId % 3 == 0) {\n            base = RED;\n            if (_gameId % 2 == 0) {\n                player1 = BLUE;\n                player2 = YELLOW;\n            } else {\n                player1 = YELLOW;\n                player2 = BLUE;\n            }\n        } else if (_gameId % 3 == 1) {\n            base = YELLOW;\n            if (_gameId % 2 == 0) {\n                player1 = RED;\n                player2 = BLUE;\n            } else {\n                player1 = BLUE;\n                player2 = RED;\n            }\n        } else if (_gameId % 3 == 2) {\n            base = BLUE;\n            if (_gameId % 2 == 0) {\n                player1 = RED;\n                player2 = YELLOW;\n            } else {\n                player1 = YELLOW;\n                player2 = RED;\n            }\n        }\n    }\n\n    function _getColor(string memory _player) internal pure returns (string memory checker) {\n        if (_hashStr(_player) == _hashStr(BLUE)) checker = \"Blue\";\n        else if (_hashStr(_player) == _hashStr(RED)) checker = \"Red\";\n        else checker = \"Yellow\";\n    }\n\n    function _hashStr(string memory _value) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_value));\n    }\n}\n"
45     },
46     "src/interfaces/IConnectors.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nuint8 constant COL = 7;\nuint8 constant ROW = 6;\nuint8 constant PLAYER_1 = 1;\nuint8 constant PLAYER_2 = 2;\n\nenum State {\n    INACTIVE,\n    ACTIVE,\n    SUCCESS,\n    DRAW\n}\n\nstruct Game {\n    State state;\n    uint8 row;\n    uint8 col;\n    uint8 moves;\n    uint8 turn;\n    address player1;\n    address player2;\n    uint8[COL][ROW] board;\n}\n\ninterface IConnectors {\n    error InsufficientSupply();\n    error InvalidGame();\n    error InvalidMatchup();\n    error InvalidMove();\n    error InvalidPayment();\n    error InvalidState();\n    error NotAuthorized();\n    error TransferFailed();\n\n    event Challenge(uint256 indexed _gameId, address indexed _player1, address indexed _player2);\n\n    event Begin(uint256 indexed _gameId, address indexed _player2, State indexed _state);\n\n    event Move(\n        uint256 indexed _gameId,\n        address indexed _player,\n        uint8 _moves,\n        uint8 _row,\n        uint8 _col\n    );\n\n    event Result(\n        uint256 indexed _gameId,\n        address indexed _winner,\n        State indexed _state,\n        uint8[COL][ROW] _board\n    );\n\n    function MAX_SUPPLY() external view returns (uint16);\n\n    function challenge(address _opponent) external payable;\n\n    function begin(uint256 _gameId, uint8 _col) external payable;\n\n    function fee() external view returns (uint64);\n\n    function generator() external view returns (address);\n\n    function getColumn(uint256 _gameId, uint8 _row) external view returns (uint8[COL] memory);\n\n    function getNextRow(uint8[COL][ROW] memory _board, uint8 _col) external view returns (uint8);\n\n    function move(uint256 _gameId, uint8 _col) external returns (bool);\n\n    function setFee(uint64 _fee) external payable;\n\n    function totalSupply() external view returns (uint16);\n\n    function withdraw(address payable _to) external payable;\n}\n"
48     },
49     "src/interfaces/IGenerator.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {COL, ROW, PLAYER_1, PLAYER_2, State} from \"src/interfaces/IConnectors.sol\";\n\ninterface IGenerator {\n    function BLUE() external view returns (string memory);\n\n    function RED() external view returns (string memory);\n\n    function YELLOW() external view returns (string memory);\n\n    function generateSVG(\n        uint256 _gameId,\n        uint8 _row,\n        uint8 _col,\n        uint8[COL][ROW] memory _board\n    ) external pure returns (string memory);\n\n    function getCheckers(uint256 _gameId) external pure returns (string memory, string memory);\n\n    function getStatus(State _state) external view returns (string memory);\n}\n"
51     },
52     "src/lib/Base64.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary Base64 {\n    string internal constant _TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) public pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        string memory table = _TABLE;\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n        return result;\n    }\n}\n"
54     }
55   },
56   "settings": {
57     "remappings": [
58       "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
59       "ds-test/=lib/forge-std/lib/ds-test/src/",
60       "forge-std/=lib/forge-std/src/"
61     ],
62     "optimizer": {
63       "enabled": true,
64       "runs": 200
65     },
66     "metadata": {
67       "bytecodeHash": "ipfs"
68     },
69     "outputSelection": {
70       "*": {
71         "*": [
72           "evm.bytecode",
73           "evm.deployedBytecode",
74           "devdoc",
75           "userdoc",
76           "metadata",
77           "abi"
78         ]
79       }
80     },
81     "evmVersion": "london",
82     "libraries": {
83       "src/lib/Base64.sol": {
84         "Base64": "0x9186675ed37c80b565414b970d226d8dbe1094da"
85       }
86     }
87   }
88 }}