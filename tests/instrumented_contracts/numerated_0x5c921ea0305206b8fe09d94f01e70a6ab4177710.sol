1 pragma solidity ^0.4.16;
2 /*
3 
4     GOeureka SimpleAudit Smart Contract
5 
6     This contract stores a client and supplier reference between customers and
7     hotels on the blockchain for audit log purposes
8 
9     bytes32 goeureka_audit_ref
10     - a blockchain reference ID generated by goeureka
11 
12     string reference
13     - a hash of two reference code from supplier and goeureka
14 
15 */
16 contract SimpleAudit {
17 
18     event AuditLog(bytes32 goeureka_audit_ref, string reference); // event
19 
20     struct Audit {
21         string reference;        // a hash of two reference code from supplier and goeureka
22         bool exist;              // checks if the reference exists
23     }
24 
25     address creator;
26     mapping(bytes32 => Audit) public records;
27 
28     constructor() public {
29         creator = msg.sender;
30     }
31 
32     modifier onlyOwner {
33         require(
34             msg.sender == creator, "Only owner can call this function."
35         );
36         _;
37     }
38 
39     modifier noEdit(bytes32 goeureka_audit_ref) {
40 
41         require(
42             records[goeureka_audit_ref].exist == false,
43             "Already set, audit log cannot be modified"
44         );
45         _;
46     }
47 
48     function set(bytes32 goeureka_audit_ref, string reference)
49         onlyOwner
50         noEdit(goeureka_audit_ref)
51         public {
52             records[goeureka_audit_ref].reference = reference;
53             records[goeureka_audit_ref].exist = true;
54             emit AuditLog(goeureka_audit_ref, reference);
55     }
56 
57     function get(bytes32 goeureka_audit_ref) public constant returns (string) {
58         return records[goeureka_audit_ref].reference;
59     }
60 
61 }