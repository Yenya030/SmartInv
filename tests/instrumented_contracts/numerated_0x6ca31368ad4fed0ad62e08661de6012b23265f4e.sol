1 //Metti For Roe v. Wade is a NFT art collection from Pumpametti to support a woman's right to choose. SCOTUS' overturn of Roe v. Wade further distances America from one of the core principles of American constitutional democracy, the separation of church and state. 
2 //Free mint of 1000 art pieces, 300 reserved for OG Pumpametti collectors. 
3 //All royalties from this collection will go to support non-profit organizations fighting for women's reproductive rights.
4 
5 // ####%#####*###**####%##%#########%#*###*+**###%%######%######*##*#**###########*#########%#######################*####%######%%#%%#%%%%%%%%%%%%%@@%%@%
6 // ################%#####*#**#*##*#*#*#*##*##**#*##*##*##*#**#*##########**#######*###################*##*#*##############%*%####%%%%%%%%%%%%%%%%%@@@@@@@
7 // #####################***#**#######*###########*==*#*#*######**####*###*##############**##*###**#######***####%###########%#####%%%%%%%%%%%%%%%%%%%@%@@
8 // *##**####*##+**##################-*#########-+*++*#*########**##*#################*######*###**##################%#####%#%%##%%%#%#%%%%%%%%%%@@%%%%%%%
9 // ***#######*:*:*#####%####*####.#++######*+=#########*############*#######*######*#**##*#######################%####%###%*##%####%%%%%%%%%%%%%%%%%@%%%@
10 // ########**-*#-*######*######## =-+#####.+####################**###****#######**######################*##*####%############%%%%##%%%%%%%%%%%@%%%%@%%%@%
11 // ########:*##**####*-#=+#+##*+-:#**++*=*########################**######*####**######%##################*#########%%###%##%##%%%%%%%%%%%%%%%%%%%%%@%%%%
12 // *#*####+=*#*-*##-+---:+--+=-=-=*=-==#########################*#############*###*#########*#######***########################%#%%%%%%%%%%%%@%%%%%%%@%@%
13 // ****#%*.+#*---*-.===+.++**+*#+=-**###########################**#**#########*##################*####*##############%#########%%%%%%%%%%%%%%%%%%%%%%%@@%
14 // ##*##*:**#:***#***:*#*######+.#########*##############*####**#############**######%############**#######*####%####%####%#####%%%#%%#%%%%%%%%%%%@%%@@@%
15 // ###*#*+=*:######*+-*###*#*+:*##*###*##########*#########################*##########*#############**%########%####################%#%%%%%#%%%%%%%%@@@@@
16 // #####-*=-#######+-**#*#*=-+#*##*##########***#################**###########################*##############%#########%%%#####%#%%%%%%#%%%%%%%%%%%%%@%@@
17 // #*##=#=+*######**-+***++=**#***####*******##*#####**#####***#####*################**########**#######*##**###%############%#%#%%#%%%##%%%%%%%%%@%%%%%@
18 // ####+#+####*##******+-*****###*#***#*##*##########*###*##*#####*########**#######**########**###****####**#######%##*###%%###%%#%#%#%%#%%%%%%%%%%@%%%%
19 // **#-#:###*#*#*#+ =*.**#*##***#***#*#*#****#**#####*#*#*#####*########*#*#######*###**+*##***#*####***#*#*###*###############%%#%###%%%%%%%%%%%%%%%%%%%
20 // ###=*=###*#*****:*-*****#**##*#*#*#**##*#####*###*#***##****################*+++*++**+**#****##**##*###########%#*#####%###%#%###%#%%%%%%%%%%#%%%%%%%%
21 // *#+*-*##*#%#**#*.=*#*##*##***#*#**##****###########*#########***####*#*#***+++**##*******##*##*####*####*############%##%####%##%%#%%%%%%%%%%%%%%%%%%%
22 // ##++=*######*#=:+###********++***##****#%*####******#########*#####*******#***######*+*##*#**#*####*#*##############%%#######%##%%%%%%#%%%%##%%%%@%@%%
23 // %+=-*###%#***=+**#*##**********#**#***#######******##########*###***#*###**#*****#*##+###*########**####*####################%###%%%%%%%##%#%%%%%%%%%%
24 // #*+##++#***=-#+****#+#**#*##*###**##*###*##**#****#*###***###*#####**+%#+******+##**#*#*###*#*#****#**####%####%%###########%####%%%%%%%%#%#%%%%%%@%%%
25 // *+=+#****#####***###+**+***#*###*%#**#####*******###**#####***#*##*###*+*+***+++******#*####*********#########%###%########%%###%%%%#%%%%%%%#%%%%%%%%%
26 // *-+######*#**###*#*#****####*#**##***#####*********#####**##***#*#**#***********#**********#*****##################%######%%%*###%%%%%%%%%%%%%%%%%%%%%
27 // ***#####*######%##*###*#*#*#####****#####******##**##*##***##***#***#***##******+*******####******##*###############%####%%%%*%%%%%%%%%#%%%%%%%%%%%%%%
28 // #*####%########*####*+*************######*****#######**********#*#******%#*#***++****+**###*+**#*###*###%###################%##%%%%%%#%##%%%%#%%%%%%%%
29 // *#####*****#**#++*#*****###*#*****#####******######*##**********#****%****+#**********#*###*##***#*##*##################%###%%%%%%#%%%%%##%%%%%%%%%%%%
30 // #****##**####**####*+**##**#***#**##%#****#*#**#**#*###**#*#*****#*#**####**********#######*##**########%######%###%######%#####%%%##%%%%%##%%%%%%%%%%
31 // ***######*###*#####**#**#*#******####*********####****####*##*########******#******#**#########*###*###%%#####%###%##%%#%#%##%###%%#%###%%%%%%%%%%%%%%
32 // #*****######**#****#*****##****###******#*#*##*#*******#**###########**###*#**#*****#####**#############%#%%%%##%%######%%###%%##%%##%%%%%%##%#%%%%%%%
33 // #####*#*****##****++****##*#*#*#####******#**#********##*#####*#####**######**#****##***###%%###***#####%#################%###%%###%%#%%%%##%%%%%%%%%%
34 // #**#**#******###****+*%#*****######*****#******#*#***#####*#**#*#%#######**%*#*#*#*#%#####%######****#%%#%%############%####%%%%#######%###%#%%%%%%%%%
35 // #**#*####**###*##*+*%*###**######***#####****#****##**#***#######**#******##***####*###################%##%##%%#%##%%%#######%##%%#%%%#%###%%%%%%%#%%%
36 // ***###****#***#****#%#############****#**=***##********#**#**#*******#******#*##*##*##########################%%##########%##%###%#%%%##%##%%%%%%%%%%%
37 // ****#***###****#****#***##**#*##*###*#***=***#*===**#*##**##*********#******####*###########**###%#%########%######%#####%%%########%##%%%%%##%%#%#%%%
38 // #**##*#####**###*****+**#######***#**#*#*=+=-=*+*--=*###**#**********#*###***##############%###*%%%#%%#%###%#####%%###%###%%%#*#######%##%%%###%#%%%%%
39 // ####*#*#*###*#************#*###########**=******=-------+#*-::+**#*#*####**####%##%%########*#%####%###############*#####%%######*##%%#%###%##%%%%%%%%
40 // *##*******#***#***+*#****######***####******#*****###*#*#+-----=***+**++++****######*###########%##%#%%#####%##%########%%%%##%##########%%%####%%%%%%
41 // **#****#****##***#******###**#**#####*##***************######*+====++==-:-==+###+++++#####%%####%###%###%%%#########%#%%##%#%##%#####%%%%#%###%#%%%%%#
42 // *####*####*******#*#*****###***###*#####=+***#*****+=:-#*##############*+*+=====::::-+###++====#########%%##########%%##%%#########%###%%####*#%%%%%%%
43 // *##########**##*****###*##**####***###**-=##*******+...###*##*###*:=####*#******#+::=*###-*****-=###%##%######%####%####%%#########%####%###%#%#%%%%%%
44 // ##**#***##********#**########*#*###*****-=*###*:..*=...###+######   +*#**######%##%%%*------:-:-=##%#######%%%%####%%%%%%%########*#%##########%%%#%%%
45 // #****#####*%#****##*###*####%##****#*#*#=+##**=...:....+##:..:+*.  .+####*#######%%%%###%##*=====++******####%##%%%#####%################%#####%%%%%#%
46 // ***##**##*#*###*#**#######%%##*****#**#+******-...:....#*#=..:--. .=#######+*##%%%%%%####*#%#####*++-+===##+++########%#%##########*###%#%###%%%%%%%%%
47 // #***##*******#**#***#%%%%%%###**#*****#-=**#**.........=***+++-   :*###*##=-+##%%%%#*#+--:*###*#####**==+###+-=+%%%#####%#########*###%%#####%%#%#%%%%
48 // **###**#**##***#**##*#%%%%###***#*#****-+****-::.......=******-  .*######*:.+##%::=-...  .:##*:###+:::-*#%%%###*----=*%#=+-*#%################%%%#%%%@
49 // *#*##*#**###*##*****%%%%%#*#####***###*--*###..:........*****#=  .#**####+.:+%%. .-..   :.=:...:*-... -*#*#%%#%%##%##=-----*##%#*%#*+#%##**#####%%%%%%
50 // *#####*#*+**********%%%##########*****#*=***=.:=.......-##**#*- :+#***#***::*%#. .===  .*=.:::+=+.:-:  :###%%%%#**#%###*#%#####*#==*########%#%##%#%%%
51 // *********+***######*%%%###**#####*#****=+***-:=*:...:...+#**#+ .+##**#*##+.-##%. .+#+. :*+.:=**#*.-#*  -**+*%%%= =#%#+-:*###%*#####*##%%####%#%###%#%@
52 // **********#################*##****#*##*-=***==**:..:=:..-**#*- -*##****%%=.*#%%. :*#+  -#+.:*###=. =-  :*==+%%#: +##*:..#%%%##%#######%#####%%#%##%%@@
53 // *###*####**##****#%#%##**###*****#***#*--*=-=***:..:+*...=##*. -*****####-.+##*. -##*  -#:..:..-* :#. .=*--*#%#. .#:.. *#####%%%#%=%%########%%%#%#%%%
54 // ##******+**#*########%###****###*#*****--*=:++++-...+*+..:+*+  +*****%%%+. :##=. -%#.  =#..   .#: -:.:***-=##%#  **    *###**#**####%%%#####%%%#%#%%@%
55 // *#%#######%##*#####%%#****####**##*#**=#**++=#**+::=##*::=##. .+*+**###%*: -##-..*%%-..=*:..--##    .=###=:*%%*..=#.....-*####*##+*=#%%%%#########%%%%
56 // ###**##***##############******#*##**##++###*################-.=**++*####+. :#*: .+##. =#*..-%%## . -=####-:*#%: .=*=+=:. .=*#####+%*%%#%%%###%##*#%%@%
57 // **#*#*##############*####*#########*#+*+##########*****#####*++***#######- .%=. :##=..*#=..*##*=   :##*#%..=%#...+%%%#*+. -*######%#%#%%%%######*%%%%%
58 // #######*####*#*#%######**####*#######+-*##*####*###*##*#%###*****##%#####- ... .###- .+#-..+-:..    .:-#%..:*+ .=#%:%%#%+ .=####+#==##%#%#####***#%%%%
59 // *##*#****###*####%##*#####**#########+-*###****###**-.+#**###*****####%###:...:*#%##.=#%-..::... -*.   :*-....  --:....   .+%#*#=+-+###@##%##*#%#%%@@%
60 // *#**#################**############**==*##*#*#*#+-::..+****#*+****###%####-:=-**+*##-#%%+*-*++-  -*-.  -##-.. :-++..      -*####%#-+%#%%##%%%@@%*#%%@%
61 // *#*################*#*#############*#+**#####*##**++-=******+--*#########=. .=+. :+#%#*+-=#*###..+##+=-+##*=-:####+: .  .:=#*#%#%%=*#%%%%%%%%@%@#%%%%@
62 // ***#################################*-+#*#########+=+*+##*+=::=#########%+. ...  :#%#::   -=#**==*###%##*+=+#+#%%##*:=:-=**#%%#***###%%%%%#%%%@%%%%%%%
63 // ***#####**##########################*:+*##%%#*####--+#**.....-*######%##+:  ..   .=*- .    :#####+#%#***:..=###%####*####%####*##-*%%%##%%%@@%@%@@%%%@
64 // #*##################################*-+#%###@#%#%%:=*##*.   .+##%###%##*..  ..  .-*#. .=+. .+=-%#==##==+-+:*###%%###*%#%###*##*##*=#%%%%%%%@@%%@%%@%%@
65 // ################*##################%*-*#######%%#=-=###*-:....-*#######+:       .-*=..=##- .=:.##==%#+=*+*###%#%%#*%%##%#%%#%###+*##%%%%%%%%%%%%%%%%%@
66 // #############################%######*+##%#*#####*..=+***##+=-..+###%%%#-      .. -*+.:#*#+. ::.*=-+#*+-*+####%%###*%#%%##%##**##+++##%%%###%%%@%%%%%@@
67 // #####################%#######%######*+####*###+-=....::::--+-. +#%%%#%-:..    :..=*+.-#*#.  .. :.:*#*-:-:-+##*%#####%%#*#%%##+##+=-#%%#%#%#%%%%%%@%%@@
68 // ####################%####%####%###*#*+###%%%##+=-.... ...  ..  +#%%##%. .=.  -+..-**.:==.  :=  .:+##*.....=####%###%#%%%##*##%%#=#-#@%%%@#%##%%@%%%%%@
69 // ####%###############################*-*%%###*####*+*:+:*.. ...=##%%##-.:+=. .=*-  :+: .   :*.  :=#%#...=:=**#*#%*#%%#%#****#*#%#=+%#%@%@%%#%%%@%%@%%@@
70 // #####################%##############+-*%%#*+=***###**#**+=:+*=#%%%%%%::+#*:-+**#.. -.  ..:#=..=.:=#%: :+++%%###*#%#%%#***#**####*=#%%%#@@#%%%%%%%%%%%@
71 // ###################%%#%#####%#######-=*##*+##*-+#***+==***+###%%%%%%#*+###+##***+=-+===++*#- :*-::==. . ..+##*%#%%#%%#*##*##%###*#*%%@%%@%%%@%%%%%%%%%
72 // **################%%%#############%*-+#%#=:*#%+=*+--:..*#*-=#%%%%%########**###*#*#%**####%+-+**:. ....  .-####%#%%%%**##+*#%###+=+@@@%@%##%%%%%%@@%%%
73 // *################%%#############%#%#:+%#*=-*%*.-*-=:::+*==..*%%%#%#%%#%#++*#####++#%#%#####%##%%#+-..#*****#*#%@%%%%%**%@%##%##%==#%#%%@@%#@%#%@@@%%%%
74 // ################%%%%%########%%%##%#:+##+.-*-..=##=***#*- .#%#%#-%#- =%*==%####- -#%#%*#*+*-###%%######%%**#%%#%%%%%%%#%%%####@%==#%%@@%#%%%%%%@@%%%%%
75 // ###############%%%##%######%%%%%%%%*:+%*.:-. ..=#*++++**=:+%%##+-%*..-##==*###+. .=##*==:..-%%*+:=##*+*+###*#%%##%%%%###*%##%%##=%-%%%@@%%%%%%%%@%%%@@
76 // ##**##########%#%%#########%%%%%#%%#:+*-..  .-+##+:.::*-:=%%+#%==#- .###+=#**+:  .-#-=..:.:-+=:...+%+=::=###%#%+###%%#*%*###%%#%*+*#%%@@#%%%%%%%@%%%%@
77 // #############%%##%#%#######%%%%%%#%#-+-..=..+*%##:..:=#: .*=.=+:-#- .+##+:+**=  +.:*-**++**+......+#-:-:.++#%#*#%#%#%########@%%#-@#%%@@#%%%%%%%@%%@@@
78 // *#######*#%%#%%%%###%#####%%%%%%%%%#-++.+-..*#%##..=#%+. .+. -+:**:  ***-:+##=  ...+%#*==%%*..=-####..=*-.:*%*#%###*#*#%%##%#%@#--%@@%@@#%%%%%%%%%%%@@
79 // *#######*#%%%%%%#########%##%%%%#%%#-*#=#*:. ..:...*##:   :. -+.+*. .**=.=#*=  .* .+#%*:+#%#==..+*#* .=##..+*#%#%%%*%%%%%%##%%##=%@@@%@@#%%%%@%%%@%%%%
80 // #***#####%##%%%#*#%########%%%%#%%%#-+%####=.   :::::-::     -*:.+-:+*=..:+=:. :. .+%#=.+%#-.   .+#: :#%=  -*######*%%%%%%##%@%%##%@%%@@##%%%%@%%%%%@@
81 // ##*######%##%%%#########%##%%#%%%%%+-*###%#*==: +:.:..=*     -*-...=**:   :.  :-=.:*#*. *##. -.++#+. :#+. .=##%%%%##%##%%%##%@@*-#%@@@@%%%%%%@%%%%%%%@
82 // #########%%%%#%*###########%%%%%%%%-*#%%####+-*+#*****##=:::-+*++:-**#+...:.  -**..*#-..*#=.-#*%##- .=#:  :#%#%%%%%#%##%%%#*%@%++@@@%%@#%%#%%%%@%@@@%@
83 // #**######%%#%%%#########%##%%%%%%%%-#####*-...:*#%%###%%###*###*###*####**##=:*#*..+%- .*#..=*#.:.   ..  #+%%%%%#%#%#%@@%%%%%##+*#@@@@@@#%#%@%%@%%@@%%
84 // #*#####*#%%%%%%%######%##%%#%%%%@%#-#*=:.....:-*+#%%#=####*-:**#*%#*##*#####++%#*..-#  :##..--:::..   ...=#####%%%%%%%%%%%%%#%@*#=@@@@@%%%@%@%%@%%%@@%
85 // #*#######%%%%%%########%%%%%%%%%%%*-#*+==+=-=#+:.*%#+:##*#-..=##*#*#*#**##%###%#*--**..+%#=+++*++-   .===@%%#@%%%%%%%@%%%%%%%@%+*%@@@@@#%%%%%%@%@%@@@@
86 // #*#######%%%%%%########%%%%%%%%%%#=-#%%***+***+..-%#=.-*#+:..:++--=*=--=##%#######*+=:=##%%%#####=:=.+*##%%%#%%%%%%%%%%%#%%%@#%*-%@@@@@#%####%@%@%%@@@
87 // #*###%###%%#%%##########%%%%%%%%%+*-####*=+***-. -#*..:##=....==  :=.  -#########*...:-*#%%####%%%*@###%%%%%%%%%%%%%%#%@#%%%%#%*-%@@@@%%%%%#%@@@@%%@%@
88 // ###*#####%#%%%########%%%%%%%%%%+*#-####*:+##*-  .:...=#+:...:#-  :+:  .+##%%%##+. .*#*#%%%#%##@%%%%*%%%%#%%%%%%%%%%%#%#%##%*%#%=%@@@@@%###%@%@@@%%@@%
89 // ##**######%%%%#####%#%%%%%%%%%%=***#%##*:.=##* ..::...*+:.:*....  .:. .+##%###%# .-=#%##%#--##++*%%###%%%@%%%%%#+:::+#%%#@%%#@%%%@@@#%%%%#%%%@@@@@%%@%
90 // ##**#%###%#%%#####%###%%%%%%%**+*#-%####::=##= -==*-.:+=.:=:........ .:*#*###%*. .+##%%%%%::*+..-%#: :#%*+*#%%#+..=-*%%%%%%##%%%@@@@%##%%#@%%%@%%@%@@%
91 // *#**####%%####%%####%%%%%%%%%--*##-#*##-.=*#*..=##*..=#...:-... .:   =+#**#*##- .+#%###%%*:=#=..+#-  :#%: :*%+-...%+%%%%%%%#%+%*%@@@%##%%%%%%@@@%@@%@@
92 // ***###%%%#####%%######%%%%%%+-*###-####+:#*=*.:+#*-..+:..=*=...=*.   -%##%##*#- .*%+:::+%=.*%+..=+.  .--. .=+....+%%%%##@@%%*-%+#@@@%%%@#%%%%%@@@@%@@%
93 // *+*#%%%####*#%######%%%%%%%%=-###%-##%**##=*--##*%:..**--#*...:*#-.  **#**%##*: .@%-  -%#::+#-..%#:   ..  .+#....:#@@@@#@%#+#%%+#@@@@@@%%%%#@%@@%%@@@@
94 // **######%%#######%%##%%%%%%#=*#%##-###*=-+--+-##%##==*##*###:-*#***:+:%%%%**#*. .**-  :%#..##-..-*.      .+=#-:....-%%%%@#%==%*:#@@@@%#@#%%%%%@%%%%@@%
95 // **######%%##########%%%%%%%#=#####=+-+++=+#*-*########*########*#%*##*#######+.       :#+..-+:.:+-.       :#%##=....#%#%%#%+##*-*%@%@%%%@%%%%@@%@@%%@@
96 // ########%%#######%##%%#%%%%+=##%###+=:=+##*--#########*##**#**#%#*###%##%#*#%#+.      :%-...:..*#-.-     .**+#%#+=:.-#%@%%%#%#=-+%%%@%%%%#@@%@@@@%@%%@
97 // ######%%%#####%#####%%%%%%%+*######--=+##*=:*###*######%####*##%#####%%###*#%#%: :-:: -%*:....-%*:.#+    =-..*#%##. .+@%%%*#%#--#%%%@%@%%%@@@@%%@@%%@@
98 // *#*#%#####%########%%%%#%#**#%#%##--#%##*=:+*#####%#%%##*##%#%#*#*##%%@##*#*%###%@%%==*%#.:.:.%%*.=%#=   -....*%@-..-#@#%%**%#=+*%%@@@@%@@@#@%#%%%@@@@
99 // *##*##%%%%#######%%%%#####%#####*=###%#=+-=-**######*#%####*###%%###*###*#*##%@#%@@#####%%*-#@%%#+#%%:..:%##-.......-%#%%##%%-++#@@@%@%%#@%%@%%%@@%@@@
100 // ***####%%%#####%###%%%##%#*+#%*#*####%%*-*==+=+*++**=+###*#*####%##########*#%@%@@@%%#%%#%%%%%%%%%%%%*=#####*:....::+%%%%#+%%-*-#@%@@%@##@%%%@%#%%@@@@
101 // ***##*%##############%##%#=+#**######%%**=+#==+**+**=-==+##=#####%#######*##%%@%%@@%#%%%##%%%%%%%%%%##%#%###%+..--+#%%%%%+#%%**-#@@@%%@%%@#%%%%%@@@@%@
102 // *#**#*####%###*#%%%%%%##%#-+##%####*##%#+=+-#--+#####*#**+--##%##-=*###**##%%%#@@@%%%@@%#@#*%%##%%%%%%%%%%#%%%*%%%%%%%%%%=%%=%*-#@@@@%%@@%%%@%@@%@%@@@
103 // %#*+**#%########%%%%######-*######%#*+#-:=#=*-########*#%%%##+---#=+::-#%####%%%@#%%@%@##%%%#*##%*##@%%%%%@####@%%%@%##%%@%%=-*:#@%%%%%@%%%%@@@%@@@@@@
104 // ***+*+####%%##%###%@%#%%%*=%%##%####+-*--+#%%%%%%#%#%###%%%%%%###%+-==-:-*%==#%%%#%%%%@%%%@%%##%#%%%%%%%%#%##%%%@#@@%#%#+%%=*=+:#%@@@%%%%%%%%@@%@%@@%@
105 // #***+*####%#####%##%##%#%-=%%%######:+#-+%%%%%#%%#%###%%%%%%%%%%%#%###+++*%%=-+*++*****%#*#%%####%%%%%%%###%###%%@@%%%%**%%*+*-:#@@%%%%##%%%%@%%%@@@@@
106 // #****##%########%%#%#%%%+-*%%######==#%*%%%%%%%##%#########%###%#%#%%###%@@%##*+++*+--=*%#*+*#%#%%#%%%%%#%#####@@@%#%%***%#%%**+#+@@%%##%#%%@%%%%%@@@@
107 // *****##########%%%%%%#%++-###%#%##%*=%%%%%####%%%%%#%#*#%#%%####*####%%#%%%%%%%##%##**#%+----=#%%%%%%##*#@%%%%#%@@@#%*-=%%##%#%*=-%@@@%%%%#@%@@%@%@@@@
108 // *##**#%##########%%%####-##%####*#%=%#%%%%##%#%%%%%%**%*##%%##*##%###@%%@@%#%##%#%#%%%%##%%%%=------#-+##%##%%@%@%%@%+*%@%%%%#%**%-%%%%%%%@@%@@@%@@@@@
109 // +################%%%%###=%%%##%#+**+%%%%%%%%####%#*#####%%%###*##%%#%%%%@%@#%##%@###%%%##%%#%%%%%###*===--**##*#@++=+%%%#%%%%%#+#+==@%@%%%%#%@%@@@@@@@
110 // *#*#*###%#%##%#%%%%@%%#+#%%%%%##*++%%%#%%%%######%##%%#%%########%*+#@%@@%##%%%%%%%%@%%%%%%%%%%%%%%#%%%%#+=-=++*%%#%%%%%#%%%%@*--%#=@%%%%@@%@@@@@@@@@@
111 // #**##%#%%#%######%%%%%+*%####%#**#%%%%%%%%%#%###%%%##%#%%#+##%##%#++#@++#@%@%#%#@%@@%%%%%%%%%%%%%@%%%%%%#%#+*##%%###%%%%#%%%%%#+-%#=@@@%@@@@@@@@@%@@@@
112 // %#####%#%#%###%%%%+#=*+#%######=##%%%%%%%####%#%%%%#%%%%*-*%*=##%+#%*=-=%%##%@%%%@@%%@@%%%%@%%@#%%*%%%#*%#*+=#%%%%%%%%%%%@%%%%#=-%@#@@%#%%@@#@@@@%%@@%
113 // #**####%%%*#%%%%#+#%#*%%#%#%###=##%%%#%%%%%###%#%%##%%#*-=+*%%%%%#*=-----*####%%@#%%%%%%%%@%%@#%@#*#%#%%@%@%#-+%%%%%%%%%#%%%%%#*%%@%@@##%@@@@@@@@@@@@@
114 // %***###%%%#%%%%%%##=**%%%%#%#%#%#%@%%%%%%%%%%%%%###%%%##=#%%%##%%%%%%%%%*#*##%%@@@@%%@%%%%#%%%%%#%%#@#%@%@%%@#==#%%%%%%%%%%%%@**%%%##%%#%@@@@@@@@@@@%@
115 // #*#####%####%%%##%*=+###%#%%*#+%##%%%%%%%%%%%%##%%%%%%*###%%#%%%%#%%%%%%%%++*%%@@%%%%%#%%%@%%@@%%%%%%##%#%@%%%%***%%%%%#%%%%%%*+%##-#%%%%%@%@@@%@%@@@@
116 // ######*#%%%%%#%%#%=+%####%##==#%#%#%%%%%%%#%#%%%%%@%*#%##%###%%%%#%%@@#%%%##**%@@%%%%%#%%@%%%%%%%#*%%%%#%#%%@%%%%==%##%%%%%%%#*+%#@=%%@@@@@%@@@@@@@@@@
117 // *%##%%%##*@###%%#**##%%%%%%+-=%%@%%%#%%%%####%%%%%%%*#%%%#%%%%%%@%#%%%%%%%#%%%+=@%%%%%@%%#@@@@%%%%%%#%%%@@%%%%#%%%-+*+%#%%%%%%*+%%--#@%%%@@%@@@@@%@@@@
118 // %###%###%######%%#%*%%%%%%#+-*+*#*#%###%%#%%%%#%%%#*+%%###%%%%%%@%#%##%%%#%%#%%-@@@@%%#%%@@####%%%@%%@%%@##%#%#%%@%--+%%##%##%*+##%+@@%%%@@@@@%@@%%@%%
119 // ####%#%#%###%##%#*%#%%%%%#%####**#*###+*#%%@@%%%%%%##%%##%%%%%%%%%%%%%%%%%%%%%%+-%%%%@##%%@%%%%%%%%%%%%%######@%%%%@#+%%#%%##%%%%%*%@%%@#@@@@@@@@@%@@@
120 // %#*#%*#%%%##%%%+*%%%%%%%###*#***#########%%##%%%%%#*%###%%%%%%%%%%%%%%%%%%#%%%%%++#%%%##%%%%%%%%%%%%#%%%##%##%%%%@%@@*+%%%%%%%##%%-%@@%%%@@@@@@@@@%@@@
121 // ##*####%@@###%#-#%%%#%%%%+**###*######%#####*%@%#####%#%%%%%%%%%%%%#%%%%%%%%%%%%%===%%##%%%%%%%%@%%%%%%#%###%%#%@@@@@%=%%#%%%#%%%@-%@@@%@@@@@@%%%@@@@@
122 // %%#%%##%%#%###**%%%###%#%-##%%#####*##%#####%@%%*+*%###%%%%%%%%%%%%%%%%%%%%%%%%%%*+==#%%%@@%%%%@%%%%%%%#%@%%%%%%@@@@@@**@%%%%#%%%@-**%%@@%@%@@@@@@@@@%
123 // #*#%*#%%%#*%#%-%#%%%%##%#-=##%#####%%%%#@%%%%%@%%*@%%##%%%%%%%%%#%%%%%%%%%%%##%%%%*#-#%%#@@@%%%#@%@%%##%@%%%%%%@@@@@@@@==%%%%%%#%%%**%#%@@@@@@@@@@@@@@
124 // #*#%%@%%%%%%%*#%%#%%%%%%**#%%%##*#%@%%%#%%@%%%%#%#%%%%%%%%%%%%%%%%%%%#%%%%%%%#%#%%%%#*%%#%%@%%%%%%%%%%##%%%##%@@@@@@@@@@=%#%%%%%%%%++%@%@@@@@%@@@@%@@@
125 // ###%#%%%%%#%#+#%#%%#%%%%-*%####*##%%%%%%@@%%%%##%+#%%%%#%%#%%%%%%%%%%%%%%%%%%%%%%%%%%-%%%%%@%%%%@%%%##%%%%%%%@@@@@@@@@@@%=*%%%%%%%%*=%@@@@@@@@@@@@@@@@
126 // ####%#%%#%##**#%#%##%%%+*##%#%%##%%#%%%%#@%%#%%%*%#%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%#%%%@%%%%%%@%%%#%%%%%%#%@@@@@@@@@%@%++%%%%%%%%#+%@@@@@@@@@@@@@@@@
127 // ####%#%%%%##+#%%%##%#%%=*@%%###%%%%#%%@@%@@%#%%%=####%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%%%#*#%#%%%%%%#%%@#*###%%%@@@@@@@@@@@%@#*%%%#%#%%%#%%@@@@@@@@@%@@@@@
128 // #%%%%@##%*%###%#%%%##%**@%#%%###%%@%%@@%#%%%##@*####%%%%%%%%#%%%%%%%%%%%%%%%%%%%%%%%@#-+%%%%%@%%%%%%%@%#%%%%%@@@@@#@%#@@@%**%%###%%%+#@-@@@@@@@%@@@@@@
129 // ####%%#%#-*+%%%%%%%%#%**%%%%%##%##%%%%%@%%%%@%#+*%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%#%#*%%@%%%%%#%%##%%%#%#%%%@@%@%%@@@%%@*-#%%%%%%%*#@=@@@@@@%%%%@@@@
130 // %#*###%%*++%%%%%%%%%%####%%####%%%%%%%%@%%#%%%#+*#%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%#%%%%%%@%%%%#%%%%%%%#%%@@@@@@@@%@@@@%@%=#@%%#%%%%=#-*@@@@@%@@@@@@@
131 // @##**#%*==%#%%%%%%#%%*+%#%%%#%##%%@%@%%@%%##%%%%%%%%%%%%#%%%%#%%%%%%%#%%%%%#%%%%%%%%%%%*#+%%%%%###%%%%%%*#%%%@@@@@@@@%@%@@@=%@%%#%%%%#=#%@@@@@@@%@@@@@
132 // %%##@%%%=#%###@%%%%%%**%%#%%%##%%%%#%@%@@##%%%%%%%%%%%%%#%%%%#%%#%%%%%%%%%%%%%%#%%%%%#%+*%%%%%%###%%%#%%%#%%@@@@@@%#%%%%@@%=%%%%##%%%%##+*%@@@%%@@@@@@
133 // %@%%###+*########%%%##%@%#%###%@@%#%%@%%#%#%%#=##%%@%%%#%%%@%%%%%%%%%%%%%%%%%#%%%%%##%%%#%=@%%#@@%@#%%%%*%@@@@@@%%%@@@@%@@@%-#+%#%#%%#%%+*-@@@@@@@@@@@
134 // #%#%#%#*##%%%%%%%%%%#=%%%%%%%%%%%%%%@@@@#%%%%==##%%#%%%%%%%%%%%%%@%%%%#%%%%%%#%%%#%%%%%%*-##%@%#%%#%#%##%%@@@@@@%#%@@@%%%@@@+%%%%%%%%#%%%#%#@@@@%@@@@@
135 // %##%%%**%%%##%%#%%%%#*%%%%%%%%%%%%@%@%%%%@%@*#=#%%%#%%%%%%%%%%%%%%%%%%#%%%%%%%#%%%%%%%%%%++=##%%#%##%%%#%@@@@@@@%%@%@@@%@@@%@%%%#%%%%#%%##@-%@@@@@@@@@
136 // %%#%%#+#%###%%%%%%%==%%%%##%%%%%%%@%@@@%%@%%#%#%%%%#%%%%%%%%%%%%%%%%%@#####%###%%%%%%%%%%%*++#=##%%#%%%%@@@%%@%%%%@@%@@%@@@%@=*%%%%%%%%@%%*#@@@@@@@@@@
137 // %#%#%-#%##%##%%%@%@-%%%%@%%@%@%@@@%%%%%%%%%=#@%%%##%%%%%%%%%%%%%%%%%%@#%#%#%%%%%#%%#%%%%%%%%+*-%#%###%@@@@@@@%@@%%%@@@@%@@@@@#=%%@#%%%#%%@+%-#@%@@@@@@
138 // ####%=#%###%%%%%%%%=%%%%%%@@%%%@@@@@%%%%%@@+#%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%#%%%%%#%%####%#%%%##%%@@@@@@%@@%%@@@@@%%@@@@@#+%%@%%%%%%%%=@-%@@@@@%@@
139 // @##%#%#######%%#%%%%%@%%@%%%%%@%@@@%%%%%%@%%%%*%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%=*%#@%@%%@@@@%@@%%%@@@%%%@@@@@###%@%%%%%@%%+@-*#@@@@@@@
140 // %%#%+%%#%%#%%%#%%%+#%%%%%%%%%@%@@%@%%%#%@%%@%%#%%%%%%%%%%%%#%%%%%%%%#%%%%#%%%%%%%%%%%%%%%#%%##%%#*##@%@@@%%@@@@@@%@@@%@%@@@@@%%+#@%@%#%@%%%*+**@@@@@@%
141 // @%#+##%##%%@%%%%%%=%@%%%%%%%%%%@@@@@%@%#%@%#%%##%%%%%%#%%%%%%%%%%%%#%%%%%#%%%%%%%%%%%%#%%%%%%%%%%*#%%@@@@@@@@@%@@@@@@%%%@@@@@@#-#@#%%#%@@%%-%=#@%@@@@%
142 // #%#+#%#%#####%%%#*#%%%%%%%@@%@@@@%@@%%%%%%**%%%%%%%%%%%%%%%%%%%%%@%%%%%%##%%%%%%%%%%%%##%%%%#%%%%+#@#%@@@@@@@@%@@@@@@#@@@@@@@@#-#%%%%#%%%%@#@+@@@@@@@@
143 // %%#*%%##%#%%%%%#%+*%%%%@@%%%@%%%@@#%#%@%%%**#%%%%%%%%%%%%%%%%%%@%%%%%%%%%##%%%##%#%%@#%%#%#%###%%#@@@%%@@@@@@@@@@@@@%%%@@@@@@@%%%@%%%#%@%%%%++@@@@@@@%
144 // *@*=#%%%%#%##%%%##%%#%%%@%@%@%@%%@%%%%@%@%+*#%%%#%%%%%%%%%%%%%%%%%%%%%%%%#%%%%#%%%#%%%%##%%%%%%%**@@%@@@@@@@@@@@@@@@%%%@@@@@@@@##@%%%%%@%%%%%#*%@@@@@@
145 // #%**##%%%##%#%#%##%@@%%%%@@@@%%@%%%%#%%@%%++%%%%#%%%%%%%%%%%%%%%%%%%%%%%%#%@%%%%%%#%%%%#%%%%%%%%#*@@%%@@@@@@@@@@@@@#%@@@@@@@@@@**%@%%%%%@#%%%*:+@@@@@@
146 // ####%##%%%##%%%%*%#%@@%%%@@%%@%@%@@%#%%@%#+*%%%%#%%%%%%%%%%@%%%%%%%%%#%%%%%%%%%#%%%@#%%##%%%%%%%%#@@@@@@@@@@@%@@@@@@@@@@@@@@@@@*#@@%%@@%%%%%%%+-@@@@@@
147 // @%%%###%%*%%%%##**=-@%%%@@@@%%@@@@%%%@%%%*+%%%%%#%%%%%%%%%%@%%%@@%%%%#%%%%%%%%#%#%%%%%##%%%%%%%#=@%@@@@@@@@@@@@@@@@%%@@@@@@@@@%*#@%%%%%%#%%@#%%%@@@@@@
148 // @*+#%#%%%#@%%%%%%%#--#%%@@%%@%@@%%%%@%@%%**%%%%%#@%%%%%%%@%%%%%%%%%%%%%%%%#%%%%%%%%%%%@%%%@%%#%%+%@@@@@@@@@@@@@@@@#%@@@@@@@@@@@@@%%%%%%%%%%@%@%=@@@@@@
149 // #+*##%%%%%%%%#%#%%%=-=#@%@@%@%%%%%%@%%%%%#+%%%%%%%%%%%%%@%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#-*%%%%%%%%%%@%=%@+@@@
150 // ####%%%%%#%%#%##%%%#+:=#%@@@%%%#%%%%@@%@@#+%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@#==%##%%@%%%%@%*#@=@@@
151 // %#*+#%%%%#%%%%%%%%%##+:-%%%%%#%%%%%%%%@%@#+%%%@%%%%%%%%%%#%%%%%%%%%%%%%%%%@#%%%%%%%%#%%%%%%#%%@-@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#-%#%%%%%%%%@%%=%-#@@
152 // @@@%-%#%%#%%###%%##@%#++-@@%%#@@%%%%@@%@@#+%@%@%%%#%%%%%%%%#%%%%%%%%%%%%%%%%%%@%@%%%%%%%%%@%%%%=@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@%%-%#%%%%%%%%@%%-@#*@@
153 // @@**=%%%%%@%%%%%%%%%@%%#=##%@%@%@@%%%@@%%*+%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%@@@@@@@@@@@@@@@%@@@@@@@@%@@@@@@@@@@-%%%@%@%%%%%%@@-*#@@
154 // %@%#%=@%%@%%%%%%%%%%%%%#%-**#@**%@%#@%%@%#*%%###%%#%%%%%@%%%%%%%%%%%%%%%%%%#%%%%%%%@%%%%%%%%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-%%%%%%%%%%%%@@+=*@@
155 // %%%#+*%%%@%%%%##%%%%%%%#%*+=++-++%@=++%%%##%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%-@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@=%%%%%%%%%#%%%@@*+@@
156 // #%@%#++%%@%%%%%#%%%%%%%%%%%######@@--+%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%%%%#%%%=@@@@@@@@@@@@@%%@@@@@@@@%@@@@@@@@@@*%%%@@%%%#%%%%%@#=#@
157 // #%%%#%=%%%%%%%@#%%%%#%%@%%%%%@%%%%@%:-*%%####%%%%%%%%%%%%%%%%%%%%@%%@%%%#%%%%%@%%%%%@%%%#%@%%%%%@@@@@@@@@@@@@@%@@@%@@@@@@%@@@@@@@@-=%%#%@@%%%%@%%@%*+@
158 // %@@%#%*+#%@@@%%@%%%%%%%%%%%%%%@%%%%@%=-#%#%%%%%%%%%%%%%%%%%%@%%%%@%%@%%%%%%%%%%%%%%%%%%%%%%%%%%@%@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@%=@%%%%%@%%%#%@%%@%++@
159 // %@@%%%%=+%%@@%%%%%%%%%%%%#%%%%%%%%%%%#=*#@#%@%%%%%%%%%%%%%%%@%%%%%%%%@%%%%%%%#%%%%%%%%%%#%%%%%%%*@@@@@@@@%@@%@@@@@@@@@@@@@@@@@@%*%%@%%%%@%%@#%@%%@%*#@
160 // *%@%%@@%==%@%@@%%%%@%%%#%%%%%%@%%%%#%#*+*#=*+%%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%#%%%%%%#=@@@@@@@%@%%@@@@@@@@@@@@@@@@*@*##@%%%%%%%%%%#%@%%@%%*@
161 // #%@@%%@@%-@@@%@%%%%@%#%%%%%%%%%%%%%%%%%#=%=+#=%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%#%%%%%@#=@@@@@@%@@%%@@@@@@@@@@@@@@##%=%%@@%@%@%@%%%#%%@%@%%%=%
162 // @%@@@@%@@%-%%%%@%%%%@%#@%%%%%#%%##%%#%%%%%+-+%%%%@%%%%%%%%%%@%@%%%%%%@%%#%%%%%%%#%@@@%%%%%%#%%%@=@@@@@@@@@@@@@@@@@@@@@@@-+@=-@%@@%@%%%%##%%#@@@%@%%@=*
163 // @%@@@@@%@%%+#%%%#%%%@%#%%#%%%%%%#%%#%%%%%%#-%-*%=#%%%%%%%%%%@%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%%#%*@@@@@@@%@@@@@@@@%%-%==@@@%%%#%%%%%%%@%#%%%%%%%%%%%%=:
164 // @@@%@@%@@@@#=+%%@%%@%%%%@#%%%#%%##%%%%%#%%%=%-*%+##%%#%%%%%%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%-#@@@@@%@@#@*%@@##%*+*@@@@%%%%%%%%#%%%%@%#%%%%%%%%%%@@+:
165 // %@@%@@@@@@@%*-=%@%%%@%%%@%%%%%%%%%%%%%##%%%=%*%#%%-%%%%%%%%%%%%%%%%%@@#%%%%%%%%%%%%%%%%%%%%%%+-*@@%##@%@*@#%*%**%%%%@@@%@%%%%%%%#@#%@%#%%%@%%%%%%@@@**
166 // @@%%@%@@%@@@%%-#=%%%@%%%%%@@%@%%%#%%#%%%%%%==%%%@=-%%%%%%%%%%%@%%%%%@%%%%%%%%%@%%%%%%%%%%%%@*-#@%#@@@@*=%@@+=@@%%%%%@%%%@%%%%@%%%%%%%%%@%%%%%@@%@@+##@
167 // %%@@%@@%#@%%@@#@+*#%%%%%%%%@%@%%@%%%@##%%%%%#%%%%@:=%%%%%%%%%%%%%%@%%%%%%@%#%@@%%%%%%%%%%%%#-*%@@%==------%%@@%@%%%@%%%%#%%%#%%%%%%%%%%%%@@%@@%@@*-*@@
168 // #@@@%@@@%%%@@%@=##+%%%%%%%%%%%@%%%%%%%%%%@%#%%@%%@-=%%%%%%%%%%@%%%@%%%%%%@%%@%%%@%%%%@%%%%#-++=++*+==+@%@%%%%%%%%%%%%%%%%##%%%%%%#%#%@%%@@%@@#+#%@*@@@
169 // #%%@@@@@@@@%@@@@+++@%%%%%@%%%%%%%%#%%%%%%%%%%%@@#*+=#%%%%%%%%%%%%%%%%%%%%@%%%*#%%%#%%@%%%%+=%%%%%%%@@@%%%%%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%@%@@%+*%@@@@@@
170 // %%%%@@%@@@@@@@@@%==%@%%%%%%%%@%%%%%%%%%%%%%%#%@@+*+#%%@%%%%%@%%%%%%%%%%%@@%%=+#%#+%%%%%%%%-#%%%%%@%@@%%%##%%%%%@%%%@%%%%%%#%%%%%%%%%%%%@%%@%=+*@@@@@@@
171 // %%%%%%%@@@@@@@@@@%=%@%%@%%@%@%%%%%@%%%%#%%###%%@=%=@*#%%%%%%@%*#%##%%%%%%+===%%%=#%%%#--+=#%%%%%%@@@%%%%%%%%%%@%%%%%%%%%%%%%%@%%%%@%@@%%%@%%-+@@@@@@@@
172 // @%@@@@@@%%@@@@@@@@@*@@%%%%%%%%%%@%#@%%%%%%%%%@@%=%-#**-+%%@%%%+#%#%%%###+---%%%-=%%#-%%%=#%%%%%@@%@%%%%%@#%%%@%##%%%%%#@%%%%%%@#%%%%%@%-%*#@=@@@@@@@@@
173 // #@%%@@@@@@@@@@@@@@@+-#@%%@%%%%#%%%#%%%%%#%%%%%@@==-=+*+#%@%#%#-*##%#%%#+++*%%#+-#%%+*##*%%%%%%@@@%%%%%%@%%%%%%#%%%%%%%@@%%%%%@%%%%@%%#-=*#@@%@@@@@@@@@
174 // #%%%@@@%%@@@@@@@@@@@+=*%@%%%%%#%%%#%%%%%#%%%@%%@*%-=*-%-#%@+%#+#+#%%%%+=*#%*##+-+##+++#@%%%%%%@@%%%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%@@%@%=-%#@@@@@@@@@@@@@
175 // %%@%@%@%@@@@@@@@@@@@@##+@@%%%%#%%%%%%%%%#%%#%%%@%@-+#*+-=#@%@*##=#%%%+-+*%+--+**%=-+==#%%%%%%@@%%%%@%%%%%#%%%%%%%%%%%%%%%%%%%%%%%@%%*-#@@@@@@@@@@@@@@@
176 // @@@@@@@%@@@@@@@@@@@@@@@%=%@%%%%#%#%%@#%%#%@%%@%@%=-==%%-*-%@=##=#%*--##+%=.+=*=--..::-@%@@%%@%@%%@@%%%%%%%%%@%%%%%%%%%%%@%%%#%%@@@%#*%@@@@@@@@@@@@@@@@
177 // %@@@%@@@%@@@%@@@@@@@@@@@@#+@@%%%%%%%%%%#%#%%%@%%%@--=#*-=++%-%%*#%%+*---=*+**. .*. :*@=%@%%%@%%#%@%%%%#%%@%%@%%%%%%%%%%@@%%#%%@#=-@%@@@@@@@@@@@@@@@@@@
178 // @@@@@@@@@@@@@@@@@@@@@@@@@@%*@+%%#%%%%%%%@#%##@%***::=*#*#+*--*+#@@%*==+:- = . :+.:-*=#*%%%%%@@%%%%%%%%%%@%%@%%%%%%%@%%%@%%%%@%#+=%@@@@@@@@@@@@@@@@@@@@
179 // @@@@@%@@@@@@@@@@@@@@@@@@@@@#%#*%%%#%%%%%#####@%#+-=:=*:*+=+-=#*%%%*#++ :-. -:.-..-:=%=@%%%%@@%%%%%%%%%%%%@%@%%%%%%%%%%%%%%%@@**=+@@@@@@@@@@@@@@@@@@@@@
180 // %@@@@@@@@@@@@@@@@@@@@@@@@@@@@##%%%%%%%%###%##%%@%=%:+=-**-=-:=*#%++-: ... +:.==.-=:-+=%%%%%@@%%%%@%%%#%@%%%%%%%%@%#%%%%%%%@@++*+@@@@@@@@@@@@@@@@@@@@@@
181 // @@@@@@@@@@@@@@@@@%@@@@@@@@%@@@@%%#%#%%#%%####@%*+-#--+=.--=...:--*+:-..:=*:-:-:::-=*-#@%%@%@%%%@%%%%%%%%%%%@%@%@%%%%%%%@%%---=@@@@@@@@@@@@@@@@@@@@@@@@
182 // @@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@+%##%%%##%#%##%%*.-%..*.::-. -#-=@.:--=.-+--.-:.:=-#=%%%%%@@%@%@%#%%%%%%%%@@%@%@@%%%%%%%+-#==@@@@@@@@@@@@@@@@@@@@@@@@@@
183 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=@%%%%%%%%##%#%##=:* .- -.::=#*-- :-*-.*-:= -.::#*:#=**@%%%%%%%%%%%%%@%%%@@%%@%%%%@%##+=#-=#@@@@@@@@@@@@@@@@@@@@@@@@@@@
184 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%=%%#%%%@%%#%%%%##-:..:+.:.:=:==-.::*=+:-::. .  :-.=%**%@%@%%%%%%%%%%@@%%%@@%%%%@%###-*=**#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
185 // @@@@@@@@@@@@@@@@@@@%@@@@@@%@@@%=%@%#%%%%%#%%#%%%-...... -=:++:+--=::.=---:.- ..: =**@@@%@@@%%%%@@%%@%%@@@%%@@@+%%+%-*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
186 // @@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@=#@%%%%@%##%%%%#+:.- .  .++-==:-+#:  .#:...# .=:.%%=*%@%%%%%%%%%@%@%%%@@@=----@----@%@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@
187 // %@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@=%@%%@%%%#%#%%%#--#-    *+:*-.=+. :...-:.:*.:+:.-*=:#%@@%%%%%%@@%%@%#%+*#@@#*@==@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
188 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=%%@%%%%%%%#%%@#-=+:. .:-##=.::.=.:-::. =*=:...:-+=-#@@@%%%%@@%@%%%#+%#@*+*+=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
189 // @@@@@@@@@@@@@@@@@@@%@@@%@@@@@@@*@%%%%%%%%%%%%@**%-   ===+*-=+=+=-+-..-=+*:.:-:-*%=##%@@%%%%@@@%%%**@@#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
190 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%@%%%%%#@-*@.+=.=*=-#+#=.-=.-:=*:-::.+.#--+=#@@%@@@%@%%%%%%%*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
191 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@#%%%%%%@%%%%@@@*#= %:-.++*+=%.#%--%%+#+=%%%@%%@@@-@@@@@%@@%@%%%@@+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@
192 
193 // File: @openzeppelin/contracts/utils/math/SafeMath.sol
194 
195 
196 // OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)
197 
198 pragma solidity ^0.8.0;
199 
200 // CAUTION
201 // This version of SafeMath should only be used with Solidity 0.8 or later,
202 // because it relies on the compiler's built in overflow checks.
203 
204 /**
205  * @dev Wrappers over Solidity's arithmetic operations.
206  *
207  * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
208  * now has built in overflow checking.
209  */
210 library SafeMath {
211     /**
212      * @dev Returns the addition of two unsigned integers, with an overflow flag.
213      *
214      * _Available since v3.4._
215      */
216     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
217         unchecked {
218             uint256 c = a + b;
219             if (c < a) return (false, 0);
220             return (true, c);
221         }
222     }
223 
224     /**
225      * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
226      *
227      * _Available since v3.4._
228      */
229     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
230         unchecked {
231             if (b > a) return (false, 0);
232             return (true, a - b);
233         }
234     }
235 
236     /**
237      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
238      *
239      * _Available since v3.4._
240      */
241     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
242         unchecked {
243             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
244             // benefit is lost if 'b' is also tested.
245             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
246             if (a == 0) return (true, 0);
247             uint256 c = a * b;
248             if (c / a != b) return (false, 0);
249             return (true, c);
250         }
251     }
252 
253     /**
254      * @dev Returns the division of two unsigned integers, with a division by zero flag.
255      *
256      * _Available since v3.4._
257      */
258     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
259         unchecked {
260             if (b == 0) return (false, 0);
261             return (true, a / b);
262         }
263     }
264 
265     /**
266      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
267      *
268      * _Available since v3.4._
269      */
270     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
271         unchecked {
272             if (b == 0) return (false, 0);
273             return (true, a % b);
274         }
275     }
276 
277     /**
278      * @dev Returns the addition of two unsigned integers, reverting on
279      * overflow.
280      *
281      * Counterpart to Solidity's `+` operator.
282      *
283      * Requirements:
284      *
285      * - Addition cannot overflow.
286      */
287     function add(uint256 a, uint256 b) internal pure returns (uint256) {
288         return a + b;
289     }
290 
291     /**
292      * @dev Returns the subtraction of two unsigned integers, reverting on
293      * overflow (when the result is negative).
294      *
295      * Counterpart to Solidity's `-` operator.
296      *
297      * Requirements:
298      *
299      * - Subtraction cannot overflow.
300      */
301     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
302         return a - b;
303     }
304 
305     /**
306      * @dev Returns the multiplication of two unsigned integers, reverting on
307      * overflow.
308      *
309      * Counterpart to Solidity's `*` operator.
310      *
311      * Requirements:
312      *
313      * - Multiplication cannot overflow.
314      */
315     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
316         return a * b;
317     }
318 
319     /**
320      * @dev Returns the integer division of two unsigned integers, reverting on
321      * division by zero. The result is rounded towards zero.
322      *
323      * Counterpart to Solidity's `/` operator.
324      *
325      * Requirements:
326      *
327      * - The divisor cannot be zero.
328      */
329     function div(uint256 a, uint256 b) internal pure returns (uint256) {
330         return a / b;
331     }
332 
333     /**
334      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
335      * reverting when dividing by zero.
336      *
337      * Counterpart to Solidity's `%` operator. This function uses a `revert`
338      * opcode (which leaves remaining gas untouched) while Solidity uses an
339      * invalid opcode to revert (consuming all remaining gas).
340      *
341      * Requirements:
342      *
343      * - The divisor cannot be zero.
344      */
345     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
346         return a % b;
347     }
348 
349     /**
350      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
351      * overflow (when the result is negative).
352      *
353      * CAUTION: This function is deprecated because it requires allocating memory for the error
354      * message unnecessarily. For custom revert reasons use {trySub}.
355      *
356      * Counterpart to Solidity's `-` operator.
357      *
358      * Requirements:
359      *
360      * - Subtraction cannot overflow.
361      */
362     function sub(
363         uint256 a,
364         uint256 b,
365         string memory errorMessage
366     ) internal pure returns (uint256) {
367         unchecked {
368             require(b <= a, errorMessage);
369             return a - b;
370         }
371     }
372 
373     /**
374      * @dev Returns the integer division of two unsigned integers, reverting with custom message on
375      * division by zero. The result is rounded towards zero.
376      *
377      * Counterpart to Solidity's `/` operator. Note: this function uses a
378      * `revert` opcode (which leaves remaining gas untouched) while Solidity
379      * uses an invalid opcode to revert (consuming all remaining gas).
380      *
381      * Requirements:
382      *
383      * - The divisor cannot be zero.
384      */
385     function div(
386         uint256 a,
387         uint256 b,
388         string memory errorMessage
389     ) internal pure returns (uint256) {
390         unchecked {
391             require(b > 0, errorMessage);
392             return a / b;
393         }
394     }
395 
396     /**
397      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
398      * reverting with custom message when dividing by zero.
399      *
400      * CAUTION: This function is deprecated because it requires allocating memory for the error
401      * message unnecessarily. For custom revert reasons use {tryMod}.
402      *
403      * Counterpart to Solidity's `%` operator. This function uses a `revert`
404      * opcode (which leaves remaining gas untouched) while Solidity uses an
405      * invalid opcode to revert (consuming all remaining gas).
406      *
407      * Requirements:
408      *
409      * - The divisor cannot be zero.
410      */
411     function mod(
412         uint256 a,
413         uint256 b,
414         string memory errorMessage
415     ) internal pure returns (uint256) {
416         unchecked {
417             require(b > 0, errorMessage);
418             return a % b;
419         }
420     }
421 }
422 
423 // File: @openzeppelin/contracts/utils/Strings.sol
424 
425 
426 // OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)
427 
428 pragma solidity ^0.8.0;
429 
430 /**
431  * @dev String operations.
432  */
433 library Strings {
434     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
435 
436     /**
437      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
438      */
439     function toString(uint256 value) internal pure returns (string memory) {
440         // Inspired by OraclizeAPI's implementation - MIT licence
441         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
442 
443         if (value == 0) {
444             return "0";
445         }
446         uint256 temp = value;
447         uint256 digits;
448         while (temp != 0) {
449             digits++;
450             temp /= 10;
451         }
452         bytes memory buffer = new bytes(digits);
453         while (value != 0) {
454             digits -= 1;
455             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
456             value /= 10;
457         }
458         return string(buffer);
459     }
460 
461     /**
462      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
463      */
464     function toHexString(uint256 value) internal pure returns (string memory) {
465         if (value == 0) {
466             return "0x00";
467         }
468         uint256 temp = value;
469         uint256 length = 0;
470         while (temp != 0) {
471             length++;
472             temp >>= 8;
473         }
474         return toHexString(value, length);
475     }
476 
477     /**
478      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
479      */
480     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
481         bytes memory buffer = new bytes(2 * length + 2);
482         buffer[0] = "0";
483         buffer[1] = "x";
484         for (uint256 i = 2 * length + 1; i > 1; --i) {
485             buffer[i] = _HEX_SYMBOLS[value & 0xf];
486             value >>= 4;
487         }
488         require(value == 0, "Strings: hex length insufficient");
489         return string(buffer);
490     }
491 }
492 
493 // File: @openzeppelin/contracts/utils/Context.sol
494 
495 
496 // OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
497 
498 pragma solidity ^0.8.0;
499 
500 /**
501  * @dev Provides information about the current execution context, including the
502  * sender of the transaction and its data. While these are generally available
503  * via msg.sender and msg.data, they should not be accessed in such a direct
504  * manner, since when dealing with meta-transactions the account sending and
505  * paying for execution may not be the actual sender (as far as an application
506  * is concerned).
507  *
508  * This contract is only required for intermediate, library-like contracts.
509  */
510 abstract contract Context {
511     function _msgSender() internal view virtual returns (address) {
512         return msg.sender;
513     }
514 
515     function _msgData() internal view virtual returns (bytes calldata) {
516         return msg.data;
517     }
518 }
519 
520 // File: @openzeppelin/contracts/access/Ownable.sol
521 
522 
523 // OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)
524 
525 pragma solidity ^0.8.0;
526 
527 
528 /**
529  * @dev Contract module which provides a basic access control mechanism, where
530  * there is an account (an owner) that can be granted exclusive access to
531  * specific functions.
532  *
533  * By default, the owner account will be the one that deploys the contract. This
534  * can later be changed with {transferOwnership}.
535  *
536  * This module is used through inheritance. It will make available the modifier
537  * `onlyOwner`, which can be applied to your functions to restrict their use to
538  * the owner.
539  */
540 abstract contract Ownable is Context {
541     address private _owner;
542 
543     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
544 
545     /**
546      * @dev Initializes the contract setting the deployer as the initial owner.
547      */
548     constructor() {
549         _transferOwnership(_msgSender());
550     }
551 
552     /**
553      * @dev Returns the address of the current owner.
554      */
555     function owner() public view virtual returns (address) {
556         return _owner;
557     }
558 
559     /**
560      * @dev Throws if called by any account other than the owner.
561      */
562     modifier onlyOwner() {
563         require(owner() == _msgSender(), "Ownable: caller is not the owner");
564         _;
565     }
566 
567     /**
568      * @dev Leaves the contract without owner. It will not be possible to call
569      * `onlyOwner` functions anymore. Can only be called by the current owner.
570      *
571      * NOTE: Renouncing ownership will leave the contract without an owner,
572      * thereby removing any functionality that is only available to the owner.
573      */
574     function renounceOwnership() public virtual onlyOwner {
575         _transferOwnership(address(0));
576     }
577 
578     /**
579      * @dev Transfers ownership of the contract to a new account (`newOwner`).
580      * Can only be called by the current owner.
581      */
582     function transferOwnership(address newOwner) public virtual onlyOwner {
583         require(newOwner != address(0), "Ownable: new owner is the zero address");
584         _transferOwnership(newOwner);
585     }
586 
587     /**
588      * @dev Transfers ownership of the contract to a new account (`newOwner`).
589      * Internal function without access restriction.
590      */
591     function _transferOwnership(address newOwner) internal virtual {
592         address oldOwner = _owner;
593         _owner = newOwner;
594         emit OwnershipTransferred(oldOwner, newOwner);
595     }
596 }
597 
598 // File: @openzeppelin/contracts/utils/Address.sol
599 
600 
601 // OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)
602 
603 pragma solidity ^0.8.1;
604 
605 /**
606  * @dev Collection of functions related to the address type
607  */
608 library Address {
609     /**
610      * @dev Returns true if `account` is a contract.
611      *
612      * [IMPORTANT]
613      * ====
614      * It is unsafe to assume that an address for which this function returns
615      * false is an externally-owned account (EOA) and not a contract.
616      *
617      * Among others, `isContract` will return false for the following
618      * types of addresses:
619      *
620      *  - an externally-owned account
621      *  - a contract in construction
622      *  - an address where a contract will be created
623      *  - an address where a contract lived, but was destroyed
624      * ====
625      *
626      * [IMPORTANT]
627      * ====
628      * You shouldn't rely on `isContract` to protect against flash loan attacks!
629      *
630      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
631      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
632      * constructor.
633      * ====
634      */
635     function isContract(address account) internal view returns (bool) {
636         // This method relies on extcodesize/address.code.length, which returns 0
637         // for contracts in construction, since the code is only stored at the end
638         // of the constructor execution.
639 
640         return account.code.length > 0;
641     }
642 
643     /**
644      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
645      * `recipient`, forwarding all available gas and reverting on errors.
646      *
647      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
648      * of certain opcodes, possibly making contracts go over the 2300 gas limit
649      * imposed by `transfer`, making them unable to receive funds via
650      * `transfer`. {sendValue} removes this limitation.
651      *
652      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
653      *
654      * IMPORTANT: because control is transferred to `recipient`, care must be
655      * taken to not create reentrancy vulnerabilities. Consider using
656      * {ReentrancyGuard} or the
657      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
658      */
659     function sendValue(address payable recipient, uint256 amount) internal {
660         require(address(this).balance >= amount, "Address: insufficient balance");
661 
662         (bool success, ) = recipient.call{value: amount}("");
663         require(success, "Address: unable to send value, recipient may have reverted");
664     }
665 
666     /**
667      * @dev Performs a Solidity function call using a low level `call`. A
668      * plain `call` is an unsafe replacement for a function call: use this
669      * function instead.
670      *
671      * If `target` reverts with a revert reason, it is bubbled up by this
672      * function (like regular Solidity function calls).
673      *
674      * Returns the raw returned data. To convert to the expected return value,
675      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
676      *
677      * Requirements:
678      *
679      * - `target` must be a contract.
680      * - calling `target` with `data` must not revert.
681      *
682      * _Available since v3.1._
683      */
684     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
685         return functionCall(target, data, "Address: low-level call failed");
686     }
687 
688     /**
689      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
690      * `errorMessage` as a fallback revert reason when `target` reverts.
691      *
692      * _Available since v3.1._
693      */
694     function functionCall(
695         address target,
696         bytes memory data,
697         string memory errorMessage
698     ) internal returns (bytes memory) {
699         return functionCallWithValue(target, data, 0, errorMessage);
700     }
701 
702     /**
703      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
704      * but also transferring `value` wei to `target`.
705      *
706      * Requirements:
707      *
708      * - the calling contract must have an ETH balance of at least `value`.
709      * - the called Solidity function must be `payable`.
710      *
711      * _Available since v3.1._
712      */
713     function functionCallWithValue(
714         address target,
715         bytes memory data,
716         uint256 value
717     ) internal returns (bytes memory) {
718         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
719     }
720 
721     /**
722      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
723      * with `errorMessage` as a fallback revert reason when `target` reverts.
724      *
725      * _Available since v3.1._
726      */
727     function functionCallWithValue(
728         address target,
729         bytes memory data,
730         uint256 value,
731         string memory errorMessage
732     ) internal returns (bytes memory) {
733         require(address(this).balance >= value, "Address: insufficient balance for call");
734         require(isContract(target), "Address: call to non-contract");
735 
736         (bool success, bytes memory returndata) = target.call{value: value}(data);
737         return verifyCallResult(success, returndata, errorMessage);
738     }
739 
740     /**
741      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
742      * but performing a static call.
743      *
744      * _Available since v3.3._
745      */
746     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
747         return functionStaticCall(target, data, "Address: low-level static call failed");
748     }
749 
750     /**
751      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
752      * but performing a static call.
753      *
754      * _Available since v3.3._
755      */
756     function functionStaticCall(
757         address target,
758         bytes memory data,
759         string memory errorMessage
760     ) internal view returns (bytes memory) {
761         require(isContract(target), "Address: static call to non-contract");
762 
763         (bool success, bytes memory returndata) = target.staticcall(data);
764         return verifyCallResult(success, returndata, errorMessage);
765     }
766 
767     /**
768      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
769      * but performing a delegate call.
770      *
771      * _Available since v3.4._
772      */
773     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
774         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
775     }
776 
777     /**
778      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
779      * but performing a delegate call.
780      *
781      * _Available since v3.4._
782      */
783     function functionDelegateCall(
784         address target,
785         bytes memory data,
786         string memory errorMessage
787     ) internal returns (bytes memory) {
788         require(isContract(target), "Address: delegate call to non-contract");
789 
790         (bool success, bytes memory returndata) = target.delegatecall(data);
791         return verifyCallResult(success, returndata, errorMessage);
792     }
793 
794     /**
795      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
796      * revert reason using the provided one.
797      *
798      * _Available since v4.3._
799      */
800     function verifyCallResult(
801         bool success,
802         bytes memory returndata,
803         string memory errorMessage
804     ) internal pure returns (bytes memory) {
805         if (success) {
806             return returndata;
807         } else {
808             // Look for revert reason and bubble it up if present
809             if (returndata.length > 0) {
810                 // The easiest way to bubble the revert reason is using memory via assembly
811 
812                 assembly {
813                     let returndata_size := mload(returndata)
814                     revert(add(32, returndata), returndata_size)
815                 }
816             } else {
817                 revert(errorMessage);
818             }
819         }
820     }
821 }
822 
823 // File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
824 
825 
826 // OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)
827 
828 pragma solidity ^0.8.0;
829 
830 /**
831  * @title ERC721 token receiver interface
832  * @dev Interface for any contract that wants to support safeTransfers
833  * from ERC721 asset contracts.
834  */
835 interface IERC721Receiver {
836     /**
837      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
838      * by `operator` from `from`, this function is called.
839      *
840      * It must return its Solidity selector to confirm the token transfer.
841      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
842      *
843      * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
844      */
845     function onERC721Received(
846         address operator,
847         address from,
848         uint256 tokenId,
849         bytes calldata data
850     ) external returns (bytes4);
851 }
852 
853 // File: @openzeppelin/contracts/utils/introspection/IERC165.sol
854 
855 
856 // OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
857 
858 pragma solidity ^0.8.0;
859 
860 /**
861  * @dev Interface of the ERC165 standard, as defined in the
862  * https://eips.ethereum.org/EIPS/eip-165[EIP].
863  *
864  * Implementers can declare support of contract interfaces, which can then be
865  * queried by others ({ERC165Checker}).
866  *
867  * For an implementation, see {ERC165}.
868  */
869 interface IERC165 {
870     /**
871      * @dev Returns true if this contract implements the interface defined by
872      * `interfaceId`. See the corresponding
873      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
874      * to learn more about how these ids are created.
875      *
876      * This function call must use less than 30 000 gas.
877      */
878     function supportsInterface(bytes4 interfaceId) external view returns (bool);
879 }
880 
881 // File: @openzeppelin/contracts/interfaces/IERC2981.sol
882 
883 
884 // OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)
885 
886 pragma solidity ^0.8.0;
887 
888 
889 /**
890  * @dev Interface for the NFT Royalty Standard.
891  *
892  * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
893  * support for royalty payments across all NFT marketplaces and ecosystem participants.
894  *
895  * _Available since v4.5._
896  */
897 interface IERC2981 is IERC165 {
898     /**
899      * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
900      * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
901      */
902     function royaltyInfo(uint256 tokenId, uint256 salePrice)
903         external
904         view
905         returns (address receiver, uint256 royaltyAmount);
906 }
907 
908 // File: @openzeppelin/contracts/utils/introspection/ERC165.sol
909 
910 
911 // OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)
912 
913 pragma solidity ^0.8.0;
914 
915 
916 /**
917  * @dev Implementation of the {IERC165} interface.
918  *
919  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
920  * for the additional interface id that will be supported. For example:
921  *
922  * ```solidity
923  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
924  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
925  * }
926  * ```
927  *
928  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
929  */
930 abstract contract ERC165 is IERC165 {
931     /**
932      * @dev See {IERC165-supportsInterface}.
933      */
934     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
935         return interfaceId == type(IERC165).interfaceId;
936     }
937 }
938 
939 // File: @openzeppelin/contracts/token/ERC721/IERC721.sol
940 
941 
942 // OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)
943 
944 pragma solidity ^0.8.0;
945 
946 
947 /**
948  * @dev Required interface of an ERC721 compliant contract.
949  */
950 interface IERC721 is IERC165 {
951     /**
952      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
953      */
954     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
955 
956     /**
957      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
958      */
959     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
960 
961     /**
962      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
963      */
964     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
965 
966     /**
967      * @dev Returns the number of tokens in ``owner``'s account.
968      */
969     function balanceOf(address owner) external view returns (uint256 balance);
970 
971     /**
972      * @dev Returns the owner of the `tokenId` token.
973      *
974      * Requirements:
975      *
976      * - `tokenId` must exist.
977      */
978     function ownerOf(uint256 tokenId) external view returns (address owner);
979 
980     /**
981      * @dev Safely transfers `tokenId` token from `from` to `to`.
982      *
983      * Requirements:
984      *
985      * - `from` cannot be the zero address.
986      * - `to` cannot be the zero address.
987      * - `tokenId` token must exist and be owned by `from`.
988      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
989      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
990      *
991      * Emits a {Transfer} event.
992      */
993     function safeTransferFrom(
994         address from,
995         address to,
996         uint256 tokenId,
997         bytes calldata data
998     ) external;
999 
1000     /**
1001      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
1002      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
1003      *
1004      * Requirements:
1005      *
1006      * - `from` cannot be the zero address.
1007      * - `to` cannot be the zero address.
1008      * - `tokenId` token must exist and be owned by `from`.
1009      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
1010      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1011      *
1012      * Emits a {Transfer} event.
1013      */
1014     function safeTransferFrom(
1015         address from,
1016         address to,
1017         uint256 tokenId
1018     ) external;
1019 
1020     /**
1021      * @dev Transfers `tokenId` token from `from` to `to`.
1022      *
1023      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
1024      *
1025      * Requirements:
1026      *
1027      * - `from` cannot be the zero address.
1028      * - `to` cannot be the zero address.
1029      * - `tokenId` token must be owned by `from`.
1030      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
1031      *
1032      * Emits a {Transfer} event.
1033      */
1034     function transferFrom(
1035         address from,
1036         address to,
1037         uint256 tokenId
1038     ) external;
1039 
1040     /**
1041      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
1042      * The approval is cleared when the token is transferred.
1043      *
1044      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
1045      *
1046      * Requirements:
1047      *
1048      * - The caller must own the token or be an approved operator.
1049      * - `tokenId` must exist.
1050      *
1051      * Emits an {Approval} event.
1052      */
1053     function approve(address to, uint256 tokenId) external;
1054 
1055     /**
1056      * @dev Approve or remove `operator` as an operator for the caller.
1057      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
1058      *
1059      * Requirements:
1060      *
1061      * - The `operator` cannot be the caller.
1062      *
1063      * Emits an {ApprovalForAll} event.
1064      */
1065     function setApprovalForAll(address operator, bool _approved) external;
1066 
1067     /**
1068      * @dev Returns the account approved for `tokenId` token.
1069      *
1070      * Requirements:
1071      *
1072      * - `tokenId` must exist.
1073      */
1074     function getApproved(uint256 tokenId) external view returns (address operator);
1075 
1076     /**
1077      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
1078      *
1079      * See {setApprovalForAll}
1080      */
1081     function isApprovedForAll(address owner, address operator) external view returns (bool);
1082 }
1083 
1084 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
1085 
1086 
1087 // OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)
1088 
1089 pragma solidity ^0.8.0;
1090 
1091 
1092 /**
1093  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
1094  * @dev See https://eips.ethereum.org/EIPS/eip-721
1095  */
1096 interface IERC721Enumerable is IERC721 {
1097     /**
1098      * @dev Returns the total amount of tokens stored by the contract.
1099      */
1100     function totalSupply() external view returns (uint256);
1101 
1102     /**
1103      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
1104      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
1105      */
1106     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
1107 
1108     /**
1109      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
1110      * Use along with {totalSupply} to enumerate all tokens.
1111      */
1112     function tokenByIndex(uint256 index) external view returns (uint256);
1113 }
1114 
1115 // File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
1116 
1117 
1118 // OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)
1119 
1120 pragma solidity ^0.8.0;
1121 
1122 
1123 /**
1124  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
1125  * @dev See https://eips.ethereum.org/EIPS/eip-721
1126  */
1127 interface IERC721Metadata is IERC721 {
1128     /**
1129      * @dev Returns the token collection name.
1130      */
1131     function name() external view returns (string memory);
1132 
1133     /**
1134      * @dev Returns the token collection symbol.
1135      */
1136     function symbol() external view returns (string memory);
1137 
1138     /**
1139      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
1140      */
1141     function tokenURI(uint256 tokenId) external view returns (string memory);
1142 }
1143 
1144 // File: @openzeppelin/contracts/token/ERC721/ERC721.sol
1145 
1146 
1147 // OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)
1148 
1149 pragma solidity ^0.8.0;
1150 
1151 
1152 
1153 
1154 
1155 
1156 
1157 
1158 /**
1159  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
1160  * the Metadata extension, but not including the Enumerable extension, which is available separately as
1161  * {ERC721Enumerable}.
1162  */
1163 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
1164     using Address for address;
1165     using Strings for uint256;
1166 
1167     // Token name
1168     string private _name;
1169 
1170     // Token symbol
1171     string private _symbol;
1172 
1173     // Mapping from token ID to owner address
1174     mapping(uint256 => address) private _owners;
1175 
1176     // Mapping owner address to token count
1177     mapping(address => uint256) private _balances;
1178 
1179     // Mapping from token ID to approved address
1180     mapping(uint256 => address) private _tokenApprovals;
1181 
1182     // Mapping from owner to operator approvals
1183     mapping(address => mapping(address => bool)) private _operatorApprovals;
1184 
1185     /**
1186      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
1187      */
1188     constructor(string memory name_, string memory symbol_) {
1189         _name = name_;
1190         _symbol = symbol_;
1191     }
1192 
1193     /**
1194      * @dev See {IERC165-supportsInterface}.
1195      */
1196     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
1197         return
1198             interfaceId == type(IERC721).interfaceId ||
1199             interfaceId == type(IERC721Metadata).interfaceId ||
1200             super.supportsInterface(interfaceId);
1201     }
1202 
1203     /**
1204      * @dev See {IERC721-balanceOf}.
1205      */
1206     function balanceOf(address owner) public view virtual override returns (uint256) {
1207         require(owner != address(0), "ERC721: balance query for the zero address");
1208         return _balances[owner];
1209     }
1210 
1211     /**
1212      * @dev See {IERC721-ownerOf}.
1213      */
1214     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
1215         address owner = _owners[tokenId];
1216         require(owner != address(0), "ERC721: owner query for nonexistent token");
1217         return owner;
1218     }
1219 
1220     /**
1221      * @dev See {IERC721Metadata-name}.
1222      */
1223     function name() public view virtual override returns (string memory) {
1224         return _name;
1225     }
1226 
1227     /**
1228      * @dev See {IERC721Metadata-symbol}.
1229      */
1230     function symbol() public view virtual override returns (string memory) {
1231         return _symbol;
1232     }
1233 
1234     /**
1235      * @dev See {IERC721Metadata-tokenURI}.
1236      */
1237     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
1238         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1239 
1240         string memory baseURI = _baseURI();
1241         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
1242     }
1243 
1244     /**
1245      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
1246      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
1247      * by default, can be overridden in child contracts.
1248      */
1249     function _baseURI() internal view virtual returns (string memory) {
1250         return "";
1251     }
1252 
1253     /**
1254      * @dev See {IERC721-approve}.
1255      */
1256     function approve(address to, uint256 tokenId) public virtual override {
1257         address owner = ERC721.ownerOf(tokenId);
1258         require(to != owner, "ERC721: approval to current owner");
1259 
1260         require(
1261             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
1262             "ERC721: approve caller is not owner nor approved for all"
1263         );
1264 
1265         _approve(to, tokenId);
1266     }
1267 
1268     /**
1269      * @dev See {IERC721-getApproved}.
1270      */
1271     function getApproved(uint256 tokenId) public view virtual override returns (address) {
1272         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
1273 
1274         return _tokenApprovals[tokenId];
1275     }
1276 
1277     /**
1278      * @dev See {IERC721-setApprovalForAll}.
1279      */
1280     function setApprovalForAll(address operator, bool approved) public virtual override {
1281         _setApprovalForAll(_msgSender(), operator, approved);
1282     }
1283 
1284     /**
1285      * @dev See {IERC721-isApprovedForAll}.
1286      */
1287     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
1288         return _operatorApprovals[owner][operator];
1289     }
1290 
1291     /**
1292      * @dev See {IERC721-transferFrom}.
1293      */
1294     function transferFrom(
1295         address from,
1296         address to,
1297         uint256 tokenId
1298     ) public virtual override {
1299         //solhint-disable-next-line max-line-length
1300         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
1301 
1302         _transfer(from, to, tokenId);
1303     }
1304 
1305     /**
1306      * @dev See {IERC721-safeTransferFrom}.
1307      */
1308     function safeTransferFrom(
1309         address from,
1310         address to,
1311         uint256 tokenId
1312     ) public virtual override {
1313         safeTransferFrom(from, to, tokenId, "");
1314     }
1315 
1316     /**
1317      * @dev See {IERC721-safeTransferFrom}.
1318      */
1319     function safeTransferFrom(
1320         address from,
1321         address to,
1322         uint256 tokenId,
1323         bytes memory _data
1324     ) public virtual override {
1325         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
1326         _safeTransfer(from, to, tokenId, _data);
1327     }
1328 
1329     /**
1330      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
1331      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
1332      *
1333      * `_data` is additional data, it has no specified format and it is sent in call to `to`.
1334      *
1335      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
1336      * implement alternative mechanisms to perform token transfer, such as signature-based.
1337      *
1338      * Requirements:
1339      *
1340      * - `from` cannot be the zero address.
1341      * - `to` cannot be the zero address.
1342      * - `tokenId` token must exist and be owned by `from`.
1343      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1344      *
1345      * Emits a {Transfer} event.
1346      */
1347     function _safeTransfer(
1348         address from,
1349         address to,
1350         uint256 tokenId,
1351         bytes memory _data
1352     ) internal virtual {
1353         _transfer(from, to, tokenId);
1354         require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
1355     }
1356 
1357     /**
1358      * @dev Returns whether `tokenId` exists.
1359      *
1360      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
1361      *
1362      * Tokens start existing when they are minted (`_mint`),
1363      * and stop existing when they are burned (`_burn`).
1364      */
1365     function _exists(uint256 tokenId) internal view virtual returns (bool) {
1366         return _owners[tokenId] != address(0);
1367     }
1368 
1369     /**
1370      * @dev Returns whether `spender` is allowed to manage `tokenId`.
1371      *
1372      * Requirements:
1373      *
1374      * - `tokenId` must exist.
1375      */
1376     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
1377         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
1378         address owner = ERC721.ownerOf(tokenId);
1379         return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
1380     }
1381 
1382     /**
1383      * @dev Safely mints `tokenId` and transfers it to `to`.
1384      *
1385      * Requirements:
1386      *
1387      * - `tokenId` must not exist.
1388      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
1389      *
1390      * Emits a {Transfer} event.
1391      */
1392     function _safeMint(address to, uint256 tokenId) internal virtual {
1393         _safeMint(to, tokenId, "");
1394     }
1395 
1396     /**
1397      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
1398      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
1399      */
1400     function _safeMint(
1401         address to,
1402         uint256 tokenId,
1403         bytes memory _data
1404     ) internal virtual {
1405         _mint(to, tokenId);
1406         require(
1407             _checkOnERC721Received(address(0), to, tokenId, _data),
1408             "ERC721: transfer to non ERC721Receiver implementer"
1409         );
1410     }
1411 
1412     /**
1413      * @dev Mints `tokenId` and transfers it to `to`.
1414      *
1415      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
1416      *
1417      * Requirements:
1418      *
1419      * - `tokenId` must not exist.
1420      * - `to` cannot be the zero address.
1421      *
1422      * Emits a {Transfer} event.
1423      */
1424     function _mint(address to, uint256 tokenId) internal virtual {
1425         require(to != address(0), "ERC721: mint to the zero address");
1426         require(!_exists(tokenId), "ERC721: token already minted");
1427 
1428         _beforeTokenTransfer(address(0), to, tokenId);
1429 
1430         _balances[to] += 1;
1431         _owners[tokenId] = to;
1432 
1433         emit Transfer(address(0), to, tokenId);
1434 
1435         _afterTokenTransfer(address(0), to, tokenId);
1436     }
1437 
1438     /**
1439      * @dev Destroys `tokenId`.
1440      * The approval is cleared when the token is burned.
1441      *
1442      * Requirements:
1443      *
1444      * - `tokenId` must exist.
1445      *
1446      * Emits a {Transfer} event.
1447      */
1448     function _burn(uint256 tokenId) internal virtual {
1449         address owner = ERC721.ownerOf(tokenId);
1450 
1451         _beforeTokenTransfer(owner, address(0), tokenId);
1452 
1453         // Clear approvals
1454         _approve(address(0), tokenId);
1455 
1456         _balances[owner] -= 1;
1457         delete _owners[tokenId];
1458 
1459         emit Transfer(owner, address(0), tokenId);
1460 
1461         _afterTokenTransfer(owner, address(0), tokenId);
1462     }
1463 
1464     /**
1465      * @dev Transfers `tokenId` from `from` to `to`.
1466      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
1467      *
1468      * Requirements:
1469      *
1470      * - `to` cannot be the zero address.
1471      * - `tokenId` token must be owned by `from`.
1472      *
1473      * Emits a {Transfer} event.
1474      */
1475     function _transfer(
1476         address from,
1477         address to,
1478         uint256 tokenId
1479     ) internal virtual {
1480         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
1481         require(to != address(0), "ERC721: transfer to the zero address");
1482 
1483         _beforeTokenTransfer(from, to, tokenId);
1484 
1485         // Clear approvals from the previous owner
1486         _approve(address(0), tokenId);
1487 
1488         _balances[from] -= 1;
1489         _balances[to] += 1;
1490         _owners[tokenId] = to;
1491 
1492         emit Transfer(from, to, tokenId);
1493 
1494         _afterTokenTransfer(from, to, tokenId);
1495     }
1496 
1497     /**
1498      * @dev Approve `to` to operate on `tokenId`
1499      *
1500      * Emits a {Approval} event.
1501      */
1502     function _approve(address to, uint256 tokenId) internal virtual {
1503         _tokenApprovals[tokenId] = to;
1504         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
1505     }
1506 
1507     /**
1508      * @dev Approve `operator` to operate on all of `owner` tokens
1509      *
1510      * Emits a {ApprovalForAll} event.
1511      */
1512     function _setApprovalForAll(
1513         address owner,
1514         address operator,
1515         bool approved
1516     ) internal virtual {
1517         require(owner != operator, "ERC721: approve to caller");
1518         _operatorApprovals[owner][operator] = approved;
1519         emit ApprovalForAll(owner, operator, approved);
1520     }
1521 
1522     /**
1523      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1524      * The call is not executed if the target address is not a contract.
1525      *
1526      * @param from address representing the previous owner of the given token ID
1527      * @param to target address that will receive the tokens
1528      * @param tokenId uint256 ID of the token to be transferred
1529      * @param _data bytes optional data to send along with the call
1530      * @return bool whether the call correctly returned the expected magic value
1531      */
1532     function _checkOnERC721Received(
1533         address from,
1534         address to,
1535         uint256 tokenId,
1536         bytes memory _data
1537     ) private returns (bool) {
1538         if (to.isContract()) {
1539             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
1540                 return retval == IERC721Receiver.onERC721Received.selector;
1541             } catch (bytes memory reason) {
1542                 if (reason.length == 0) {
1543                     revert("ERC721: transfer to non ERC721Receiver implementer");
1544                 } else {
1545                     assembly {
1546                         revert(add(32, reason), mload(reason))
1547                     }
1548                 }
1549             }
1550         } else {
1551             return true;
1552         }
1553     }
1554 
1555     /**
1556      * @dev Hook that is called before any token transfer. This includes minting
1557      * and burning.
1558      *
1559      * Calling conditions:
1560      *
1561      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1562      * transferred to `to`.
1563      * - When `from` is zero, `tokenId` will be minted for `to`.
1564      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1565      * - `from` and `to` are never both zero.
1566      *
1567      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1568      */
1569     function _beforeTokenTransfer(
1570         address from,
1571         address to,
1572         uint256 tokenId
1573     ) internal virtual {}
1574 
1575     /**
1576      * @dev Hook that is called after any transfer of tokens. This includes
1577      * minting and burning.
1578      *
1579      * Calling conditions:
1580      *
1581      * - when `from` and `to` are both non-zero.
1582      * - `from` and `to` are never both zero.
1583      *
1584      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1585      */
1586     function _afterTokenTransfer(
1587         address from,
1588         address to,
1589         uint256 tokenId
1590     ) internal virtual {}
1591 }
1592 
1593 // File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol
1594 
1595 
1596 // OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)
1597 
1598 pragma solidity ^0.8.0;
1599 
1600 
1601 
1602 /**
1603  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
1604  * enumerability of all the token ids in the contract as well as all token ids owned by each
1605  * account.
1606  */
1607 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
1608     // Mapping from owner to list of owned token IDs
1609     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
1610 
1611     // Mapping from token ID to index of the owner tokens list
1612     mapping(uint256 => uint256) private _ownedTokensIndex;
1613 
1614     // Array with all token ids, used for enumeration
1615     uint256[] private _allTokens;
1616 
1617     // Mapping from token id to position in the allTokens array
1618     mapping(uint256 => uint256) private _allTokensIndex;
1619 
1620     /**
1621      * @dev See {IERC165-supportsInterface}.
1622      */
1623     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
1624         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
1625     }
1626 
1627     /**
1628      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1629      */
1630     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
1631         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
1632         return _ownedTokens[owner][index];
1633     }
1634 
1635     /**
1636      * @dev See {IERC721Enumerable-totalSupply}.
1637      */
1638     function totalSupply() public view virtual override returns (uint256) {
1639         return _allTokens.length;
1640     }
1641 
1642     /**
1643      * @dev See {IERC721Enumerable-tokenByIndex}.
1644      */
1645     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
1646         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
1647         return _allTokens[index];
1648     }
1649 
1650     /**
1651      * @dev Hook that is called before any token transfer. This includes minting
1652      * and burning.
1653      *
1654      * Calling conditions:
1655      *
1656      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1657      * transferred to `to`.
1658      * - When `from` is zero, `tokenId` will be minted for `to`.
1659      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1660      * - `from` cannot be the zero address.
1661      * - `to` cannot be the zero address.
1662      *
1663      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1664      */
1665     function _beforeTokenTransfer(
1666         address from,
1667         address to,
1668         uint256 tokenId
1669     ) internal virtual override {
1670         super._beforeTokenTransfer(from, to, tokenId);
1671 
1672         if (from == address(0)) {
1673             _addTokenToAllTokensEnumeration(tokenId);
1674         } else if (from != to) {
1675             _removeTokenFromOwnerEnumeration(from, tokenId);
1676         }
1677         if (to == address(0)) {
1678             _removeTokenFromAllTokensEnumeration(tokenId);
1679         } else if (to != from) {
1680             _addTokenToOwnerEnumeration(to, tokenId);
1681         }
1682     }
1683 
1684     /**
1685      * @dev Private function to add a token to this extension's ownership-tracking data structures.
1686      * @param to address representing the new owner of the given token ID
1687      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
1688      */
1689     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
1690         uint256 length = ERC721.balanceOf(to);
1691         _ownedTokens[to][length] = tokenId;
1692         _ownedTokensIndex[tokenId] = length;
1693     }
1694 
1695     /**
1696      * @dev Private function to add a token to this extension's token tracking data structures.
1697      * @param tokenId uint256 ID of the token to be added to the tokens list
1698      */
1699     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
1700         _allTokensIndex[tokenId] = _allTokens.length;
1701         _allTokens.push(tokenId);
1702     }
1703 
1704     /**
1705      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
1706      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
1707      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
1708      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
1709      * @param from address representing the previous owner of the given token ID
1710      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
1711      */
1712     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
1713         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
1714         // then delete the last slot (swap and pop).
1715 
1716         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
1717         uint256 tokenIndex = _ownedTokensIndex[tokenId];
1718 
1719         // When the token to delete is the last token, the swap operation is unnecessary
1720         if (tokenIndex != lastTokenIndex) {
1721             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
1722 
1723             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1724             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1725         }
1726 
1727         // This also deletes the contents at the last position of the array
1728         delete _ownedTokensIndex[tokenId];
1729         delete _ownedTokens[from][lastTokenIndex];
1730     }
1731 
1732     /**
1733      * @dev Private function to remove a token from this extension's token tracking data structures.
1734      * This has O(1) time complexity, but alters the order of the _allTokens array.
1735      * @param tokenId uint256 ID of the token to be removed from the tokens list
1736      */
1737     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
1738         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
1739         // then delete the last slot (swap and pop).
1740 
1741         uint256 lastTokenIndex = _allTokens.length - 1;
1742         uint256 tokenIndex = _allTokensIndex[tokenId];
1743 
1744         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
1745         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
1746         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
1747         uint256 lastTokenId = _allTokens[lastTokenIndex];
1748 
1749         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1750         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1751 
1752         // This also deletes the contents at the last position of the array
1753         delete _allTokensIndex[tokenId];
1754         _allTokens.pop();
1755     }
1756 }
1757 
1758 // File: contracts/Metti For Roe v. Wade.sol
1759 
1760 // ####%#####*###**####%##%#########%#*###*+**###%%######%######*##*#**###########*#########%#######################*####%######%%#%%#%%%%%%%%%%%%%@@%%@%
1761 // ################%#####*#**#*##*#*#*#*##*##**#*##*##*##*#**#*##########**#######*###################*##*#*##############%*%####%%%%%%%%%%%%%%%%%@@@@@@@
1762 // #####################***#**#######*###########*==*#*#*######**####*###*##############**##*###**#######***####%###########%#####%%%%%%%%%%%%%%%%%%%@%@@
1763 // *##**####*##+**##################-*#########-+*++*#*########**##*#################*######*###**##################%#####%#%%##%%%#%#%%%%%%%%%%@@%%%%%%%
1764 // ***#######*:*:*#####%####*####.#++######*+=#########*############*#######*######*#**##*#######################%####%###%*##%####%%%%%%%%%%%%%%%%%@%%%@
1765 // ########**-*#-*######*######## =-+#####.+####################**###****#######**######################*##*####%############%%%%##%%%%%%%%%%%@%%%%@%%%@%
1766 // ########:*##**####*-#=+#+##*+-:#**++*=*########################**######*####**######%##################*#########%%###%##%##%%%%%%%%%%%%%%%%%%%%%@%%%%
1767 // *#*####+=*#*-*##-+---:+--+=-=-=*=-==#########################*#############*###*#########*#######***########################%#%%%%%%%%%%%%@%%%%%%%@%@%
1768 // ****#%*.+#*---*-.===+.++**+*#+=-**###########################**#**#########*##################*####*##############%#########%%%%%%%%%%%%%%%%%%%%%%%@@%
1769 // ##*##*:**#:***#***:*#*######+.#########*##############*####**#############**######%############**#######*####%####%####%#####%%%#%%#%%%%%%%%%%%@%%@@@%
1770 // ###*#*+=*:######*+-*###*#*+:*##*###*##########*#########################*##########*#############**%########%####################%#%%%%%#%%%%%%%%@@@@@
1771 // #####-*=-#######+-**#*#*=-+#*##*##########***#################**###########################*##############%#########%%%#####%#%%%%%%#%%%%%%%%%%%%%@%@@
1772 // #*##=#=+*######**-+***++=**#***####*******##*#####**#####***#####*################**########**#######*##**###%############%#%#%%#%%%##%%%%%%%%%@%%%%%@
1773 // ####+#+####*##******+-*****###*#***#*##*##########*###*##*#####*########**#######**########**###****####**#######%##*###%%###%%#%#%#%%#%%%%%%%%%%@%%%%
1774 // **#-#:###*#*#*#+ =*.**#*##***#***#*#*#****#**#####*#*#*#####*########*#*#######*###**+*##***#*####***#*#*###*###############%%#%###%%%%%%%%%%%%%%%%%%%
1775 // ###=*=###*#*****:*-*****#**##*#*#*#**##*#####*###*#***##****################*+++*++**+**#****##**##*###########%#*#####%###%#%###%#%%%%%%%%%%#%%%%%%%%
1776 // *#+*-*##*#%#**#*.=*#*##*##***#*#**##****###########*#########***####*#*#***+++**##*******##*##*####*####*############%##%####%##%%#%%%%%%%%%%%%%%%%%%%
1777 // ##++=*######*#=:+###********++***##****#%*####******#########*#####*******#***######*+*##*#**#*####*#*##############%%#######%##%%%%%%#%%%%##%%%%@%@%%
1778 // %+=-*###%#***=+**#*##**********#**#***#######******##########*###***#*###**#*****#*##+###*########**####*####################%###%%%%%%%##%#%%%%%%%%%%
1779 // #*+##++#***=-#+****#+#**#*##*###**##*###*##**#****#*###***###*#####**+%#+******+##**#*#*###*#*#****#**####%####%%###########%####%%%%%%%%#%#%%%%%%@%%%
1780 // *+=+#****#####***###+**+***#*###*%#**#####*******###**#####***#*##*###*+*+***+++******#*####*********#########%###%########%%###%%%%#%%%%%%%#%%%%%%%%%
1781 // *-+######*#**###*#*#****####*#**##***#####*********#####**##***#*#**#***********#**********#*****##################%######%%%*###%%%%%%%%%%%%%%%%%%%%%
1782 // ***#####*######%##*###*#*#*#####****#####******##**##*##***##***#***#***##******+*******####******##*###############%####%%%%*%%%%%%%%%#%%%%%%%%%%%%%%
1783 // #*####%########*####*+*************######*****#######**********#*#******%#*#***++****+**###*+**#*###*###%###################%##%%%%%%#%##%%%%#%%%%%%%%
1784 // *#####*****#**#++*#*****###*#*****#####******######*##**********#****%****+#**********#*###*##***#*##*##################%###%%%%%%#%%%%%##%%%%%%%%%%%%
1785 // #****##**####**####*+**##**#***#**##%#****#*#**#**#*###**#*#*****#*#**####**********#######*##**########%######%###%######%#####%%%##%%%%%##%%%%%%%%%%
1786 // ***######*###*#####**#**#*#******####*********####****####*##*########******#******#**#########*###*###%%#####%###%##%%#%#%##%###%%#%###%%%%%%%%%%%%%%
1787 // #*****######**#****#*****##****###******#*#*##*#*******#**###########**###*#**#*****#####**#############%#%%%%##%%######%%###%%##%%##%%%%%%##%#%%%%%%%
1788 // #####*#*****##****++****##*#*#*#####******#**#********##*#####*#####**######**#****##***###%%###***#####%#################%###%%###%%#%%%%##%%%%%%%%%%
1789 // #**#**#******###****+*%#*****######*****#******#*#***#####*#**#*#%#######**%*#*#*#*#%#####%######****#%%#%%############%####%%%%#######%###%#%%%%%%%%%
1790 // #**#*####**###*##*+*%*###**######***#####****#****##**#***#######**#******##***####*###################%##%##%%#%##%%%#######%##%%#%%%#%###%%%%%%%#%%%
1791 // ***###****#***#****#%#############****#**=***##********#**#**#*******#******#*##*##*##########################%%##########%##%###%#%%%##%##%%%%%%%%%%%
1792 // ****#***###****#****#***##**#*##*###*#***=***#*===**#*##**##*********#******####*###########**###%#%########%######%#####%%%########%##%%%%%##%%#%#%%%
1793 // #**##*#####**###*****+**#######***#**#*#*=+=-=*+*--=*###**#**********#*###***##############%###*%%%#%%#%###%#####%%###%###%%%#*#######%##%%%###%#%%%%%
1794 // ####*#*#*###*#************#*###########**=******=-------+#*-::+**#*#*####**####%##%%########*#%####%###############*#####%%######*##%%#%###%##%%%%%%%%
1795 // *##*******#***#***+*#****######***####******#*****###*#*#+-----=***+**++++****######*###########%##%#%%#####%##%########%%%%##%##########%%%####%%%%%%
1796 // **#****#****##***#******###**#**#####*##***************######*+====++==-:-==+###+++++#####%%####%###%###%%%#########%#%%##%#%##%#####%%%%#%###%#%%%%%#
1797 // *####*####*******#*#*****###***###*#####=+***#*****+=:-#*##############*+*+=====::::-+###++====#########%%##########%%##%%#########%###%%####*#%%%%%%%
1798 // *##########**##*****###*##**####***###**-=##*******+...###*##*###*:=####*#******#+::=*###-*****-=###%##%######%####%####%%#########%####%###%#%#%%%%%%
1799 // ##**#***##********#**########*#*###*****-=*###*:..*=...###+######   +*#**######%##%%%*------:-:-=##%#######%%%%####%%%%%%%########*#%##########%%%#%%%
1800 // #****#####*%#****##*###*####%##****#*#*#=+##**=...:....+##:..:+*.  .+####*#######%%%%###%##*=====++******####%##%%%#####%################%#####%%%%%#%
1801 // ***##**##*#*###*#**#######%%##*****#**#+******-...:....#*#=..:--. .=#######+*##%%%%%%####*#%#####*++-+===##+++########%#%##########*###%#%###%%%%%%%%%
1802 // #***##*******#**#***#%%%%%%###**#*****#-=**#**.........=***+++-   :*###*##=-+##%%%%#*#+--:*###*#####**==+###+-=+%%%#####%#########*###%%#####%%#%#%%%%
1803 // **###**#**##***#**##*#%%%%###***#*#****-+****-::.......=******-  .*######*:.+##%::=-...  .:##*:###+:::-*#%%%###*----=*%#=+-*#%################%%%#%%%@
1804 // *#*##*#**###*##*****%%%%%#*#####***###*--*###..:........*****#=  .#**####+.:+%%. .-..   :.=:...:*-... -*#*#%%#%%##%##=-----*##%#*%#*+#%##**#####%%%%%%
1805 // *#####*#*+**********%%%##########*****#*=***=.:=.......-##**#*- :+#***#***::*%#. .===  .*=.:::+=+.:-:  :###%%%%#**#%###*#%#####*#==*########%#%##%#%%%
1806 // *********+***######*%%%###**#####*#****=+***-:=*:...:...+#**#+ .+##**#*##+.-##%. .+#+. :*+.:=**#*.-#*  -**+*%%%= =#%#+-:*###%*#####*##%%####%#%###%#%@
1807 // **********#################*##****#*##*-=***==**:..:=:..-**#*- -*##****%%=.*#%%. :*#+  -#+.:*###=. =-  :*==+%%#: +##*:..#%%%##%#######%#####%%#%##%%@@
1808 // *###*####**##****#%#%##**###*****#***#*--*=-=***:..:+*...=##*. -*****####-.+##*. -##*  -#:..:..-* :#. .=*--*#%#. .#:.. *#####%%%#%=%%########%%%#%#%%%
1809 // ##******+**#*########%###****###*#*****--*=:++++-...+*+..:+*+  +*****%%%+. :##=. -%#.  =#..   .#: -:.:***-=##%#  **    *###**#**####%%%#####%%%#%#%%@%
1810 // *#%#######%##*#####%%#****####**##*#**=#**++=#**+::=##*::=##. .+*+**###%*: -##-..*%%-..=*:..--##    .=###=:*%%*..=#.....-*####*##+*=#%%%%#########%%%%
1811 // ###**##***##############******#*##**##++###*################-.=**++*####+. :#*: .+##. =#*..-%%## . -=####-:*#%: .=*=+=:. .=*#####+%*%%#%%%###%##*#%%@%
1812 // **#*#*##############*####*#########*#+*+##########*****#####*++***#######- .%=. :##=..*#=..*##*=   :##*#%..=%#...+%%%#*+. -*######%#%#%%%%######*%%%%%
1813 // #######*####*#*#%######**####*#######+-*##*####*###*##*#%###*****##%#####- ... .###- .+#-..+-:..    .:-#%..:*+ .=#%:%%#%+ .=####+#==##%#%#####***#%%%%
1814 // *##*#****###*####%##*#####**#########+-*###****###**-.+#**###*****####%###:...:*#%##.=#%-..::... -*.   :*-....  --:....   .+%#*#=+-+###@##%##*#%#%%@@%
1815 // *#**#################**############**==*##*#*#*#+-::..+****#*+****###%####-:=-**+*##-#%%+*-*++-  -*-.  -##-.. :-++..      -*####%#-+%#%%##%%%@@%*#%%@%
1816 // *#*################*#*#############*#+**#####*##**++-=******+--*#########=. .=+. :+#%#*+-=#*###..+##+=-+##*=-:####+: .  .:=#*#%#%%=*#%%%%%%%%@%@#%%%%@
1817 // ***#################################*-+#*#########+=+*+##*+=::=#########%+. ...  :#%#::   -=#**==*###%##*+=+#+#%%##*:=:-=**#%%#***###%%%%%#%%%@%%%%%%%
1818 // ***#####**##########################*:+*##%%#*####--+#**.....-*######%##+:  ..   .=*- .    :#####+#%#***:..=###%####*####%####*##-*%%%##%%%@@%@%@@%%%@
1819 // #*##################################*-+#%###@#%#%%:=*##*.   .+##%###%##*..  ..  .-*#. .=+. .+=-%#==##==+-+:*###%%###*%#%###*##*##*=#%%%%%%%@@%%@%%@%%@
1820 // ################*##################%*-*#######%%#=-=###*-:....-*#######+:       .-*=..=##- .=:.##==%#+=*+*###%#%%#*%%##%#%%#%###+*##%%%%%%%%%%%%%%%%%@
1821 // #############################%######*+##%#*#####*..=+***##+=-..+###%%%#-      .. -*+.:#*#+. ::.*=-+#*+-*+####%%###*%#%%##%##**##+++##%%%###%%%@%%%%%@@
1822 // #####################%#######%######*+####*###+-=....::::--+-. +#%%%#%-:..    :..=*+.-#*#.  .. :.:*#*-:-:-+##*%#####%%#*#%%##+##+=-#%%#%#%#%%%%%%@%%@@
1823 // ####################%####%####%###*#*+###%%%##+=-.... ...  ..  +#%%##%. .=.  -+..-**.:==.  :=  .:+##*.....=####%###%#%%%##*##%%#=#-#@%%%@#%##%%@%%%%%@
1824 // ####%###############################*-*%%###*####*+*:+:*.. ...=##%%##-.:+=. .=*-  :+: .   :*.  :=#%#...=:=**#*#%*#%%#%#****#*#%#=+%#%@%@%%#%%%@%%@%%@@
1825 // #####################%##############+-*%%#*+=***###**#**+=:+*=#%%%%%%::+#*:-+**#.. -.  ..:#=..=.:=#%: :+++%%###*#%#%%#***#**####*=#%%%#@@#%%%%%%%%%%%@
1826 // ###################%%#%#####%#######-=*##*+##*-+#***+==***+###%%%%%%#*+###+##***+=-+===++*#- :*-::==. . ..+##*%#%%#%%#*##*##%###*#*%%@%%@%%%@%%%%%%%%%
1827 // **################%%%#############%*-+#%#=:*#%+=*+--:..*#*-=#%%%%%########**###*#*#%**####%+-+**:. ....  .-####%#%%%%**##+*#%###+=+@@@%@%##%%%%%%@@%%%
1828 // *################%%#############%#%#:+%#*=-*%*.-*-=:::+*==..*%%%#%#%%#%#++*#####++#%#%#####%##%%#+-..#*****#*#%@%%%%%**%@%##%##%==#%#%%@@%#@%#%@@@%%%%
1829 // ################%%%%%########%%%##%#:+##+.-*-..=##=***#*- .#%#%#-%#- =%*==%####- -#%#%*#*+*-###%%######%%**#%%#%%%%%%%#%%%####@%==#%%@@%#%%%%%%@@%%%%%
1830 // ###############%%%##%######%%%%%%%%*:+%*.:-. ..=#*++++**=:+%%##+-%*..-##==*###+. .=##*==:..-%%*+:=##*+*+###*#%%##%%%%###*%##%%##=%-%%%@@%%%%%%%%@%%%@@
1831 // ##**##########%#%%#########%%%%%#%%#:+*-..  .-+##+:.::*-:=%%+#%==#- .###+=#**+:  .-#-=..:.:-+=:...+%+=::=###%#%+###%%#*%*###%%#%*+*#%%@@#%%%%%%%@%%%%@
1832 // #############%%##%#%#######%%%%%%#%#-+-..=..+*%##:..:=#: .*=.=+:-#- .+##+:+**=  +.:*-**++**+......+#-:-:.++#%#*#%#%#%########@%%#-@#%%@@#%%%%%%%@%%@@@
1833 // *#######*#%%#%%%%###%#####%%%%%%%%%#-++.+-..*#%##..=#%+. .+. -+:**:  ***-:+##=  ...+%#*==%%*..=-####..=*-.:*%*#%###*#*#%%##%#%@#--%@@%@@#%%%%%%%%%%%@@
1834 // *#######*#%%%%%%#########%##%%%%#%%#-*#=#*:. ..:...*##:   :. -+.+*. .**=.=#*=  .* .+#%*:+#%#==..+*#* .=##..+*#%#%%%*%%%%%%##%%##=%@@@%@@#%%%%@%%%@%%%%
1835 // #***#####%##%%%#*#%########%%%%#%%%#-+%####=.   :::::-::     -*:.+-:+*=..:+=:. :. .+%#=.+%#-.   .+#: :#%=  -*######*%%%%%%##%@%%##%@%%@@##%%%%@%%%%%@@
1836 // ##*######%##%%%#########%##%%#%%%%%+-*###%#*==: +:.:..=*     -*-...=**:   :.  :-=.:*#*. *##. -.++#+. :#+. .=##%%%%##%##%%%##%@@*-#%@@@@%%%%%%@%%%%%%%@
1837 // #########%%%%#%*###########%%%%%%%%-*#%%####+-*+#*****##=:::-+*++:-**#+...:.  -**..*#-..*#=.-#*%##- .=#:  :#%#%%%%%#%##%%%#*%@%++@@@%%@#%%#%%%%@%@@@%@
1838 // #**######%%#%%%#########%##%%%%%%%%-#####*-...:*#%%###%%###*###*###*####**##=:*#*..+%- .*#..=*#.:.   ..  #+%%%%%#%#%#%@@%%%%%##+*#@@@@@@#%#%@%%@%%@@%%
1839 // #*#####*#%%%%%%%######%##%%#%%%%@%#-#*=:.....:-*+#%%#=####*-:**#*%#*##*#####++%#*..-#  :##..--:::..   ...=#####%%%%%%%%%%%%%#%@*#=@@@@@%%%@%@%%@%%%@@%
1840 // #*#######%%%%%%########%%%%%%%%%%%*-#*+==+=-=#+:.*%#+:##*#-..=##*#*#*#**##%###%#*--**..+%#=+++*++-   .===@%%#@%%%%%%%@%%%%%%%@%+*%@@@@@#%%%%%%@%@%@@@@
1841 // #*#######%%%%%%########%%%%%%%%%%#=-#%%***+***+..-%#=.-*#+:..:++--=*=--=##%#######*+=:=##%%%#####=:=.+*##%%%#%%%%%%%%%%%#%%%@#%*-%@@@@@#%####%@%@%%@@@
1842 // #*###%###%%#%%##########%%%%%%%%%+*-####*=+***-. -#*..:##=....==  :=.  -#########*...:-*#%%####%%%*@###%%%%%%%%%%%%%%#%@#%%%%#%*-%@@@@%%%%%#%@@@@%%@%@
1843 // ###*#####%#%%%########%%%%%%%%%%+*#-####*:+##*-  .:...=#+:...:#-  :+:  .+##%%%##+. .*#*#%%%#%##@%%%%*%%%%#%%%%%%%%%%%#%#%##%*%#%=%@@@@@%###%@%@@@%%@@%
1844 // ##**######%%%%#####%#%%%%%%%%%%=***#%##*:.=##* ..::...*+:.:*....  .:. .+##%###%# .-=#%##%#--##++*%%###%%%@%%%%%#+:::+#%%#@%%#@%%%@@@#%%%%#%%%@@@@@%%@%
1845 // ##**#%###%#%%#####%###%%%%%%%**+*#-%####::=##= -==*-.:+=.:=:........ .:*#*###%*. .+##%%%%%::*+..-%#: :#%*+*#%%#+..=-*%%%%%%##%%%@@@@%##%%#@%%%@%%@%@@%
1846 // *#**####%%####%%####%%%%%%%%%--*##-#*##-.=*#*..=##*..=#...:-... .:   =+#**#*##- .+#%###%%*:=#=..+#-  :#%: :*%+-...%+%%%%%%%#%+%*%@@@%##%%%%%%@@@%@@%@@
1847 // ***###%%%#####%%######%%%%%%+-*###-####+:#*=*.:+#*-..+:..=*=...=*.   -%##%##*#- .*%+:::+%=.*%+..=+.  .--. .=+....+%%%%##@@%%*-%+#@@@%%%@#%%%%%@@@@%@@%
1848 // *+*#%%%####*#%######%%%%%%%%=-###%-##%**##=*--##*%:..**--#*...:*#-.  **#**%##*: .@%-  -%#::+#-..%#:   ..  .+#....:#@@@@#@%#+#%%+#@@@@@@%%%%#@%@@%%@@@@
1849 // **######%%#######%%##%%%%%%#=*#%##-###*=-+--+-##%##==*##*###:-*#***:+:%%%%**#*. .**-  :%#..##-..-*.      .+=#-:....-%%%%@#%==%*:#@@@@%#@#%%%%%@%%%%@@%
1850 // **######%%##########%%%%%%%#=#####=+-+++=+#*-*########*########*#%*##*#######+.       :#+..-+:.:+-.       :#%##=....#%#%%#%+##*-*%@%@%%%@%%%%@@%@@%%@@
1851 // ########%%#######%##%%#%%%%+=##%###+=:=+##*--#########*##**#**#%#*###%##%#*#%#+.      :%-...:..*#-.-     .**+#%#+=:.-#%@%%%#%#=-+%%%@%%%%#@@%@@@@%@%%@
1852 // ######%%%#####%#####%%%%%%%+*######--=+##*=:*###*######%####*##%#####%%###*#%#%: :-:: -%*:....-%*:.#+    =-..*#%##. .+@%%%*#%#--#%%%@%@%%%@@@@%%@@%%@@
1853 // *#*#%#####%########%%%%#%#**#%#%##--#%##*=:+*#####%#%%##*##%#%#*#*##%%@##*#*%###%@%%==*%#.:.:.%%*.=%#=   -....*%@-..-#@#%%**%#=+*%%@@@@%@@@#@%#%%%@@@@
1854 // *##*##%%%%#######%%%%#####%#####*=###%#=+-=-**######*#%####*###%%###*###*#*##%@#%@@#####%%*-#@%%#+#%%:..:%##-.......-%#%%##%%-++#@@@%@%%#@%%@%%%@@%@@@
1855 // ***####%%%#####%###%%%##%#*+#%*#*####%%*-*==+=+*++**=+###*#*####%##########*#%@%@@@%%#%%#%%%%%%%%%%%%*=#####*:....::+%%%%#+%%-*-#@%@@%@##@%%%@%#%%@@@@
1856 // ***##*%##############%##%#=+#**######%%**=+#==+**+**=-==+##=#####%#######*##%%@%%@@%#%%%##%%%%%%%%%%##%#%###%+..--+#%%%%%+#%%**-#@@@%%@%%@#%%%%%@@@@%@
1857 // *#**#*####%###*#%%%%%%##%#-+##%####*##%#+=+-#--+#####*#**+--##%##-=*###**##%%%#@@@%%%@@%#@#*%%##%%%%%%%%%%#%%%*%%%%%%%%%%=%%=%*-#@@@@%%@@%%%@%@@%@%@@@
1858 // %#*+**#%########%%%%######-*######%#*+#-:=#=*-########*#%%%##+---#=+::-#%####%%%@#%%@%@##%%%#*##%*##@%%%%%@####@%%%@%##%%@%%=-*:#@%%%%%@%%%%@@@%@@@@@@
1859 // ***+*+####%%##%###%@%#%%%*=%%##%####+-*--+#%%%%%%#%#%###%%%%%%###%+-==-:-*%==#%%%#%%%%@%%%@%%##%#%%%%%%%%#%##%%%@#@@%#%#+%%=*=+:#%@@@%%%%%%%%@@%@%@@%@
1860 // #***+*####%#####%##%##%#%-=%%%######:+#-+%%%%%#%%#%###%%%%%%%%%%%#%###+++*%%=-+*++*****%#*#%%####%%%%%%%###%###%%@@%%%%**%%*+*-:#@@%%%%##%%%%@%%%@@@@@
1861 // #****##%########%%#%#%%%+-*%%######==#%*%%%%%%%##%#########%###%#%#%%###%@@%##*+++*+--=*%#*+*#%#%%#%%%%%#%#####@@@%#%%***%#%%**+#+@@%%##%#%%@%%%%%@@@@
1862 // *****##########%%%%%%#%++-###%#%##%*=%%%%%####%%%%%#%#*#%#%%####*####%%#%%%%%%%##%##**#%+----=#%%%%%%##*#@%%%%#%@@@#%*-=%%##%#%*=-%@@@%%%%#@%@@%@%@@@@
1863 // *##**#%##########%%%####-##%####*#%=%#%%%%##%#%%%%%%**%*##%%##*##%###@%%@@%#%##%#%#%%%%##%%%%=------#-+##%##%%@%@%%@%+*%@%%%%#%**%-%%%%%%%@@%@@@%@@@@@
1864 // +################%%%%###=%%%##%#+**+%%%%%%%%####%#*#####%%%###*##%%#%%%%@%@#%##%@###%%%##%%#%%%%%###*===--**##*#@++=+%%%#%%%%%#+#+==@%@%%%%#%@%@@@@@@@
1865 // *#*#*###%#%##%#%%%%@%%#+#%%%%%##*++%%%#%%%%######%##%%#%%########%*+#@%@@%##%%%%%%%%@%%%%%%%%%%%%%%#%%%%#+=-=++*%%#%%%%%#%%%%@*--%#=@%%%%@@%@@@@@@@@@@
1866 // #**##%#%%#%######%%%%%+*%####%#**#%%%%%%%%%#%###%%%##%#%%#+##%##%#++#@++#@%@%#%#@%@@%%%%%%%%%%%%%@%%%%%%#%#+*##%%###%%%%#%%%%%#+-%#=@@@%@@@@@@@@@%@@@@
1867 // %#####%#%#%###%%%%+#=*+#%######=##%%%%%%%####%#%%%%#%%%%*-*%*=##%+#%*=-=%%##%@%%%@@%%@@%%%%@%%@#%%*%%%#*%#*+=#%%%%%%%%%%%@%%%%#=-%@#@@%#%%@@#@@@@%%@@%
1868 // #**####%%%*#%%%%#+#%#*%%#%#%###=##%%%#%%%%%###%#%%##%%#*-=+*%%%%%#*=-----*####%%@#%%%%%%%%@%%@#%@#*#%#%%@%@%#-+%%%%%%%%%#%%%%%#*%%@%@@##%@@@@@@@@@@@@@
1869 // %***###%%%#%%%%%%##=**%%%%#%#%#%#%@%%%%%%%%%%%%%###%%%##=#%%%##%%%%%%%%%*#*##%%@@@@%%@%%%%#%%%%%#%%#@#%@%@%%@#==#%%%%%%%%%%%%@**%%%##%%#%@@@@@@@@@@@%@
1870 // #*#####%####%%%##%*=+###%#%%*#+%##%%%%%%%%%%%%##%%%%%%*###%%#%%%%#%%%%%%%%++*%%@@%%%%%#%%%@%%@@%%%%%%##%#%@%%%%***%%%%%#%%%%%%*+%##-#%%%%%@%@@@%@%@@@@
1871 // ######*#%%%%%#%%#%=+%####%##==#%#%#%%%%%%%#%#%%%%%@%*#%##%###%%%%#%%@@#%%%##**%@@%%%%%#%%@%%%%%%%#*%%%%#%#%%@%%%%==%##%%%%%%%#*+%#@=%%@@@@@%@@@@@@@@@@
1872 // *%##%%%##*@###%%#**##%%%%%%+-=%%@%%%#%%%%####%%%%%%%*#%%%#%%%%%%@%#%%%%%%%#%%%+=@%%%%%@%%#@@@@%%%%%%#%%%@@%%%%#%%%-+*+%#%%%%%%*+%%--#@%%%@@%@@@@@%@@@@
1873 // %###%###%######%%#%*%%%%%%#+-*+*#*#%###%%#%%%%#%%%#*+%%###%%%%%%@%#%##%%%#%%#%%-@@@@%%#%%@@####%%%@%%@%%@##%#%#%%@%--+%%##%##%*+##%+@@%%%@@@@@%@@%%@%%
1874 // ####%#%#%###%##%#*%#%%%%%#%####**#*###+*#%%@@%%%%%%##%%##%%%%%%%%%%%%%%%%%%%%%%+-%%%%@##%%@%%%%%%%%%%%%%######@%%%%@#+%%#%%##%%%%%*%@%%@#@@@@@@@@@%@@@
1875 // %#*#%*#%%%##%%%+*%%%%%%%###*#***#########%%##%%%%%#*%###%%%%%%%%%%%%%%%%%%#%%%%%++#%%%##%%%%%%%%%%%%#%%%##%##%%%%@%@@*+%%%%%%%##%%-%@@%%%@@@@@@@@@%@@@
1876 // ##*####%@@###%#-#%%%#%%%%+**###*######%#####*%@%#####%#%%%%%%%%%%%%#%%%%%%%%%%%%%===%%##%%%%%%%%@%%%%%%#%###%%#%@@@@@%=%%#%%%#%%%@-%@@@%@@@@@@%%%@@@@@
1877 // %%#%%##%%#%###**%%%###%#%-##%%#####*##%#####%@%%*+*%###%%%%%%%%%%%%%%%%%%%%%%%%%%*+==#%%%@@%%%%@%%%%%%%#%@%%%%%%@@@@@@**@%%%%#%%%@-**%%@@%@%@@@@@@@@@%
1878 // #*#%*#%%%#*%#%-%#%%%%##%#-=##%#####%%%%#@%%%%%@%%*@%%##%%%%%%%%%#%%%%%%%%%%%##%%%%*#-#%%#@@@%%%#@%@%%##%@%%%%%%@@@@@@@@==%%%%%%#%%%**%#%@@@@@@@@@@@@@@
1879 // #*#%%@%%%%%%%*#%%#%%%%%%**#%%%##*#%@%%%#%%@%%%%#%#%%%%%%%%%%%%%%%%%%%#%%%%%%%#%#%%%%#*%%#%%@%%%%%%%%%%##%%%##%@@@@@@@@@@=%#%%%%%%%%++%@%@@@@@%@@@@%@@@
1880 // ###%#%%%%%#%#+#%#%%#%%%%-*%####*##%%%%%%@@%%%%##%+#%%%%#%%#%%%%%%%%%%%%%%%%%%%%%%%%%%-%%%%%@%%%%@%%%##%%%%%%%@@@@@@@@@@@%=*%%%%%%%%*=%@@@@@@@@@@@@@@@@
1881 // ####%#%%#%##**#%#%##%%%+*##%#%%##%%#%%%%#@%%#%%%*%#%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%#%%%@%%%%%%@%%%#%%%%%%#%@@@@@@@@@%@%++%%%%%%%%#+%@@@@@@@@@@@@@@@@
1882 // ####%#%%%%##+#%%%##%#%%=*@%%###%%%%#%%@@%@@%#%%%=####%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%%%#*#%#%%%%%%#%%@#*###%%%@@@@@@@@@@@%@#*%%%#%#%%%#%%@@@@@@@@@%@@@@@
1883 // #%%%%@##%*%###%#%%%##%**@%#%%###%%@%%@@%#%%%##@*####%%%%%%%%#%%%%%%%%%%%%%%%%%%%%%%%@#-+%%%%%@%%%%%%%@%#%%%%%@@@@@#@%#@@@%**%%###%%%+#@-@@@@@@@%@@@@@@
1884 // ####%%#%#-*+%%%%%%%%#%**%%%%%##%##%%%%%@%%%%@%#+*%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%#%#*%%@%%%%%#%%##%%%#%#%%%@@%@%%@@@%%@*-#%%%%%%%*#@=@@@@@@%%%%@@@@
1885 // %#*###%%*++%%%%%%%%%%####%%####%%%%%%%%@%%#%%%#+*#%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%#%%%%%%@%%%%#%%%%%%%#%%@@@@@@@@%@@@@%@%=#@%%#%%%%=#-*@@@@@%@@@@@@@
1886 // @##**#%*==%#%%%%%%#%%*+%#%%%#%##%%@%@%%@%%##%%%%%%%%%%%%#%%%%#%%%%%%%#%%%%%#%%%%%%%%%%%*#+%%%%%###%%%%%%*#%%%@@@@@@@@%@%@@@=%@%%#%%%%#=#%@@@@@@@%@@@@@
1887 // %%##@%%%=#%###@%%%%%%**%%#%%%##%%%%#%@%@@##%%%%%%%%%%%%%#%%%%#%%#%%%%%%%%%%%%%%#%%%%%#%+*%%%%%%###%%%#%%%#%%@@@@@@%#%%%%@@%=%%%%##%%%%##+*%@@@%%@@@@@@
1888 // %@%%###+*########%%%##%@%#%###%@@%#%%@%%#%#%%#=##%%@%%%#%%%@%%%%%%%%%%%%%%%%%#%%%%%##%%%#%=@%%#@@%@#%%%%*%@@@@@@%%%@@@@%@@@%-#+%#%#%%#%%+*-@@@@@@@@@@@
1889 // #%#%#%#*##%%%%%%%%%%#=%%%%%%%%%%%%%%@@@@#%%%%==##%%#%%%%%%%%%%%%%@%%%%#%%%%%%#%%%#%%%%%%*-##%@%#%%#%#%##%%@@@@@@%#%@@@%%%@@@+%%%%%%%%#%%%#%#@@@@%@@@@@
1890 // %##%%%**%%%##%%#%%%%#*%%%%%%%%%%%%@%@%%%%@%@*#=#%%%#%%%%%%%%%%%%%%%%%%#%%%%%%%#%%%%%%%%%%++=##%%#%##%%%#%@@@@@@@%%@%@@@%@@@%@%%%#%%%%#%%##@-%@@@@@@@@@
1891 // %%#%%#+#%###%%%%%%%==%%%%##%%%%%%%@%@@@%%@%%#%#%%%%#%%%%%%%%%%%%%%%%%@#####%###%%%%%%%%%%%*++#=##%%#%%%%@@@%%@%%%%@@%@@%@@@%@=*%%%%%%%%@%%*#@@@@@@@@@@
1892 // %#%#%-#%##%##%%%@%@-%%%%@%%@%@%@@@%%%%%%%%%=#@%%%##%%%%%%%%%%%%%%%%%%@#%#%#%%%%%#%%#%%%%%%%%+*-%#%###%@@@@@@@%@@%%%@@@@%@@@@@#=%%@#%%%#%%@+%-#@%@@@@@@
1893 // ####%=#%###%%%%%%%%=%%%%%%@@%%%@@@@@%%%%%@@+#%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%#%%%%%#%%####%#%%%##%%@@@@@@%@@%%@@@@@%%@@@@@#+%%@%%%%%%%%=@-%@@@@@%@@
1894 // @##%#%#######%%#%%%%%@%%@%%%%%@%@@@%%%%%%@%%%%*%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%=*%#@%@%%@@@@%@@%%%@@@%%%@@@@@###%@%%%%%@%%+@-*#@@@@@@@
1895 // %%#%+%%#%%#%%%#%%%+#%%%%%%%%%@%@@%@%%%#%@%%@%%#%%%%%%%%%%%%#%%%%%%%%#%%%%#%%%%%%%%%%%%%%%#%%##%%#*##@%@@@%%@@@@@@%@@@%@%@@@@@%%+#@%@%#%@%%%*+**@@@@@@%
1896 // @%#+##%##%%@%%%%%%=%@%%%%%%%%%%@@@@@%@%#%@%#%%##%%%%%%#%%%%%%%%%%%%#%%%%%#%%%%%%%%%%%%#%%%%%%%%%%*#%%@@@@@@@@@%@@@@@@%%%@@@@@@#-#@#%%#%@@%%-%=#@%@@@@%
1897 // #%#+#%#%#####%%%#*#%%%%%%%@@%@@@@%@@%%%%%%**%%%%%%%%%%%%%%%%%%%%%@%%%%%%##%%%%%%%%%%%%##%%%%#%%%%+#@#%@@@@@@@@%@@@@@@#@@@@@@@@#-#%%%%#%%%%@#@+@@@@@@@@
1898 // %%#*%%##%#%%%%%#%+*%%%%@@%%%@%%%@@#%#%@%%%**#%%%%%%%%%%%%%%%%%%@%%%%%%%%%##%%%##%#%%@#%%#%#%###%%#@@@%%@@@@@@@@@@@@@%%%@@@@@@@%%%@%%%#%@%%%%++@@@@@@@%
1899 // *@*=#%%%%#%##%%%##%%#%%%@%@%@%@%%@%%%%@%@%+*#%%%#%%%%%%%%%%%%%%%%%%%%%%%%#%%%%#%%%#%%%%##%%%%%%%**@@%@@@@@@@@@@@@@@@%%%@@@@@@@@##@%%%%%@%%%%%#*%@@@@@@
1900 // #%**##%%%##%#%#%##%@@%%%%@@@@%%@%%%%#%%@%%++%%%%#%%%%%%%%%%%%%%%%%%%%%%%%#%@%%%%%%#%%%%#%%%%%%%%#*@@%%@@@@@@@@@@@@@#%@@@@@@@@@@**%@%%%%%@#%%%*:+@@@@@@
1901 // ####%##%%%##%%%%*%#%@@%%%@@%%@%@%@@%#%%@%#+*%%%%#%%%%%%%%%%@%%%%%%%%%#%%%%%%%%%#%%%@#%%##%%%%%%%%#@@@@@@@@@@@%@@@@@@@@@@@@@@@@@*#@@%%@@%%%%%%%+-@@@@@@
1902 // @%%%###%%*%%%%##**=-@%%%@@@@%%@@@@%%%@%%%*+%%%%%#%%%%%%%%%%@%%%@@%%%%#%%%%%%%%#%#%%%%%##%%%%%%%#=@%@@@@@@@@@@@@@@@@%%@@@@@@@@@%*#@%%%%%%#%%@#%%%@@@@@@
1903 // @*+#%#%%%#@%%%%%%%#--#%%@@%%@%@@%%%%@%@%%**%%%%%#@%%%%%%%@%%%%%%%%%%%%%%%%#%%%%%%%%%%%@%%%@%%#%%+%@@@@@@@@@@@@@@@@#%@@@@@@@@@@@@@%%%%%%%%%%@%@%=@@@@@@
1904 // #+*##%%%%%%%%#%#%%%=-=#@%@@%@%%%%%%@%%%%%#+%%%%%%%%%%%%%@%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#-*%%%%%%%%%%@%=%@+@@@
1905 // ####%%%%%#%%#%##%%%#+:=#%@@@%%%#%%%%@@%@@#+%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@#==%##%%@%%%%@%*#@=@@@
1906 // %#*+#%%%%#%%%%%%%%%##+:-%%%%%#%%%%%%%%@%@#+%%%@%%%%%%%%%%#%%%%%%%%%%%%%%%%@#%%%%%%%%#%%%%%%#%%@-@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#-%#%%%%%%%%@%%=%-#@@
1907 // @@@%-%#%%#%%###%%##@%#++-@@%%#@@%%%%@@%@@#+%@%@%%%#%%%%%%%%#%%%%%%%%%%%%%%%%%%@%@%%%%%%%%%@%%%%=@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@%%-%#%%%%%%%%@%%-@#*@@
1908 // @@**=%%%%%@%%%%%%%%%@%%#=##%@%@%@@%%%@@%%*+%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%@@@@@@@@@@@@@@@%@@@@@@@@%@@@@@@@@@@-%%%@%@%%%%%%@@-*#@@
1909 // %@%#%=@%%@%%%%%%%%%%%%%#%-**#@**%@%#@%%@%#*%%###%%#%%%%%@%%%%%%%%%%%%%%%%%%#%%%%%%%@%%%%%%%%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-%%%%%%%%%%%%@@+=*@@
1910 // %%%#+*%%%@%%%%##%%%%%%%#%*+=++-++%@=++%%%##%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%-@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@=%%%%%%%%%#%%%@@*+@@
1911 // #%@%#++%%@%%%%%#%%%%%%%%%%%######@@--+%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%%%%%%%%%%%#%%%=@@@@@@@@@@@@@%%@@@@@@@@%@@@@@@@@@@*%%%@@%%%#%%%%%@#=#@
1912 // #%%%#%=%%%%%%%@#%%%%#%%@%%%%%@%%%%@%:-*%%####%%%%%%%%%%%%%%%%%%%%@%%@%%%#%%%%%@%%%%%@%%%#%@%%%%%@@@@@@@@@@@@@@%@@@%@@@@@@%@@@@@@@@-=%%#%@@%%%%@%%@%*+@
1913 // %@@%#%*+#%@@@%%@%%%%%%%%%%%%%%@%%%%@%=-#%#%%%%%%%%%%%%%%%%%%@%%%%@%%@%%%%%%%%%%%%%%%%%%%%%%%%%%@%@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@%=@%%%%%@%%%#%@%%@%++@
1914 // %@@%%%%=+%%@@%%%%%%%%%%%%#%%%%%%%%%%%#=*#@#%@%%%%%%%%%%%%%%%@%%%%%%%%@%%%%%%%#%%%%%%%%%%#%%%%%%%*@@@@@@@@%@@%@@@@@@@@@@@@@@@@@@%*%%@%%%%@%%@#%@%%@%*#@
1915 // *%@%%@@%==%@%@@%%%%@%%%#%%%%%%@%%%%#%#*+*#=*+%%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%#%%%%%%#=@@@@@@@%@%%@@@@@@@@@@@@@@@@*@*##@%%%%%%%%%%#%@%%@%%*@
1916 // #%@@%%@@%-@@@%@%%%%@%#%%%%%%%%%%%%%%%%%#=%=+#=%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%#%%%%%@#=@@@@@@%@@%%@@@@@@@@@@@@@@##%=%%@@%@%@%@%%%#%%@%@%%%=%
1917 // @%@@@@%@@%-%%%%@%%%%@%#@%%%%%#%%##%%#%%%%%+-+%%%%@%%%%%%%%%%@%@%%%%%%@%%#%%%%%%%#%@@@%%%%%%#%%%@=@@@@@@@@@@@@@@@@@@@@@@@-+@=-@%@@%@%%%%##%%#@@@%@%%@=*
1918 // @%@@@@@%@%%+#%%%#%%%@%#%%#%%%%%%#%%#%%%%%%#-%-*%=#%%%%%%%%%%@%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%%#%*@@@@@@@%@@@@@@@@%%-%==@@@%%%#%%%%%%%@%#%%%%%%%%%%%%=:
1919 // @@@%@@%@@@@#=+%%@%%@%%%%@#%%%#%%##%%%%%#%%%=%-*%+##%%#%%%%%%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%-#@@@@@%@@#@*%@@##%*+*@@@@%%%%%%%%#%%%%@%#%%%%%%%%%%@@+:
1920 // %@@%@@@@@@@%*-=%@%%%@%%%@%%%%%%%%%%%%%##%%%=%*%#%%-%%%%%%%%%%%%%%%%%@@#%%%%%%%%%%%%%%%%%%%%%%+-*@@%##@%@*@#%*%**%%%%@@@%@%%%%%%%#@#%@%#%%%@%%%%%%@@@**
1921 // @@%%@%@@%@@@%%-#=%%%@%%%%%@@%@%%%#%%#%%%%%%==%%%@=-%%%%%%%%%%%@%%%%%@%%%%%%%%%@%%%%%%%%%%%%@*-#@%#@@@@*=%@@+=@@%%%%%@%%%@%%%%@%%%%%%%%%@%%%%%@@%@@+##@
1922 // %%@@%@@%#@%%@@#@+*#%%%%%%%%@%@%%@%%%@##%%%%%#%%%%@:=%%%%%%%%%%%%%%@%%%%%%@%#%@@%%%%%%%%%%%%#-*%@@%==------%%@@%@%%%@%%%%#%%%#%%%%%%%%%%%%@@%@@%@@*-*@@
1923 // #@@@%@@@%%%@@%@=##+%%%%%%%%%%%@%%%%%%%%%%@%#%%@%%@-=%%%%%%%%%%@%%%@%%%%%%@%%@%%%@%%%%@%%%%#-++=++*+==+@%@%%%%%%%%%%%%%%%%##%%%%%%#%#%@%%@@%@@#+#%@*@@@
1924 // #%%@@@@@@@@%@@@@+++@%%%%%@%%%%%%%%#%%%%%%%%%%%@@#*+=#%%%%%%%%%%%%%%%%%%%%@%%%*#%%%#%%@%%%%+=%%%%%%%@@@%%%%%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%@%@@%+*%@@@@@@
1925 // %%%%@@%@@@@@@@@@%==%@%%%%%%%%@%%%%%%%%%%%%%%#%@@+*+#%%@%%%%%@%%%%%%%%%%%@@%%=+#%#+%%%%%%%%-#%%%%%@%@@%%%##%%%%%@%%%@%%%%%%#%%%%%%%%%%%%@%%@%=+*@@@@@@@
1926 // %%%%%%%@@@@@@@@@@%=%@%%@%%@%@%%%%%@%%%%#%%###%%@=%=@*#%%%%%%@%*#%##%%%%%%+===%%%=#%%%#--+=#%%%%%%@@@%%%%%%%%%%@%%%%%%%%%%%%%%@%%%%@%@@%%%@%%-+@@@@@@@@
1927 // @%@@@@@@%%@@@@@@@@@*@@%%%%%%%%%%@%#@%%%%%%%%%@@%=%-#**-+%%@%%%+#%#%%%###+---%%%-=%%#-%%%=#%%%%%@@%@%%%%%@#%%%@%##%%%%%#@%%%%%%@#%%%%%@%-%*#@=@@@@@@@@@
1928 // #@%%@@@@@@@@@@@@@@@+-#@%%@%%%%#%%%#%%%%%#%%%%%@@==-=+*+#%@%#%#-*##%#%%#+++*%%#+-#%%+*##*%%%%%%@@@%%%%%%@%%%%%%#%%%%%%%@@%%%%%@%%%%@%%#-=*#@@%@@@@@@@@@
1929 // #%%%@@@%%@@@@@@@@@@@+=*%@%%%%%#%%%#%%%%%#%%%@%%@*%-=*-%-#%@+%#+#+#%%%%+=*#%*##+-+##+++#@%%%%%%@@%%%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%@@%@%=-%#@@@@@@@@@@@@@
1930 // %%@%@%@%@@@@@@@@@@@@@##+@@%%%%#%%%%%%%%%#%%#%%%@%@-+#*+-=#@%@*##=#%%%+-+*%+--+**%=-+==#%%%%%%@@%%%%@%%%%%#%%%%%%%%%%%%%%%%%%%%%%%@%%*-#@@@@@@@@@@@@@@@
1931 // @@@@@@@%@@@@@@@@@@@@@@@%=%@%%%%#%#%%@#%%#%@%%@%@%=-==%%-*-%@=##=#%*--##+%=.+=*=--..::-@%@@%%@%@%%@@%%%%%%%%%@%%%%%%%%%%%@%%%#%%@@@%#*%@@@@@@@@@@@@@@@@
1932 // %@@@%@@@%@@@%@@@@@@@@@@@@#+@@%%%%%%%%%%#%#%%%@%%%@--=#*-=++%-%%*#%%+*---=*+**. .*. :*@=%@%%%@%%#%@%%%%#%%@%%@%%%%%%%%%%@@%%#%%@#=-@%@@@@@@@@@@@@@@@@@@
1933 // @@@@@@@@@@@@@@@@@@@@@@@@@@%*@+%%#%%%%%%%@#%##@%***::=*#*#+*--*+#@@%*==+:- = . :+.:-*=#*%%%%%@@%%%%%%%%%%@%%@%%%%%%%@%%%@%%%%@%#+=%@@@@@@@@@@@@@@@@@@@@
1934 // @@@@@%@@@@@@@@@@@@@@@@@@@@@#%#*%%%#%%%%%#####@%#+-=:=*:*+=+-=#*%%%*#++ :-. -:.-..-:=%=@%%%%@@%%%%%%%%%%%%@%@%%%%%%%%%%%%%%%@@**=+@@@@@@@@@@@@@@@@@@@@@
1935 // %@@@@@@@@@@@@@@@@@@@@@@@@@@@@##%%%%%%%%###%##%%@%=%:+=-**-=-:=*#%++-: ... +:.==.-=:-+=%%%%%@@%%%%@%%%#%@%%%%%%%%@%#%%%%%%%@@++*+@@@@@@@@@@@@@@@@@@@@@@
1936 // @@@@@@@@@@@@@@@@@%@@@@@@@@%@@@@%%#%#%%#%%####@%*+-#--+=.--=...:--*+:-..:=*:-:-:::-=*-#@%%@%@%%%@%%%%%%%%%%%@%@%@%%%%%%%@%%---=@@@@@@@@@@@@@@@@@@@@@@@@
1937 // @@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@+%##%%%##%#%##%%*.-%..*.::-. -#-=@.:--=.-+--.-:.:=-#=%%%%%@@%@%@%#%%%%%%%%@@%@%@@%%%%%%%+-#==@@@@@@@@@@@@@@@@@@@@@@@@@@
1938 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=@%%%%%%%%##%#%##=:* .- -.::=#*-- :-*-.*-:= -.::#*:#=**@%%%%%%%%%%%%%@%%%@@%%@%%%%@%##+=#-=#@@@@@@@@@@@@@@@@@@@@@@@@@@@
1939 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%=%%#%%%@%%#%%%%##-:..:+.:.:=:==-.::*=+:-::. .  :-.=%**%@%@%%%%%%%%%%@@%%%@@%%%%@%###-*=**#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1940 // @@@@@@@@@@@@@@@@@@@%@@@@@@%@@@%=%@%#%%%%%#%%#%%%-...... -=:++:+--=::.=---:.- ..: =**@@@%@@@%%%%@@%%@%%@@@%%@@@+%%+%-*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1941 // @@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@=#@%%%%@%##%%%%#+:.- .  .++-==:-+#:  .#:...# .=:.%%=*%@%%%%%%%%%@%@%%%@@@=----@----@%@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@
1942 // %@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@=%@%%@%%%#%#%%%#--#-    *+:*-.=+. :...-:.:*.:+:.-*=:#%@@%%%%%%@@%%@%#%+*#@@#*@==@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1943 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=%%@%%%%%%%#%%@#-=+:. .:-##=.::.=.:-::. =*=:...:-+=-#@@@%%%%@@%@%%%#+%#@*+*+=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1944 // @@@@@@@@@@@@@@@@@@@%@@@%@@@@@@@*@%%%%%%%%%%%%@**%-   ===+*-=+=+=-+-..-=+*:.:-:-*%=##%@@%%%%@@@%%%**@@#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1945 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%@%%%%%#@-*@.+=.=*=-#+#=.-=.-:=*:-::.+.#--+=#@@%@@@%@%%%%%%%*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1946 // @@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@#%%%%%%@%%%%@@@*#= %:-.++*+=%.#%--%%+#+=%%%@%%@@@-@@@@@%@@%@%%%@@+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@
1947 
1948 //Metti For Roe v. Wade is a NFT art collection from Pumpametti to support a woman's right to choose. SCOTUS' overturn of Roe v. Wade further distances America from one of the core principles of American constitutional democracy, the separation of church and state. 
1949 //Free mint of 1000 art pieces, 300 reserved for OG Pumpametti collectors. 
1950 //All royalties from this collection will go to support non-profit organizations fighting for women's reproductive rights.
1951 
1952 //SPDX-License-Identifier: MIT
1953 
1954 interface PumpaInterface {
1955     function ownerOf(uint256 tokenId) external view returns (address owner);
1956     function balanceOf(address owner) external view returns (uint256 balance);
1957     function tokenOfOwnerByIndex(address owner, uint256 index)
1958         external
1959         view
1960         returns (uint256 tokenId);
1961 }
1962 
1963 pragma solidity ^0.8.0;
1964 
1965 
1966 
1967 
1968 
1969 
1970 contract MettiForRoeVWade is ERC721Enumerable, Ownable, IERC2981 {
1971   using Strings for uint256;
1972   using SafeMath for uint256;
1973  
1974   string public baseURI;
1975   string public baseExtension = ".json";
1976   string public notRevealedUri;
1977   uint256 public cost = 0 ether;
1978   uint256 public maxPumpaSupply = 300;
1979   uint256 public maxPublicSupply = 700;
1980   uint256 public maxMintAmount = 1;
1981   bool public paused = false;
1982   bool public revealed = false;
1983   
1984   uint16 internal royalty = 700; // base 10000, 7%
1985   uint16 public constant BASE = 1000;
1986 
1987   address public PumpaAddress = 0x09646c5c1e42ede848A57d6542382C32f2877164;
1988   PumpaInterface PumpaContract = PumpaInterface(PumpaAddress);
1989   uint public PumpaOwnersSupplyMinted = 0;
1990   uint public PublicSupplyMinted = 0;
1991 
1992   constructor( 
1993     string memory _initBaseURI,
1994     string memory _initNotRevealedUri
1995   ) ERC721("MettiForRoeVWade", "METTI4ROE") {
1996     setBaseURI(_initBaseURI);
1997     setNotRevealedURI(_initNotRevealedUri);
1998   }
1999 
2000   // internal
2001   function _baseURI() internal view virtual override returns (string memory) {
2002     return baseURI;
2003   }
2004 
2005   function PumpaFirstChoiceVIPMint(uint PumpaId) public payable {
2006     require(PumpaId > 0 && PumpaId <= 300, "Token ID invalid");
2007     require(PumpaContract.ownerOf(PumpaId) == msg.sender, "Not the owner of this Pumpa");
2008 
2009     _safeMint(msg.sender, PumpaId);
2010   }
2011 
2012 function PublicMint(uint256 _mintAmount) public payable {
2013     require(!paused);
2014     require(_mintAmount > 0);
2015     require(msg.value >= 0 ether * _mintAmount);
2016     require(_mintAmount <= maxMintAmount);
2017     require( tx.origin == msg.sender, "CANNOT MINT THROUGH A CUSTOM CONTRACT");
2018     require(PublicSupplyMinted + _mintAmount <= maxPublicSupply, "No more Public supply left");
2019 
2020     for (uint256 i = 1; i <= _mintAmount; i++) {
2021       _safeMint(msg.sender, maxPumpaSupply + PublicSupplyMinted + i);
2022     }
2023     PublicSupplyMinted = PublicSupplyMinted + _mintAmount;
2024 }
2025 
2026   function tokenURI(uint256 tokenId)
2027     public
2028     view
2029     virtual
2030     override
2031     returns (string memory)
2032   {
2033     require(
2034       _exists(tokenId),
2035       "ERC721Metadata: URI query for nonexistent token"
2036     );
2037     
2038     if(revealed == false) {
2039         return notRevealedUri;
2040     }
2041 
2042     string memory currentBaseURI = _baseURI();
2043     return bytes(currentBaseURI).length > 0
2044         ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
2045         : "";
2046   }
2047   
2048   //onlyOwner
2049   
2050   function reveal() public onlyOwner {
2051       revealed = true;
2052   }
2053   
2054   function setBaseURI(string memory _newBaseURI) public onlyOwner {
2055     baseURI = _newBaseURI;
2056   }
2057 
2058   function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
2059     baseExtension = _newBaseExtension;
2060   }
2061   
2062   function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
2063     notRevealedUri = _notRevealedURI;
2064   }
2065 
2066   function pause(bool _state) public onlyOwner {
2067     paused = _state;
2068   }
2069   
2070   function royaltyInfo(uint256, uint256 _salePrice)
2071         external
2072         view
2073         override
2074         returns (address receiver, uint256 royaltyAmount)
2075     {
2076         return (address(this), (_salePrice * royalty) / BASE);
2077     }
2078 
2079   function setRoyalty(uint16 _royalty) public virtual onlyOwner {
2080         require(_royalty >= 0 && _royalty <= 1000, 'Royalty must be between 0% and 10%.');
2081 
2082         royalty = _royalty;
2083     }
2084 
2085   function withdraw() public payable onlyOwner {
2086     require(payable(msg.sender).send(address(this).balance));
2087   }
2088   
2089 }