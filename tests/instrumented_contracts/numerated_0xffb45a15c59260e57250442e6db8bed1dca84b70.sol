1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "contracts/PulseBitcoinLockRewards.sol": {
14       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface PulseBitcoinLockNFTInterface {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function lockTime(uint256 tokenId) external view returns (uint256);\r\n\r\n    function tokenIdsToAmounts(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\ncontract PulseBitcoinLockNFTRewards is Ownable {\r\n    address public CARN;\r\n    address public immutable waatcaAddress;\r\n    address public immutable bulkClaimer;\r\n    PulseBitcoinLockNFTInterface pulseBitcoinLockNftContract;\r\n    address public pulseBitcoinLockNftContractAddress;\r\n    mapping(uint256 => bool) public tokenIdsToRegistered; // True if they registered their NFT for rewards...will be able to withdraw rewards 1 day after registering\r\n    mapping(uint256 => uint256) public tokenIdsToLastWithdrawalDay; // records the last day they withdrew rewards\r\n    mapping(uint256 => uint256) public tokenIdsToDailyRewardAmount; // records their daily rewards amount\r\n    mapping(uint256 => uint256) public tokenIdsToEndRewardsDay; // records their last day they can get rewards (max 1000 after registering)...(the smaller of 1000 or their actual end day measured from registration day)\r\n    uint256 internal constant LAUNCH_TIME = 1680048000; // Wednesday, March 29, 2023 12:00:00 AM\r\n    uint256 public totalFreeCarnWithdrawn;\r\n\r\n    constructor(address _waatcaAddress, address _pulseBitcoinLockNftContractAddress, address _bulkClaimer) {\r\n        waatcaAddress = _waatcaAddress;\r\n        pulseBitcoinLockNftContractAddress = _pulseBitcoinLockNftContractAddress;\r\n        pulseBitcoinLockNftContract = PulseBitcoinLockNFTInterface(pulseBitcoinLockNftContractAddress);\r\n        bulkClaimer = _bulkClaimer;\r\n    }\r\n\r\n    function setCarnAddress(address _rewardTokenCARN) public onlyOwner {\r\n        CARN = _rewardTokenCARN;\r\n    }\r\n\r\n    function withdrawRewards(uint256 tokenId) public {\r\n        address tokenOwner = pulseBitcoinLockNftContract.ownerOf(tokenId);\r\n\r\n        require(\r\n            msg.sender == tokenOwner || msg.sender == bulkClaimer,\r\n            \"You are not the owner of this NFT, or the bulk claimer address\"\r\n        );\r\n        require(\r\n            tokenIdsToRegistered[tokenId],\r\n            \"You must register your NFT for rewards first\"\r\n        );\r\n        require(\r\n            tokenIdsToLastWithdrawalDay[tokenId] < tokenIdsToEndRewardsDay[tokenId],\r\n            \"You have already received all possible rewards for this NFT\"\r\n        );\r\n        require(\r\n            _currentDay() > tokenIdsToLastWithdrawalDay[tokenId],\r\n            \"Cannot withdraw twice on the same day, try again tomorrow\"\r\n        );\r\n\r\n        uint256 totalDaysOfRewardsLeft = tokenIdsToEndRewardsDay[tokenId] - tokenIdsToLastWithdrawalDay[tokenId];\r\n        uint256 numOfDaysSinceLastWithdrawal = _currentDay() - tokenIdsToLastWithdrawalDay[tokenId];\r\n\r\n        // if numOfDaysSinceLastWithdrawal is greater than (their EndRewardsDay-LastWithdrawalDay) then set numOfDaysSinceLastWithdrawal to (their EndRewardsDay-LastWithdrawalDay)\r\n        if (numOfDaysSinceLastWithdrawal > totalDaysOfRewardsLeft) {\r\n            // in this scenario they are past the end of their lock up period.\r\n            // meaning they locked up for 500 days, and its now day 540 for example (or 501)\r\n            // in that case we only want to give them rewards from their last withdrawal day, up until the last day they are eligible for rewards (day 500)\r\n            // so if their last withdrawal day was day 400, we would only give them 100 days worth of rewards and not 140\r\n            numOfDaysSinceLastWithdrawal = totalDaysOfRewardsLeft;\r\n        }\r\n\r\n\r\n        IERC20(CARN).transfer(tokenOwner, tokenIdsToDailyRewardAmount[tokenId] * numOfDaysSinceLastWithdrawal);\r\n        IERC20(CARN).transfer(waatcaAddress, tokenIdsToDailyRewardAmount[tokenId] * numOfDaysSinceLastWithdrawal);\r\n        totalFreeCarnWithdrawn += tokenIdsToDailyRewardAmount[tokenId] * numOfDaysSinceLastWithdrawal;\r\n\r\n        tokenIdsToLastWithdrawalDay[tokenId] = _currentDay();\r\n    }\r\n\r\n    function registerNftForRewards(uint256 tokenId) public {\r\n        address tokenOwner = pulseBitcoinLockNftContract.ownerOf(tokenId);\r\n\r\n        require(\r\n            msg.sender == tokenOwner || msg.sender == bulkClaimer,\r\n            \"You are not the owner of this NFT, shame on you!\"\r\n        );\r\n\r\n        require(!tokenIdsToRegistered[tokenId], \"It seems you have already registered this NFT, go enjoy the rest of the carnival!\");\r\n\r\n        // get the '(the end day of their lock period)' for this tokenId\r\n        uint256 endOfLockPeriod = pulseBitcoinLockNftContract.lockTime(tokenId);\r\n\r\n        // calculate numDaysLockedUpFromRegistration (the end day of their lock period) - (the day they are registering...today) // set this to 1000 if its greater than 1000\r\n        uint256 numDaysLockedUpFromRegistration = ((endOfLockPeriod - LAUNCH_TIME) / 1 days) - _currentDay();\r\n        uint256 numDaysLockedUpFromRegistrationForRewards = numDaysLockedUpFromRegistration;\r\n\r\n        if (numDaysLockedUpFromRegistrationForRewards > 1000) {\r\n            // this makes locking more than 1000 PLSB for more than 1000 days, not beneficial in terms of getting rewards\r\n            // we still want to let the user collect rewards everyday throughout their whole lock period, we keep the value of numDaysLockedUpFromRegistration\r\n            // for the calculation of tokenIdsToEndRewardsDay later in this function\r\n            numDaysLockedUpFromRegistrationForRewards = 1000;\r\n        }\r\n\r\n        uint256 amountPLSBLockedUp = pulseBitcoinLockNftContract.tokenIdsToAmounts(tokenId);\r\n\r\n        if (amountPLSBLockedUp > 1000) {\r\n            // this makes locking more than 1000 plsb for more than 1000 days, not beneficial in terms of getting rewards\r\n            amountPLSBLockedUp = 1000;\r\n        }\r\n\r\n        // calculate this nft's tokenIdsToDailyRewardAmount (amount of PLSB locked * (numDaysLockedUpSinceRegistration / 1000) * 0.0015)\r\n        tokenIdsToDailyRewardAmount[tokenId] =\r\n        1_000_000_000_000 * (amountPLSBLockedUp * numDaysLockedUpFromRegistrationForRewards * 15) / 10_000_000;\r\n\r\n        // set his registered value as TRUE (for that first require statement at the top of the function)\r\n        tokenIdsToRegistered[tokenId] = true;\r\n\r\n        // set his tokenIdsToLastWithdrawalDay to the _curentDay\r\n        // even though this nft never had a real withdrawal, set the lastWithdrwalDay to today as a starting point to measure future withdrawals from\r\n        tokenIdsToLastWithdrawalDay[tokenId] = _currentDay();\r\n\r\n        // send the user his daily allotement of reward token for 1 days worth\r\n        // as 1) a reward for registering, also it informs the user how much theyll be recieving per day\r\n        if (tokenId < 1343){\r\n            // give a bonus to the first 500 NFT's created\r\n            // partially beneveolent and partially because people lost out who locked up earlier before the launch of this project\r\n            IERC20(CARN).transfer(tokenOwner, tokenIdsToDailyRewardAmount[tokenId] * (1350-tokenId)/10 );\r\n            IERC20(CARN).transfer(waatcaAddress, tokenIdsToDailyRewardAmount[tokenId] * (1350-tokenId)/10 );\r\n            totalFreeCarnWithdrawn += tokenIdsToDailyRewardAmount[tokenId] * (1350-tokenId)/10;\r\n        } else {\r\n            IERC20(CARN).transfer(tokenOwner, tokenIdsToDailyRewardAmount[tokenId] * 7);\r\n            IERC20(CARN).transfer(waatcaAddress, tokenIdsToDailyRewardAmount[tokenId] * 7);\r\n            totalFreeCarnWithdrawn += tokenIdsToDailyRewardAmount[tokenId];\r\n        }\r\n\r\n        // set tokenIdsToEndRewardsDay to currentday + numDaysLockedUpFromRegistration (max 1000 days from registration)\r\n        tokenIdsToEndRewardsDay[tokenId] = _currentDay() + numDaysLockedUpFromRegistration;\r\n    }\r\n\r\n    function currentDay() external view returns (uint256) {\r\n        return _currentDay();\r\n    }\r\n\r\n    function _currentDay() internal view returns (uint256) {\r\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n    }\r\n}\r\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}