1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/manebase.sol": {
5       "content": "// contracts/nftclub.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"erc721a/contracts/ERC721A.sol\";\n\n// Share configure\nstruct TShare {\n    address owner;\n    uint256 ratioPPM;\n}\n\nabstract contract ERC721AM is ERC721A {\n    mapping(address => uint256[]) public tokenIDByHolder;\n\n    // Override the _transfer function to record holders\n    function _transfer(address from, address to, uint256 tokenId) internal override {\n        super._transfer(from, to, tokenId);\n        updateHolderInfo(from, to, tokenId);\n    }\n\n    function updateHolderInfo(address from, address to, uint256 tokenId) internal {\n        tokenIDByHolder[to].push(tokenId);\n        for (uint256 i = 0; i < tokenIDByHolder[from].length; i++) {\n            if (tokenIDByHolder[from][i] == tokenId) {\n                tokenIDByHolder[from][i] = tokenIDByHolder[from][tokenIDByHolder[from].length - 1];\n                tokenIDByHolder[from].pop();\n                break;\n            }\n        }\n    }\n}\n\n\ncontract ManeBase is ERC721AM, Ownable {\n    // Mint price in sale period\n    uint256 public _salePrice;\n    \n    address public factory;\n    \n    uint256 public platformBalance;\n    uint256 public ownerBalance;\n    uint256 public collectorBalance;\n\n    uint256 private _reserveQuantity;\n\n    // Max number allow to mint\n    uint256 public _maxSupply;\n  \n    // Presale and Publicsale start time\n    uint256 public presaleStartTime;\n    uint256 public presaleEndTime;\n    uint256 public saleStartTime;\n    uint256 public saleEndTime;\n\n    // Presale Mintable Number\n    uint256 public presaleMaxSupply = 0;\n    uint256 public presaleMintedCount = 0;\n\n    // Mint count per address\n    mapping(address => uint256) public presaleMintCountByAddress;\n    uint256 public presaleMaxMintCountPerAddress;\n\n    mapping(address => uint256) public saleMintCountByAddress;\n    uint256 public saleMaxMintCountPerAddress;\n\n    // Platform fee ratio in PPM\n    uint256 public platformFeePPM = 0;\n\n    // Super admin is able to set isForceRefundable flag to true in 7 days since the first token was minted in the public sale period or all tokens were minted in the presale period.\n    // When isForceRefundable is set to true, token holders can get a full refund in 7 days.\n    // Neither Creators nor platform is also not allowed to withdraw in 7 days when isForceRefundable is set to true.\n    uint256 public isForceRefundable = 0;\n    uint256 public forceRefundDeadline = 2**32;\n\n    // Is the contract paused\n    uint256 public paused = 0;\n\n\n    event TokenMinted(address minter, uint256 tokenId , uint256 mintPrice, uint256 platformFee);\n    \n    //event ContractDeployed(address sender, address contract_address, uint256 reserveQuantity, uint256 clubId);\n\n\n    // Mint Information\n    // mapping(tokenID => TMintInfO)\n    struct TMintInfo {\n        uint256 isPreMint;\n        uint256 isRefunded;\n        //address minter;\n        uint256 price;\n    }\n    mapping(uint256 => TMintInfo) public _mintInfo;\n\n    // Refund Times and Ratios\n    struct TRefundTime {\n        uint256 endTime;        /// Refund is available before this time (and isRefundable == true). In unix timestamp.\n        uint256 ratioPPM;       /// How much ratio can be refund\n    }\n\n    \n    // Share list\n    TShare[] public _shareList;\n\n    // Refund Time List    \n    TRefundTime[] public _refundTimeList;\n\n    /**\n    u256[0] =>  reserveQuantity\n        [1] =>  maxSupply\n        [2] =>  presaleMaxSupply\n        [3] =>  clubID              (obsoleted)\n        [4] =>  presaleStartTime\n        [5] =>  presaleEndTime\n        [6] =>  saleStartTime\n        [7] =>  saleEndTime\n        [8] =>  presalePrice        (obsoleted)\n        [9] =>  salePrice\n        /// How many tokens a wallet can mint\n        [10] => presalePerWalletCount\n        [11] => salePerWalletCount\n        [12] => signature nonce\n    */ \n    constructor(string memory name_, string memory symbol_, uint256[] memory u256s,\n                address[] memory shareAddresses_, uint256[] memory shareRatios_, uint256[] memory refundTimes_, uint256[] memory refundRatios_\n            ) ERC721A(name_, symbol_) {   \n        require(u256s[0] + u256s[2] <= u256s[1], \"MB:small maxSupply\");\n\n\n        // 1. Deplay and log the create event\n        factory = msg.sender;\n\n        _reserveQuantity = u256s[0];\n        presaleMaxSupply = u256s[2];\n        setPresaleTimes(u256s[4], u256s[5]);\n        setSaleTimes(u256s[6], u256s[7]);\n        setMintPrice(u256s[9]);\n        _maxSupply = u256s[1];\n\n        transferOwnership(tx.origin);\n\n        //emit ContractDeployed(tx.origin, address(this), u256s[0], u256s[3]);\n\n        /// 2. Reserve tokens for creator\n        initReserve(u256s[0]);\n\n        /// 3. Setting share list\n        uint256 totalShareRatios = 0;\n        for (uint256 i = 0; i < shareAddresses_.length; i++) {\n            TShare memory t;\n            t.owner = shareAddresses_[i];\n            t.ratioPPM = shareRatios_[i];\n\n            totalShareRatios += t.ratioPPM;\n\n            _shareList.push(t);\n        }\n        require(totalShareRatios <= 1 * 1000 * 1000, \"MB:shareRatios overflow\");\n\n        /// 4. Setting refund times\n        require(refundTimes_.length == refundRatios_.length, \"MB:length mismatch\");\n        uint256 oldEndTime = 0;\n        uint256 oldRatio = 1e9;\n        for( uint256 i = 0; i < refundTimes_.length; i++) {\n            TRefundTime memory t;\n            t.endTime = refundTimes_[i];\n            t.ratioPPM = refundRatios_[i];\n\n            require(t.endTime > oldEndTime, \"MB:refundTimes invalid\");\n            require(t.ratioPPM < oldRatio, \"MB:refundRatio invalid\");\n\n            oldEndTime = t.endTime;\n            oldRatio = t.ratioPPM;\n\n            _refundTimeList.push(t);\n        }\n        \n\n        /// 5. Setting mint limit for wallets\n        presaleMaxMintCountPerAddress = u256s[10];\n        saleMaxMintCountPerAddress = u256s[11];\n        unchecked{\n            if (presaleMaxMintCountPerAddress == 0) {\n                presaleMaxMintCountPerAddress -= 1;\n            }\n            if (saleMaxMintCountPerAddress == 0) {\n                saleMaxMintCountPerAddress -= 1;\n            }\n        }\n\n        /// 6. Setting platform PPM\n        platformFeePPM = ManeFactory(factory).platformFeePPM();\n    }\n\n    function initReserve(uint256 reserveQuantity) private {\n        if (reserveQuantity > 0) {\n            uint256 currentIndex = _currentIndex;\n            _mint(tx.origin, reserveQuantity, \"\", false);\n            for (uint256 i = currentIndex; i < currentIndex + reserveQuantity; i++) {\n                emit TokenMinted(tx.origin, i, 0, 0);\n                tokenIDByHolder[tx.origin].push(i);\n            }\n        }\n    }\n\n\n    function getAll() public view returns (uint256[] memory) {\n        uint256[] memory u = new uint256[](12);\n       \n        u[0] = _reserveQuantity;\n        u[1] = _maxSupply;\n        u[2] = presaleMaxSupply;\n        // u[3] = clubId;   // (obsoleted)\n        u[4] = presaleStartTime;\n        u[5] = presaleEndTime;\n        u[6] = saleStartTime;\n        u[7] = saleEndTime;\n        // u[8] = 0;       // (obsoleted)\n        u[9] = _salePrice;\n        // u[10] = presaleMaxMintCountPerAddress;       // Shrink contract size\n        // u[11] = saleMaxMintCountPerAddress;          // Shrink contract size\n\n        return (u);\n    }\n    \n    // Minted token will be sent to minter\n    // sign_deadline, r, s, v is only require at presale perioid. These parameters are server-side signature data.\n    function mint(address minter, uint256 mint_price, uint256 count, uint256 sign_deadline, bytes32 r, bytes32 s, uint8 v) payable whenNotPaused public {\n        uint256 isPresale = 0;\n        uint256 isSale = 0;\n\n        // 0. Check is mintable\n        if (block.timestamp < presaleStartTime) {\n            // Period: Sale not started\n            revert(\"MB:Not started\");\n        } else if (block.timestamp >= presaleStartTime && block.timestamp < presaleEndTime) {\n            // Period: Pre-sale period\n            require(msg.value >= mint_price * count, \"MB:presale val\");\n            isPresale = 1;\n        } else if (block.timestamp >= saleStartTime && block.timestamp <= saleEndTime) {\n            // Period: Public sale perild\n            require(mint_price == _salePrice, \"MB:mint_price\");\n            require(msg.value >= _salePrice * count, \"MB:sale val\");\n            isSale = 1;\n        } else {\n            revert(\"MB:Invalid period\");\n        }\n\n        /// Mint `count` number of tokens\n        for (uint256 i = 0; i < count; i++) {\n            require(totalMinted() < _maxSupply, \"MB:No more\");\n\n            if (isPresale == 1) {\n                requireMintSign(minter, mint_price, count, sign_deadline, r, s, v);\n\n                presaleMintedCount++;\n                require(presaleMintedCount <= presaleMaxSupply, \"MB:Exceed\");\n                \n                presaleMintCountByAddress[msg.sender]++;\n                require(presaleMintCountByAddress[msg.sender] <= presaleMaxMintCountPerAddress, \"MB:addr(A)\");\n            } else if (isSale == 1) {\n                //requireMintSign(minter, mint_price, sign_deadline, r, s, v);\n\n                saleMintCountByAddress[msg.sender]++;\n                require(saleMintCountByAddress[msg.sender] <= saleMaxMintCountPerAddress, \"MB:addr(B)\");\n                \n            } else {\n                revert(\"MB:Not sale period\");\n            }\n\n\n            // 1. Mint it\n            uint256 currentIndex = _currentIndex;\n\n            _mint(minter, 1, \"\", false);\n            tokenIDByHolder[minter].push(currentIndex);\n\n\n            // 2. Send mint value to creator and platform and collectors\n            uint256 platformGot = mint_price * platformFeePPM / 1e6;\n            uint256 collectorGot = (mint_price - platformGot) * getCollectorTotalRatioPPM() / 1e6;\n            uint256 ownerGot = mint_price - platformGot - collectorGot;\n            \n            platformBalance += platformGot;\n            collectorBalance += collectorGot;\n            ownerBalance += ownerGot;\n\n            // 4. Log events and other data\n            _mintInfo[currentIndex] = TMintInfo({\n                isPreMint: isPresale,\n                isRefunded: 0,\n                //minter: minter,\n                price: mint_price\n            });\n\n            emit TokenMinted(minter, currentIndex, mint_price, platformGot);\n        }\n\n\n        // Init 7-days refund time\n        if (isSale == 1 || _currentIndex == _maxSupply - 1) {\n            if (forceRefundDeadline == 2**32) {\n                forceRefundDeadline = block.timestamp + 86400 * 7;\n            }\n        }\n        \n        //  Mint finished successfully\n    }\n\n\n    /// User request to refund\n    function refund(uint256 tokenID) public {\n        require(msg.sender == ownerOf(tokenID), \"MB:owner\");\n        \n        /// 1. Get refund ratio\n        // If forceRefundable is true, holder can refund all. Otherwise holder can only refund before refund time\n        uint256 refundRatioPPM = 0;\n        if (isForceRefundable == 1) {\n            refundRatioPPM = 1e6;\n        } else {\n            for (uint256 i = 0; i < _refundTimeList.length; i++) {\n                if (block.timestamp < _refundTimeList[i].endTime) {\n                    refundRatioPPM = _refundTimeList[i].ratioPPM;\n                    break;\n                }\n            }\n        }\n        require(refundRatioPPM > 0, \"MB:refund not avail\");\n\n        /// 2. Get mint info and check if this token is refundable\n        TMintInfo storage mintInfo = _mintInfo[tokenID];\n        \n        require(mintInfo.isRefunded == 0, \"MB:refunded\");\n\n        /// 3. Caculate the refundable value\n        uint256 refundValue = mintInfo.price * refundRatioPPM / 1e6; \n\n        /// 4. Do refund\n        uint256 platformReturn = refundValue * platformFeePPM / 1e6;\n        uint256 collectorReturn = (refundValue - platformReturn) * getCollectorTotalRatioPPM() / 1e6;\n        uint256 ownerReturn = refundValue - platformReturn - collectorReturn;\n\n        platformBalance -= platformReturn;\n        collectorBalance -= collectorReturn;\n        ownerBalance -= ownerReturn;        \n\n        transferFrom(msg.sender, this.owner(), tokenID);\n        \n        mintInfo.isRefunded = 1;\n\n        payable(msg.sender).transfer(refundValue);\n    }\n\n\n    // Send shares to share holders and owner\n    function collect() public onlyOwner {\n        /// 1. Check if collect is open\n        requireCollectable();        \n\n        /// 2. Find the collector and transfer\n        uint256 b = collectorBalance;\n        uint256 totalRatioPPM = getCollectorTotalRatioPPM();\n        for (uint256 i = 0; i < _shareList.length; i++) {\n            uint256 collectValue = b * _shareList[i].ratioPPM / totalRatioPPM;\n            collectorBalance -= collectValue;\n            payable(_shareList[i].owner).transfer(collectValue);\n        }\n\n        /// 3. send balance to owner\n        uint256 oBalance = ownerBalance;\n        ownerBalance = 0;\n        payable(owner()).transfer(oBalance);\n    }\n\n\n    // Platform (ManeStudio) collect it's shares\n    function platformCollect(address to) public onlyFactoryOwner {\n        requireCollectable();\n\n        uint256 b = platformBalance;\n        platformBalance = 0;\n        payable(to).transfer(b);\n    }\n\n    function requireCollectable() view internal {\n        for (uint256 i = 0; i < _refundTimeList.length; i++) {\n            require(block.timestamp > _refundTimeList[i].endTime, \"MB:refund deadline\");\n        }\n\n        /// Not allow collect in 7 days. See forceRefundDeadline for more detail\n        require(block.timestamp > forceRefundDeadline, \"MB:7d limit\");\n        require(isForceRefundable == 0, \"MB:force refund\");\n    }\n    \n    /// If signagure is not valid, throw exception and stop\n    function requireMintSign(address minter, uint256 price, uint256 count, uint256 deadline, bytes32 r, bytes32 s, uint8 v)  internal view {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 userHash = encodeMint(minter, price, count, deadline);\n        bytes32 prefixHash = keccak256(abi.encodePacked(prefix, userHash));\n\n        address hash_address = ecrecover(prefixHash, v, r, s);\n\n        require(hash_address == ManeFactory(factory).signerAddress(), \"MB:sign\");\n    }\n\n\n    function encodeMint( address minter, uint256 price, uint256 count, uint256 deadline) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(minter, price, count, deadline));\n    }\n\n    function totalMinted() public view returns (uint256) {\n        return _totalMinted();\n    }\n\n    function _baseURI() override internal view returns (string memory) {\n        string memory factoryBaseURI = ManeFactory(factory).factoryBaseURI();\n        return string(abi.encodePacked(factoryBaseURI, toString(abi.encodePacked(this)), \"/\"));\n    }\n    \n    // Set the mint price for sale period\n    function setMintPrice(uint256 sale_price) public onlyOwner {\n        _salePrice = sale_price;\n    }\n\n    function setPresaleMaxSupply(uint256 max_) public onlyOwner {\n        presaleMaxSupply = max_;\n    }\n    \n\n    function adminSetRefund(uint256 is_refundable_) public onlyFactoryOwner {\n        require(block.timestamp < forceRefundDeadline, \"MF: time\");\n        isForceRefundable = is_refundable_;\n    }\n\n\n    function setPresaleMaxMintCountPerAddress(uint256 max_) public onlyOwner {\n        presaleMaxMintCountPerAddress = max_;\n    }\n    function setSaleMaxMintCountPerAddress(uint256 max_) public onlyOwner {\n        saleMaxMintCountPerAddress = max_;\n    }\n\n    function getCollectorTotalRatioPPM() internal view returns (uint256) {\n        uint256 ratioPPM = 0;\n        for (uint256 i =0; i < _shareList.length; i++) {\n            ratioPPM += _shareList[i].ratioPPM;\n        }\n\n        require(ratioPPM <= 1e6, \"MB:ratio\");\n\n        return ratioPPM;\n    }\n\n    function setPresaleTimes(uint256 startTime_, uint256 endTime_) public onlyOwner {\n        presaleStartTime = startTime_;\n        if (endTime_ == 0) {\n            unchecked {\n                presaleEndTime = endTime_ - 1;\n            }\n        } else {\n            presaleEndTime = endTime_;\n        }\n    }\n\n    function setSaleTimes(uint256 startTime_, uint256 endTime_) public onlyOwner {\n        saleStartTime = startTime_;\n        if (endTime_ == 0) {\n            unchecked {\n                saleEndTime = endTime_ - 1;\n            }\n        } else {\n            saleEndTime = endTime_;\n        }\n    }\n\n\n    // Get the token id list of the given address. If the address holds no token, empty array is return\n    function getTokenIDsByHolder(address holder, uint256 offset, uint256 limit) public view returns (uint256[] memory) {\n        uint256 size = tokenIDByHolder[holder].length - offset;\n        if (size > limit) {\n            size = limit;\n        }\n        uint256[] memory ret = new uint256[](size);\n\n        for (uint256 i = 0; i < limit; i++) {\n            if (i + offset >= tokenIDByHolder[holder].length) {\n                break;\n            } \n            ret[i] = (tokenIDByHolder[holder][i + offset]);\n        }\n\n        return ret;\n    }\n\n\n    function getShareListLength() public view returns (uint256) {\n        return _shareList.length;\n    }\n\n    function getRefundTimeListLength() public view returns (uint256) {\n        return _refundTimeList.length;\n    }\n\n    function setPaused(uint256 is_pause) public onlyOwner {\n        paused = is_pause;\n    }\n\n    function destroy() public onlyOwner {\n        require(_currentIndex == _reserveQuantity, \"MB:not allow\");\n        selfdestruct(payable(this.owner()));\n    }\n\n    modifier onlyFactoryOwner() {\n        ManeFactory(factory).requireOriginIsOwner();\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(paused == 0, \"MB:paused\");\n        _;\n    }\n}\n\n\ncontract SignAndOwnable is Ownable { \n    address public signerAddress;\n\n    constructor() Ownable() {\n        signerAddress = tx.origin;\n    }\n\n    // Check if the signature is valid. Returns true if signagure is valid, otherwise returns false.\n    function verifySignature(bytes32 h, uint8 v, bytes32 r, bytes32 s) view internal returns (bool) {\n        return (ecrecover(h, v, r, s) == signerAddress);\n    }\n\n    // Set the derived address of the public key of the signer private key\n    function setSignaturePublic(address newAddress) public onlyOwner {\n        signerAddress = newAddress;\n    }\n}\n\n\ncontract ManeFactory is SignAndOwnable {\n    uint256 public platformFeePPM = 100 * 1e3;\n\n    string public factoryBaseURI = \"https://meta.manestudio.xyz/nft/\";\n\n    mapping(uint256 => uint256) private _usedNonces;\n\n    // Mapping club_id => token_contract_address\n    mapping(uint256 => address) public clubMap;\n\n    constructor() SignAndOwnable() {\n    }\n\n    function deploy(string memory name_, string memory symbol_,  uint256[] memory u256s, address[] memory shareAddresses_, uint256[] memory shareRatios_, uint256[] memory refundEndTimes_, uint256[] memory refundRatios_, uint8 v, bytes32 r, bytes32 s) public returns (address) {\n        /// 1. Check signagure\n        bytes memory ethereum_prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 user_hash =keccak256(abi.encodePacked(ethereum_prefix, keccak256(abi.encodePacked(u256s[3], u256s[12]))));\n\n        require(_usedNonces[u256s[12]] == 0, \"MF: dup nonce\");\n        _usedNonces[u256s[12]] = 1;\n\n        require(verifySignature(user_hash, v, r, s) == true, \"MF: invalid sign\");\n        \n        /// 2. Deploy contract\n        ManeBase c = new ManeBase(name_, symbol_, u256s, shareAddresses_, shareRatios_, refundEndTimes_, refundRatios_);\n        //contracts.push(address(c));\n        clubMap[u256s[3]] = address(c);\n\n\n        return address(c);\n    }\n\n    function setPlatformFeePPM(uint256 newFeePPM) public onlyOwner {\n        platformFeePPM = newFeePPM;\n    }\n\n    /// Set the factoryBaseURI, must include trailing slashes\n    function setFactoryBaseURI(string memory newBaseURI) public onlyOwner {\n        factoryBaseURI = newBaseURI;\n    }\n\n\n    function requireOriginIsOwner() view public {\n        require(tx.origin == owner(), \"MF: Not owner\");\n    }\n}\n\nfunction toString(bytes memory data) pure returns(string memory) {\n    bytes memory alphabet = \"0123456789abcdef\";\n\n    bytes memory str = new bytes(2 + data.length * 2);\n    str[0] = \"0\";\n    str[1] = \"x\";\n    for (uint i = 0; i < data.length; i++) {\n        str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\n        str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\n    }\n    return string(str);\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "erc721a/contracts/ERC721A.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev This is equivalent to _burn(tokenId, false)\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Strings.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 20,
42       "details": {
43         "yul": true,
44         "yulDetails": {
45           "stackAllocation": true,
46           "optimizerSteps": "dhfoDgvulfnTUtnIf"
47         }
48       }
49     },
50     "outputSelection": {
51       "*": {
52         "*": [
53           "evm.bytecode",
54           "evm.deployedBytecode",
55           "devdoc",
56           "userdoc",
57           "metadata",
58           "abi"
59         ]
60       }
61     },
62     "libraries": {}
63   }
64 }}