1 {{
2   "language": "Solidity",
3   "sources": {
4     "SudoRug.sol": {
5       "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.16;\n\n/*\n\n   ▄████████ ███    █▄  ████████▄   ▄██████▄          ▄████████ ███    █▄     ▄██████▄  \n  ███    ███ ███    ███ ███   ▀███ ███    ███        ███    ███ ███    ███   ███    ███ \n  ███    █▀  ███    ███ ███    ███ ███    ███        ███    ███ ███    ███   ███    █▀  \n  ███        ███    ███ ███    ███ ███    ███       ▄███▄▄▄▄██▀ ███    ███  ▄███        \n▀███████████ ███    ███ ███    ███ ███    ███      ▀▀███▀▀▀▀▀   ███    ███ ▀▀███ ████▄  \n         ███ ███    ███ ███    ███ ███    ███      ▀███████████ ███    ███   ███    ███ \n   ▄█    ███ ███    ███ ███   ▄███ ███    ███        ███    ███ ███    ███   ███    ███ \n ▄████████▀  ████████▀  ████████▀   ▀██████▀         ███    ███ ████████▀    ████████▀  \n                                                     ███    ███                         \n\nSelf-rugging contract that sells its own tokens for ETH, buys NFTs with ETH, and sends\nNFTs to holders above a minimum eligibility (100k tokens).\n\nThe rugging mechanism can be manually triggered by anyone who wants to call the public \nfunction called PUSH_THE_RUG_BUTTON. To avoid dumping the token supply too quickly \nthere are a few limits on calls to PUSH_THE_RUG_BUTTON:\n\n1) You can only call it once every 10 minutes.\n2) The max rug supply per call is a random fraction of recently purchased tokens.\n3) There has to be at least one buy between two subsequent rug calls.\n\nThere's some bias towards holders with larger balances by picking three candidate winners and \nsending the NFT to one with the highest balance. This anti-sybil mechanism is meant to \nstrike a balance between uniform-above-threshold lotteries (which suffer from either having\nprohibitive thresholds or are vulnerable to multiple wallets) and lotteries where probability\nof winning is proportional to holdings, which tend to have a small concentrated set of winners.\n\nThe NFT contracts which can be purchased are initially just Based Ghouls and Re-based Ghouls \nbut any NFT project can add itself to the buy list by creating a sudoswap pool for their\nNFT and passing it addNFTContractAndRegisterPool on this contract. There is a 750k token\nfee for registering your NFT: calling wallet must hold those tokens, they are then burned\nupon successful registration.\n\nToken supply:\n    - 100M total $rug\n    - ~5M for v1 holders\n    - ~7M claimable by ghouls (6667 ghouls * 1000 $sudorug each)\n    - 40M slow-rug supply\n    - 60M - (5M+7M) = ~48M floating supply used for initial liquidity on Uniswap\n\nTaxes:\n    - None. If you're paying someone 12% to exit a position you should re-evaluate your life choices.  \n\nContract states:\n    - AIRDROP: tokens sent to v1 holders and claimable by Based Ghoul holders\n    - HONEYPOT: catch sniper bots for first few blocks\n    - WARMUP: max purchase is 500k for the first 20 blocks\n    - SLOWRUG: normal operations\n\nActions on each transaction:\n    - BUY_NFT: buy a random NFT from sudoswap\n    - SEND_NFT: send NFT from the treasury to a random eligible holder\n    - CHILL: do nothing this txn\n\nv2: the previous version of this token was called $rug (v1) and was designed to end in \n1-2 weeks with a big dramatic distribution of 99% of the token supply to random holders. \nv2 ($sudorug) is different in that less of the supply is set aside for rugging, it's sold \noff for ETH slowly, and the ETH is used to buy NFTs which are continuously distributed \nto random holders. \n*/\n\nimport {IUniswapV2Factory, IUniswapV2Pair, IUniswapV2Router02} from \"Uniswap.sol\";\nimport {IERC20} from \"IERC20.sol\";\nimport {IERC721} from \"IERC721.sol\";\nimport {IERC721Metadata} from \"IERC721Metadata.sol\";\nimport {ISudoGate} from \"ISudoGate.sol\";\nimport {ILSSVMPairFactoryLike} from \"ILSSVMPairFactoryLike.sol\";\nimport {LSSVMPair} from \"LSSVMPair.sol\";\n\ncontract SudoRug is IERC20 {\n    /********************************************************\n     * \n     *              CORE ECR-20 FIELDS\n     * \n     ********************************************************/\n    \n    string public constant symbol = \"SUDORUG\";\n    string public constant name = \"SudoRug Token\";\n    uint256 public constant decimals = 9;\n\n    // make total supply 100M, so we're going to slow-rug 40M/100M tokens \n    // this is very different from the v1 contract which would send 99%\n    // of tokens to winners at one moment\n    uint256 public constant totalSupply =  100_000_000 * (10 ** decimals);      \n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    /*\n    States of the contract:\n        AIRDROP:  \n            no Uniswap liquidity yet, but deployer can send tokens around\n\n        HONEYPOT: \n            anyone buying in the first few blocks after liquidity added gets rekt\n\n        WARMUP:\n            only allow buying up to 500k tokens at a time for the first 10 minutes\n        \n        SLOWRUG: \n            normal operations: buy NFTs, send NFTs to random holders, \n            anyone can call PUSH_THE_RUG_BUTTON\n    */\n    enum State {AIRDROP, HONEYPOT, WARMUP, SLOWRUG}\n\n\n    /* \n    Random actions which can be taken on each turn:\n        BUY_NFT:\n            buy a random NFT from sudoswap\n        \n        SEND_NFT:\n            send NFT from the treasury to a random eligible holder\n\n        CHILL:\n            do nothing this txn\n\n    Selling tokens for ETH is not included in this list because it does\n    done manually via a public function called PUSH_THE_RUG_BUTTON.\n    */\n    enum Action { BUY_NFT, SEND_NFT, CHILL }\n\n\n    /********************************************************\n     * \n     *                      ADDRESSES\n     * \n     ********************************************************/\n     \n\n    address constant UNISWAP_V2_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant BASED_GHOULS_CONTRACT_ADDRESS = 0xeF1a89cbfAbE59397FfdA11Fc5DF293E9bC5Db90;\n    address constant REBASED_GHOULS_CONTRACT_ADDRESS = 0x9185a69970A150EC9D0DEA6F18e62F40Db9e94d2;\n    address constant SUDO_PAIR_FACTORY_ADDRESS = 0xb16c1342E617A5B6E4b631EB114483FDB289c0A4;\n    address public SUDOGATE_ADDRESS = 0x3473ba28c97E8D2fdDBc6f95764BAE6429e31885;\n    \n\n\n    /********************************************************\n     * \n     *                  MISC DATA\n     * \n     ********************************************************/\n\n    // if any address tries to snipe the liquidity add or buy+sell in the same block,\n    // prevent any further txns from them\n    mapping(address => bool) public isBot;\n    \n    IUniswapV2Router02 public immutable uniswapV2Router;\n    IUniswapV2Pair public immutable uniswapV2Pair_WETH;\n\n    mapping(address => bool) isAMM;\n\n    // keep track of which Based Ghoul token IDs have been claimed\n    mapping(uint256 => bool) claimed;\n\n    struct EligibleSet {\n        address[] addresses;\n        mapping (address => uint256) indices;\n        mapping (address => bool) lookup;\n    }\n\n    EligibleSet eligibleSet;\n    \n    address owner;\n\n    // honestly using this ritualistically since I'm not sure\n    // what the possibilities are for reentrancy during a Uniswap \n    // swap \n    bool inSwap = false;\n\n    // used for RNG below\n    uint256 randNonce = 0;\n\n    struct NFT {\n        address addr;\n        uint256 tokenID;\n    }\n\n    NFT[] public treasury;\n\n    address[] public nftContracts;\n\n    mapping (address => bool) knownNFTContract;\n\n    /********************************************************\n     * \n     *     TRACKING BLOCK NUMBERS & TIMESTEMPS\n     * \n     ********************************************************/\n    \n\n    // track last block of buys and sells to catch sandwich bots\n    mapping(address => uint256) lastBuy;\n\n    mapping(address => uint256) lastSell;\n\n    // how many tokens have been bought since the last sell\n    uint256 public recentlyBoughtTokens = 0;\n    \n    // how many minutes until we set recently bought tokens back to 0\n    uint256 public recentlyBoughtTokensResetMinutes = 30;\n\n    // timestamp from liquidity getting added \n    // for the first time\n    uint256 public liquidityAddedBlock = 0;\n    \n    // timestamp for last buy\n    uint256 public lastBuyTimestamp = 0;\n\n    /********************************************************\n     * \n     *                 PARAMETERS\n     * \n     ********************************************************/\n\n    // try to trap sniper bots for first 2 blocks\n    uint256 constant public honeypotDurationBlocks = 2;\n    \n    // limit size of buys for next 20 blocks\n    uint256 constant public warmupDurationBlocks = 20;\n    \n    // maximum number of tokens you can buy per txn in the first blocks of open trading\n    uint256 constant public maxBuyDuringWarmup = 500_000 * (10 ** decimals);\n\n    // balance of any one wallet can't exceed this amount during warmup period\n    uint256 constant public maxBalanceDuringWarmup = 1_000_000 * (10 ** decimals);\n\n    // any NFT project that wants to get added to our buy list needs to have\n    // 750k tokens, which we'll burn when registering them\n    uint256 public costToAddNFTContract = 750_000 * (10 ** decimals);\n    \n    // minimum number of tokens you need to be eligible to receive NFTs\n    uint256 constant public minEligibleTokens = 100_000 * (10 ** decimals);\n    \n    // used to slowly extract ETH from the liquidity pool \n    // to buy NFTs, the available rug supply at any point \n    // in time will get smaller than this number as the tokens\n    // are used up, see rugSupply()\n    uint256 constant initialRugSupply  = 40_000_000 * (10 ** decimals);\n\n    // how many tokens do you get for each ghoul\n    uint256 constant tokensPerGhoul = 1000 * (10 ** decimals);\n\n    // tokens reserved for ghouls\n    uint256 public ghoulSupply = 6667 * tokensPerGhoul;\n\n    // don't bother rugging if you're not going to sell at least\n    // this many tokens\n    uint256 public minTokensForRug = 1000 * (10 ** decimals);\n    \n    // keep track when we last pushed the rug button\n    uint256 public lastRugTimestamp = 0;\n\n    // how long to wait between rugging\n    uint256 public minMinutesBetweenRugs = 10;\n    \n    // percent of time to try buying an NFT per txn\n    uint256 public actionPercentBuy = 60;\n\n    // percent of time to try sending an NFT per txn\n    uint256 public actionPercentSend = 20;\n\n    /********************************************************\n     * \n     *                  SETTERS\n     * \n     ********************************************************/\n    \n    function setOwner(address newOwner) public {\n        require(owner == msg.sender, \"Only owner allowed to call setOwner\");\n        owner = newOwner;\n    }\n\n    function setSudoGateAddress(address sudogate) public {\n        require(owner == msg.sender, \"Only owner allowed to call setSudoGateAddress\");\n        SUDOGATE_ADDRESS = sudogate;\n    }\n\n\n    function setCostToAddNFTContract(uint256 cost) public {\n        require(owner == msg.sender, \"Only owner allowed to call setCostToAddNFTContract\");\n        costToAddNFTContract = cost;\n    }\n\n    function setMinTokensForRug(uint256 numTokens) public {\n        require(owner == msg.sender, \"Only owner allowed to call setMinTokensForRug\");\n        minTokensForRug = numTokens;\n    }\n\n    function setMinMinutesBetweenRugs(uint256 m) public {\n        require(owner == msg.sender, \"Only owner allowed to call setMinMinutesBetweenRugs\");\n        minMinutesBetweenRugs = m;\n    }\n\n\n    function setActionPercentBuy(uint256 percent) public {\n        require(owner == msg.sender, \"Only owner allowed to call setActionPercentBuy\");\n        require(percent <= 100, \"Percent cannot exceed 100\");\n        require(actionPercentSend  + percent <= 100, \"Combined percentages cannot exceed 100\");\n        actionPercentBuy = percent;\n    }\n\n\n    function setActionPercentSend(uint256 percent) public {\n        require(owner == msg.sender, \"Only owner allowed to call setActionPercentSend\");\n        require(percent <= 100, \"Percent cannot exceed 100\");\n        require(actionPercentBuy  + percent <= 100, \"Combined percentages cannot exceed 100\");\n        actionPercentSend = percent;\n    }\n\n\n    /********************************************************\n     * \n     *                      EVENTS\n     * \n     ********************************************************/\n\n     // records every sniper bot that buys in the first 15s\n    event FellInHoney(address indexed bot, uint256 value);\n\n    // emit when we successfully buy an NFT through SudoGate\n    event ReceivedNFT(address indexed nft, uint256 tokenID);\n\n    // emit when we send an NFT from the contract to a holder\n    event SentNFT(address indexed nft, uint256 tokenID, address indexed recipient);\n    \n\n    /********************************************************\n     * \n     *                  CORE ERC-20 FUNCTIONS\n     * \n     ********************************************************/\n\n\n\n    constructor() {\n        /* \n            Store this since we later use it to check for the \n            liquidity add event and move the contract state\n            out of AIRDROP. \n\n            Also, send trapped ETH on the contract to this address.\n        */\n        owner = msg.sender;\n\n        /* \n        Use the Uniswap V2 router to find the RUG/WETH pair\n        and register it as an AMM so we can figure out which txns\n        are buys/sells vs. just transfers\n        */\n        uniswapV2Router = IUniswapV2Router02(UNISWAP_V2_ROUTER_ADDRESS);\n        IUniswapV2Factory factory = IUniswapV2Factory(uniswapV2Router.factory());\n        uniswapV2Pair_WETH = IUniswapV2Pair(factory.createPair(address(this), uniswapV2Router.WETH()));\n\n        isAMM[address(uniswapV2Pair_WETH)] = true;\n        isAMM[address(uniswapV2Router)] = true;\n\n        // keep tokens for ghouls and rugging on the contract\n        uint256 sendToContract = ghoulSupply + initialRugSupply;\n        balances[address(this)] = sendToContract;\n        emit Transfer(address(0), address(this), sendToContract);\n\n        // sum of v1 holders excluding contract and uniswap liquidity\n        uint256 v1AirdropSupply = 4_633_893 * (10 ** decimals);\n\n        // combination of Uniswap Supply and v1 airdrop supply\n        uint256 sendToDeployer = totalSupply - sendToContract;\n        require (sendToDeployer > v1AirdropSupply, \"At least need to be able to send v1 tokens!\");\n        // send airdrop and Uniswap liquidity tokens to deployer\n        balances[owner] = sendToDeployer;\n        emit Transfer(address(0), owner, sendToDeployer);\n        \n        // add Based Ghouls and Re-based Ghouls to the NFT contract list\n        knownNFTContract[BASED_GHOULS_CONTRACT_ADDRESS] = true; \n        knownNFTContract[REBASED_GHOULS_CONTRACT_ADDRESS] = true;\n        \n        nftContracts.push(BASED_GHOULS_CONTRACT_ADDRESS);\n        nftContracts.push(REBASED_GHOULS_CONTRACT_ADDRESS);\n        \n    }\n\n    receive() external payable {  }\n\n    function balanceOf(address addr) public view returns (uint256) {\n        return balances[addr];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        // pre-approve Uniswap\n        if (_spender == address(uniswapV2Router)) { return balances[_owner]; } \n        else { return allowed[_owner][_spender]; }\n    }\n\n    function _approve(address _owner, address _spender, uint256 _value) internal {\n        allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function _burn(address _from, uint256 _numTokens) internal {\n        require(balances[_from] >= _numTokens, \"Not enough tokens\");\n        _simple_transfer_with_burn(\n            _from, \n            address(0),\n            _numTokens,\n            0, \n            _numTokens);\n    }\n\n    function burn(uint256 numTokens) public {\n        _burn(msg.sender, numTokens);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);        \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n        if (_from != msg.sender && msg.sender != address(uniswapV2Router)) {\n            require(allowed[_from][msg.sender] >= _value, \"Insufficient allowance\");\n            allowed[_from][msg.sender] -= _value;\n        }\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    /********************************************************\n     * \n     *              ADD LIQUIDITY\n     * \n     ********************************************************/\n\n\n    function addLiquidity(uint256 numTokens) public payable {\n        require(msg.sender == owner, \"Only owner can call addLiquidity\");\n        require(numTokens > 0, \"No tokens for liquidity!\");\n        require(msg.value > 0, \"No ETH for liquidity!\");\n\n        _transfer(msg.sender, address(this), numTokens);\n        _approve(address(this), address(uniswapV2Router), numTokens);\n\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\n            // token\n            address(this), \n            // number of tokens\n            numTokens, \n            numTokens, \n            // eth value\n            msg.value, \n            // LP token recipient\n            msg.sender, \n            block.timestamp + 15);\n\n        require(\n            IERC20(uniswapV2Router.WETH()).balanceOf(\n                address(uniswapV2Pair_WETH)) >= msg.value,  \n            \"ETH didn't get to the pair contract\");\n        \n        // moving tokens to a Uniswap pool looks like selling in the airdrop period but\n        // it's actually the liquidity add event!\n        liquidityAddedBlock = block.number;\n    }\n    \n    /********************************************************\n     * \n     *       CORE LOGIC (BALANCE & STATE MANAGEMENT)\n     * \n     ********************************************************/\n\n    function liquidityAdded() public view returns (bool) {\n        return (liquidityAddedBlock > 0);\n    }\n\n    function currentState() public view returns (State) {\n        if (!liquidityAdded()) {\n            return State.AIRDROP;\n        } \n        uint256 blocksSinceLiquidity = block.number - liquidityAddedBlock;\n        if (blocksSinceLiquidity < honeypotDurationBlocks) {\n            return State.HONEYPOT;\n        } else if (blocksSinceLiquidity < warmupDurationBlocks) {\n            return State.WARMUP;\n        } else {\n            return State.SLOWRUG;\n        }\n    }\n\n\n    function isTradingOpen() public view returns (bool) {\n        // can we actually trade now?\n        State state = currentState();\n        return (state == State.SLOWRUG || state == State.WARMUP);\n    }\n\n\n    function _updateRecentlyBoughtTokens(bool buying, bool selling, uint256 _value) internal {\n        if (buying) {\n            recentlyBoughtTokens += _value;\n        } else if (selling) {\n            if (minutesSinceLastBuy() > recentlyBoughtTokensResetMinutes) { \n                recentlyBoughtTokens = 0; \n            } else if (recentlyBoughtTokens <= _value) { \n                recentlyBoughtTokens = 0; \n            } else {\n                recentlyBoughtTokens -= _value;\n            }\n        }\n    }\n\n    function _insanity(address _from, address _to, uint256 _value) internal {\n        // transfer logic outside of contrat interactions with Uniswap\n        bool selling = isAMM[_to];\n        bool buying = isAMM[_from];\n\n        State state = currentState();\n\n        /* manage state transitions first */\n        if (state == State.AIRDROP) {\n            require((_from == owner) || (_from == address(this)), \"Only deployer and contract can move tokens now\");\n        } \n\n        if ((state == State.HONEYPOT) && buying) {\n            // if you're trying to buy  in the first few blocks then you're \n            // going to have a bad time\n            bool addedBotInHoneypot = _addBotAndOrigin(_to);\n            if (addedBotInHoneypot) { emit FellInHoney(_to, _value); }\n        } \n                 \n        // store the initial value on _from without changing\n        // balances, touching any element of balances which Uniswap\n        // may be currently using will cause the most maddening \n        // cryptic errors\n        uint256 initialValue = _value;\n                \n        // vague attempt at thwarting sandwich bots\n        uint256 toBurn = 0;\n\n        if (isTradingOpen()) {\n            // check if this is a sandwich bot buying after selling\n            // in the same block\n            if (buying && (lastSell[_to] == block.number)) { \n                bool caughtSandiwchBotBuying = _addBotAndOrigin(_to);\n                if (caughtSandiwchBotBuying) {\n                    // burn 99% of their tokens\n                    toBurn = _value * 99 / 100;\n                }\n            } else if (selling && (lastBuy[_from] == block.number)) {\n                // check if this is a sandwich bot selling after\n                // buying the same block    \n                bool caughtSandwichBotSelling = _addBotAndOrigin(_from);\n                if (caughtSandwichBotSelling) {\n                    // burn 99% of their tokens\n                    toBurn = _value * 99 / 100;\n                }\n            }\n        }\n\n        // update balance and eligibility of token sender and recipient, burn \n        // any tokens if we hit bot logic\n        require(initialValue > toBurn, \"Can't burn more than the total number of tokens\");\n\n        _simple_transfer_with_burn(\n            _from,\n            _to,\n            initialValue,\n            initialValue - toBurn,\n            toBurn);\n\n        if (toBurn == 0) {\n            // if we didn't burn a bot's tokens then update the recently bought tokens counter\n            _updateRecentlyBoughtTokens(buying, selling, _value);\n        }\n    \n        if (state == State.WARMUP && buying && !isBot[_to]) {\n            require(_value <= maxBuyDuringWarmup, \"Only small buys during warmup period\");\n            require(balances[_to] <= maxBalanceDuringWarmup, \"Balance too large for warmup period\");\n        } \n        \n        // try to buy or send an NFT\n        if (isTradingOpen()) { _performRandomAction(); }\n\n        // record block numbers and timestamps of any buy/sell txns\n        if (buying) { \n            lastBuyTimestamp = block.timestamp; \n            lastBuy[_to] = block.number;\n        } else if (selling) { \n            lastSell[_from] = block.number;\n        }\n\n\n\n    }\n\n    function _simple_transfer_with_burn(\n            address _from, \n            address _to,\n            uint256 _fromValue,\n            uint256 _toValue,\n            uint256 _burnValue) internal {\n        /* \n        Update balances for a transfer, allows for possibility of\n        burning some of the tokens instead of sending them all \n        to the destination address.\n\n        Also updates eligibility for NFT lottery\n        */\n        require(\n            _fromValue == (_toValue + _burnValue), \n            \"Source and destination token amounts must be the same\");\n\n        // decrease balance and update eligibility       \n        balances[_from] -= _fromValue;\n        updateEligibility(_from);\n\n        // increase balance and update eligibility\n        balances[_to] += _toValue;        \n        updateEligibility(_to);\n\n        emit Transfer(_from, _to, _toValue);\n        \n        if (_burnValue > 0) {\n            balances[address(0)] += _burnValue;\n            emit Transfer(_from, address(0), _burnValue);\n        }\n    }\n\n    function _simple_transfer(address _from, address _to, uint256 _value) internal {\n        _simple_transfer_with_burn(\n            _from,\n            _to,\n            _value,\n            _value,\n            0);\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(balances[_from] >= _value, \"Insufficient balance\");\n\n        State state = currentState();\n        require(!isBot[_from] || state == State.HONEYPOT, \"Sorry bot, can't let you out\");\n\n        if (inSwap || \n                _from == address(this) || \n                _to == address(this) || \n                ((state == State.AIRDROP) && (_from == owner))) {\n            // if this transfer was invoked by Uniswap while selling tokens for ETH,\n            // then don't do anything fancy\n            _simple_transfer(_from, _to, _value);\n        } else {\n            _insanity(_from, _to, _value);\n        }\n    }\n\n    function PUSH_THE_RUG_BUTTON() public returns (bool) {\n        /* \n        Anyone can call this function to sell some of the contract supply for ETH.\n        Keeping this from totally wrecking the chart by:\n            1) Can only be called once every 10 minutes\n            2) There must be a buy between rugs.\n            2) Tokens sold are between 10%-35% of what has been recently purchased.\n        */\n        require(currentState() == State.SLOWRUG, \"Can't rug yet!\");\n        require(lastBuyTimestamp > lastRugTimestamp, \"Must buy between rugs\");\n        if (lastRugTimestamp > 0) {\n            require(minutesSinceLastRug() >= minMinutesBetweenRugs, \"Hold your horses ruggers\");\n        }\n\n        // randomly chosen action is selling tokens then sell a random fraction \n        // between 10% and 35% of the recently purchased tokens\n        uint256 percentRug = 10 + randomModulo(25);\n        uint256 rugTokens = recentlyBoughtTokens * percentRug / 100;\n        bool success = false;\n        if (rugTokens >= minTokensForRug) {\n            uint256 ethReceived = _slowrug(rugTokens);\n            success = ethReceived > 0;\n            if (success) { \n                lastRugTimestamp = block.timestamp; \n                _updateRecentlyBoughtTokens(false, true, rugTokens);\n            }\n        }\n       return success;\n    }\n    \n    function _performRandomAction() internal returns (Action action, bool success) {\n        /* \n        buy an NFT, sell an NFT, or do nothing\n        */\n        action = _chooseRandomAction();\n        success = false;\n        if (action == Action.BUY_NFT) {\n            success = _buyRandomNFT();\n        } else if (action == Action.SEND_NFT) { \n            success = _sendRandomNFT(); \n        }  \n        return (action, success); \n    }\n\n    function _chooseRandomAction() internal returns (Action) {\n        uint256 n = randomModulo(100);\n        if (n < actionPercentBuy ) { return Action.BUY_NFT; } \n        else if (n < (actionPercentBuy + actionPercentSend)) { return Action.SEND_NFT; }\n        else { return Action.CHILL; }\n    }\n\n\n    function pickBestAddressOfThree() internal returns (address) {\n        /* \n        pick three random addresses and return which of  the three has the highest balance. \n        If any of the individual addresses are 0x0 then give them a balance of 0 tokens \n        (instead of the full rugSupply). If all three addresses are 0x0 then this function\n        might still return 0x0, so be sure to check for that at the call site. \n        */\n        address a = pickRandomEligibleHolder();\n        address b = pickRandomEligibleHolder();\n        address c = pickRandomEligibleHolder();\n\n        uint256 t_a = (a == address(0) ? 0 : balances[a]);\n        uint256 t_b = (b == address(0) ? 0 : balances[b]);\n        uint256 t_c = (c == address(0) ? 0 : balances[c]);\n\n        return (t_a > t_b) ? \n            (t_a > t_c ? a : c) : \n            (t_b > t_c ? b : c);\n    }\n\n    function pickRandomEligibleHolder() internal returns (address winner) {\n        winner = address(0);\n        uint256 n = eligibleSet.addresses.length;\n        if (n > 0) {\n            winner = eligibleSet.addresses[randomModulo(n)];\n        }\n    }\n\n    function removeFromEligibleSet(address addr) internal {\n        eligibleSet.lookup[addr] = false;\n        // remove ineligible address by swapping with the last \n        // address\n        uint256 lastIndex = eligibleSet.addresses.length - 1;\n        uint256 addrIndex = eligibleSet.indices[addr];\n        if (addrIndex < lastIndex) {\n            address lastAddr = eligibleSet.addresses[lastIndex];\n            eligibleSet.indices[lastAddr] = addrIndex;\n            eligibleSet.addresses[addrIndex] = lastAddr;\n\n        }\n        // now that we have moved the ineligible address to the front\n        // of the addresses array, pop that last element so it's no longer\n        // in the array limits\n        eligibleSet.indices[addr] = type(uint256).max;\n        eligibleSet.addresses.pop();\n    }\n\n    function addToEligibleSet(address addr) internal {\n        eligibleSet.lookup[addr] = true;\n        eligibleSet.indices[addr] = eligibleSet.addresses.length;\n        eligibleSet.addresses.push(addr);\n    }\n\n    function isEligible(address addr) public view returns (bool) {\n        return eligibleSet.lookup[addr];\n    }\n\n    function isSpecialAddress(address addr) public view returns (bool) {\n        return (addr == address(this) || \n                addr == address(0) || \n                addr == owner || \n                isAMM[addr] || \n                isBot[addr] || \n                knownNFTContract[addr]);\n    }\n\n    function updateEligibility(address addr) internal {\n        if (balances[addr] < minEligibleTokens || isSpecialAddress(addr)) {\n            // if either the address has too few tokens or it's something we want to exclude\n            // from the lottery then make sure it's not in the eligible set. if it is in the\n            // eligible set then remove it\n            if (eligibleSet.lookup[addr]) { \n                removeFromEligibleSet(addr);    \n            } \n        } else if (!eligibleSet.lookup[addr]) {\n            // if address is elibile but not yet included in the eligible set,\n            // add it to the lookup table and addresses array\n            addToEligibleSet(addr); \n        }\n    }\n\n    /********************************************************\n     * \n     *                  SUPPLY VIEWS\n     * \n     ********************************************************/\n\n    function burntSupply() public view returns (uint256) {\n        return balances[address(0)];\n    }\n\n    function rugSupply() public view returns (uint256) {\n        require(balances[address(this)] >= ghoulSupply, \"Not enough tokens on contract\");\n        return balances[address(this)] - ghoulSupply;\n\n    }\n    function floatingSupply() public view returns (uint256) {\n        return totalSupply - (rugSupply() + ghoulSupply + burntSupply());\n    }\n\n    /********************************************************\n     * \n     *                  TIME VIEWS\n     * \n     ********************************************************/\n\n\n\n    function minutesSinceLastBuy() public view returns (uint256) {\n        if (liquidityAdded()) {\n            return (block.timestamp - lastBuyTimestamp) / 60;\n        } else {\n            return 0;\n        }\n    }\n\n    function minutesSinceLastRug() public view returns (uint256) {\n        if (lastRugTimestamp == 0) { return 0; }\n        else {\n            return block.timestamp - lastRugTimestamp;\n        }\n    }\n\n    /********************************************************\n     * \n     *                  CLAIM FUNCTIONS\n     * \n     ********************************************************/\n\n\n\n    function CLAIM_FOR_GHOUL(uint256 tokenID) public returns (bool) {\n        require(tokenID < 6667, \"Only so many ghouls in the world\");\n        require(!claimed[tokenID], \"This ghoul already claimed\");\n        require(ghoulSupply >= tokensPerGhoul, \"Not enough tokens left, sorry\");\n        claimed[tokenID] = true;\n        address ghoulAddr = IERC721(BASED_GHOULS_CONTRACT_ADDRESS).ownerOf(tokenID);\n        _transfer(address(this), ghoulAddr, tokensPerGhoul);\n        ghoulSupply -= tokensPerGhoul;\n        return true;\n    }\n\n    function CLAIM_FOR_GHOUL_POOL(address sudoswapPool) public returns (uint256 numTokens) {\n        require(isSudoSwapPool(sudoswapPool), \"Not a sudoswap pool\");\n        LSSVMPair pair = LSSVMPair(sudoswapPool);\n        require(address(pair.nft()) == BASED_GHOULS_CONTRACT_ADDRESS, \"Not a Based Ghouls pool\");\n        IERC721 ghoulsContract = IERC721(BASED_GHOULS_CONTRACT_ADDRESS);\n        numTokens = 0;\n\n        uint256 tokenID;\n        uint256[] memory tokenIDs = pair.getAllHeldIds();\n        uint256 poolSize = tokenIDs.length;\n        uint256 i = 0;\n        for (; i < poolSize; ++i) {\n            tokenID = tokenIDs[i];\n            if ((ghoulsContract.ownerOf(tokenID) == sudoswapPool) && !claimed[tokenID]) {\n                claimed[tokenID] = true;\n                numTokens += tokensPerGhoul;\n            }\n        }\n        require(ghoulSupply >= numTokens, \"Not enough tokens left, sorry\");\n        _transfer(address(this), pair.owner(), numTokens);\n        ghoulSupply -= numTokens; \n    }\n\n    /********************************************************\n     * \n     *          RANDOM NUMBER GENERATION\n     * \n     ********************************************************/\n\n\n    function random() internal returns (uint256) {\n        randNonce += 1;\n        return uint256(keccak256(abi.encodePacked(\n            msg.sender,\n            randNonce,\n            block.timestamp, \n            block.difficulty\n        )));\n    }\n\n    function randomModulo(uint256 m) internal returns (uint256) {\n        return random() % m;\n    }\n    \n    /********************************************************\n     * \n     *              BOT FUNCTIONS\n     * \n     ********************************************************/\n\n    function _addBot(address addr) internal returns (bool) {\n        // if we already added it then skip the rest of this logic\n        if (isBot[addr]) { return true; }\n        // make sure we don't accidentally blacklist the deployer, contract, or AMM pool\n        if (isSpecialAddress(addr)) { return false; }\n        isBot[addr] = true;\n        return true;\n    }\n\n    function _addBotAndOrigin(address addr) internal returns (bool) {\n        // add a destination address and the transaction origin address\n        bool successAddr = _addBot(addr);\n        if (successAddr) { _addBot(tx.origin); }\n        return successAddr;\n    }\n\n    function addBot(address addr) public returns (bool) {\n        require(msg.sender == owner, \"Only owner can call addBot\");\n        return _addBot(addr);\n    }\n\n    function removeBot(address addr) public returns (bool) {\n        // just in case our wacky bot trap logic makes a mistake, add a manual\n        // override\n        require(msg.sender == owner, \"Can only be called by owner\");\n        isBot[addr] = false;\n        return true;\n    }\n\n\n    /********************************************************\n     * \n     *              AMM FUNCTIONS\n     * \n     ********************************************************/\n\n\n    function addAMM(address addr) public returns (bool) {\n        require(msg.sender == owner, \"Can only be called by owner\");\n        isAMM[addr] = true;\n        return true;\n    }\n\n    function removeAMM(address addr) public returns (bool) {\n        // just in case we add an AMM pair address by accident, remove it using this method\n        require(msg.sender == owner, \"Can only be called by owner\");\n        isAMM[addr] = false;\n        return true;\n    }\n\n    /********************************************************\n     * \n     *              RUG & UNRUG\n     * \n     ********************************************************/\n\n    function _slowrug(uint256 tokenAmount) internal returns (uint256 ethReceived) {\n        ethReceived = 0;\n        if (!inSwap) {\n            uint256 available = rugSupply();\n            tokenAmount = available >= tokenAmount ? tokenAmount : available;\n            // move tokens from rug supply to this contract and then \n            // sell them for ETH\n            if (tokenAmount > 0) { ethReceived = _swapTokensForEth(tokenAmount); }\n        }\n    }\n\n     /********************************************************\n     * \n     *              UNISWAP INTERACTIONS\n     * \n     ********************************************************/\n\n\n\n    function _swapTokensForEth(uint256 tokenAmount) internal returns (uint256 ethReceived) {\n        uint256 oldBalance = address(this).balance;\n\n        if (tokenAmount > 0 && balances[address(this)] >= tokenAmount) {\n            // set this flag so when Uniswap calls back into the contract\n            // we choose paths through the core logic that don't call \n            // into Uniswap again\n            inSwap = true;\n\n            // generate the uniswap pair path of $SUDORUG -> WETH\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n                    \n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n            \n            \n            // make the swap\n\n            // Arguments:\n            //  - uint amountIn\n            //  - uint amountOutMin \n            //  - address[] calldata path \n            //  - address to \n            //  - uint deadline\n            uniswapV2Router.swapExactTokensForETH(\n                tokenAmount,\n                0, // accept any amount of ETH\n                path,\n                address(this),\n                block.timestamp\n            );\n\n            uniswapV2Pair_WETH.sync();\n            \n            inSwap = false; \n        }\n        require(address(this).balance >= oldBalance, \"How did we lose ETH!?\");\n        ethReceived = address(this).balance - oldBalance;\n    }\n\n\n    /********************************************************\n     * \n     *             NFT FUNCTIONS\n     * \n     ********************************************************/\n\n    function numNFTsInTreasury() public view returns (uint256) {\n        return treasury.length;\n    }\n\n    function _sendRandomNFT() internal returns (bool success) {\n        success = false;\n        address to = pickBestAddressOfThree();\n        uint256 n = numNFTsInTreasury();\n        if (!isSpecialAddress(to) && (n > 0)) {\n            uint256 nftIndex = randomModulo(n);\n            NFT storage nft = treasury[nftIndex];\n            IERC721(nft.addr).transferFrom(address(this), to, nft.tokenID);\n            emit SentNFT(nft.addr, nft.tokenID, to);\n            \n            // copy last element of array to overwrite chosen location\n            treasury[nftIndex] = treasury[n - 1]; \n            // pop last element so it's not in the array twice\n            treasury.pop();\n\n            success = true;\n        }\n        return success; \n    }\n\n    function sendRandomNFT() public returns (bool) {\n        // in case we have too many NFTs in the treasury and they're not \n        // getting distributed fast enough, let the contract owner\n        // send some out\n        require(msg.sender == owner, \"Only owner can callsendRandomNFT\");\n        return _sendRandomNFT();\n    }\n\n\n    function _buyRandomNFT() internal returns (bool success) {\n        success = false;\n        if (nftContracts.length > 0) {\n            address nftContract = _pickRandomNFTContract();\n            uint256 tokenID;\n            (success, tokenID) = _buyNFT(nftContract);\n        }\n    }\n\n    function buyRandomNFT() public returns (bool) {\n        // just in case the pace of NFT buying is too slow and too much ETH\n        // accumulates, let the contract owner manually push the buy button\n        require(msg.sender == owner, \"Only owner can call buyRandomNFT\");\n        return _buyRandomNFT();\n    }\n\n    function _pickRandomNFTContract() internal returns (address nft) {\n        require(nftContracts.length > 0, \"No NFT contracts!\");\n        return nftContracts[randomModulo(nftContracts.length)];\n    }\n\n    function _buyNFT(address nft) internal returns (bool success, uint256 tokenID) {\n        /* buy from given NFT address if it's possible to do so */ \n        success = false;\n        \n        ISudoGate sudogate = ISudoGate(SUDOGATE_ADDRESS);\n        if (sudogate.pools(nft, 0) != address(0)) {    \n            uint256 bestPrice; \n            address bestPool;\n            (bestPrice, bestPool) = sudogate.buyQuoteWithFees(nft);\n\n            if (bestPool != address(0) && bestPrice < type(uint256).max && bestPrice < address(this).balance) {\n                tokenID = sudogate.buyFromPool{value: bestPrice}(bestPool);\n                treasury.push(NFT(nft, tokenID));\n                emit ReceivedNFT(nft, tokenID);\n                // treasury is a mapping from NFT addresses to an array of tokens that this contract owns\n                success = true;\n            }\n        }\n    }\n\n    function addNFTContract(address nftContract) public returns (bool) {\n        /* \n        Add an NFT contract to the set of NFTs that SudoRug buys and distributes to holders.\n        Requires that at least one SudoSwap pool exists for this NFT and that it's registered\n        with SudoGate.\n        */\n        ISudoGate sudogate = ISudoGate(SUDOGATE_ADDRESS);\n        if (msg.sender != owner) {\n            require(balances[msg.sender] >= costToAddNFTContract, \"Not enough tokens to add NFT contract\");\n            require(!knownNFTContract[nftContract], \"Already added\");\n            burn(costToAddNFTContract);\n        }\n        knownNFTContract[nftContract] = true;\n        nftContracts.push(nftContract);\n        return true;\n    }\n\n\n    function isSudoSwapPool(address sudoswapPool) public view returns (bool) {\n        ILSSVMPairFactoryLike factory = ILSSVMPairFactoryLike(SUDO_PAIR_FACTORY_ADDRESS);\n        return (\n            factory.isPair(sudoswapPool, ILSSVMPairFactoryLike.PairVariant.ENUMERABLE_ETH) ||\n            factory.isPair(sudoswapPool, ILSSVMPairFactoryLike.PairVariant.MISSING_ENUMERABLE_ETH)\n        );\n    }\n\n    function addNFTContractAndRegisterPool(address sudoswapPool) public returns (bool) {\n        /* \n        Register a sudoswap pool for an NFT with SudoGate and then add that NFT contract\n        to the SudoRug lottery.\n        */\n        require(isSudoSwapPool(sudoswapPool), \"Not a sudoswap pool\");\n        ISudoGate sudogate = ISudoGate(SUDOGATE_ADDRESS);\n         // register the pool with SudoGate so that we're able to buy from it\n        if (!sudogate.knownPool(sudoswapPool)) { \n            sudogate.registerPool(sudoswapPool); \n        }\n        addNFTContract(address(LSSVMPair(sudoswapPool).nft()));\n        return true;\n    }\n\n    // ERC721Receiver implementation copied and modified from:\n    // https://github.com/GustasKlisauskas/ERC721Receiver/blob/master/ERC721Receiver.sol\n    function onERC721Received(address, address, uint256, bytes calldata) public returns(bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n}\n"
6     },
7     "Uniswap.sol": {
8       "content": "pragma solidity ^0.8.7;\n\ninterface IUniswapV2Factory {\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n        function feeTo() external view returns (address);\n        function feeToSetter() external view returns (address);\n\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n        function allPairs(uint) external view returns (address pair);\n        function allPairsLength() external view returns (uint);\n\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n\n        function setFeeTo(address) external;\n        function setFeeToSetter(address) external;\n    } \n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
9     },
10     "IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
12     },
13     "IERC721.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.10;\n\nimport \"IERC165.sol\";\n\n/**\n* @dev Required interface of an ERC721 compliant contract.\n*/\ninterface IERC721 is IERC165 {\n  /**\n  * @dev Emitted when `tokenId_` token is transferred from `from_` to `to_`.\n  */\n  event Transfer( address indexed from_, address indexed to_, uint256 indexed tokenId_ );\n\n  /**\n  * @dev Emitted when `owner_` enables `approved_` to manage the `tokenId_` token.\n  */\n  event Approval( address indexed owner_, address indexed approved_, uint256 indexed tokenId_ );\n\n  /**\n  * @dev Emitted when `owner_` enables or disables (`approved`) `operator_` to manage all of its assets.\n  */\n  event ApprovalForAll( address indexed owner_ , address indexed operator_ , bool approved_ );\n\n  /**\n  * @dev Gives permission to `to_` to transfer `tokenId_` token to another account.\n  * The approval is cleared when the token is transferred.\n  *\n  * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n  *\n  * Requirements:\n  *\n  * - The caller must own the token or be an approved operator.\n  * - `tokenId_` must exist.\n  *\n  * Emits an {Approval} event.\n  */\n  function approve( address to_, uint256 tokenId_ ) external;\n\n  /**\n  * @dev Safely transfers `tokenId_` token from `from_` to `to_`, checking first that contract recipients\n  * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n  *\n  * Requirements:\n  *\n  * - `from_` cannot be the zero address.\n  * - `to_` cannot be the zero address.\n  * - `tokenId_` token must exist and be owned by `from_`.\n  * - If the caller is not `from_`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n  * - If `to_` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n  *\n  * Emits a {Transfer} event.\n  */\n  function safeTransferFrom( address from_, address to_, uint256 tokenId_ ) external;\n\n  /**\n  * @dev Safely transfers `tokenId_` token from `from_` to `to_`.\n  *\n  * Requirements:\n  *\n  * - `from_` cannot be the zero address.\n  * - `to_` cannot be the zero address.\n  * - `tokenId_` token must exist and be owned by `from_`.\n  * - If the caller is not `from_`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n  * - If `to_` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n  *\n  * Emits a {Transfer} event.\n  */\n  function safeTransferFrom( address from_, address to_, uint256 tokenId_, bytes calldata data_ ) external;\n\n  /**\n  * @dev Approve or remove `operator_` as an operator for the caller.\n  * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n  *\n  * Requirements:\n  *\n  * - The `operator_` cannot be the caller.\n  *\n  * Emits an {ApprovalForAll} event.\n  */\n  function setApprovalForAll( address operator_, bool approved_ ) external;\n\n  /**\n  * @dev Transfers `tokenId_` token from `from_` to `to_`.\n  *\n  * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n  *\n  * Requirements:\n  *\n  * - `from_` cannot be the zero address.\n  * - `to_` cannot be the zero address.\n  * - `tokenId_` token must be owned by `from_`.\n  * - If the caller is not `from_`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n  *\n  * Emits a {Transfer} event.\n  */\n  function transferFrom( address from_, address to_, uint256 tokenId_ ) external;\n\n  /**\n  * @dev Returns the number of tokens in `tokenOwner_`'s account.\n  */\n  function balanceOf( address tokenOwner_ ) external view returns ( uint256 balance );\n\n  /**\n  * @dev Returns the account approved for `tokenId_` token.\n  *\n  * Requirements:\n  *\n  * - `tokenId_` must exist.\n  */\n  function getApproved( uint256 tokenId_ ) external view returns ( address operator );\n\n  /**\n  * @dev Returns if the `operator_` is allowed to manage all of the assets of `tokenOwner_`.\n  *\n  * See {setApprovalForAll}\n  */\n  function isApprovedForAll( address tokenOwner_, address operator_ ) external view returns ( bool );\n\n  /**\n  * @dev Returns the owner of the `tokenId_` token.\n  *\n  * Requirements:\n  *\n  * - `tokenId_` must exist.\n  */\n  function ownerOf( uint256 tokenId_ ) external view returns ( address owner );\n}\n"
15     },
16     "IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "IERC721Metadata.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.10;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
21     },
22     "ISudoGate.sol": {
23       "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.16;\n\ninterface ISudoGate { \n    function pools(address, uint256) external view returns (address);\n    function knownPool(address) external view returns (bool);\n    function buyQuote(address nft) external view returns (uint256 bestPrice, address bestPool);\n    function buyQuoteWithFees(address nft) external view returns (uint256 bestPrice, address bestPool);\n    function buyFromPool(address pool) external payable returns (uint256 tokenID);\n    function registerPool(address sudoswapPool) external returns (bool);\n\n}"
24     },
25     "ILSSVMPairFactoryLike.sol": {
26       "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\ninterface ILSSVMPairFactoryLike {\n    enum PairVariant {\n        ENUMERABLE_ETH,\n        MISSING_ENUMERABLE_ETH,\n        ENUMERABLE_ERC20,\n        MISSING_ENUMERABLE_ERC20\n    }\n\n    function protocolFeeMultiplier() external view returns (uint256);\n\n    function protocolFeeRecipient() external view returns (address payable);\n\n    function callAllowed(address target) external view returns (bool);\n    /*\n    function routerStatus(LSSVMRouter router)\n        external\n        view\n        returns (bool allowed, bool wasEverAllowed);\n    */\n\n    function isPair(address potentialPair, PairVariant variant)\n        external\n        view\n        returns (bool);\n}\n"
27     },
28     "LSSVMPair.sol": {
29       "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\nimport {IERC721} from \"IERC721.sol\";\nimport {ILSSVMPairFactoryLike} from \"ILSSVMPairFactoryLike.sol\";\n\ncontract CurveErrorCodes {\n    enum Error {\n        OK, // No error\n        INVALID_NUMITEMS, // The numItem value is 0\n        SPOT_PRICE_OVERFLOW // The updated spot price doesn't fit into 128 bits\n    }\n}\n\ninterface LSSVMPair {\n\n    enum PoolType {\n        TOKEN,\n        NFT,\n        TRADE\n    }\n\n    function factory() external pure returns (ILSSVMPairFactoryLike);\n    \n    function nft() external pure returns (IERC721);\n    \n    function poolType() external pure returns (PoolType);\n    \n    function getBuyNFTQuote(uint256 numNFTs) external view returns (\n            CurveErrorCodes.Error error,\n            uint256 newSpotPrice,\n            uint256 newDelta,\n            uint256 inputAmount,\n            uint256 protocolFee\n        );\n\n    function getSellNFTQuote(uint256 numNFTs) external view returns (\n            CurveErrorCodes.Error error,\n            uint256 newSpotPrice,\n            uint256 newDelta,\n            uint256 outputAmount,\n            uint256 protocolFee\n        );\n\n      /**\n        @notice Sends token to the pair in exchange for any `numNFTs` NFTs\n        @dev To compute the amount of token to send, call bondingCurve.getBuyInfo.\n        This swap function is meant for users who are ID agnostic\n        @param numNFTs The number of NFTs to purchase\n        @param maxExpectedTokenInput The maximum acceptable cost from the sender. If the actual\n        amount is greater than this value, the transaction will be reverted.\n        @param nftRecipient The recipient of the NFTs\n        @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for\n        ETH pairs.\n        @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for\n        ETH pairs.\n        @return inputAmount The amount of token used for purchase\n     */\n    function swapTokenForAnyNFTs(\n        uint256 numNFTs,\n        uint256 maxExpectedTokenInput,\n        address nftRecipient,\n        bool isRouter,\n        address routerCaller\n    ) external payable  returns (uint256 inputAmount);\n\n     function swapNFTsForToken(\n        uint256[] calldata nftIds,\n        uint256 minExpectedTokenOutput,\n        address payable tokenRecipient,\n        bool isRouter,\n        address routerCaller\n    ) external returns (uint256 outputAmount);\n\n    function getAllHeldIds() external view returns (uint256[] memory);\n\n    function owner() external view returns (address);\n}\n"
30     }
31   },
32   "settings": {
33     "evmVersion": "istanbul",
34     "optimizer": {
35       "enabled": true,
36       "runs": 200
37     },
38     "libraries": {
39       "SudoRug.sol": {}
40     },
41     "outputSelection": {
42       "*": {
43         "*": [
44           "evm.bytecode",
45           "evm.deployedBytecode",
46           "devdoc",
47           "userdoc",
48           "metadata",
49           "abi"
50         ]
51       }
52     }
53   }
54 }}