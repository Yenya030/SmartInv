1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
6     },
7     "contracts/Swap0x.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMulticall {\n    function multicall(bytes[] calldata data)\n        external\n        payable\n        returns (bytes[] memory results);\n}\n\nabstract contract Multicall is IMulticall {\n    function _getRevertMsg(bytes memory _returnData)\n        internal\n        pure\n        returns (string memory)\n    {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    function multicall(bytes[] calldata data)\n        public\n        payable\n        override\n        returns (bytes[] memory results)\n    {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n\n            require(success, _getRevertMsg(result));\n            results[i] = result;\n        }\n    }\n}\n\ncontract Swap0x is Multicall {\n    receive() external payable {}\n\n    function swap(\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount,\n        address allowanceTarget,\n        address payable swapTarget,\n        bytes calldata swapData\n    ) public payable {\n        if (sellToken != address(0)) {\n            IERC20(sellToken).transferFrom(\n                msg.sender,\n                address(this),\n                sellAmount\n            );\n        } else {\n            require(msg.value >= sellAmount, \"Swap0x: ETH value invalid\");\n        }\n\n        if (allowanceTarget != address(0) && sellToken != address(0)) {\n            require(\n                IERC20(sellToken).approve(allowanceTarget, type(uint256).max),\n                \"Swap0x: allowance failed\"\n            );\n        }\n\n        uint256 buyTokenBalanceBefore = 0;\n        if (buyToken != address(0)) {\n            buyTokenBalanceBefore = IERC20(buyToken).balanceOf(address(this));\n        } else {\n            buyTokenBalanceBefore = address(this).balance;\n        }\n\n        if (sellToken != address(0)) {\n            (bool success, bytes memory retdata) = swapTarget.call(swapData);\n            require(success, _getRevertMsg(retdata));\n        } else {\n            (bool success, bytes memory retdata) = swapTarget.call{\n                value: sellAmount\n            }(swapData);\n            require(success, _getRevertMsg(retdata));\n        }\n\n        if (buyToken != address(0)) {\n            uint256 buyTokenBalanceAfter = IERC20(buyToken).balanceOf(\n                address(this)\n            );\n            uint256 boughtAmount = buyTokenBalanceAfter - buyTokenBalanceBefore;\n            IERC20(buyToken).transfer(msg.sender, boughtAmount);\n        } else {\n            uint256 buyTokenBalanceAfter = address(this).balance;\n            uint256 boughtAmount = buyTokenBalanceAfter - buyTokenBalanceBefore;\n            payable(msg.sender).transfer(boughtAmount);\n        }\n    }\n}\n"
9     }
10   },
11   "settings": {
12     "optimizer": {
13       "enabled": true,
14       "runs": 200
15     },
16     "outputSelection": {
17       "*": {
18         "*": [
19           "evm.bytecode",
20           "evm.deployedBytecode",
21           "devdoc",
22           "userdoc",
23           "metadata",
24           "abi"
25         ]
26       }
27     },
28     "libraries": {}
29   }
30 }}