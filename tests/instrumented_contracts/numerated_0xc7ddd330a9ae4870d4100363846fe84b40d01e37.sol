1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/NFTMarketplace.sol": {
5       "content": "/******************************************************************************************************\nYieldification NFT Marketplace\n\nWebsite: https://yieldification.com\nTwitter: https://twitter.com/yieldification\nTelegram: https://t.me/yieldification\n******************************************************************************************************/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './interfaces/IERC721Royalty.sol';\nimport './interfaces/IWETH.sol';\n\ncontract NFTMarketplace is Ownable {\n  using SafeERC20 for IERC20;\n\n  uint256 constant DENOMENATOR = 10000;\n\n  bool public marketplaceEnabled = true;\n  address public treasury;\n  IWETH public weth;\n  uint256 public addOfferFee = 1 ether / 1000; // 0.001 ETH\n  uint256 public serviceFeePercent = (DENOMENATOR * 1) / 100; // 1%\n\n  // ERC20 token => amount volume\n  mapping(address => uint256) public totalVolume;\n  // ERC20 token => whether it's valid\n  mapping(address => bool) public validOfferERC20;\n  address[] _validOfferTokens;\n  mapping(address => uint256) _validOfferTokensIdx;\n\n  struct BuyItNowConfig {\n    address creator;\n    address nftContract;\n    uint256 tokenId;\n    address erc20;\n    uint256 amount;\n  }\n  mapping(bytes32 => BuyItNowConfig) _buyItNowConfigs;\n\n  struct Offer {\n    address owner; // person who created offer\n    address nftContract;\n    uint256 tokenId;\n    address offerERC20;\n    uint256 amount;\n    uint256 timestamp;\n    uint256 expiration;\n  }\n  // NFT ID => Offer\n  mapping(bytes32 => Offer[]) _offers;\n\n  event AddBuyItNowConfig(\n    address indexed owner,\n    address nftContract,\n    uint256 tokenId,\n    address buyItNowToken,\n    uint256 buyItNowAmount\n  );\n  event RemoveBuyItNowConfig(\n    address indexed owner,\n    address nftContract,\n    uint256 tokenId\n  );\n  event AddOffer(\n    address indexed owner,\n    address nftContract,\n    uint256 tokenId,\n    address offerToken,\n    uint256 offerAmount\n  );\n  event RemoveOffer(\n    address indexed owner,\n    address nftContract,\n    uint256 tokenId,\n    uint256 offerIdx\n  );\n  event EditOffer(\n    address indexed owner,\n    address nftContract,\n    uint256 tokenId,\n    uint256 offerIdx,\n    uint256 offerAmount,\n    uint256 expiration\n  );\n  event ProcessTransaction(\n    address indexed nftContract,\n    uint256 tokenId,\n    address oldOwner,\n    address newOwner,\n    address paymentToken,\n    uint256 price\n  );\n\n  constructor(IWETH _weth) {\n    weth = _weth;\n  }\n\n  function getAllNFTOffers(address _nftContract, uint256 _tokenId)\n    public\n    view\n    returns (Offer[] memory)\n  {\n    return _offers[_getUniqueNFTID(_nftContract, _tokenId)];\n  }\n\n  function getAllOffersMultiple(\n    address _nftContract,\n    uint256[] memory _tokenIds\n  ) external view returns (Offer[][] memory) {\n    Offer[][] memory _allOffers;\n    for (uint256 _i = 0; _i < _tokenIds.length; _i++) {\n      _allOffers[_i] = getAllNFTOffers(_nftContract, _tokenIds[_i]);\n    }\n    return _allOffers;\n  }\n\n  function getAllValidOfferTokens() external view returns (address[] memory) {\n    return _validOfferTokens;\n  }\n\n  function getBuyItNowConfig(address _nftContract, uint256 _tokenId)\n    external\n    view\n    returns (BuyItNowConfig memory)\n  {\n    return _buyItNowConfigs[_getUniqueNFTID(_nftContract, _tokenId)];\n  }\n\n  function addBuyItNowConfig(\n    address _nftContract,\n    uint256 _tokenId,\n    address _buyItNowToken,\n    uint256 _buyItNowAmount\n  ) external {\n    require(\n      _buyItNowToken == address(0) || validOfferERC20[_buyItNowToken],\n      'invalid buy it now token'\n    );\n\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(_nft.ownerOf(_tokenId) == msg.sender, 'must be NFT owner');\n    _buyItNowConfigs[_getUniqueNFTID(_nftContract, _tokenId)] = BuyItNowConfig({\n      creator: msg.sender,\n      nftContract: _nftContract,\n      tokenId: _tokenId,\n      erc20: _buyItNowToken,\n      amount: _buyItNowAmount\n    });\n\n    emit AddBuyItNowConfig(\n      msg.sender,\n      _nftContract,\n      _tokenId,\n      _buyItNowToken,\n      _buyItNowAmount\n    );\n  }\n\n  function removeBuyItNowConfig(address _nftContract, uint256 _tokenId)\n    external\n  {\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(_nft.ownerOf(_tokenId) == msg.sender, 'must be NFT owner');\n    delete _buyItNowConfigs[_getUniqueNFTID(_nftContract, _tokenId)];\n\n    emit RemoveBuyItNowConfig(msg.sender, _nftContract, _tokenId);\n  }\n\n  function buyItNow(\n    address _nftContract,\n    uint256 _tokenId,\n    address _buyItNowToken,\n    uint256 _buyItNowAmount\n  ) external payable {\n    require(marketplaceEnabled, 'not enabled');\n\n    bytes32 _nftId = _getUniqueNFTID(_nftContract, _tokenId);\n    BuyItNowConfig memory _binConf = _buyItNowConfigs[_nftId];\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(_binConf.creator == _nft.ownerOf(_tokenId), 'BIN1: bad owner');\n    require(_binConf.erc20 == _buyItNowToken, 'BIN2: bad token');\n    require(_binConf.amount == _buyItNowAmount, 'BIN3: bad amount');\n\n    (address _royaltyAddress, uint256 _royaltyAmount) = _getRoyaltyInfo(\n      _nftContract,\n      _binConf.amount\n    );\n    _processPayment(\n      _binConf.erc20,\n      _binConf.amount,\n      msg.sender,\n      _binConf.creator,\n      _royaltyAddress,\n      _royaltyAmount\n    );\n    _transferNFT(_nftContract, _tokenId, _binConf.creator, msg.sender);\n\n    emit ProcessTransaction(\n      _nftContract,\n      _tokenId,\n      _binConf.creator,\n      msg.sender,\n      _binConf.erc20,\n      _binConf.amount\n    );\n  }\n\n  function acceptOffer(\n    address _nftContract,\n    uint256 _tokenId,\n    uint256 _offerIdx,\n    address _offerToken,\n    uint256 _offerAmount\n  ) external {\n    require(marketplaceEnabled, 'not enabled');\n\n    Offer memory _offer = _offers[_getUniqueNFTID(_nftContract, _tokenId)][\n      _offerIdx\n    ];\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(msg.sender == _nft.ownerOf(_tokenId), 'ACCOFF1: must be owner');\n    require(_offer.offerERC20 == _offerToken, 'ACCOFF2: bad token');\n    require(_offer.amount == _offerAmount, 'ACCOFF3: bad amount');\n    require(\n      _offer.expiration == 0 || _offer.expiration > block.timestamp,\n      'ACCOFF4: expired'\n    );\n\n    (address _royaltyAddress, uint256 _royaltyAmount) = _getRoyaltyInfo(\n      _nftContract,\n      _offer.amount\n    );\n    _processPayment(\n      _offer.offerERC20,\n      _offer.amount,\n      _offer.owner,\n      msg.sender,\n      _royaltyAddress,\n      _royaltyAmount\n    );\n    _transferNFT(_nftContract, _tokenId, msg.sender, _offer.owner);\n    _removeOffer(_offer.owner, _nftContract, _tokenId, _offerIdx);\n\n    emit ProcessTransaction(\n      _nftContract,\n      _tokenId,\n      msg.sender,\n      _offer.owner,\n      _offer.offerERC20,\n      _offer.amount\n    );\n  }\n\n  function addOffer(\n    address _nftContract,\n    uint256 _tokenId,\n    address _offerToken,\n    uint256 _offerAmount,\n    uint256 expiration\n  ) external payable {\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    address _finalOfferToken;\n    uint256 _finalOfferAmount;\n\n    require(_nft.ownerOf(_tokenId) != msg.sender, 'ADDOFF1: not owner');\n\n    if (_offerToken == address(0)) {\n      require(msg.value > addOfferFee, 'ADDOFF2: need ETH');\n      require(validOfferERC20[address(weth)], 'ADDOFF3: WETH not valid');\n\n      uint256 _ethOfferAmount = msg.value - addOfferFee;\n      IERC20 _wethIERC20 = IERC20(address(weth));\n      uint256 _wethBalBefore = _wethIERC20.balanceOf(address(this));\n      weth.deposit{ value: _ethOfferAmount }();\n      _wethIERC20.transfer(\n        msg.sender,\n        _wethIERC20.balanceOf(address(this)) - _wethBalBefore\n      );\n\n      _finalOfferToken = address(weth);\n      _finalOfferAmount = (_ethOfferAmount * 10**weth.decimals()) / 10**18;\n    } else {\n      require(msg.value == addOfferFee, 'ADDOFF4: offer fee');\n      require(validOfferERC20[_offerToken], 'ADDOFF5: invalid offer token');\n      _finalOfferToken = _offerToken;\n      _finalOfferAmount = _offerAmount;\n    }\n\n    if (addOfferFee > 0) {\n      (bool _success, ) = payable(_getTreasury()).call{ value: addOfferFee }(\n        ''\n      );\n      require(_success, 'ADDOFF6: add offer fee');\n    }\n\n    IERC20 _offTokenCont = IERC20(_finalOfferToken);\n    require(\n      _offTokenCont.balanceOf(msg.sender) >= _finalOfferAmount,\n      'ADDOFF7: bad balance'\n    );\n    require(\n      _offTokenCont.allowance(msg.sender, address(this)) >= _finalOfferAmount,\n      'ADDOFF8: need allowance'\n    );\n    require(expiration == 0 || expiration > block.timestamp, 'bad expiration');\n\n    _offers[_getUniqueNFTID(_nftContract, _tokenId)].push(\n      Offer({\n        owner: msg.sender,\n        nftContract: _nftContract,\n        tokenId: _tokenId,\n        offerERC20: _finalOfferToken,\n        amount: _finalOfferAmount,\n        timestamp: block.timestamp,\n        expiration: expiration\n      })\n    );\n    emit AddOffer(\n      msg.sender,\n      _nftContract,\n      _tokenId,\n      _finalOfferToken,\n      _finalOfferAmount\n    );\n  }\n\n  function editOffer(\n    address _nftContract,\n    uint256 _tokenId,\n    uint256 _offerIdx,\n    uint256 _offerAmount,\n    uint256 _expiration\n  ) external {\n    bytes32 _nftId = _getUniqueNFTID(_nftContract, _tokenId);\n    Offer storage _offer = _offers[_nftId][_offerIdx];\n    require(_offer.owner == msg.sender, 'must own offer to edit');\n\n    if (_offerAmount > 0) {\n      _offer.amount = _offerAmount;\n    }\n    if (_expiration > 0) {\n      _offer.expiration = _expiration;\n    }\n\n    emit EditOffer(\n      _offer.owner,\n      _nftContract,\n      _tokenId,\n      _offerIdx,\n      _offerAmount,\n      _expiration\n    );\n  }\n\n  function removeOffer(\n    address _nftContract,\n    uint256 _tokenId,\n    uint256 _offerIdx\n  ) external {\n    _removeOffer(msg.sender, _nftContract, _tokenId, _offerIdx);\n  }\n\n  function _removeOffer(\n    address _caller,\n    address _nftContract,\n    uint256 _tokenId,\n    uint256 _offerIdx\n  ) internal {\n    bytes32 _nftId = _getUniqueNFTID(_nftContract, _tokenId);\n    Offer memory _offer = _offers[_nftId][_offerIdx];\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(_offer.owner != address(0), 'offer does not exist');\n    require(\n      _caller == _offer.owner || _caller == _nft.ownerOf(_tokenId),\n      'must be offer or NFT owner to remove'\n    );\n    _offers[_nftId][_offerIdx] = _offers[_nftId][_offers[_nftId].length - 1];\n    _offers[_nftId].pop();\n\n    emit RemoveOffer(_offer.owner, _nftContract, _tokenId, _offerIdx);\n  }\n\n  function _getUniqueNFTID(address _nftContract, uint256 _tokenId)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encodePacked(_nftContract, _tokenId));\n  }\n\n  function _processPayment(\n    address _paymentToken,\n    uint256 _amount,\n    address _payor,\n    address _receiver,\n    address _royaltyReceiver,\n    uint256 _royaltyAmount\n  ) internal {\n    uint256 _amountAfterRoyalty = _amount;\n    if (_royaltyReceiver != address(0)) {\n      _amountAfterRoyalty -= _royaltyAmount;\n    }\n    uint256 _treasuryAmount = (_amountAfterRoyalty * serviceFeePercent) /\n      DENOMENATOR;\n    uint256 _receiverAmount = _amountAfterRoyalty - _treasuryAmount;\n    if (_paymentToken == address(0)) {\n      require(msg.value >= _amount, 'not enough ETH to pay for NFT');\n      uint256 _before = address(this).balance;\n      // process royalty payment\n      if (_royaltyAmount > 0) {\n        (bool _royaltySuccess, ) = payable(_royaltyReceiver).call{\n          value: _royaltyAmount\n        }('');\n        require(_royaltySuccess, 'royalty payment was not processed');\n      }\n      // process treasury payment\n      if (_treasuryAmount > 0) {\n        (bool _treasSuccess, ) = payable(_getTreasury()).call{\n          value: _treasuryAmount\n        }('');\n        require(_treasSuccess, 'treasury payment was not processed');\n      }\n      (bool _success, ) = payable(_receiver).call{ value: _receiverAmount }('');\n      require(_success, 'main payment was not processed');\n      require(address(this).balance >= _before - _amount);\n    } else {\n      IERC20 _paymentTokenCont = IERC20(_paymentToken);\n      // process royalty payment\n      if (_royaltyAmount > 0) {\n        _paymentTokenCont.safeTransferFrom(\n          _payor,\n          _royaltyReceiver,\n          _royaltyAmount\n        );\n      }\n      if (_treasuryAmount > 0) {\n        _paymentTokenCont.safeTransferFrom(\n          _payor,\n          _getTreasury(),\n          _treasuryAmount\n        );\n      }\n      _paymentTokenCont.safeTransferFrom(_payor, _receiver, _receiverAmount);\n    }\n    totalVolume[_paymentToken] += _amount;\n  }\n\n  function _transferNFT(\n    address _nftContract,\n    uint256 _tokenId,\n    address _oldOwner,\n    address _newOwner\n  ) internal {\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    require(_nft.ownerOf(_tokenId) == _oldOwner, 'current owner invalid');\n    _nft.safeTransferFrom(_oldOwner, _newOwner, _tokenId);\n\n    // clean up any existing buy it now config\n    bytes32 _nftId = _getUniqueNFTID(_nftContract, _tokenId);\n    delete _buyItNowConfigs[_nftId];\n  }\n\n  function _getRoyaltyInfo(address _nftContract, uint256 _saleAmount)\n    internal\n    view\n    returns (address, uint256)\n  {\n    IERC721Royalty _nft = IERC721Royalty(_nftContract);\n    try _nft.royaltyInfo(0, _saleAmount) returns (\n      address _royaltyAddress,\n      uint256 _royaltyAmount\n    ) {\n      return (_royaltyAddress, _royaltyAmount);\n    } catch {\n      return (address(0), 0);\n    }\n  }\n\n  function _getTreasury() internal view returns (address) {\n    return treasury == address(0) ? owner() : treasury;\n  }\n\n  function updateValidOfferToken(address _token, bool _isValid)\n    external\n    onlyOwner\n  {\n    require(validOfferERC20[_token] != _isValid, 'must toggle');\n    validOfferERC20[_token] = _isValid;\n    if (_isValid) {\n      _validOfferTokensIdx[_token] = _validOfferTokens.length;\n      _validOfferTokens.push(_token);\n    } else {\n      uint256 _idx = _validOfferTokensIdx[_token];\n      delete _validOfferTokensIdx[_token];\n      _validOfferTokens[_idx] = _validOfferTokens[_validOfferTokens.length - 1];\n      _validOfferTokens.pop();\n    }\n  }\n\n  function setTreasury(address _treasury) external onlyOwner {\n    treasury = _treasury;\n  }\n\n  function setServiceFeePercent(uint256 _percent) external onlyOwner {\n    require(_percent <= (DENOMENATOR * 10) / 100, 'must be <= 10%');\n    serviceFeePercent = _percent;\n  }\n\n  function setAddOfferFee(uint256 _wei) external onlyOwner {\n    addOfferFee = _wei;\n  }\n\n  function setWETH(IWETH _weth) external onlyOwner {\n    weth = _weth;\n  }\n\n  function setMarketplaceEnabled(bool _isEnabled) external onlyOwner {\n    require(marketplaceEnabled != _isEnabled, 'must toggle enabled');\n    marketplaceEnabled = _isEnabled;\n  }\n\n  function withdrawERC20(address _tokenAddress, uint256 _amount)\n    external\n    onlyOwner\n  {\n    IERC20 _contract = IERC20(_tokenAddress);\n    _amount = _amount == 0 ? _contract.balanceOf(address(this)) : _amount;\n    require(_amount > 0);\n    _contract.safeTransfer(owner(), _amount);\n  }\n\n  function withdrawETH() external onlyOwner {\n    payable(owner()).call{ value: address(this).balance }('');\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
15     },
16     "contracts/interfaces/IERC721Royalty.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\ninterface IERC721Royalty is IERC721 {\n  // Support royalty info - See {EIP-2981}: https://eips.ethereum.org/EIPS/eip-2981\n  function royaltyInfo(uint256, uint256 _salePrice)\n    external\n    view\n    returns (address receiver, uint256 royaltyAmount);\n}\n"
18     },
19     "contracts/interfaces/IWETH.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IWETH {\n  function decimals() external view returns (uint8);\n\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Address.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     }
37   },
38   "settings": {
39     "metadata": {
40       "bytecodeHash": "none"
41     },
42     "optimizer": {
43       "enabled": true,
44       "runs": 200
45     },
46     "outputSelection": {
47       "*": {
48         "*": [
49           "evm.bytecode",
50           "evm.deployedBytecode",
51           "devdoc",
52           "userdoc",
53           "metadata",
54           "abi"
55         ]
56       }
57     },
58     "libraries": {}
59   }
60 }}