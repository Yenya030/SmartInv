1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/DeedHashedCloneFactory.sol": {
5       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ninterface IClonableDeedHashed {\n  function initialize(address _admin) external;\n  function update(bytes32 _hash, bytes32 _metahash) external;\n  function transferOwnership(address newOwner) external;\n  function getType() external pure returns(bytes32);\n}\n\ncontract DeedHashedCloneFactory is Ownable {\n\n    event NewDeedHashedClone(\n      address indexed referenceContract,\n      address indexed cloneContract,\n      address indexed admin\n    );\n\n    event UpdatedDeedHashedClone(\n      address indexed cloneContract,\n      bytes32 indexed _hash,\n      bytes32 indexed _metahash\n    );\n\n    event TransferOwnershipDeedHashedClone(\n      address indexed cloneContract,\n      address _newOwner\n    );\n\n    event SetClonableDeedHashedReferenceContractValidity(\n      address indexed referenceContract,\n      bool validity\n    );\n\n    mapping(address => bool) public validClonableDeedHashed;\n    mapping(address => bool) public isClone;\n\n    constructor(\n      address _clonableDeedHashedReference\n    ) {\n      validClonableDeedHashed[_clonableDeedHashedReference] = true;\n      emit SetClonableDeedHashedReferenceContractValidity(_clonableDeedHashedReference, true);\n    }\n\n    function setClonableDeedHashedReferenceValidity(\n      address _clonableDeedHashedReference,\n      bool _validity\n    ) external onlyOwner {\n      validClonableDeedHashed[_clonableDeedHashedReference] = _validity;\n      emit SetClonableDeedHashedReferenceContractValidity(_clonableDeedHashedReference, _validity);\n    }\n\n    function newDeedHashedClone(\n      address _clonableDeedHashedReference\n    ) external onlyOwner {\n      require(validClonableDeedHashed[_clonableDeedHashedReference], \"INVALID_WHITELIST_REFERENCE_CONTRACT\");\n      // Deploy new DeedHashed contract\n      address newDeedHashedCloneAddress = Clones.clone(_clonableDeedHashedReference);\n      isClone[newDeedHashedCloneAddress] = true;\n      IClonableDeedHashed deedHashedClone = IClonableDeedHashed(newDeedHashedCloneAddress);\n      deedHashedClone.initialize(address(this));\n      emit NewDeedHashedClone(_clonableDeedHashedReference, newDeedHashedCloneAddress, address(this));\n    }\n\n    function updateDeedHashedClone(\n      address _deedHashedClone,\n      bytes32 _hash,\n      bytes32 _metahash\n    ) external onlyOwner {\n      require(isClone[_deedHashedClone] == true, \"INVALID_CLONE_ADDRESS\");\n      IClonableDeedHashed deedHashedClone = IClonableDeedHashed(_deedHashedClone);\n      deedHashedClone.update(_hash, _metahash);\n      emit UpdatedDeedHashedClone(_deedHashedClone, _hash, _metahash);\n    }\n\n    function transferDeedHashedCloneOwnership(\n      address _deedHashedClone,\n      address _newOwner\n    ) external onlyOwner {\n      require(isClone[_deedHashedClone] == true, \"INVALID_CLONE_ADDRESS\");\n      IClonableDeedHashed deedHashedClone = IClonableDeedHashed(_deedHashedClone);\n      deedHashedClone.transferOwnership(_newOwner);\n      emit TransferOwnershipDeedHashedClone(_deedHashedClone, _newOwner);\n    }\n\n    function getTypeDeedHashedClone(\n      address _deedHashedClone\n    ) external view returns (bytes32) {\n      require(isClone[_deedHashedClone] == true, \"INVALID_CLONE_ADDRESS\");\n      IClonableDeedHashed deedHashedClone = IClonableDeedHashed(_deedHashedClone);\n      return deedHashedClone.getType();\n    }\n\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/proxy/Clones.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}