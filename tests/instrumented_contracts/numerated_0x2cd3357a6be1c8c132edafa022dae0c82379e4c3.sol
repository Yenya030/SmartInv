1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/tunnels/Harbour.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ICoin, IToken} from \"../interfaces/Interfaces.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {RecoverableERC721Holder} from \"../utils/RecoverableERC721Holder.sol\";\n\ninterface ITunnel {\n    function sendMessage(bytes calldata _message) external;\n}\n\n/// @dev A simple contract to orchestrate comings and going from the GHG Tunnel System\ncontract Harbour is Ownable, Pausable, RecoverableERC721Holder {\n\n    address public tunnel;\n\n    address public ggold;\n    address public wood;\n\n    address public goldhunters;\n    address public ships;\n    address public houses;\n\n    mapping (address => address) public reflection;\n\n    constructor(\n        address _tunnel,\n        address _ggold, \n        address _wood,\n        address _goldhunters,\n        address _ships, \n        address _houses\n    ) {\n        tunnel = _tunnel;\n        ggold = _ggold;\n        wood = _wood;\n        goldhunters = _goldhunters;\n        ships = _ships;\n        houses = _houses;\n        _pause();\n    }\n\n    //////////////   OWNER FUNCTIONS   //////////////\n\n    // Travel is pausable\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // Creates a mapping between L1 <-> L2 Contract Equivalents\n    function setReflection(address _key, address _reflection) external onlyOwner {\n        reflection[_key] = _reflection;\n        reflection[_reflection] = _key;\n    }\n\n    //////////////   USER FUNCTIONS   ///////////////\n\n    function travel(\n        uint256 _ggoldAmount, \n        uint256 _woodAmount,\n        uint16[] calldata _goldhunterIds,\n        uint16[] calldata _shipIds,\n        uint16[] calldata _houseIds\n    ) external whenNotPaused {\n        uint256 callsIndex = 0;\n\n        bytes[] memory calls = new bytes[](\n            (_ggoldAmount > 0 ? 1 : 0) + \n            (_woodAmount > 0 ? 1 : 0) +\n            (_goldhunterIds.length > 0 ? 1 : 0) +\n            (_shipIds.length > 0 ? 1 : 0) +\n            (_houseIds.length > 0 ? 1 : 0)\n        );\n\n        if (_ggoldAmount > 0) {\n            ICoin(ggold).burn(msg.sender, _ggoldAmount);\n            calls[callsIndex] = abi.encodeWithSelector(this.mintToken.selector, reflection[address(ggold)], msg.sender, _ggoldAmount);\n            callsIndex++;\n        }\n\n        if (_woodAmount > 0) {\n            ICoin(wood).burn(msg.sender, _woodAmount);\n            calls[callsIndex] = abi.encodeWithSelector(this.mintToken.selector, reflection[address(wood)], msg.sender, _woodAmount);\n            callsIndex++;\n        }\n\n        if (_goldhunterIds.length > 0) {\n            _stakeMany(goldhunters, _goldhunterIds);\n            calls[callsIndex] = abi.encodeWithSelector(this.unstakeMany.selector, reflection[address(goldhunters)], msg.sender, _goldhunterIds);\n            callsIndex++;\n        }\n\n        if (_shipIds.length > 0) {\n            _stakeMany(ships, _shipIds);\n            calls[callsIndex] = abi.encodeWithSelector(this.unstakeMany.selector, reflection[address(ships)], msg.sender, _shipIds);\n            callsIndex++;\n        }\n\n        if (_houseIds.length > 0) {\n            _stakeMany(houses, _houseIds);\n            calls[callsIndex] = abi.encodeWithSelector(this.unstakeMany.selector, reflection[address(houses)], msg.sender, _houseIds);\n            // no need to increment callsIndex as this is last call\n        }\n\n        ITunnel(tunnel).sendMessage(abi.encode(reflection[address(this)], calls));\n    }\n\n    //////////////   INTERNAL FUNCTIONS   /////////////\n\n    function _stakeMany(address nft, uint16[] calldata ids) internal {\n        for(uint i = 0; i < ids.length; i++) {\n            IToken(nft).safeTransferFrom(msg.sender, address(this), ids[i]);\n        }\n    }\n\n    modifier onlyTunnel {\n        require(msg.sender == tunnel, \"ERROR: Msg.Sender is Not Tunnel\");\n        _;\n    }\n\n    function mintToken(address token, address to, uint256 amount) external onlyTunnel { \n        ICoin(token).mint(to, amount);\n    }\n\n    function unstakeMany(address nft, address harbourUser, uint16[] calldata ids) external onlyTunnel {\n        for(uint i = 0; i < ids.length; i++) {\n            IToken(nft).safeTransferFrom(address(this), harbourUser, ids[i]);\n        }\n    }\n}"
6     },
7     "contracts/interfaces/Interfaces.sol": {
8       "content": "// SPDX-License-Identifier: MIT LICENSE\npragma solidity ^0.8.9;\n\ninterface ICoin {\n    function mint(address account, uint amount) external;\n    function burn(address _from, uint _amount) external;\n    function balanceOf(address account) external returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ninterface IToken {\n    function ownerOf(uint id) external view returns (address);\n    function transferFrom(address from, address to, uint tokenId) external;\n    function safeTransferFrom(address from, address to, uint tokenId) external; // ERC721\n    function safeTransferFrom(address from, address to, uint tokenId, uint amount) external; // ERC1155\n    function isApprovedForAll(address owner, address operator) external returns(bool);\n    function setApprovalForAll(address operator, bool approved) external;\n}\n\ninterface IGHGMetadata {\n    ///// GENERIC GETTERS /////\n    function getGoldhunterMetadata(uint16 _tokenId) external view returns (string memory);\n    function getShipMetadata(uint16 _tokenId) external view returns (string memory);\n    function getHouseMetadata(uint16 _tokenId) external view returns (string memory);\n\n    ///// TRAIT GETTERS - SHIPS /////\n    function shipIsPirate(uint16 _tokenId) external view returns (bool);\n    function shipIsCrossedTheOcean(uint16 _tokenId) external view returns (bool);\n    function getShipBackground(uint16 _tokenId) external view returns (string memory);\n    function getShipShip(uint16 _tokenId) external view returns (string memory);\n    function getShipFlag(uint16 _tokenId) external view returns (string memory);\n    function getShipMast(uint16 _tokenId) external view returns (string memory);\n    function getShipAnchor(uint16 _tokenId) external view returns (string memory);\n    function getShipSail(uint16 _tokenId) external view returns (string memory);\n    function getShipWaves(uint16 _tokenId) external view returns (string memory);\n\n    ///// TRAIT GETTERS - HOUSES /////\n    function getHouseBackground(uint16 _tokenId) external view returns (string memory);\n    function getHouseType(uint16 _tokenId) external view returns (string memory);\n    function getHouseWindow(uint16 _tokenId) external view returns (string memory);\n    function getHouseDoor(uint16 _tokenId) external view returns (string memory);\n    function getHouseRoof(uint16 _tokenId) external view returns (string memory);\n    function getHouseForeground(uint16 _tokenId) external view returns (string memory);\n\n    ///// TRAIT GETTERS - GOLDHUNTERS /////\n    function goldhunterIsCrossedTheOcean(uint16 _tokenId) external view returns (bool);\n    function goldhunterIsPirate(uint16 _tokenId) external view returns (bool);\n    function getGoldhunterIsGen0(uint16 _tokenId) external pure returns (bool);\n    function getGoldhunterSkin(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterLegs(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterFeet(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterTshirt(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterHeadwear(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterMouth(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterNeck(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterSunglasses(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterTool(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterPegleg(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterHook(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterDress(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterFace(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterPatch(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterEars(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterHead(uint16 _tokenId) external view returns (string memory);\n    function getGoldhunterArm(uint16 _tokenId) external view returns (string memory);\n}"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/Pausable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
15     },
16     "contracts/utils/RecoverableERC721Holder.sol": {
17       "content": "\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\npragma solidity ^0.8.0;\n\nimport {IToken} from \"../interfaces/Interfaces.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract RecoverableERC721Holder is Ownable, IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev Allows for the safeTransfer of all ERC721 assets from this contract to a list of recipients\n     */\n    function emergencyTransferOut(address[] calldata _tokenAddressesToTransfer, address[] calldata _recipients, uint[] calldata _tokenIds) external onlyOwner {\n        require((_tokenAddressesToTransfer.length == _tokenIds.length) && (_tokenIds.length == _recipients.length), \"ERROR: INVALID INPUT DATA - MISMATCHED LENGTHS\");\n\n        for(uint i = 0; i < _recipients.length; i++) {\n            IToken(_tokenAddressesToTransfer[i]).safeTransferFrom(address(this), _recipients[i], _tokenIds[i]);\n        }\n    }\n}"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": false,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}