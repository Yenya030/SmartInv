1 pragma solidity ^0.4.25;
2 
3 /**
4  Whale Killer - Плавно растущий и долго живущий проект УБИЙЦА КИТОВ!, который возвращает 121% от вашего депозита!
5 
6   Маленький лимит на депозит избавляет от проблем с крупными игроками, которые очень сильно тормозили предыдущие версии контракта и значительно продлевает срок его жизни!
7 
8   Автоматические выплаты!
9   Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!
10   Создан и проверен профессионалами!
11   Код полностью документирован на русском языке, каждая строчка понятна!
12 
13   Вебсайт: http://Whale_Killer.pro/
14   
15   1. Пошлите любую ненулевую сумму на адрес контракта
16      - сумма от 0.01 до 1 ETH
17      - gas limit минимум 250000
18      - вы встанете в очередь
19   2. Немного подождите
20   3. ...
21   4. PROFIT! Вам пришло 121% от вашего депозита.
22 
23   Как это возможно?
24   1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от
25      новых инвесторов до тех пор, пока не получит 121% от своего депозита
26   2. Выплаты могут приходить несколькими частями или все сразу
27   3. Как только вы получаете 121% от вашего депозита, вы удаляетесь из очереди
28   4. Вы можете делать несколько депозитов сразу
29   5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления
30      сразу же направляются на выплаты
31 
32      Таким образом, последние платят первым, и инвесторы, достигшие выплат 121% от депозита,
33      удаляются из очереди, уступая место остальным
34 
35               новый инвестор --|            совсем новый инвестор --|
36                  инвестор5     |                новый инвестор      |
37                  инвестор4     |     =======>      инвестор5        |
38                  инвестор3     |                   инвестор4        |
39  (част. выплата) инвестор2    <|                   инвестор3        |
40 (полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 121%)
41 
42 */
43 
44 contract GradualPro {
45     // Адрес кошелька для оплаты рекламы
46     address constant private ADS_SUPPORT = 0xd0F672eAa5af6ccA2FD868d9983f059b221ed7AB;
47 
48     // Адрес кошелька для оплаты технической поддержки информационных каналов
49     address constant private TECH_SUPPORT = 0xbCd3b4C66be86448FEBd11D5B4FE2521d36e2864;
50 
51     // Процент депозита на рекламу 3%
52     uint constant public ADS_PERCENT = 3;
53 
54     // Процент депозита на тех поддержку 1%
55     uint constant public TECH_PERCENT = 1;
56     
57     // Процент выплат всем участникам
58     uint constant public MULTIPLIER = 121;
59 
60     // Максимальная сумма депозита = 1 эфир, чтобы каждый смог участвовать и киты не тормозили и не пугали вкладчиков
61     uint constant public MAX_LIMIT = 1 ether;
62 
63     // Структура Deposit содержит информацию о депозите
64     struct Deposit {
65         address depositor; // Владелец депозита
66         uint128 deposit;   // Сумма депозита
67         uint128 expect;    // Сумма выплаты (моментально 121% от депозита)
68     }
69 
70     // Очередь
71     Deposit[] private queue;
72 
73     // Номер обрабатываемого депозита, можно следить в разделе Read contract
74     uint public currentReceiverIndex = 0;
75 
76     // Данная функция получает все депозиты, сохраняет их и производит моментальные выплаты
77     function () public payable {
78         // Если сумма депозита больше нуля
79         if(msg.value > 0){
80             // Проверяем минимальный лимит газа 220 000, иначе отменяем депозит и возвращаем деньги вкладчику
81             require(gasleft() >= 220000, "We require more gas!");
82 
83             // Проверяем максимальную сумму вклада
84             require(msg.value <= MAX_LIMIT, "Deposit is too big");
85 
86             // Добавляем депозит в очередь, записываем что ему нужно выплатить 121% от суммы депозита
87             queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value * MULTIPLIER / 100)));
88 
89             // Отправляем процент на продвижение проекта
90             uint ads = msg.value * ADS_PERCENT / 100;
91             ADS_SUPPORT.transfer(ads);
92 
93             // Отправляем процент на техническую поддержку проекта
94             uint tech = msg.value * TECH_PERCENT / 100;
95             TECH_SUPPORT.transfer(tech);
96 
97             // Вызываем функцию оплаты первому в очереди депозиту
98             pay();
99         }
100     }
101 
102     // Фукнция используется для оплаты первым в очереди депозитам
103     // Каждая новая транзация обрабатывает от 1 до 4+ вкладчиков в начале очереди 
104     // В зависимости от оставшегося газа
105     function pay() private {
106         // Попытаемся послать все деньги имеющиеся на контракте первым в очереди вкладчикам
107         uint128 money = uint128(address(this).balance);
108 
109         // Проходим по всей очереди
110         for(uint i = 0; i < queue.length; i++) {
111 
112             uint idx = currentReceiverIndex + i;  // Достаем номер первого в очереди депозита
113 
114             Deposit storage dep = queue[idx]; // Достаем информацию о первом депозите
115 
116             if(money >= dep.expect) {  // Если у нас есть достаточно денег для полной выплаты, то выплачиваем ему все
117                 dep.depositor.transfer(dep.expect); // Отправляем ему деньги
118                 money -= dep.expect; // Обновляем количество оставшихся денег
119 
120                 // депозит был полностью выплачен, удаляем его
121                 delete queue[idx];
122             } else {
123                 // Попадаем сюда, если у нас не достаточно денег выплатить все, а лишь часть
124                 dep.depositor.transfer(money); // Отправляем все оставшееся
125                 dep.expect -= money;       // Обновляем количество оставшихся денег
126                 break;                     // Выходим из цикла
127             }
128 
129             if (gasleft() <= 50000)         // Проверяем если еще остался газ, и если его нет, то выходим из цикла
130                 break;                     //  Следующий вкладчик осуществит выплату следующим в очереди
131         }
132 
133         currentReceiverIndex += i; // Обновляем номер депозита ставшего первым в очереди
134     }
135 
136     // Показывает информацию о депозите по его номеру (idx), можно следить в разделе Read contract
137     // Вы можете получить номер депозита  (idx) вызвав функцию getDeposits()
138     function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){
139         Deposit storage dep = queue[idx];
140         return (dep.depositor, dep.deposit, dep.expect);
141     }
142 
143     // Показывает количество вкладов определенного инвестора
144     function getDepositsCount(address depositor) public view returns (uint) {
145         uint c = 0;
146         for(uint i=currentReceiverIndex; i<queue.length; ++i){
147             if(queue[i].depositor == depositor)
148                 c++;
149         }
150         return c;
151     }
152 
153     // Показывает все депозиты (index, deposit, expect) определенного инвестора, можно следить в разделе Read contract
154     function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {
155         uint c = getDepositsCount(depositor);
156 
157         idxs = new uint[](c);
158         deposits = new uint128[](c);
159         expects = new uint128[](c);
160 
161         if(c > 0) {
162             uint j = 0;
163             for(uint i=currentReceiverIndex; i<queue.length; ++i){
164                 Deposit storage dep = queue[i];
165                 if(dep.depositor == depositor){
166                     idxs[j] = i;
167                     deposits[j] = dep.deposit;
168                     expects[j] = dep.expect;
169                     j++;
170                 }
171             }
172         }
173     }
174     
175     // Показывает длинну очереди, можно следить в разделе Read contract
176     function getQueueLength() public view returns (uint) {
177         return queue.length - currentReceiverIndex;
178     }
179 
180 }