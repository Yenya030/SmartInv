1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Address.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
18     },
19     "contracts/interfaces/IDynamicThresholdOracle.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDynamicThresholdOracle {\n    function getBuyThreshold() external view returns (uint);\n}"
21     },
22     "contracts/interfaces/IUniswapV2Factory.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}"
24     },
25     "contracts/interfaces/IUniswapV2Router02.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    )\n        external\n        returns (\n            uint amountA,\n            uint amountB,\n            uint liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (\n            uint amountToken,\n            uint amountETH,\n            uint liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
27     },
28     "contracts/MegaMoon.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\n/*\n    MEGAMOON\n    $MEGAM\n\n    Website: https://megamooncoin.com/\n    Twitter: https://twitter.com/MEGAMOON_eth\n    Telegram: https://t.me/MEGAMOON_eth\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/IDynamicThresholdOracle.sol\";\n\ncontract MegaMoon is IERC20, Ownable {\n    using Address for address payable;\n \n    mapping (address => uint) private _rOwned;\n    mapping (address => uint) private _tOwned;\n    mapping (address => mapping (address => uint)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n \n    address[] private _excluded;\n \n    bool public swapEnabled;\n    bool private swapping;\n    bool public tradingEnabled;\n \n    IUniswapV2Router02 public router;\n    IDynamicThresholdOracle public oracle;\n    address public pair;\n    address public buybackWallet;\n    address public marketingWallet;\n \n    uint8 private constant _decimals = 18;\n    uint private constant MAX = ~uint(0);\n \n    uint private _tTotal = 1_000_000_000 * 10**_decimals;\n    uint private _rTotal = (MAX - (MAX % _tTotal));\n \n    uint public totalRfi;\n    uint public swapThreshold = 2 * _tTotal / 1000; // 0.2%\n    uint public maxTxAmount = 10 * _tTotal / 1000; // 1.0%\n    uint public maxWalletAmount = 20 * _tTotal / 1000; // 2.0%\n    uint public staticBuyThreshold = _tTotal / 1000; // 0.1%\n    uint public startBlock;\n    uint public offlineBlocks = 5;\n \n    uint public buyTax = 150; // 15% during offline blocks\n    uint public sellTax = 150; // 15% max sell tax\n    uint public dynamicTax = 30; // 3% -> 0%, 3%, 6%, 9%, 12%, 15%\n    uint public maxSellTax = 150; // 15%\n \n    string private constant _name = \"MEGAMOON\";\n    string private constant _symbol = \"MEGAM\";\n \n    struct TaxesPercentage {\n        uint rfi;\n        uint buyback;\n        uint marketing;\n    }\n \n    TaxesPercentage public taxesPercentage = TaxesPercentage(40, 40, 20);\n \n    struct valuesFromGetValues {\n        uint rAmount;\n        uint rTransferAmount;\n        uint rRfi;\n        uint rSwap;\n        uint tTransferAmount;\n        uint tRfi;\n        uint tSwap;\n    }\n \n    modifier lockTheSwap {\n        swapping = true;\n        _;\n        swapping = false;\n    }\n\n    modifier onlyOwnerOrOracle {\n        require(\n            msg.sender == owner() ||\n            msg.sender == address(oracle), \n            \"Only the owner or oracle can make this call!\"\n        );\n        _;\n    }\n \n    constructor (\n        address _routerAddress, \n        address _buybackWallet, \n        address _marketingWallet\n    ) {\n        IUniswapV2Router02 _router = IUniswapV2Router02(_routerAddress);\n        address _pair = IUniswapV2Factory(_router.factory())\n            .createPair(address(this), _router.WETH());\n \n        router = _router;\n        pair = _pair;\n \n        excludeFromReward(pair);\n        excludeFromReward(address(0xdead));\n \n        _rOwned[msg.sender] = _rTotal;\n        _isExcludedFromFee[msg.sender] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(0xdead)] = true;\n        _isExcludedFromFee[_marketingWallet]=true;\n        _isExcludedFromFee[_buybackWallet] = true;\n \n        marketingWallet = _marketingWallet;\n        buybackWallet = _buybackWallet;\n \n        emit Transfer(address(0), msg.sender, _tTotal);\n    }\n \n    function name() public pure returns (string memory) {\n        return _name;\n    }\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n \n    function totalSupply() public view override returns (uint) {\n        return _tTotal;\n    }\n \n    function balanceOf(address account) public view override returns (uint) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n \n    function transfer(address recipient, uint amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n \n    function allowance(address owner, address spender) public view override returns (uint) {\n        return _allowances[owner][spender];\n    }\n \n    function approve(address spender, uint amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n \n    function transferFrom(address sender, address recipient, uint amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n \n        uint currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n \n        return true;\n    }\n \n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n \n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\n        uint currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n \n        return true;\n    }\n \n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n \n    function tokenFromReflection(uint rAmount) public view returns(uint) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint currentRate =  _getRate();\n        return rAmount / currentRate;\n    }\n \n    function excludeFromReward(address account) public onlyOwner {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n \n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n \n    function excludeFromFee(address account, bool status) public onlyOwner {\n        _isExcludedFromFee[account] = status;\n    }\n \n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function buyThreshold() public view returns (uint) {\n        return address(oracle) != address(0x0) ? oracle.getBuyThreshold() : staticBuyThreshold;\n    }\n \n    function _reflectRfi(uint rRfi, uint tRfi) private {\n        _rTotal -= rRfi;\n        totalRfi += tRfi;\n    }\n \n    function _takeSwapFees(uint rValue, uint tValue) private {\n        if (_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+= tValue;\n        }\n\n        _rOwned[address(this)] += rValue;\n    }\n \n    function _getValues(uint tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory to_return) {\n        to_return = _getTValues(tAmount, takeFee, isSell);\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rSwap) = _getRValues(to_return, tAmount, takeFee, _getRate());\n\n        return to_return;\n    }\n \n    function _getTValues(uint tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory s) {\n        if (!takeFee) {\n            s.tTransferAmount = tAmount;\n            return s;\n        }\n \n        uint tempTax = isSell ? sellTax : buyTax;\n        uint rfiTax = tempTax * taxesPercentage.rfi / 100;\n        uint swapTax = tempTax * (100 - taxesPercentage.rfi) / 100;\n        s.tRfi = tAmount * rfiTax / 1000;\n        s.tSwap = tAmount * swapTax / 1000;\n        s.tTransferAmount = tAmount - s.tRfi - s.tSwap;\n\n        return s;\n    }\n \n    function _getRValues(valuesFromGetValues memory s, uint tAmount, bool takeFee, uint currentRate) private pure returns (uint rAmount, uint rTransferAmount, uint rRfi, uint rSwap) {\n        rAmount = tAmount*currentRate;\n \n        if (!takeFee) {\n            return (rAmount, rAmount, 0, 0);\n        }\n \n        rRfi = s.tRfi * currentRate;\n        rSwap = s.tSwap * currentRate;\n        rTransferAmount = rAmount - rRfi - rSwap;\n\n        return (rAmount, rTransferAmount, rRfi, rSwap);\n    }\n \n    function _getRate() private view returns (uint) {\n        (uint rSupply, uint tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n \n    function _getCurrentSupply() private view returns (uint, uint) {\n        uint rSupply = _rTotal;\n        uint tSupply = _tTotal;\n        for (uint i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply-_rOwned[_excluded[i]];\n            tSupply = tSupply-_tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n \n    function _approve(address owner, address spender, uint amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n \n    function _transfer(address from, address to, uint amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(from), \"You are trying to transfer more than your balance\");\n \n        if (buyTax != 0 && tradingEnabled) {\n            if (startBlock + offlineBlocks < block.number) buyTax = 0;\n        }\n \n        bool takeFee = false;\n \n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n            require(tradingEnabled, \"Liquidity has not been added yet\");\n            require(amount <= maxTxAmount, \"You are exceeding maxTxAmount\");\n            if (to != pair) require(balanceOf(to) + amount <= maxWalletAmount, \"You are exceeding maxWalletAmount\");\n\n            takeFee = true;\n\n            if (from == pair && startBlock + offlineBlocks < block.number) {\n                takeFee = false;\n\n                if (amount >= buyThreshold()) {\n                    if (sellTax >= dynamicTax) sellTax -= dynamicTax;\n                    else sellTax = 0;\n                }\n            }\n        }\n \n        bool canSwap = balanceOf(address(this)) >= swapThreshold;\n        if (!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n            swapTokensForFees(swapThreshold);\n        }\n \n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function _tokenTransfer(address sender, address recipient, uint tAmount, bool takeFee) private {\n        bool isSell = recipient == pair ? true : false;\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, isSell);\n \n        if (isSell && takeFee && startBlock + offlineBlocks < block.number) {\n            if (sellTax + dynamicTax > maxSellTax) sellTax = maxSellTax;\n            else sellTax += dynamicTax;\n        }\n\n        if (_isExcluded[sender] ) {\n            _tOwned[sender] = _tOwned[sender] - tAmount;\n        }\n        if (_isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\n        }\n \n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\n \n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\n        if (s.rSwap > 0 || s.tSwap > 0) _takeSwapFees(s.rSwap, s.tSwap);\n \n        emit Transfer(sender, recipient, s.tTransferAmount);\n        emit Transfer(sender, address(this), s.tSwap);\n \n    }\n \n    function swapTokensForFees(uint tokens) private lockTheSwap {\n        uint initialBalance = address(this).balance;\n        swapTokensForETH(tokens);\n        uint deltaBalance = address(this).balance - initialBalance;\n \n        uint totalPercent = 100 - taxesPercentage.rfi;\n        if (totalPercent == 0) return;\n \n        uint marketingAmount = deltaBalance * taxesPercentage.marketing / totalPercent;\n        if (marketingAmount > 0) payable(marketingWallet).sendValue(marketingAmount);\n \n        uint buybackAmount = deltaBalance - marketingAmount;\n        if (buybackAmount > 0) payable(buybackWallet).sendValue(buybackAmount);\n    }\n \n    function swapTokensForETH(uint tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n \n        _approve(address(this), address(router), tokenAmount);\n \n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n \n    function enableTrading() external onlyOwner {\n        tradingEnabled = true;\n        swapEnabled = true;\n        startBlock = block.number;\n    }\n\n    function updateOracle(address newOracle) external onlyOwnerOrOracle {\n        oracle = IDynamicThresholdOracle(newOracle);\n    }\n \n    function updateMarketingWallet(address newWallet) external onlyOwner {\n        marketingWallet = newWallet;\n        _isExcludedFromFee[marketingWallet] = true;\n    }\n \n    function updateBuybackWallet(address newWallet) external onlyOwner {\n        buybackWallet = newWallet;\n        _isExcludedFromFee[buybackWallet] = true;\n    }\n\n    function setTaxesPercentage(uint _rfi, uint _buyback, uint _marketing) external onlyOwner {\n        require(_rfi + _buyback + _marketing == 100, \"Total must be 100\");\n        taxesPercentage = TaxesPercentage(_rfi, _buyback, _marketing);\n    }\n \n    function updateThreshold(uint amount) external onlyOwner {\n        staticBuyThreshold = amount * 10**_decimals;\n    }\n \n    function updateMaxTxAmount(uint amount) external onlyOwner {\n        maxTxAmount = amount * 10**_decimals;\n    }\n \n    function updateMaxWallet(uint amount) external onlyOwner {\n        maxWalletAmount = amount * 10**_decimals;\n    }\n \n    function updateSwapThreshold(uint amount) external onlyOwner {\n        swapThreshold = amount * 10**_decimals;\n    }\n \n    function updateSwapEnabled(bool _enabled) external onlyOwner {\n        swapEnabled = _enabled;\n    }\n \n    function updatePair(address newRouter, address newPair) external onlyOwner {\n        router = IUniswapV2Router02(newRouter);\n        pair = newPair;\n    }\n \n    function updateDynamicTax(uint amount) external onlyOwner {\n        dynamicTax = amount;\n    }\n \n    function updateMaxSellTax(uint amount) external onlyOwner {\n        maxSellTax = amount;\n    }\n \n    function rescueETH() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n \n    function rescueTokens(address _token) external onlyOwner {\n        require(_token != address(this), \"Can not rescue own token!\");\n        IERC20(_token).transfer(owner(), IERC20(_token).balanceOf(address(this)));\n    }\n\n    function distributeAirdrop(address[] calldata recipients, uint[] calldata amounts) external onlyOwner {\n        require(recipients.length == amounts.length, \"Error in arrays!\");\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _transfer(_msgSender(), recipients[i], amounts[i] * 10**_decimals);\n        }\n    }\n \n    receive() external payable {}\n}"
30     }
31   },
32   "settings": {
33     "optimizer": {
34       "enabled": false,
35       "runs": 200
36     },
37     "outputSelection": {
38       "*": {
39         "*": [
40           "evm.bytecode",
41           "evm.deployedBytecode",
42           "devdoc",
43           "userdoc",
44           "metadata",
45           "abi"
46         ]
47       }
48     },
49     "libraries": {}
50   }
51 }}