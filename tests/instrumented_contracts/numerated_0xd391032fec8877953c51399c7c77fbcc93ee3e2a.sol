1 {{
2   "language": "Solidity",
3   "sources": {
4     "@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Core creator interface\n */\ninterface ICreatorCore is IERC165 {\n\n    event ExtensionRegistered(address indexed extension, address indexed sender);\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\n    event ApproveTransferUpdated(address extension);\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\n\n    /**\n     * @dev gets address of all extensions\n     */\n    function getExtensions() external view returns (address[] memory);\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * Returns True if removed, False if already removed.\n     */\n    function unregisterExtension(address extension) external;\n\n    /**\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\n     * This function will destroy all ability to reference the metadata of any tokens created\n     * by the specified extension. It will also unregister the extension if needed.\n     * Returns True if removed, False if already removed.\n     */\n    function blacklistExtension(address extension) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     */\n    function setBaseTokenURIExtension(string calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\n\n    /**\n     * @dev set the common prefix of an extension.  Can only be called by extension.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURI(string calldata uri) external;\n\n    /**\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefix(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\n\n    /**\n     * @dev set a permissions contract for an extension.  Used to control minting.\n     */\n    function setMintPermissions(address extension, address permissions) external;\n\n    /**\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\n     * from the extension before transferring\n     */\n    function setApproveTransferExtension(bool enabled) external;\n\n    /**\n     * @dev get the extension of a given token\n     */\n    function tokenExtension(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Set default royalties\n     */\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of a token\n     */\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of an extension\n     */\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    \n    // Royalty support for various other standards\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n\n    /**\n     * @dev Set the default approve transfer contract location.\n     */\n    function setApproveTransfer(address extension) external; \n\n    /**\n     * @dev Get the default approve transfer contract location.\n     */\n    function getApproveTransfer() external view returns (address);\n}\n"
6     },
7     "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./ICreatorCore.sol\";\n\n/**\n * @dev Core ERC721 creator interface\n */\ninterface IERC721CreatorCore is ICreatorCore {\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to, uint80 data) external returns (uint256);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenIds minted\n     */\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtensionBatch(address to, uint80[] calldata data) external returns (uint256[] memory);\n\n    /**\n     * @dev burn a token. Can only be called by token owner or approved address.\n     * On burn, calls back to the registered extension's onBurn method\n     */\n    function burn(uint256 tokenId) external;\n\n    /**\n     * @dev get token data\n     */\n    function tokenData(uint256 tokenId) external view returns (uint80);\n\n}"
9     },
10     "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Implement this if you want your extension to have overloadable URI's\n */\ninterface ICreatorExtensionTokenURI is IERC165 {\n\n    /**\n     * Get the uri for a given creator/tokenId\n     */\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\n}\n"
12     },
13     "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IAdminControl.sol\";\n\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Track registered admins\n    EnumerableSet.AddressSet private _admins;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdminControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Only allows approved admins to call the specified function\n     */\n    modifier adminRequired() {\n        require(owner() == msg.sender || _admins.contains(msg.sender), \"AdminControl: Must be owner or admin\");\n        _;\n    }   \n\n    /**\n     * @dev See {IAdminControl-getAdmins}.\n     */\n    function getAdmins() external view override returns (address[] memory admins) {\n        admins = new address[](_admins.length());\n        for (uint i = 0; i < _admins.length(); i++) {\n            admins[i] = _admins.at(i);\n        }\n        return admins;\n    }\n\n    /**\n     * @dev See {IAdminControl-approveAdmin}.\n     */\n    function approveAdmin(address admin) external override onlyOwner {\n        if (!_admins.contains(admin)) {\n            emit AdminApproved(admin, msg.sender);\n            _admins.add(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-revokeAdmin}.\n     */\n    function revokeAdmin(address admin) external override onlyOwner {\n        if (_admins.contains(admin)) {\n            emit AdminRevoked(admin, msg.sender);\n            _admins.remove(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-isAdmin}.\n     */\n    function isAdmin(address admin) public override view returns (bool) {\n        return (owner() == admin || _admins.contains(admin));\n    }\n\n}"
15     },
16     "@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for admin control\n */\ninterface IAdminControl is IERC165 {\n\n    event AdminApproved(address indexed account, address indexed sender);\n    event AdminRevoked(address indexed account, address indexed sender);\n\n    /**\n     * @dev gets address of all admins\n     */\n    function getAdmins() external view returns (address[] memory);\n\n    /**\n     * @dev add an admin.  Can only be called by contract owner.\n     */\n    function approveAdmin(address admin) external;\n\n    /**\n     * @dev remove an admin.  Can only be called by contract owner.\n     */\n    function revokeAdmin(address admin) external;\n\n    /**\n     * @dev checks whether or not given address is an admin\n     * Returns True if they are\n     */\n    function isAdmin(address admin) external view returns (bool);\n\n}"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
42     },
43     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
48     },
49     "@openzeppelin/contracts/utils/Strings.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
54     },
55     "contracts/libraries/IERC721CreatorCoreVersion.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC721CreatorCoreVersion {\n    function VERSION() external view returns(uint256);\n}\n"
57     },
58     "contracts/libraries/manifold-membership/IManifoldMembership.sol": {
59       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\n/**\n * Manifold Membership interface\n */\ninterface IManifoldMembership {\n   function isActiveMember(address sender) external view returns (bool);\n}"
60     },
61     "contracts/manifold/burnredeem/BurnRedeemCore.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n//                                                                                 //\n//                                     .%(#.                                       //\n//                                      #(((#%,                                    //\n//                                      (#(((((#%*                                 //\n//                                      /#((((((((##*                              //\n//                                      (#((((((((((##%.                           //\n//                                     ,##(/*/(////((((#%*                         //\n//                                   .###(//****/////(((##%,                       //\n//                  (,          ,%#((((((///******/////((##%(                      //\n//                *((,         ,##(///////*********////((###%*                     //\n//              /((((         ,##(//////************/(((((###%                     //\n//             /((((         ,##((////***************/((((###%                     //\n//             (((          .###((///*****************((((####                     //\n//             .            (##((//*******************((((##%*                     //\n//               (#.       .###((/********************((((##%.      %.             //\n//             ,%(#.       .###(/********,,,,,,,*****/(((###%#     ((%,            //\n//            /%#/(/       /###(//****,,,,,,,,,,,****/((((((##%%%%#((#%.           //\n//           /##(//(#.    ,###((/****,,,,,,,,,,,,,***/((/(((((((((#####%           //\n//          *%##(/////((###((((/***,,,,,,,,,,,,,,,***//((((((((((####%%%/          //\n//          ####(((//////(//////**,,,,,,.....,,,,,,****/(((((//((####%%%%          //\n//         .####(((/((((((/////**,,,,,.......,,,,,,,,*****/////(#####%%%%          //\n//         .#%###((////(((//***,,,,,,..........,,,,,,,,*****//((#####%%%%          //\n//          /%%%###/////*****,,,,,,,..............,,,,,,,****/(((####%%%%          //\n//           /%%###(////****,,,,,,.....        ......,,,,,,**(((####%%%%           //\n//            ,#%###(///****,,,,,....            .....,,,,,***/(/(##%%(            //\n//              (####(//****,,....                 ....,,,,,***/(####              //\n//                (###(/***,,,...                    ...,,,,***(##/                //\n//             #.   (#((/**,,,,..                    ...,,,,*((#,                  //\n//               ,#(##(((//,,,,..                   ...,,,*/(((#((/                //\n//                  *#(((///*,,....                ....,*//((((                    //\n//                      *(///***,....            ...,***//,                        //\n//                           ,//***,...       ..,,*,                               //\n//                                                                                 //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n\nimport \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\";\nimport \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\";\nimport \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"../../libraries/manifold-membership/IManifoldMembership.sol\";\nimport \"./BurnRedeemLib.sol\";\nimport \"./IBurnRedeemCore.sol\";\nimport \"./Interfaces.sol\";\n\n/**\n * @title Burn Redeem Core\n * @author manifold.xyz\n * @notice Core logic for Burn Redeem shared extensions.\n */\nabstract contract BurnRedeemCore is ERC165, AdminControl, ReentrancyGuard, IBurnRedeemCore, ICreatorExtensionTokenURI {\n    using Strings for uint256;\n\n    uint256 public constant BURN_FEE = 690000000000000;\n    uint256 public constant MULTI_BURN_FEE = 990000000000000;\n\n    string internal constant ARWEAVE_PREFIX = \"https://arweave.net/\";\n    string internal constant IPFS_PREFIX = \"ipfs://\";\n\n    uint256 internal constant MAX_UINT_16 = 0xffff;\n    uint256 internal constant MAX_UINT_24 = 0xffffff;\n    uint256 internal constant MAX_UINT_32 = 0xffffffff;\n    uint256 internal constant MAX_UINT_56 = 0xffffffffffffff;\n    uint256 internal constant MAX_UINT_256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    // { creatorContractAddress => { instanceId => BurnRedeem } }\n    mapping(address => mapping(uint256 => BurnRedeem)) internal _burnRedeems;\n\n    address public manifoldMembershipContract;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AdminControl) returns (bool) {\n        return interfaceId == type(IBurnRedeemCore).interfaceId ||\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice This extension is shared, not single-creator. So we must ensure\n     * that a burn redeems's initializer is an admin on the creator contract\n     * @param creatorContractAddress    the address of the creator contract to check the admin against\n     */\n    modifier creatorAdminRequired(address creatorContractAddress) {\n        require(IAdminControl(creatorContractAddress).isAdmin(msg.sender), \"Wallet is not an admin\");\n        _;\n    }\n\n    /**\n     * Initialiazes a burn redeem with base parameters\n     */\n    function _initialize(\n        address creatorContractAddress,\n        uint8 creatorContractVersion,\n        uint256 instanceId,\n        BurnRedeemParameters calldata burnRedeemParameters\n    ) internal {\n        BurnRedeemLib.initialize(creatorContractAddress, creatorContractVersion, instanceId, _burnRedeems[creatorContractAddress][instanceId], burnRedeemParameters);\n    }\n\n    /**\n     * Updates a burn redeem with base parameters\n     */\n    function _update(\n        address creatorContractAddress,\n        uint256 instanceId,\n        BurnRedeemParameters calldata burnRedeemParameters\n    ) internal {\n        BurnRedeemLib.update(creatorContractAddress, instanceId, _getBurnRedeem(creatorContractAddress, instanceId), burnRedeemParameters);\n    }\n\n    /**\n     * See {IBurnRedeemCore-getBurnRedeem}.\n     */\n    function getBurnRedeem(address creatorContractAddress, uint256 instanceId) external override view returns(BurnRedeem memory) {\n        return _getBurnRedeem(creatorContractAddress, instanceId);\n    }\n\n    /**\n     * Helper to get burn redeem instance\n     */\n    function _getBurnRedeem(address creatorContractAddress, uint256 instanceId) internal view returns(BurnRedeem storage burnRedeemInstance) {\n        burnRedeemInstance = _burnRedeems[creatorContractAddress][instanceId];\n        require(burnRedeemInstance.storageProtocol != StorageProtocol.INVALID, \"Burn redeem not initialized\");\n    }\n\n    /**\n     * Helper to get active burn redeem instance\n     */\n    function _getActiveBurnRedeem(address creatorContractAddress, uint256 instanceId) private view returns(BurnRedeem storage burnRedeemInstance) {\n        burnRedeemInstance = _burnRedeems[creatorContractAddress][instanceId];\n        require(burnRedeemInstance.storageProtocol != StorageProtocol.INVALID, \"Burn redeem not initialized\");\n        require(\n            burnRedeemInstance.startDate <= block.timestamp && \n            (block.timestamp < burnRedeemInstance.endDate || burnRedeemInstance.endDate == 0),\n            \"Burn redeem not active\"\n        );\n    }\n\n    /**\n     * See {IBurnRedeemCore-burnRedeem}.\n     */\n    function burnRedeem(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens) external payable override nonReentrant {\n        uint256 payableCost = _burnRedeem(msg.value, creatorContractAddress, instanceId, burnRedeemCount, burnTokens, _isActiveMember(msg.sender), true);\n        if (msg.value > payableCost) {\n            _forwardValue(payable(msg.sender), msg.value - payableCost);\n        }\n    }\n\n    /**\n     * (Batch overload) see {IBurnRedeemCore-burnRedeem}.\n     */\n    function burnRedeem(address[] calldata creatorContractAddresses, uint256[] calldata instanceIds, uint32[] calldata burnRedeemCounts, BurnToken[][] calldata burnTokens) external payable override nonReentrant {\n        require(\n            creatorContractAddresses.length == instanceIds.length &&\n            creatorContractAddresses.length == burnRedeemCounts.length &&\n            creatorContractAddresses.length == burnTokens.length,\n            \"Invalid calldata\"\n        );\n\n        bool isActiveMember = _isActiveMember(msg.sender);\n        uint256 msgValueRemaining = msg.value;\n        for (uint256 i; i < creatorContractAddresses.length;) {\n            msgValueRemaining -= _burnRedeem(msgValueRemaining, creatorContractAddresses[i], instanceIds[i], burnRedeemCounts[i], burnTokens[i], isActiveMember, false);\n            unchecked { ++i; }\n        }\n\n        if (msgValueRemaining != 0) {\n            _forwardValue(payable(msg.sender), msgValueRemaining);\n        }\n    }\n\n    /**\n     * See {IBurnRedeemCore-airdrop}.\n     */\n    function airdrop(address creatorContractAddress, uint256 instanceId, address[] calldata recipients, uint32[] calldata amounts) external override creatorAdminRequired(creatorContractAddress) {\n        require(recipients.length == amounts.length, \"Invalid calldata\");\n        BurnRedeem storage burnRedeemInstance = _getBurnRedeem(creatorContractAddress, instanceId);\n\n        uint256 totalAmount;\n        for (uint256 i; i < amounts.length;) {\n            totalAmount += amounts[i] * burnRedeemInstance.redeemAmount;\n            unchecked{ ++i; }\n        }\n        require(\n            totalAmount + burnRedeemInstance.redeemedCount <= MAX_UINT_32,\n            \"Invalid amount\"\n        );\n\n        // Airdrop the tokens\n        for (uint256 i; i < recipients.length;) {\n            _redeem(creatorContractAddress, instanceId, burnRedeemInstance, recipients[i], amounts[i]);\n            unchecked{ ++i; }\n        }\n\n        BurnRedeemLib.syncTotalSupply(burnRedeemInstance);\n    }\n\n    function _burnRedeem(uint256 msgValue, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens, bool isActiveMember, bool revertNoneRemaining) private returns (uint256) {\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\n\n        // Get the amount that can be burned\n        burnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount);\n        if (burnRedeemCount == 0) {\n            if (revertNoneRemaining) revert(\"No tokens available\");\n            return 0;\n        }\n\n        uint256 payableCost = burnRedeemInstance.cost;\n        uint256 cost = burnRedeemInstance.cost;\n        if (!isActiveMember) {\n            payableCost += _getManifoldFee(burnTokens.length);\n        }\n        if (burnRedeemCount > 1) {\n            payableCost *= burnRedeemCount;\n            cost *= burnRedeemCount;\n        }\n        require(msgValue >= payableCost, \"Invalid amount\");\n        if (cost > 0) {\n            _forwardValue(burnRedeemInstance.paymentReceiver, cost);\n        }\n\n        // Do burn redeem\n        _burnTokens(burnRedeemInstance, burnTokens, burnRedeemCount, msg.sender);\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, msg.sender, burnRedeemCount);\n\n        return payableCost;\n    }\n\n    /**\n     * @dev See {IBurnRedeemCore-recoverERC721}.\n     */\n    function recoverERC721(address tokenAddress, uint256 tokenId, address destination) external override adminRequired {\n        IERC721(tokenAddress).transferFrom(address(this), destination, tokenId);\n    }\n\n    /**\n     * @dev See {IBurnRedeemCore-withdraw}.\n     */\n    function withdraw(address payable recipient, uint256 amount) external override adminRequired {\n        (bool sent, ) = recipient.call{value: amount}(\"\");\n        require(sent, \"Failed to transfer to recipient\");\n    }\n\n    /**\n     * @dev See {IBurnRedeemCore-setManifoldMembership}.\n     */\n    function setMembershipAddress(address addr) external override adminRequired {\n        manifoldMembershipContract = addr;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(\n        address,\n        address from,\n        uint256 id,\n        bytes calldata data\n    ) external override nonReentrant returns(bytes4) {\n        _onERC721Received(from, id, data);\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override nonReentrant returns(bytes4) {\n        // Check calldata is valid\n        require(data.length % 32 == 0, \"Invalid data\");\n\n        address creatorContractAddress;\n        uint256 instanceId;\n        uint32 burnRedeemCount;\n        uint256 burnItemIndex;\n        bytes32[] memory merkleProof;\n        (creatorContractAddress, instanceId, burnRedeemCount, burnItemIndex, merkleProof) = abi.decode(data, (address, uint256, uint32, uint256, bytes32[]));\n\n        // Do burn redeem\n        _onERC1155Received(from, id, value, creatorContractAddress, instanceId, burnRedeemCount, burnItemIndex, merkleProof);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override nonReentrant returns(bytes4) {\n        // Check calldata is valid\n        require(data.length % 32 == 0, \"Invalid data\");\n\n        address creatorContractAddress;\n        uint256 instanceId;\n        uint32 burnRedeemCount;\n        BurnToken[] memory burnTokens;\n        (creatorContractAddress, instanceId, burnRedeemCount, burnTokens) = abi.decode(data, (address, uint256, uint32, BurnToken[]));\n\n        // Do burn redeem\n        _onERC1155BatchReceived(from, ids, values, creatorContractAddress, instanceId, burnRedeemCount, burnTokens);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @notice ERC721 token transfer callback\n     * @param from      the person sending the tokens\n     * @param id        the token id of the burn token\n     * @param data      bytes indicating the target burnRedeem and, optionally, a merkle proof that the token is valid\n     */\n    function _onERC721Received(\n        address from,\n        uint256 id,\n        bytes calldata data\n    ) private {\n        // Check calldata is valid\n        require(data.length % 32 == 0, \"Invalid data\");\n\n        address creatorContractAddress;\n        uint256 instanceId;\n        uint256 burnItemIndex;\n        bytes32[] memory merkleProof;\n        (creatorContractAddress, instanceId, burnItemIndex, merkleProof) = abi.decode(data, (address, uint256, uint256, bytes32[]));\n\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\n\n        // A single ERC721 can only be sent in directly for a burn if:\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\n        // 2. The burn only requires one NFT (one burnSet element and one count)\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\n        require(\n            burnRedeemInstance.cost == 0 &&\n            burnRedeemInstance.burnSet.length == 1 &&\n            burnRedeemInstance.burnSet[0].requiredCount == 1 &&\n            _isActiveMember(from),\n            \"Invalid input\"\n        );\n\n        uint256 burnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, 1);\n        require(burnRedeemCount != 0, \"No tokens available\");\n\n        // Check that the burn token is valid\n        BurnItem memory burnItem = burnRedeemInstance.burnSet[0].items[burnItemIndex];\n\n        // Can only take in one burn item\n        require(burnItem.tokenSpec == TokenSpec.ERC721, \"Invalid input\");\n        BurnRedeemLib.validateBurnItem(burnItem, msg.sender, id, merkleProof);\n\n        // Do burn and redeem\n        _burn(burnItem, address(this), msg.sender, id, 1);\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, 1);\n    }\n\n    /**\n     * Execute onERC1155Received burn/redeem\n     */\n    function _onERC1155Received(address from, uint256 tokenId, uint256 value, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, uint256 burnItemIndex, bytes32[] memory merkleProof) private {\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\n\n        // A single 1155 can only be sent in directly for a burn if:\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\n        // 2. The burn only requires one NFT (one burn set element and one required count in the set)\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\n        require(\n            burnRedeemInstance.cost == 0 &&\n            burnRedeemInstance.burnSet.length == 1 &&\n            burnRedeemInstance.burnSet[0].requiredCount == 1 &&\n            _isActiveMember(from),\n            \"Invalid input\"\n        );\n\n        uint32 availableBurnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount);\n        require(availableBurnRedeemCount != 0, \"No tokens available\");\n\n        // Check that the burn token is valid\n        BurnItem memory burnItem = burnRedeemInstance.burnSet[0].items[burnItemIndex];\n        require(value == burnItem.amount * burnRedeemCount, \"Invalid input\");\n        BurnRedeemLib.validateBurnItem(burnItem, msg.sender, tokenId, merkleProof);\n\n        _burn(burnItem, address(this), msg.sender, tokenId, availableBurnRedeemCount);\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, availableBurnRedeemCount);\n\n        // Return excess amount\n        if (availableBurnRedeemCount != burnRedeemCount) {\n            IERC1155(msg.sender).safeTransferFrom(address(this), from, tokenId, (burnRedeemCount - availableBurnRedeemCount) * burnItem.amount, \"\");\n        }\n    }\n\n    /**\n     * Execute onERC1155BatchReceived burn/redeem\n     */\n    function _onERC1155BatchReceived(address from, uint256[] memory tokenIds, uint256[] memory values, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] memory burnTokens) private {\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\n\n        // A single 1155 can only be sent in directly for a burn if:\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\n        // 2. We have the right data length\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\n        require(\n            burnRedeemInstance.cost == 0 &&\n            burnTokens.length == tokenIds.length &&\n            _isActiveMember(from),\n            \"Invalid input\"\n        );\n        uint32 availableBurnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount);\n        require(availableBurnRedeemCount != 0, \"No tokens available\");\n\n        // Verify the values match what is needed\n        uint256[] memory returnValues = new uint256[](tokenIds.length);\n        for (uint256 i; i < burnTokens.length;) {\n            BurnToken memory burnToken = burnTokens[i];\n            BurnItem memory burnItem = burnRedeemInstance.burnSet[burnToken.groupIndex].items[burnToken.itemIndex];\n            require(burnToken.id == tokenIds[i], \"Invalid token\");\n            require(burnItem.amount * burnRedeemCount == values[i], \"Invalid amount\");\n            if (availableBurnRedeemCount != burnRedeemCount) {\n                returnValues[i] = values[i] - burnItem.amount * availableBurnRedeemCount;\n            }\n            unchecked { ++i; }\n        }\n\n        // Do burn redeem\n        _burnTokens(burnRedeemInstance, burnTokens, availableBurnRedeemCount, address(this));\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, availableBurnRedeemCount);\n\n        // Return excess amount\n        if (availableBurnRedeemCount != burnRedeemCount) {\n            IERC1155(msg.sender).safeBatchTransferFrom(address(this), from, tokenIds, returnValues, \"\");\n        }\n    }\n\n    /**\n     * Send funds to receiver\n     */\n    function _forwardValue(address payable receiver, uint256 amount) private {\n        (bool sent, ) = receiver.call{value: amount}(\"\");\n        require(sent, \"Failed to transfer to recipient\");\n    }\n\n    /**\n     * Burn all listed tokens and check that the burn set is satisfied\n     */\n    function _burnTokens(BurnRedeem storage burnRedeemInstance, BurnToken[] memory burnTokens, uint256 burnRedeemCount, address owner) private {\n        // Check that each group in the burn set is satisfied\n        uint256[] memory groupCounts = new uint256[](burnRedeemInstance.burnSet.length);\n\n        for (uint256 i; i < burnTokens.length;) {\n            BurnToken memory burnToken = burnTokens[i];\n            BurnItem memory burnItem = burnRedeemInstance.burnSet[burnToken.groupIndex].items[burnToken.itemIndex];\n\n            BurnRedeemLib.validateBurnItem(burnItem, burnToken.contractAddress, burnToken.id, burnToken.merkleProof);\n\n            _burn(burnItem, owner, burnToken.contractAddress, burnToken.id, burnRedeemCount);\n            groupCounts[burnToken.groupIndex] += burnRedeemCount;\n\n            unchecked { ++i; }\n        }\n\n        for (uint256 i; i < groupCounts.length;) {\n            require(groupCounts[i] == burnRedeemInstance.burnSet[i].requiredCount * burnRedeemCount, \"Invalid number of tokens\");\n            unchecked { ++i; }\n        }\n    }\n\n\n    /**\n     * Helper to get the Manifold fee for the sender\n     */\n    function _getManifoldFee(uint256 burnTokenCount) private pure returns(uint256 fee) {\n        fee = burnTokenCount <= 1 ? BURN_FEE : MULTI_BURN_FEE;\n    }\n\n    /**\n     * Helper to check if the sender holds an active Manifold membership\n     */\n    function _isActiveMember(address sender) private view returns(bool) {\n        return manifoldMembershipContract != address(0) &&\n            IManifoldMembership(manifoldMembershipContract).isActiveMember(sender);\n    }\n\n    /**\n     * Helper to get the number of burn redeems the person can accomplish\n     */\n    function _getAvailableBurnRedeemCount(uint32 totalSupply, uint32 redeemedCount, uint32 redeemAmount, uint32 desiredCount) internal pure returns(uint32 burnRedeemCount) {\n        if (totalSupply == 0) {\n            burnRedeemCount = desiredCount;\n        } else {\n            uint32 remainingCount = (totalSupply - redeemedCount) / redeemAmount;\n            if (remainingCount > desiredCount) {\n                burnRedeemCount = desiredCount;\n            } else {\n                burnRedeemCount = remainingCount;\n            }\n        }\n    }\n\n    /** \n     * Abstract helper to mint multiple redeem tokens. To be implemented by inheriting contracts.\n     */\n    function _redeem(address creatorContractAddress, uint256 instanceId, BurnRedeem storage burnRedeemInstance, address to, uint32 count) internal virtual;\n\n    /**\n     * Helper to burn token\n     */\n    function _burn(BurnItem memory burnItem, address from, address contractAddress, uint256 tokenId, uint256 burnRedeemCount) private {\n        if (burnItem.tokenSpec == TokenSpec.ERC1155) {\n            uint256 amount = burnItem.amount * burnRedeemCount;\n\n            if (burnItem.burnSpec == BurnSpec.NONE) {\n                // Send to 0xdEaD to burn if contract doesn't have burn function\n                IERC1155(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, amount, \"\");\n\n            } else if (burnItem.burnSpec == BurnSpec.MANIFOLD) {\n                // Burn using the creator core's burn function\n                uint256[] memory tokenIds = new uint256[](1);\n                tokenIds[0] = tokenId;\n                uint256[] memory amounts = new uint256[](1);\n                amounts[0] = amount;\n                Manifold1155(contractAddress).burn(from, tokenIds, amounts);\n\n            } else if (burnItem.burnSpec == BurnSpec.OPENZEPPELIN) {\n                // Burn using OpenZeppelin's burn function\n                OZBurnable1155(contractAddress).burn(from, tokenId, amount);\n\n            } else {\n                revert(\"Invalid burn spec\");\n            }\n        } else if (burnItem.tokenSpec == TokenSpec.ERC721) {\n            require(burnRedeemCount == 1, \"Invalid burn count\");\n            if (burnItem.burnSpec == BurnSpec.NONE) {\n                // Send to 0xdEaD to burn if contract doesn't have burn function\n                IERC721(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, \"\");\n\n            } else if (burnItem.burnSpec == BurnSpec.MANIFOLD || burnItem.burnSpec == BurnSpec.OPENZEPPELIN) {\n                if (from != address(this)) {\n                    // 721 `burn` functions do not have a `from` parameter, so we must verify the owner\n                    require(IERC721(contractAddress).ownerOf(tokenId) == from, \"Sender is not owner\");\n                }\n                // Burn using the contract's burn function\n                Burnable721(contractAddress).burn(tokenId);\n\n            } else {\n                revert(\"Invalid burn spec\");\n            }\n        } else {\n            revert(\"Invalid token spec\");\n        }\n    }\n}\n"
63     },
64     "contracts/manifold/burnredeem/BurnRedeemLib.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n//                                                                                 //\n//                                     .%(#.                                       //\n//                                      #(((#%,                                    //\n//                                      (#(((((#%*                                 //\n//                                      /#((((((((##*                              //\n//                                      (#((((((((((##%.                           //\n//                                     ,##(/*/(////((((#%*                         //\n//                                   .###(//****/////(((##%,                       //\n//                  (,          ,%#((((((///******/////((##%(                      //\n//                *((,         ,##(///////*********////((###%*                     //\n//              /((((         ,##(//////************/(((((###%                     //\n//             /((((         ,##((////***************/((((###%                     //\n//             (((          .###((///*****************((((####                     //\n//             .            (##((//*******************((((##%*                     //\n//               (#.       .###((/********************((((##%.      %.             //\n//             ,%(#.       .###(/********,,,,,,,*****/(((###%#     ((%,            //\n//            /%#/(/       /###(//****,,,,,,,,,,,****/((((((##%%%%#((#%.           //\n//           /##(//(#.    ,###((/****,,,,,,,,,,,,,***/((/(((((((((#####%           //\n//          *%##(/////((###((((/***,,,,,,,,,,,,,,,***//((((((((((####%%%/          //\n//          ####(((//////(//////**,,,,,,.....,,,,,,****/(((((//((####%%%%          //\n//         .####(((/((((((/////**,,,,,.......,,,,,,,,*****/////(#####%%%%          //\n//         .#%###((////(((//***,,,,,,..........,,,,,,,,*****//((#####%%%%          //\n//          /%%%###/////*****,,,,,,,..............,,,,,,,****/(((####%%%%          //\n//           /%%###(////****,,,,,,.....        ......,,,,,,**(((####%%%%           //\n//            ,#%###(///****,,,,,....            .....,,,,,***/(/(##%%(            //\n//              (####(//****,,....                 ....,,,,,***/(####              //\n//                (###(/***,,,...                    ...,,,,***(##/                //\n//             #.   (#((/**,,,,..                    ...,,,,*((#,                  //\n//               ,#(##(((//,,,,..                   ...,,,*/(((#((/                //\n//                  *#(((///*,,....                ....,*//((((                    //\n//                      *(///***,....            ...,***//,                        //\n//                           ,//***,...       ..,,*,                               //\n//                                                                                 //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./IBurnRedeemCore.sol\";\n\n/**\n * @title Burn Redeem Lib\n * @author manifold.xyz\n * @notice Library for Burn Redeem shared extensions.\n */\nlibrary BurnRedeemLib {\n\n    event BurnRedeemInitialized(address indexed creatorContract, uint256 indexed instanceId, address initializer);\n    event BurnRedeemUpdated(address indexed creatorContract, uint256 indexed instanceId);\n    event BurnRedeemMint(address indexed creatorContract, uint256 indexed instanceId, uint256 indexed tokenId, uint32 redeemedCount);\n\n    /**\n     * Initialiazes a burn redeem with base parameters\n     */\n    function initialize(\n        address creatorContractAddress,\n        uint8 creatorContractVersion,\n        uint256 instanceId,\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\n    ) public {\n        // Sanity checks\n        require(burnRedeemInstance.storageProtocol == IBurnRedeemCore.StorageProtocol.INVALID, \"Burn redeem already initialized\");\n        _validateParameters(burnRedeemParameters);\n\n        // Create the burn redeem\n        burnRedeemInstance.contractVersion = creatorContractVersion;\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\n\n        emit BurnRedeemInitialized(creatorContractAddress, instanceId, msg.sender);\n    }\n\n    /**\n     * Updates a burn redeem with base parameters\n     */\n    function update(\n        address creatorContractAddress,\n        uint256 instanceId,\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\n    ) public {\n        // Sanity checks\n        require(burnRedeemInstance.storageProtocol != IBurnRedeemCore.StorageProtocol.INVALID, \"Burn redeem not initialized\");\n        _validateParameters(burnRedeemParameters);\n        // The current redeemedCount must be divisible by redeemAmount\n        require(burnRedeemInstance.redeemedCount % burnRedeemParameters.redeemAmount == 0, \"Invalid amount\");\n\n        // Overwrite the existing burnRedeem\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\n        syncTotalSupply(burnRedeemInstance);\n        emit BurnRedeemUpdated(creatorContractAddress, instanceId);\n    }\n\n    /**\n     * Helper to update total supply if redeemedCount exceeds totalSupply after airdrop or instance update.\n     */\n    function syncTotalSupply(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance) public {\n        if (\n            burnRedeemInstance.totalSupply != 0 &&\n            burnRedeemInstance.redeemedCount > burnRedeemInstance.totalSupply\n        ) {\n            burnRedeemInstance.totalSupply = burnRedeemInstance.redeemedCount;\n        }\n    }\n\n    /*\n     * Helper to validate burn item\n     */\n    function validateBurnItem(IBurnRedeemCore.BurnItem memory burnItem, address contractAddress, uint256 tokenId, bytes32[] memory merkleProof) public pure {\n        require(contractAddress == burnItem.contractAddress, \"Invalid burn token\");\n        if (burnItem.validationType == IBurnRedeemCore.ValidationType.CONTRACT) {\n            return;\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.RANGE) {\n            require(tokenId >= burnItem.minTokenId && tokenId <= burnItem.maxTokenId, \"Invalid token ID\");\n            return;\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.MERKLE_TREE) {\n            bytes32 leaf = keccak256(abi.encodePacked(tokenId));\n            require(MerkleProof.verify(merkleProof, burnItem.merkleRoot, leaf), \"Invalid merkle proof\");\n            return;\n        }\n        revert(\"Invalid burn item\");\n    }\n\n        /**\n     * Helper to validate the parameters for a burn redeem\n     */\n    function _validateParameters(IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) internal pure {\n        require(burnRedeemParameters.storageProtocol != IBurnRedeemCore.StorageProtocol.INVALID, \"Storage protocol invalid\");\n        require(burnRedeemParameters.paymentReceiver != address(0), \"Payment receiver required\");\n        require(burnRedeemParameters.endDate == 0 || burnRedeemParameters.startDate < burnRedeemParameters.endDate, \"startDate after endDate\");\n        require(burnRedeemParameters.totalSupply % burnRedeemParameters.redeemAmount == 0, \"Remainder left from totalSupply\");\n    }\n\n    /**\n     * Helper to set top level properties for a burn redeem\n     */\n    function _setParameters(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) private {\n        burnRedeemInstance.startDate = burnRedeemParameters.startDate;\n        burnRedeemInstance.endDate = burnRedeemParameters.endDate;\n        burnRedeemInstance.redeemAmount = burnRedeemParameters.redeemAmount;\n        burnRedeemInstance.totalSupply = burnRedeemParameters.totalSupply;\n        burnRedeemInstance.storageProtocol = burnRedeemParameters.storageProtocol;\n        burnRedeemInstance.location = burnRedeemParameters.location;\n        burnRedeemInstance.cost = burnRedeemParameters.cost;\n        burnRedeemInstance.paymentReceiver = burnRedeemParameters.paymentReceiver;\n    }\n\n    /**\n     * Helper to set the burn groups for a burn redeem\n     */\n    function _setBurnGroups(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnGroup[] calldata burnGroups) private {\n        delete burnRedeemInstance.burnSet;\n        for (uint256 i; i < burnGroups.length;) {\n            burnRedeemInstance.burnSet.push();\n            IBurnRedeemCore.BurnGroup storage burnGroup = burnRedeemInstance.burnSet[i];\n            require(\n                burnGroups[i].requiredCount > 0 &&\n                burnGroups[i].requiredCount <= burnGroups[i].items.length,\n                \"Invalid input\"\n            );\n            burnGroup.requiredCount = burnGroups[i].requiredCount;\n            for (uint256 j; j < burnGroups[i].items.length;) {\n                IBurnRedeemCore.BurnItem memory burnItem = burnGroups[i].items[j];\n                require(\n                    (\n                        (burnItem.tokenSpec == IBurnRedeemCore.TokenSpec.ERC1155 && burnItem.amount > 0) ||\n                        (burnItem.tokenSpec == IBurnRedeemCore.TokenSpec.ERC721 && burnItem.amount == 0)\n                    ) &&\n                    burnItem.validationType != IBurnRedeemCore.ValidationType.INVALID,\n                    \"Invalid input\");\n                burnGroup.items.push(burnGroups[i].items[j]);\n                unchecked { ++j; }\n            }\n            unchecked { ++i; }\n        }\n    }\n\n}"
66     },
67     "contracts/manifold/burnredeem/ERC721BurnRedeem.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\";\n\nimport \"./BurnRedeemCore.sol\";\nimport \"./BurnRedeemLib.sol\";\nimport \"./IERC721BurnRedeem.sol\";\nimport \"../../libraries/IERC721CreatorCoreVersion.sol\";\n\ncontract ERC721BurnRedeem is BurnRedeemCore, IERC721BurnRedeem {\n    using Strings for uint256;\n\n    // NOTE: Only used for creatorContract versions < 3\n    // { contractAddress => { tokenId => { RedeemToken } }\n    mapping(address => mapping(uint256 => RedeemToken)) internal _redeemTokens;\n\n    // { creatorContractAddress => { instanceId =>  bool } }\n    mapping(address => mapping(uint256 => bool)) private _identicalTokenURI;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(BurnRedeemCore, IERC165) returns (bool) {\n        return interfaceId == type(IERC721BurnRedeem).interfaceId || super.supportsInterface(interfaceId);\n    }\n    \n    /**\n     * @dev See {IERC721BurnRedeem-initializeBurnRedeem}.\n     */\n    function initializeBurnRedeem(\n        address creatorContractAddress,\n        uint256 instanceId,\n        BurnRedeemParameters calldata burnRedeemParameters,\n        bool identicalTokenURI\n    ) external creatorAdminRequired(creatorContractAddress) {\n        // Max uint56 for instanceId\n        require(instanceId > 0 && instanceId <= MAX_UINT_56, \"Invalid instanceId\");\n\n        uint8 creatorContractVersion;\n        try IERC721CreatorCoreVersion(creatorContractAddress).VERSION() returns(uint256 version) {\n            require(version <= 255, \"Unsupported contract version\");\n            creatorContractVersion = uint8(version);\n        } catch {}\n        _initialize(creatorContractAddress, creatorContractVersion, instanceId, burnRedeemParameters);\n        _identicalTokenURI[creatorContractAddress][instanceId] = identicalTokenURI;\n    }\n\n    /**\n     * @dev See {IERC721BurnRedeem-updateBurnRedeem}.\n     */\n    function updateBurnRedeem(\n        address creatorContractAddress,\n        uint256 instanceId,\n        BurnRedeemParameters calldata burnRedeemParameters,\n        bool identicalTokenURI\n    ) external creatorAdminRequired(creatorContractAddress) {\n        _update(creatorContractAddress, instanceId, burnRedeemParameters);\n        _identicalTokenURI[creatorContractAddress][instanceId] = identicalTokenURI;\n    }\n\n    /**\n     * See {IERC721BurnRedeem-updateTokenURI}.\n     */\n    function updateTokenURI(\n        address creatorContractAddress,\n        uint256 instanceId,\n        StorageProtocol storageProtocol,\n        string calldata location,\n        bool identicalTokenURI\n    ) external override creatorAdminRequired(creatorContractAddress) {\n        BurnRedeem storage burnRedeemInstance = _getBurnRedeem(creatorContractAddress, instanceId);\n        burnRedeemInstance.storageProtocol = storageProtocol;\n        burnRedeemInstance.location = location;\n        _identicalTokenURI[creatorContractAddress][instanceId] = identicalTokenURI;\n        emit BurnRedeemLib.BurnRedeemUpdated(creatorContractAddress, instanceId);\n    }\n\n    /** \n     * Helper to mint multiple redeem tokens\n     */\n    function _redeem(address creatorContractAddress, uint256 instanceId, BurnRedeem storage burnRedeemInstance, address to, uint32 count) internal override {\n        if (burnRedeemInstance.redeemAmount == 1 && count == 1) {\n            ++burnRedeemInstance.redeemedCount;\n            uint256 newTokenId;\n            if (burnRedeemInstance.contractVersion >= 3) {\n                uint80 tokenData = uint56(instanceId) << 24 | burnRedeemInstance.redeemedCount;\n                newTokenId = IERC721CreatorCore(creatorContractAddress).mintExtension(to, tokenData);\n            } else {\n                newTokenId = IERC721CreatorCore(creatorContractAddress).mintExtension(to);\n                _redeemTokens[creatorContractAddress][newTokenId] = RedeemToken(uint224(instanceId), burnRedeemInstance.redeemedCount);\n            }\n            emit BurnRedeemLib.BurnRedeemMint(creatorContractAddress, instanceId, newTokenId, 1);\n        } else {\n            uint256 totalCount = burnRedeemInstance.redeemAmount * count;\n            require(totalCount <= MAX_UINT_16, \"Invalid input\");\n            uint256 startingCount = burnRedeemInstance.redeemedCount + 1;\n            burnRedeemInstance.redeemedCount += uint32(totalCount);\n            if (burnRedeemInstance.contractVersion >= 3) {\n                uint80[] memory tokenDatas = new uint80[](totalCount);\n                for (uint256 i; i < totalCount;) {\n                    tokenDatas[i] = uint56(instanceId) << 24 | uint24(startingCount+i);\n                    unchecked { ++i; }\n                }\n                uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(to, tokenDatas);\n                for (uint256 i; i < totalCount;) {\n                    emit BurnRedeemLib.BurnRedeemMint(creatorContractAddress, instanceId, newTokenIds[i], 1);\n                    unchecked { i++; }\n                }\n            } else {\n                uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(to, uint16(totalCount));\n                for (uint256 i; i < totalCount;) {\n                    _redeemTokens[creatorContractAddress][newTokenIds[i]] = RedeemToken(uint224(instanceId), uint32(startingCount + i));\n                    emit BurnRedeemLib.BurnRedeemMint(creatorContractAddress, instanceId, newTokenIds[i], 1);\n                    unchecked { i++; }\n                }\n            }\n        }\n    }\n\n    /**\n     * See {ICreatorExtensionTokenURI-tokenURI}.\n     */\n    function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {\n        RedeemToken memory token = _redeemTokens[creatorContractAddress][tokenId];\n        BurnRedeem memory burnRedeem;\n        uint256 mintNumber;\n        uint256 instanceId;\n        if (token.instanceId == 0) {\n            // No claim, try to retrieve from tokenData\n            uint80 tokenData = IERC721CreatorCore(creatorContractAddress).tokenData(tokenId);\n            instanceId = uint56(tokenData >> 24);\n            require(instanceId != 0, \"Token does not exist\");\n            mintNumber = uint24(tokenData & MAX_UINT_24);\n        } else {\n            instanceId = token.instanceId;\n            mintNumber = token.mintNumber;\n        }\n        burnRedeem = _burnRedeems[creatorContractAddress][instanceId];\n\n        string memory prefix = \"\";\n        if (burnRedeem.storageProtocol == StorageProtocol.ARWEAVE) {\n            prefix = ARWEAVE_PREFIX;\n        } else if (burnRedeem.storageProtocol == StorageProtocol.IPFS) {\n            prefix = IPFS_PREFIX;\n        }\n        uri = string(abi.encodePacked(prefix, burnRedeem.location));\n\n        if (!_identicalTokenURI[creatorContractAddress][instanceId]) {\n            uri = string(abi.encodePacked(uri, \"/\", uint256(mintNumber).toString()));\n        }\n    }\n\n    /**\n     * See {IBurnRedeemCore-getBurnRedeemForToken}.\n     */\n    function getBurnRedeemForToken(address creatorContractAddress, uint256 tokenId) external override view returns(uint256 instanceId, BurnRedeem memory burnRedeem) {\n        RedeemToken memory token = _redeemTokens[creatorContractAddress][tokenId];\n        if (token.instanceId == 0) {\n            // No claim, try to retrieve from tokenData\n            uint80 tokenData = IERC721CreatorCore(creatorContractAddress).tokenData(tokenId);\n            instanceId = uint56(tokenData >> 24);\n        } else {\n            instanceId = token.instanceId;\n        }\n        require(instanceId != 0, \"Token does not exist\");\n        burnRedeem = _burnRedeems[creatorContractAddress][instanceId];\n    }\n}\n"
69     },
70     "contracts/manifold/burnredeem/IBurnRedeemCore.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * Burn Redeem Core interface\n */\ninterface IBurnRedeemCore is IERC165, IERC721Receiver, IERC1155Receiver  {\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\n\n    /**\n     * @notice the validation type used for a `BurnItem`\n     * CONTRACT                 any token from a specific contract is valid\n     * RANGE                    token IDs within a range (inclusive) are valid\n     * MERKLE_TREE              various individual token IDs included in a merkle tree are valid\n     */\n    enum ValidationType { INVALID, CONTRACT, RANGE, MERKLE_TREE }\n\n    enum TokenSpec { INVALID, ERC721, ERC1155 }\n    enum BurnSpec { NONE, MANIFOLD, OPENZEPPELIN }\n\n    /**\n     * @notice a `BurnItem` indicates which tokens are eligible to be burned\n     * @param validationType    which type of validation used to check that the burn item is \n     *                          satisfied\n     * @param tokenSpec         whether the token is an ERC721 or ERC1155\n     * @param burnSpec          whether the contract for a token has a `burn` function and, if so,\n     *                          what interface\n     * @param amount            (only for ERC1155 tokens) the amount (value) required to burn\n     * @param minTokenId        (only for RANGE validation) the minimum valid token ID\n     * @param maxTokenId        (only for RANGE validation) the maximum valid token ID\n     * @param merkleRoot        (only for MERKLE_TREE validation) the root of the merkle tree of\n     *                          valid token IDs\n     */\n    struct BurnItem {\n        ValidationType validationType;\n        address contractAddress;\n        TokenSpec tokenSpec;\n        BurnSpec burnSpec;\n        uint72 amount;\n        uint256 minTokenId;\n        uint256 maxTokenId;\n        bytes32 merkleRoot;\n    }\n\n    /**\n     * @notice a `BurnGroup` is a group of valid `BurnItem`s\n     * @param requiredCount     the number of `BurnItem`s (0 < requiredCount <= items.length) that \n     *                          need to be included in a burn\n     * @param items             the list of `BurnItem`s\n     */\n    struct BurnGroup {\n        uint256 requiredCount;\n        BurnItem[] items;\n    }\n\n    /**\n     * @notice parameters for burn redeem intialization/updates\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\n     * @param storageProtocol   the type of storage used for the redeem token URIs\n     * @param redeemAmount      the number of redeem tokens to mint for each burn redeem\n     * @param totalSupply       the maximum number of redeem tokens to mint (0 for unlimited)\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\n     * @param endDate           the end time for the burn redeem (0 for never)\n     * @param cost              the cost for each burn redeem\n     * @param location          used to construct the token URI (Arweave hash, full URI, etc.)\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\n     */\n    struct BurnRedeemParameters {\n        address payable paymentReceiver;\n        StorageProtocol storageProtocol;\n        uint16 redeemAmount;\n        uint32 totalSupply;\n        uint48 startDate;\n        uint48 endDate;\n        uint160 cost;\n        string location;\n        BurnGroup[] burnSet;\n    }\n\n    struct BurnRedeem {\n        address payable paymentReceiver;\n        StorageProtocol storageProtocol;\n        uint32 redeemedCount;\n        uint16 redeemAmount;\n        uint32 totalSupply;\n        uint8 contractVersion;\n        uint48 startDate;\n        uint48 endDate;\n        uint160 cost;\n        string location;\n        BurnGroup[] burnSet;\n    }\n\n    /**\n     * @notice a pointer to a `BurnItem` in a `BurnGroup` used in calls to `burnRedeem`\n     * @param groupIndex        the index of the `BurnGroup` in `BurnRedeem.burnSet`\n     * @param itemIndex         the index of the `BurnItem` in `BurnGroup.items`\n     * @param contractAddress   the address of the contract for the token\n     * @param id                the token ID\n     * @param merkleProof       the merkle proof for the token ID (only for MERKLE_TREE validation)\n     */\n    struct BurnToken {\n        uint48 groupIndex;\n        uint48 itemIndex;\n        address contractAddress;\n        uint256 id;\n        bytes32[] merkleProof;\n    }\n\n    /**\n     * @notice get a burn redeem corresponding to a creator contract and instanceId\n     * @param creatorContractAddress    the address of the creator contract\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @return BurnRedeem               the burn redeem object\n     */\n    function getBurnRedeem(address creatorContractAddress, uint256 instanceId) external view returns(BurnRedeem memory);\n    \n    /**\n     * @notice get a burn redeem corresponding to a creator contract and tokenId\n     * @param creatorContractAddress    the address of the creator contract\n     * @param tokenId                   the token to retrieve the burn redeem for\n     * @return                          the burn redeem instanceId and burn redeem object\n     */\n    function getBurnRedeemForToken(address creatorContractAddress, uint256 tokenId) external view returns(uint256, BurnRedeem memory);\n\n    /**\n     * @notice burn tokens and mint a redeem token\n     * @param creatorContractAddress    the address of the creator contract\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @param burnRedeemCount           the number of burn redeems we want to do\n     * @param burnTokens                the tokens to burn with pointers to the corresponding BurnItem requirement\n     */\n    function burnRedeem(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens) external payable;\n\n    /**\n     * @notice burn tokens and mint redeem tokens multiple times in a single transaction\n     * @param creatorContractAddresses  the addresses of the creator contracts\n     * @param instanceIds               the instanceIds of the burn redeems for the corresponding creator contract\n     * @param burnRedeemCounts          the burn redeem counts for each burn\n     * @param burnTokens                the tokens to burn for each burn redeem with pointers to the corresponding BurnItem requirement\n     */\n    function burnRedeem(address[] calldata creatorContractAddresses, uint256[] calldata instanceIds, uint32[] calldata burnRedeemCounts, BurnToken[][] calldata burnTokens) external payable;\n\n    /**\n     * @notice allow admin to airdrop arbitrary tokens \n     * @param creatorContractAddress    the creator contract to mint tokens for\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\n     * @param recipients                addresses to airdrop to\n     * @param amounts                   number of redeems to perform for each address in recipients\n     */\n    function airdrop(address creatorContractAddress, uint256 instanceId, address[] calldata recipients, uint32[] calldata amounts) external;\n\n    /**\n     * @notice recover a token that was sent to the contract without safeTransferFrom\n     * @param tokenAddress              the address of the token contract\n     * @param tokenId                   the id of the token\n     * @param destination               the address to send the token to\n     */\n    function recoverERC721(address tokenAddress, uint256 tokenId, address destination) external;\n\n    /**\n     * @notice withdraw Manifold fee proceeds from the contract\n     * @param recipient                 recepient of the funds\n     * @param amount                    amount to withdraw in Wei\n     */\n    function withdraw(address payable recipient, uint256 amount) external;\n\n    /**\n     * @notice set the Manifold Membership contract address\n     * @param addr                      the address of the Manifold Membership contract \n     */\n    function setMembershipAddress(address addr) external;\n}\n"
72     },
73     "contracts/manifold/burnredeem/IERC721BurnRedeem.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./IBurnRedeemCore.sol\";\n\ninterface IERC721BurnRedeem is IBurnRedeemCore {\n    struct RedeemToken {\n        uint224 instanceId;\n        uint32 mintNumber;\n    }\n\n    /**\n     * @notice initialize a new burn redeem, emit initialize event\n     * @param creatorContractAddress    the creator contract the burn will mint redeem tokens for\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\n     * @param burnRedeemParameters      the parameters which will affect the minting behavior of the burn redeem\n     * @param identicalTokenURI         whether or not the tokenURI is identical\n     */\n    function initializeBurnRedeem(address creatorContractAddress, uint256 instanceId, BurnRedeemParameters calldata burnRedeemParameters, bool identicalTokenURI) external;\n\n    /**\n     * @notice update an existing burn redeem\n     * @param creatorContractAddress    the creator contract corresponding to the burn redeem\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\n     * @param burnRedeemParameters      the parameters which will affect the minting behavior of the burn redeem\n     * @param identicalTokenURI         whether or not the tokenURI is identical\n     */\n    function updateBurnRedeem(address creatorContractAddress, uint256 instanceId, BurnRedeemParameters calldata burnRedeemParameters, bool identicalTokenURI) external;\n\n    /**\n     * @notice update an existing burn redeem\n     * @param creatorContractAddress    the creator contract corresponding to the burn redeem\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\n     * @param storageProtocol           the storage protocol for the metadata\n     * @param location                  the location of the metadata\n     * @param identicalTokenURI         whether or not the URI's are supposed to be identical\n     */\n    function updateTokenURI(address creatorContractAddress, uint256 instanceId, StorageProtocol storageProtocol, string calldata location, bool identicalTokenURI) external;\n}\n"
75     },
76     "contracts/manifold/burnredeem/Interfaces.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface Burnable721 {\n    function burn(uint256 tokenId) external;\n}\n\ninterface OZBurnable1155 {\n    function burn(address account, uint256 id, uint256 value) external;\n}\n\ninterface Manifold1155 {\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) external;\n}\n"
78     }
79   },
80   "settings": {
81     "optimizer": {
82       "enabled": true,
83       "runs": 150
84     },
85     "outputSelection": {
86       "*": {
87         "*": [
88           "evm.bytecode",
89           "evm.deployedBytecode",
90           "devdoc",
91           "userdoc",
92           "metadata",
93           "abi"
94         ]
95       }
96     },
97     "libraries": {
98       "contracts/manifold/burnredeem/BurnRedeemLib.sol": {
99         "BurnRedeemLib": "0xf56dfc2f506f3fbe85d33fd70653d7bac0907d56"
100       }
101     }
102   }
103 }}