1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/TempuraShop.sol": {
5       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/*\n🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤\n🍤The Tempura Shop 🍤\n🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤🍤\n*/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC20Like {\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n\ninterface IERC721Like {\n    function balanceOf(address owner) external view returns (uint256);\n}\n\ncontract TempuraShop is Ownable {\n    ///@notice Main listing struct\n    ///@param amountAvailable Total amount available for listing\n    ///@param amountPurchased Total amount purchased for listing\n    ///@param startTime Start time for listing\n    ///@param endTime End time for listing\n    ///@param price Price of listing in ETH base units\n    ///@param _type Indicator for OG/Elite/Regular market\n    struct Item {\n        uint64 index;\n        uint32 amountAvailable;\n        uint32 amountPurchased;\n        uint32 startTime;\n        uint32 endTime;\n        uint32 price;\n        uint32 _type;\n    }\n\n    struct Raffle {\n        uint64 index;\n        uint32 amountAvailable;\n        uint32 amountPurchased;\n        uint32 startTime;\n        uint32 endTime;\n        uint32 price;\n        uint32 _type;\n    }\n\n    ///@notice Arrays containing all listings\n    Item[] public items;\n    Raffle[] public raffles;\n\n    ///@notice Event to index purchases\n    event Purchase(address buyer, string discordId, uint64 index);\n\n    ///@notice Setting our contracts...\n    IERC20Like public Tempura = IERC20Like(0xf52ae754AE9aaAC2f3A6C8730871d980389a424d);\n    IERC721Like public OGYakuza = IERC721Like(0x0EE1448F200e6e65E9bad7A335E3FFb674c0f68C);\n    IERC721Like public YakuzaElite = IERC721Like(0xE2C430d0c0B6B690FaCF54Ca26d7620237aA62A4);\n\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\n\n    ///@notice Managers can set/modify listings\n    mapping(address => bool) public managers;\n    ///@notice Mapping that stores an array of all purchases for each item index\n    mapping(uint256 => address[]) public indexToPurchasers;\n    ///@notice Mapping that notates if an address has purchased a listing already.\n    mapping(uint256 => mapping(address => bool)) public indexToPurchased;\n    mapping(uint256 => address[]) public raffleIndexToPurchasers;\n\n    modifier onlyManager() {\n        require(managers[msg.sender], \"You are not a manager!\");\n        _;\n    }\n\n    /////////////////////////////////\n    // Owner Restricted Functions //\n    ///////////////////////////////\n\n    function setManagers(address manager, bool status) external onlyOwner {\n        managers[manager] = status;\n    }\n\n    function setTempura(address _tempura) external onlyOwner {\n        Tempura = IERC20Like(_tempura);\n    }\n\n    function setOGYakuza(address _og) external onlyOwner {\n        OGYakuza = IERC721Like(_og);\n    }\n\n    function setYakuzaElite(address _elite) external onlyOwner {\n        YakuzaElite = IERC721Like(_elite);\n    }\n\n    ///////////////////////////////////\n    // Manager Restricted Functions //\n    /////////////////////////////////\n\n    function addItem(Item memory Item_) external onlyManager {\n        Item_.amountPurchased = 0;\n        Item_.index = uint64(items.length);\n        items.push(Item_);\n    }\n\n    function addRaffle(Raffle memory Raffle_) external onlyManager {\n        Raffle_.amountPurchased = 0;\n        Raffle_.index = uint64(raffles.length);\n        raffles.push(Raffle_);\n    }\n\n    function addMultiItems(Item[] memory Item_) external onlyManager {\n        for (uint256 i; i < Item_.length; i++) {\n            Item_[i].amountPurchased = 0;\n            Item_[i].index = uint64(items.length);\n            items.push(Item_[i]);\n        }\n    }\n\n    function addMultiRaffles(Raffle[] memory Raffle_) external onlyManager {\n        for (uint256 i; i < Raffle_.length; i++) {\n            Raffle_[i].amountPurchased = 0;\n            Raffle_[i].index = uint64(raffles.length);\n            raffles.push(Raffle_[i]);\n        }\n    }\n\n    function modifyItem(uint256 index_, Item memory Item_) external onlyManager {\n        Item memory _item = items[index_];\n        require(_item.price > 0, \"This Item doesn't exist!\");\n        Item_.amountPurchased = _item.amountPurchased;\n        items[index_] = Item_;\n    }\n\n    function deleteMostRecentItem() external onlyManager {\n        uint256 _lastIndex = items.length - 1;\n\n        Item memory _item = items[_lastIndex];\n\n        require(_item.amountPurchased == 0, \"Cannot delete item with already bought goods!\");\n\n        items.pop();\n    }\n\n    function purchaseItem(uint256 index_, string calldata discordId) external {\n        Item memory _item = items[index_];\n\n        if (_item._type == 0) {\n            require(\n                OGYakuza.balanceOf(msg.sender) != 0,\n                \"You must hold an OG Yakuza to purchase!\"\n            );\n        }\n        if (_item._type == 1) {\n            require(\n                YakuzaElite.balanceOf(msg.sender) != 0,\n                \"You  must hold a Yakuza Elite to purchase!\"\n            );\n        }\n\n        require(_item.amountAvailable > _item.amountPurchased, \"No more items remaining!\");\n        require(_item.startTime <= block.timestamp, \"Not started yet!\");\n        require(_item.endTime >= block.timestamp, \"Already ended!\");\n        require(!indexToPurchased[index_][msg.sender], \"Already purchased!\");\n\n        // Pay for the item\n        Tempura.transferFrom(msg.sender, burnAddress, (uint256(_item.price) * 1 ether));\n\n        // Add the address into the WL List\n        indexToPurchased[index_][msg.sender] = true;\n        indexToPurchasers[index_].push(msg.sender);\n\n        // Increment Amount Purchased\n        items[index_].amountPurchased++;\n\n        emit Purchase(msg.sender, discordId, _item.index);\n    }\n\n    function purchaseRaffleTicket(uint256 index_, string calldata discordId) external {\n        Raffle memory _raffle = raffles[index_];\n\n        if (_raffle._type == 0) {\n            require(\n                OGYakuza.balanceOf(msg.sender) != 0,\n                \"You must hold an OG Yakuza to purchase!\"\n            );\n        }\n        if (_raffle._type == 1) {\n            require(\n                YakuzaElite.balanceOf(msg.sender) != 0,\n                \"You  must hold a Yakuza Elite to purchase!\"\n            );\n        }\n\n        require(_raffle.amountAvailable > _raffle.amountPurchased, \"No more items remaining!\");\n        require(_raffle.startTime <= block.timestamp, \"Not started yet!\");\n        require(_raffle.endTime >= block.timestamp, \"Already ended!\");\n\n        // Pay for the item\n        Tempura.transferFrom(msg.sender, burnAddress, (uint256(_raffle.price) * 1 ether));\n\n        // Add the address into the WL List\n        indexToPurchasers[index_].push(msg.sender);\n\n        // Increment Amount Purchased\n        items[index_].amountPurchased++;\n\n        emit Purchase(msg.sender, discordId, _raffle.index);\n    }\n\n    ///////////////////////////////\n    // View/Marketplace Helpers //\n    /////////////////////////////\n\n    function getPurchasersOfItem(uint256 index_) public view returns (address[] memory) {\n        return indexToPurchasers[index_];\n    }\n\n    function getPurchasersOfRaffle(uint256 index_) public view returns (address[] memory) {\n        return raffleIndexToPurchasers[index_];\n    }\n\n    function getItemsLength() public view returns (uint256) {\n        return items.length;\n    }\n\n    function getRafflesAll() public view returns (Raffle[] memory) {\n        return raffles;\n    }\n\n    function getRafflesLength() public view returns (uint256) {\n        return raffles.length;\n    }\n\n    function getItemsAll() public view returns (Item[] memory) {\n        return items;\n    }\n\n    function getRemainingSupply(uint256 index_) public view returns (uint32) {\n        return items[index_].amountAvailable - items[index_].amountPurchased;\n    }\n\n    function getRemainingSupplyRaffle(uint256 index_) public view returns (uint32) {\n        return raffles[index_].amountAvailable - raffles[index_].amountPurchased;\n    }\n\n    function getRemainingSupplyForAll() public view returns (uint32[] memory) {\n        uint32[] memory allSupplies = new uint32[](items.length);\n        for (uint256 i; i < items.length; i++) {\n            uint32 supply = getRemainingSupply(i);\n            allSupplies[i] = supply;\n        }\n        return allSupplies;\n    }\n\n    function getRemainingSupplyForAllRaffles() public view returns (uint32[] memory) {\n        uint32[] memory allSupplies = new uint32[](raffles.length);\n        for (uint256 i; i < raffles.length; i++) {\n            uint32 supply = getRemainingSupplyRaffle(i);\n            allSupplies[i] = supply;\n        }\n        return allSupplies;\n    }\n\n    function getSomeItems(uint256 start_, uint256 end_) public view returns (Item[] memory) {\n        uint256 _arrayLength = end_ - start_ + 1;\n        Item[] memory _items = new Item[](_arrayLength);\n        uint256 _index;\n\n        for (uint256 i = 0; i < _arrayLength; i++) {\n            _items[_index++] = items[start_ + i];\n        }\n\n        return _items;\n    }\n\n    function getIndexToPurchasedBatch(address purchaser_, uint256[] memory indexes_)\n        public\n        view\n        returns (bool[] memory)\n    {\n        uint256 len = indexes_.length;\n        bool[] memory purchasedArray = new bool[](len);\n\n        uint256 i = 0;\n        while (i < len) {\n            purchasedArray[i] = indexToPurchased[indexes_[i]][purchaser_];\n            i++;\n        }\n        return purchasedArray;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": false,
17       "runs": 200
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     },
31     "metadata": {
32       "useLiteralContent": true
33     },
34     "libraries": {}
35   }
36 }}