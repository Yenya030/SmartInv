1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/OnChainBirds.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.12 <0.9.0;\r\nimport \"./ERC721A/ERC721A.sol\";\r\nimport \"./Base64.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract OnChainBirds is ERC721A, Ownable {\r\n    /*\r\n     ____       _______        _      ___  _        __  \r\n    / __ \\___  / ___/ /  ___ _(_)__  / _ )(_)______/ /__\r\n    / /_/ / _ \\/ /__/ _ \\/ _ `/ / _ \\/ _  / / __/ _  (_-<\r\n    \\____/_//_/\\___/_//_/\\_,_/_/_//_/____/_/_/  \\_,_/___/\r\n    */\r\n    uint256 public constant MAX_SUPPLY = 10000;\r\n    uint256 public price = 0.006 ether;\r\n    uint256 public constant maxPerTx = 10;\r\n    bool public imageDataLocked;\r\n\r\n    bytes32[][16] traitNames;\r\n\r\n    // nesting\r\n    mapping(uint256 => uint256) private nestingTotal;\r\n    mapping(uint256 => uint256) private nestingStarted;\r\n    uint256 private nestingTransfer;\r\n    bool public nestingIsOpen;\r\n\r\n    // rendering\r\n    uint256 private constant size = 42;\r\n     \r\n    uint256[7][8] private masks; // layer masks\r\n    \r\n    uint256[][][][7] private assets; // stores encoded pixeldata\r\n    uint256[][6][4] private legendarybodies;\r\n    \r\n    mapping (uint256 => uint256) private hashExists;\r\n    mapping (uint256 => DNA) private tokenIdToDNA;\r\n    uint8[2592] private colorPalette;\r\n    uint8[40] private alphaPalette = [0,0,0,77,155,154,134,7,0,0,0,115,0,0,0,26,255,255,255,115,146,235,252,102,135,234,254,38,34,34,34,26,255,255,255,128,0,0,0,38];\r\n    uint256[][] private goldHeadChance = [[4,0,19,0,3,24,0,13,29,14],[0,30,0,23,2,0,0,0,0,0],[11,6,0,26,0,0,0,0,0,0],[21,22,0,36,0,0,0,0,0,0]];\r\n    uint256[25] private rubyHeadChance = [17,20,32,4,0,35,11,2,30,26,14,1,33,23,36,0,19,22,16,15,3,13,0,18,34];\r\n    uint256[][] private goldEWChance = [[0,2,0,12,0,0,0,0,0,0],[0,0,3,0,0,0,0,0,0,0],[0,10,0,0,4,0,0,0,0,0],[0,0,1,8,0,0,0,0,0,0]];\r\n    uint256[85] private roboHeadChance = [21,0,0,0,1,2,3,5,6,7,9,11,12,14,16,17,22,23,24,25,26,27,28,30,32,33,34,35,36,0,0,0,1,2,3,5,6,7,9,11,12,14,16,17,22,23,24,25,26,27,28,30,32,33,34,35,36,0,0,0,1,2,3,5,6,7,9,11,12,14,16,17,22,23,24,25,26,27,28,30,32,33,34,35,36];\r\n    uint256[13] private roboEWChance = [0,0,0,0,0,0,1,9,10,9,10,11,12];\r\n    uint256[11] private skelleEWChance = [0,0,1,3,5,7,9,10,11,12,0];\r\n    uint256[25] private rubyEWChance = [0,0,7,0,10,0,0,0,0,0,0,0,5,0,0,1,0,0,0,9,3,0,0,0,0];\r\n\r\n    struct DNA {\r\n        uint16 Background;\r\n        uint16 Beak;\r\n        uint16 Body;\r\n        uint16 Eyes;\r\n        uint16 Eyewear;\r\n        uint16 Feathers;\r\n        uint16 Headwear;\r\n        uint16 Outerwear;\r\n        uint16 EyeColor;\r\n        uint16 BeakColor;\r\n        uint16 LegendaryId;\r\n    }\r\n\r\n    struct DecompressionCursor {\r\n        uint256 index;\r\n        uint256 rlength;\r\n        uint256 color;\r\n        uint256 position;\r\n    }\r\n\r\n    bool private raffleLocked;\r\n    event FallbackRaffle(\r\n        uint256 tokenId\r\n    );\r\n\r\n    constructor() ERC721A(\"OnChainBirds\", \"OCBIRD\") {}\r\n\r\n    function mint(uint256 quantity) external payable {\r\n        unchecked {\r\n            uint256 totalminted = _totalMinted();\r\n            uint256 newSupply = totalminted + quantity;\r\n            require(newSupply <= MAX_SUPPLY, \"SoldOut\");\r\n            require(quantity <= maxPerTx, \"MaxPerTx\");\r\n            require(msg.value >= price * quantity);\r\n            _mint(msg.sender, quantity);\r\n            for(; totalminted < newSupply; ++totalminted) {\r\n                createDNA(totalminted);\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override (ERC721A) returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    Base64.encode(\r\n                        abi.encodePacked(\r\n                            '{\"name\": \"#',\r\n                            _toString(tokenId),\r\n                            '\", \"image\": \"data:image/svg+xml;base64,',\r\n                            Base64.encode(\r\n                                bytes(tokenIdToSVG(tokenId))\r\n                            ),\r\n                            '\",\"attributes\":',\r\n                            tokenIdToMetadata(tokenId),\r\n                            \"}\"\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function createDNA(uint256 tokenId) private {\r\n        unchecked {\r\n        uint256 randinput =\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            block.timestamp,\r\n                            block.difficulty,\r\n                            tokenId,\r\n                            msg.sender\r\n                        )\r\n                    )\r\n                );\r\n        uint256 newDNA;\r\n        uint256 baseDNA;\r\n        uint256 mask = 0xFFFF;\r\n        uint256 Beak;\r\n        uint256 Eyes;\r\n        uint256 Eyewear;\r\n        uint256 rand = randinput & mask;\r\n        // background\r\n        uint256 backgroundId;\r\n        uint256[7] memory background = [uint256(520),11110,10914,10899,10833,10722,10538];\r\n        uint256 bound;\r\n        uint256 lowerbound;\r\n        for (uint256 j; j < background.length; ++j) {\r\n            bound += background[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) backgroundId = j;\r\n            lowerbound = bound; \r\n        }\r\n        newDNA = backgroundId;\r\n        uint256 bgIsNotZero = ((backgroundId | ((backgroundId^type(uint256).max) + 1)) >> 255) & 1;\r\n        uint256 legendcount = tokenIdToDNA[tokenId-1].LegendaryId+(1>>bgIsNotZero);\r\n        newDNA |= legendcount<<160;\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // beak\r\n        uint256[4] memory beak = [uint256(0),27675,27244,10617];\r\n        delete bound;\r\n        delete lowerbound;\r\n        for (uint256 j = 1; j < beak.length; ++j) {\r\n            bound += beak[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) Beak = j;\r\n            lowerbound = bound;\r\n        }\r\n        randinput >>= 16;\r\n        rand = randinput & mask; \r\n        // eyes\r\n        uint256[12] memory eyes = [uint256(0),16202,9708,9013,9006,8699,3332,1989,1936,1930,1877,1844];\r\n        delete bound;\r\n        delete lowerbound;\r\n        for (uint256 j = 1; j < eyes.length; ++j) {\r\n            bound += eyes[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) Eyes = j;\r\n            lowerbound = bound; \r\n        }\r\n        baseDNA |= Eyes<<48;\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // eyewear\r\n        uint256[13] memory eyewear = [uint256(53738),1317,1226,1140,1121,1121,1055,931,891,878,826,800,492];\r\n        delete bound;\r\n        delete lowerbound;\r\n        for (uint256 j; j < eyewear.length; ++j) {\r\n            bound += eyewear[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) Eyewear = j;\r\n            lowerbound = bound; \r\n        }\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // feathers\r\n        uint256[10] memory feathers = [uint256(0),12345,9691,8301,7625,7507,7238,6072,3549,3208];\r\n        delete bound;\r\n        delete lowerbound;\r\n        for (uint256 j = 1; j < feathers.length; ++j) {\r\n            bound += feathers[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) baseDNA |= j<<80;\r\n            lowerbound = bound; \r\n        }\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // head\r\n        uint256 resultHead;\r\n        uint256[38] memory headwear = [uint256(19390),2510,2340,2130,1730,1678,1665,1638,1632,1547,1527,1494,1429,1389,1357,1337,1324,1265,1265,1226,1199,1180,1180,1153,1147,1121,1101,970,950,826,819,786,688,662,603,524,380,374];\r\n        delete bound;\r\n        delete lowerbound;\r\n        uint256 bodybound;\r\n        for (uint256 j; j < headwear.length; ++j) {\r\n            bound += headwear[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) {resultHead = j; bodybound=lowerbound;}\r\n            lowerbound = bound; \r\n        }\r\n        // body\r\n        uint256[11][38] memory body = [[uint256(4230),1752,2349,2204,2322,2270,2224,1182,717,94,48],[uint256(1489),952,0,0,0,0,0,0,0,48,21],[uint256(485),271,362,389,0,283,270,112,67,67,34],[uint256(847),495,698,0,0,0,0,0,0,62,28],[uint256(1051),625,0,0,0,0,0,0,0,0,54],[uint256(570),157,282,249,0,282,0,0,33,66,39],[uint256(401),211,309,348,335,0,0,0,0,27,34],[uint256(314),282,223,249,190,0,242,92,46,0,0],[uint256(1599),0,0,0,0,0,0,0,0,0,33],[uint256(563),387,492,0,0,0,0,0,0,66,39],[uint256(248),144,223,197,184,249,197,85,0,0,0],[uint256(348),212,146,205,0,199,198,0,73,73,40],[uint256(551),328,0,0,465,0,0,0,0,46,39],[uint256(792),597,0,0,0,0,0,0,0,0,0],[uint256(263),258,264,251,297,0,0,0,0,15,9],[uint256(467),277,0,447,0,0,0,0,86,0,60],[uint256(736),408,0,0,0,0,0,0,99,47,34],[uint256(288),140,159,140,126,145,152,60,21,0,34],[uint256(493),317,0,342,0,0,0,0,86,0,27],[uint256(1199),0,0,0,0,0,0,0,0,0,27],[uint256(1183),0,0,0,0,0,0,0,0,0,16],[uint256(277),131,216,229,229,0,0,98,0,0,0],[uint256(290),166,153,192,0,199,0,73,40,27,40],[uint256(223),140,153,107,205,204,0,53,34,0,34],[uint256(506),244,389,0,0,0,0,0,0,0,8],[uint256(210),125,144,229,164,164,0,59,0,0,26],[uint256(166),100,146,171,119,132,86,73,53,47,8],[uint256(373),223,308,0,0,0,0,0,0,59,7],[uint256(897),0,0,0,0,0,0,0,0,33,20],[uint256(826),0,0,0,0,0,0,0,0,0,0],[uint256(93),74,113,133,159,126,0,67,14,0,40],[uint256(786),0,0,0,0,0,0,0,0,0,0],[uint256(93),73,99,73,112,67,73,26,13,33,26],[uint256(98),67,93,73,106,73,67,52,0,0,33],[uint256(83),67,67,93,0,60,80,21,20,66,46],[uint256(105),47,67,86,0,73,0,0,21,73,52],[uint256(60),68,74,54,0,0,0,0,15,74,35],[uint256(45),39,59,66,0,66,46,0,7,0,46]];\r\n        bound = bodybound;\r\n        lowerbound = bodybound;\r\n        for (uint256 j; j < 11; ++j) {\r\n            bound += body[resultHead][j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) baseDNA |= (j+1)<<32;\r\n            lowerbound = bound; \r\n        }\r\n        baseDNA |= resultHead<<96;\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // outerwear\r\n        uint256[8] memory outerwear = [uint256(54563),2031,1979,1717,1659,1351,1331,905];\r\n        delete bound;\r\n        delete lowerbound;\r\n        for (uint256 j; j < outerwear.length; ++j) {\r\n            bound += outerwear[j];\r\n            if ((rand-lowerbound) < (bound-lowerbound)) baseDNA |= j<<112;\r\n            lowerbound = bound; \r\n        }\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // beakcolor\r\n        newDNA|=(rand & 1)<<144;\r\n        randinput >>= 16;\r\n        rand = randinput & mask;\r\n        // eyecolor\r\n        uint256 eyeIsNotColored = Eyes/6;\r\n        uint256 EyeColor = (rand%7+1)*(1>>eyeIsNotColored)+eyeIsNotColored;\r\n        baseDNA |= EyeColor<<128;\r\n        // store dna\r\n        uint256 found;\r\n        randinput >>= 16;\r\n        uint256 baseHash = baseDNA|bgIsNotZero<<192;\r\n        for(uint256 i; i<5; ++i) {\r\n            uint256 isNotLast = 1>>(i>>2);//1>>(i/4);\r\n            uint256 hashedDNA = baseHash|Beak<<16|Eyewear<<64|(((1>>isNotLast)*tokenId)<<212);\r\n            if(hashExists[hashedDNA]+found == 0) {\r\n                newDNA |= (hashedDNA<<64)>>64;\r\n                assembly {\r\n                    mstore(0, tokenId)\r\n                    mstore(32, tokenIdToDNA.slot)\r\n                    let hash := keccak256(0, 64)\r\n                    sstore(hash, newDNA)\r\n                }\r\n                ++hashExists[hashedDNA];\r\n                ++found;\r\n                }\r\n            Beak = Beak%3+1;\r\n            if(i==0) Eyewear = (Eyewear + randinput%8)%13;\r\n            Eyewear = ++Eyewear%13;\r\n        }\r\n        }\r\n    }\r\n    \r\n    function getDNA(uint256 tokenId) public view returns(DNA memory) {\r\n        DNA memory realDNA = tokenIdToDNA[tokenId];\r\n        // legendary id\r\n        if(realDNA.Background == 0) {\r\n            if(realDNA.LegendaryId>74) {\r\n                realDNA.Background = 1;\r\n                delete realDNA.LegendaryId;\r\n            } else {\r\n                uint256 specialType = realDNA.LegendaryId%3;\r\n                uint256 specialIndex = realDNA.LegendaryId/3;\r\n                if(specialType==0) {\r\n                    //legendary (specialIndex starts at 1)\r\n                    delete realDNA.Beak;\r\n                    delete realDNA.Eyes;\r\n                    delete realDNA.Eyewear;\r\n                    delete realDNA.Headwear;\r\n                    delete realDNA.Outerwear;\r\n                    delete realDNA.EyeColor;\r\n                    delete realDNA.BeakColor;\r\n                    uint256 legendmod = (specialIndex-1)%4;\r\n                    uint256 legenddiv = (specialIndex-1)/4;\r\n                    realDNA.Background = uint16(7 + legendmod);\r\n                    realDNA.Body = uint16(legendmod+1);\r\n                    realDNA.Feathers = uint16(legenddiv+1);\r\n                    return realDNA;\r\n                } else if(specialType==1) {\r\n                    //golden (specialIndex starts at 0)\r\n                    realDNA.Body = 12;\r\n                    uint256 feathermod = specialIndex%5;\r\n                    uint256 featherdiv = specialIndex/5;\r\n                    if(feathermod<2) featherdiv=(featherdiv<<1)+feathermod;\r\n                    if(feathermod==0) ++feathermod;\r\n                    realDNA.Feathers=uint16(feathermod);\r\n                    realDNA.Headwear = uint16(goldHeadChance[--feathermod][featherdiv]);\r\n                    realDNA.Background = uint16((specialIndex%6)+1);\r\n                    realDNA.Eyewear = uint16(goldEWChance[feathermod][featherdiv]);\r\n                } else if(specialType==2) {\r\n                    //ruby (specialIndex starts at 0)\r\n                    realDNA.Body = 13;\r\n                    realDNA.Background = uint16((specialIndex%6)+1);\r\n                    realDNA.Headwear = uint16(rubyHeadChance[specialIndex%25]);\r\n                    realDNA.Eyewear = uint16(rubyEWChance[specialIndex%25]);\r\n                }\r\n            }\r\n        } else {\r\n            delete realDNA.LegendaryId;\r\n        }\r\n        // special bodies except robot -> no outerwear\r\n        if(realDNA.Body > 10) {\r\n            delete realDNA.Outerwear;\r\n        }\r\n        // single color eyes\r\n        if(realDNA.Eyes > 5) {\r\n            realDNA.EyeColor = 1;\r\n        }\r\n        // special bodies\r\n        if(realDNA.Body > 9) {\r\n            delete realDNA.BeakColor;\r\n            delete realDNA.EyeColor;\r\n            // golden body\r\n            if(realDNA.Body == 12) {\r\n                if(realDNA.Eyes == 2 || realDNA.Eyes == 9) {\r\n                    realDNA.Eyes = 1;\r\n                } else if(realDNA.Eyes == 7 || realDNA.Eyes == 6) {\r\n                    realDNA.Eyes = 2;\r\n                } else if(realDNA.Eyes == 5) {\r\n                    realDNA.Eyes = 4;\r\n                } else if(realDNA.Eyes == 8 || realDNA.Eyes > 9) {\r\n                    realDNA.Eyes = 5;\r\n                } else {\r\n                    realDNA.Eyes = 3;\r\n                }\r\n            } else {\r\n                realDNA.Feathers = 1;\r\n                // shuffle hash\r\n                uint256 dist = uint256(keccak256(abi.encodePacked(tokenId,realDNA.Eyes)));\r\n                uint256 mask = 0xFFFFFFFFFFFFFFFF;\r\n                if(realDNA.Body == 10) {\r\n                    // robot body\r\n                    realDNA.Outerwear = uint16((dist&mask)%3);\r\n                    realDNA.Eyewear = uint16(roboEWChance[((dist>>64)&mask)%11]);\r\n                    realDNA.Headwear = uint16(roboHeadChance[((dist>>128)&mask)%85]);\r\n                    realDNA.Eyes = uint16((dist>>192)%2+1);\r\n                } else if(realDNA.Body == 11) {\r\n                    // skelleton body\r\n                        realDNA.Eyes = uint16((dist&mask)%6+1);\r\n                        realDNA.Eyewear = uint16(skelleEWChance[(dist>>64)%11]);\r\n                } else {\r\n                    // ruby skelleton\r\n                    realDNA.Beak = 1;\r\n                    if(realDNA.Eyes > 5 && realDNA.Eyes < 9) {\r\n                        realDNA.Eyes = 1;\r\n                    } else if(realDNA.Eyes == 3 || realDNA.Eyes > 8) {\r\n                        realDNA.Eyes = 2;\r\n                    } else if(realDNA.Eyes == 5 || realDNA.Eyes == 1) {\r\n                        realDNA.Eyes = 3;\r\n                    } else {\r\n                        realDNA.Eyes = 4;\r\n                    }\r\n                }\r\n                    \r\n            }\r\n        }\r\n        // hoodie -> raincloud, crescent, no eyewear\r\n        if(realDNA.Outerwear == 3) {\r\n            realDNA.Body = 1;\r\n            delete realDNA.Eyewear;\r\n            if(realDNA.Headwear < 26) {\r\n                delete realDNA.Headwear;\r\n            } else {\r\n                realDNA.Headwear = 5;\r\n            }\r\n        }\r\n        // heros cap -> heros outerwear, no eyewear \r\n        if(realDNA.Headwear == 31) {\r\n            realDNA.Outerwear = 8;\r\n            delete realDNA.Eyewear;\r\n        }\r\n        // space helmet -> no outerwear\r\n        if(realDNA.Headwear == 6) {\r\n            delete realDNA.Outerwear;\r\n            if(realDNA.Eyewear == 8) {\r\n                delete realDNA.Eyewear;\r\n            }\r\n        }\r\n        // headphones\r\n        if(realDNA.Headwear == 21) {\r\n            // -> job glasses or none\r\n            if(realDNA.Eyewear != 2) delete realDNA.Eyewear;\r\n            // -> diamond necklace or none\r\n            if(realDNA.Outerwear != 6) delete realDNA.Outerwear;\r\n        }\r\n        // aviators cap -> no eyewear, no bomber, jeans and hoodie down outerwear\r\n        if(realDNA.Headwear == 13) {\r\n            delete realDNA.Eyewear;\r\n            if(realDNA.Outerwear % 2 == 1 && realDNA.Outerwear != 3) delete realDNA.Outerwear;\r\n        }\r\n        // beanie -> no sunglasses, rose-colored glasses, aviators, monocle, 3d glasses\r\n        if(realDNA.Headwear == 8) {\r\n            if((realDNA.Eyewear%2 == 1 && realDNA.Eyewear != 1) || realDNA.Eyewear == 8)\r\n                delete realDNA.Eyewear;\r\n        }\r\n        // eyewear -> no eyes except if eyepatch, monocle, half-moon, big tech\r\n        if(realDNA.Eyewear > 1) {\r\n            // monocle -> no side-eyes\r\n            if(realDNA.Eyewear == 8) {\r\n                // no bucket hat combo\r\n                if(realDNA.Headwear == 28) {\r\n                    delete realDNA.Eyewear;\r\n                } else if(realDNA.Eyes == 5 && realDNA.Body != 11)\r\n                    realDNA.Eyes = 1;\r\n            }\r\n            // half-moon spectacles -> open, adorable, fire eyes\r\n            else if(realDNA.Eyewear == 12) {\r\n                if(realDNA.Body == 10) {\r\n                    realDNA.Eyes = 2;\r\n                } else if(realDNA.Body == 11) {\r\n                    if(realDNA.Eyes != 4 && realDNA.Eyes != 5) realDNA.Eyes = 1;\r\n                } else if(realDNA.Body == 12) {\r\n                    realDNA.Eyes = 3;\r\n                } else if(realDNA.Body == 13) {\r\n                    if(realDNA.Eyes != 3) realDNA.Eyes = 1;\r\n                } else if(realDNA.Eyes != 6 && realDNA.Eyes != 9) {\r\n                    realDNA.Eyes = 1;\r\n                }\r\n            }\r\n            // big tech -> open eyes\r\n            else if(realDNA.Eyewear == 10) {\r\n                if(realDNA.Body == 10) {\r\n                    realDNA.Eyes = 2;\r\n                } else if(realDNA.Body == 11) {\r\n                    realDNA.Eyes = 5;\r\n                } else if(realDNA.Body > 11) {\r\n                    realDNA.Eyes = 3;\r\n                } else {\r\n                    realDNA.Eyes = 1;\r\n                }\r\n            } else {\r\n                delete realDNA.Eyes;\r\n                delete realDNA.EyeColor;\r\n            }\r\n        }\r\n        return realDNA;\r\n    }\r\n\r\n    function decodeLength(uint256[] memory imgdata, uint256 index) private pure returns (uint256) {\r\n        uint256 bucket = index >> 4;\r\n        uint256 offset = (index & 0xf) << 4;\r\n        uint256 data = imgdata[bucket] >> (250-offset);\r\n        uint256 mask = 0x3F;\r\n        return data & mask;\r\n    }\r\n\r\n    function decodeColorIndex(uint256[] memory imgdata, uint256 index) private pure returns (uint256) {\r\n        uint256 bucket = index >> 4;\r\n        uint256 offset = (index & 0xf) << 4;\r\n        uint256 data = imgdata[bucket] >> (240-offset);\r\n        uint256 mask = 0x3FF;\r\n        return data & mask;\r\n    }\r\n\r\n    function tokenIdToSVG(uint256 tokenId) private view returns (string memory) {\r\n        // load data\r\n        DNA memory birdDNA = getDNA(tokenId);\r\n        bool trueLegend = birdDNA.Background>6;\r\n        uint256 colorPaletteLength = colorPalette.length/3;\r\n        uint256 lastcolor;\r\n        uint256 lastwidth = 1;\r\n        bool[] memory usedcolors = new bool[](875);\r\n        bytes memory svgString;\r\n        // load pixeldata\r\n        uint256[][7] memory compressedData;\r\n        compressedData[0] = assets[0][birdDNA.Background-1][0];\r\n        // legendary bodies\r\n        if(trueLegend){\r\n            compressedData[1] = legendarybodies[birdDNA.Body-1][birdDNA.Feathers-1];\r\n        } else {\r\n            compressedData[1] = assets[2][birdDNA.Body-1][birdDNA.Feathers-1];\r\n        }\r\n        if(birdDNA.Beak!=0){\r\n            // special bodies -> special beaks\r\n            if(birdDNA.Body>9){\r\n                compressedData[2] = assets[1][birdDNA.Body-7][birdDNA.Beak-1];\r\n            } else {\r\n                compressedData[2] = assets[1][birdDNA.Beak-1][birdDNA.BeakColor];\r\n            }\r\n        } \r\n        if(birdDNA.Eyes!=0) {\r\n            // special bodies -> special eyes\r\n            if(birdDNA.Body>9){\r\n                compressedData[3] = assets[3][birdDNA.Body+1][birdDNA.Eyes-1];\r\n            } else {\r\n                compressedData[3] = assets[3][birdDNA.Eyes-1][birdDNA.EyeColor-1];\r\n            }\r\n        }\r\n        if(birdDNA.Eyewear!=0) compressedData[4] = assets[4][birdDNA.Eyewear-1][0];\r\n        if(birdDNA.Headwear!=0) compressedData[5] = assets[5][birdDNA.Headwear-1][0];\r\n        if(birdDNA.Outerwear!=0) compressedData[6] = assets[6][birdDNA.Outerwear-1][0];\r\n\r\n        DecompressionCursor[7] memory cursors;\r\n        for(uint256 i = 1; i<7; ++i) {\r\n            if(compressedData[i].length != 0) {\r\n            cursors[i]=DecompressionCursor(0,decodeLength(compressedData[i],0),decodeColorIndex(compressedData[i],0),0);\r\n            }\r\n        }\r\n        // masks\r\n        uint256[7][7] memory bitmasks;\r\n        for(uint256 i; i<7; ++i) {\r\n            if(i==1 && trueLegend) {\r\n                bitmasks[i] = masks[7];\r\n            } else {\r\n                bitmasks[i] = masks[i];\r\n            }\r\n        }\r\n        // create SVG\r\n        bytes14 preRect = \"<rect class='c\";\r\n        for(uint256 y; y < size;++y){\r\n            bytes memory svgBlendString;\r\n            for(uint256 x; x < size;++x){\r\n                bool blendMode;\r\n                uint256 coloridx;\r\n                uint256 index = y*size+x;\r\n                uint256 bucket = index >> 8;\r\n                uint256 mask = 0x8000000000000000000000000000000000000000000000000000000000000000 >> (index & 0xff);\r\n                // pixeldata decoding\r\n                for(uint256 i = 6; i!=0; i--) {\r\n                    if(compressedData[i].length != 0) {\r\n                    if (bitmasks[i][bucket] & mask != 0) {\r\n                        cursors[i].index++;\r\n                        if(cursors[i].color != 0) {\r\n                            if(coloridx == 0) {\r\n                                coloridx = cursors[i].color;\r\n                                if(cursors[i].color>colorPaletteLength) {\r\n                                    blendMode=true;\r\n                                }\r\n                            } else if(blendMode) {\r\n                                svgBlendString = abi.encodePacked(\r\n                                    preRect,\r\n                                    _toString(cursors[i].color),\r\n                                    \"' x='\",\r\n                                    _toString(x),\r\n                                    \"' y='\",\r\n                                    _toString(y),\r\n                                    \"' width='1'/>\",\r\n                                    svgBlendString\r\n                                );\r\n                                if(cursors[i].color<=colorPaletteLength) {\r\n                                    blendMode=false;\r\n                                }\r\n                                usedcolors[cursors[i].color] = true;\r\n                            }\r\n                        }\r\n                        if(cursors[i].index==cursors[i].rlength) {\r\n                            cursors[i].index=0;\r\n                            cursors[i].position++;\r\n                            if(cursors[i].position<compressedData[i].length*16){\r\n                                cursors[i].rlength=decodeLength(compressedData[i],cursors[i].position);\r\n                                cursors[i].color=decodeColorIndex(compressedData[i],cursors[i].position);\r\n                            }\r\n                            \r\n                        }\r\n                    }   \r\n                    }\r\n                }\r\n                // finalize pixel color\r\n                if(coloridx==0 || blendMode) {\r\n                    uint256 bgcolor;\r\n                    if(birdDNA.Background > 6 && birdDNA.Background != 9){\r\n                        bgcolor = decodeColorIndex(compressedData[0],y);\r\n                    } else {\r\n                        bgcolor = decodeColorIndex(compressedData[0],0);\r\n                    }\r\n                    if(coloridx==0) {\r\n                        coloridx=bgcolor;\r\n                    }\r\n                    else if(blendMode){\r\n                        svgBlendString = abi.encodePacked(\r\n                                    preRect,\r\n                                    _toString(bgcolor),\r\n                                    \"' x='\",\r\n                                    _toString(x),\r\n                                    \"' y='\",\r\n                                    _toString(y),\r\n                                    \"' width='1'/>\",\r\n                                    svgBlendString\r\n                                );\r\n                        usedcolors[bgcolor] = true;\r\n                    }\r\n                }\r\n                usedcolors[coloridx] = true;\r\n                if(x == 0) {\r\n                    lastwidth = 1;\r\n                } else if(lastcolor == coloridx) {\r\n                    lastwidth++;\r\n                } else {\r\n                    svgString = abi.encodePacked( \r\n                        svgString,\r\n                        svgBlendString,\r\n                        preRect,\r\n                        _toString(lastcolor),\r\n                        \"' x='\",\r\n                        _toString(x-lastwidth),\r\n                        \"' y='\",\r\n                        _toString(y),\r\n                        \"' width='\",\r\n                        _toString(lastwidth),\r\n                        \"'/>\"\r\n                    );\r\n                    svgBlendString = \"\"; \r\n                    lastwidth = 1;\r\n                }\r\n                lastcolor = coloridx;\r\n            }\r\n            svgString = abi.encodePacked( \r\n                        svgString,\r\n                        svgBlendString,\r\n                        preRect,\r\n                        _toString(lastcolor),\r\n                        \"' x='\",\r\n                        _toString(42-lastwidth),\r\n                        \"' y='\",\r\n                        _toString(y),\r\n                        \"' width='\",\r\n                        _toString(lastwidth),\r\n                        \"'/>\"\r\n                    );\r\n            svgBlendString = \"\";\r\n        }\r\n        // generate stylesheet\r\n        bytes memory stylesheet;\r\n        for(uint256 i; i<usedcolors.length; ++i) {\r\n           if(usedcolors[i]) {\r\n            bytes memory colorCSS;\r\n            uint256 paletteIdx = (i-1)*3;\r\n            if(paletteIdx>=colorPalette.length) {\r\n                uint256 fixedColorIdx = (i-1)-colorPalette.length/3;\r\n                paletteIdx = fixedColorIdx<<2;\r\n                uint256 dec = uint256(alphaPalette[paletteIdx+3])*100/255;\r\n                colorCSS = abi.encodePacked(\"rgba(\", _toString(uint256(alphaPalette[paletteIdx])), \",\", _toString(uint256(alphaPalette[paletteIdx+1])), \",\", _toString(uint256(alphaPalette[paletteIdx+2])), \",0.\", _toString(dec), \")\");\r\n            } else {\r\n                colorCSS = abi.encodePacked(\"rgb(\", _toString(uint256(colorPalette[paletteIdx])), \",\", _toString(uint256(colorPalette[paletteIdx+1])), \",\", _toString(uint256(colorPalette[paletteIdx+2])), \")\");\r\n            }\r\n            stylesheet = abi.encodePacked(stylesheet, \".c\", _toString(i), \"{fill:\", colorCSS, \"}\");\r\n            }\r\n        }\r\n        // combine full SVG\r\n        svgString =\r\n            abi.encodePacked(\r\n                '<svg id=\"bird-svg\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 42 42\"> ',\r\n                svgString,\r\n                \"<style>rect{height:1px;} #bird-svg{shape-rendering: crispedges;} \",\r\n                stylesheet,\r\n                \"</style></svg>\"\r\n            );\r\n\r\n        return string(svgString);\r\n    }\r\n    \r\n    function tokenIdToMetadata(uint256 tokenId) private view returns (string memory) {\r\n        unchecked {\r\n        DNA memory tokenDNA = getDNA(tokenId);\r\n        string memory metadataString;\r\n        for (uint256 i; i < 8; ++i) {\r\n            uint256 traitId;\r\n            uint idx1;\r\n            uint idx2;\r\n            if(i==0) {\r\n                traitId = tokenDNA.Background;\r\n            } else if(i==1) {\r\n                traitId = tokenDNA.Beak;\r\n            } else if(i==2) {\r\n                traitId = tokenDNA.Body;\r\n                if(tokenDNA.Background > 6) {\r\n                    idx1 = 8;\r\n                    idx2 = traitId-1;\r\n                }\r\n            } else if(i==3) {\r\n                traitId = tokenDNA.Eyes;\r\n                if(tokenDNA.Body > 9) {\r\n                    idx1 = tokenDNA.Body;\r\n                    idx2 = traitId-1;\r\n                }\r\n            } else if(i==4) {\r\n                traitId = tokenDNA.Eyewear;\r\n            } else if(i==5) {\r\n                traitId = tokenDNA.Feathers;\r\n                if(tokenDNA.LegendaryId != 0 && tokenDNA.Body != 13) {\r\n                    idx1 = 9;\r\n                    idx2 = traitId-1;\r\n                } else if(tokenDNA.Body > 9) {\r\n                    idx1 = 14;\r\n                    idx2 = tokenDNA.Body-10;\r\n                }\r\n            } else if(i==6) {\r\n                traitId = tokenDNA.Headwear;\r\n            } else if(i==7) {\r\n                traitId = tokenDNA.Outerwear;\r\n            }\r\n            if(traitId == 0) continue;\r\n            string memory traitName;\r\n            if(idx1 == 0) {\r\n                idx1 = i;\r\n                idx2 = traitId-1;\r\n            }\r\n            traitName = bytes32ToString(traitNames[idx1][idx2]);\r\n            \r\n            string memory startline;\r\n            if(i!=0) startline = \",\";\r\n\r\n            metadataString = string(\r\n                abi.encodePacked(\r\n                    metadataString,\r\n                    startline,\r\n                    '{\"trait_type\":\"',\r\n                    bytes32ToString(traitNames[15][i]),\r\n                    '\",\"value\":\"',\r\n                    traitName,\r\n                    '\"}'\r\n                ));\r\n        }\r\n        return string.concat(\"[\", metadataString, \"]\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n        Nesting Functions\r\n     */\r\n    \r\n    function nestingPeriod(uint256 tokenId) external view returns (bool nesting, uint256 current, uint256 total) {\r\n        uint256 start = nestingStarted[tokenId];\r\n        if (start != 0) {\r\n            nesting = true;\r\n            current = block.timestamp - start;\r\n        }\r\n        total = current + nestingTotal[tokenId];\r\n    }\r\n\r\n    function transferWhileNesting(address from, address to, uint256 tokenId) external {\r\n        require(ownerOf(tokenId) == msg.sender);\r\n        nestingTransfer = 1;\r\n        transferFrom(from, to, tokenId);\r\n        delete nestingTransfer;\r\n    }\r\n\r\n    function _beforeTokenTransfers(address, address, uint256 startTokenId, uint256 quantity) internal view override {\r\n        uint256 tokenId = startTokenId;\r\n        for (uint256 end = tokenId + quantity; tokenId < end; ++tokenId) {\r\n            require(nestingStarted[tokenId] == 0 || nestingTransfer != 0, \"Nesting\");\r\n        }\r\n    }\r\n\r\n    function toggleNesting(uint256[] calldata tokenIds) external {\r\n        bool nestOpen = nestingIsOpen;\r\n        for (uint256 i; i < tokenIds.length; ++i) {\r\n            require(ownerOf(tokenIds[i]) == msg.sender);\r\n            uint256 start = nestingStarted[tokenIds[i]];\r\n            if (start == 0) {\r\n                require(nestOpen);\r\n                nestingStarted[tokenIds[i]] = block.timestamp;\r\n            } else {\r\n                nestingTotal[tokenIds[i]] += block.timestamp - start;\r\n                nestingStarted[tokenIds[i]] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Admin Functions\r\n     */\r\n\r\n    // fallback raffle in case the random generation does result in a few missing special/legendary birds\r\n    function raffleUnmintedSpecials() external onlyOwner {\r\n        uint256 supply = _totalMinted();\r\n        require(!raffleLocked && supply>=MAX_SUPPLY);\r\n        uint256 specialsMinted = tokenIdToDNA[supply-1].LegendaryId;\r\n        while(specialsMinted < 74) {\r\n            uint256 randomId = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, specialsMinted))) % supply;\r\n            while(tokenIdToDNA[randomId].Background == 0) {\r\n                randomId = (++randomId)%supply;\r\n            }\r\n            tokenIdToDNA[randomId].LegendaryId = uint16(++specialsMinted);\r\n            delete tokenIdToDNA[randomId].Background;\r\n            emit FallbackRaffle(randomId);\r\n        }\r\n        raffleLocked = true;\r\n    }\r\n\r\n    // fallback reroll to prevent clones, is fairly rare, called as fast as possible after mint if detected\r\n    function rerollClone(uint256 tokenId1, uint256 tokenId2) external onlyOwner {\r\n        DNA memory bird = getDNA(tokenId1);\r\n        DNA memory clone = getDNA(tokenId2);\r\n        delete bird.Background;\r\n        delete bird.BeakColor;\r\n        delete clone.Background;\r\n        delete clone.BeakColor;\r\n        require(keccak256(abi.encode(bird)) == keccak256(abi.encode(clone)));\r\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)));\r\n        tokenIdToDNA[tokenId1].Eyes = uint16((randomHash&0xFFFFFFFF)%11+1);\r\n        randomHash>>=32;\r\n        tokenIdToDNA[tokenId1].Beak = uint16((randomHash&0xFFFFFFFF)%3+1);\r\n        randomHash>>=32;\r\n        tokenIdToDNA[tokenId1].Outerwear = uint16(randomHash%8);\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        if (!success) revert();\r\n    }\r\n\r\n    function expelFromNest(uint256 tokenId) external onlyOwner {\r\n        require(nestingStarted[tokenId] != 0);\r\n        nestingTotal[tokenId] += block.timestamp - nestingStarted[tokenId];\r\n        delete nestingStarted[tokenId];\r\n    }\r\n\r\n    function setNestingOpen() external onlyOwner {\r\n        nestingIsOpen = !nestingIsOpen;\r\n    }\r\n\r\n    function uploadImages1(uint256[][][][7] calldata defaultdata) external onlyOwner {\r\n        if(imageDataLocked) revert();\r\n        assets = defaultdata;\r\n    }\r\n    function uploadImages2(uint256[][][] calldata bodydata) external onlyOwner {\r\n        if(imageDataLocked) revert();\r\n        assets[2] = bodydata;\r\n    }\r\n    function uploadImages3(uint256[][][4] calldata specialbodydata, uint256[][6][4] calldata legenbodydata, uint8[2592] calldata cpalette, uint256[7][8] calldata _masks, bytes32[][16] calldata _traitnames) external onlyOwner {\r\n        if(imageDataLocked) revert();\r\n        assets[2].push(specialbodydata[0]);\r\n        assets[2].push(specialbodydata[1]);\r\n        assets[2].push(specialbodydata[2]);\r\n        assets[2].push(specialbodydata[3]);\r\n        colorPalette = cpalette;\r\n        masks = _masks;\r\n        traitNames = _traitnames;\r\n        legendarybodies = legenbodydata;\r\n        imageDataLocked=true;\r\n    }\r\n\r\n    /**\r\n        Utility Functions\r\n     */\r\n\r\n    function bytes32ToString(bytes32 _bytes32) private pure returns (string memory) {\r\n        uint256 i;\r\n        while(_bytes32[i] != 0 && i < 32) {\r\n            ++i;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < bytesArray.length; ++i) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    // tokensOfOwner function: MIT License\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\r\n        unchecked {\r\n            uint256 tokenIdsIdx;\r\n            address currOwnershipAddr;\r\n            uint256 tokenIdsLength = balanceOf(owner);\r\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\r\n            TokenOwnership memory ownership;\r\n            for (uint256 i; tokenIdsIdx != tokenIdsLength; ++i) {\r\n                ownership = _ownershipAt(i);\r\n                if (ownership.burned) {\r\n                    continue;\r\n                }\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    tokenIds[tokenIdsIdx++] = i;\r\n                }\r\n            }\r\n            return tokenIds;\r\n        }\r\n    } \r\n}\r\n"
6     },
7     "contracts/Base64.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
9     },
10     "contracts/ERC721A/ERC721A.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Reference type for token approval.\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\n            str := add(mload(0x40), 0x80)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, str)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "contracts/ERC721A/IERC721A.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "viaIR": true,
25     "optimizer": {
26       "enabled": true,
27       "runs": 1,
28       "details": {
29         "yul": true
30       }
31     },
32     "outputSelection": {
33       "*": {
34         "*": [
35           "evm.bytecode",
36           "evm.deployedBytecode",
37           "devdoc",
38           "userdoc",
39           "metadata",
40           "abi"
41         ]
42       }
43     },
44     "libraries": {}
45   }
46 }}