1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/MaterializerBurn.sol": {
5       "content": "/**\n *Submitted for verification at Etherscan.io on 2022-11-08\n*/\n\n/*            \n                      \n........~BY:^PB~............................................................................~?5B##B?\n......:?#&&B#&&#?!!~^:...................................................................:?G&&&&&&&&\n....~YB&&&&&&&&&@&&&&#G5?~:............................................................:J#@&&&&&&@&J\n...:B@&&&&&&&&&&&&&&&&&@@&#P?~........................................................!B@&&&&&@&#5~.\n.:Y#&&&&&&&&&&&&&&&&&&&&&&&@@&BY!:..................................................:Y&&&&@&#PJ!:...\n.^B@@&&&&&&&&&&&&&&&&&&&&&&&&&&@&B5!:..............................................:P@&&&BY!:.......\n..:!Y&@@&&&&@&&&&&&&&&&&&&&&&&&&&&@&B5!:..........................................:G@&@G7:..........\n.....^?J7~~!Y#&&&&&&&&&&&&&&&&&&&&&&&@&BY~........................................P@&#?.............\n...........  5@&&&&&&&&&&&&&&&&&&&&&&&&&@&P7:....................................Y@@B~..............\n.:!YPGBBBGG5P&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&BY~.................................Y@@B^...............\nJB&@&@@@@&&@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&G?^.............................Y&@B^................\n#@&&&#J5B&&@&&&&&&&&&&&&@&&@&&&&&&&&&&&&&&&&&&&&@#P7:........................^P@@B^.................\n~5B##? .:^7YPB#&@@@@@@&#P!^Y#@&&&&&&&&&&&&&&&&&&&&@&BY~:...................:?#@@#~..................\n..:^:........:^!7?JYJ?7^....^JB&@&&&&&&&&&&&&&&&&&&&&@&B5?~:.............^JB@&@G^...................\n..............................:7P#@@&&&&&&&&&&&&&&&&&&&&@@&BGY?7!~~~~!?YG&@@@&Y:....................\n.................................^?P#&@@&&&&&&&&&&&&&&&&&&&&&@@&&&&&&&@@&&&BY^......................\n....................................:!JPB#&&@@@@@@@@@&&&&&&&&&&&&&&&&&&&&P!:........................\n........................................:^~7?JY55PPPPPG#&@&&&&&&&&&&&&&&&#5:........................\n.......................................................:~?P&@&&&&&&&&&&&&&@G:.......................\n...........................................................~Y&&&&&&&&&&&&&&@Y.......................\n.............................................................~P@&&&&&&&&&&&&#^......................\n...............................................................Y&&&&&&&&&&&&@?......................\n................................................................5@&&&&&&&&&&@P......................\n................................................................:G@&&&&&&&&&&B:.....................\n.................................................................^G@&&&&&&&&&#^.....................\n..................................................................:Y&&&&&&&&&&~.....................\n....................................................................7#@&&&&&&&!.....................\n.....................................................................^5&@&&&&&P.....................\n.......................................................................~P&@&&&&G!:..................\n.........................................................................~Y#&@&&&B5~................\n...........................................................................:!5#&&&@P................\n............................................................................. ?@&&&#:...............\n..............................................................................Y@&&&@5...............\n..............................................................................5@&&&&@5..............\n..............................................................................7@&&&&&J..............\n...............................................................................Y&&&&&!..............\n................................................................................!P#&&7..............\n                                                                                        \n*/\n                                         \n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IERC721 {\n    function transferFrom(address, address, uint256) external;\n}\ncontract MaterializerBurn is Ownable, ReentrancyGuard {\n    event Materialized(address user, uint256[] tokenIds);\n\n    address public MaterializerContract = 0xD7504d848d3b83F0B0D2ef67F1ca14Ec13F05904;\n    IERC721 public Materializer = IERC721(MaterializerContract);\n\n    constructor() {\n    }\n\n    function burnMaterializer(uint256[] calldata _tokenIds) external nonReentrant {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            Materializer.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, _tokenIds[i]);\n        }\n        emit Materialized(msg.sender, _tokenIds);\n    }\n\n    function setMaterializerContract(address _contract) external onlyOwner {\n        MaterializerContract = _contract;\n        Materializer = IERC721(_contract);\n    }\n\n    function withdrawMoney() external onlyOwner {\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success, \"Withdraw failed.\");\n    }\n}"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": true,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     }
34   }
35 }}