1 pragma solidity ^0.4.18;
2 
3 /*
4 Game Name: WallCryptoStreet
5 Game Link: https://wallcryptostreet.net/
6 Rules: 
7 - Players can purchase companies and sell shares & ads to the other players. 
8 - Company owners receive a commission of 80% for the initial sell of their shares and 10% on consecutive sales.
9 - When a company sell an ad, 50% of the revenue is distributed among the shareholders, 40% to you and 10% to us. 
10 - Ads are visible until someone else pays more than the previous user. 
11 - Companies, shares and ads can be acquired for 1.5x the amount paid.
12 */
13 
14 contract WallCryptoStreet {
15 
16     address ceoAddress = 0x9aFbaA3003D9e75C35FdE2D1fd283b13d3335f00;
17     address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;
18     
19     modifier onlyCeo() {
20         require (msg.sender == ceoAddress);
21         _;
22     }
23     
24     struct Company {
25         string name;
26         address ownerAddress;
27         uint256 curPrice;
28         uint256 curAdPrice;
29         string curAdText;
30         string curAdLink;
31         uint256 volume;
32     }
33     Company[] companies;
34 
35     struct Share {
36         uint companyId;
37         address ownerAddress;
38         uint256 curPrice;
39     }
40     Share[] shares;
41 
42     // How many shares an addres own
43     mapping (address => uint) public addressSharesCount;
44     bool companiesAreInitiated;
45     bool isPaused;
46     
47     /*
48     We use the following functions to pause and unpause the game.
49     */
50     function pauseGame() public onlyCeo {
51         isPaused = true;
52     }
53     function unPauseGame() public onlyCeo {
54         isPaused = false;
55     }
56     function GetIsPauded() public view returns(bool) {
57        return(isPaused);
58     }
59 
60     /*
61     This function allows players to purchase companies from other players. 
62     The price is automatically multiplied by 1.5 after each purchase.
63     */
64     function purchaseCompany(uint _companyId) public payable {
65         require(msg.value == companies[_companyId].curPrice);
66         require(isPaused == false);
67 
68         // Calculate the 5% value
69         uint256 commission5percent = ((msg.value / 10)/2);
70 
71         // Calculate the owner commission on this sale & transfer the commission to the owner.      
72         uint256 commissionOwner = msg.value - commission5percent; // => 95%
73         companies[_companyId].ownerAddress.transfer(commissionOwner);
74 
75         // Transfer the 5% commission to the developer
76         cfoAddress.transfer(commission5percent); // => 5%                   
77 
78         // Update the company owner and set the new price
79         companies[_companyId].ownerAddress = msg.sender;
80         companies[_companyId].curPrice = companies[_companyId].curPrice + (companies[_companyId].curPrice / 2);
81         
82         // Increment volume generated by company
83         companies[_companyId].volume = companies[_companyId].volume + msg.value;
84     }
85     
86     /*
87     We use this function to allow users to purchase advertisment from a listing. 
88     Ad is visible until someone pays more than the previous user
89     */
90     function purchaseAd(uint _companyId, string adText, string adLink) public payable {
91         require(msg.value == companies[_companyId].curAdPrice);
92 
93         // Save text and link for the ad
94         companies[_companyId].curAdText = adText;
95         companies[_companyId].curAdLink = adLink;
96 
97         // Distribute the money paid among investors, company owner and dev
98         uint256 commission1percent = (msg.value / 100);
99         companies[_companyId].ownerAddress.transfer(commission1percent * 40);   // Company owner gets 40% of the amount paid
100         cfoAddress.transfer(commission1percent * 10);   // Dev gets a commission of 10% of the amount paid
101 
102         uint256 commissionShareholders = commission1percent * 50;   // 50% of the amount paid is distributed to shareholders
103         uint256 commissionOneShareholder = commissionShareholders / 5;
104 
105         // Get the list of shareholders for this company
106         address[] memory shareholdersAddresses = getCompanyShareholders(_companyId);
107         // We loop thrugh all of the shareholders and transfer their commission
108         for (uint8 i = 0; i < 5; i++) {
109             shareholdersAddresses[i].transfer(commissionOneShareholder);
110         }
111 
112         // Raise the price of the advertising
113         companies[_companyId].curAdPrice = companies[_companyId].curAdPrice + (companies[_companyId].curAdPrice / 2);
114 
115         // Increment volume generated by company
116         companies[_companyId].volume = companies[_companyId].volume + msg.value;
117     }
118 
119     /*
120     This function is used to handle the purchase of a share.
121     */
122     function purchaseShare(uint _shareId) public payable {
123         require(msg.value == shares[_shareId].curPrice);
124     
125         uint256 commission1percent = (msg.value / 100);
126         /*
127         We check if this is the first purchase of a share or a "repurchase".
128         If it's the first purchase we transfer a larger commission to the company owner
129         */
130         if(shares[_shareId].ownerAddress == cfoAddress) {
131             // This is the initial sale
132             companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 80); // 80% goes to the company owner
133             cfoAddress.transfer(commission1percent * 20);    // 20% goes to the dev
134         } else {
135             // This is a consecutive sale
136             shares[_shareId].ownerAddress.transfer(commission1percent * 85);    // 85% goes to the previous shareholder
137             companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 10); // 10% goes to the company owner
138             cfoAddress.transfer(commission1percent * 5);    // 5% goes to the dev
139         }
140         // Decrement count shares previous user
141         addressSharesCount[shares[_shareId].ownerAddress]--;
142         
143         // Update the owner of the share
144         shares[_shareId].ownerAddress = msg.sender;
145         addressSharesCount[msg.sender]++;
146         
147         // Raise the price of the share
148         shares[_shareId].curPrice = shares[_shareId].curPrice + (shares[_shareId].curPrice / 2);
149         
150         // Increment volume generated by company
151         companies[shares[_shareId].companyId].volume = companies[shares[_shareId].companyId].volume + msg.value;
152     }
153 
154     // This function will return an array of addresses of the company shareholders (very useful to transfer their ad commission)
155     function getCompanyShareholders(uint _companyId) public view returns(address[]) {
156         address[] memory result = new address[](5);
157         uint counter = 0;
158         for (uint i = 0; i < shares.length; i++) {
159           if (shares[i].companyId == _companyId) {
160             result[counter] = shares[i].ownerAddress;
161             counter++;
162           }
163         }
164         return result;
165     }
166 
167     /*
168     The owner of a company can reduce the price of the company using this function.
169     The price can be reduced but cannot be bigger.
170     The price is set in WEI.
171     */
172     function updateCompanyPrice(uint _companyId, uint256 _newPrice) public {
173         require(_newPrice > 0);
174         require(companies[_companyId].ownerAddress == msg.sender);
175         require(_newPrice < companies[_companyId].curPrice);
176         companies[_companyId].curPrice = _newPrice;
177     }
178     
179     /*
180     The owner of a share can reduce the price of the selected share using this function.
181     The price of the share can be reduced but cannot be bigger.
182     The price is set in WEI.
183     */
184     function updateSharePrice(uint _shareId, uint256 _newPrice) public {
185         require(_newPrice > 0);
186         require(shares[_shareId].ownerAddress == msg.sender);
187         require(_newPrice < shares[_shareId].curPrice);
188         shares[_shareId].curPrice = _newPrice;
189     }
190     
191     // This function will return the details of a company
192     function getCompany(uint _companyId) public view returns (
193         string name,
194         address ownerAddress,
195         uint256 curPrice,
196         uint256 curAdPrice,
197         string curAdText,
198         string curAdLink,
199         uint shareId,   // The id of the least expensive share of this company
200         uint256 sharePrice,  // The price of the least expensive share of this company
201         uint256 volume
202     ) {
203         Company storage _company = companies[_companyId];
204 
205         name = _company.name;
206         ownerAddress = _company.ownerAddress;
207         curPrice = _company.curPrice;
208         curAdPrice = _company.curAdPrice;
209         curAdText = _company.curAdText;
210         curAdLink = _company.curAdLink;
211         shareId = getLeastExpensiveShare(_companyId,0);
212         sharePrice = getLeastExpensiveShare(_companyId,1);
213         volume = _company.volume;
214     }
215 
216     // This function will return the details of a share
217     function getShare(uint _shareId) public view returns (
218         uint companyId,
219         address ownerAddress,
220         uint256 curPrice
221     ) {
222         Share storage _share = shares[_shareId];
223 
224         companyId = _share.companyId;
225         ownerAddress = _share.ownerAddress;
226         curPrice = _share.curPrice;
227     }
228     
229     /*
230     This function will return the shares owned by the sender.
231     */
232     function getMyShares() public view returns(uint[]) {
233         uint[] memory result = new uint[](addressSharesCount[msg.sender]);
234         uint counter = 0;
235         for (uint i = 0; i < shares.length; i++) {
236           if (shares[i].ownerAddress == msg.sender) {
237             result[counter] = i;
238             counter++;
239           }
240         }
241         return result;
242     }
243     
244     // Get least expensive share of one company
245     function getLeastExpensiveShare(uint _companyId, uint _type) public view returns(uint) {
246         uint _shareId = 0;
247         uint256 _sharePrice = 999000000000000000000;
248 
249         // Loop through all the shares of this company
250         for (uint8 i = 0; i < shares.length; i++) {
251             // Get only the shares of this company
252             if(shares[i].companyId == _companyId) {
253                 // Check if this share is less expensive than the previous and if it's not already owned by the connected user
254                 if(shares[i].curPrice < _sharePrice && shares[i].ownerAddress != msg.sender) {
255                     _sharePrice = shares[i].curPrice;
256                     _shareId = i;
257                 }
258             }
259         }
260 
261         // Return the price or the id of the company's least expensive share
262         if(_type == 0) {
263             return(_shareId);
264         } else {
265             return(_sharePrice);
266         }
267     }
268     
269     /**
270     @dev Multiplies two numbers, throws on overflow. => From the SafeMath library
271     */
272     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
273         if (a == 0) {
274           return 0;
275         }
276         uint256 c = a * b;
277         assert(c / a == b);
278         return c;
279     }
280 
281     /**
282     @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library
283     */
284     function div(uint256 a, uint256 b) internal pure returns (uint256) {
285         // assert(b > 0); // Solidity automatically throws when dividing by 0
286         uint256 c = a / b;
287         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
288         return c;
289     }
290     
291     // The dev can use this function to create new companies.
292     function createCompany(string _companyName, uint256 _companyPrice) public onlyCeo {
293         uint companyId = companies.push(Company(_companyName, cfoAddress, _companyPrice, 10000000000000000, "0", "#",0)) - 1;
294         // The initial price of a share is always the initial price of a company / 10.
295         uint256 sharePrice = _companyPrice / 10;
296         
297         // We create 5 shares for this company
298         shares.push(Share(companyId, cfoAddress, sharePrice));
299         shares.push(Share(companyId, cfoAddress, sharePrice));
300         shares.push(Share(companyId, cfoAddress, sharePrice));
301         shares.push(Share(companyId, cfoAddress, sharePrice));
302         shares.push(Share(companyId, cfoAddress, sharePrice));
303     }
304     
305     // Initiate functions that will create the companies
306     function InitiateCompanies() public onlyCeo {
307         require(companiesAreInitiated == false);
308         createCompany("Apple", 350000000000000000); 
309         createCompany("Snapchat", 200000000000000000); 
310         createCompany("Facebook", 250000000000000000); 
311         createCompany("Google", 250000000000000000); 
312         createCompany("Microsoft", 350000000000000000); 
313         createCompany("Nintendo", 150000000000000000); 
314         createCompany("Mc Donald", 250000000000000000); 
315         createCompany("Kodak", 100000000000000000);
316         createCompany("Twitter", 100000000000000000);
317 
318     }
319 }