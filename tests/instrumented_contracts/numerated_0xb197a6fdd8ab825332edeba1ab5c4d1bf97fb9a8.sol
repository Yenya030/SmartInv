1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/migration/ShibariumDAO2.sol": {
5       "content": "/**\n\n ______     __  __     __     ______     ______     ______     __     __  __     __    __    \n/\\  ___\\   /\\ \\_\\ \\   /\\ \\   /\\  == \\   /\\  __ \\   /\\  == \\   /\\ \\   /\\ \\/\\ \\   /\\ \"-./  \\   \n\\ \\___  \\  \\ \\  __ \\  \\ \\ \\  \\ \\  __<   \\ \\  __ \\  \\ \\  __<   \\ \\ \\  \\ \\ \\_\\ \\  \\ \\ \\-./\\ \\  \n \\/\\_____\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_____\\  \\ \\_\\ \\ \\_\\ \n  \\/_____/   \\/_/\\/_/   \\/_/   \\/_____/   \\/_/\\/_/   \\/_/ /_/   \\/_/   \\/_____/   \\/_/  \\/_/                                                                                              \n _____     ______     ______                                                                 \n/\\  __-.  /\\  __ \\   /\\  __ \\                                                                \n\\ \\ \\/\\ \\ \\ \\  __ \\  \\ \\ \\/\\ \\                                                               \n \\ \\____-  \\ \\_\\ \\_\\  \\ \\_____\\                                                              \n  \\/____/   \\/_/\\/_/   \\/_____/                                                              \n\n\n    Website: https://shibariumdao.io\n    Telegram: https://t.me/ShibariumDAO\n\n**/\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.7;\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IDEXFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ShibariumDAO2 is IERC20, Ownable {\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    string constant _name = \"Shibarium DAO\";\n    string constant _symbol = \"SHIBDAO\";\n    uint8 constant _decimals = 18;\n\n    uint256 _totalSupply = 1_000_000_000 * (10 ** _decimals);\n\n    mapping(address => uint256) _balances;\n    mapping(address => mapping(address => uint256)) _allowances;\n\n    mapping(address => bool) isFeeExempt;\n    mapping(address => bool) liquidityCreator;\n\n    uint256 totalFee = 500;\n    uint256 feeDenominator = 10000;\n\n    IDEXRouter public router;\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    mapping(address => bool) liquidityPools;\n\n    address public pair;\n\n    uint256 public launchedAt;\n    bool public swapEnabled = false;\n    bool startBullRun = false;\n\n    bool inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    address devWallet;\n    modifier onlyTeam() {\n        require(_msgSender() == devWallet, \"Caller is not a team member\");\n        _;\n    }\n\n    event FundsDistributed(uint256 marketingFee);\n\n    constructor() {\n        router = IDEXRouter(routerAddress);\n        pair = IDEXFactory(router.factory()).createPair(\n            router.WETH(),\n            address(this)\n        );\n        liquidityPools[pair] = true;\n        _allowances[owner()][routerAddress] = type(uint256).max;\n        _allowances[address(this)][routerAddress] = type(uint256).max;\n\n        isFeeExempt[owner()] = true;\n        isFeeExempt[address(this)] = true;\n        liquidityCreator[owner()] = true;\n\n        _balances[owner()] = _totalSupply;\n\n        emit Transfer(address(0), owner(), _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(\n        address holder,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMaximum(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function setTeamWallet(address _team) external onlyOwner {\n        devWallet = _team;\n    }\n\n    function feeWithdrawal(uint256 amount) external onlyTeam {\n        uint256 amountETH = address(this).balance;\n        payable(devWallet).transfer((amountETH * amount) / 100);\n    }\n\n    function launchTrading() external onlyOwner {\n        require(!startBullRun);\n        startBullRun = true;\n        launchedAt = block.number;\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] =\n                _allowances[sender][msg.sender] -\n                amount;\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        require(sender != address(0), \"ERC20: transfer from 0x0\");\n        require(recipient != address(0), \"ERC20: transfer to 0x0\");\n        require(amount > 0, \"Amount must be > zero\");\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n\n        if (!launched() && liquidityPools[recipient]) {\n            require(liquidityCreator[sender], \"Liquidity not added yet.\");\n            launch();\n        }\n\n        if (!startBullRun) {\n            require(\n                liquidityCreator[sender] || liquidityCreator[recipient],\n                \"Trading not open yet.\"\n            );\n        }\n\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        _balances[sender] = _balances[sender] - amount;\n\n        uint256 amountReceived = feeExcluded(sender)\n            ? takeFee(recipient, amount)\n            : amount;\n\n        if (shouldSwapBack(recipient)) {\n            if (amount > 0) swapBack();\n        }\n\n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n        swapEnabled = true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function feeExcluded(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function takeFee(\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        bool sellingOrBuying = liquidityPools[recipient] ||\n            liquidityPools[msg.sender];\n\n        if (!sellingOrBuying) {\n            return amount;\n        }\n\n        uint256 feeAmount = (amount * totalFee) / feeDenominator;\n        _balances[address(this)] += feeAmount;\n\n        return amount - feeAmount;\n    }\n\n    function shouldSwapBack(address recipient) internal view returns (bool) {\n        return\n            !liquidityPools[msg.sender] &&\n            !inSwap &&\n            swapEnabled &&\n            liquidityPools[recipient];\n    }\n\n    function swapBack() internal swapping {\n        if (_balances[address(this)] > 0) {\n            uint256 amountToSwap = _balances[address(this)];\n\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = router.WETH();\n\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amountToSwap,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n\n            emit FundsDistributed(amountToSwap);\n        }\n    }\n\n    function addLiquidityCreator(address _liquidityCreator) external onlyOwner {\n        liquidityCreator[_liquidityCreator] = true;\n    }\n\n    function changeSettings(bool _enabled) external onlyOwner {\n        swapEnabled = _enabled;\n    }\n\n    function getCurrentSupply() public view returns (uint256) {\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\n    }\n}\n"
6     }
7   },
8   "settings": {
9     "optimizer": {
10       "enabled": true,
11       "runs": 200
12     },
13     "outputSelection": {
14       "*": {
15         "*": [
16           "evm.bytecode",
17           "evm.deployedBytecode",
18           "devdoc",
19           "userdoc",
20           "metadata",
21           "abi"
22         ]
23       }
24     },
25     "libraries": {}
26   }
27 }}