1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/ArtistProxy.sol": {
5       "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IBrainDrops {\n   function mint(address recipient, uint _projectId) external payable returns (uint256);\n\n   function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) external;\n\n   function updateProjectDescription(uint256 _projectId, string memory _projectDescription) external;\n\n   function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) external;\n\n   function updateProjectLicense(uint256 _projectId, string memory _projectLicense) external;\n\n   function updateProjectBaseURI(uint256 _projectId, string memory _projectBaseURI) external;\n\n   function updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei) external;\n\n   function toggleProjectIsPaused(uint256 _projectId) external;\n\n   function setProvenanceHash(uint256 _projectId, string memory provenanceHash) external;\n\n   function balanceOf(address owner) external view returns (uint256 balance);\n\n   function ownerOf(uint256 tokenId) external view returns (address owner);\n\n   function isWhitelisted(address sender) external view returns (bool whitelisted);\n\n   function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\ninterface IDelegationRegistry {\n   function checkDelegateForContract(address delegate, address vault, address contract_) external returns(bool);\n}\n\ncontract ArtistProxy is Ownable, ReentrancyGuard {\n    constructor(address _braindropsAddress) {\n      braindrops = IBrainDrops(_braindropsAddress);\n    }\n\n    IBrainDrops public braindrops;\n    IDelegationRegistry public delegationRegistry;\n\n    mapping(uint256 => mapping(address => bool)) public projectIdToProxyDropAddressMinted;\n\n    mapping(uint256 => mapping(uint256 => bool)) public projectIdToGenesisDropTokenMinted;\n    mapping(uint256 => mapping(uint256 => bool)) public projectIdToProjectSpecificHoldersTokenMinted;\n\n    mapping(uint256 => address) public projectIdToArtistAddress;\n    mapping(uint256 => bool) public projectIdToProjectActivated;\n    mapping(uint256 => bool) public projectIdToHolderActivated;\n    mapping(uint256 => bool) public projectIdToGenesisDropActivated;\n    mapping(uint256 => bool) public projectIdToProjectIsAddressMintLimited;\n\n    mapping(uint256 => uint256) public projectIdToOlderProjectId;\n\n    modifier onlyArtist(uint256 _projectId) {\n        require(msg.sender == projectIdToArtistAddress[_projectId], \"Only artist\");\n        _;\n    }\n\n    modifier onlyArtistOrOwner(uint256 _projectId) {\n        require(msg.sender == projectIdToArtistAddress[_projectId] || msg.sender == owner(), \"Only artist or owner\");\n        _;\n    }\n\n    modifier onlyAllowListed() {\n        require(braindrops.isWhitelisted(msg.sender), \"Only allowListed\");\n        _;\n    }\n\n    modifier onlyHolders(uint256 _projectId) {\n        require(braindrops.balanceOf(msg.sender) > 0, \"Holders only\");\n        _;\n    }\n\n    function setDelegationRegistry(address _registryAddress) public onlyOwner {\n      delegationRegistry = IDelegationRegistry(_registryAddress);\n    }\n\n    function setArtist(uint projectId, address artistAddress) public onlyAllowListed {\n        projectIdToArtistAddress[projectId] = artistAddress;\n    }\n\n    function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) onlyArtist(_projectId) public {\n        braindrops.updateProjectArtistName(_projectId, _projectArtistName);\n    }\n\n    function updateProjectDescription(uint256 _projectId, string memory _projectDescription) onlyArtist(_projectId) public {\n        braindrops.updateProjectDescription(_projectId, _projectDescription);\n    }\n\n    function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) onlyArtist(_projectId) public {\n        braindrops.updateProjectWebsite(_projectId, _projectWebsite);\n    }\n\n    function updateProjectLicense(uint256 _projectId, string memory _projectLicense) onlyArtist(_projectId) public {\n        braindrops.updateProjectLicense(_projectId, _projectLicense);\n    }\n\n    function updateProjectBaseURI(uint256 _projectId, string memory _projectBaseURI) onlyArtist(_projectId) public {\n        braindrops.updateProjectBaseURI(_projectId, _projectBaseURI);\n    }\n\n    function updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei) onlyArtist(_projectId) public {\n        braindrops.updateProjectPricePerTokenInWei(_projectId, _pricePerTokenInWei);\n    }\n\n    function toggleProjectIsPaused(uint256 _projectId) public onlyArtist(_projectId) {\n        braindrops.toggleProjectIsPaused(_projectId);\n    }\n\n    function setProvenanceHash(uint256 _projectId, string memory provenanceHash) public onlyArtist(_projectId) {\n        braindrops.setProvenanceHash(_projectId, provenanceHash);\n    }\n\n    function toggleProjectIsAddressMintLimited(uint256 _projectId) public onlyArtist(_projectId) {\n        projectIdToProjectIsAddressMintLimited[_projectId] = !projectIdToProjectIsAddressMintLimited[_projectId];\n    }\n\n    function toggleProjectIsActive(uint256 _projectId) public onlyArtist(_projectId) {\n        projectIdToProjectActivated[_projectId] = !projectIdToProjectActivated[_projectId];\n    }\n\n    function toggleProjectIsHolderActive(uint256 _projectId) public onlyArtist(_projectId) {\n        projectIdToHolderActivated[_projectId] = !projectIdToHolderActivated[_projectId];\n    }\n\n    function toggleProjectIsGenesisDropActive(uint256 _projectId) public onlyArtist(_projectId) {\n        projectIdToGenesisDropActivated[_projectId] = !projectIdToGenesisDropActivated[_projectId];\n    }\n\n    function setProjectIdToOlderProjectId(uint256 _projectId, uint256 _olderProjectId) public onlyArtist(_projectId) {\n        projectIdToOlderProjectId[_projectId] = _olderProjectId;\n    }\n\n  function mintForArtistsOnly(address recipient, uint _projectId)\n        public\n        payable\n        onlyArtist(_projectId)\n        returns (uint256)\n      {\n          return braindrops.mint{value: msg.value}(recipient, _projectId);\n      }\n\n   function reserve(address recipient, uint _projectId, uint amount)\n        public\n        payable\n        onlyArtistOrOwner(_projectId)\n      {\n\n          uint b;\n          for (b = 0; b < amount; b++) {\n            braindrops.mint{value: (msg.value / amount)}(recipient, _projectId);\n          }\n      }\n\n  function mintForProjectSpecificHoldersOnly(address recipient, uint _projectId, uint _projectTokenId)\n        public\n        payable\n        nonReentrant\n        returns (uint256)\n      {\n          uint olderProjectId = projectIdToOlderProjectId[_projectId];\n          require(olderProjectId > 0, \"Project must be active for project-holder specific mints\");\n\n          uint _projectIdFromTokenId = (_projectTokenId - (_projectTokenId % 1000000)) / 1000000;\n          require(_projectIdFromTokenId == olderProjectId, \"must pass in a token id from the correct project\");\n          require(braindrops.ownerOf(_projectTokenId) == msg.sender, \"sender must own token id passed in\");\n\n          require(projectIdToGenesisDropTokenMinted[_projectId][_projectTokenId] == false, \"token already used to mint\");\n\n          projectIdToGenesisDropTokenMinted[_projectId][_projectTokenId] = true;\n\n          return braindrops.mint{value: msg.value}(recipient, _projectId);\n      }\n\n  function mintForGenesisDropHoldersOnly(address recipient, uint _projectId, uint _project1TokenId, uint _project2TokenId, uint _project3TokenId, address _vault)\n        public\n        payable\n        nonReentrant\n        returns (uint256)\n      {\n          address requester = msg.sender;\n\n          if (_vault != address(0)) {\n            bool isDelegateValid = delegationRegistry.checkDelegateForContract(msg.sender, _vault, address(braindrops));\n            require(isDelegateValid, \"invalid delegate-vault pairing\");\n            requester = _vault;\n          }\n\n          require(projectIdToGenesisDropActivated[_projectId], \"Project must be active for genesis set holders\");\n\n          uint _project1Id = (_project1TokenId - (_project1TokenId % 1000000)) / 1000000;\n          require(_project1Id == 1, \"must pass in a token id from project 1\");\n          require(projectIdToGenesisDropTokenMinted[_projectId][_project1TokenId] == false, \"project 1 token already used to mint\");\n\n          uint _project2Id = (_project2TokenId - (_project2TokenId % 1000000)) / 1000000;\n          require(_project2Id == 2, \"must pass in a token id from project 2\");\n          require(projectIdToGenesisDropTokenMinted[_projectId][_project2TokenId] == false, \"project 2 token already used to mint\");\n\n          uint _project3Id = (_project3TokenId - (_project3TokenId % 1000000)) / 1000000;\n          require(_project3Id == 3, \"must pass in a token id from project 3\");\n          require(projectIdToGenesisDropTokenMinted[_projectId][_project3TokenId] == false, \"project 3 token already used to mint\");\n\n          require(braindrops.ownerOf(_project1TokenId) == requester, \"must own the selected token from project 1\");\n          require(braindrops.ownerOf(_project2TokenId) == requester, \"must own the selected token from project 2\");\n          require(braindrops.ownerOf(_project3TokenId) == requester, \"must own the selected token from project 3\");\n\n          projectIdToGenesisDropTokenMinted[_projectId][_project1TokenId] = true;\n          projectIdToGenesisDropTokenMinted[_projectId][_project2TokenId] = true;\n          projectIdToGenesisDropTokenMinted[_projectId][_project3TokenId] = true;\n\n          return braindrops.mint{value: msg.value}(recipient, _projectId);\n      }\n\n  function mintForHoldersOnly(address recipient, uint _projectId)\n        public\n        payable\n        nonReentrant\n        onlyHolders(_projectId)\n        returns (uint256)\n      {\n          require(projectIdToHolderActivated[_projectId], \"Project must be active for holders\");\n\n          return braindrops.mint{value: msg.value}(recipient, _projectId);\n      }\n\n  function mint(address recipient, uint _projectId)\n        public\n        payable\n        nonReentrant\n        returns (uint256)\n      {\n          require(tx.origin == msg.sender, \"cannot be called from another contract\");\n          require(projectIdToProjectActivated[_projectId], \"Project must be active\");\n\n          if (projectIdToProjectIsAddressMintLimited[_projectId]) {\n            require(projectIdToProxyDropAddressMinted[_projectId][msg.sender] == false, \"One mint per address\");\n            projectIdToProxyDropAddressMinted[_projectId][msg.sender] = true;\n          }\n\n          return braindrops.mint{value: msg.value}(recipient, _projectId);\n      }\n\n  function withdraw() public onlyOwner {\n    uint balance = address(this).balance;\n    payable(msg.sender).transfer(balance);\n  }\n\n}\n\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}