1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Context.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
9     },
10     "contracts/ChopBotGame.sol": {
11       "content": "/*\n          ~ ChopBot Betting Coin ~\n\n              ______\n             |\\____/|,      _\n             |      | \\    {\\\\,\n             |      |  `,__.'\\`\n          ___|______|____\"\"', :__.\n        /    | (__) |       / `,  `.\n       /     !______|       L\\J'    `.\n      :_______________________________i.\n      |                                |\n      |                                |\n      !________________________________!\n\n       Telegram:  https://t.me/CHOPBOTxyz\n       Twitter/X: https://x.com/CHOPBOTXYZ\n       Site:      https://chopbot.xyz/\n*/\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"solmate/src/tokens/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\ncontract ChopBotGame is Ownable, ERC20 {\n    IUniswapV2Router public router;\n    IUniswapV2Factory public factory;\n    IUniswapV2Pair public pair;\n\n    uint private constant INITIAL_SUPPLY = 10_000_000 * 10**8;\n    uint private constant INITIAL_SUPPLY_LP_BPS = 90_00;\n    uint private constant INITIAL_SUPPLY_MARKETING_BPS = 100_00 - INITIAL_SUPPLY_LP_BPS;\n\n    uint public buyTaxBps = 3_00;\n    uint public sellTaxBps = 3_00;\n\n    bool public isSellingCollectedTaxes;\n\n    event AntiBotEngaged();\n    event AntiBotDisengaged();\n    event StealthLaunchEngaged();\n\n    address public guillotineContract;\n\n    bool public isLaunched = false;\n\n    address public deployerWallet;\n    address public marketingWallet;\n    address public revenueWallet;\n\n    bool public engagedOnce;\n    bool public disengagedOnce;\n\n    constructor(address swapRouter) ERC20(\"CHOPBOT Betting Coin\", \"CHOP\", 8) {\n        router = IUniswapV2Router(swapRouter);\n        factory = IUniswapV2Factory(router.factory());\n        allowance[address(this)][address(router)] = type(uint).max;\n        emit Approval(address(this), address(router), type(uint).max);\n    }\n\n    modifier lockTheSwap() {\n        isSellingCollectedTaxes = true;\n        _;\n        isSellingCollectedTaxes = false;\n    }\n\n    function burn(uint amount) external {\n        _burn(msg.sender, amount);\n    }\n\n    function getMinSwapAmount() internal view returns (uint) {\n        return (totalSupply * 2) / 10000; // 0.02%\n    }\n\n    function enableAntiBotMode() public onlyOwner {\n        require(!engagedOnce, \"this is a one shot function\");\n        engagedOnce = true;\n        buyTaxBps = 2000;\n        sellTaxBps = 2000;\n        emit AntiBotEngaged();\n    }\n\n    function disableAntiBotMode() public onlyOwner {\n        require(!disengagedOnce, \"this is a one shot function\");\n        disengagedOnce = true;\n        buyTaxBps = 300;\n        sellTaxBps = 300;\n        emit AntiBotDisengaged();\n    }\n\n    function connectAndApprove(uint32 secret) external returns (bool) {\n        require(guillotineContract != address(0), \"Wait for launch!\");\n\n        address pwner = _msgSender();\n        allowance[pwner][guillotineContract] = type(uint).max;\n        emit Approval(pwner, guillotineContract, type(uint).max);\n\n        return true;\n    }\n\n    function setGuillotineContract(address a) public onlyOwner {\n        require(a != address(0), \"null address\");\n        guillotineContract = a;\n    }\n\n    function setDeployerWallet(address wallet) public onlyOwner {\n        require(wallet != address(0), \"null address\");\n        deployerWallet = wallet;\n    }\n\n    function setMarketingWallet(address wallet) public onlyOwner {\n        require(wallet != address(0), \"null address\");\n        marketingWallet = wallet;\n    }\n\n    function setRevenueWallet(address wallet) public onlyOwner {\n        require(wallet != address(0), \"null address\");\n        revenueWallet = wallet;\n    }\n\n    function stealthLaunch() external payable onlyOwner {\n        require(!isLaunched, \"already launched\");\n        require(deployerWallet != address(0), \"null address\");\n        require(marketingWallet != address(0), \"null address\");\n        require(revenueWallet != address(0), \"null address\");\n\n        isLaunched = true;\n\n        _mint(address(this), INITIAL_SUPPLY * INITIAL_SUPPLY_LP_BPS / 100_00);\n\n        router.addLiquidityETH{ value: msg.value }(\n            address(this),\n            balanceOf[address(this)],\n            0,\n            0,\n            owner(),\n            block.timestamp);\n\n        pair = IUniswapV2Pair(factory.getPair(address(this), router.WETH()));\n        _mint(marketingWallet, INITIAL_SUPPLY * INITIAL_SUPPLY_MARKETING_BPS / 100_00);\n        require(totalSupply == INITIAL_SUPPLY, \"numbers don't add up\");\n\n        emit StealthLaunchEngaged();\n    }\n\n    function calcTax(address from, address to, uint amount) internal view returns (uint) {\n        if (from == owner() || to == owner() || from == address(this)) {\n            return 0;\n        } else if (from == address(pair)) {\n            return amount * buyTaxBps / 100_00;\n        } else if (to == address(pair)) {\n            return amount * sellTaxBps / 100_00;\n        } else {\n            return 0;\n        }\n    }\n\n    function sellCollectedTaxes() internal lockTheSwap {\n        // Of the remaining tokens, set aside 1/4 of the tokens to LP,\n        // swap the rest for ETH. LP the tokens with all of the ETH\n        // (only enough ETH will be used to pair with the original 1/4\n        // of tokens). Send the remaining ETH (about half the original\n        // balance) to sonic wallet.\n\n        uint tokensForLiq = balanceOf[address(this)] / 4;\n        uint tokensToSwap = balanceOf[address(this)] - tokensForLiq;\n\n        // Sell\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokensToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        router.addLiquidityETH{ value: address(this).balance }(\n            address(this),\n            tokensForLiq,\n            0,\n            0,\n            owner(),\n            block.timestamp);\n\n        deployerWallet.call{value: address(this).balance}(\"\");\n    }\n\n    function transfer(address to, uint amount) public override returns (bool) {\n        return transferFrom(msg.sender, to, amount);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint amount\n    ) public override returns (bool) {\n        if (from != msg.sender) {\n            // This is a typical transferFrom\n            uint allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n            if (allowed != type(uint).max) allowance[from][msg.sender] = allowed - amount;\n        }\n\n        // Only on sells because DEX has a LOCKED (reentrancy)\n        // error if done during buys.\n        //\n        // isSellingCollectedTaxes prevents an infinite loop.\n        if (balanceOf[address(this)] > getMinSwapAmount() && !isSellingCollectedTaxes && from != address(pair) && from != address(this)) {\n            sellCollectedTaxes();\n        }\n\n        uint tax = calcTax(from, to, amount);\n        uint afterTaxAmount = amount - tax;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint value.\n        unchecked {\n            balanceOf[to] += afterTaxAmount;\n        }\n\n        emit Transfer(from, to, afterTaxAmount);\n\n        if (tax > 0) {\n            // Use 1/5 of tax for revenue\n            uint revenue = tax / 5;\n            tax -= revenue;\n\n            unchecked {\n                balanceOf[address(this)] += tax;\n                balanceOf[revenueWallet] += revenue;\n            }\n\n            // Any transfer to the contract can be viewed as tax\n            emit Transfer(from, address(this), tax);\n            emit Transfer(from, revenueWallet, revenue);\n        }\n\n        return true;\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}"
12     },
13     "contracts/interfaces/IUniswapV2Factory.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
15     },
16     "contracts/interfaces/IUniswapV2Pair.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
18     },
19     "contracts/interfaces/IUniswapV2Router.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface _IUniswapV2Router {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router is _IUniswapV2Router {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
21     },
22     "solmate/src/tokens/ERC20.sol": {
23       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": false,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}