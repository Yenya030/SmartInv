1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/fundraising/FractonSwap.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\n\nimport '../interface/IFractonMiniNFT.sol';\nimport '../interface/IFractonFFT.sol';\nimport '../interface/IFractonSwap.sol';\nimport '../interface/IFractonTokenFactory.sol';\n\ncontract FractonSwap is\n  ERC721Holder,\n  ERC1155Holder,\n  Ownable,\n  IFractonSwap,\n  VRFConsumerBaseV2\n{\n  uint256 public swapRate = 1E21;\n  uint256 public fftTax = 3E18;\n  uint256 public nftTax = 3;\n  address public tokenFactory;\n  address public vrfRescuer;\n\n  mapping(uint256 => ChainLinkRequest) public chainLinkRequests;\n  mapping(address => uint256[]) public NFTIds;\n  mapping(address => address) public NFTtoMiniNFT;\n  mapping(address => address) public miniNFTtoFFT;\n\n  // Chinlink VRF\n  VRFCoordinatorV2Interface COORDINATOR;\n  bytes32 public keyHash;\n  uint32 public callbackGasLimit = 1000000;\n  uint32 public numWords = 1;\n  uint16 public requestConfirmations = 3;\n  uint64 public subscriptionId;\n  uint256[] public s_randomWords;\n\n  constructor(\n    address vrfCoordinator_,\n    address vrfRescuer_,\n    bytes32 keyHash_,\n    uint64 subscriptionId_\n  ) VRFConsumerBaseV2(vrfCoordinator_) {\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator_);\n    vrfRescuer = vrfRescuer_;\n    keyHash = keyHash_;\n    subscriptionId = subscriptionId_;\n  }\n\n  modifier onlyDAO() {\n    address dao = IFractonTokenFactory(tokenFactory).getDAOAddress();\n    require(msg.sender == dao, 'Fracton: caller is not Fracton DAO');\n    _;\n  }\n\n  modifier onlyFactoryOrOwner() {\n    require(\n      msg.sender == tokenFactory || msg.sender == owner(),\n      'Invalid Caller'\n    );\n    _;\n  }\n\n  function updatePoolRelation(\n    address miniNFT,\n    address FFT,\n    address NFT\n  ) external virtual override onlyFactoryOrOwner returns (bool) {\n    miniNFTtoFFT[miniNFT] = FFT;\n    NFTtoMiniNFT[NFT] = miniNFT;\n    emit UpdatePoolRelation(msg.sender, miniNFT, FFT, NFT);\n    return true;\n  }\n\n  function poolClaim(address miniNFTContract, uint256 tokenID)\n    external\n    virtual\n    override\n    returns (bool)\n  {\n    require(\n      miniNFTtoFFT[miniNFTContract] != address(0),\n      'swap: invalid contract'\n    );\n    require(IFractonMiniNFT(miniNFTContract).claimBlindBox(tokenID) > 0);\n\n    emit PoolClaim(msg.sender, miniNFTContract, tokenID);\n    return true;\n  }\n\n  function swapMiniNFTtoFFT(\n    address miniNFTContract,\n    uint256 tokenID,\n    uint256 amount\n  ) external virtual override returns (bool) {\n    require(\n      miniNFTtoFFT[miniNFTContract] != address(0),\n      'swap: invalid contract'\n    );\n\n    uint256 miniNFTBalance = IERC1155(miniNFTContract).balanceOf(\n      msg.sender,\n      tokenID\n    );\n    require(miniNFTBalance >= amount, 'swap: balance insufficient');\n\n    IERC1155(miniNFTContract).safeTransferFrom(\n      msg.sender,\n      address(this),\n      tokenID,\n      amount,\n      ''\n    );\n\n    require(\n      IFractonFFT(miniNFTtoFFT[miniNFTContract]).swapmint(\n        amount * swapRate,\n        msg.sender\n      )\n    );\n\n    emit SwapMiniNFTtoFFT(msg.sender, miniNFTContract, tokenID, amount);\n    return true;\n  }\n\n  function swapFFTtoMiniNFT(address miniNFTContract, uint256 miniNFTAmount)\n    external\n    virtual\n    override\n    returns (bool)\n  {\n    require(\n      miniNFTtoFFT[miniNFTContract] != address(0),\n      'swap: invalid contract'\n    );\n    require(\n      IERC1155(miniNFTContract).balanceOf(address(this), 0) >= miniNFTAmount,\n      'swap:insufficient miniNFT in pool'\n    );\n    uint256 FFTamount = miniNFTAmount * swapRate;\n    uint256 taxfee = miniNFTAmount * fftTax;\n\n    require(\n      IFractonFFT(miniNFTtoFFT[miniNFTContract]).burnFrom(msg.sender, FFTamount)\n    );\n\n    require(\n      IFractonFFT(miniNFTtoFFT[miniNFTContract]).transferFrom(\n        msg.sender,\n        IFractonTokenFactory(tokenFactory).getVaultAddress(),\n        taxfee\n      )\n    );\n    IERC1155(miniNFTContract).safeTransferFrom(\n      address(this),\n      msg.sender,\n      0,\n      miniNFTAmount,\n      ''\n    );\n\n    emit SwapFFTtoMiniNFT(msg.sender, miniNFTContract, miniNFTAmount);\n    return true;\n  }\n\n  function swapMiniNFTtoNFT(address NFTContract)\n    external\n    virtual\n    override\n    returns (bool)\n  {\n    address miniNFTContract = NFTtoMiniNFT[NFTContract];\n    require(miniNFTContract != address(0), 'swap: invalid contract');\n    require(NFTIds[NFTContract].length > 0, 'swap: no NFT left');\n\n    uint256 requestId = COORDINATOR.requestRandomWords(\n      keyHash,\n      subscriptionId,\n      requestConfirmations,\n      callbackGasLimit,\n      numWords\n    );\n\n    chainLinkRequests[requestId] = ChainLinkRequest(msg.sender, NFTContract);\n\n    emit SendChainlinkVRF(requestId, msg.sender, NFTContract);\n    return true;\n  }\n\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n    internal\n    virtual\n    override\n  {\n    address sender = chainLinkRequests[requestId].sender;\n\n    address NFTContract = chainLinkRequests[requestId].nft;\n\n    address miniNFTContract = NFTtoMiniNFT[NFTContract];\n\n    uint256 NFTNumber = NFTIds[NFTContract].length;\n\n    require(NFTNumber > 0, 'swap: no NFT left');\n\n    uint256 NFTIndex = randomWords[0] % NFTNumber;\n\n    uint256 NFTID = NFTIds[NFTContract][NFTIndex];\n\n    NFTIds[NFTContract][NFTIndex] = NFTIds[NFTContract][NFTNumber - 1];\n    NFTIds[NFTContract].pop();\n\n    IERC1155(miniNFTContract).safeTransferFrom(\n      sender,\n      address(this),\n      0,\n      1000,\n      ''\n    );\n\n    IFractonMiniNFT(miniNFTContract).burn(1000);\n\n    IERC1155(miniNFTContract).safeTransferFrom(\n      sender,\n      IFractonTokenFactory(tokenFactory).getVaultAddress(),\n      0,\n      nftTax,\n      ''\n    );\n\n    IERC721(NFTContract).transferFrom(address(this), sender, NFTID);\n\n    emit SwapMiniNFTtoNFT(sender, NFTContract, NFTID);\n  }\n\n  function swapNFTtoMiniNFT(\n    address NFTContract,\n    address fromOwner,\n    uint256 tokenId\n  ) external virtual override onlyDAO returns (bool) {\n    address miniNFTContract = NFTtoMiniNFT[NFTContract];\n\n    require(miniNFTContract != address(0), 'swap: invalid contract');\n\n    IERC721(NFTContract).safeTransferFrom(fromOwner, address(this), tokenId);\n\n    require(IFractonMiniNFT(miniNFTContract).swapmint(1000, fromOwner));\n\n    return true;\n  }\n\n  function withdrawERC20(address project, uint256 amount)\n    external\n    onlyDAO\n    returns (bool)\n  {\n    require(\n      IERC20(project).transfer(msg.sender, amount),\n      'swap: withdraw failed'\n    );\n    return true;\n  }\n\n  function withdrawERC721(address airdropContract, uint256 tokenId)\n    external\n    onlyDAO\n    returns (bool)\n  {\n    require(\n      NFTtoMiniNFT[airdropContract] == address(0),\n      'swap: cannot withdraw ProjectNFT'\n    );\n\n    IERC721(airdropContract).safeTransferFrom(\n      address(this),\n      msg.sender,\n      tokenId\n    );\n\n    return true;\n  }\n\n  function withdrawERC1155(\n    address airdropContract,\n    uint256 tokenId,\n    uint256 amount\n  ) external onlyDAO returns (bool) {\n    require(\n      miniNFTtoFFT[airdropContract] == address(0),\n      'swap: cannot withdraw ProjectNFT'\n    );\n\n    IERC1155(airdropContract).safeTransferFrom(\n      address(this),\n      msg.sender,\n      tokenId,\n      amount,\n      ''\n    );\n\n    return true;\n  }\n\n  function updateFactory(address factory_) external onlyOwner returns (bool) {\n    require(tokenFactory == address(0), 'swap: factory has been set');\n    require(factory_ != address(0), 'swap: factory can not be 0 address');\n\n    tokenFactory = factory_;\n\n    emit UpdateFactory(factory_);\n    return true;\n  }\n\n  function updateTax(uint256 fftTax_, uint256 nftTax_)\n    external\n    onlyDAO\n    returns (bool)\n  {\n    fftTax = fftTax_;\n    nftTax = nftTax_;\n\n    emit UpdateTax(fftTax_, nftTax_);\n    return true;\n  }\n\n  function updateCallbackGasLimit(uint32 gasLimit_)\n    external\n    override\n    onlyDAO\n    returns (bool)\n  {\n    callbackGasLimit = gasLimit_;\n    return true;\n  }\n\n  // only used when Chainlink VRF Service is down\n  function emergencyUpdateVrf(address vrfCoordinator_) external {\n    require(msg.sender == vrfRescuer, 'swap: invalid caller');\n    require(vrfCoordinator_ != address(0), 'swap: invaild coordiantor address');\n\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator_);\n  }\n\n  function updateVrfSubscriptionId(uint64 subscriptionId_)\n    external\n    override\n    onlyDAO\n    returns (bool)\n  {\n    subscriptionId = subscriptionId_;\n    return true;\n  }\n\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) public virtual override returns (bytes4) {\n    NFTIds[msg.sender].push(tokenId);\n    return super.onERC721Received(operator, from, tokenId, data);\n  }\n\n  function numberOfNFT(address NFTContract) external view returns (uint256) {\n    return NFTIds[NFTContract].length;\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
27     },
28     "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
30     },
31     "contracts/interface/IFractonMiniNFT.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFractonMiniNFT {\n  event StartNewRound(uint256 blockNumber, uint256 sellingPrice);\n\n  event CloseRound(uint256 blockNumber);\n\n  event ClaimBlindBox(address owner, uint256 tokenID, uint256 amount);\n\n  event WithdrawEther(address caller, uint256 amount);\n\n  event UpdateRoundSucceed(uint256 round, uint256 blockNumber);\n\n  event UpdateBlindBoxPrice(uint256 price);\n\n  function startNewRound(uint256 sellingPrice) external returns (bool);\n\n  function closeRound() external returns (bool);\n\n  function mintBlindBox(uint256 amount) external payable returns (uint256);\n\n  function claimBlindBox(uint256 tokenID) external returns (uint256);\n\n  function withdrawEther() external returns (bool);\n\n  function updateRoundSucceed(uint256 round) external returns (bool);\n\n  function updateBlindBoxPrice(uint256 BBoxPrice) external returns (bool);\n\n  function totalSupply(uint256 id) external view returns (uint256);\n\n  function burn(uint256 amount) external;\n\n  function swapmint(uint256 amount, address to) external returns (bool);\n}\n"
33     },
34     "contracts/interface/IFractonFFT.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IFractonFFT is IERC20 {\n  event SetPercent(uint256 vaultPercent, uint256 pfVaultPercent);\n\n  function swapmint(uint256 amount, address to) external returns (bool);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts)\n    external;\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n\n  function burnFrom(address from, uint256 value) external returns (bool);\n\n  function isExcludedFromFee(address account) external view returns (bool);\n\n  function updateFee(uint256 vaultPercent_, uint256 pfVaultPercent_)\n    external\n    returns (bool);\n}\n"
36     },
37     "contracts/interface/IFractonSwap.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFractonSwap {\n  event UpdatePoolRelation(\n    address editor,\n    address miniNFT,\n    address FFT,\n    address NFT\n  );\n\n  event PoolClaim(address owner, address miniNFTcontract, uint256 tokenID);\n\n  event SwapMiniNFTtoFFT(\n    address owner,\n    address miniNFTcontract,\n    uint256 tokenID,\n    uint256 miniNFTAmount\n  );\n\n  event SwapFFTtoMiniNFT(\n    address owner,\n    address miniNFTcontract,\n    uint256 miniNFTAmount\n  );\n\n  event SendChainlinkVRF(\n    uint256 requestId,\n    address sender,\n    address NFTContract\n  );\n\n  event SwapMiniNFTtoNFT(address owner, address NFTContract, uint256 NFTID);\n\n  event UpdateFactory(address factory);\n\n  event UpdateTax(uint256 fftTax, uint256 nftTax);\n\n  struct ChainLinkRequest {\n    address sender;\n    address nft;\n  }\n\n  function updatePoolRelation(\n    address miniNFT,\n    address FFT,\n    address NFT\n  ) external returns (bool);\n\n  function poolClaim(address miniNFTcontract, uint256 tokenID)\n    external\n    returns (bool);\n\n  function swapMiniNFTtoFFT(\n    address miniNFTcontract,\n    uint256 tokenID,\n    uint256 amount\n  ) external returns (bool);\n\n  function swapFFTtoMiniNFT(address miniNFTcontract, uint256 miniNFTamount)\n    external\n    returns (bool);\n\n  function swapMiniNFTtoNFT(address NFTContract) external returns (bool);\n\n  function swapNFTtoMiniNFT(\n    address NFTContract,\n    address fromOwner,\n    uint256 tokenId\n  ) external returns (bool);\n\n  function updateCallbackGasLimit(uint32 gasLimit_) external returns (bool);\n\n  function updateVrfSubscriptionId(uint64 subscriptionId_)\n    external\n    returns (bool);\n}\n"
39     },
40     "contracts/interface/IFractonTokenFactory.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFractonTokenFactory {\n  function getowner() external view returns (address);\n\n  function getDAOAddress() external view returns (address);\n\n  function getVaultAddress() external view returns (address);\n\n  function getSwapAddress() external view returns (address);\n\n  function getPoolFundingVaultAddress() external view returns (address);\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
51     },
52     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
57     },
58     "@openzeppelin/contracts/utils/Context.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": false,
65       "runs": 200
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "libraries": {}
80   }
81 }}