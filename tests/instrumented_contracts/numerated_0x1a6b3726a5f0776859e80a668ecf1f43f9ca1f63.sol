1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/MergeMana.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport './RendererPropsStorage.sol';\nimport './interfaces/IDataStorage.sol';\nimport './Merge.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Base64.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@abf-monorepo/protocol/contracts/renderers/LayerCompositeRenderer.sol';\nimport '@abf-monorepo/protocol/contracts/libraries/BytesUtils.sol';\n\ncontract MergeMana is Ownable {\n  using Strings for uint256;\n\n  Merge public merge;\n\n  bool public emergencyShutdown = false;\n\n  // mana\n  uint256 public numDecimals;\n\n  IDataStorage public baseManaStorage;\n  uint256 public baseManaMultiplier;\n\n  mapping(address => bool) public manaModifier;\n\n  mapping(uint256 => uint256) public boostedMana;\n  mapping(uint256 => uint256) public consumedMana;\n\n  // decay\n  uint256 public manaDecayPerBlock;\n  uint256 public manaDecayStartBlock;\n\n  // boost\n  uint256 public manaBoostRitualMultiplier;\n  uint256 public maxManaBoostRitualBalance;\n\n  // channeling\n  bool public isChannelingRitualActive = false;\n  mapping(uint256 => uint256) public channelingRitualDestinationTokenId;\n  mapping(uint256 => uint256) public channeledMana;\n  mapping(uint256 => uint256) public numChanneledToTokenId;\n\n  event ChangedEmergencyShutdown(bool shutdown);\n  event ConsumedMana(uint256 tokenId, uint256 amount);\n  event IncreasedMana(uint256 tokenId, uint256 amount);\n  event ChanneledStatue(uint256 from, uint256 to, uint256 amount);\n  event BoostedMana(address booster, uint256 tokenId, uint256 amount);\n\n  struct DeployMergeManaConfig {\n    address merge;\n    address baseManaStorage;\n    uint256 manaBoostRitualMultiplier;\n    uint256 maxManaBoostRitualBalance;\n    uint256 baseManaMultiplier;\n    uint256 numDecimals;\n  }\n\n  constructor(DeployMergeManaConfig memory config) {\n    merge = Merge(config.merge);\n    manaBoostRitualMultiplier = config.manaBoostRitualMultiplier;\n    baseManaStorage = IDataStorage(config.baseManaStorage);\n    maxManaBoostRitualBalance = config.maxManaBoostRitualBalance;\n    baseManaMultiplier = config.baseManaMultiplier;\n    numDecimals = config.numDecimals;\n  }\n\n  function setNumDecimals(uint256 _numDecimals) public onlyOwner {\n    numDecimals = _numDecimals;\n  }\n\n  function setBaseManaStorage(address _baseManaStorage) public onlyOwner {\n    baseManaStorage = IDataStorage(_baseManaStorage);\n  }\n\n  function setBaseManaMultiplier(uint256 _baseManaMultiplier) public onlyOwner {\n    baseManaMultiplier = _baseManaMultiplier;\n  }\n\n  function setMaxManaBoostRitualBalance(uint256 _maxManaBoostRitualBalance)\n    public\n    onlyOwner\n  {\n    maxManaBoostRitualBalance = _maxManaBoostRitualBalance;\n  }\n\n  function setManaBoostRitualMultiplier(uint256 _manaBoostRitualMultiplier)\n    public\n    onlyOwner\n  {\n    manaBoostRitualMultiplier = _manaBoostRitualMultiplier;\n  }\n\n  function setManaDecayPerBlock(uint256 _manaDecayPerBlock) public onlyOwner {\n    manaDecayPerBlock = _manaDecayPerBlock;\n  }\n\n  function setManaDecayStartBlock(uint256 _manaDecayStartBlock)\n    public\n    onlyOwner\n  {\n    manaDecayStartBlock = _manaDecayStartBlock;\n  }\n\n  function setManaModifier(address _manaModifier, bool status)\n    public\n    onlyOwner\n  {\n    manaModifier[_manaModifier] = status;\n  }\n\n  function setMerge(address _merge) public onlyOwner {\n    merge = Merge(_merge);\n  }\n\n  function setIsChannelingRitualActive(bool _isChannelingRitualActive)\n    public\n    onlyOwner\n  {\n    isChannelingRitualActive = _isChannelingRitualActive;\n    emit ChangedEmergencyShutdown(isChannelingRitualActive);\n  }\n\n  function setEmergencyShutdown(bool shutdown) public onlyOwner {\n    emergencyShutdown = shutdown;\n    emit ChangedEmergencyShutdown(shutdown);\n  }\n\n  function isMergeByDifficulty() public view virtual returns (bool) {\n    return (block.difficulty > (2**64)) || (block.difficulty == 0);\n  }\n\n  modifier onlyIsNotShutdown() {\n    require(!emergencyShutdown, 'MergeMana: Emergency shutdown is in place');\n    _;\n  }\n\n  modifier onlyIsNotMergeOrChannelingNotActive() {\n    require(\n      !isMergeByDifficulty() && !isChannelingRitualActive,\n      'MergeMana: Action only can occur before merge'\n    );\n    _;\n  }\n\n  modifier onlyIsChannelingRitualActive() {\n    require(\n      isChannelingRitualActive,\n      'MergeMana: Action only can occur after merge'\n    );\n    _;\n  }\n\n  modifier onlyManaModifier() {\n    require(manaModifier[msg.sender], 'MergeMana: Not a mana modifier');\n    _;\n  }\n\n  /**\n   * Mana based logic\n   */\n\n  function getTotalMana(uint256 id) public view returns (uint256) {\n    return getInherentMana(id) + getBoostedMana(id) + getChanneledMana(id);\n  }\n\n  function getTotalManaWithNoPenalties(uint256 id)\n    public\n    view\n    returns (uint256)\n  {\n    return\n      getInherentManaWithNoPenalties(id) + boostedMana[id] + channeledMana[id];\n  }\n\n  function getTotalManaPenalties(uint256 id) public view returns (uint256) {\n    uint256 decay = getManaDecay();\n    uint256 consumedAmount = consumedMana[id];\n    return decay + consumedAmount;\n  }\n\n  function getChanneledMana(uint256 id) public view returns (uint256) {\n    uint256 totalPenalties = getTotalManaPenalties(id);\n    if (totalPenalties > channeledMana[id]) {\n      return 0;\n    }\n    return channeledMana[id] - totalPenalties;\n  }\n\n  function getBoostedMana(uint256 id) public view returns (uint256) {\n    uint256 totalPenalties = getTotalManaPenalties(id);\n\n    if (totalPenalties > channeledMana[id]) {\n      uint256 leftOverManaPenalty = totalPenalties - channeledMana[id];\n      if (leftOverManaPenalty > boostedMana[id]) {\n        return 0;\n      }\n      return boostedMana[id] - leftOverManaPenalty;\n    }\n\n    return boostedMana[id];\n  }\n\n  function getInherentManaWithNoPenalties(uint256 id)\n    public\n    view\n    returns (uint256)\n  {\n    if (channelingRitualDestinationTokenId[id] != 0) {\n      return 0;\n    }\n    if (address(baseManaStorage) == address(0)) {\n      return 0;\n    }\n    return\n      uint256(uint8(baseManaStorage.indexToData(id)[0])) * baseManaMultiplier;\n  }\n\n  function getInherentMana(uint256 id) public view returns (uint256) {\n    uint256 lowerMana = boostedMana[id] + channeledMana[id];\n    uint256 totalPenalties = getTotalManaPenalties(id);\n    uint256 inherentManaWithNoPenalties = getInherentManaWithNoPenalties(id);\n\n    if (totalPenalties > lowerMana) {\n      uint256 leftOverManaPenalty = totalPenalties - lowerMana;\n      if (leftOverManaPenalty > inherentManaWithNoPenalties) {\n        return 0;\n      }\n      return inherentManaWithNoPenalties - leftOverManaPenalty;\n    }\n\n    return inherentManaWithNoPenalties;\n  }\n\n  function getManaDecay() public view returns (uint256) {\n    if (manaDecayStartBlock == 0) {\n      return 0;\n    }\n    return (block.number - manaDecayStartBlock) * manaDecayPerBlock;\n  }\n\n  function consumeMana(uint256 id, uint256 amount)\n    public\n    onlyIsNotShutdown\n    onlyManaModifier\n  {\n    require(\n      amount <= getTotalMana(id),\n      'MergeMana: Can not consume more mana than what exists in statue'\n    );\n    consumedMana[id] += amount;\n    emit ConsumedMana(id, amount);\n  }\n\n  function increaseMana(uint256 id, uint256 amount)\n    public\n    onlyIsNotShutdown\n    onlyManaModifier\n  {\n    if (channelingRitualDestinationTokenId[id] == 0) {\n      boostedMana[id] += amount;\n    } else {\n      channeledMana[channelingRitualDestinationTokenId[id]] += amount;\n    }\n    emit IncreasedMana(id, amount);\n  }\n\n  function _channelMana(uint256 from, uint256 to) internal {\n    uint256 inherentManaAndBoostedMana = getInherentMana(from) +\n      getBoostedMana(from);\n    channeledMana[to] += inherentManaAndBoostedMana;\n    numChanneledToTokenId[to]++;\n    channelingRitualDestinationTokenId[from] = to;\n    boostedMana[from] = 0;\n    emit ChanneledStatue(from, to, inherentManaAndBoostedMana);\n  }\n\n  function safeChannelManaRitual(uint256[] memory from, uint256 to)\n    public\n    onlyIsChannelingRitualActive\n    onlyIsNotShutdown\n  {\n    for (uint256 i = 0; i < from.length; ++i) {\n      if (to != 0 && channelingRitualDestinationTokenId[from[i]] == 0) {\n        _channelMana(from[i], to);\n      }\n    }\n  }\n\n  function channelManaRitual(uint256[] memory from, uint256 to)\n    public\n    onlyIsChannelingRitualActive\n    onlyIsNotShutdown\n  {\n    for (uint256 i = 0; i < from.length; ++i) {\n      require(to != 0, 'MergeMana: Can not channel to tokenId zero');\n      require(\n        channelingRitualDestinationTokenId[from[i]] == 0,\n        'MergeMana: Mana has already been channeled'\n      );\n      _channelMana(from[i], to);\n    }\n  }\n\n  function getBoostManaRitualAmount(address booster)\n    public\n    view\n    returns (uint256)\n  {\n    uint256 balance = merge.balanceOf(booster);\n    return\n      manaBoostRitualMultiplier *\n      (\n        balance > maxManaBoostRitualBalance\n          ? maxManaBoostRitualBalance\n          : balance\n      ) *\n      merge.getCurrentRarityScore(booster);\n  }\n\n  function _boostMana(uint256 tokenId, uint256 amount) internal {\n    boostedMana[tokenId] = amount;\n    emit BoostedMana(msg.sender, tokenId, amount);\n  }\n\n  function manaBoostRitual(uint256[] memory tokenIds)\n    public\n    onlyIsNotMergeOrChannelingNotActive\n    onlyIsNotShutdown\n  {\n    uint256 boostedManaAmount = getBoostManaRitualAmount(msg.sender);\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\n      require(\n        merge.ownerOf(tokenIds[i]) == msg.sender,\n        'MergeMana: Can not boost token you do not own'\n      );\n      require(\n        boostedMana[tokenIds[i]] == 0,\n        'MergeMana: Can not boost tokens that are already boosted'\n      );\n      _boostMana(tokenIds[i], boostedManaAmount);\n    }\n  }\n\n  function safeManaBoostRitual(uint256[] memory tokenIds)\n    public\n    onlyIsNotMergeOrChannelingNotActive\n    onlyIsNotShutdown\n  {\n    uint256 boostedManaAmount = getBoostManaRitualAmount(msg.sender);\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\n      if (\n        merge.ownerOf(tokenIds[i]) == msg.sender &&\n        boostedMana[tokenIds[i]] == 0\n      ) {\n        _boostMana(tokenIds[i], boostedManaAmount);\n      }\n    }\n  }\n}\n"
6     },
7     "contracts/RendererPropsStorage.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport './libraries/SSTORE2Map.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Base64.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@abf-monorepo/protocol/contracts/renderers/LayerCompositeRenderer.sol';\nimport '@abf-monorepo/protocol/contracts/libraries/BytesUtils.sol';\n\ncontract RendererPropsStorage is Ownable {\n  uint256 public constant MAX_UINT_16 = 0xFFFF;\n\n  // index starts from zero, useful to use the 0th index as a empty case.\n  uint16 public currentMaxRendererPropsIndex = 0;\n\n  constructor() {}\n\n  function batchAddRendererProps(bytes[] calldata rendererProps)\n    public\n    onlyOwner\n  {\n    for (uint16 i = 0; i < rendererProps.length; ++i) {\n      SSTORE2Map.write(\n        bytes32(uint256(currentMaxRendererPropsIndex + i)),\n        rendererProps[i]\n      );\n    }\n    currentMaxRendererPropsIndex += uint16(rendererProps.length);\n    require(\n      currentMaxRendererPropsIndex <= MAX_UINT_16,\n      'RendererPropsStorage: Exceeds storage limit'\n    );\n  }\n\n  function indexToRendererProps(uint16 index)\n    public\n    view\n    returns (bytes memory)\n  {\n    return SSTORE2Map.read(bytes32(uint256(index)));\n  }\n}\n"
9     },
10     "contracts/interfaces/IDataStorage.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\ninterface IDataStorage is IERC165 {\n  function indexToData(uint256 index) external view returns (bytes memory);\n}\n"
12     },
13     "contracts/Merge.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport './tokens/ERC721A.sol';\nimport './libraries/SSTORE2Map.sol';\n\nimport './SigmoidThreshold.sol';\nimport './RarityCompositingEngine.sol';\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/common/ERC2981.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\ncontract Merge is ERC721A, ERC2981, Ownable {\n  using Strings for uint256;\n  uint256 public MAX_MINTING_PER_BLOCK = 3;\n\n  uint256 public deployDate;\n  bool public isActive;\n  SigmoidThreshold public curve;\n\n  // Price Vars\n  uint256 public a0;\n  uint256 public b0;\n  uint256 public c0;\n  uint256 public d0;\n\n  // Rarity Vars\n  uint256 public a1;\n  uint256 public b1;\n  uint256 public c1;\n  uint256 public d1;\n\n  address public treasury;\n  address public boostToken;\n\n  // RCE\n  RarityCompositingEngine public rce;\n\n  uint256 public boostTokenBaseAmount = 1000;\n  mapping(uint256 => uint256) public rarityTokenMap; // tokenID => rarityScore\n\n  bool public emergencyShutdown = false;\n  mapping(bytes32 => uint256) public blockMintingGuardMap; // hash(address + block number) => numMinted\n  mapping(address => bool) public blacklistMap; // hash(address) => boolean\n\n  event ChangedIsActive(bool isActive);\n  event ChangedEmergencyShutdown(bool shutdown);\n\n  struct DeployMergeNFTConfig {\n    string name;\n    string symbol;\n    address treasury;\n    address boostToken;\n    address rce;\n    address curve;\n    uint256 a0;\n    uint256 b0;\n    uint256 c0;\n    uint256 d0;\n    uint256 a1;\n    uint256 b1;\n    uint256 c1;\n    uint256 d1;\n  }\n\n  struct SetCurveParams {\n    uint256 a0;\n    uint256 b0;\n    uint256 c0;\n    uint256 d0;\n    uint256 a1;\n    uint256 b1;\n    uint256 c1;\n    uint256 d1;\n  }\n\n  constructor(DeployMergeNFTConfig memory config) ERC721A() {\n    _name = config.name;\n    _symbol = config.symbol;\n    a0 = config.a0;\n    b0 = config.b0;\n    c0 = config.c0;\n    d0 = config.d0;\n    a1 = config.a1;\n    b1 = config.b1;\n    c1 = config.c1;\n    d1 = config.d1;\n    boostToken = config.boostToken;\n    curve = SigmoidThreshold(config.curve);\n    deployDate = block.timestamp;\n    treasury = config.treasury;\n    rce = RarityCompositingEngine(config.rce);\n    //_transferOwnership(config.treasury);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721A, ERC2981)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  function getTokenBalance(address token, address userAddress)\n    public\n    view\n    returns (uint256)\n  {\n    return IERC721(token).balanceOf(userAddress);\n  }\n\n  function currentIndex() public view returns (uint256) {\n    return _currentIndex;\n  }\n\n  function setIsActive(bool _isActive) public onlyOwner {\n    isActive = _isActive;\n    emit ChangedIsActive(isActive);\n  }\n\n  function setEmergencyShutdown(bool shutdown) public onlyOwner {\n    emergencyShutdown = shutdown;\n    emit ChangedEmergencyShutdown(shutdown);\n  }\n\n  function setBlacklist(address[] memory _list) public onlyOwner {\n    for (uint256 i = 0; i < _list.length; ++i) {\n      blacklistMap[_list[i]] = true;\n    }\n  }\n\n  function setRoyalty(uint96 newRoyaltyFraction) public onlyOwner {\n    _setDefaultRoyalty(treasury, newRoyaltyFraction);\n  }\n\n  function setMaxMinting(uint256 _max) public onlyOwner {\n    MAX_MINTING_PER_BLOCK = _max;\n  }\n\n  function setDeployDate(uint256 _date) public onlyOwner {\n    deployDate = _date;\n  }\n\n  function setBoostToken(address _boostToken) public onlyOwner {\n    boostToken = _boostToken;\n  }\n\n  function setBoostTokenBaseAmount(uint256 _amount) public onlyOwner {\n    boostTokenBaseAmount = _amount;\n  }\n\n  function setTreasury(address _treasury) public onlyOwner {\n    treasury = _treasury;\n  }\n\n  function setRCE(address _rce) public onlyOwner {\n    rce = RarityCompositingEngine(_rce);\n  }\n\n  function setCurve(address _curve) public onlyOwner {\n    curve = SigmoidThreshold(_curve);\n  }\n\n  function setCurveParams(SetCurveParams memory config) public onlyOwner {\n    a0 = config.a0;\n    b0 = config.b0;\n    c0 = config.c0;\n    a1 = config.a1;\n    b1 = config.b1;\n    c1 = config.c1;\n  }\n\n  // X variable in graph. Curve is tuned to\n  function numSecondsSinceDeploy() public view returns (uint256) {\n    return (block.timestamp - deployDate);\n  }\n\n  function isMergeByDifficulty() public view virtual returns (bool) {\n    return (block.difficulty > (2**64)) || (block.difficulty == 0);\n  }\n\n  modifier onlyIsActive() {\n    require(isActive, 'minting needs to be active to mint');\n    _;\n  }\n\n  modifier onlyIsNotShutdown() {\n    require(!emergencyShutdown, 'emergency shutdown is in place');\n    _;\n  }\n\n  modifier onlyIsNotMerge() {\n    require(\n      !isMergeByDifficulty(),\n      'minting needs to be done before Proof of Stake'\n    );\n    _;\n  }\n\n  function getBoostScore(address userAddress) external view returns (uint256) {\n    uint256 balance = getTokenBalance(boostToken, userAddress);\n    uint256 maxBalance = balance >= 16 ? 16 : balance;\n    return maxBalance * boostTokenBaseAmount;\n  }\n\n  function getRarityScoreForToken(uint256 tokenId)\n    public\n    view\n    returns (uint256)\n  {\n    uint256 curr = tokenId;\n    if (_startTokenId() <= curr && curr < _currentIndex) {\n      while (true) {\n        if (rarityTokenMap[curr] != 0) {\n          return rarityTokenMap[curr];\n        }\n        curr--;\n      }\n    }\n    revert OwnerQueryForNonexistentToken();\n  }\n\n  function getCurrentRarityScore(address userAddress)\n    public\n    view\n    returns (uint256)\n  {\n    SigmoidThreshold.CurveParams memory config;\n    config._x = numSecondsSinceDeploy();\n    config.minX = a1;\n    config.maxX = b1;\n    config.minY = c1;\n    config.maxY = d1;\n    uint256 rarity = curve.getY(config);\n    try this.getBoostScore(userAddress) returns (uint256 boost) {\n      return rarity + boost;\n    } catch {\n      return rarity;\n    }\n  }\n\n  function getCurrentPrice() public view returns (uint256) {\n    SigmoidThreshold.CurveParams memory config;\n    config._x = numSecondsSinceDeploy();\n    config.minX = a0;\n    config.maxX = b0;\n    config.minY = c0;\n    config.maxY = d0;\n    uint256 price = curve.getY(config);\n    return price; // in GWEI\n  }\n\n  function contractURI() public view returns (string memory) {\n    return\n      string(\n        abi.encodePacked(\n          'data:application/json;base64,',\n          Base64.encode(\n            abi.encodePacked(\n              '{\"name\":\"',\n              _name,\n              '\", \"description\": \"A Proof of Beauty project. Fully on-chain generative statues to remember the MERGE.',\n              '\", \"external_link\": \"https://merge.pob.studio/',\n              '\", \"image\": \"https://merge.pob.studio/assets/logo.png\" }'\n            )\n          )\n        )\n      );\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    require(_exists(tokenId), 'URI query for nonexistent token');\n    uint256 rarityScore = getRarityScoreForToken(tokenId);\n    bytes memory seed = abi.encodePacked(rarityScore, tokenId);\n    (, uint16[] memory attributeIndexes) = rce.getRarity(rarityScore, seed);\n    string memory image = rce.getRender(attributeIndexes);\n\n    return\n      string(\n        abi.encodePacked(\n          'data:application/json;base64,',\n          Base64.encode(\n            abi.encodePacked(\n              '{\"name\": \"Statue #',\n              tokenId.toString(),\n              '\", \"description\": \"',\n              'A Proof of Beauty project. Fully on-chain generative statues to remember the MERGE.',\n              '\", \"image\": \"',\n              image,\n              '\", \"aspect_ratio\": \"1',\n              '\", \"attributes\": ',\n              rce.getAttributesJSON(attributeIndexes),\n              '}'\n            )\n          )\n        )\n      );\n  }\n\n  function mint(address to, uint256 numMints)\n    public\n    payable\n    onlyIsActive\n    onlyIsNotMerge\n    onlyIsNotShutdown\n  {\n    bytes32 blockNumHash = keccak256(abi.encode(block.number, msg.sender));\n    require(\n      blockMintingGuardMap[blockNumHash] + numMints <= MAX_MINTING_PER_BLOCK,\n      'exceeded max number of mints'\n    );\n    require(!blacklistMap[msg.sender], 'caller is blacklisted');\n    uint256 totalPrice = getCurrentPrice() * numMints;\n    require(totalPrice <= msg.value, 'insufficient funds to pay for mint');\n    uint256 currentRarityScore = getCurrentRarityScore(msg.sender);\n    rarityTokenMap[_currentIndex] = currentRarityScore;\n    blockMintingGuardMap[blockNumHash] =\n      blockMintingGuardMap[blockNumHash] +\n      numMints;\n    _mint(to, numMints, '', false);\n    treasury.call{value: totalPrice}('');\n    payable(msg.sender).transfer(msg.value - totalPrice);\n  }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Base64.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@abf-monorepo/protocol/contracts/renderers/LayerCompositeRenderer.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"../interfaces/IRenderer.sol\";\nimport \"../libraries/BytesUtils.sol\";\nimport \"../libraries/SvgUtils.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\ncontract LayerCompositeRenderer is IRenderer, Ownable, ERC165 {\n  using Strings for uint256;\n\n  function owner() public override(Ownable, IRenderer) view returns (address) {\n    return super.owner();\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n    return\n      interfaceId == type(IRenderer).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function propsSize() external override pure returns (uint256) {\n    return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n  }\n  function additionalMetadataURI() external override pure returns (string memory) {\n    return \"ipfs://bafkreigjwztwrolwcbkbz3ombzkvxg2767bckeobrfwdjfohvxgozbepv4\";\n  }\n  \n  function renderAttributeKey() external override pure returns (string memory) {\n    return \"image\";\n  }\n  \n  function name() public override pure returns (string memory) {\n    return 'Layer Composite';\n  }\n\n  function encodeProps(address[] memory renderers, bytes[] memory rendererProps) public pure returns (bytes memory output) {\n    for (uint i = 0; i < renderers.length; ++i) {\n      output = abi.encodePacked(output, renderers[i], rendererProps[i].length, rendererProps[i]);\n    }\n  }\n\n  function renderRaw(bytes calldata props) public override view returns (bytes memory) {\n    bytes memory backgroundImages;\n\n    for (uint i = 0; i < props.length; i += 0) {\n      IRenderer destinationRenderer = IRenderer(BytesUtils.toAddress(props, i));\n      uint start = i + 20 + 32;\n      uint end = start + BytesUtils.toUint256(props, i + 20); \n      backgroundImages = abi.encodePacked(backgroundImages, i == 0  ? '' : ',', 'url(', \n      destinationRenderer.render(props[start:end])\n      ,')');\n      i = end;\n    }\n\n    return abi.encodePacked(\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1200\" style=\"',\n      'background-image:', backgroundImages, ';background-repeat:no-repeat;background-size:contain;background-position:center;image-rendering:-webkit-optimize-contrast;-ms-interpolation-mode:nearest-neighbor;image-rendering:-moz-crisp-edges;image-rendering:pixelated;\">',\n      '</svg>'\n    );\n  }\n\n  function render(bytes calldata props) external override view returns (string memory) {\n        return string(\n      abi.encodePacked(\n        'data:image/svg+xml;base64,',\n        Base64.encode(renderRaw(props)) \n      )\n    );\n  }\n\n  function attributes(bytes calldata) external override pure returns (string memory) {\n    return \"\"; \n  }\n}"
27     },
28     "@abf-monorepo/protocol/contracts/libraries/BytesUtils.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity ^0.8.4;\n\nlibrary BytesUtils {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}"
30     },
31     "contracts/libraries/SSTORE2Map.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport './Create3.sol';\n\nimport './Bytecode.sol';\n\n/**\n  @title A write-once key-value storage for storing chunks of data with a lower write & read cost.\n  @author Agustin Aguilar <aa@horizon.io>\n  Readme: https://github.com/0xsequence/sstore2#readme\n*/\nlibrary SSTORE2Map {\n  error WriteError();\n\n  //                                         keccak256(bytes('@0xSequence.SSTORE2Map.slot'))\n  bytes32 private constant SLOT_KEY_PREFIX =\n    0xd351a9253491dfef66f53115e9e3afda3b5fdef08a1de6937da91188ec553be5;\n\n  function internalKey(bytes32 _key) internal pure returns (bytes32) {\n    // Mutate the key so it doesn't collide\n    // if the contract is also using CREATE3 for other things\n    return keccak256(abi.encode(SLOT_KEY_PREFIX, _key));\n  }\n\n  /**\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\n    @dev The pointer is a contract address with `_data` as code\n    @param _data To be written\n    @param _key unique string key for accessing the written data (can only be used once)\n    @return pointer Pointer to the written `_data`\n  */\n  function write(string memory _key, bytes memory _data)\n    internal\n    returns (address pointer)\n  {\n    return write(keccak256(bytes(_key)), _data);\n  }\n\n  /**\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\n    @dev The pointer is a contract address with `_data` as code\n    @param _data to be written\n    @param _key unique bytes32 key for accessing the written data (can only be used once)\n    @return pointer Pointer to the written `_data`\n  */\n  function write(bytes32 _key, bytes memory _data)\n    internal\n    returns (address pointer)\n  {\n    // Append 00 to _data so contract can't be called\n    // Build init code\n    bytes memory code = Bytecode.creationCodeFor(\n      abi.encodePacked(hex'00', _data)\n    );\n\n    // Deploy contract using create3\n    pointer = Create3.create3(internalKey(_key), code);\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key string key that constains the data\n    @return data read from contract associated with `_key`\n  */\n  function read(string memory _key) internal view returns (bytes memory) {\n    return read(keccak256(bytes(_key)));\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key string key that constains the data\n    @param _start number of bytes to skip\n    @return data read from contract associated with `_key`\n  */\n  function read(string memory _key, uint256 _start)\n    internal\n    view\n    returns (bytes memory)\n  {\n    return read(keccak256(bytes(_key)), _start);\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key string key that constains the data\n    @param _start number of bytes to skip\n    @param _end index before which to end extraction\n    @return data read from contract associated with `_key`\n  */\n  function read(\n    string memory _key,\n    uint256 _start,\n    uint256 _end\n  ) internal view returns (bytes memory) {\n    return read(keccak256(bytes(_key)), _start, _end);\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key bytes32 key that constains the data\n    @return data read from contract associated with `_key`\n  */\n  function read(bytes32 _key) internal view returns (bytes memory) {\n    return\n      Bytecode.codeAt(\n        Create3.addressOf(internalKey(_key)),\n        1,\n        type(uint256).max\n      );\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key bytes32 key that constains the data\n    @param _start number of bytes to skip\n    @return data read from contract associated with `_key`\n  */\n  function read(bytes32 _key, uint256 _start)\n    internal\n    view\n    returns (bytes memory)\n  {\n    return\n      Bytecode.codeAt(\n        Create3.addressOf(internalKey(_key)),\n        _start + 1,\n        type(uint256).max\n      );\n  }\n\n  /**\n    @notice Reads the contents for a given `_key`, it maps to a contract code as data, skips the first byte\n    @dev The function is intended for reading pointers first written by `write`\n    @param _key bytes32 key that constains the data\n    @param _start number of bytes to skip\n    @param _end index before which to end extraction\n    @return data read from contract associated with `_key`\n  */\n  function read(\n    bytes32 _key,\n    uint256 _start,\n    uint256 _end\n  ) internal view returns (bytes memory) {\n    return\n      Bytecode.codeAt(\n        Create3.addressOf(internalKey(_key)),\n        _start + 1,\n        _end + 1\n      );\n  }\n}\n"
33     },
34     "contracts/libraries/Create3.sol": {
35       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n/**\n  @title A library for deploying contracts EIP-3171 style.\n  @author Agustin Aguilar <aa@horizon.io>\n*/\nlibrary Create3 {\n  error ErrorCreatingProxy();\n  error ErrorCreatingContract();\n  error TargetAlreadyExists();\n\n  /**\n    @notice The bytecode for a contract that proxies the creation of another contract\n    @dev If this code is deployed using CREATE2 it can be used to decouple `creationCode` from the child contract address\n  0x67363d3d37363d34f03d5260086018f3:\n      0x00  0x67  0x67XXXXXXXXXXXXXXXX  PUSH8 bytecode  0x363d3d37363d34f0\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 0x363d3d37363d34f0\n      0x02  0x52  0x52                  MSTORE\n      0x03  0x60  0x6008                PUSH1 08        8\n      0x04  0x60  0x6018                PUSH1 18        24 8\n      0x05  0xf3  0xf3                  RETURN\n  0x363d3d37363d34f0:\n      0x00  0x36  0x36                  CALLDATASIZE    cds\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 cds\n      0x02  0x3d  0x3d                  RETURNDATASIZE  0 0 cds\n      0x03  0x37  0x37                  CALLDATACOPY\n      0x04  0x36  0x36                  CALLDATASIZE    cds\n      0x05  0x3d  0x3d                  RETURNDATASIZE  0 cds\n      0x06  0x34  0x34                  CALLVALUE       val 0 cds\n      0x07  0xf0  0xf0                  CREATE          addr\n  */\n\n  bytes internal constant PROXY_CHILD_BYTECODE =\n    hex'67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3';\n\n  //                        KECCAK256_PROXY_CHILD_BYTECODE = keccak256(PROXY_CHILD_BYTECODE);\n  bytes32 internal constant KECCAK256_PROXY_CHILD_BYTECODE =\n    0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\n\n  /**\n    @notice Returns the size of the code on a given address\n    @param _addr Address that may or may not contain code\n    @return size of the code on the given `_addr`\n  */\n  function codeSize(address _addr) internal view returns (uint256 size) {\n    assembly {\n      size := extcodesize(_addr)\n    }\n  }\n\n  /**\n    @notice Creates a new contract with given `_creationCode` and `_salt`\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\n    @return addr of the deployed contract, reverts on error\n  */\n  function create3(bytes32 _salt, bytes memory _creationCode)\n    internal\n    returns (address addr)\n  {\n    return create3(_salt, _creationCode, 0);\n  }\n\n  /**\n    @notice Creates a new contract with given `_creationCode` and `_salt`\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\n    @param _value In WEI of ETH to be forwarded to child contract\n    @return addr of the deployed contract, reverts on error\n  */\n  function create3(\n    bytes32 _salt,\n    bytes memory _creationCode,\n    uint256 _value\n  ) internal returns (address addr) {\n    // Creation code\n    bytes memory creationCode = PROXY_CHILD_BYTECODE;\n\n    // Get target final address\n    addr = addressOf(_salt);\n    if (codeSize(addr) != 0) revert TargetAlreadyExists();\n\n    // Create CREATE2 proxy\n    address proxy;\n    assembly {\n      proxy := create2(0, add(creationCode, 32), mload(creationCode), _salt)\n    }\n    if (proxy == address(0)) revert ErrorCreatingProxy();\n\n    // Call proxy with final init code\n    (bool success, ) = proxy.call{value: _value}(_creationCode);\n    if (!success || codeSize(addr) == 0) revert ErrorCreatingContract();\n  }\n\n  /**\n    @notice Computes the resulting address of a contract deployed using address(this) and the given `_salt`\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\n    @return addr of the deployed contract, reverts on error\n    @dev The address creation formula is: keccak256(rlp([keccak256(0xff ++ address(this) ++ _salt ++ keccak256(childBytecode))[12:], 0x01]))\n  */\n  function addressOf(bytes32 _salt) internal view returns (address) {\n    address proxy = address(\n      uint160(\n        uint256(\n          keccak256(\n            abi.encodePacked(\n              hex'ff',\n              address(this),\n              _salt,\n              KECCAK256_PROXY_CHILD_BYTECODE\n            )\n          )\n        )\n      )\n    );\n\n    return\n      address(\n        uint160(\n          uint256(keccak256(abi.encodePacked(hex'd6_94', proxy, hex'01')))\n        )\n      );\n  }\n}\n"
36     },
37     "contracts/libraries/Bytecode.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary Bytecode {\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\n\n  /**\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\n    @param _code The returning value of the resulting `creationCode`\n    @return creationCode (constructor) for new contract\n  */\n  function creationCodeFor(bytes memory _code)\n    internal\n    pure\n    returns (bytes memory)\n  {\n    /*\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\n      0x01    0x80         0x80        DUP1                size size\n      0x02    0x60         0x600e      PUSH1 14            14 size size\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\n      0x04    0x39         0x39        CODECOPY            size\n      0x05    0x60         0x6000      PUSH1 00            0 size\n      0x06    0xf3         0xf3        RETURN\n      <CODE>\n    */\n\n    return\n      abi.encodePacked(\n        hex'63',\n        uint32(_code.length),\n        hex'80_60_0E_60_00_39_60_00_F3',\n        _code\n      );\n  }\n\n  /**\n    @notice Returns the size of the code on a given address\n    @param _addr Address that may or may not contain code\n    @return size of the code on the given `_addr`\n  */\n  function codeSize(address _addr) internal view returns (uint256 size) {\n    assembly {\n      size := extcodesize(_addr)\n    }\n  }\n\n  /**\n    @notice Returns the code of a given address\n    @dev It will fail if `_end < _start`\n    @param _addr Address that may or may not contain code\n    @param _start number of bytes of code to skip on read\n    @param _end index before which to end extraction\n    @return oCode read from `_addr` deployed bytecode\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\n  */\n  function codeAt(\n    address _addr,\n    uint256 _start,\n    uint256 _end\n  ) internal view returns (bytes memory oCode) {\n    uint256 csize = codeSize(_addr);\n    if (csize == 0) return bytes('');\n\n    if (_start > csize) return bytes('');\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\n\n    unchecked {\n      uint256 reqSize = _end - _start;\n      uint256 maxSize = csize - _start;\n\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\n\n      assembly {\n        // allocate output byte array - this could also be done without assembly\n        // by using o_code = new bytes(size)\n        oCode := mload(0x40)\n        // new \"memory end\" including padding\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        // store length in memory\n        mstore(oCode, size)\n        // actually retrieve the code, this needs assembly\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\n      }\n    }\n  }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/Context.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
42     },
43     "@abf-monorepo/protocol/contracts/interfaces/IRenderer.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\ninterface IRenderer is IERC165 {\n  function name() external view returns (string memory);\n  function owner() external view returns (address);\n  function propsSize() external view returns (uint256);\n  function additionalMetadataURI() external view returns (string memory);\n  function renderAttributeKey() external view returns (string memory);\n  function renderRaw(bytes calldata props) external view returns (bytes memory);\n  function render(bytes calldata props) external view returns (string memory);\n  function attributes(bytes calldata props) external view returns (string memory);\n}"
45     },
46     "@abf-monorepo/protocol/contracts/libraries/SvgUtils.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary SvgUtils {\n  using Strings for uint256;\n\n  uint public constant DECIMALS = 4;\n  uint public constant ONE_UNIT = 10 ** DECIMALS;\n\n  function padZeros(string memory s, uint len) public pure returns (string memory) {\n    uint local_len = bytes(s).length;\n    string memory local_s = s;\n    while(local_len < len) {\n      local_s = string(abi.encodePacked('0', local_s));\n      local_len++;\n    }\n    return local_s;\n  }\n\n  function wholeNumber(uint n) public pure returns (uint) {\n    return n / ONE_UNIT;\n  }\n\n  function decimals(uint n) public pure returns (uint) {\n    return n % ONE_UNIT;\n  }\n\n  function toDecimalString(uint n) public pure returns (string memory s) {\n    if (n == 0) return '0';\n\n    s = string(abi.encodePacked(\n      (n / (ONE_UNIT)).toString(), '.' , padZeros((n % ONE_UNIT).toString(), DECIMALS)\n    ));\n  }\n\n  function lerpWithDecimals(uint min, uint max, bytes1 scale) public pure returns (uint) {\n    if (scale == 0x0) return min * ONE_UNIT;\n    if (scale == 0xff) return max * ONE_UNIT;\n    uint delta = ((max - min) * ONE_UNIT * uint(uint8(scale))) / 255; \n    return (min * ONE_UNIT) + delta;\n  }\n\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n  function toColorHexString(uint256 value) public pure returns (string memory) {\n      bytes memory buffer = new bytes(2 * 3 + 1);\n      buffer[0] = \"#\";\n      for (uint256 i = 2 * 3; i > 0; --i) {\n          buffer[i] = _HEX_SYMBOLS[value & 0xf];\n          value >>= 4;\n      }\n      require(value == 0, \"Strings: hex length insufficient\");\n      return string(buffer);\n  }\n\n  function toColorHexStringByBytes(bytes1 r, bytes1 g, bytes1 b) public pure returns (string memory) {\n    bytes memory buffer = new bytes(7);\n    buffer[0] = \"#\";\n    buffer[2] = _HEX_SYMBOLS[uint8(r) & 0xf];\n    r >>= 4;\n    buffer[1] = _HEX_SYMBOLS[uint8(r) & 0xf];\n    buffer[4] = _HEX_SYMBOLS[uint8(g) & 0xf];\n    g >>= 4;\n    buffer[3] = _HEX_SYMBOLS[uint8(g) & 0xf];\n    buffer[6] = _HEX_SYMBOLS[uint8(b) & 0xf];\n    b >>= 4;\n    buffer[5] = _HEX_SYMBOLS[uint8(b) & 0xf];\n    return string(buffer);\n  }\n  \n  function toColorHexStringByBytes3(bytes3 rgb) public pure returns (string memory) {\n    return toColorHexStringByBytes(rgb[0], rgb[1], rgb[2]);\n  }\n\n}"
48     },
49     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
54     },
55     "contracts/tokens/ERC721A.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n  using Strings for uint256;\n\n  // Compiler will pack this into a single 256bit word.\n  struct TokenOwnership {\n    // The address of the owner.\n    address addr;\n    // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n    uint64 startTimestamp;\n    // Whether the token has been burned.\n    bool burned;\n  }\n\n  // Compiler will pack this into a single 256bit word.\n  struct AddressData {\n    // Realistically, 2**64-1 is more than enough.\n    uint64 balance;\n    // Keeps track of mint count with minimal overhead for tokenomics.\n    uint64 numberMinted;\n    // Keeps track of burn count with minimal overhead for tokenomics.\n    uint64 numberBurned;\n    // For miscellaneous variable(s) pertaining to the address\n    // (e.g. number of whitelist mint slots used).\n    // If there are multiple variables, please pack them into a uint64.\n    uint64 aux;\n  }\n\n  // The tokenId of the next token to be minted.\n  uint256 internal _currentIndex;\n\n  // The number of tokens burned.\n  uint256 internal _burnCounter;\n\n  // Token name\n  string internal _name;\n\n  // Token symbol\n  string internal _symbol;\n\n  // Mapping from token ID to ownership details\n  // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n  mapping(uint256 => TokenOwnership) internal _ownerships;\n\n  // Mapping owner address to address data\n  mapping(address => AddressData) private _addressData;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  constructor() {\n    _currentIndex = _startTokenId();\n  }\n\n  /**\n   * To change the starting tokenId, please override this function.\n   */\n  function _startTokenId() internal view virtual returns (uint256) {\n    return 0;\n  }\n\n  /**\n   * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n   */\n  function totalSupply() public view returns (uint256) {\n    // Counter underflow is impossible as _burnCounter cannot be incremented\n    // more than _currentIndex - _startTokenId() times\n    unchecked {\n      return _currentIndex - _burnCounter - _startTokenId();\n    }\n  }\n\n  /**\n   * Returns the total amount of tokens minted in the contract.\n   */\n  function _totalMinted() internal view returns (uint256) {\n    // Counter underflow is impossible as _currentIndex does not decrement,\n    // and it is initialized to _startTokenId()\n    unchecked {\n      return _currentIndex - _startTokenId();\n    }\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\n    return uint256(_addressData[owner].balance);\n  }\n\n  /**\n   * Returns the number of tokens minted by `owner`.\n   */\n  function _numberMinted(address owner) internal view returns (uint256) {\n    return uint256(_addressData[owner].numberMinted);\n  }\n\n  /**\n   * Returns the number of tokens burned by or on behalf of `owner`.\n   */\n  function _numberBurned(address owner) internal view returns (uint256) {\n    return uint256(_addressData[owner].numberBurned);\n  }\n\n  /**\n   * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n   */\n  function _getAux(address owner) internal view returns (uint64) {\n    return _addressData[owner].aux;\n  }\n\n  /**\n   * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n   * If there are multiple variables, please pack them into a uint64.\n   */\n  function _setAux(address owner, uint64 aux) internal {\n    _addressData[owner].aux = aux;\n  }\n\n  /**\n   * Gas spent here starts off proportional to the maximum mint batch size.\n   * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n   */\n  function _ownershipOf(uint256 tokenId)\n    internal\n    view\n    returns (TokenOwnership memory)\n  {\n    uint256 curr = tokenId;\n\n    unchecked {\n      if (_startTokenId() <= curr && curr < _currentIndex) {\n        TokenOwnership memory ownership = _ownerships[curr];\n        if (!ownership.burned) {\n          if (ownership.addr != address(0)) {\n            return ownership;\n          }\n          // Invariant:\n          // There will always be an ownership that has an address and is not burned\n          // before an ownership that does not have an address and is not burned.\n          // Hence, curr will not underflow.\n          while (true) {\n            curr--;\n            ownership = _ownerships[curr];\n            if (ownership.addr != address(0)) {\n              return ownership;\n            }\n          }\n        }\n      }\n    }\n    revert OwnerQueryForNonexistentToken();\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    return _ownershipOf(tokenId).addr;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length != 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : '';\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return '';\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public override {\n    address owner = ERC721A.ownerOf(tokenId);\n    if (to == owner) revert ApprovalToCurrentOwner();\n\n    if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n      revert ApprovalCallerNotOwnerNorApproved();\n    }\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view override returns (address) {\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved)\n    public\n    virtual\n    override\n  {\n    if (operator == _msgSender()) revert ApproveToCaller();\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, '');\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public virtual override {\n    _transfer(from, to, tokenId);\n    if (\n      to.isContract() &&\n      !_checkContractOnERC721Received(from, to, tokenId, _data)\n    ) {\n      revert TransferToNonERC721ReceiverImplementer();\n    }\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return\n      _startTokenId() <= tokenId &&\n      tokenId < _currentIndex &&\n      !_ownerships[tokenId].burned;\n  }\n\n  function _safeMint(address to, uint256 quantity) internal {\n    _safeMint(to, quantity, '');\n  }\n\n  /**\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n   * - `quantity` must be greater than 0.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bytes memory _data\n  ) internal {\n    _mint(to, quantity, _data, true);\n  }\n\n  /**\n   * @dev Mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `quantity` must be greater than 0.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(\n    address to,\n    uint256 quantity,\n    bytes memory _data,\n    bool safe\n  ) internal {\n    uint256 startTokenId = _currentIndex;\n    if (to == address(0)) revert MintToZeroAddress();\n    if (quantity == 0) revert MintZeroQuantity();\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    // Overflows are incredibly unrealistic.\n    // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n    // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n    unchecked {\n      _addressData[to].balance += uint64(quantity);\n      _addressData[to].numberMinted += uint64(quantity);\n\n      _ownerships[startTokenId].addr = to;\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n      uint256 updatedIndex = startTokenId;\n      uint256 end = updatedIndex + quantity;\n\n      if (safe && to.isContract()) {\n        do {\n          emit Transfer(address(0), to, updatedIndex);\n          if (\n            !_checkContractOnERC721Received(\n              address(0),\n              to,\n              updatedIndex++,\n              _data\n            )\n          ) {\n            revert TransferToNonERC721ReceiverImplementer();\n          }\n        } while (updatedIndex != end);\n        // Reentrancy protection\n        if (_currentIndex != startTokenId) revert();\n      } else {\n        do {\n          emit Transfer(address(0), to, updatedIndex++);\n        } while (updatedIndex != end);\n      }\n      _currentIndex = updatedIndex;\n    }\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) private {\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n    if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n    bool isApprovedOrOwner = (_msgSender() == from ||\n      isApprovedForAll(from, _msgSender()) ||\n      getApproved(tokenId) == _msgSender());\n\n    if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n    if (to == address(0)) revert TransferToZeroAddress();\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, from);\n\n    // Underflow of the sender's balance is impossible because we check for\n    // ownership above and the recipient's balance can't realistically overflow.\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n    unchecked {\n      _addressData[from].balance -= 1;\n      _addressData[to].balance += 1;\n\n      TokenOwnership storage currSlot = _ownerships[tokenId];\n      currSlot.addr = to;\n      currSlot.startTimestamp = uint64(block.timestamp);\n\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n      uint256 nextTokenId = tokenId + 1;\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n      if (nextSlot.addr == address(0)) {\n        // This will suffice for checking _exists(nextTokenId),\n        // as a burned slot cannot contain the zero address.\n        if (nextTokenId != _currentIndex) {\n          nextSlot.addr = from;\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\n        }\n      }\n    }\n\n    emit Transfer(from, to, tokenId);\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev This is equivalent to _burn(tokenId, false)\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    _burn(tokenId, false);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n    address from = prevOwnership.addr;\n\n    if (approvalCheck) {\n      bool isApprovedOrOwner = (_msgSender() == from ||\n        isApprovedForAll(from, _msgSender()) ||\n        getApproved(tokenId) == _msgSender());\n\n      if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n    }\n\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, from);\n\n    // Underflow of the sender's balance is impossible because we check for\n    // ownership above and the recipient's balance can't realistically overflow.\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n    unchecked {\n      AddressData storage addressData = _addressData[from];\n      addressData.balance -= 1;\n      addressData.numberBurned += 1;\n\n      // Keep track of who burned the token, and the timestamp of burning.\n      TokenOwnership storage currSlot = _ownerships[tokenId];\n      currSlot.addr = from;\n      currSlot.startTimestamp = uint64(block.timestamp);\n      currSlot.burned = true;\n\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n      uint256 nextTokenId = tokenId + 1;\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n      if (nextSlot.addr == address(0)) {\n        // This will suffice for checking _exists(nextTokenId),\n        // as a burned slot cannot contain the zero address.\n        if (nextTokenId != _currentIndex) {\n          nextSlot.addr = from;\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\n        }\n      }\n    }\n\n    emit Transfer(from, address(0), tokenId);\n    _afterTokenTransfers(from, address(0), tokenId, 1);\n\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n    unchecked {\n      _burnCounter++;\n    }\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(\n    address to,\n    uint256 tokenId,\n    address owner\n  ) private {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkContractOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    try\n      IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n    returns (bytes4 retval) {\n      return retval == IERC721Receiver(to).onERC721Received.selector;\n    } catch (bytes memory reason) {\n      if (reason.length == 0) {\n        revert TransferToNonERC721ReceiverImplementer();\n      } else {\n        assembly {\n          revert(add(32, reason), mload(reason))\n        }\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   * And also called before burning one token.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   * - When `to` is zero, `tokenId` will be burned by `from`.\n   * - `from` and `to` are never both zero.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   * And also called after one token has been burned.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` has been minted for `to`.\n   * - When `to` is zero, `tokenId` has been burned by `from`.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}\n"
57     },
58     "contracts/SigmoidThreshold.sol": {
59       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract SigmoidThreshold {\n  using SafeMath for uint256;\n  using SafeMath for uint64;\n\n  struct CurveParams {\n    uint256 _x;\n    uint256 minX;\n    uint256 maxX;\n    uint256 minY;\n    uint256 maxY;\n  }\n\n  uint256[23] private slots;\n\n  constructor() {\n    slots[0] = 1000000000000000000;\n    slots[1] = 994907149075715143;\n    slots[2] = 988513057369406817;\n    slots[3] = 982013790037908452;\n    slots[4] = 970687769248643639;\n    slots[5] = 952574126822433143;\n    slots[6] = 924141819978756551;\n    slots[7] = 880797077977882314;\n    slots[8] = 817574476193643651;\n    slots[9] = 731058578630004896;\n    slots[10] = 622459331201854593;\n    slots[11] = 500000000000000000;\n    slots[12] = 377540668798145407;\n    slots[13] = 268941421369995104;\n    slots[14] = 182425523806356349;\n    slots[15] = 119202922022117574;\n    slots[16] = 75858180021243560;\n    slots[17] = 47425873177566788;\n    slots[18] = 29312230751356326;\n    slots[19] = 17986209962091562;\n    slots[20] = 11486942630593183;\n    slots[21] = 5092850924284857;\n    slots[22] = 0;\n  }\n\n  function getY(CurveParams memory config) public view returns (uint256) {\n    if (config._x <= config.minX) {\n      return config.minY;\n    }\n    if (config._x >= config.maxX) {\n      return config.maxY;\n    }\n\n    uint256 slotWidth = config.maxX.sub(config.minX).div(slots.length);\n    uint256 xa = config._x.sub(config.minX).div(slotWidth);\n    uint256 xb = Math.min(xa.add(1), slots.length.sub(1));\n\n    uint256 slope = slots[xa].sub(slots[xb]).mul(1e18).div(slotWidth);\n    uint256 wy = slots[xa].add(slope.mul(slotWidth.mul(xa)).div(1e18));\n\n    uint256 percentage = 0;\n    if (wy > slope.mul(config._x).div(1e18)) {\n      percentage = wy.sub(slope.mul(config._x).div(1e18));\n    } else {\n      percentage = slope.mul(config._x).div(1e18).sub(wy);\n    }\n\n    uint256 result = config.minY.add(\n      config.maxY.sub(config.minY).mul(percentage).div(1e18)\n    );\n\n    return config.maxY.sub(result); // inverse curve to be LOW => HIGH\n  }\n}\n"
60     },
61     "contracts/RarityCompositingEngine.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport './RendererPropsStorage.sol';\nimport './ChunkedDataStorage.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Base64.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@abf-monorepo/protocol/contracts/renderers/LayerCompositeRenderer.sol';\nimport '@abf-monorepo/protocol/contracts/libraries/BytesUtils.sol';\n\ncontract RarityCompositingEngine is Ownable {\n  uint256 public constant MAX_UINT_16 = 0xFFFF;\n  uint256 public constant RARITY_DATA_TUPLE_NUM_BYTES = 4;\n\n  address public immutable COMPOSITING_RENDERER;\n  address public immutable ATTRIBUTE_RENDERER;\n  uint256 public immutable MAX_LAYERS;\n  bytes public GLOBAL_ATTRIBUTE_PREFIX;\n\n  // storage contracts\n  RendererPropsStorage public rendererPropsStorage;\n  ChunkedDataStorage public layerStorage;\n  ChunkedDataStorage public attributeStorage;\n\n  uint256 constant NUM_DECIMALS = 2; // units are in bps\n  uint256 constant ONE_UNIT = 10**NUM_DECIMALS; // represents 0.01x\n  uint256 constant ONE_HUNDRED_PERCENT = 100 * ONE_UNIT; // represents 1.00x\n\n  struct LayerData {\n    uint8 layerType;\n    bytes rarityData;\n  }\n\n  struct AttributeData {\n    bool shouldShowInAttributes;\n    bool shouldShowInRendererProps;\n    uint16 rendererDataIndex;\n    string key;\n    string value;\n    bytes prefix;\n  }\n\n  constructor(\n    uint256 _maxLayers,\n    address _compositingRenderer,\n    address _attributeRenderer,\n    bytes memory _globalAttributePrefix,\n    address _rendererPropsStorage,\n    address _layerStorage,\n    address _attributeStorage\n  ) {\n    MAX_LAYERS = _maxLayers;\n    COMPOSITING_RENDERER = _compositingRenderer;\n    ATTRIBUTE_RENDERER = _attributeRenderer;\n    GLOBAL_ATTRIBUTE_PREFIX = _globalAttributePrefix;\n    rendererPropsStorage = RendererPropsStorage(_rendererPropsStorage);\n    layerStorage = ChunkedDataStorage(_layerStorage);\n    attributeStorage = ChunkedDataStorage(_attributeStorage);\n  }\n\n  function setRendererPropsStorage(address _rendererPropsStorage)\n    public\n    onlyOwner\n  {\n    rendererPropsStorage = RendererPropsStorage(_rendererPropsStorage);\n  }\n\n  function setLayerStorage(address _layerStorage) public onlyOwner {\n    layerStorage = ChunkedDataStorage(_layerStorage);\n  }\n\n  function setAttributeStorage(address _attributeStorage) public onlyOwner {\n    attributeStorage = ChunkedDataStorage(_attributeStorage);\n  }\n\n  function decodeLayerData(bytes memory data)\n    public\n    pure\n    returns (LayerData memory ld)\n  {\n    if (data.length != 0) {\n      ld.layerType = uint8(data[0]);\n      ld.rarityData = BytesUtils.slice(data, 1, data.length - 1);\n    }\n  }\n\n  function decodeAttributeData(bytes memory data)\n    public\n    pure\n    returns (AttributeData memory ad)\n  {\n    if (data.length != 0) {\n      ad.shouldShowInAttributes = uint8(data[0]) == 1;\n      ad.shouldShowInRendererProps = uint8(data[1]) == 1;\n      ad.rendererDataIndex = BytesUtils.toUint16(data, 2);\n      uint8 keyLength = uint8(data[4]);\n      ad.key = string(BytesUtils.slice(data, 5, keyLength));\n      uint8 valueLength = uint8(data[5 + keyLength]);\n      ad.value = string(BytesUtils.slice(data, 6 + keyLength, valueLength));\n      ad.prefix = BytesUtils.slice(\n        data,\n        6 + keyLength + valueLength,\n        data.length - (6 + keyLength + valueLength)\n      );\n    }\n  }\n\n  function resolveLayerIndex(\n    uint16[] memory attributeIndexes,\n    uint256 layerIndex\n  ) public view returns (uint256) {\n    require(\n      layerIndex != 0,\n      'RarityCompositingEngine: layerIndex can not be zero'\n    );\n    LayerData memory layerData = decodeLayerData(\n      layerStorage.indexToData(layerIndex)\n    );\n    if (layerData.layerType == 1) {\n      uint16 rootAttributeIndex = attributeIndexes[\n        BytesUtils.toUint16(layerData.rarityData, 0)\n      ];\n      require(\n        rootAttributeIndex != 0,\n        'RarityCompositingEngine: Root attribute has not been set yet'\n      );\n      uint256 dependentLayerIndex = 0;\n      for (uint256 j = 2; j < layerData.rarityData.length; j += 4) {\n        if (\n          BytesUtils.toUint16(layerData.rarityData, j) == rootAttributeIndex\n        ) {\n          dependentLayerIndex = BytesUtils.toUint16(\n            layerData.rarityData,\n            j + 2\n          );\n          break;\n        }\n      }\n      require(\n        dependentLayerIndex != 0,\n        'RarityCompositingEngine: No dependent layerIndex was found'\n      );\n      return resolveLayerIndex(attributeIndexes, dependentLayerIndex);\n    } else if (layerData.layerType == 0) {\n      return layerIndex;\n    }\n    return 0;\n  }\n\n  function applyRarityMultiplier(\n    uint256 rarityMultiplier,\n    uint256[] memory rarityData\n  )\n    public\n    pure\n    returns (\n      uint256 appliedRaritySum,\n      uint256[] memory appliedRarityData,\n      uint256[] memory rarityMultipliers\n    )\n  {\n    rarityMultipliers = new uint256[](rarityData.length);\n\n    if (rarityData.length == 0) {\n      return (0, rarityData, rarityMultipliers);\n    }\n\n    if (rarityData.length == 2) {\n      return (rarityData[1], rarityData, rarityMultipliers);\n    }\n\n    // sum the current rarity values\n    uint256 highestRarityWeight = rarityData[1];\n    uint256 lowestRarityWeight = rarityData[rarityData.length - 1];\n\n    if (highestRarityWeight - lowestRarityWeight == 0) {\n      for (uint256 i = 1; i < rarityData.length; i += 2) {\n        appliedRaritySum += rarityData[i];\n      }\n      return (appliedRaritySum, rarityData, rarityMultipliers);\n    }\n\n    appliedRarityData = rarityData;\n\n    uint256 a = (rarityMultiplier * ONE_UNIT) /\n      ((highestRarityWeight - lowestRarityWeight)**2);\n\n    for (uint256 i = 1; i < rarityData.length; i += 2) {\n      uint256 scaledRarityMultiplier = (a *\n        (highestRarityWeight - rarityData[i])**2) / ONE_UNIT;\n      uint256 appliedRarity = ((ONE_HUNDRED_PERCENT + scaledRarityMultiplier) *\n        rarityData[i]) / ONE_UNIT;\n      rarityMultipliers[i] = scaledRarityMultiplier;\n      appliedRarityData[i] = appliedRarity;\n      appliedRaritySum += appliedRarityData[i];\n    }\n  }\n\n  function getRarity(uint256 rarityMultiplier, bytes memory seed)\n    public\n    view\n    returns (uint256[] memory layerIndexes, uint16[] memory attributeIndexes)\n  {\n    // attributeIndexes are the keys to the actual visual output data for a specific layer index\n    attributeIndexes = new uint16[](MAX_LAYERS);\n\n    // layerIndexes are the keys to the actual layer and its corresponding rarity data\n    layerIndexes = new uint256[](MAX_LAYERS);\n    // set default layer indexes\n    for (uint16 i = 0; i < MAX_LAYERS; ++i) {\n      layerIndexes[i] = i + 1;\n    }\n\n    for (uint16 i = 0; i < MAX_LAYERS; ++i) {\n      layerIndexes[i] = resolveLayerIndex(attributeIndexes, layerIndexes[i]);\n      LayerData memory layerData = decodeLayerData(\n        layerStorage.indexToData(layerIndexes[i])\n      );\n      uint256 randomSource = uint256(keccak256(abi.encodePacked(seed, i)));\n\n      uint256[] memory rarityData = new uint256[](\n        (layerData.rarityData.length) / 2\n      );\n      for (uint256 j = 0; j < layerData.rarityData.length; j += 2) {\n        rarityData[j / 2] = BytesUtils.toUint16(layerData.rarityData, j);\n      }\n\n      (\n        uint256 appliedRaritySum,\n        uint256[] memory appliedRarityData,\n\n      ) = applyRarityMultiplier(rarityMultiplier, rarityData);\n      // get attribute for this layer\n      uint16 attributeIndex = 0;\n      uint256 rarityValue = randomSource % appliedRaritySum;\n      uint256 acc = 0;\n      for (uint256 j = 1; j < appliedRarityData.length; j += 2) {\n        acc += appliedRarityData[j];\n        if (acc >= rarityValue) {\n          attributeIndex = uint16(appliedRarityData[j - 1]);\n          break;\n        }\n      }\n      require(\n        attributeIndex != 0,\n        'RarityCompositingEngine: No attribute was found for layer.'\n      );\n      attributeIndexes[i] = attributeIndex;\n    }\n  }\n\n  function getRendererProps(uint16[] memory attributeIndexes)\n    public\n    view\n    returns (address[] memory renderers, bytes[] memory rendererProps)\n  {\n    uint256 numNonrendereredAttributes = 0;\n    for (uint256 i = 0; i < attributeIndexes.length; ++i) {\n      AttributeData memory ad = decodeAttributeData(\n        attributeStorage.indexToData(attributeIndexes[i])\n      );\n      if (!ad.shouldShowInRendererProps) {\n        numNonrendereredAttributes++;\n      }\n    }\n\n    renderers = new address[](\n      attributeIndexes.length - numNonrendereredAttributes\n    );\n    rendererProps = new bytes[](\n      attributeIndexes.length - numNonrendereredAttributes\n    );\n\n    uint256 numRenderersStored = 0;\n    for (uint256 i = 0; i < attributeIndexes.length; ++i) {\n      AttributeData memory ad = decodeAttributeData(\n        attributeStorage.indexToData(attributeIndexes[i])\n      );\n      if (ad.shouldShowInRendererProps) {\n        uint256 rendererIndex = attributeIndexes.length -\n          numNonrendereredAttributes -\n          1 -\n          numRenderersStored;\n        renderers[rendererIndex] = ATTRIBUTE_RENDERER;\n        rendererProps[rendererIndex] = abi.encodePacked(\n          GLOBAL_ATTRIBUTE_PREFIX,\n          ad.prefix,\n          rendererPropsStorage.indexToRendererProps(ad.rendererDataIndex)\n        );\n        numRenderersStored++;\n      }\n    }\n  }\n\n  function getAttributesJSON(uint16[] memory attributeIndexes)\n    public\n    view\n    returns (string memory)\n  {\n    bytes memory attributes = '[';\n    for (uint256 i = 0; i < attributeIndexes.length; ++i) {\n      AttributeData memory ad = decodeAttributeData(\n        attributeStorage.indexToData(attributeIndexes[i])\n      );\n      if (ad.shouldShowInAttributes) {\n        attributes = abi.encodePacked(\n          attributes,\n          (attributes.length == 1) ? '' : ',',\n          '{\"value\":\"',\n          ad.value,\n          '\",\"trait_type\":\"',\n          ad.key,\n          '\"}'\n        );\n      }\n    }\n    attributes = abi.encodePacked(attributes, ']');\n    return string(attributes);\n  }\n\n  function getRender(uint16[] memory attributeIndexes)\n    public\n    view\n    returns (string memory)\n  {\n    LayerCompositeRenderer renderer = LayerCompositeRenderer(\n      COMPOSITING_RENDERER\n    );\n    (\n      address[] memory renderers,\n      bytes[] memory rendererProps\n    ) = getRendererProps(attributeIndexes);\n    return renderer.render(renderer.encodeProps(renderers, rendererProps));\n  }\n\n  function getRenderRaw(uint16[] memory attributeIndexes)\n    public\n    view\n    returns (bytes memory)\n  {\n    LayerCompositeRenderer renderer = LayerCompositeRenderer(\n      COMPOSITING_RENDERER\n    );\n    (\n      address[] memory renderers,\n      bytes[] memory rendererProps\n    ) = getRendererProps(attributeIndexes);\n    return renderer.renderRaw(renderer.encodeProps(renderers, rendererProps));\n  }\n}\n"
63     },
64     "@openzeppelin/contracts/token/common/ERC2981.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
66     },
67     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
69     },
70     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
72     },
73     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
75     },
76     "@openzeppelin/contracts/utils/Address.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
78     },
79     "@openzeppelin/contracts/utils/math/Math.sol": {
80       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
81     },
82     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
84     },
85     "contracts/ChunkedDataStorage.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport './libraries/SSTORE2Map.sol';\nimport './interfaces/IDataStorage.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Base64.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@abf-monorepo/protocol/contracts/libraries/BytesUtils.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\ncontract ChunkedDataStorage is IDataStorage, Ownable, ERC165 {\n  uint256 public constant MAX_UINT_16 = 0xFFFF;\n\n  mapping(uint256 => uint256) public numLayerDataInChunk;\n\n  uint256 public currentMaxChunksIndex = 0;\n\n  constructor() {}\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IDataStorage).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function batchAddChunkedData(bytes[] calldata data) public onlyOwner {\n    numLayerDataInChunk[currentMaxChunksIndex] = data.length;\n\n    bytes memory chunkedLayerData = '';\n\n    for (uint256 i = 0; i < data.length; ++i) {\n      require(\n        data[i].length <= MAX_UINT_16,\n        'ChunkedDataStorage: data exceeds size of 0xFFFF'\n      );\n      chunkedLayerData = abi.encodePacked(\n        chunkedLayerData,\n        uint16(data[i].length),\n        data[i]\n      );\n    }\n    SSTORE2Map.write(bytes32(currentMaxChunksIndex), chunkedLayerData);\n    currentMaxChunksIndex++;\n  }\n\n  function indexToData(uint256 index) public view returns (bytes memory) {\n    uint256 currentChunkIndex = 0;\n    uint256 currentIndex = 0;\n    do {\n      currentIndex += numLayerDataInChunk[currentChunkIndex];\n      currentChunkIndex++;\n      if (numLayerDataInChunk[currentChunkIndex] == 0) {\n        break;\n      }\n    } while (currentIndex <= index);\n    currentChunkIndex--;\n    currentIndex -= numLayerDataInChunk[currentChunkIndex];\n    uint256 localChunkIndex = index - currentIndex;\n    bytes memory chunkedData = SSTORE2Map.read(bytes32(currentChunkIndex));\n    uint256 localChunkIndexPointer = 0;\n    for (uint256 i = 0; i < chunkedData.length; i += 0) {\n      if (localChunkIndexPointer == localChunkIndex) {\n        return\n          BytesUtils.slice(\n            chunkedData,\n            i + 2,\n            BytesUtils.toUint16(chunkedData, i)\n          );\n      }\n      i += BytesUtils.toUint16(chunkedData, i) + 2;\n      localChunkIndexPointer++;\n    }\n\n    return '';\n  }\n}\n"
87     },
88     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
90     }
91   },
92   "settings": {
93     "optimizer": {
94       "enabled": false,
95       "runs": 200
96     },
97     "outputSelection": {
98       "*": {
99         "*": [
100           "evm.bytecode",
101           "evm.deployedBytecode",
102           "devdoc",
103           "userdoc",
104           "metadata",
105           "abi"
106         ]
107       }
108     },
109     "libraries": {}
110   }
111 }}