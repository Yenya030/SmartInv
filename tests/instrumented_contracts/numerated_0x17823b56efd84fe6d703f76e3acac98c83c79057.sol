1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/cedar/drop/CedarERC721Drop.sol": {
5       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\n/// ========== Features ==========\nimport \"./interfaces/IPlatformFee.sol\";\nimport \"./interfaces/IOwnable.sol\";\n\nimport \"./openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol\";\nimport \"../generated/impl/BaseCedarERC721DropV7.sol\";\n\nimport \"./lib/FeeType.sol\";\nimport \"./lib/MerkleProof.sol\";\n\nimport \"./errors/IErrors.sol\";\n\nimport \"./types/DropERC721DataTypes.sol\";\nimport \"./CedarERC721DropLogic.sol\";\n\nimport \"../terms/types/TermsDataTypes.sol\";\nimport \"../terms/lib/TermsLogic.sol\";\n\nimport \"./CedarERC721DropStorage.sol\";\nimport \"../api/issuance/INFTSupply.sol\";\nimport \"../api/metadata/ICedarNFTMetadata.sol\";\n\n/// @title The CedarERC721Drop contract\ncontract CedarERC721Drop is IPublicOwnable, IPublicPlatformFee, CedarERC721DropStorage, BaseCedarERC721DropV7 {\n    /// ================================\n    /// =========== Libraries ==========\n    /// ================================\n    using StringsUpgradeable for uint256;\n    using CedarERC721DropLogic for DropERC721DataTypes.ClaimData;\n    using TermsLogic for TermsDataTypes.Terms;\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// ====================================================\n    /// ========== Constructor + initializer logic =========\n    /// ====================================================\n    constructor() {}\n\n    /// @dev Initializes the contract, like a constructor.\n    function initialize(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        string memory _contractURI,\n        address[] memory _trustedForwarders,\n        address _saleRecipient,\n        address _royaltyRecipient,\n        uint128 _royaltyBps,\n        string memory _userAgreement,\n        uint128 _platformFeeBps,\n        address _platformFeeRecipient,\n        address _drop1155DelegateLogic\n    ) external initializer {\n        // Initialize inherited contracts, most base-like -> most derived.\n        __ReentrancyGuard_init();\n        __ERC2771Context_init(_trustedForwarders);\n        __ERC721_init(_name, _symbol);\n        __DefaultOperatorFilterer_init();\n\n        // Initialize this contract's state.\n        claimData.royaltyRecipient = _royaltyRecipient;\n        claimData.royaltyBps = uint16(_royaltyBps);\n        _contractUri = _contractURI;\n        _owner = _defaultAdmin;\n        claimData.primarySaleRecipient = _saleRecipient;\n        claimData.platformFeeRecipient = _platformFeeRecipient;\n        claimData.platformFeeBps = uint16(_platformFeeBps);\n        // Agreement initialize\n        termsData.termsURI = _userAgreement;\n        // We set the terms version to 1 if there is an actual termsURL\n        if (bytes(_userAgreement).length > 0) {\n            termsData.termsVersion = 1;\n            termsData.termsActivated = true;\n        }\n        delegateLogicContract = _drop1155DelegateLogic;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n        _setupRole(MINTER_ROLE, _defaultAdmin);\n        _setupRole(TRANSFER_ROLE, _defaultAdmin);\n        _setupRole(TRANSFER_ROLE, address(0));\n        _setupRole(ISSUER_ROLE, _defaultAdmin);\n\n        emit OwnershipTransferred(address(0), _defaultAdmin);\n    }\n\n    fallback() external {\n        // get facet from function selector\n        address logic = delegateLogicContract;\n        require(logic != address(0));\n        // Execute external function from delegate logic contract using delegatecall and return any value.\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), logic, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /// ============================================\n    /// ========== Generic contract logic ==========\n    /// ============================================\n    /// @dev Returns the address of the current owner.\n    function owner() public view override returns (address) {\n        return hasRole(DEFAULT_ADMIN_ROLE, _owner) ? _owner : address(0);\n    }\n\n    /// @dev See {IERC721Enumerable-totalSupply}.\n    function totalSupply() public view override(INFTSupplyV0, ERC721EnumerableUpgradeable) returns (uint256) {\n        return ERC721EnumerableUpgradeable.totalSupply();\n    }\n\n    /// @dev See ERC 721 - Returns the URI for a given tokenId.\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override(ERC721Upgradeable, ICedarNFTMetadataV1)\n        returns (string memory)\n    {\n        return CedarERC721DropLogic.tokenURI(claimData, _tokenId);\n    }\n\n    /// @dev See ERC-2891 - Returns the royalty recipient and amount, given a tokenId and sale price.\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        virtual\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return CedarERC721DropLogic.royaltyInfo(claimData, tokenId, salePrice);\n    }\n\n    /// @dev See ERC 165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(BaseCedarERC721DropV7, CedarERC721DropStorage)\n        returns (bool)\n    {\n        return\n            BaseCedarERC721DropV7.supportsInterface(interfaceId) ||\n            CedarERC721DropStorage.supportsInterface(interfaceId);\n    }\n\n    /// ======================================\n    /// ============= Claim logic ============\n    /// ======================================\n    /// @dev Lets an account claim NFTs.\n    function claim(\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bytes32[] calldata _proofs,\n        uint256 _proofMaxQuantityPerTransaction\n    ) external payable override nonReentrant {\n        address msgSender = _msgSender();\n        if (!(isTrustedForwarder(msg.sender) || msgSender == tx.origin)) revert Bot();\n        if (claimIsPaused) revert ClaimPaused();\n\n        (uint256[] memory tokens, CedarERC721DropLogic.InternalClaim memory internalClaim) = CedarERC721DropLogic\n            .executeClaim(\n                claimData,\n                _quantity,\n                _currency,\n                _pricePerToken,\n                _proofs,\n                _proofMaxQuantityPerTransaction,\n                _msgSender()\n            );\n\n        for (uint256 i = 0; i < tokens.length; i += 1) {\n            _mint(_receiver, tokens[i]);\n        }\n\n        emit TokensClaimed(\n            internalClaim.activeConditionId,\n            msgSender,\n            _receiver,\n            internalClaim.tokenIdToClaim,\n            _quantity\n        );\n    }\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) public view override {\n        CedarERC721DropLogic.verifyClaim(\n            claimData,\n            _conditionId,\n            _claimer,\n            _quantity,\n            _currency,\n            _pricePerToken,\n            verifyMaxQuantityPerTransaction\n        );\n    }\n\n    /// ======================================\n    /// ============ Agreement ===============\n    /// ======================================\n    /// @notice by signing this transaction, you are confirming that you have read and agreed to the terms of use at `termsUrl`\n    function acceptTerms() external override {\n        termsData.acceptTerms(_msgSender());\n        emit TermsAccepted(termsData.termsURI, termsData.termsVersion, _msgSender());\n    }\n\n    //    /// @notice allows anyone to accept the terms for a specific address, given that have a valid signature from the acceptor\n    //    function acceptTerms(address _acceptor, bytes calldata _signature) external override {\n    //        termsData.acceptTermsWithSignature(_acceptor, _signature);\n    //        emit TermsAccepted(termsData.termsURI, termsData.termsVersion, _acceptor, _signature);\n    //    }\n\n    /// @notice returns the details of the terms\n    /// @return termsURI - the URI of the terms\n    /// @return termsVersion - the version of the terms\n    /// @return termsActivated - the status of the terms\n    function getTermsDetails()\n        external\n        view\n        override\n        returns (\n            string memory termsURI,\n            uint8 termsVersion,\n            bool termsActivated\n        )\n    {\n        return termsData.getTermsDetails();\n    }\n\n    /// @notice returns true if an address has accepted the terms\n    function hasAcceptedTerms(address _address) external view override returns (bool hasAccepted) {\n        hasAccepted = termsData.hasAcceptedTerms(_address);\n    }\n\n    /// @notice returns true if an address has accepted the terms\n    function hasAcceptedTerms(address _address, uint8 _termsVersion) external view override returns (bool hasAccepted) {\n        hasAccepted = termsData.hasAcceptedTerms(_address, _termsVersion);\n    }\n\n    /// ======================================\n    /// ========== Getter functions ==========\n    /// ======================================\n    /// @dev Returns the sale recipient address.\n    function primarySaleRecipient() external view override returns (address) {\n        return claimData.primarySaleRecipient;\n    }\n\n    /// @dev Contract level metadata.\n    function contractURI() external view override(IPublicMetadataV0) returns (string memory) {\n        return _contractUri;\n    }\n\n    /// @dev Returns the platform fee recipient and bps.\n    function getPlatformFeeInfo() external view override returns (address, uint16) {\n        return (claimData.platformFeeRecipient, uint16(claimData.platformFeeBps));\n    }\n\n    /// @dev Returns the default royalty recipient and bps.\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\n        return (claimData.royaltyRecipient, uint16(claimData.royaltyBps));\n    }\n\n    /// @dev Returns the royalty recipient and bps for a particular token Id.\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\n        return CedarERC721DropLogic.getRoyaltyInfoForToken(claimData, _tokenId);\n    }\n\n    /// @dev Returns the amount of stored baseURIs\n    function getBaseURICount() external view returns (uint256) {\n        return claimData.baseURIIndices.length;\n    }\n\n    /// @dev Gets the base URI indices\n    function getBaseURIIndices() external view override returns (uint256[] memory) {\n        return claimData.baseURIIndices;\n    }\n\n    /// @dev Returns the claim condition at the given uid.\n    function getClaimConditionById(uint256 _conditionId) external view returns (ClaimCondition memory condition) {\n        condition = CedarERC721DropLogic.getClaimConditionById(claimData, _conditionId);\n    }\n\n    /// @dev Expose the current active claim condition including claim limits\n    function getActiveClaimConditions()\n        external\n        view\n        override\n        returns (\n            ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 maxTotalSupply,\n            uint256 tokenSupply,\n            bool isClaimPaused\n        )\n    {\n        (condition, conditionId, walletMaxClaimCount, maxTotalSupply) = claimData.getActiveClaimConditions();\n        isClaimPaused = claimIsPaused;\n        tokenSupply = totalSupply();\n    }\n\n    /// @dev Expose the user specific limits related to the current active claim condition\n    function getUserClaimConditions(address _claimer)\n        external\n        view\n        override\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 walletClaimedCountInPhase,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        )\n    {\n        return CedarERC721DropLogic.getUserClaimConditions(claimData, _claimer);\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    /// ======================================\n    /// ==== OS Default Operator Filterer ====\n    /// ======================================\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override(ERC721Upgradeable, IERC721Upgradeable)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId)\n        public\n        override(ERC721Upgradeable, IERC721Upgradeable)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    /// ======================================\n    /// =========== Miscellaneous ============\n    /// ======================================\n    /// @dev Concrete implementation semantic version -\n    ///         provided for completeness but not designed to be the point of dispatch\n    function minorVersion() public pure override returns (uint256 minor, uint256 patch) {\n        minor = 1;\n        patch = 0;\n    }\n\n    /// @dev Burns `tokenId`. See {ERC721-_burn}.\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        if (!(_isApprovedOrOwner(_msgSender(), tokenId))) revert InvalidPermission();\n        _burn(tokenId);\n        // Not strictly necessary since we shouldn't issue this token again\n        claimData.tokenURIs[tokenId].sequenceNumber = 0;\n    }\n\n    /// @dev Provides a function to batch together multiple calls in a single external call.\n    function multicall(bytes[] calldata data)\n        external\n        override(CedarERC721DropStorage, IMulticallableV0)\n        returns (bytes[] memory results)\n    {\n        return MulticallUpgradeable(this).multicall(data);\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        return ERC2771ContextUpgradeable._msgSender();\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        return ERC2771ContextUpgradeable._msgData();\n    }\n}\n"
6     },
7     "contracts/cedar/drop/CedarERC721DropLogic.sol": {
8       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\n\nimport \"./lib/CurrencyTransferLib.sol\";\nimport \"./lib/MerkleProof.sol\";\nimport \"./errors/IErrors.sol\";\nimport \"./types/DropERC721DataTypes.sol\";\nimport \"./../api/standard/IERC1155.sol\";\nimport \"./../api/royalties/IRoyalty.sol\";\n\nlibrary CedarERC721DropLogic {\n    using StringsUpgradeable for uint256;\n\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n    /// @dev Max basis points (bps) in Cedar system.\n    uint256 public constant MAX_BPS = 10_000;\n\n    using CedarERC721DropLogic for DropERC721DataTypes.ClaimData;\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    struct InternalClaim {\n        bool validMerkleProof;\n        uint256 merkleProofIndex;\n        bool toVerifyMaxQuantityPerTransaction;\n        uint256 activeConditionId;\n        uint256 tokenIdToClaim;\n    }\n\n    function setClaimConditions(\n        DropERC721DataTypes.ClaimData storage claimData,\n        IDropClaimConditionV0.ClaimCondition[] calldata _phases,\n        bool _resetClaimEligibility\n    ) public {\n        uint256 existingStartIndex = claimData.claimCondition.currentStartId;\n        uint256 existingPhaseCount = claimData.claimCondition.count;\n\n        uint256 newStartIndex = existingStartIndex;\n        if (_resetClaimEligibility) {\n            newStartIndex = existingStartIndex + existingPhaseCount;\n        }\n\n        claimData.claimCondition.count = _phases.length;\n        claimData.claimCondition.currentStartId = newStartIndex;\n\n        uint256 lastConditionStartTimestamp;\n        for (uint256 i = 0; i < _phases.length; i++) {\n            if (!(i == 0 || lastConditionStartTimestamp < _phases[i].startTimestamp)) revert ST();\n\n            uint256 supplyClaimedAlready = claimData.claimCondition.phases[newStartIndex + i].supplyClaimed;\n\n            if (_isOutOfLimits(_phases[i].maxClaimableSupply, supplyClaimedAlready))\n                revert CrossedLimitMaxClaimableSupply();\n\n            claimData.claimCondition.phases[newStartIndex + i] = _phases[i];\n            claimData.claimCondition.phases[newStartIndex + i].supplyClaimed = supplyClaimedAlready;\n            if (_phases[i].maxClaimableSupply == 0)\n                claimData.claimCondition.phases[newStartIndex + i].maxClaimableSupply = MAX_UINT256;\n\n            lastConditionStartTimestamp = _phases[i].startTimestamp;\n        }\n\n        /**\n         *  Gas refunds (as much as possible)\n         *\n         *  If `_resetClaimEligibility == true`, we assign completely new UIDs to the claim\n         *  conditions in `_phases`. So, we delete claim conditions with UID < `newStartIndex`.\n         *\n         *  If `_resetClaimEligibility == false`, and there are more existing claim conditions\n         *  than in `_phases`, we delete the existing claim conditions that don't get replaced\n         *  by the conditions in `_phases`.\n         */\n        if (_resetClaimEligibility) {\n            for (uint256 i = existingStartIndex; i < newStartIndex; i++) {\n                delete claimData.claimCondition.phases[i];\n            }\n        } else {\n            if (existingPhaseCount > _phases.length) {\n                for (uint256 i = _phases.length; i < existingPhaseCount; i++) {\n                    delete claimData.claimCondition.phases[newStartIndex + i];\n                }\n            }\n        }\n    }\n\n    function executeClaim(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bytes32[] calldata _proofs,\n        uint256 _proofMaxQuantityPerTransaction,\n        address msgSender\n    ) public returns (uint256[] memory tokens, InternalClaim memory internalData) {\n        internalData.tokenIdToClaim = claimData.nextTokenIdToClaim;\n\n        // Get the claim conditions.\n        internalData.activeConditionId = getActiveClaimConditionId(claimData);\n\n        /**\n         *  We make allowlist checks (i.e. verifyClaimMerkleProof) before verifying the claim's general\n         *  validity (i.e. verifyClaim) because we give precedence to the check of allow list quantity\n         *  restriction over the check of the general claim condition's quantityLimitPerTransaction\n         *  restriction.\n         */\n\n        // Verify inclusion in allowlist.\n        (internalData.validMerkleProof, internalData.merkleProofIndex) = verifyClaimMerkleProof(\n            claimData,\n            internalData.activeConditionId,\n            msgSender,\n            _quantity,\n            _proofs,\n            _proofMaxQuantityPerTransaction\n        );\n\n        // Verify claim validity. If not valid, revert.\n        // when there's allowlist present --> verifyClaimMerkleProof will verify the _proofMaxQuantityPerTransaction value with hashed leaf in the allowlist\n        // when there's no allowlist, this check is true --> verifyClaim will check for _quantity being less/equal than the limit\n        internalData.toVerifyMaxQuantityPerTransaction =\n            _proofMaxQuantityPerTransaction == 0 ||\n            claimData.claimCondition.phases[internalData.activeConditionId].merkleRoot == bytes32(0);\n\n        verifyClaim(\n            claimData,\n            internalData.activeConditionId,\n            msgSender,\n            _quantity,\n            _currency,\n            _pricePerToken,\n            internalData.toVerifyMaxQuantityPerTransaction\n        );\n\n        // If there's a price, collect price.\n        claimData.collectClaimPrice(_quantity, _currency, _pricePerToken, msgSender);\n\n        // Book-keeping before the calling contract does the actual transfer and mint the relevant NFTs to claimer.\n        tokens = recordTransferClaimedTokens(claimData, internalData.activeConditionId, _quantity, msgSender);\n    }\n\n    function verifyClaimMerkleProof(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        bytes32[] calldata _proofs,\n        uint256 _proofMaxQuantityPerTransaction\n    ) public view returns (bool validMerkleProof, uint256 merkleProofIndex) {\n        IDropClaimConditionV0.ClaimCondition memory currentClaimPhase = claimData.claimCondition.phases[_conditionId];\n\n        if (currentClaimPhase.merkleRoot != bytes32(0)) {\n            (validMerkleProof, merkleProofIndex) = MerkleProof.verify(\n                _proofs,\n                currentClaimPhase.merkleRoot,\n                keccak256(abi.encodePacked(_claimer, _proofMaxQuantityPerTransaction))\n            );\n\n            if (!validMerkleProof) revert InvalidMerkleProof();\n            if (\n                !(_proofMaxQuantityPerTransaction == 0 ||\n                    _quantity <=\n                    _proofMaxQuantityPerTransaction -\n                        claimData.claimCondition.userClaims[_conditionId][_claimer].claimedBalance)\n            ) revert InvalidMaxQuantityProof();\n        }\n    }\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) public view {\n        IDropClaimConditionV0.ClaimCondition memory currentClaimPhase = claimData.claimCondition.phases[_conditionId];\n\n        if (!(_currency == currentClaimPhase.currency && _pricePerToken == currentClaimPhase.pricePerToken)) {\n            revert InvalidPrice();\n        }\n        // If we're checking for an allowlist quantity restriction, ignore the general quantity restriction.\n        if (\n            !(_quantity > 0 &&\n                (!verifyMaxQuantityPerTransaction || _quantity <= currentClaimPhase.quantityLimitPerTransaction))\n        ) {\n            revert CrossedLimitQuantityPerTransaction();\n        }\n        if (!(currentClaimPhase.supplyClaimed + _quantity <= currentClaimPhase.maxClaimableSupply)) {\n            revert CrossedLimitMaxClaimableSupply();\n        }\n        // nextTokenIdToMint is the supremum of all tokens currently lazy minted so this is just checking we are no\n        // trying to claim a token that has not yet been lazyminted (therefore has no URI)\n        if (!(claimData.nextTokenIdToClaim + _quantity <= claimData.nextTokenIdToMint)) {\n            revert CrossedLimitLazyMintedTokens();\n        }\n        if (_isOutOfLimits(claimData.maxTotalSupply, claimData.nextTokenIdToClaim + _quantity)) {\n            revert CrossedLimitMaxTotalSupply();\n        }\n        if (_isOutOfLimits(claimData.maxWalletClaimCount, claimData.walletClaimCount[_claimer] + _quantity)) {\n            revert CrossedLimitMaxWalletClaimCount();\n        }\n        (uint256 lastClaimTimestamp, uint256 nextValidClaimTimestamp) = getClaimTimestamp(\n            claimData,\n            _conditionId,\n            _claimer\n        );\n        if (!(lastClaimTimestamp == 0 || block.timestamp >= nextValidClaimTimestamp)) revert InvalidTime();\n    }\n\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\n    function collectClaimPrice(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken,\n        address msgSender\n    ) internal {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = _quantityToClaim * _pricePerToken;\n        uint256 platformFees = (totalPrice * claimData.platformFeeBps) / MAX_BPS;\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN && !(msg.value == totalPrice)) revert InvalidPrice();\n\n        CurrencyTransferLib.transferCurrency(_currency, msgSender, claimData.platformFeeRecipient, platformFees);\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msgSender,\n            claimData.primarySaleRecipient,\n            totalPrice - platformFees\n        );\n    }\n\n    /// @dev Book-keeping before the calling contract does the actual transfer and mint the relevant NFTs to claimer.\n    function recordTransferClaimedTokens(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _conditionId,\n        uint256 _quantityBeingClaimed,\n        address msgSender\n    ) public returns (uint256[] memory tokens) {\n        // Update the supply minted under mint condition.\n        claimData.claimCondition.phases[_conditionId].supplyClaimed += _quantityBeingClaimed;\n\n        // if transfer claimed tokens is called when `to != msg.sender`, it'd use msg.sender's limits.\n        // behavior would be similar to `msg.sender` mint for itself, then transfer to `_to`.\n        claimData.claimCondition.userClaims[_conditionId][msgSender].lastClaimTimestamp = block.timestamp;\n        claimData.claimCondition.userClaims[_conditionId][msgSender].claimedBalance += _quantityBeingClaimed;\n        claimData.walletClaimCount[msgSender] += _quantityBeingClaimed;\n\n        tokens = transferTokens(claimData, _quantityBeingClaimed);\n    }\n\n    function verifyIssue(DropERC721DataTypes.ClaimData storage claimData, uint256 _quantity)\n        public\n        returns (uint256[] memory tokens)\n    {\n        if (_quantity == 0) {\n            revert InvalidQuantity();\n        }\n        uint256 nextNextTokenIdToMint = claimData.nextTokenIdToClaim + _quantity;\n        if (nextNextTokenIdToMint > claimData.nextTokenIdToMint) {\n            revert CrossedLimitLazyMintedTokens();\n        }\n        if (claimData.maxTotalSupply != 0 && nextNextTokenIdToMint > claimData.maxTotalSupply) {\n            revert CrossedLimitMaxTotalSupply();\n        }\n        tokens = transferTokens(claimData, _quantity);\n    }\n\n    function setTokenURI(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _tokenId,\n        string memory _tokenURI\n    ) public {\n        // Interpret empty string as unsetting tokenURI\n        if (bytes(_tokenURI).length == 0) {\n            claimData.tokenURIs[_tokenId].sequenceNumber = 0;\n            return;\n        }\n        // Bump the sequence first\n        claimData.uriSequenceCounter.increment();\n        claimData.tokenURIs[_tokenId].uri = _tokenURI;\n        claimData.tokenURIs[_tokenId].sequenceNumber = claimData.uriSequenceCounter.current();\n    }\n\n    function tokenURI(DropERC721DataTypes.ClaimData storage claimData, uint256 _tokenId)\n        public\n        view\n        returns (string memory)\n    {\n        // Try to fetch possibly overridden tokenURI\n        DropERC721DataTypes.SequencedURI storage _tokenURI = claimData.tokenURIs[_tokenId];\n\n        for (uint256 i = 0; i < claimData.baseURIIndices.length; i += 1) {\n            if (_tokenId < claimData.baseURIIndices[i]) {\n                DropERC721DataTypes.SequencedURI storage _baseURI = claimData.baseURI[claimData.baseURIIndices[i]];\n                if (_tokenURI.sequenceNumber > _baseURI.sequenceNumber) {\n                    // If the specifically set tokenURI is fresher than the baseURI then return that (it is in-force)\n                    return _tokenURI.uri;\n                }\n                // Otherwise either there is no override (sequenceNumber == 0) or the baseURI is fresher, so return the\n                // baseURI-derived tokenURI\n                return string(abi.encodePacked(_baseURI.uri, _tokenId.toString()));\n            }\n        }\n        return \"\";\n    }\n\n    function lazyMint(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _amount,\n        string calldata _baseURIForTokens\n    ) public returns (uint256 startId, uint256 baseURIIndex) {\n        if (_amount == 0) revert InvalidNoOfTokenIds();\n        claimData.uriSequenceCounter.increment();\n        startId = claimData.nextTokenIdToMint;\n        baseURIIndex = startId + _amount;\n\n        claimData.nextTokenIdToMint = baseURIIndex;\n        claimData.baseURI[baseURIIndex].uri = _baseURIForTokens;\n        claimData.baseURI[baseURIIndex].sequenceNumber = claimData.uriSequenceCounter.current();\n        claimData.baseURIIndices.push(baseURIIndex);\n    }\n\n    function transferTokens(DropERC721DataTypes.ClaimData storage claimData, uint256 _quantityBeingClaimed)\n        public\n        returns (uint256[] memory tokens)\n    {\n        uint256 tokenIdToClaim = claimData.nextTokenIdToClaim;\n\n        tokens = new uint256[](_quantityBeingClaimed);\n\n        for (uint256 i = 0; i < _quantityBeingClaimed; i += 1) {\n            tokens[i] = tokenIdToClaim;\n            tokenIdToClaim += 1;\n        }\n\n        claimData.nextTokenIdToClaim = tokenIdToClaim;\n    }\n\n    function getActiveClaimConditions(DropERC721DataTypes.ClaimData storage claimData)\n        public\n        view\n        returns (\n            IDropClaimConditionV0.ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 maxTotalSupply\n        )\n    {\n        conditionId = getActiveClaimConditionId(claimData);\n        condition = claimData.claimCondition.phases[conditionId];\n        walletMaxClaimCount = claimData.maxWalletClaimCount;\n        maxTotalSupply = claimData.maxTotalSupply;\n    }\n\n    /// @dev Returns the claim condition at the given uid.\n    function getClaimConditionById(DropERC721DataTypes.ClaimData storage claimData, uint256 _conditionId)\n        external\n        view\n        returns (IDropClaimConditionV0.ClaimCondition memory condition)\n    {\n        condition = claimData.claimCondition.phases[_conditionId];\n    }\n\n    /// @dev Returns the user specific limits related to the current active claim condition\n    function getUserClaimConditions(DropERC721DataTypes.ClaimData storage claimData, address _claimer)\n        public\n        view\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 walletClaimedCountInPhase,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        )\n    {\n        conditionId = getActiveClaimConditionId(claimData);\n        (lastClaimTimestamp, nextValidClaimTimestamp) = getClaimTimestamp(claimData, conditionId, _claimer);\n        walletClaimedCount = claimData.walletClaimCount[_claimer];\n        walletClaimedCountInPhase = claimData.claimCondition.userClaims[conditionId][_claimer].claimedBalance;\n    }\n\n    /// @dev Returns the current active claim condition ID.\n    function getActiveClaimConditionId(DropERC721DataTypes.ClaimData storage claimData) public view returns (uint256) {\n        for (\n            uint256 i = claimData.claimCondition.currentStartId + claimData.claimCondition.count;\n            i > claimData.claimCondition.currentStartId;\n            i--\n        ) {\n            if (block.timestamp >= claimData.claimCondition.phases[i - 1].startTimestamp) {\n                return i - 1;\n            }\n        }\n\n        revert NoActiveMintCondition();\n    }\n\n    /// @dev Returns the timestamp for when a claimer is eligible for claiming NFTs again.\n    function getClaimTimestamp(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _conditionId,\n        address _claimer\n    ) public view returns (uint256 lastClaimTimestamp, uint256 nextValidClaimTimestamp) {\n        lastClaimTimestamp = claimData.claimCondition.userClaims[_conditionId][_claimer].lastClaimTimestamp;\n\n        unchecked {\n            nextValidClaimTimestamp =\n                lastClaimTimestamp +\n                claimData.claimCondition.phases[_conditionId].waitTimeInSecondsBetweenClaims;\n\n            if (nextValidClaimTimestamp < lastClaimTimestamp) {\n                nextValidClaimTimestamp = type(uint256).max;\n            }\n        }\n    }\n\n    /// @dev Returns the royalty recipient and bps for a particular token Id.\n    function getRoyaltyInfoForToken(DropERC721DataTypes.ClaimData storage claimData, uint256 _tokenId)\n        public\n        view\n        returns (address, uint16)\n    {\n        IRoyaltyV0.RoyaltyInfo memory royaltyForToken = claimData.royaltyInfoForToken[_tokenId];\n\n        return\n            royaltyForToken.recipient == address(0)\n                ? (claimData.royaltyRecipient, uint16(claimData.royaltyBps))\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\n    }\n\n    /// @dev See ERC-2891 - Returns the royalty recipient and amount, given a tokenId and sale price.\n    function royaltyInfo(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount) {\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(claimData, tokenId);\n        receiver = recipient;\n        royaltyAmount = (salePrice * bps) / MAX_BPS;\n    }\n\n    function setDefaultRoyaltyInfo(\n        DropERC721DataTypes.ClaimData storage claimData,\n        address _royaltyRecipient,\n        uint256 _royaltyBps\n    ) external {\n        if (!(_royaltyBps <= MAX_BPS)) revert MaxBps();\n        claimData.royaltyRecipient = _royaltyRecipient;\n        claimData.royaltyBps = uint16(_royaltyBps);\n    }\n\n    function setRoyaltyInfoForToken(\n        DropERC721DataTypes.ClaimData storage claimData,\n        uint256 _tokenId,\n        address _recipient,\n        uint256 _bps\n    ) external {\n        if (!(_bps <= MAX_BPS)) revert MaxBps();\n        claimData.royaltyInfoForToken[_tokenId] = IRoyaltyV0.RoyaltyInfo({recipient: _recipient, bps: _bps});\n    }\n\n    /// @dev Checks if a value is outside of a limit.\n    /// @param _limit The limit to check against.\n    /// @param _value The value to check.\n    /// @return True if the value is there is a limit and it's outside of that limit.\n    function _isOutOfLimits(uint256 _limit, uint256 _value) internal pure returns (bool) {\n        return _limit != 0 && !(_value <= _limit);\n    }\n}\n"
9     },
10     "contracts/cedar/drop/CedarERC721DropStorage.sol": {
11       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\n/// ========== External imports ==========\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"operator-filter-registry/src/upgradeable/DefaultOperatorFiltererUpgradeable.sol\";\n\n/// ========== Features ==========\nimport \"./interfaces/IOwnable.sol\";\nimport \"./interfaces/IPlatformFee.sol\";\n\nimport \"./openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol\";\n\nimport \"./types/DropERC721DataTypes.sol\";\nimport \"../terms/types/TermsDataTypes.sol\";\n\nimport \"./errors/IErrors.sol\";\n\nimport \"./CedarERC721DropLogic.sol\";\nimport \"../terms/lib/TermsLogic.sol\";\n\nimport \"../api/issuance/IDropClaimCondition.sol\";\nimport \"../api/metadata/IContractMetadata.sol\";\nimport \"../api/royalties/IRoyalty.sol\";\n\nabstract contract CedarERC721DropStorage is\n    Initializable,\n    ReentrancyGuardUpgradeable,\n    ERC2771ContextUpgradeable,\n    MulticallUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ERC721EnumerableUpgradeable,\n    DefaultOperatorFiltererUpgradeable\n{\n    /// ================================\n    /// =========== Libraries ==========\n    /// ================================\n    using StringsUpgradeable for uint256;\n    using CedarERC721DropLogic for DropERC721DataTypes.ClaimData;\n    using TermsLogic for TermsDataTypes.Terms;\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// =============================\n    /// =========== Events ==========\n    /// =============================\n    /// @dev Emitted when the global max supply of tokens is updated.\n    event MaxTotalSupplyUpdated(uint256 maxTotalSupply);\n    /// @dev Emitted when the wallet claim count for an address is updated.\n    event WalletClaimCountUpdated(address indexed wallet, uint256 count);\n    /// @dev Emitted when the global max wallet claim count is updated.\n    event MaxWalletClaimCountUpdated(uint256 count);\n    /// @dev Emitted when a new sale recipient is set.\n    event PrimarySaleRecipientUpdated(address indexed recipient);\n    /// @dev Emitted when the terms are accepted.\n    event TermsAccepted(string termsURI, uint8 termsVersion, address indexed acceptor);\n    /// @dev Emitted when the terms are activated/deactivated.\n    event TermsActivationStatusUpdated(bool isActivated);\n    /// @dev Emitted when the terms URI is updated.\n    event TermsUpdated(string termsURI, uint8 termsVersion);\n    /// @dev Emitted when tokens are claimed.\n    event TokensClaimed(\n        uint256 indexed claimConditionIndex,\n        address indexed claimer,\n        address indexed receiver,\n        uint256 startTokenId,\n        uint256 quantityClaimed\n    );\n    /// @dev Emitted when new claim conditions are set.\n    event ClaimConditionsUpdated(IDropClaimConditionV0.ClaimCondition[] claimConditions);\n    /// @dev Emitted when tokens are lazy minted.\n    event TokensLazyMinted(uint256 startTokenId, uint256 endTokenId, string baseURI);\n    /// @dev Emitted when new token is issued by ISSUER.\n    event TokensIssued(\n        uint256 indexed startTokenId,\n        address indexed issuer,\n        address indexed receiver,\n        uint256 quantity\n    );\n    /// @dev Emitted when tokens are issued.\n    event TokenIssued(uint256 indexed tokenId, address indexed issuer, address indexed receiver, string tokenURI);\n    /// @dev Emitted when token URI is updated.\n    event TokenURIUpdated(uint256 indexed tokenId, address indexed updater, string tokenURI);\n    /// @dev Emitted when contractURI is updated\n    event ContractURIUpdated(address indexed updater, string uri);\n    /// @dev Emitted when base URI is updated.\n    event BaseURIUpdated(uint256 baseURIIndex, string baseURI);\n    /// @dev Emitted when royalty info is updated.\n    event DefaultRoyalty(address newRoyaltyRecipient, uint256 newRoyaltyBps);\n    /// @dev Emitted when royalty recipient for tokenId is set\n    event RoyaltyForToken(uint256 indexed tokenId, address royaltyRecipient, uint256 royaltyBps);\n    /// @dev Event emitted when claim functionality is paused/un-paused.\n    event ClaimPauseStatusUpdated(bool pauseStatus);\n\n    /// ===============================================\n    /// =========== State variables - public ==========\n    /// ===============================================\n    /// @dev Contract level metadata.\n    string public _contractUri;\n    /// @dev Only transfers to or from TRANSFER_ROLE holders are valid, when transfers are restricted.\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n    /// @dev Only MINTER_ROLE holders can lazy mint NFTs.\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    /// @dev Only ISSUER_ROLE holders can issue NFTs.\n    bytes32 public constant ISSUER_ROLE = keccak256(\"ISSUER_ROLE\");\n    /// @dev If true, users cannot claim.\n    bool public claimIsPaused = false;\n    /// ================================================\n    /// =========== State variables - private ==========\n    /// ================================================\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\n    address public _owner;\n    /// @dev The (default) address that receives all royalty value.\n    address public royaltyRecipient;\n    /// @dev Token ID => royalty recipient and bps for token\n    mapping(uint256 => IRoyaltyV0.RoyaltyInfo) public royaltyInfoForToken;\n    /// @dev\n    address public delegateLogicContract;\n\n    DropERC721DataTypes.ClaimData claimData;\n    TermsDataTypes.Terms termsData;\n\n    /// @dev See ERC 165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            ERC721EnumerableUpgradeable.supportsInterface(interfaceId) ||\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\n    }\n\n    /// @dev See {ERC721-_beforeTokenTransfer}.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721EnumerableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        // if transfer is restricted on the contract, we still want to allow burning and minting\n        if (!hasRole(TRANSFER_ROLE, address(0)) && from != address(0) && to != address(0)) {\n            if (!(hasRole(TRANSFER_ROLE, from) || hasRole(TRANSFER_ROLE, to))) revert InvalidPermission();\n        }\n\n        if (to != address(this)) {\n            if (termsData.termsActivated) {\n                if (!termsData.termsAccepted[to] || termsData.termsVersion != termsData.acceptedVersion[to])\n                    revert TermsNotAccepted(to, termsData.termsURI, termsData.termsVersion);\n            }\n        }\n    }\n\n    /// ======================================\n    /// =========== Miscellaneous ============\n    /// ======================================\n    /// @dev Provides a function to batch together multiple calls in a single external call.\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\n        return MulticallUpgradeable(this).multicall(data);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771ContextUpgradeable._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (bytes calldata)\n    {\n        return ERC2771ContextUpgradeable._msgData();\n    }\n}\n"
12     },
13     "contracts/cedar/drop/interfaces/IPlatformFee.sol": {
14       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface IPlatformFee {\n    /// @dev Returns the platform fee bps and recipient.\n    function getPlatformFeeInfo() external view returns (address, uint16);\n\n    /// @dev Lets a module admin update the fees on primary sales.\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\n\n    /// @dev Emitted when fee on primary sales is updated.\n    event PlatformFeeInfoUpdated(address platformFeeRecipient, uint256 platformFeeBps);\n}\n\ninterface IPublicPlatformFee {\n    /// @dev Emitted when fee on primary sales is updated.\n    event PlatformFeeInfoUpdated(address platformFeeRecipient, uint256 platformFeeBps);\n\n    /// @dev Returns the platform fee bps and recipient.\n    function getPlatformFeeInfo() external view returns (address, uint16);\n}\n\ninterface IRestrictedPlatformFee {\n    /// @dev Emitted when fee on primary sales is updated.\n    event PlatformFeeInfoUpdated(address platformFeeRecipient, uint256 platformFeeBps);\n\n    /// @dev Lets a module admin update the fees on primary sales.\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\n}\n"
15     },
16     "contracts/cedar/drop/interfaces/IOwnable.sol": {
17       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface IOwnable {\n    /// @dev Returns the owner of the contract.\n    function owner() external view returns (address);\n\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\n    function setOwner(address _newOwner) external;\n\n    /// @dev Emitted when a new Owner is set.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\ninterface IPublicOwnable {\n    /// @dev Returns the owner of the contract.\n    function owner() external view returns (address);\n\n    /// @dev Emitted when a new Owner is set.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\ninterface IRestrictedOwnable {\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\n    function setOwner(address _newOwner) external;\n\n    /// @dev Emitted when a new Owner is set.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"
18     },
19     "contracts/cedar/generated/impl/BaseCedarERC721DropV7.sol": {
20       "content": "// SPDX-License-Identifier: Apache-2.0\n\n// Generated by impl.ts. Will be overwritten.\n// Filename: './BaseCedarERC721DropV7.sol'\n\npragma solidity ^0.8.4;\n\nimport \"../../api/impl/ICedarERC721Drop.sol\";\nimport \"../../api/ICedarFeatures.sol\";\nimport \"../../api/ICedarVersioned.sol\";\nimport \"../../api/IMulticallable.sol\";\nimport \"../../api/issuance/ICedarNFTIssuance.sol\";\nimport \"../../api/issuance/INFTSupply.sol\";\nimport \"../../api/standard/IERC721.sol\";\nimport \"../../api/standard/IERC2981.sol\";\nimport \"../../api/royalties/IRoyalty.sol\";\nimport \"../../api/baseURI/ICedarUpdateBaseURI.sol\";\nimport \"../../api/metadata/IContractMetadata.sol\";\nimport \"../../api/metadata/ICedarNFTMetadata.sol\";\nimport \"../../api/agreement/ICedarAgreement.sol\";\nimport \"../../api/primarysale/IPrimarySale.sol\";\nimport \"../../api/agreement/ICedarAgreement.sol\";\nimport \"../../api/issuance/ICedarNFTIssuance.sol\";\nimport \"../../api/lazymint/ICedarLazyMint.sol\";\nimport \"../../api/pausable/ICedarPausable.sol\";\nimport \"../../api/metadata/IContractMetadata.sol\";\nimport \"../../api/baseURI/ICedarUpdateBaseURI.sol\";\nimport \"../../api/royalties/IRoyalty.sol\";\nimport \"../../api/primarysale/IPrimarySale.sol\";\nimport \"../../api/issuance/INFTLimitSupply.sol\";\n\n/// Delegate features\ninterface IDelegateBaseCedarERC721DropV7 is IRestrictedAgreementV0, IRestrictedNFTIssuanceV0, IRestrictedLazyMintV0, IRestrictedPausableV0, IRestrictedMetadataV0, IRestrictedUpdateBaseURIV0, IRestrictedRoyaltyV0, IRestrictedPrimarySaleV1, IRestrictedNFTLimitSupplyV0 {}\n\n/// Inherit from this base to implement introspection\nabstract contract BaseCedarERC721DropV7 is ICedarFeaturesV0, ICedarVersionedV2, IMulticallableV0, IPublicNFTIssuanceV0, INFTSupplyV0, IERC721V1, IERC2981V0, IPublicRoyaltyV0, IPublicUpdateBaseURIV0, IPublicMetadataV0, ICedarNFTMetadataV1, IPublicAgreementV0, IPublicPrimarySaleV1 {\n    function supportedFeatures() override public pure returns (string[] memory features) {\n        features = new string[](20);\n        features[0] = \"ICedarFeatures.sol:ICedarFeaturesV0\";\n        features[1] = \"ICedarVersioned.sol:ICedarVersionedV2\";\n        features[2] = \"IMulticallable.sol:IMulticallableV0\";\n        features[3] = \"issuance/ICedarNFTIssuance.sol:IPublicNFTIssuanceV0\";\n        features[4] = \"issuance/INFTSupply.sol:INFTSupplyV0\";\n        features[5] = \"royalties/IRoyalty.sol:IPublicRoyaltyV0\";\n        features[6] = \"baseURI/ICedarUpdateBaseURI.sol:IPublicUpdateBaseURIV0\";\n        features[7] = \"metadata/IContractMetadata.sol:IPublicMetadataV0\";\n        features[8] = \"metadata/ICedarNFTMetadata.sol:ICedarNFTMetadataV1\";\n        features[9] = \"agreement/ICedarAgreement.sol:IPublicAgreementV0\";\n        features[10] = \"primarysale/IPrimarySale.sol:IPublicPrimarySaleV1\";\n        features[11] = \"agreement/ICedarAgreement.sol:IRestrictedAgreementV0\";\n        features[12] = \"issuance/ICedarNFTIssuance.sol:IRestrictedNFTIssuanceV0\";\n        features[13] = \"lazymint/ICedarLazyMint.sol:IRestrictedLazyMintV0\";\n        features[14] = \"pausable/ICedarPausable.sol:IRestrictedPausableV0\";\n        features[15] = \"metadata/IContractMetadata.sol:IRestrictedMetadataV0\";\n        features[16] = \"baseURI/ICedarUpdateBaseURI.sol:IRestrictedUpdateBaseURIV0\";\n        features[17] = \"royalties/IRoyalty.sol:IRestrictedRoyaltyV0\";\n        features[18] = \"primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV1\";\n        features[19] = \"issuance/INFTLimitSupply.sol:IRestrictedNFTLimitSupplyV0\";\n    }\n\n    /// This needs to be public to be callable from initialize via delegatecall\n    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);\n\n    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {\n        (minor, patch) = minorVersion();\n        major = 7;\n    }\n\n    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {\n        interfaceId = \"impl/ICedarERC721Drop.sol:ICedarERC721DropV7\";\n    }\n\n    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {\n        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(ICedarFeaturesV0).interfaceId) || ((interfaceID == type(ICedarVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IPublicNFTIssuanceV0).interfaceId) || ((interfaceID == type(INFTSupplyV0).interfaceId) || ((interfaceID == type(IERC721V1).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IPublicRoyaltyV0).interfaceId) || ((interfaceID == type(IPublicUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(ICedarNFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicAgreementV0).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedAgreementV0).interfaceId) || ((interfaceID == type(IRestrictedNFTIssuanceV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV0).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedNFTLimitSupplyV0).interfaceId) || (interfaceID == type(ICedarERC721DropV7).interfaceId)))))))))))))))))))))));\n    }\n\n    function isICedarFeaturesV0() override public pure returns (bool) {\n        return true;\n    }\n}\n"
21     },
22     "contracts/cedar/drop/lib/FeeType.sol": {
23       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nlibrary FeeType {\n    uint256 internal constant PRIMARY_SALE = 0;\n    uint256 internal constant MARKET_SALE = 1;\n    uint256 internal constant SPLIT = 2;\n}\n"
24     },
25     "contracts/cedar/drop/lib/MerkleProof.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/cryptography/MerkleProof.sol\n// Copied from https://github.com/ensdomains/governance/blob/master/contracts/MerkleProof.sol\n\npragma solidity ^0.8;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * Source: https://github.com/ensdomains/governance/blob/master/contracts/MerkleProof.sol\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool, uint256) {\n        bytes32 computedHash = leaf;\n        uint256 index = 0;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            index *= 2;\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n                index += 1;\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return (computedHash == root, index);\n    }\n}\n"
27     },
28     "contracts/cedar/drop/types/DropERC721DataTypes.sol": {
29       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\n\nimport \"../../api/issuance/IDropClaimCondition.sol\";\nimport \"../../api/royalties/IRoyalty.sol\";\n\ninterface DropERC721DataTypes {\n    struct SequencedURI {\n        string uri;\n        /// @dev The high-watermark sequence number a URI - used to tell if one URI is fresher than a another\n        /// taken from the current value of uriSequenceCounter after it is incremented.\n        uint256 sequenceNumber;\n    }\n\n    struct ClaimData {\n        /// @dev The set of all claim conditions, at any given moment.\n        IDropClaimConditionV0.ClaimConditionList claimCondition;\n        /// @dev The next token ID of the NFT that can be claimed.\n        uint256 nextTokenIdToClaim;\n        /// @dev Mapping from address => total number of NFTs a wallet has claimed.\n        mapping(address => uint256) walletClaimCount;\n        /// @dev The next token ID of the NFT to \"lazy mint\".\n        uint256 nextTokenIdToMint;\n        /// @dev Global max total supply of NFTs.\n        uint256 maxTotalSupply;\n        /// @dev The max number of NFTs a wallet can claim.\n        uint256 maxWalletClaimCount;\n        /// @dev The address that receives all primary sales value.\n        address primarySaleRecipient;\n        /// @dev The address that receives all platform fees from all sales.\n        address platformFeeRecipient;\n        /// @dev The % of primary sales collected as platform fees.\n        uint16 platformFeeBps;\n        /// @dev The recipient of who gets the royalty.\n        address royaltyRecipient;\n        /// @dev The (default) address that receives all royalty value.\n        uint16 royaltyBps;\n        /// @dev Mapping from token ID => royalty recipient and bps for tokens of the token ID.\n        mapping(uint256 => IRoyaltyV0.RoyaltyInfo) royaltyInfoForToken;\n        /// @dev Sequence number counter for the synchronisation of per-token URIs and baseURIs relative base on which\n        /// was set most recently. Incremented on each URI-mutating action.\n        CountersUpgradeable.Counter uriSequenceCounter;\n        /// @dev One more than the Largest tokenId of each batch of tokens with the same baseURI\n        uint256[] baseURIIndices;\n        /// @dev Mapping from the 'base URI index' defined as the tokenId one more than the largest tokenId a batch of\n        /// tokens which all same the same baseURI.\n        /// Suppose we have two batches (and two baseURIs), with 3 and 4 tokens respectively, then in pictures we have:\n        /// [baseURI1 | baseURI2]\n        /// [ 0, 1, 2 | 3, 4, 5, 6]\n        /// The baseURIIndices would be:\n        /// [ 3, 7]\n        mapping(uint256 => SequencedURI) baseURI;\n        // Optional mapping for token URIs\n        mapping(uint256 => SequencedURI) tokenURIs;\n    }\n}\n"
30     },
31     "contracts/cedar/drop/errors/IErrors.sol": {
32       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nerror InvalidPermission();\nerror InvalidIndex();\nerror NothingToReveal();\nerror Bot();\nerror ST();\nerror CrossedLimitLazyMintedTokens();\nerror CrossedLimitMinTokenIdGreaterThanMaxTotalSupply();\nerror CrossedLimitQuantityPerTransaction();\nerror CrossedLimitMaxClaimableSupply();\nerror CrossedLimitMaxTotalSupply();\nerror CrossedLimitMaxWalletClaimCount();\nerror InvalidPrice();\nerror InvalidQuantity();\nerror InvalidTime();\nerror InvalidGating();\nerror InvalidMerkleProof();\nerror InvalidMaxQuantityProof();\nerror MaxBps();\nerror ClaimPaused();\nerror NoActiveMintCondition();\nerror TermsNotAccepted(address caller, string termsURI, uint8 acceptedVersion);\nerror BaseURIEmpty();\nerror InvalidTokenId(uint256 tokenId);\nerror InvalidNoOfTokenIds();\n"
33     },
34     "contracts/cedar/terms/types/TermsDataTypes.sol": {
35       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\ninterface TermsDataTypes {\n    /**\n     *  @notice The criteria that make up terms.\n     *\n     *  @param termsActivated       Indicates whether the terms are activated or not.\n     *\n     *  @param termsVersion         The version of the terms.\n     *\n     *  @param termsURI             The URI of the terms.\n     *\n     *  @param acceptedVersion      Mapping with the address of the acceptor and the version of the terms accepted.\n     *\n     *  @param termsAccepted        Mapping with the address of the acceptor and the status of the terms accepted.\n     *\n     */\n    struct Terms {\n        bool termsActivated;\n        uint8 termsVersion;\n        string termsURI;\n        mapping(address => uint8) acceptedVersion;\n        mapping(address => bool) termsAccepted;\n    }\n}\n"
36     },
37     "contracts/cedar/terms/lib/TermsLogic.sol": {
38       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"../errors/ITermsErrors.sol\";\nimport \"../types/TermsDataTypes.sol\";\n\nlibrary TermsLogic {\n    using TermsLogic for TermsDataTypes.Terms;\n\n    event TermsActivationStatusUpdated(bool isActivated);\n    event TermsUpdated(string termsURI, uint8 termsVersion);\n    event TermsAccepted(string termsURI, uint8 termsVersion, address indexed acceptor);\n\n    /// @notice activates / deactivates the terms of use.\n    function setTermsActivation(TermsDataTypes.Terms storage termsData, bool _active) external {\n        if (_active) {\n            _activateTerms(termsData);\n        } else {\n            _deactivateTerms(termsData);\n        }\n    }\n\n    /// @notice updates the term URI and pumps the terms version\n    function setTermsURI(TermsDataTypes.Terms storage termsData, string calldata _termsURI) external {\n        if (keccak256(abi.encodePacked(termsData.termsURI)) == keccak256(abi.encodePacked(_termsURI)))\n            revert TermsUriAlreadySet();\n        if (bytes(_termsURI).length > 0) {\n            termsData.termsVersion = termsData.termsVersion + 1;\n            termsData.termsActivated = true;\n        } else {\n            termsData.termsActivated = false;\n        }\n        termsData.termsURI = _termsURI;\n    }\n\n    /// @notice by signing this transaction, you are confirming that you have read and agreed to the terms of use at `termsURI`\n    function acceptTerms(TermsDataTypes.Terms storage termsData, address _acceptor) external {\n        if (!termsData.termsActivated) revert TermsNotActivated();\n        if (termsData.termsAccepted[_acceptor] && termsData.acceptedVersion[_acceptor] == termsData.termsVersion)\n            revert TermsAlreadyAccepted(termsData.termsVersion);\n        termsData.termsAccepted[_acceptor] = true;\n        termsData.acceptedVersion[_acceptor] = termsData.termsVersion;\n    }\n\n    /// @notice returns the details of the terms\n    /// @return termsURI - the URI of the terms\n    /// @return termsVersion - the version of the terms\n    /// @return termsActivated - the status of the terms\n    function getTermsDetails(TermsDataTypes.Terms storage termsData)\n        external\n        view\n        returns (\n            string memory termsURI,\n            uint8 termsVersion,\n            bool termsActivated\n        )\n    {\n        return (termsData.termsURI, termsData.termsVersion, termsData.termsActivated);\n    }\n\n    /// @notice returns true / false for whether the account owner accepted terms\n    function hasAcceptedTerms(TermsDataTypes.Terms storage termsData, address _address) external view returns (bool) {\n        return termsData.termsAccepted[_address] && termsData.acceptedVersion[_address] == termsData.termsVersion;\n    }\n\n    /// @notice returns true / false for whether the account owner accepted terms\n    function hasAcceptedTerms(\n        TermsDataTypes.Terms storage termsData,\n        address _address,\n        uint8 _version\n    ) external view returns (bool) {\n        return termsData.termsAccepted[_address] && termsData.acceptedVersion[_address] == _version;\n    }\n\n    /// @notice activates the terms\n    function _activateTerms(TermsDataTypes.Terms storage termsData) internal {\n        if (bytes(termsData.termsURI).length == 0) revert TermsURINotSet();\n        if (termsData.termsActivated) revert TermsStatusAlreadySet();\n        termsData.termsActivated = true;\n    }\n\n    /// @notice deactivates the terms\n    function _deactivateTerms(TermsDataTypes.Terms storage termsData) internal {\n        if (!termsData.termsActivated) revert TermsStatusAlreadySet();\n        termsData.termsActivated = false;\n    }\n}\n"
39     },
40     "contracts/cedar/api/issuance/INFTSupply.sol": {
41       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\ninterface INFTSupplyV0 {\n    /**\n     * @dev Total amount of tokens minted.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) external view returns (bool);\n}\n"
42     },
43     "contracts/cedar/api/metadata/ICedarNFTMetadata.sol": {
44       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\n// TODO: unify with ICedarSFTMetadata into ICedarTokenMetadata\ninterface ICedarNFTMetadataV1 {\n    /// @dev Returns the URI for a given tokenId.\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n"
45     },
46     "contracts/cedar/drop/openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\n    mapping(address => bool) private _trustedForwarder;\n\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC2771Context_init_unchained(trustedForwarder);\n    }\n\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal onlyInitializing {\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\n            _trustedForwarder[trustedForwarder[i]] = true;\n        }\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return _trustedForwarder[forwarder];\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"
48     },
49     "contracts/cedar/api/standard/IERC1155.sol": {
50       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface IERC1155V0 is IERC1155Upgradeable {}\n\ninterface IERC1155V1 is IERC1155Upgradeable {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) external;\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) external;\n}\n\ninterface IERC1155SupplyV0 is IERC1155V0 {\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) external view returns (bool);\n}\n\ninterface IERC1155SupplyV1 is IERC1155SupplyV0 {\n    /**\n     * @dev Amount of unique tokens minted.\n     */\n    function getLargestTokenId() external view returns (uint256);\n}\n\ninterface IERC1155SupplyV2 is IERC1155V1 {\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Amount of unique tokens minted.\n     */\n    function getLargestTokenId() external view returns (uint256);\n}\n"
51     },
52     "contracts/cedar/drop/lib/CurrencyTransferLib.sol": {
53       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\n// Helper interfaces\nimport {IWETH} from \"../interfaces/IWETH.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nlibrary CurrencyTransferLib {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @dev The address interpreted as native token of the chain.\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Transfers a given amount of currency.\n    function transferCurrency(\n        address _currency,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        if (_currency == NATIVE_TOKEN) {\n            safeTransferNativeToken(_to, _amount);\n        } else {\n            safeTransferERC20(_currency, _from, _to, _amount);\n        }\n    }\n\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\n    function transferCurrencyWithWrapper(\n        address _currency,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _nativeTokenWrapper\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        if (_currency == NATIVE_TOKEN) {\n            if (_from == address(this)) {\n                // withdraw from weth then transfer withdrawn native token to recipient\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\n            } else if (_to == address(this)) {\n                // store native currency in weth\n                require(_amount == msg.value, \"msg.value != amount\");\n                IWETH(_nativeTokenWrapper).deposit{value: _amount}();\n            } else {\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\n            }\n        } else {\n            safeTransferERC20(_currency, _from, _to, _amount);\n        }\n    }\n\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\n    function safeTransferERC20(\n        address _currency,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_from == _to) {\n            return;\n        }\n\n        if (_from == address(this)) {\n            IERC20Upgradeable(_currency).safeTransfer(_to, _amount);\n        } else {\n            IERC20Upgradeable(_currency).safeTransferFrom(_from, _to, _amount);\n        }\n    }\n\n    /// @dev Transfers `amount` of native token to `to`.\n    function safeTransferNativeToken(address to, uint256 value) internal {\n        // solhint-disable avoid-low-level-calls\n        // slither-disable-next-line low-level-calls\n        (bool success, ) = to.call{value: value}(\"\");\n        require(success, \"native token transfer failed\");\n    }\n\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\n    function safeTransferNativeTokenWithWrapper(\n        address to,\n        uint256 value,\n        address _nativeTokenWrapper\n    ) internal {\n        // solhint-disable avoid-low-level-calls\n        // slither-disable-next-line low-level-calls\n        (bool success, ) = to.call{value: value}(\"\");\n        if (!success) {\n            IWETH(_nativeTokenWrapper).deposit{value: value}();\n            IERC20Upgradeable(_nativeTokenWrapper).safeTransfer(to, value);\n        }\n    }\n}\n"
54     },
55     "contracts/cedar/api/royalties/IRoyalty.sol": {
56       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nimport \"../standard/IERC2981.sol\";\n\ninterface IRoyaltyV0 is IERC2981V0 {\n    struct RoyaltyInfo {\n        address recipient;\n        uint256 bps;\n    }\n\n    /// @dev Returns the royalty recipient and fee bps.\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\n\n    /// @dev Lets a module admin update the royalty bps and recipient.\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\n\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\n    function setRoyaltyInfoForToken(\n        uint256 tokenId,\n        address recipient,\n        uint256 bps\n    ) external;\n\n    /// @dev Returns the royalty recipient for a particular token Id.\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\n\n    /// @dev Emitted when royalty info is updated.\n    event DefaultRoyalty(address newRoyaltyRecipient, uint256 newRoyaltyBps);\n\n    /// @dev Emitted when royalty recipient for tokenId is set\n    event RoyaltyForToken(uint256 indexed tokenId, address royaltyRecipient, uint256 royaltyBps);\n}\n\ninterface IPublicRoyaltyV0 is IERC2981V0 {\n    struct RoyaltyInfo {\n        address recipient;\n        uint256 bps;\n    }\n\n    /// @dev Returns the royalty recipient and fee bps.\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\n\n    /// @dev Returns the royalty recipient for a particular token Id.\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\n}\n\ninterface IRestrictedRoyaltyV0 {\n    /// @dev Lets a module admin update the royalty bps and recipient.\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\n\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\n    function setRoyaltyInfoForToken(\n        uint256 tokenId,\n        address recipient,\n        uint256 bps\n    ) external;\n}\n"
57     },
58     "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
60     },
61     "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
63     },
64     "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
66     },
67     "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
69     },
70     "contracts/cedar/api/issuance/IDropClaimCondition.sol": {
71       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\";\n\n/**\n *  Cedar's 'Drop' contracts are distribution mechanisms for tokens.\n *\n *  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,\n *  ordered by their respective `startTimestamp`. A claim condition defines criteria under which\n *  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.\n *  At any moment, there is only one active claim condition.\n */\n\ninterface IDropClaimConditionV0 {\n    /**\n     *  @notice The criteria that make up a claim condition.\n     *\n     *  @param startTimestamp                 The unix timestamp after which the claim condition applies.\n     *                                        The same claim condition applies until the `startTimestamp`\n     *                                        of the next claim condition.\n     *\n     *  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\n     *                                        the claim condition.\n     *\n     *  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\n     *                                        under the claim condition.\n     *\n     *  @param quantityLimitPerTransaction    The maximum number of tokens that can be claimed in a single\n     *                                        transaction.\n     *\n     *  @param waitTimeInSecondsBetweenClaims The least number of seconds an account must wait after claiming\n     *                                        tokens, to be able to claim tokens again.\n     *\n     *  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\n     *                                        condition.\n     *\n     *  @param pricePerToken                  The price required to pay per token claimed.\n     *\n     *  @param currency                       The currency in which the `pricePerToken` must be paid.\n     */\n    struct ClaimCondition {\n        uint256 startTimestamp;\n        uint256 maxClaimableSupply;\n        uint256 supplyClaimed;\n        uint256 quantityLimitPerTransaction;\n        uint256 waitTimeInSecondsBetweenClaims;\n        bytes32 merkleRoot;\n        uint256 pricePerToken;\n        address currency;\n    }\n\n    /**\n     *  @notice The set of all claim conditions, at any given moment.\n     *  Claim Phase ID = [currentStartId, currentStartId + length - 1];\n     *\n     *  @param currentStartId           The uid for the first claim condition amongst the current set of\n     *                                  claim conditions. The uid for each next claim condition is one\n     *                                  more than the previous claim condition's uid.\n     *\n     *  @param count                    The total number of phases / claim conditions in the list\n     *                                  of claim conditions.\n     *\n     *  @param phases                   The claim conditions at a given uid. Claim conditions\n     *                                  are ordered in an ascending order by their `startTimestamp`.\n     *\n     *  @param claimDetails             Map from an account and uid for a claim condition, to the claim\n     *                                  records an account has done.\n     *\n     */\n    struct ClaimConditionList {\n        uint256 currentStartId;\n        uint256 count;\n        mapping(uint256 => ClaimCondition) phases;\n        mapping(uint256 => mapping(address => ClaimDetails)) userClaims;\n    }\n\n    /**\n     *  @notice Claim detail for a user claim.\n     *\n     *  @param lastClaimTimestamp    The timestamp at which the last token was claimed.\n     *\n     *  @param claimedBalance        The number of tokens claimed.\n     *\n     */\n    struct ClaimDetails {\n        uint256 lastClaimTimestamp;\n        uint256 claimedBalance;\n    }\n}\n"
72     },
73     "@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMapsUpgradeable {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
75     },
76     "contracts/cedar/api/standard/IERC2981.sol": {
77       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\ninterface IERC2981V0 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
78     },
79     "contracts/cedar/drop/interfaces/IWETH.sol": {
80       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n    function transfer(address to, uint256 value) external returns (bool);\n}\n"
81     },
82     "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
84     },
85     "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
87     },
88     "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
90     },
91     "contracts/cedar/api/metadata/IContractMetadata.sol": {
92       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface ICedarMetadataV1 {\n    /// @dev Contract level metadata.\n    function contractURI() external view returns (string memory);\n\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\n    function setContractURI(string calldata _uri) external;\n\n    /// @dev Emitted when contractURI is updated\n    event ContractURIUpdated(address indexed updater, string uri);\n}\n\ninterface IPublicMetadataV0 {\n    /// @dev Contract level metadata.\n    function contractURI() external view returns (string memory);\n}\n\ninterface IRestrictedMetadataV0 {\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\n    function setContractURI(string calldata _uri) external;\n}\n"
93     },
94     "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
95       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
96     },
97     "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol": {
98       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./AddressUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract MulticallUpgradeable is Initializable {\n    function __Multicall_init() internal onlyInitializing {\n    }\n\n    function __Multicall_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = _functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
99     },
100     "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
101       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
102     },
103     "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
104       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
105     },
106     "operator-filter-registry/src/upgradeable/DefaultOperatorFiltererUpgradeable.sol": {
107       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFiltererUpgradeable} from \"./OperatorFiltererUpgradeable.sol\";\n\nabstract contract DefaultOperatorFiltererUpgradeable is OperatorFiltererUpgradeable {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    function __DefaultOperatorFilterer_init() internal onlyInitializing {\n        OperatorFiltererUpgradeable.__OperatorFilterer_init(DEFAULT_SUBSCRIPTION, true);\n    }\n}\n"
108     },
109     "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
110       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
111     },
112     "contracts/cedar/terms/errors/ITermsErrors.sol": {
113       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nerror TermsNotActivated();\nerror TermsStatusAlreadySet();\nerror TermsURINotSet();\nerror TermsUriAlreadySet();\nerror TermsAlreadyAccepted(uint8 acceptedVersion);\n\nerror TermsCanOnlyBeSetByOwner(address token);\nerror TermsNotActivatedForToken(address token);\nerror TermsStatusAlreadySetForToken(address token);\nerror TermsURINotSetForToken(address token);\nerror TermsUriAlreadySetForToken(address token);\nerror TermsAlreadyAcceptedForToken(address token, uint8 acceptedVersion);\n"
114     },
115     "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
116       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
117     },
118     "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
119       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
120     },
121     "@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {
122       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"
123     },
124     "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
125       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
126     },
127     "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
128       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
129     },
130     "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
131       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
132     },
133     "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
134       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
135     },
136     "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
137       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
138     },
139     "operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol": {
140       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"../IOperatorFilterRegistry.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract OperatorFiltererUpgradeable is Initializable {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry constant operatorFilterRegistry =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe)\n        internal\n        onlyInitializing\n    {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\n                if (subscribe) {\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                    } else {\n                        operatorFilterRegistry.register(address(this));\n                    }\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            // Allow spending tokens from addresses with balance\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n            // from an EOA.\n            if (from == msg.sender) {\n                _;\n                return;\n            }\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\n                revert OperatorNotAllowed(msg.sender);\n            }\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n        _;\n    }\n}\n"
141     },
142     "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
143       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
144     },
145     "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
146       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
147     },
148     "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
149       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
150     },
151     "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
152       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
153     },
154     "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
155       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
156     },
157     "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
158       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
159     },
160     "contracts/cedar/api/ICedarFeatures.sol": {
161       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\ninterface ICedarFeaturesV0 is IERC165Upgradeable {\n    // Marker interface to make an ERC165 clash less likely\n    function isICedarFeaturesV0() external pure returns (bool);\n\n    // List of features that contract supports and may be passed to featureVersion\n    function supportedFeatures() external pure returns (string[] memory features);\n}\n"
162     },
163     "contracts/cedar/api/IMulticallable.sol": {
164       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\n// See https://docs.openzeppelin.com/contracts/4.x/utilities#multicall\ninterface IMulticallableV0 {\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\n}\n"
165     },
166     "contracts/cedar/api/ICedarVersioned.sol": {
167       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\ninterface ICedarMinorVersionedV0 {\n    function minorVersion() external view returns (uint256 minor, uint256 patch);\n}\n\ninterface ICedarImplementationVersionedV0 {\n    /// @dev Concrete implementation semantic version - provided for completeness but not designed to be the point of dispatch\n    function implementationVersion()\n        external\n        view\n        returns (\n            uint256 major,\n            uint256 minor,\n            uint256 patch\n        );\n}\n\ninterface ICedarImplementationVersionedV1 is ICedarImplementationVersionedV0 {\n    /// @dev returns the name of the implementation interface such as ICedarERC721DropV3\n    /// allows us to reliably emit the correct events\n    function implementationInterfaceName() external view returns (string memory interfaceName);\n}\n\ninterface ICedarImplementationVersionedV2 is ICedarImplementationVersionedV0 {\n    /// @dev returns the name of the implementation interface such as impl/ICedarERC721Drop.sol:ICedarERC721DropV3\n    function implementationInterfaceId() external view returns (string memory interfaceId);\n}\n\ninterface ICedarVersionedV0 is ICedarImplementationVersionedV0, ICedarMinorVersionedV0, IERC165Upgradeable {}\n\ninterface ICedarVersionedV1 is ICedarImplementationVersionedV1, ICedarMinorVersionedV0, IERC165Upgradeable {}\n\ninterface ICedarVersionedV2 is ICedarImplementationVersionedV2, ICedarMinorVersionedV0, IERC165Upgradeable {}\n"
168     },
169     "contracts/cedar/api/impl/ICedarERC721Drop.sol": {
170       "content": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity ^0.8;\n\nimport \"../ICedarFeatures.sol\";\nimport \"../IMulticallable.sol\";\nimport \"../ICedarVersioned.sol\";\nimport \"../issuance/ICedarNFTIssuance.sol\";\nimport \"../issuance/INFTLimitSupply.sol\";\nimport \"../agreement/ICedarAgreement.sol\";\nimport \"../issuance/INFTSupply.sol\";\nimport \"../lazymint/ICedarLazyMint.sol\";\nimport \"../standard/IERC721.sol\";\nimport \"../standard/IERC2981.sol\";\nimport \"../royalties/IRoyalty.sol\";\nimport \"../baseURI/ICedarUpdateBaseURI.sol\";\nimport \"../metadata/ICedarNFTMetadata.sol\";\nimport \"../metadata/IContractMetadata.sol\";\nimport \"../primarysale/IPrimarySale.sol\";\nimport \"../pausable/ICedarPausable.sol\";\n\n// Each CedarERC721 contract should implement a maximal version of the interfaces it supports and should itself carry\n// the version major version suffix, in this case CedarERC721V0\n\ninterface ICedarERC721DropV7 is\n    ICedarFeaturesV0,\n    ICedarVersionedV2,\n    IMulticallableV0,\n    IPublicNFTIssuanceV0,\n    INFTSupplyV0,\n    // NOTE: keep this standard interfaces around to generate supportsInterface\n    IERC721V1,\n    IERC2981V0,\n    IPublicRoyaltyV0,\n    IPublicUpdateBaseURIV0,\n    IPublicMetadataV0,\n    ICedarNFTMetadataV1,\n    IPublicAgreementV0,\n    IPublicPrimarySaleV1,\n    IRestrictedAgreementV0,\n    IRestrictedNFTIssuanceV0,\n    IRestrictedLazyMintV0,\n    IRestrictedPausableV0,\n    IRestrictedMetadataV0,\n    IRestrictedUpdateBaseURIV0,\n    IRestrictedRoyaltyV0,\n    IRestrictedPrimarySaleV1,\n    IRestrictedNFTLimitSupplyV0\n{\n\n}\n"
171     },
172     "contracts/cedar/api/issuance/ICedarNFTIssuance.sol": {
173       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\nimport \"./IDropClaimCondition.sol\";\n\n/**\n *  Cedar's 'Drop' contracts are distribution mechanisms for tokens. The\n *  `DropERC721` contract is a distribution mechanism for ERC721 tokens.\n *\n *  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens\n *  at once by providing a single base URI for all tokens being lazy minted.\n *  The URI for each of the 'n' tokens lazy minted is the provided base URI +\n *  `{tokenId}` of the respective token. (e.g. \"ipsf://Qmece.../1\").\n *\n *  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n *  with non-overlapping time windows, and accounts can claim the tokens according to\n *  restrictions defined in the claim condition that is active at the time of the transaction.\n */\n\ninterface ICedarNFTIssuanceV0 is IDropClaimConditionV0 {\n    /// @dev Emitted when tokens are claimed.\n    event TokensClaimed(\n        uint256 indexed claimConditionIndex,\n        address indexed claimer,\n        address indexed receiver,\n        uint256 startTokenId,\n        uint256 quantityClaimed\n    );\n\n    /// @dev Emitted when new claim conditions are set.\n    event ClaimConditionsUpdated(ClaimCondition[] claimConditions);\n\n    /**\n     *  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n     *\n     *  @param phases                Claim conditions in ascending order by `startTimestamp`.\n     *  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n     *                               `limitMerkleProofClaim` values when setting new\n     *                               claim conditions.\n     */\n    function setClaimConditions(ClaimCondition[] calldata phases, bool resetClaimEligibility) external;\n\n    /**\n     *  @notice Lets an account claim a given quantity of NFTs.\n     *\n     *  @param receiver                       The receiver of the NFTs to claim.\n     *  @param quantity                       The quantity of NFTs to claim.\n     *  @param currency                       The currency in which to pay for the claim.\n     *  @param pricePerToken                  The price per token to pay for the claim.\n     *  @param proofs                         The proof of the claimer's inclusion in the merkle root allowlist\n     *                                        of the claim conditions that apply.\n     *  @param proofMaxQuantityPerTransaction (Optional) The maximum number of NFTs an address included in an\n     *                                        allowlist can claim.\n     */\n    function claim(\n        address receiver,\n        uint256 quantity,\n        address currency,\n        uint256 pricePerToken,\n        bytes32[] calldata proofs,\n        uint256 proofMaxQuantityPerTransaction\n    ) external payable;\n}\n\ninterface ICedarNFTIssuanceV1 is ICedarNFTIssuanceV0 {\n    /// @dev Expose the current active claim condition including claim limits\n    function getActiveClaimConditions()\n        external\n        view\n        returns (\n            ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 remainingSupply\n        );\n\n    /// @dev Expose the user specific limits related to the current active claim condition\n    function getUserClaimConditions(address _claimer)\n        external\n        view\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        );\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) external view;\n}\n\ninterface ICedarNFTIssuanceV2 is ICedarNFTIssuanceV1 {\n    event TokensIssued(\n        uint256 indexed startTokenId,\n        address indexed issuer,\n        address indexed receiver,\n        uint256 quantity\n    );\n\n    event TokenIssued(uint256 indexed tokenId, address indexed issuer, address indexed receiver, string tokenURI);\n\n    event TokenURIUpdated(uint256 indexed tokenId, address indexed updater, string tokenURI);\n\n    /// @dev Issue quantity tokens directly to receiver, only callable by ISSUER_ROLE. Emits TokensIssued event.\n    function issue(address receiver, uint256 quantity) external;\n\n    /// @dev Issue a single token directly to receiver with a custom tokenURI, only callable by ISSUER_ROLE.\n    /// Emits TokenIssued event.\n    function issueWithTokenURI(address receiver, string calldata tokenURI) external;\n\n    /// @dev Sets the tokenURI of a specific token which overrides the one that would otherwise\n    /// be generated from the baseURI. This function keeps tracks of whether the tokenURI or baseURI is fresher for a\n    /// particular token. Emits TokenURIUpdated event.\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\n}\n\ninterface ICedarNFTIssuanceV3 is ICedarNFTIssuanceV0 {\n    event TokensIssued(\n        uint256 indexed startTokenId,\n        address indexed issuer,\n        address indexed receiver,\n        uint256 quantity\n    );\n\n    event TokenIssued(uint256 indexed tokenId, address indexed issuer, address indexed receiver, string tokenURI);\n\n    event TokenURIUpdated(uint256 indexed tokenId, address indexed updater, string tokenURI);\n\n    /// @dev Issue quantity tokens directly to receiver, only callable by ISSUER_ROLE. Emits TokensIssued event.\n    function issue(address receiver, uint256 quantity) external;\n\n    /// @dev Issue a single token directly to receiver with a custom tokenURI, only callable by ISSUER_ROLE.\n    /// Emits TokenIssued event.\n    function issueWithTokenURI(address receiver, string calldata tokenURI) external;\n\n    /// @dev Sets the tokenURI of a specific token which overrides the one that would otherwise\n    /// be generated from the baseURI. This function keeps tracks of whether the tokenURI or baseURI is fresher for a\n    /// particular token. Emits TokenURIUpdated event.\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\n\n    /// @dev Expose the current active claim condition including claim limits\n    function getActiveClaimConditions()\n        external\n        view\n        returns (\n            ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 remainingSupply,\n            bool isClaimPaused\n        );\n\n    /// @dev Expose the user specific limits related to the current active claim condition\n    function getUserClaimConditions(address _claimer)\n        external\n        view\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 walletClaimedCountInPhase,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        );\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) external view;\n}\n\ninterface ICedarNFTIssuanceV4 is ICedarNFTIssuanceV0 {\n    event TokensIssued(\n        uint256 indexed startTokenId,\n        address indexed issuer,\n        address indexed receiver,\n        uint256 quantity\n    );\n\n    event TokenIssued(uint256 indexed tokenId, address indexed issuer, address indexed receiver, string tokenURI);\n\n    event TokenURIUpdated(uint256 indexed tokenId, address indexed updater, string tokenURI);\n\n    /// @dev Issue quantity tokens directly to receiver, only callable by ISSUER_ROLE. Emits TokensIssued event.\n    function issue(address receiver, uint256 quantity) external;\n\n    /// @dev Issue a single token directly to receiver with a custom tokenURI, only callable by ISSUER_ROLE.\n    /// Emits TokenIssued event.\n    function issueWithTokenURI(address receiver, string calldata tokenURI) external;\n\n    /// @dev Sets the tokenURI of a specific token which overrides the one that would otherwise\n    /// be generated from the baseURI. This function keeps tracks of whether the tokenURI or baseURI is fresher for a\n    /// particular token. Emits TokenURIUpdated event.\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\n\n    /// @dev Expose the current active claim condition including claim limits\n    function getActiveClaimConditions()\n        external\n        view\n        returns (\n            ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 tokenSupply,\n            uint256 maxTotalSupply,\n            bool isClaimPaused\n        );\n\n    /// @dev Expose the user specific limits related to the current active claim condition\n    function getUserClaimConditions(address _claimer)\n        external\n        view\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 walletClaimedCountInPhase,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        );\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) external view;\n}\n\ninterface IPublicNFTIssuanceV0 is IDropClaimConditionV0 {\n    /**\n     *  @notice Lets an account claim a given quantity of NFTs.\n     *\n     *  @param receiver                       The receiver of the NFTs to claim.\n     *  @param quantity                       The quantity of NFTs to claim.\n     *  @param currency                       The currency in which to pay for the claim.\n     *  @param pricePerToken                  The price per token to pay for the claim.\n     *  @param proofs                         The proof of the claimer's inclusion in the merkle root allowlist\n     *                                        of the claim conditions that apply.\n     *  @param proofMaxQuantityPerTransaction (Optional) The maximum number of NFTs an address included in an\n     *                                        allowlist can claim.\n     */\n    function claim(\n        address receiver,\n        uint256 quantity,\n        address currency,\n        uint256 pricePerToken,\n        bytes32[] calldata proofs,\n        uint256 proofMaxQuantityPerTransaction\n    ) external payable;\n\n    /// @dev Expose the current active claim condition including claim limits\n    function getActiveClaimConditions()\n        external\n        view\n        returns (\n            ClaimCondition memory condition,\n            uint256 conditionId,\n            uint256 walletMaxClaimCount,\n            uint256 tokenSupply,\n            uint256 maxTotalSupply,\n            bool isClaimPaused\n        );\n\n    /// @dev Expose the user specific limits related to the current active claim condition\n    function getUserClaimConditions(address _claimer)\n        external\n        view\n        returns (\n            uint256 conditionId,\n            uint256 walletClaimedCount,\n            uint256 walletClaimedCountInPhase,\n            uint256 lastClaimTimestamp,\n            uint256 nextValidClaimTimestamp\n        );\n\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\n    function verifyClaim(\n        uint256 _conditionId,\n        address _claimer,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        bool verifyMaxQuantityPerTransaction\n    ) external view;\n}\n\ninterface IRestrictedNFTIssuanceV0 is IDropClaimConditionV0 {\n    /**\n     *  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n     *\n     *  @param phases                Claim conditions in ascending order by `startTimestamp`.\n     *  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n     *                               `limitMerkleProofClaim` values when setting new\n     *                               claim conditions.\n     */\n    function setClaimConditions(ClaimCondition[] calldata phases, bool resetClaimEligibility) external;\n\n    /// @dev Issue quantity tokens directly to receiver, only callable by ISSUER_ROLE. Emits TokensIssued event.\n    function issue(address receiver, uint256 quantity) external;\n\n    /// @dev Issue a single token directly to receiver with a custom tokenURI, only callable by ISSUER_ROLE.\n    /// Emits TokenIssued event.\n    function issueWithTokenURI(address receiver, string calldata tokenURI) external;\n\n    /// @dev Sets the tokenURI of a specific token which overrides the one that would otherwise\n    /// be generated from the baseURI. This function keeps tracks of whether the tokenURI or baseURI is fresher for a\n    /// particular token. Emits TokenURIUpdated event.\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\n}\n"
174     },
175     "contracts/cedar/api/standard/IERC721.sol": {
176       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\ninterface IERC721V0 is IERC721Upgradeable {}\n\ninterface IERC721V1 is IERC721Upgradeable {\n    function burn(uint256 tokenId) external;\n}\n"
177     },
178     "contracts/cedar/api/baseURI/ICedarUpdateBaseURI.sol": {
179       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\ninterface ICedarUpdateBaseURIV0 {\n    /// @dev Emitted when base URI is updated.\n    event BaseURIUpdated(uint256 baseURIIndex, string baseURI);\n\n    /**\n     *  @notice Lets a minter (account with `MINTER_ROLE`) update base URI\n     */\n    function updateBaseURI(uint256 baseURIIndex, string calldata _baseURIForTokens) external;\n\n    /**\n     *  @dev Gets the base URI indices\n     */\n    function getBaseURIIndices() external view returns (uint256[] memory);\n}\n\ninterface IPublicUpdateBaseURIV0 {\n    /**\n     *  @dev Gets the base URI indices\n     */\n    function getBaseURIIndices() external view returns (uint256[] memory);\n}\n\ninterface IRestrictedUpdateBaseURIV0 {\n    /**\n     *  @notice Lets a minter (account with `MINTER_ROLE`) update base URI\n     */\n    function updateBaseURI(uint256 baseURIIndex, string calldata _baseURIForTokens) external;\n}\n"
180     },
181     "contracts/cedar/api/agreement/ICedarAgreement.sol": {
182       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8;\n\ninterface ICedarAgreementV0 {\n    // Accept legal terms associated with transfer of this NFT\n    function acceptTerms() external;\n\n    function userAgreement() external view returns (string memory);\n\n    function termsActivated() external view returns (bool);\n\n    function setTermsStatus(bool _status) external;\n\n    function getAgreementStatus(address _address) external view returns (bool sig);\n\n    function storeTermsAccepted(address _acceptor, bytes calldata _signature) external;\n}\n\ninterface ICedarAgreementV1 {\n    // Accept legal terms associated with transfer of this NFT\n    event TermsActivationStatusUpdated(bool isActivated);\n    event TermsUpdated(string termsURI, uint8 termsVersion);\n    event TermsAccepted(string termsURI, uint8 termsVersion, address indexed acceptor);\n\n    function acceptTerms() external;\n\n    function acceptTerms(address _acceptor) external;\n\n    function setTermsActivation(bool _active) external;\n\n    function setTermsURI(string calldata _termsURI) external;\n\n    function getTermsDetails()\n        external\n        view\n        returns (\n            string memory termsURI,\n            uint8 termsVersion,\n            bool termsActivated\n        );\n\n    function hasAcceptedTerms(address _address) external view returns (bool hasAccepted);\n\n    //    function hasAcceptedTerms(address _address, uint8 _termsVersion) external view returns (bool hasAccepted);\n}\n\ninterface IPublicAgreementV0 {\n    function acceptTerms() external;\n\n    //    function acceptTerms(address _acceptor, bytes calldata _signature) external;\n\n    function getTermsDetails()\n        external\n        view\n        returns (\n            string memory termsURI,\n            uint8 termsVersion,\n            bool termsActivated\n        );\n\n    function hasAcceptedTerms(address _address) external view returns (bool hasAccepted);\n\n    function hasAcceptedTerms(address _address, uint8 _termsVersion) external view returns (bool hasAccepted);\n}\n\ninterface IRestrictedAgreementV0 {\n    function acceptTerms(address _acceptor) external;\n\n    function setTermsActivation(bool _active) external;\n\n    function setTermsURI(string calldata _termsURI) external;\n}\n"
183     },
184     "contracts/cedar/api/primarysale/IPrimarySale.sol": {
185       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface IPrimarySaleV0 {\n    /// @dev The address that receives all primary sales value.\n    function primarySaleRecipient() external view returns (address);\n\n    /// @dev Lets a module admin set the default recipient of all primary sales.\n    function setPrimarySaleRecipient(address _saleRecipient) external;\n\n    /// @dev Emitted when a new sale recipient is set.\n    event PrimarySaleRecipientUpdated(address indexed recipient);\n}\n\ninterface IPrimarySaleV1 {\n    /// @dev The address that receives all primary sales value.\n    function primarySaleRecipient() external view returns (address);\n\n    /// @dev Lets a module admin set the default recipient of all primary sales.\n    function setPrimarySaleRecipient(address _saleRecipient) external;\n\n    /// @dev Emitted when a new sale recipient is set.\n    event PrimarySaleRecipientUpdated(address indexed recipient, bool frogs);\n}\n\ninterface IPublicPrimarySaleV1 {\n    /// @dev The address that receives all primary sales value.\n    function primarySaleRecipient() external view returns (address);\n}\n\ninterface IRestrictedPrimarySaleV1 {\n    /// @dev Lets a module admin set the default recipient of all primary sales.\n    function setPrimarySaleRecipient(address _saleRecipient) external;\n}\n"
186     },
187     "contracts/cedar/api/lazymint/ICedarLazyMint.sol": {
188       "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.4;\n\ninterface ICedarLazyMintV0 {\n    /// @dev Emitted when tokens are lazy minted.\n    event TokensLazyMinted(uint256 startTokenId, uint256 endTokenId, string baseURI);\n\n    /**\n     *  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n     *          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n     *\n     *  @param amount           The amount of NFTs to lazy mint.\n     *  @param baseURIForTokens The URI for the NFTs to lazy mint. If lazy minting\n     *                           'delayed-reveal' NFTs, the is a URI for NFTs in the\n     *                           un-revealed state.\n     */\n    function lazyMint(uint256 amount, string calldata baseURIForTokens) external;\n}\n\ninterface IRestrictedLazyMintV0 {\n    /**\n     *  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n     *          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n     *\n     *  @param amount           The amount of NFTs to lazy mint.\n     *  @param baseURIForTokens The URI for the NFTs to lazy mint. If lazy minting\n     *                           'delayed-reveal' NFTs, the is a URI for NFTs in the\n     *                           un-revealed state.\n     */\n    function lazyMint(uint256 amount, string calldata baseURIForTokens) external;\n}\n"
189     },
190     "contracts/cedar/api/pausable/ICedarPausable.sol": {
191       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface ICedarPausableV0 {\n    /// @dev Pause claim functionality.\n    function pauseClaims() external;\n\n    /// @dev Un-pause claim functionality.\n    function unpauseClaims() external;\n\n    /// @dev Event emitted when claim functionality is paused/un-paused.\n    event ClaimPauseStatusUpdated(bool pauseStatus);\n}\n\ninterface ICedarPausableV1 {\n    /// @dev Pause / Un-pause claim functionality.\n    function setClaimPauseStatus(bool _pause) external;\n\n    /// @dev Event emitted when claim functionality is paused/un-paused.\n    event ClaimPauseStatusUpdated(bool pauseStatus);\n}\n\ninterface IRestrictedPausableV0 {\n    /// @dev Pause / Un-pause claim functionality.\n    function setClaimPauseStatus(bool _pause) external;\n}\n"
192     },
193     "contracts/cedar/api/issuance/INFTLimitSupply.sol": {
194       "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8;\n\ninterface IRestrictedNFTLimitSupplyV0 {\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\n}\n"
195     }
196   },
197   "settings": {
198     "optimizer": {
199       "enabled": true,
200       "runs": 1
201     },
202     "outputSelection": {
203       "*": {
204         "*": [
205           "evm.bytecode",
206           "evm.deployedBytecode",
207           "devdoc",
208           "userdoc",
209           "metadata",
210           "abi"
211         ]
212       }
213     },
214     "metadata": {
215       "useLiteralContent": true
216     },
217     "libraries": {
218       "contracts/cedar/drop/CedarERC721DropLogic.sol": {
219         "CedarERC721DropLogic": "0xf18b5197a416ecda9785474036e2f93f75332054"
220       },
221       "contracts/cedar/terms/lib/TermsLogic.sol": {
222         "TermsLogic": "0x1229af729f926d2b7892ff762724bafd60f619dc"
223       }
224     }
225   }
226 }}