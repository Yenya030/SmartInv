1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/qatar/BankOfQatar.sol": {
5       "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity 0.8.13;\n\n/**\n * Bank Of Qatar - Earn $WCI reflections.\n *\n * Telegram: https://t.me/bankofqatar\n * Website: https://www.bankofqatar.io\n *\n */\n\n/**\n * Standard SafeMath, stripped down to just add/sub/mul/div\n */\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\n/**\n * ERC20 standard interface.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function getOwner() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Auth {\n    address internal owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    /**\n     * Function modifier to require caller to be contract deployer\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!Owner\");\n        _;\n    }\n\n    /**\n     * Check if address is owner\n     */\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n\n    function transferOwnership(address payable adr) public onlyOwner {\n        owner = adr;\n        emit OwnershipTransferred(adr);\n    }\n\n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ninterface IQBANK {\n    function setDistributionCriteria(\n        uint256 _minPeriod,\n        uint256 _minDistribution\n    ) external;\n\n    function setShare(address shareholder, uint256 amount) external;\n\n    function deposit() external payable;\n\n    function process(uint256 gas) external;\n\n    function gibQbank(address shareholder) external;\n}\n\ncontract QBank is IQBANK {\n    using SafeMath for uint256;\n    address _token;\n\n    address public WCI;\n\n    IDEXRouter router;\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n    }\n\n    address[] shareholders;\n    mapping(address => uint256) shareholderIndexes;\n    mapping(address => uint256) shareholderClaims;\n    mapping(address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalDistributed;\n    uint256 public dividendsPerShare;\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\n\n    uint256 public minPeriod = 30 minutes;\n    uint256 public minDistribution = 0 * (10**9);\n\n    uint256 public currentIndex;\n    bool initialized;\n\n    modifier initialization() {\n        require(!initialized);\n        _;\n        initialized = true;\n    }\n\n    modifier onlyToken() {\n        require(msg.sender == _token);\n        _;\n    }\n\n    constructor() {\n        _token = msg.sender;\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        WCI = 0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32;\n    }\n\n    receive() external payable {\n        deposit();\n    }\n\n    function setDistributionCriteria(\n        uint256 newMinPeriod,\n        uint256 newMinDistribution\n    ) external override onlyToken {\n        minPeriod = newMinPeriod;\n        minDistribution = newMinDistribution;\n    }\n\n    function setShare(address shareholder, uint256 amount)\n        external\n        override\n        onlyToken\n    {\n        if (shares[shareholder].amount > 0) {\n            distributeDividend(shareholder);\n        }\n\n        if (amount > 0 && shares[shareholder].amount == 0) {\n            addShareholder(shareholder);\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n    }\n\n    function deposit() public payable override {\n        uint256 balanceBefore = IERC20(WCI).balanceOf(address(this));\n\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = address(WCI);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n            value: msg.value\n        }(0, path, address(this), block.timestamp);\n\n        uint256 amount = IERC20(WCI).balanceOf(address(this)).sub(\n            balanceBefore\n        );\n        totalDividends = totalDividends.add(amount);\n        dividendsPerShare = dividendsPerShare.add(\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\n        );\n    }\n\n    function process(uint256 gas) external override {\n        uint256 shareholderCount = shareholders.length;\n\n        if (shareholderCount == 0) {\n            return;\n        }\n\n        uint256 iterations = 0;\n        uint256 gasUsed = 0;\n        uint256 gasLeft = gasleft();\n\n        while (gasUsed < gas && iterations < shareholderCount) {\n            if (currentIndex >= shareholderCount) {\n                currentIndex = 0;\n            }\n\n            if (shouldDistribute(shareholders[currentIndex])) {\n                distributeDividend(shareholders[currentIndex]);\n            }\n\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\n            gasLeft = gasleft();\n            currentIndex++;\n            iterations++;\n        }\n    }\n\n    function shouldDistribute(address shareholder) public view returns (bool) {\n        return\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\n            getUnpaidEarnings(shareholder) > minDistribution;\n    }\n\n    function distributeDividend(address shareholder) internal {\n        if (shares[shareholder].amount == 0) {\n            return;\n        }\n\n        uint256 amount = getUnpaidEarnings(shareholder);\n        if (amount > 0) {\n            totalDistributed = totalDistributed.add(amount);\n            IERC20(WCI).transfer(shareholder, amount);\n            shareholderClaims[shareholder] = block.timestamp;\n            shares[shareholder].totalRealised = shares[shareholder]\n                .totalRealised\n                .add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(\n                shares[shareholder].amount\n            );\n        }\n    }\n\n    function gibQbank(address shareholder) external override onlyToken {\n        distributeDividend(shareholder);\n    }\n\n    function getUnpaidEarnings(address shareholder)\n        public\n        view\n        returns (uint256)\n    {\n        if (shares[shareholder].amount == 0) {\n            return 0;\n        }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\n            return 0;\n        }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function getCumulativeDividends(uint256 share)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\n            shareholders.length - 1\n        ];\n        shareholderIndexes[\n            shareholders[shareholders.length - 1]\n        ] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n}\n\ncontract BankOfQatar is IERC20, Auth {\n    using SafeMath for uint256;\n\n    address public WCI = 0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32; //WCI COIN\n\n    string private constant _name = \"Bank Of Qatar\";\n    string private constant _symbol = \"QBANK\";\n    uint8 private constant _decimals = 18;\n\n    uint256 private _totalSupply = 1000000000 * (10**_decimals);\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => uint256) private cooldown;\n\n    address private WETH;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    mapping(address => bool) public isFeeExempt;\n    mapping(address => bool) public isTxLimitExempt;\n    mapping(address => bool) public isDividendExempt;\n\n    address public lpWallet = DEAD;\n\n    uint256 public buyFee = 7;\n    uint256 public sellFee = 7;\n\n    uint256 public toReflections = 40;\n    uint256 public toLiquidity = 20;\n    uint256 public toMarketing = 40;\n\n    uint256 public allocationSum = 100;\n\n    IDEXRouter public router;\n    address public pair;\n    address public factory;\n    address private tokenOwner;\n    address public devWallet;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public tradingOpen = false;\n\n    QBank public qBank;\n    uint256 public qBankGas = 0;\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    uint256 public maxTx = _totalSupply.div(1000);\n    uint256 public maxWallet = _totalSupply.div(1000);\n    uint256 public swapThreshold = _totalSupply.div(400);\n\n    constructor(address _owner) Auth(_owner) {\n        devWallet = payable(_owner);\n\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        WETH = router.WETH();\n\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\n\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        qBank = new QBank();\n\n        isFeeExempt[_owner] = true;\n        isFeeExempt[devWallet] = true;\n\n        isDividendExempt[pair] = true;\n        isDividendExempt[address(this)] = true;\n        isDividendExempt[DEAD] = true;\n\n        isTxLimitExempt[_owner] = true;\n        isTxLimitExempt[pair] = true;\n        isTxLimitExempt[DEAD] = true;\n        isTxLimitExempt[devWallet] = true;\n\n        _balances[_owner] = _totalSupply;\n\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function botsPointOne() external onlyOwner {\n        require(!tradingOpen, \"Behave.\");\n\n        maxTx = _totalSupply.div(100);\n        maxWallet = _totalSupply.div(100);\n    }\n\n    //once enabled, cannot be reversed\n    function openMarkets() external onlyOwner {\n        tradingOpen = true;\n    }\n\n    function changeTotalFees(uint256 newBuyFee, uint256 newSellFee)\n        external\n        onlyOwner\n    {\n        buyFee = newBuyFee;\n        sellFee = newSellFee;\n\n        require(buyFee <= 7, \"too high\");\n        require(sellFee <= 7, \"too high\");\n    }\n\n    function changeFeeAllocation(\n        uint256 newRewardFee,\n        uint256 newLpFee,\n        uint256 newMarketingFee\n    ) external onlyOwner {\n        toReflections = newRewardFee;\n        toLiquidity = newLpFee;\n        toMarketing = newMarketingFee;\n    }\n\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\n        require(newLimit >= maxTx, \"Can not lower max tx\");\n        maxTx = newLimit;\n    }\n\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\n        require(newLimit >= maxWallet, \"Can not lower max wallet\");\n        maxWallet = newLimit;\n    }\n\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function changeIsTxLimitExempt(address holder, bool exempt)\n        external\n        onlyOwner\n    {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\n        devWallet = payable(newDevWallet);\n    }\n\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\n        tokenOwner = newOwnerWallet;\n    }\n\n    function changeSwapBackSettings(\n        bool enableSwapBack,\n        uint256 newSwapBackLimit\n    ) external onlyOwner {\n        swapAndLiquifyEnabled = enableSwapBack;\n        swapThreshold = newSwapBackLimit;\n    }\n\n    function setDistributionCriteria(\n        uint256 newMinPeriod,\n        uint256 newMinDistribution\n    ) external onlyOwner {\n        qBank.setDistributionCriteria(newMinPeriod, newMinDistribution);\n    }\n\n    function _setIsDividendExempt(address holder, bool exempt) internal {\n        require(holder != address(this) && holder != pair);\n        isDividendExempt[holder] = exempt;\n        if (exempt) {\n            qBank.setShare(holder, 0);\n        } else {\n            qBank.setShare(holder, _balances[holder]);\n        }\n    }\n\n    function setIsDividendExempt(address holder, bool exempt)\n        external\n        onlyOwner\n    {\n        _setIsDividendExempt(holder, exempt);\n    }\n\n    function changeQBankGas(uint256 newGas) external onlyOwner {\n        qBankGas = newGas;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure override returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external view override returns (address) {\n        return owner;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address holder, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[holder][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        return _transfer(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\n                .sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transfer(sender, recipient, amount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        if (sender != owner && recipient != owner)\n            require(tradingOpen, \"hold ur horses big guy.\"); //transfers disabled before tradingActive\n\n        if (inSwapAndLiquify) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        require(amount <= maxTx || isTxLimitExempt[sender], \"tx\");\n\n        if (!isTxLimitExempt[recipient]) {\n            require(_balances[recipient].add(amount) <= maxWallet, \"wallet\");\n        }\n\n        if (\n            msg.sender != pair &&\n            !inSwapAndLiquify &&\n            swapAndLiquifyEnabled &&\n            _balances[address(this)] >= swapThreshold\n        ) {\n            swapBack();\n        }\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\n            ? takeFee(sender, recipient, amount)\n            : amount;\n        _balances[recipient] = _balances[recipient].add(finalAmount);\n\n        // Dividend tracker\n        if (!isDividendExempt[sender]) {\n            try qBank.setShare(sender, _balances[sender]) {} catch {}\n        }\n\n        if (!isDividendExempt[recipient]) {\n            try qBank.setShare(recipient, _balances[recipient]) {} catch {}\n        }\n\n        emit Transfer(sender, recipient, finalAmount);\n        return true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function takeFee(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 feeApplicable = pair == recipient ? sellFee : buyFee;\n        uint256 feeAmount = amount.mul(feeApplicable).div(100);\n\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        approve(address(this), tokenAmount);\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            lpWallet,\n            block.timestamp\n        );\n    }\n\n    function swapBack() internal lockTheSwap {\n        uint256 tokenBalance = _balances[address(this)];\n        uint256 tokensForLiquidity = tokenBalance.mul(toLiquidity).div(100).div(\n            2\n        );\n        uint256 amountToSwap = tokenBalance.sub(tokensForLiquidity);\n\n        swapTokensForEth(amountToSwap);\n\n        uint256 totalEthBalance = address(this).balance;\n        uint256 ethForWCI = totalEthBalance.mul(toReflections).div(100);\n        uint256 ethForDev = totalEthBalance.mul(toMarketing).div(100);\n        uint256 ethForLiquidity = totalEthBalance.mul(toLiquidity).div(100).div(\n            2\n        );\n\n        if (totalEthBalance > 0) {\n            payable(devWallet).transfer(ethForDev);\n        }\n\n        try qBank.deposit{value: ethForWCI}() {} catch {}\n\n        if (tokensForLiquidity > 0) {\n            addLiquidity(tokensForLiquidity, ethForLiquidity);\n        }\n    }\n\n    function manualSwapBack() external onlyOwner {\n        swapBack();\n    }\n\n    function clearStuckEth() external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        if (contractETHBalance > 0) {\n            payable(devWallet).transfer(contractETHBalance);\n        }\n    }\n\n    function manualProcessGas(uint256 manualGas) external onlyOwner {\n        qBank.process(manualGas);\n    }\n\n    function checkPendingReflections(address shareholder)\n        external\n        view\n        returns (uint256)\n    {\n        return qBank.getUnpaidEarnings(shareholder);\n    }\n\n    function withdrawFromBank() external {\n        qBank.gibQbank(msg.sender);\n    }\n}\n"
6     }
7   },
8   "settings": {
9     "optimizer": {
10       "enabled": true,
11       "runs": 200
12     },
13     "outputSelection": {
14       "*": {
15         "*": [
16           "evm.bytecode",
17           "evm.deployedBytecode",
18           "devdoc",
19           "userdoc",
20           "metadata",
21           "abi"
22         ]
23       }
24     },
25     "libraries": {}
26   }
27 }}