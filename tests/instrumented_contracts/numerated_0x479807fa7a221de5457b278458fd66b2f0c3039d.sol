1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/LilVillainsMinter.sol": {
5       "content": "// SPDX-License-Identifier: CC-BY-NC-ND-4.0\n// By interacting with this smart contract you agree to the terms located at https://lilheroes.io/tos, https://lilheroes.io/privacy).\n\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/interfaces/IERC165.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\nimport '@gm2/blockchain/src/contracts/GMVRFConsumer.sol';\nimport './interfaces/ILilCollection.sol';\nimport './LilVillainsBaseAttributes.sol';\nimport { Stage } from './structs/LilVillainsStructs.sol';\n\ncontract LilVillainsMinter is GMVRFConsumer, LilVillainsBaseAttributes, Pausable {\n  string private constant SIGNING_DOMAIN = 'NFTClaimedAmount';\n  string private constant SIGNATURE_VERSION = '1';\n  uint32 private constant TOTAL_SUPPLY = 7777;\n  bytes32 private constant GIVEAWAY = keccak256('giveaway');\n  bytes32 private constant PRESALE = keccak256('presale');\n  bytes32 private constant OPENSALE = keccak256('opensale');\n\n  // INFO: Stage variables\n  string private currentStageName;\n  mapping(string => Stage) private stages;\n  uint32 private currentSupply = 0;\n\n  constructor(\n    uint64 chainLinkSubsId_,\n    address vrfCoordinator,\n    bytes32 chainLinkKeyHash_\n  )\n    LilVillainsBaseAttributes(SIGNING_DOMAIN, SIGNATURE_VERSION)\n    GMVRFConsumer(chainLinkSubsId_, vrfCoordinator, chainLinkKeyHash_)\n  {}\n\n  event BatchMintExecuted(address owner, uint256[] tokenIds, string stage);\n\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  function setStage(\n    string calldata name,\n    uint256 price,\n    uint32 maxAmount,\n    bytes32 merkleRoot\n  ) external onlyOwner onlySeedNumberIsSet {\n    require(_lilVillainsAddress != address(0), 'Minting collection was not set'); //Collection required\n    require(!isEmpty(name), 'Invalid Stage name');\n\n    Stage storage newStage = stages[name];\n    newStage.name = name;\n    newStage.price = price;\n    newStage.maxAmount = maxAmount;\n    newStage.root = merkleRoot;\n\n    bytes32 nameInBytes32 = keccak256(bytes(name));\n    if (GIVEAWAY == nameInBytes32) newStage.beforeMint = beforeMintGiveaway;\n    else if (PRESALE == nameInBytes32) newStage.beforeMint = beforeMintPresale;\n    else if (OPENSALE == nameInBytes32) newStage.beforeMint = beforeMintOpensale;\n    else newStage.beforeMint = defaultBeforeMint;\n\n    currentStageName = name;\n  }\n\n  function setLilCollection(address lilVillainsAddress) external onlyOwner {\n    require(\n      IERC165(lilVillainsAddress).supportsInterface(type(ILilCollection).interfaceId),\n      'Address not supports batch mint'\n    );\n    _lilVillainsAddress = lilVillainsAddress;\n  }\n\n  function mint(\n    uint32 selectedAmountToMint,\n    uint32 signedAmount,\n    bytes32[] calldata proofs,\n    bytes calldata signature\n  ) external payable whenNotPaused {\n    require(!isEmpty(currentStageName), 'Stage not set'); //Stage required => collection required + _chainLinkSeedNumber required\n    require(selectedAmountToMint + currentSupply <= TOTAL_SUPPLY, 'Request minted amount unavailable');\n\n    Stage storage stage = getCurrentStage();\n    require((stage.price * selectedAmountToMint) == msg.value, 'Invalid payment amount');\n\n    stage.beforeMint(selectedAmountToMint, signedAmount, proofs, signature);\n\n    updateMintedAmountOnStage(stage, selectedAmountToMint);\n\n    uint256[] memory tokenIDsToMint = getTokenIds(selectedAmountToMint);\n\n    ILilCollection(_lilVillainsAddress).batchMint(msg.sender, tokenIDsToMint);\n\n    emit BatchMintExecuted(msg.sender, tokenIDsToMint, stage.name);\n  }\n\n  function defaultBeforeMint(\n    uint32,\n    uint32,\n    bytes32[] calldata,\n    bytes calldata\n  ) internal pure {\n    revert('beforeMint must be set');\n  }\n\n  function beforeMintGiveaway(\n    uint32 selectedAmountToMint,\n    uint32 signedAmount,\n    bytes32[] calldata proofs,\n    bytes calldata signature\n  ) internal view {\n    Stage storage stage = getCurrentStage();\n    require(ECDSA.recover(hashMintingSignature(signedAmount), signature) == owner(), 'Invalid signature');\n    uint32 remainingAmount = signedAmount - stage.minters[msg.sender];\n    require(\n      isLessThanOrEqual(selectedAmountToMint, remainingAmount) &&\n        isLessThanOrEqual(selectedAmountToMint, stage.maxAmount),\n      'Invalid request amount to mint'\n    );\n    validateIfSenderIsInWhitelist(stage, proofs);\n  }\n\n  function beforeMintPresale(\n    uint32 selectedAmountToMint,\n    uint32,\n    bytes32[] calldata proofs,\n    bytes calldata\n  ) internal {\n    Stage storage stage = getCurrentStage();\n    validateRemainingAmount(stage, selectedAmountToMint);\n    validateIfSenderIsInWhitelist(stage, proofs);\n    payable(owner()).transfer(msg.value);\n  }\n\n  function beforeMintOpensale(\n    uint32 selectedAmountToMint,\n    uint32,\n    bytes32[] calldata,\n    bytes calldata\n  ) internal {\n    Stage storage stage = getCurrentStage();\n    validateRemainingAmount(stage, selectedAmountToMint);\n    payable(owner()).transfer(msg.value);\n  }\n\n  function isLessThanOrEqual(uint32 a, uint32 b) private pure returns (bool) {\n    return a <= b;\n  }\n\n  function getTokenIds(uint32 size) private returns (uint256[] memory) {\n    uint256[] memory tokenIds = new uint256[](size);\n    for (uint32 i = 0; i < size; i = increment(i)) {\n      tokenIds[i] = (((97 * (i + currentSupply)) + _chainLinkSeedNumber) % TOTAL_SUPPLY) + 1;\n    }\n    currentSupply = currentSupply + size;\n    return tokenIds;\n  }\n\n  function isEmpty(string memory value) private pure returns (bool) {\n    return bytes(value).length == 0;\n  }\n\n  function getCurrentStage() private view returns (Stage storage) {\n    return stages[currentStageName];\n  }\n\n  function increment(uint32 i) private pure returns (uint32) {\n    return i = i + 1;\n  }\n\n  function hashMintingSignature(uint32 amount) private view returns (bytes32) {\n    return\n      _hashTypedDataV4(\n        keccak256(abi.encode(keccak256('NFTClaimedAmount(uint32 amount,address holder)'), amount, msg.sender))\n      );\n  }\n\n  function validateIfSenderIsInWhitelist(Stage storage stage, bytes32[] calldata proofs) private view {\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n    require(MerkleProof.verify(proofs, stage.root, leaf), 'Address is not in whitelist');\n  }\n\n  function validateRemainingAmount(Stage storage stage, uint32 selectedAmountToMint) private view {\n    uint32 remainingAmount = stage.maxAmount - stage.minters[msg.sender];\n    require(isLessThanOrEqual(selectedAmountToMint, remainingAmount), 'Invalid request amount to mint');\n  }\n\n  function updateMintedAmountOnStage(Stage storage stage, uint32 selectedAmountToMint) private {\n    stage.minters[msg.sender] = stage.minters[msg.sender] + selectedAmountToMint;\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/interfaces/IERC165.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
9     },
10     "@openzeppelin/contracts/security/Pausable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
21     },
22     "@gm2/blockchain/src/contracts/GMVRFConsumer.sol": {
23       "content": "// SPDX-License-Identifier: CC-BY-NC-ND-4.0\npragma solidity ^0.8.9;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../errors/GMVRFConsumerErrors.sol';\n\nabstract contract GMVRFConsumer is VRFConsumerBaseV2, Ownable {\n  // INFO: Chainlink variables\n  VRFCoordinatorV2Interface private COORDINATOR;\n  address internal vrfCoordinatorAddress;\n  bytes32 internal _chainLinkKeyHash;\n  uint64 internal _chainLinkSubsId;\n  uint256 internal _chainLinkSeedNumber;\n\n  constructor(\n    uint64 chainLinkSubsId_,\n    address vrfCoordinator,\n    bytes32 chainLinkKeyHash_\n  ) VRFConsumerBaseV2(vrfCoordinator) {\n    _chainLinkKeyHash = chainLinkKeyHash_;\n    _chainLinkSubsId = chainLinkSubsId_;\n    vrfCoordinatorAddress = vrfCoordinator;\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n  }\n\n  modifier onlySeedNumberIsNotSet() {\n    if (_chainLinkSeedNumber > 0) {\n      revert SeedNumberShouldntBeSet();\n    }\n    _;\n  }\n\n  modifier onlySeedNumberIsSet() {\n    if (_chainLinkSeedNumber == 0) {\n      revert SeedNumberShouldBeSet();\n    }\n    _;\n  }\n\n  event SeedNumberAssigned();\n\n  // Assumes the subscription is funded sufficiently.\n  function requestRandomWords() external onlyOwner onlySeedNumberIsNotSet {\n    // Will revert if subscription is not set and funded.\n    COORDINATOR.requestRandomWords(\n      _chainLinkKeyHash,\n      _chainLinkSubsId,\n      3, //confirmations\n      100000, //callbackGasLimit,\n      1 // request random numbers\n    );\n  }\n\n  function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\n    _chainLinkSeedNumber = randomWords[0];\n    emit SeedNumberAssigned();\n  }\n}\n"
24     },
25     "contracts/interfaces/ILilCollection.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { NFTBaseAttributes } from '../structs/LilVillainsStructs.sol';\n\ninterface ILilCollection {\n  function batchMint(address to, uint256[] calldata tokenIds) external;\n\n  function setBaseAttributes(NFTBaseAttributes[] memory nFTsBaseAttributes) external;\n}\n"
27     },
28     "contracts/LilVillainsBaseAttributes.sol": {
29       "content": "// SPDX-License-Identifier: CC-BY-NC-ND-4.0\n// By interacting with this smart contract you agree to the terms located at https://lilheroes.io/tos, https://lilheroes.io/privacy).\n\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport { Attribute } from '@gm2/blockchain/src/structs/DynamicMetadataStructs.sol';\nimport './interfaces/ILilCollection.sol';\nimport { NFTBaseAttributes, NFTBaseAttributesRequest } from './structs/LilVillainsStructs.sol';\n\nabstract contract LilVillainsBaseAttributes is EIP712, Ownable {\n  address internal _lilVillainsAddress;\n\n  constructor(string memory _SIGNING_DOMAIN, string memory _SIGNATURE_VERSION)\n    EIP712(_SIGNING_DOMAIN, _SIGNATURE_VERSION)\n  {}\n\n  function setBaseAttributesOfNfts(NFTBaseAttributesRequest calldata nFTBaseAttributesRequest, bytes calldata signature)\n    external\n  {\n    require(\n      ECDSA.recover(_hashTypedDataV4(hashNFTBaseAttributesRequest(nFTBaseAttributesRequest)), signature) == owner(),\n      'Invalid signature'\n    );\n    ILilCollection(_lilVillainsAddress).setBaseAttributes(nFTBaseAttributesRequest.nFTsBaseAttributes);\n  }\n\n  function setBaseAttributesOfNftsByOwner(NFTBaseAttributesRequest calldata nFTBaseAttributesRequest)\n    external\n    onlyOwner\n  {\n    ILilCollection(_lilVillainsAddress).setBaseAttributes(nFTBaseAttributesRequest.nFTsBaseAttributes);\n  }\n\n  function hashStringArray(string[] calldata stringArray) internal pure returns (bytes32) {\n    bytes32[] memory hashedItems = new bytes32[](stringArray.length);\n    for (uint256 i = 0; i < stringArray.length; i++) {\n      hashedItems[i] = keccak256(bytes(stringArray[i]));\n    }\n    return keccak256(abi.encodePacked(hashedItems));\n  }\n\n  function hashNFTBaseAttributes(NFTBaseAttributes calldata nFTsBaseAttributes) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          keccak256('NFTBaseAttributes(uint256 id,string[] values)'),\n          nFTsBaseAttributes.id,\n          hashStringArray(nFTsBaseAttributes.values)\n        )\n      );\n  }\n\n  function hashNFTBaseAttributesRequest(NFTBaseAttributesRequest calldata nFTBaseAttributesRequest)\n    internal\n    pure\n    returns (bytes32)\n  {\n    bytes32[] memory nFTsBaseAttributesHashes = new bytes32[](nFTBaseAttributesRequest.nFTsBaseAttributes.length);\n    for (uint256 i = 0; i < nFTBaseAttributesRequest.nFTsBaseAttributes.length; i++) {\n      nFTsBaseAttributesHashes[i] = hashNFTBaseAttributes(nFTBaseAttributesRequest.nFTsBaseAttributes[i]);\n    }\n    return\n      keccak256(\n        abi.encode(\n          keccak256(\n            abi.encodePacked(\n              'NFTBaseAttributesRequest(NFTBaseAttributes[] nFTsBaseAttributes)',\n              'NFTBaseAttributes(uint256 id,string[] values)'\n            )\n          ),\n          keccak256(abi.encodePacked(nFTsBaseAttributesHashes))\n        )\n      );\n  }\n}\n"
30     },
31     "contracts/structs/LilVillainsStructs.sol": {
32       "content": "// SPDX-License-Identifier: CC-BY-NC-ND-4.0\npragma solidity ^0.8.9;\n\nstruct NFTBaseAttributes {\n  uint256 id;\n  //INFO: Each position in this arrays represent an attribute\n  string[] values;\n}\n\nstruct NFTBaseAttributesRequest {\n  NFTBaseAttributes[] nFTsBaseAttributes;\n}\n\nstruct Stage {\n  string name;\n  uint256 price;\n  uint32 maxAmount;\n  bytes32 root;\n  mapping(address => uint32) minters;\n  function(uint32, uint32, bytes32[] calldata, bytes calldata) internal beforeMint;\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/Strings.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
42     },
43     "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
45     },
46     "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
48     },
49     "@openzeppelin/contracts/access/Ownable.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
51     },
52     "@gm2/blockchain/src/errors/GMVRFConsumerErrors.sol": {
53       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Invalid operation. Seed number should be set\nerror SeedNumberShouldBeSet();\n// Invalid operation. Seed number already set\nerror SeedNumberShouldntBeSet();\n"
54     },
55     "@gm2/blockchain/src/structs/DynamicMetadataStructs.sol": {
56       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nstruct Attribute {\n  string displayType;\n  string traitType;\n  string value;\n}\n\nstruct Royalty {\n  address recipientAddress;\n  uint16 feePercentage; // INFO: Use two decimal => 100 = 1%\n}\n\nstruct Metadata {\n  string description;\n  string name;\n  Tuple[] additionalProperties;\n  Attribute[] attributes;\n}\n\nstruct Tuple {\n  string key;\n  string value;\n}\n\nstruct SCBehavior {\n  function(uint256) internal view returns (string memory) getTokenURI;\n  function(address, address, uint256) internal view returns (bool) canTokenBeTransferred;\n  function(address, uint256) internal transferBlockedToken;\n}\n"
57     }
58   },
59   "settings": {
60     "optimizer": {
61       "enabled": true,
62       "runs": 200
63     },
64     "outputSelection": {
65       "*": {
66         "*": [
67           "evm.bytecode",
68           "evm.deployedBytecode",
69           "devdoc",
70           "userdoc",
71           "metadata",
72           "abi"
73         ]
74       }
75     },
76     "libraries": {}
77   }
78 }}