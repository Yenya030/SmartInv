1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/BuyHandler.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./IAviumNFT.sol\";\r\nimport \"./utils/BuySignatureUtils.sol\";\r\n\r\ncontract BuyHandler is ReentrancyGuard, BuySignatureUtils {\r\n    address public immutable PROXY;\r\n    uint256 public price;\r\n    uint256 public buyLimit;\r\n    address public recipientAddress;\r\n    uint256 public privateStartTime;\r\n    uint256 public privateEndTime;\r\n    uint256 public publicEndTime;\r\n    address public signer;\r\n    mapping(address => uint256) public mintAmount;\r\n    mapping(string => bool) public existedUuid;\r\n\r\n    constructor(\r\n        address proxy,\r\n        uint256 _price,\r\n        uint256 _privateStartTime,\r\n        uint256 _privateEndTime,\r\n        uint256 _publicEndTime,\r\n        address _signer\r\n    ) {\r\n        require(\r\n            _privateEndTime > _privateStartTime,\r\n            \"BuyHandler: the end time should be greater than the start time\"\r\n        );\r\n        require(\r\n            _privateEndTime < _publicEndTime,\r\n            \"BuyHandler: the public end time should be greater than the private end time\"\r\n        );\r\n        PROXY = proxy;\r\n        price = _price;\r\n        privateStartTime = _privateStartTime;\r\n        privateEndTime = _privateEndTime;\r\n        publicEndTime = _publicEndTime;\r\n        buyLimit = 1;\r\n        recipientAddress = msg.sender;\r\n        signer = _signer;\r\n    }\r\n\r\n    event BuyEvent(\r\n        string uuid,\r\n        address to,\r\n        uint256 quantity,\r\n        uint256 currentIndex,\r\n        uint256 price\r\n    );\r\n\r\n    event BuyRemainNFTsEvent(\r\n        address to,\r\n        uint256 quantity,\r\n        uint256 currentIndex\r\n    );\r\n\r\n    /**\r\n     * @dev Set the buy limit\r\n     * @param _buyLimit the new buy limit\r\n     */\r\n    function setLimitBuy(uint256 _buyLimit) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        buyLimit = _buyLimit;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the signer address\r\n     * @param _signer the new signer address\r\n     */\r\n    function setSignerAddress(address _signer) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        require(_signer != address(0), \"BuyHandler: invalid _signer\");\r\n        signer = _signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the recipient address\r\n     * @param _recipientAddress the new recipient address\r\n     */\r\n    function setRecipientAddress(address _recipientAddress) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        recipientAddress = _recipientAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the start time\r\n     * @param _privateStartTime the new start time\r\n     */\r\n    function setPrivateStartTime(uint256 _privateStartTime) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        require(\r\n            _privateStartTime < privateEndTime,\r\n            \"BuyHandler: the end time should be greater than the start time\"\r\n        );\r\n        privateStartTime = _privateStartTime;\r\n    }\r\n\r\n    /**\r\n     @dev Set the private price\r\n     @param _price the new private price\r\n    */\r\n    function setprice(uint256 _price) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        price = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the private end time\r\n     * @param _privateEndTime the new private end time\r\n     */\r\n    function setPrivateEndTime(uint256 _privateEndTime) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        require(\r\n            _privateEndTime > privateStartTime,\r\n            \"BuyHandler: the end time should be greater than the start time\"\r\n        );\r\n        require(\r\n            _privateEndTime < publicEndTime,\r\n            \"BuyHandler: the public end time should be greater than the private end time\"\r\n        );\r\n        privateEndTime = _privateEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the public end time\r\n     * @param _publicEndTime the new public end time\r\n     */\r\n    function setPublicEndTime(uint256 _publicEndTime) public {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        require(\r\n            privateEndTime < _publicEndTime,\r\n            \"BuyHandler: the public end time should be greater than the private end time\"\r\n        );\r\n        publicEndTime = _publicEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy NFT\r\n     * @param _uuid the sale order id\r\n     * @param _to the address will receive NFTs\r\n     * @param _quantity the quantity of NFTs\r\n     * @param _signature the signature to buy NFTs\r\n     * @param _data data byte\r\n     */\r\n    function buy(\r\n        string memory _uuid,\r\n        address _to,\r\n        uint256 _quantity,\r\n        uint256 _userType,\r\n        bytes memory _signature,\r\n        bytes memory _data\r\n    ) public payable nonReentrant {\r\n        uint256 currentIndex = IAviumNFT(PROXY).getCurrentIndex();\r\n        // require(block.timestamp >= privateStartTime && block.timestamp <= privateEndTime, \"BuyHandler: you can not buy nft at this time\");\r\n        require(\r\n            verifyBuySignature(\r\n                signer,\r\n                _uuid,\r\n                _to,\r\n                _quantity,\r\n                msg.sender,\r\n                _userType,\r\n                _signature\r\n            ),\r\n            \"BuyHandler: wrong signature\"\r\n        );\r\n        if (block.timestamp < privateStartTime)\r\n            revert(\"BuyHandler: you can not buy nft at this time\");\r\n        else if (\r\n            block.timestamp >= privateStartTime &&\r\n            block.timestamp <= privateEndTime\r\n        ) {\r\n            if (_userType == 1)\r\n                revert(\"BuyHandler: you can not buy nft at this time\");\r\n            else if (_userType == 2)\r\n                require(\r\n                    mintAmount[msg.sender] < 2,\r\n                    \"BuyHandler: you bought exceed the allowed amount\"\r\n                );\r\n        } else if (\r\n            block.timestamp > privateEndTime && block.timestamp <= publicEndTime\r\n        ) {\r\n            if (_userType == 1)\r\n                require(\r\n                    mintAmount[msg.sender] < 1,\r\n                    \"BuyHandler: you bought exceed the allowed amount\"\r\n                );\r\n            else if (_userType == 2)\r\n                require(\r\n                    mintAmount[msg.sender] < 2,\r\n                    \"BuyHandler: you bought exceed the allowed amount\"\r\n                );\r\n        } else revert(\"BuyHandler: you can not buy nft at this time\");\r\n        require(\r\n            msg.sender == _to,\r\n            \"BuyHandler: the sender address should be the address that will receive NFTs\"\r\n        );\r\n        require(existedUuid[_uuid] != true, \"BuyHandler: the uuid was existed\");\r\n        require(\r\n            _quantity <= buyLimit,\r\n            \"BuyHandler: the quantity exceed the limit buy\"\r\n        );\r\n        require(\r\n            currentIndex + _quantity <= IAviumNFT(PROXY).getTotalMint() + 1,\r\n            \"BuyHandler: the total mint has been exeeded\"\r\n        );\r\n        require(\r\n            msg.value == price * _quantity,\r\n            \"BuyHandler: you don't send enough eth\"\r\n        );\r\n        mintAmount[msg.sender] += _quantity;\r\n        existedUuid[_uuid] = true;\r\n        payable(recipientAddress).transfer(msg.value);\r\n        IAviumNFT(PROXY).mint(_to, _quantity, _data);\r\n        emit BuyEvent(_uuid, _to, _quantity, currentIndex, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy the remaining NFTs\r\n     * @param _to the address will receive NFTs\r\n     * @param _data data byte\r\n     */\r\n    function buyRemainNFTs(address _to, bytes memory _data)\r\n        public\r\n        nonReentrant\r\n    {\r\n        require(\r\n            msg.sender == IAviumNFT(PROXY).owner(),\r\n            \"BuyHandler: only AviumNFT's owner\"\r\n        );\r\n        uint256 currentIndex = IAviumNFT(PROXY).getCurrentIndex();\r\n        require(\r\n            currentIndex <= IAviumNFT(PROXY).getTotalMint(),\r\n            \"BuyHandler:the total mint has been exeeded\"\r\n        );\r\n        require(\r\n            block.timestamp > publicEndTime,\r\n            \"BuyHandler: you can not buy the NFTs in this time\"\r\n        );\r\n        uint256 quantity = IAviumNFT(PROXY).getTotalMint() + 1 - currentIndex;\r\n        IAviumNFT(PROXY).mint(_to, quantity, _data);\r\n        emit BuyRemainNFTsEvent(_to, quantity, currentIndex);\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "contracts/IAviumNFT.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAviumNFT {\r\n    \r\n    function setRecipientAddress(address _recipientAddress) external;\r\n\r\n    function getRecipientAddress() external returns(address);\r\n\r\n    function getCurrentIndex() external view returns (uint256);\r\n\r\n    function getTotalMint() external view returns (uint256);\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function owner() external returns (address);\r\n\r\n    \r\n}\r\n"
12     },
13     "contracts/utils/BuySignatureUtils.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// Signature Verification\r\n\r\ncontract BuySignatureUtils {\r\n    function getBuyMessageHash(\r\n        string memory _uuid,\r\n        address _to,\r\n        uint256 _quantity,\r\n        address _payer,\r\n        uint256 _userType\r\n    ) public pure returns(bytes32){\r\n        return keccak256(abi.encodePacked(_uuid, _to, _quantity, _payer, _userType));\r\n    }\r\n\r\n\r\n    // Verify signature function\r\n    function verifyBuySignature(\r\n        address _signer,\r\n        string memory _uuid,\r\n        address _to,\r\n        uint256 _quantity,\r\n        address _payer,\r\n        uint256 _userType,\r\n        bytes memory _signature\r\n    ) public pure returns (bool) {\r\n        bytes32 messageHash = getBuyMessageHash(_uuid, _to, _quantity, _payer, _userType);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n        return ecrecover(ethSignedMessageHash, v, r, s) == _signer;\r\n    }\r\n\r\n\r\n    // Split signature to r, s, v\r\n    function splitSignature(bytes memory _signature)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(_signature.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            v := byte(0, mload(add(_signature, 96)))\r\n        }\r\n    }\r\n\r\n    function getEthSignedMessageHash(bytes32 _messageHash)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    _messageHash\r\n                )\r\n            );\r\n\r\n    }\r\n}\r\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}