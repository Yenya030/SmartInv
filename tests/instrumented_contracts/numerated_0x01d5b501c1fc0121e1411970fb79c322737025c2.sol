1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/AxiomV0.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// WARNING! This smart contract and the associated zk-SNARK verifiers have not been audited.\n// DO NOT USE THIS CONTRACT FOR PRODUCTION\npragma solidity ^0.8.12;\n\nuint8 constant TREE_DEPTH = 10;\nuint32 constant NUM_LEAVES = 2 ** 10;\n\n// array indices for reading from the ZKP calldata\nuint32 constant PUBLIC_BYTES_START_IDX = 4 * 3 * 32;\nuint32 constant ROOT_BYTES_START_IDX = PUBLIC_BYTES_START_IDX + 5 * 32;\n\n// constants for batch import of historical block hashes\nuint8 constant HISTORICAL_TREE_DEPTH = 17;\nuint32 constant HISTORICAL_NUM_LEAVES = 2 ** 17;\nuint32 constant HISTORICAL_NUM_ROOTS = 2 ** 7; // HISTORICAL_NUM_LEAVES / NUM_LEAVES\n\nfunction calcMerkleRoot(bytes32[HISTORICAL_NUM_ROOTS] calldata leaves) pure returns (bytes32) {\n    uint256 len = HISTORICAL_NUM_ROOTS >> 1;\n    bytes32[] memory roots = new bytes32[](len);\n    for (uint256 i = 0; i < len; i++) {\n        roots[i] = keccak256(abi.encodePacked(leaves[i << 1], leaves[(i << 1) | 1]));\n    }\n    while (len > 1) {\n        len >>= 1;\n        for (uint256 i = 0; i < len; i++) {\n            roots[i] = keccak256(abi.encodePacked(roots[i << 1], roots[(i << 1) | 1]));\n        }\n    }\n    return roots[0];\n}\n\ncontract AxiomV0 {\n    address private verifierAddress;\n    address private historicalVerifierAddress;\n\n    // historicalRoots[startBlockNumber] is 0 unless (startBlockNumber % NUM_LEAVES == 0)\n    // historicalRoots[startBlockNumber] holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    mapping(uint32 => bytes32) public historicalRoots;\n\n    event UpdateEvent(uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal);\n\n    struct BlockHashWitness {\n        uint32 blockNumber;\n        bytes32 claimedBlockHash;\n        bytes32 prevHash;\n        uint32 numFinal;\n        bytes32[TREE_DEPTH] merkleProof;\n    }\n\n    constructor(address _verifierAddress, address _historicalVerifierAddress) {\n        verifierAddress = _verifierAddress;\n        historicalVerifierAddress = _historicalVerifierAddress;\n    }\n\n    function verifyRaw(bytes calldata input) private returns (bool) {\n        (bool success,) = verifierAddress.call(input);\n        return success;\n    }\n\n    function verifyHistoricalRaw(bytes calldata input) private returns (bool) {\n        (bool success,) = historicalVerifierAddress.call(input);\n        return success;\n    }\n\n    function getEmptyHash(uint256 depth) public pure returns (bytes32) {\n        // emptyHashes[idx] is the Merkle root of a tree of depth idx with 0's as leaves\n        bytes32[TREE_DEPTH] memory emptyHashes = [\n            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),\n            bytes32(0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5),\n            bytes32(0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30),\n            bytes32(0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85),\n            bytes32(0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344),\n            bytes32(0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d),\n            bytes32(0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968),\n            bytes32(0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83),\n            bytes32(0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af),\n            bytes32(0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0)\n        ];\n        return emptyHashes[depth];\n    }\n\n    // The ZKP has block headers for [startBlockNumber, endBlockNumber] blocks. We extract some common information from the calldata.\n    function getBoundaryBlockData(bytes calldata proofData)\n        internal\n        pure\n        returns (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root)\n    {\n        prevHash = bytes32(\n            uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128\n                | uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        endHash = bytes32(\n            uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128\n                | uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        startBlockNumber =\n            uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 8:PUBLIC_BYTES_START_IDX + 5 * 32 - 4]));\n        endBlockNumber = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 4:PUBLIC_BYTES_START_IDX + 5 * 32]));\n        root = bytes32(\n            uint256(bytes32(proofData[ROOT_BYTES_START_IDX:ROOT_BYTES_START_IDX + 32])) << 128\n                | uint128(bytes16(proofData[ROOT_BYTES_START_IDX + 48:ROOT_BYTES_START_IDX + 64]))\n        );\n    }\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash that is within last 256 blocks\n    // * startBlockNumber must be a multiple of NUM_LEAVES\n    // * roots[idx] is the root of a Merkle tree of height 2**(TREE_DEPTH - idx) in a Merkle mountain\n    //   range which stores block hashes in the interval [startBlockNumber, endBlockNumber]\n    function updateRecent(bytes calldata proofData) external {\n        (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root) =\n            getBoundaryBlockData(proofData);\n        bytes32[TREE_DEPTH] memory roots;\n        for (uint256 idx = 1; idx <= TREE_DEPTH; idx++) {\n            roots[idx - 1] = bytes32(\n                uint256(bytes32(proofData[ROOT_BYTES_START_IDX + idx * 64:ROOT_BYTES_START_IDX + idx * 64 + 32])) << 128\n                    | uint128(\n                        bytes16(proofData[ROOT_BYTES_START_IDX + idx * 64 + 16 + 32:ROOT_BYTES_START_IDX + idx * 64 + 64])\n                    )\n            );\n        }\n\n        uint32 numFinal = endBlockNumber - startBlockNumber + 1;\n        require(numFinal <= NUM_LEAVES, \"Updating too many blocks at once\");\n        require(startBlockNumber % NUM_LEAVES == 0, \"startBlockNumber not a multiple of NUM_LEAVES\");\n        require(block.number - endBlockNumber <= 256, \"Not a recent endBlock\");\n        require(endBlockNumber < block.number, \"Not a recent endBlock\");\n        require(blockhash(endBlockNumber) == endHash, \"endHash does not match\");\n        require(verifyRaw(proofData), \"ZKP does not verify\");\n\n        if (root == bytes32(0)) {\n            // compute Merkle root of completed Merkle mountain range with 0s for unconfirmed blockhashes\n            for (uint256 round = 1; round <= TREE_DEPTH; round++) {\n                if (roots[TREE_DEPTH - round] != 0) {\n                    root = keccak256(abi.encodePacked(roots[TREE_DEPTH - round], root));\n                } else {\n                    root = keccak256(abi.encodePacked(root, getEmptyHash(round - 1)));\n                }\n            }\n        }\n        historicalRoots[startBlockNumber] = keccak256(abi.encodePacked(prevHash, root, numFinal));\n        emit UpdateEvent(startBlockNumber, prevHash, root, numFinal);\n    }\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of NUM_LEAVES blocks\n    function updateOld(bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external {\n        (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root) =\n            getBoundaryBlockData(proofData);\n\n        require(startBlockNumber % NUM_LEAVES == 0, \"startBlockNumber not a multiple of NUM_LEAVES\");\n        require(endBlockNumber - startBlockNumber == NUM_LEAVES - 1, \"Updating with incorrect number of blocks\");\n\n        require(\n            historicalRoots[endBlockNumber + 1] == keccak256(abi.encodePacked(endHash, nextRoot, nextNumFinal)),\n            \"endHash does not match\"\n        );\n        require(verifyRaw(proofData), \"ZKP does not verify\");\n\n        historicalRoots[startBlockNumber] = keccak256(abi.encodePacked(prevHash, root, NUM_LEAVES));\n        emit UpdateEvent(startBlockNumber, prevHash, root, NUM_LEAVES);\n    }\n\n    /// Update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    /// Must be batch of HISTORICAL_NUM_LEAVES blocks\n    /// `roots` should contain HISTORICAL_NUM_ROOTS merkle roots, one per batch of NUM_LEAVES blocks\n    /// For all except the last batch of NUM_LEAVES blocks, a merkle inclusion proof of the `endHash` of the batch must be provided, with respect to the corresponding merkle root in `roots`\n    function updateHistorical(\n        bytes32 nextRoot,\n        uint32 nextNumFinal,\n        bytes32[HISTORICAL_NUM_ROOTS] calldata roots,\n        bytes32[TREE_DEPTH + 1][HISTORICAL_NUM_ROOTS - 1] calldata endHashProofs,\n        bytes calldata proofData\n    ) external {\n        (bytes32 _prevHash, bytes32 _endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 aggregateRoot) =\n            getBoundaryBlockData(proofData);\n\n        require(startBlockNumber % NUM_LEAVES == 0, \"startBlockNumber not a multiple of NUM_LEAVES\");\n        require(\n            endBlockNumber - startBlockNumber == HISTORICAL_NUM_LEAVES - 1,\n            \"Updating with incorrect number of historical blocks\"\n        );\n        require(\n            historicalRoots[endBlockNumber + 1] == keccak256(abi.encodePacked(_endHash, nextRoot, nextNumFinal)),\n            \"endHash does not match\"\n        );\n        require(\n            calcMerkleRoot(roots) == aggregateRoot,\n            \"Aggregate merkle root of supplied historical roots does not match the ZKP root\"\n        );\n\n        require(verifyHistoricalRaw(proofData), \"ZKP does not verify\");\n\n        for (uint256 i = 0; i < HISTORICAL_NUM_ROOTS; i++) {\n            if (i != HISTORICAL_NUM_ROOTS - 1) {\n                bytes32 proofCheck = endHashProofs[i][TREE_DEPTH];\n                for (uint256 j = 0; j < TREE_DEPTH; j++) {\n                    proofCheck = keccak256(abi.encodePacked(endHashProofs[i][TREE_DEPTH - 1 - j], proofCheck));\n                }\n                require(proofCheck == roots[i], \"Merkle inclusion proof failed\");\n            }\n            bytes32 prevHash = i == 0 ? _prevHash : endHashProofs[i - 1][TREE_DEPTH];\n            uint32 start = uint32(startBlockNumber + i * NUM_LEAVES);\n            historicalRoots[start] = keccak256(abi.encodePacked(prevHash, roots[i], NUM_LEAVES));\n            emit UpdateEvent(start, prevHash, roots[i], NUM_LEAVES);\n        }\n    }\n\n    function isRecentBlockHashValid(uint32 blockNumber, bytes32 claimedBlockHash) public view returns (bool) {\n        bytes32 blockHash = blockhash(blockNumber);\n        require(blockHash != 0x0, \"Must supply block hash of one of 256 most recent blocks\");\n        return (blockHash == claimedBlockHash);\n    }\n\n    function isBlockHashValid(BlockHashWitness calldata witness) public view returns (bool) {\n        require(witness.claimedBlockHash != 0x0, \"Claimed block hash cannot be 0\");\n        uint32 side = witness.blockNumber % NUM_LEAVES;\n        uint32 startBlockNumber = witness.blockNumber - side;\n        bytes32 merkleRoot = historicalRoots[startBlockNumber];\n        require(merkleRoot != 0, \"Merkle root must be stored already\");\n        // compute Merkle root of blockhash\n        bytes32 root = witness.claimedBlockHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            // 0 for left, 1 for right\n            if ((side >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, witness.merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(witness.merkleProof[depth], root));\n            }\n        }\n        return (merkleRoot == keccak256(abi.encodePacked(witness.prevHash, root, witness.numFinal)));\n    }\n}\n"
6     }
7   },
8   "settings": {
9     "remappings": [
10       "ds-test/=lib/forge-std/lib/ds-test/src/",
11       "forge-std/=lib/forge-std/src/",
12       "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"
13     ],
14     "optimizer": {
15       "enabled": true,
16       "runs": 16000,
17       "details": {
18         "constantOptimizer": true,
19         "yul": true
20       }
21     },
22     "metadata": {
23       "bytecodeHash": "ipfs"
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     },
37     "evmVersion": "london",
38     "libraries": {}
39   }
40 }}