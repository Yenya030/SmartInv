1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/vault/VaultDepositRouter.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./VaultOwnershipChecker.sol\";\nimport \"../interfaces/IVaultDepositRouter.sol\";\nimport \"../interfaces/IVaultInventoryReporter.sol\";\nimport \"../interfaces/IVaultFactory.sol\";\nimport \"../external/interfaces/IPunks.sol\";\n\n/**\n * @title VaultInventoryReporter\n * @author Non-Fungible Technologies, Inc.\n *\n * The VaultInventoryReporter contract is a helper contract that\n * works with Arcade asset vaults and the vault inventory reporter.\n * By depositing to asset vaults by calling the functions in this contract,\n * inventory registration will be automatically updated.\n */\ncontract VaultDepositRouter is IVaultDepositRouter, VaultOwnershipChecker {\n    using SafeERC20 for IERC20;\n\n    // ============================================ STATE ==============================================\n\n    // ============= Global Immutable State ==============\n\n    address public immutable factory;\n    IVaultInventoryReporter public immutable reporter;\n\n    // ========================================= CONSTRUCTOR ===========================================\n\n    constructor(address _factory, address _reporter) {\n        if (_factory == address(0)) revert VDR_ZeroAddress();\n        if (_reporter == address(0)) revert VDR_ZeroAddress();\n\n        factory = _factory;\n        reporter = IVaultInventoryReporter(_reporter);\n    }\n\n    // ====================================== DEPOSIT OPERATIONS ========================================\n\n    /**\n     * @notice Deposit an ERC20 token to the vault, registering its inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param amount                        The amount of tokens to deposit.\n     */\n    function depositERC20(\n        address vault,\n        address token,\n        uint256 amount\n    ) external override validate(vault, msg.sender) {\n        IERC20(token).safeTransferFrom(msg.sender, vault, amount);\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](1);\n\n        items[0] = IVaultInventoryReporter.Item({\n            itemType: IVaultInventoryReporter.ItemType.ERC_20,\n            tokenAddress: token,\n            tokenId: 0,\n            tokenAmount: amount\n        });\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit multiple ERC20 tokens to the vault, registering inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                          The vault to deposit to.\n     * @param tokens                         The tokens to deposit.\n     * @param amounts                        The amount of tokens to deposit, for each token.\n     */\n    function depositERC20Batch(\n        address vault,\n        address[] calldata tokens,\n        uint256[] calldata amounts\n    ) external override validate(vault, msg.sender) {\n        uint256 numItems = tokens.length;\n        if (numItems != amounts.length) revert VDR_BatchLengthMismatch();\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](numItems);\n\n        for (uint256 i = 0; i < numItems; i++) {\n            address token = tokens[i];\n            uint256 amount = amounts[i];\n\n            IERC20(token).safeTransferFrom(msg.sender, vault, amount);\n\n            items[i] = IVaultInventoryReporter.Item({\n                itemType: IVaultInventoryReporter.ItemType.ERC_20,\n                tokenAddress: token,\n                tokenId: 0,\n                tokenAmount: amount\n            });\n        }\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit an ERC721 token to the vault, registering its inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param id                            The ID of the token to deposit.\n     */\n    function depositERC721(\n        address vault,\n        address token,\n        uint256 id\n    ) external override validate(vault, msg.sender) {\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](1);\n\n        items[0] = _depositERC721(vault, token, id);\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit ERC721 tokens to the vault, registering inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param tokens                        The token to deposit.\n     * @param ids                           The ID of the token to deposit, for each token.\n     */\n    function depositERC721Batch(\n        address vault,\n        address[] calldata tokens,\n        uint256[] calldata ids\n    ) external override validate(vault, msg.sender) {\n        uint256 numItems = tokens.length;\n        if (numItems != ids.length) revert VDR_BatchLengthMismatch();\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](numItems);\n\n        for (uint256 i = 0; i < numItems; i++) {\n            items[i] = _depositERC721(vault, tokens[i], ids[i]);\n        }\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit an ERC1155 token to the vault, registering its inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param id                            The ID of the token to deposit.\n     * @param amount                        The amount of tokens to deposit.\n     */\n    function depositERC1155(\n        address vault,\n        address token,\n        uint256 id,\n        uint256 amount\n    ) external override validate(vault, msg.sender) {\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](1);\n        items[0] = _depositERC1155(vault, token, id, amount);\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit ERC1155 tokens to the vault, registering its inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param tokens                        The token to deposit.\n     * @param ids                           The ID of the tokens to deposit.\n     * @param amounts                       The amount of tokens to deposit, for each token.\n     */\n    function depositERC1155Batch(\n        address vault,\n        address[] calldata tokens,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) external override validate(vault, msg.sender) {\n        uint256 numItems = tokens.length;\n        if (numItems != ids.length) revert VDR_BatchLengthMismatch();\n        if (numItems != amounts.length) revert VDR_BatchLengthMismatch();\n        if (ids.length != amounts.length) revert VDR_BatchLengthMismatch();\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](numItems);\n\n        for (uint256 i = 0; i < numItems; i++) {\n            items[i] = _depositERC1155(vault, tokens[i], ids[i], amounts[i]);\n        }\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit a CryptoPunk to the vault, registering its inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param id                            The ID of the token to deposit.\n     */\n    function depositPunk(\n        address vault,\n        address token,\n        uint256 id\n    ) external override validate(vault, msg.sender) {\n        IPunks(token).buyPunk(id);\n        IPunks(token).transferPunk(vault, id);\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](1);\n\n        items[0] = IVaultInventoryReporter.Item({\n            itemType: IVaultInventoryReporter.ItemType.PUNKS,\n            tokenAddress: token,\n            tokenId: id,\n            tokenAmount: 0\n        });\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    /**\n     * @notice Deposit CryptoPunks to the vault, registering inventory on the reporter\n     *         simultaneously.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param tokens                        The token to deposit.\n     * @param ids                           The ID of the tokens to deposit.\n     */\n    function depositPunkBatch(\n        address vault,\n        address[] calldata tokens,\n        uint256[] calldata ids\n    ) external override validate(vault, msg.sender) {\n        uint256 numItems = tokens.length;\n        if (numItems != ids.length) revert VDR_BatchLengthMismatch();\n\n        IVaultInventoryReporter.Item[] memory items = new IVaultInventoryReporter.Item[](numItems);\n\n        for (uint256 i = 0; i < numItems; i++) {\n            address token = tokens[i];\n            uint256 id = ids[i];\n\n            IPunks(token).buyPunk(id);\n            IPunks(token).transferPunk(vault, id);\n\n            items[i] = IVaultInventoryReporter.Item({\n                itemType: IVaultInventoryReporter.ItemType.PUNKS,\n                tokenAddress: token,\n                tokenId: id,\n                tokenAmount: 0\n            });\n        }\n\n        reporter.add(vault, items);\n\n        // No events because both token and reporter will emit\n    }\n\n    // ============================================ HELPERS =============================================\n\n    /**\n     * @dev Collect an ERC1155 from the caller, and return the Item struct.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param id                            The ID of the token to deposit.\n     * @param amount                        The amount of tokens to deposit.\n     *\n     * @return item                         The Item struct for the asset collected.\n     */\n    function _depositERC1155(\n        address vault,\n        address token,\n        uint256 id,\n        uint256 amount\n    ) internal returns (IVaultInventoryReporter.Item memory) {\n        IERC1155(token).safeTransferFrom(msg.sender, vault, id, amount, \"\");\n\n        return IVaultInventoryReporter.Item({\n            itemType: IVaultInventoryReporter.ItemType.ERC_1155,\n            tokenAddress: token,\n            tokenId: id,\n            tokenAmount: amount\n        });\n    }\n\n    /**\n     * @dev Collect an ERC721 from the caller, and return the Item struct.\n     *\n     * @param vault                         The vault to deposit to.\n     * @param token                         The token to deposit.\n     * @param id                            The ID of the token to deposit.\n     *\n     * @return item                         The Item struct for the asset collected.\n     */\n    function _depositERC721(\n        address vault,\n        address token,\n        uint256 id\n    ) internal returns (IVaultInventoryReporter.Item memory) {\n        IERC721(token).safeTransferFrom(msg.sender, vault, id);\n\n        return IVaultInventoryReporter.Item({\n            itemType: IVaultInventoryReporter.ItemType.ERC_721,\n            tokenAddress: token,\n            tokenId: id,\n            tokenAmount: 0\n        });\n    }\n\n    /**\n     * @dev Validates that the caller is allowed to deposit to the specified vault (owner or approved),\n     *      and that the specified vault exists. Reverts on failed validation.\n     *\n     * @param vault                         The vault that will be deposited to.\n     * @param caller                        The caller who wishes to deposit.\n     */\n    modifier validate(address vault, address caller) {\n        _checkApproval(factory, vault, caller);\n\n        _;\n    }\n}"
6     },
7     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
18     },
19     "contracts/vault/VaultOwnershipChecker.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../interfaces/IVaultDepositRouter.sol\";\nimport \"../interfaces/IVaultInventoryReporter.sol\";\nimport \"../interfaces/IVaultFactory.sol\";\n\n/**\n * @title VaultOwnershipChecker\n * @author Non-Fungible Technologies, Inc.\n *\n * This abstract contract contains utility functions for checking AssetVault\n * ownership or approval, which is needed for many contracts which work with vaults.\n */\nabstract contract VaultOwnershipChecker {\n\n    // ============= Errors ==============\n\n    error VOC_ZeroAddress();\n    error VOC_InvalidVault(address vault);\n    error VOC_NotOwnerOrApproved(address vault, address owner, address caller);\n\n    // ================ Ownership Check ================\n\n    /**\n     * @dev Validates that the caller is allowed to deposit to the specified vault (owner or approved),\n     *      and that the specified vault exists. Reverts on failed validation.\n     *\n     * @param factory                       The vault ownership token for the specified vault.\n     * @param vault                         The vault that will be deposited to.\n     * @param caller                        The caller who wishes to deposit.\n     */\n    function _checkApproval(address factory, address vault, address caller) internal view {\n        if (vault == address(0)) revert VOC_ZeroAddress();\n        if (!IVaultFactory(factory).isInstance(vault)) revert VOC_InvalidVault(vault);\n\n        uint256 tokenId = uint256(uint160(vault));\n        address owner = IERC721(factory).ownerOf(tokenId);\n\n        if (\n            caller != owner\n            && IERC721(factory).getApproved(tokenId) != caller\n            && !IERC721(factory).isApprovedForAll(owner, caller)\n        ) revert VOC_NotOwnerOrApproved(vault, owner, caller);\n    }\n\n    /**\n     * @dev Validates that the caller is directly the owner of the vault,\n     *      and that the specified vault exists. Reverts on failed validation.\n     *\n     * @param factory                       The vault ownership token for the specified vault.\n     * @param vault                         The vault that will be deposited to.\n     * @param caller                        The caller who wishes to deposit.\n     */\n    function _checkOwnership(address factory, address vault, address caller) public view {\n        if (vault == address(0)) revert VOC_ZeroAddress();\n        if (!IVaultFactory(factory).isInstance(vault)) revert VOC_InvalidVault(vault);\n\n        uint256 tokenId = uint256(uint160(vault));\n        address owner = IERC721(factory).ownerOf(tokenId);\n\n        if (caller != owner) revert VOC_NotOwnerOrApproved(vault, owner, caller);\n    }\n}"
21     },
22     "contracts/interfaces/IVaultDepositRouter.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface IVaultDepositRouter {\n    // ============= Errors ==============\n\n    error VDR_ZeroAddress();\n    error VDR_InvalidVault(address vault);\n    error VDR_NotOwnerOrApproved(address vault, address caller);\n    error VDR_BatchLengthMismatch();\n\n    // ================ Deposit Operations ================\n\n    function depositERC20(address vault, address token, uint256 amount) external;\n\n    function depositERC20Batch(address vault, address[] calldata tokens, uint256[] calldata amounts) external;\n\n    function depositERC721(address vault, address token, uint256 id) external;\n\n    function depositERC721Batch(address vault, address[] calldata tokens, uint256[] calldata ids) external;\n\n    function depositERC1155(address vault, address token, uint256 id, uint256 amount) external;\n\n    function depositERC1155Batch(address vault, address[] calldata tokens, uint256[] calldata ids, uint256[] calldata amounts) external;\n\n    function depositPunk(address vault, address token, uint256 id) external;\n\n    function depositPunkBatch(address vault, address[] calldata tokens, uint256[] calldata ids) external;\n}\n"
24     },
25     "contracts/interfaces/IVaultInventoryReporter.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface IVaultInventoryReporter {\n    // ============= Events ==============\n\n    event Add(address indexed vault, address indexed reporter, bytes32 itemHash);\n    event Remove(address indexed vault, address indexed reporter, bytes32 itemHash);\n    event Clear(address indexed vault, address indexed reporter);\n    event SetApproval(address indexed vault, address indexed target);\n    event SetGlobalApproval(address indexed target, bool isApproved);\n\n    // ============= Errors ==============\n\n    error VIR_NoItems();\n    error VIR_TooManyItems(uint256 maxItems);\n    error VIR_InvalidRegistration(address vault, uint256 itemIndex);\n    error VIR_NotVerified(address vault, uint256 itemIndex);\n    error VIR_NotInInventory(address vault, bytes32 itemHash);\n    error VIR_NotApproved(address vault, address target);\n    error VIR_PermitDeadlineExpired(uint256 deadline);\n    error VIR_InvalidPermitSignature(address signer);\n\n    // ============= Data Types ==============\n\n    enum ItemType {\n        ERC_721,\n        ERC_1155,\n        ERC_20,\n        PUNKS\n    }\n\n    struct Item {\n        ItemType itemType;\n        address tokenAddress;\n        uint256 tokenId;                // Not used for ERC20 items - will be ignored\n        uint256 tokenAmount;            // Not used for ERC721 items - will be ignored\n    }\n\n    // ================ Inventory Operations ================\n\n    function add(address vault, Item[] calldata items) external;\n\n    function remove(address vault, Item[] calldata items) external;\n\n    function clear(address vault) external;\n\n    function addWithPermit(\n        address vault,\n        Item[] calldata items,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function removeWithPermit(\n        address vault,\n        Item[] calldata items,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function clearWithPermit(\n        address vault,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function permit(\n        address owner,\n        address target,\n        address vault,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    // ================ Verification ================\n\n    function verify(address vault) external view returns (bool);\n\n    function verifyItem(address vault, Item calldata item) external view returns (bool);\n\n    // ================ Enumeration ================\n\n    function enumerate(address vault) external view returns (Item[] memory);\n\n    function enumerateOrFail(address vault) external view returns (Item[] memory);\n\n    function keys(address vault) external view returns (bytes32[] memory);\n\n    function keyAtIndex(address vault, uint256 index) external view returns (bytes32);\n\n    function itemAtIndex(address vault, uint256 index) external view returns (Item memory);\n\n    // ================ Permissions ================\n\n    function setApproval(address vault, address target) external;\n\n    function isOwnerOrApproved(address vault, address target) external view returns (bool);\n\n    function setGlobalApproval(address caller, bool isApproved) external;\n\n    function isGloballyApproved(address target) external view returns (bool);\n}\n"
27     },
28     "contracts/interfaces/IVaultFactory.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface IVaultFactory {\n    // ============= Events ==============\n\n    event VaultCreated(address vault, address to);\n\n    // ================ View Functions ================\n\n    function isInstance(address instance) external view returns (bool validity);\n\n    function instanceCount() external view returns (uint256);\n\n    function instanceAt(uint256 tokenId) external view returns (address);\n\n    function instanceAtIndex(uint256 index) external view returns (address);\n\n    // ================ Factory Operations ================\n\n    function initializeBundle(address to) external returns (uint256);\n}\n"
30     },
31     "contracts/external/interfaces/IPunks.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface IPunks {\n    function balanceOf(address owner) external view returns (uint256);\n\n    function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\n\n    function buyPunk(uint256 punkIndex) external;\n\n    function transferPunk(address to, uint256 punkIndex) external;\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Address.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
39     }
40   },
41   "settings": {
42     "metadata": {
43       "bytecodeHash": "none"
44     },
45     "optimizer": {
46       "enabled": true,
47       "runs": 200
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}