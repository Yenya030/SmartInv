1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/WanderDomainRegistry.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/contracts/security/Pausable.sol\";\nimport \"ens-contracts/registry/ENS.sol\";\nimport \"ens-contracts/ethregistrar/IBaseRegistrar.sol\";\n\ncontract WanderDomainRegistry is Ownable, Pausable, IERC721Receiver {\n    /// Wanderers token\n    IERC721 immutable WANDERERS;\n\n    /// ENS Registry\n    ENS immutable REGISTRY;\n\n    /// ENS Registrar (token)\n    IBaseRegistrar immutable REGISTRAR;\n\n    /// Public resolver\n    address immutable RESOLVER;\n\n    /// \".eth\" basenode hash\n    bytes32 constant ETH_BASENODE =\n        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\n\n    struct NodeLabel {\n        bytes32 node;\n        bytes32 label;\n    }\n\n    // Token IDs => registered node/label\n    mapping(uint256 => NodeLabel) public tokenSubnode;\n\n    event DomainDeposited(uint256 tokenId);\n    event DomainWithdrawn(uint256 tokenId);\n\n    constructor(\n        IERC721 _wanderers,\n        ENS _registry,\n        IBaseRegistrar _registrar,\n        address _resolver\n    ) {\n        WANDERERS = _wanderers;\n        REGISTRY = _registry;\n        REGISTRAR = _registrar;\n        RESOLVER = _resolver;\n\n        _pause();\n    }\n\n    modifier isTokenHolder(uint256 tokenId) {\n        require(WANDERERS.ownerOf(tokenId) == msg.sender, \"not token holder\");\n        _;\n    }\n\n    modifier tokenNotAssignedToSubnode(uint256 tokenId) {\n        require(\n            tokenSubnode[tokenId].node != 0 && tokenSubnode[tokenId].label != 0,\n            \"token already has subnode\"\n        );\n        _;\n    }\n\n    /// @dev Pause the contract.\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /// @dev Unpause the contract.\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    /// @dev Claim a subdomain for a token. May only be called by the token holder. If a subdomain for the given token already exists, it will be cleared.\n    /// @param tokenId the Wanderers token ID used for the claim\n    /// @param node nodehash of the domain\n    /// @param label labelhash of the subdomain\n    /// @param _owner new owner of subdomain\n    function claimSubnode(\n        uint256 tokenId,\n        bytes32 node,\n        bytes32 label,\n        address _owner\n    ) external isTokenHolder(tokenId) whenNotPaused {\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\n\n        NodeLabel storage currentNodeLabel = tokenSubnode[tokenId];\n\n        // If the token already has a label, clear it\n        if (currentNodeLabel.node != 0 || currentNodeLabel.label != 0) {\n            _clearSubnode(currentNodeLabel.node, currentNodeLabel.label);\n        }\n\n        // Make sure the subnode to be set does not already exist\n        require(\n            REGISTRY.owner(subnode) == address(0),\n            \"subnode already in use\"\n        );\n\n        // Update current node and label\n        currentNodeLabel.node = node;\n        currentNodeLabel.label = label;\n\n        // Set subnode owner to new owner\n        REGISTRY.setSubnodeRecord(node, label, _owner, RESOLVER, 0);\n    }\n\n    function clearSubnode(uint256 tokenId)\n        external\n        isTokenHolder(tokenId)\n        whenNotPaused\n    {\n        NodeLabel storage currentNodeLabel = tokenSubnode[tokenId];\n        currentNodeLabel.node = 0;\n        currentNodeLabel.label = 0;\n        _clearSubnode(currentNodeLabel.node, currentNodeLabel.label);\n    }\n\n    function _clearSubnode(bytes32 node, bytes32 label) internal {\n        REGISTRY.setSubnodeRecord(node, label, address(0), address(0), 0);\n    }\n\n    /// When administrative controls are enabled, allow the owner to withdraw domains\n    function withdrawDomain(uint256 tokenId) external onlyOwner whenPaused {\n        emit DomainWithdrawn(tokenId);\n        REGISTRAR.safeTransferFrom(address(this), owner(), tokenId);\n    }\n\n    /// IERC721Receiver implementation\n    /// @dev when administrative controls are enabled, only the owner can deposit new domains.\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external whenNotPaused returns (bytes4) {\n        // Token is a .eth domain\n        require(msg.sender == address(REGISTRAR), \"not a domain\");\n\n        // When administrative controls are enabled, only the owner can deposit new domains\n        if (owner() != address(0)) {\n            require(from == owner(), \"only owner may add domains\");\n        }\n\n        // Take control of the domain\n        REGISTRAR.reclaim(tokenId, address(this));\n\n        emit DomainDeposited(tokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
18     },
19     "lib/ens-contracts/contracts/registry/ENS.sol": {
20       "content": "pragma solidity >=0.8.4;\n\ninterface ENS {\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setOwner(bytes32 node, address owner) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function owner(bytes32 node) external view returns (address);\n\n    function resolver(bytes32 node) external view returns (address);\n\n    function ttl(bytes32 node) external view returns (uint64);\n\n    function recordExists(bytes32 node) external view returns (bool);\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n"
21     },
22     "lib/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol": {
23       "content": "import \"../registry/ENS.sol\";\nimport \"./IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IBaseRegistrar is IERC721 {\n    event ControllerAdded(address indexed controller);\n    event ControllerRemoved(address indexed controller);\n    event NameMigrated(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRegistered(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRenewed(uint256 indexed id, uint256 expires);\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(address controller) external;\n\n    // Revoke controller permission for an address.\n    function removeController(address controller) external;\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(address resolver) external;\n\n    // Returns the expiration timestamp of the specified label hash.\n    function nameExpires(uint256 id) external view returns (uint256);\n\n    // Returns true iff the specified name is available for registration.\n    function available(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Register a name.\n     */\n    function register(\n        uint256 id,\n        address owner,\n        uint256 duration\n    ) external returns (uint256);\n\n    function renew(uint256 id, uint256 duration) external returns (uint256);\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(uint256 id, address owner) external;\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     }
31   },
32   "settings": {
33     "remappings": [
34       "@openzeppelin/=lib/openzeppelin-contracts/",
35       "ds-test/=lib/forge-std/lib/ds-test/src/",
36       "ens-contracts/=lib/ens-contracts/contracts/",
37       "forge-std/=lib/forge-std/src/",
38       "openzeppelin-contracts/=lib/openzeppelin-contracts/",
39       "script/=script/",
40       "src/=src/",
41       "test/=test/",
42       "src/=src/",
43       "test/=test/",
44       "script/=script/"
45     ],
46     "optimizer": {
47       "enabled": true,
48       "runs": 1000
49     },
50     "metadata": {
51       "bytecodeHash": "ipfs"
52     },
53     "outputSelection": {
54       "*": {
55         "*": [
56           "evm.bytecode",
57           "evm.deployedBytecode",
58           "devdoc",
59           "userdoc",
60           "metadata",
61           "abi"
62         ]
63       }
64     },
65     "evmVersion": "london",
66     "libraries": {}
67   }
68 }}