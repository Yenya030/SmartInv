1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/BurnTokenX.sol": {
5       "content": "// SPDX-License-Identifier: Unlicensed\n\n/**\n\nTelegram Portal: https://t.me/ShibaDoge_Portal\nWebsite: https://deflationary.com / https://burn.realshibadoge.com / https://realshibadoge.com\nTwitter: https://twitter.com/RealShibaDoge\nMedium: https://realshibadoge.medium.com\nDiscord: https://discord.gg/realshibadoge\n\n                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXK0OOkkOOOOO00KXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMMMWN0kdlc:,,,'',;;;;;;;;;:cloxk0XWMMMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMWX0dl;,',,;::cclllodooooooollc::;;:lxOXWMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMWXko;'',:clloooooooooodddddddddddddolc:;;:okKWMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMN0o;'';cloooooooooooooocclodddddddddddddddoc;;:oONWMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMNOc,';cloooooooooooooooool;;:coddddddddddddddddoc;;ckXWMMMMMMMMMMMMM\n                        MMMMMMMMMMNOc'';cooooooooooooooooolloo:,,,:oddddddddddddddddddc;,ckXWMMMMMMMMMMM\n                        MMMMMMMMWKo'';looooooooooooooooool:;lo:;,,,:ldddddddddddddddddddc;,l0WMMMMMMMMMM\n                        MMMMMMMNk;.,coooooooooooooooooool:,,cl:,,,,,:odddooddddddddddddddo:,;xXMMMMMMMMM\n                        MMMMMMNd,.;loooooooooooooooooool:,,;cc;,,,,,;cdddl:coddddddddddddddl,,oKWMMMMMMM\n                        MMMMMXo'':looooooooooooooooooool:,;:l:,,,,,,,codol;,:lddddddddddddddl;'lKWMMMMMM\n                        MMMMNd'':oooooooooooooooooooolclc:cl:,,,,,,,;:c:cl:,,,codddddddddddddl;'lKMMMMMM\n                        MMMWx,.:oooooooooooooooooool:,;looc;,,,,,,,,,;,,;ll;,,,cdddddddddddoddl,'oXMMMMM\n                        MMM0:.;looooooooooooooooooc;',:ll:,,,,,,,,,,,,,,,;cl:;,codddddddddooodoc',kWMMMM\n                        MMNd.'cooooooooooooooooool;',,;;,,,,,,,,,,,,,,,,,,;cllclodddddddoooooooo;.cKMMMM\n                        MMK:.;ooooooooooooooooool:,,,,,,,,,,,,,,,,,,,,,,,,,,:lddoddddddoooooooooc.,kWMMM\n                        MWk,.:oooooooooooooooolll:,,,,,,,,,,,,,,,,,,,,,,,,,,,;colcoddddoooooooool,.oNMMM\n                        MWd''coooooooooooooooc;:l:;,,;;;;;;;;;;:::::::::::;;,,,::,:odoooooooooool,.cXMMM\n                        MNd.'cooooooooooooooc;',;:;,;cloooooooooooooddddoool:;,,,,,:ooooooooooooo;.cKMMM\n                        MNd.'coooooooooooool;,,,,,,,:oddddddddddddddddddddddo:,,,,,;coooooooooooo;.cKMMM\n                        MWx''cooooooooooool:,,,,,,,;coddddddddddddddddddddddoc;,,,,,:oooooooooool,.lXMMM\n                        MWO;.:ooooooooooool;,,,,,,,;cddddddddo:;;;;codddddddo:;,,,,,:looooooooooc''dWMMM\n                        MMXl.,loooooooooooc;,,,,,,,;lddddddddl;,,,,:oddddddoc;,,,,,,;loooooooooo:.;0WMMM\n                        MMWk,':oooooooooooc;,,,,,,,:oddddddddlcccclodddddol:,,,,,,,,;loooooooool'.oNMMMM\n                        MMMXl.,cooooooddddc;,,,,,,;coddddddddddddddddddol:,,,,,,,,,,:looooooooo;.:0WMMMM\n                        MMMW0:.,loodddddddl;,,,,,,;ldddddddddddddddddddoolc:;,,,,,,;cloooooooo:.,kWMMMMM\n                        MMMMWO:':oddddddddoc;,,,,,:ldddddddddoooooodddddoool:;,,,,,:loooooooo:.'xNMMMMMM\n                        MMMMMW0c,:oddddddddl:;,,,,:odddddddoc;,,,,;lddooooooc;,,,,;coooooool;.,xNMMMMMMM\n                        MMMMMMWKo,;lddddddddoc;,,;codddddddo:,,,,,;looooooool;,,,:coooooool,.;kNMMMMMMMM\n                        MMMMMMMMXx:,:odddddddol:;;lddddddddoc::cccloooooooolc;,;:looooool:''l0WMMMMMMMMM\n                        MMMMMMMMMW0o;;codddddddolcoddddddddddddddddooooooooc;;:cloooool:'.;kNMMMMMMMMMMM\n                        MMMMMMMMMMMNOl;;codddddddddddddddddddddddoooooooolc::lloooool:'.;dXWMMMMMMMMMMMM\n                        MMMMMMMMMMMMMN0o;,:coddddddddddddddddddoooooooooolloooooolc;'':xXWMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMWKxc;;:clodddddddddddddooooooooooooooolc:;'';oONMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMWN0xl:,;:ccloodddddddoooooooooolcc:;'',:dOXWMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMWXOxl:;,,;;;:::::::::::;;,,'',:ldkKNMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMMMMMWNK0kxolcc::;;;;::ccloxk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNNNNNNNNNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\n    88888888ba   88        88  88888888ba   888b      88     888888888888  ,ad8888ba,    88      a8P   88888888888  888b      88\n    88      \"8b  88        88  88      \"8b  8888b     88          88      d8\"'    `\"8b   88    ,88'    88           8888b     88\n    88      ,8P  88        88  88      ,8P  88 `8b    88          88     d8'        `8b  88  ,88\"      88           88 `8b    88\n    88aaaaaa8P'  88        88  88aaaaaa8P'  88  `8b   88          88     88          88  88,d88'       88aaaaa      88  `8b   88\n    88\"\"\"\"\"\"8b,  88        88  88\"\"\"\"88'    88   `8b  88          88     88          88  8888\"88,      88\"\"\"\"\"      88   `8b  88\n    88      `8b  88        88  88    `8b    88    `8b 88          88     Y8,        ,8P  88P   Y8b     88           88    `8b 88\n    88      a8P  Y8a.    .a8P  88     `8b   88     `8888          88      Y8a.    .a8P   88     \"88,   88           88     `8888\n    88888888P\"    `\"Y8888Y\"'   88      `8b  88      `888          88       `\"Y8888Y\"'    88       Y8b  88888888888  88      `888\n\n */\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract BurnTokenX is ERC20Burnable, Ownable {\n    uint256 constant _initial_supply = 1 * (10**12) * (10**18); // 1 trillion tokens, 18 decimals\n\n    uint256 public tokensBurned;\n\n    address payable public _treasuryWallet;\n    address payable public _developmentWallet;\n    address payable public _buybackWallet;\n\n    uint256 public maxWalletSize = (_initial_supply * 15) / 10000; // .15% of totalsupply\n    uint256 public maxTransactionSize = (_initial_supply * 15) / 100000; // .015% of totalsupply\n    uint256 public swapThreshold = (_initial_supply * 135) / 1000000; // .0135% of totalsupply\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 liquidityLockTime = 0;\n\n    mapping(address => bool) public _isBlackListedBot;\n\n    mapping(address => bool) public _isExcludedFromFee;\n    mapping(address => bool) public _isExcludedFromMaxTransaction;\n    mapping(address => bool) public _isExcludedFromMaxWallet;\n\n    enum FeeType {\n        None,\n        Buy,\n        Sell\n    }\n\n    struct BuyFee {\n        uint16 liquidity;\n        uint16 treasury;\n        uint16 dev;\n        uint16 buyback;\n    }\n\n    struct SellFee {\n        uint16 liquidity;\n        uint16 treasury;\n        uint16 dev;\n        uint16 buyback;\n    }\n\n    BuyFee public buyFee;\n    SellFee public sellFee;\n\n    uint256 constant FEE_DENOM = 1000; // smallest fee unit is 0.1%\n\n    event botAddedToBlacklist(address account);\n    event botRemovedFromBlacklist(address account);\n\n    event excludedFromFee(address account);\n    event excludedFromMaxTransaction(address account);\n    event excludedFromMaxWallet(address account);\n\n    event includedInFee(address account);\n    event includedInMaxTransaction(address account);\n    event includedInMaxWallet(address account);\n\n    event treasuryWalletUpdated(address treasuryWallet);\n    event developmentWalletUpdated(address developmentWallet);\n    event buybackWalletUpdated(address buybackWallet);\n\n    event liquidityRemoved(uint256 amountToken, uint256 amountETH);\n\n    event swapThresholdUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    event MaxWalletSizeUpdated(uint256 maxWalletSize);\n    event MaxTransactionSizeUpdated(uint256 maxTransactionSize);\n\n    event LiquidityLockTimeUpdated(uint256 lockTime);\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor(\n        string memory name__,\n        string memory symbol__,\n        address treasury,\n        address development,\n        address buyback,\n        address[8] memory teamWallets\n    ) ERC20(name__, symbol__) {\n        // set fees to max\n        setSellFee(470, 0, 480, 0);\n        setBuyFee(470, 0, 480, 0);\n\n        require(treasury != address(0), \"Treasury wallet cannot be 0x0\");\n        require(development != address(0), \"Development wallet cannot be 0x0\");\n        require(buyback != address(0), \"Buyback wallet cannot be 0x0\");\n\n        _treasuryWallet = payable(treasury);\n        _developmentWallet = payable(development);\n        _buybackWallet = payable(buyback);\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        // set the rest of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n\n        _mint(msg.sender, (_initial_supply * 14) / 100); // 14% for deployer\n        _mint(msg.sender, (_initial_supply * 5) / 100); // for liquidity pool\n\n        _mint(teamWallets[0], (_initial_supply * 15) / 10000); // .15% for team 1\n        _mint(teamWallets[1], (_initial_supply * 15) / 10000); // .15% for team 2\n        _mint(teamWallets[2], (_initial_supply * 15) / 10000); // .15% for team 3\n        _mint(teamWallets[3], (_initial_supply * 15) / 10000); // .15% for team 4\n        _mint(teamWallets[4], (_initial_supply * 10) / 10000); // .1% for team 5\n        _mint(teamWallets[5], (_initial_supply * 10) / 10000); // .1% for team 6\n        _mint(teamWallets[6], (_initial_supply * 10) / 10000); // .1% for team 7\n        _mint(teamWallets[7], (_initial_supply * 10) / 10000); // .1% for team 8\n\n        _mint(\n            0x000000000000000000000000000000000000dEaD,\n            (_initial_supply * 80) / 100\n        ); // burn baby burnnnnn it's a crypto inferno\n\n        _isExcludedFromFee[msg.sender] = true;\n        _isExcludedFromMaxTransaction[msg.sender] = true;\n        _isExcludedFromMaxWallet[msg.sender] = true;\n\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromMaxTransaction[address(this)] = true;\n        _isExcludedFromMaxWallet[address(this)] = true;\n\n        _isExcludedFromFee[_treasuryWallet] = true;\n        _isExcludedFromMaxTransaction[_treasuryWallet] = true;\n        _isExcludedFromMaxWallet[_treasuryWallet] = true;\n\n        _isExcludedFromFee[_developmentWallet] = true;\n        _isExcludedFromMaxTransaction[_developmentWallet] = true;\n        _isExcludedFromMaxWallet[_developmentWallet] = true;\n\n        _isExcludedFromFee[_buybackWallet] = true;\n        _isExcludedFromMaxTransaction[_buybackWallet] = true;\n        _isExcludedFromMaxWallet[_buybackWallet] = true;\n    }\n\n    //to receive ETH from uniswapV2Router when swapping\n    receive() external payable {}\n\n    // public functions\n\n    function transfer(address to, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        address _owner = _msgSender();\n        (bool takeFee, FeeType feeType) = checkFeeRequired(_owner, to);\n\n        checkTransferAllowed(_owner, to, amount, takeFee);\n\n        if (takeFee) {\n            //check for swapAndLiquify available\n            uint256 contractBalance = balanceOf(address(this));\n            if (\n                contractBalance >= swapThreshold &&\n                !inSwapAndLiquify &&\n                swapAndLiquifyEnabled &&\n                _owner != uniswapV2Pair\n            ) {\n                //perform swapAndLiquify\n                swapAndLiquify(swapThreshold);\n            }\n\n            uint256 fee = calculateFee(amount, feeType);\n            _transfer(_owner, address(this), fee);\n            _transfer(_owner, to, amount - fee);\n        } else {\n            _transfer(_owner, to, amount);\n        }\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        address spender = _msgSender();\n\n        (bool takeFee, FeeType feeType) = checkFeeRequired(from, to);\n        checkTransferAllowed(from, to, amount, takeFee);\n\n        _spendAllowance(from, spender, amount);\n\n        if (takeFee) {\n            //check for swapAndLiquify available\n            uint256 contractBalance = balanceOf(address(this));\n            if (\n                contractBalance >= swapThreshold &&\n                !inSwapAndLiquify &&\n                swapAndLiquifyEnabled &&\n                from != uniswapV2Pair\n            ) {\n                //perform swapAndLiquify\n                swapAndLiquify(swapThreshold);\n            }\n\n            uint256 fee = calculateFee(amount, feeType);\n            _transfer(from, address(this), fee);\n            _transfer(from, to, amount - fee);\n        } else {\n            _transfer(from, to, amount);\n        }\n\n        return true;\n    }\n\n    function burn(uint256 amount) public override {\n        _burn(_msgSender(), amount);\n        tokensBurned += amount;\n    }\n\n    function burnFrom(address account, uint256 amount) public override {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n        tokensBurned += amount;\n    }\n\n    function liquidityLockedUntil() external view returns (uint256) {\n        return liquidityLockTime;\n    }\n\n    // internal functions\n\n    function checkTransferAllowed(\n        address from,\n        address to,\n        uint256 amount,\n        bool takeFee\n    ) internal view {\n        require(\n            !_isBlackListedBot[from] || !_isBlackListedBot[to],\n            \"You are blacklisted\"\n        );\n        if (to != uniswapV2Pair) {\n            require(\n                balanceOf(to) + amount < maxWalletSize ||\n                    _isExcludedFromMaxWallet[to],\n                \"Exceeds receivers maximum wallet size\"\n            );\n        }\n        if (takeFee) {\n            require(\n                amount <= maxTransactionSize ||\n                    (_isExcludedFromMaxTransaction[from] ||\n                        _isExcludedFromMaxTransaction[to]),\n                \"Transaction larger than allowed\"\n            );\n        }\n    }\n\n    function checkFeeRequired(address from, address to)\n        internal\n        view\n        returns (bool, FeeType)\n    {\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\n            return (true, FeeType.Buy);\n        } else if (to == uniswapV2Pair && !_isExcludedFromFee[from]) {\n            return (true, FeeType.Sell);\n        } else {\n            return (false, FeeType.None);\n        }\n    }\n\n    function calculateFee(uint256 amount, FeeType feeType)\n        internal\n        view\n        returns (uint256 fee)\n    {\n        uint256 feePercentage = 0;\n        if (feeType == FeeType.Buy) {\n            feePercentage =\n                buyFee.treasury +\n                buyFee.liquidity +\n                buyFee.dev +\n                buyFee.buyback;\n        } else if (feeType == FeeType.Sell) {\n            feePercentage =\n                sellFee.treasury +\n                sellFee.liquidity +\n                sellFee.dev +\n                sellFee.buyback;\n        }\n        fee = (amount * feePercentage) / FEE_DENOM;\n\n        return fee;\n    }\n\n    function swapAndLiquify(uint256 tokens) internal lockTheSwap {\n        // split tokens by buy fee ratio\n        uint256 feeDenominator = buyFee.treasury +\n            buyFee.liquidity +\n            buyFee.dev +\n            buyFee.buyback;\n\n        uint256 liquidityFee = (tokens * buyFee.liquidity) / feeDenominator;\n\n        // sell tokens minus half of liquidity cut for eth\n        swapTokensForEth(tokens - (liquidityFee / 2));\n\n        // split resulting eth balance of contract by ratio, giving liquidity half weight\n        uint256 contractEth = address(this).balance;\n\n        uint256 ethDenominator = buyFee.treasury +\n            (buyFee.liquidity / 2) +\n            buyFee.dev +\n            buyFee.buyback;\n\n        uint256 treasuryEth = (contractEth * buyFee.treasury) / ethDenominator;\n        uint256 liquidityEth = (contractEth * (buyFee.liquidity / 2)) /\n            ethDenominator;\n        uint256 buybackEth = (contractEth * buyFee.buyback) / ethDenominator;\n\n        // provide liquidity with eth portion and remaining tokens\n\n        if (liquidityEth > 0) {\n            // Add liquidity to uniswap\n            addLiquidity(liquidityFee / 2, liquidityEth);\n        }\n\n        _treasuryWallet.transfer(treasuryEth);\n\n        _buybackWallet.transfer(buybackEth);\n\n        // send all remaining eth to dev wallet (in case of rounding)\n        _developmentWallet.transfer(address(this).balance); \n\n        emit SwapAndLiquify(tokens, contractEth, liquidityFee / 2);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) internal {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n\n    // admin functions\n\n    function setTreasuryWallet(address treasury) external onlyOwner {\n        require(treasury != address(0), \"Treasury wallet cannot be 0x0\");\n        _treasuryWallet = payable(treasury);\n        emit treasuryWalletUpdated(_treasuryWallet);\n    }\n\n    function setDevelopmentWallet(address development) external onlyOwner {\n        require(development != address(0), \"Development wallet cannot be 0x0\");\n        _developmentWallet = payable(development);\n        emit developmentWalletUpdated(_developmentWallet);\n    }\n\n    function setBuybackWallet(address buyback) external onlyOwner {\n        require(buyback != address(0), \"Buyback wallet cannot be 0x0\");\n        _buybackWallet = payable(buyback);\n        emit buybackWalletUpdated(_treasuryWallet);\n    }\n\n    function setSellFee(\n        uint16 liquidity,\n        uint16 treasury,\n        uint16 dev,\n        uint16 buyback\n    ) public onlyOwner {\n        require(\n            liquidity + treasury + dev + buyback < FEE_DENOM,\n            \"invalid fee structure\"\n        );\n\n        sellFee.treasury = treasury;\n        sellFee.liquidity = liquidity;\n        sellFee.dev = dev;\n        sellFee.buyback = buyback;\n    }\n\n    function setBuyFee(\n        uint16 liquidity,\n        uint16 treasury,\n        uint16 dev,\n        uint16 buyback\n    ) public onlyOwner {\n        require(\n            liquidity + treasury + dev + buyback < FEE_DENOM,\n            \"invalid fee structure\"\n        );\n\n        buyFee.treasury = treasury;\n        buyFee.liquidity = liquidity;\n        buyFee.dev = dev;\n        buyFee.buyback = buyback;\n    }\n\n    function setBothFees(\n        uint16 buy_liquidity,\n        uint16 buy_treasury,\n        uint16 buy_dev,\n        uint16 buy_buyback,\n        uint16 sell_liquidity,\n        uint16 sell_treasury,\n        uint16 sell_dev,\n        uint16 sell_buyback\n    ) external onlyOwner {\n        setBuyFee(buy_liquidity, buy_treasury, buy_dev, buy_buyback);\n\n        setSellFee(sell_liquidity, sell_treasury, sell_dev, sell_buyback);\n    }\n\n    function setSwapThreshold(uint256 newSwapThreshold) external onlyOwner {\n        swapThreshold = newSwapThreshold;\n        emit swapThresholdUpdated(newSwapThreshold);\n    }\n\n    function setMaxTransactionSize(uint256 maxTxSize) external onlyOwner {\n        maxTransactionSize = maxTxSize;\n        emit MaxTransactionSizeUpdated(maxTransactionSize);\n    }\n\n    function setMaxWalletSize(uint256 maxWallet) external onlyOwner {\n        maxWalletSize = maxWallet;\n        emit MaxWalletSizeUpdated(maxWalletSize);\n    }\n\n    function addBotToBlacklist(address account) external onlyOwner {\n        require(!_isBlackListedBot[account], \"Account is already blacklisted\");\n        _isBlackListedBot[account] = true;\n\n        emit botAddedToBlacklist(account);\n    }\n\n    function removeBotFromBlacklist(address account) external onlyOwner {\n        require(_isBlackListedBot[account], \"Account is not blacklisted\");\n        _isBlackListedBot[account] = false;\n\n        emit botRemovedFromBlacklist(account);\n    }\n\n    function excludeFromFee(address account) external onlyOwner {\n        require(\n            !_isExcludedFromFee[account],\n            \"Account is already excluded from fee\"\n        );\n        _isExcludedFromFee[account] = true;\n\n        emit excludedFromFee(account);\n    }\n\n    function excludeFromMaxTransaction(address account) external onlyOwner {\n        require(\n            !_isExcludedFromMaxTransaction[account],\n            \"Account is already excluded from max transaction\"\n        );\n        _isExcludedFromMaxTransaction[account] = true;\n\n        emit excludedFromMaxTransaction(account);\n    }\n\n    function excludeFromMaxWallet(address account) external onlyOwner {\n        require(\n            !_isExcludedFromMaxWallet[account],\n            \"Account is already excluded from max wallet\"\n        );\n        _isExcludedFromMaxWallet[account] = true;\n\n        emit excludedFromMaxWallet(account);\n    }\n\n    function includeInFee(address account) external onlyOwner {\n        require(\n            _isExcludedFromFee[account],\n            \"Account is already included in fee\"\n        );\n        _isExcludedFromFee[account] = false;\n\n        emit includedInFee(account);\n    }\n\n    function includeInMaxTransaction(address account) external onlyOwner {\n        require(\n            _isExcludedFromMaxTransaction[account],\n            \"Account is already included in max transaction\"\n        );\n        _isExcludedFromMaxTransaction[account] = false;\n\n        emit includedInMaxTransaction(account);\n    }\n\n    function includeInMaxWallet(address account) external onlyOwner {\n        require(\n            _isExcludedFromMaxWallet[account],\n            \"Account is already included in max wallet\"\n        );\n        _isExcludedFromMaxWallet[account] = false;\n\n        emit includedInMaxWallet(account);\n    }\n\n    function updateLiquidityLock(uint256 lockTime) external onlyOwner {\n        require(\n            block.timestamp > liquidityLockTime,\n            \"New liquidity lock time must be after the current lock time\"\n        );\n        liquidityLockTime = lockTime;\n        emit LiquidityLockTimeUpdated(lockTime);\n    }\n\n    // wrapper for Uniswap removeLiquidity, can only be called if not locked\n    function removeLiquidityETH(\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external onlyOwner {\n        require(\n            block.timestamp > liquidityLockTime,\n            \"Liquidity removal is locked\"\n        );\n\n        (uint256 amountToken, uint256 amountETH) = uniswapV2Router\n            .removeLiquidityETH(\n                address(this),\n                liquidity,\n                amountTokenMin,\n                amountETHMin,\n                to,\n                deadline\n            );\n\n        emit liquidityRemoved(amountToken, amountETH);\n    }\n\n    function toggleSwapAndLiquifyEnabled() external onlyOwner {\n        swapAndLiquifyEnabled = !swapAndLiquifyEnabled;\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled);\n    }\n\n    function adminSwapAndLiquify(uint256 swapBalance) external onlyOwner {\n        swapAndLiquify(swapBalance);\n    }\n\n    // Recovery functions\n\n    function rescueEth() external payable onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function rescueTokens(address _stuckToken, uint256 _amount)\n        external\n        onlyOwner\n    {\n        IERC20(_stuckToken).transfer(msg.sender, _amount);\n    }\n\n    function rescueBurn(uint256 _amount) external onlyOwner {\n        _transfer(address(this), msg.sender, _amount);\n    }\n}"
6     },
7     "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
8       "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
9     },
10     "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
11       "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
12     },
13     "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
14       "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
24     },
25     "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
26       "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
33     },
34     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
36     }
37   },
38   "settings": {
39     "optimizer": {
40       "enabled": true,
41       "runs": 200
42     },
43     "outputSelection": {
44       "*": {
45         "*": [
46           "evm.bytecode",
47           "evm.deployedBytecode",
48           "devdoc",
49           "userdoc",
50           "metadata",
51           "abi"
52         ]
53       }
54     }
55   }
56 }}