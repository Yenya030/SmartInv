1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/PDTStaking.sol": {
5       "content": "pragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// @title   PDT Staking\n/// @notice  Contract that allows users to stake PDT\n/// @author  JeffX\ncontract PDTStaking is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /// EVENTS ///\n\n    /// @notice            Emitted if epoch 0 is pushed back\n    /// @param newEndTime  New end time of epoch 0\n    event Epoch0PushedBack(uint256 indexed newEndTime);\n\n    /// @notice                     Emitted if epoch length is updated\n    /// @param previousEpochLength  Previous length of epochs\n    /// @param newEpochLength       New length of epochs\n    event EpochLengthUpdated(uint256 indexed previousEpochLength, uint256 indexed newEpochLength);\n\n    /// @notice                 Emitted upon address staking\n    /// @param to               Address of who is receiving credit of stake\n    /// @param newStakeAmount   New stake amount of `to`\n    /// @param newWeightAmount  New weight amount of `to`\n    event Staked(address to, uint256 indexed newStakeAmount, uint256 indexed newWeightAmount);\n\n    /// @notice                Emitted upon user unstaking\n    /// @param staker          Address of who is unstaking\n    /// @param amountUnstaked  Amount `staker` unstaked\n    event Unstaked(address staker, uint256 indexed amountUnstaked);\n\n    /// @notice               Emitted upon staker claiming\n    /// @param staker         Address of who claimed rewards\n    /// @param epochsClaimed  Array of epochs claimed\n    /// @param claimed        Amount claimed\n    event Claimed(address staker, uint256[] indexed epochsClaimed, uint256 indexed claimed);\n\n    /// ERRORS ///\n\n    /// @notice Error for if epoch is invalid\n    error InvalidEpoch();\n    /// @notice Error for if user has already claimed up to current epoch\n    error ClaimedUpToEpoch();\n    /// @notice Error for if staking more than balance\n    error MoreThanBalance();\n    /// @notice Error for if unstaking when nothing is staked\n    error NothingStaked();\n    /// @notice Error for if not owner\n    error NotOwner();\n    /// @notice Error for if zero address\n    error ZeroAddress();\n    /// @notice Error for if after epoch 0\n    error AfterEpoch0();\n\n    /// STRUCTS ///\n\n    /// @notice                    Details for epoch\n    /// @param totalToDistribute   Total amount of token to distribute for epoch\n    /// @param totalClaimed        Total amount of tokens claimed from epoch\n    /// @param startTime           Timestamp epoch started\n    /// @param endTime             Timestamp epoch ends\n    /// @param weightAtEnd         Weight of staked tokens at end of epoch\n    struct Epoch {\n        uint256 totalToDistribute;\n        uint256 totalClaimed;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 weightAtEnd;\n    }\n\n    /// @notice                         Stake details for user\n    /// @param amountStaked             Amount user has staked\n    /// @param lastInteraction          Last timestamp user interacted\n    /// @param weightAtLastInteraction  Weight of stake at last interaction\n    struct Stake {\n        uint256 amountStaked;\n        uint256 lastInteraction;\n        uint256 weightAtLastInteraction;\n    }\n\n    /// STATE VARIABLES ///\n\n    /// @notice Time to double weight\n    uint256 public immutable timeToDouble;\n    /// @notice Epoch id\n    uint256 public epochId;\n    /// @notice Length of epoch\n    uint256 public epochLength;\n    /// @notice Last interaction with contract\n    uint256 public lastInteraction;\n    /// @notice Total amount of PDT staked\n    uint256 public totalStaked;\n\n    /// @notice Total amount of weight within contract\n    uint256 internal _contractWeight;\n    /// @notice Amount of unclaimed rewards\n    uint256 public unclaimedRewards;\n\n    /// @notice Current epoch\n    Epoch public currentEpoch;\n\n    /// @notice Address of PDT\n    address public immutable pdt;\n    /// @notice Address of prime\n    address public immutable prime;\n    /// @notice Address of owner\n    address public owner;\n\n    /// @notice If user has claimed for certain epoch\n    mapping(address => mapping(uint256 => bool)) public userClaimedEpoch;\n    /// @notice User's weight at an epoch\n    mapping(address => mapping(uint256 => uint256)) internal _userWeightAtEpoch;\n    /// @notice Epoch user has last interacted\n    mapping(address => uint256) public epochLeftOff;\n    /// @notice Epoch user has last claimed\n    mapping(address => uint256) public claimLeftOff;\n    /// @notice Id to epoch details\n    mapping(uint256 => Epoch) public epoch;\n    /// @notice Stake details of user\n    mapping(address => Stake) public stakeDetails;\n\n    /// CONSTRUCTOR ///\n\n    /// @param _timeToDouble       Time for weight to double\n    /// @param _epochLength        Length of epoch\n    /// @param _firstEpochStartIn  Amount of time first epoch will start in\n    /// @param _pdt                PDT token address\n    /// @param _prime              Address of reward token\n    /// @param _owner              Address of owner\n    constructor(\n        uint256 _timeToDouble,\n        uint256 _epochLength,\n        uint256 _firstEpochStartIn,\n        address _pdt,\n        address _prime,\n        address _owner\n    ) {\n        timeToDouble = _timeToDouble;\n        epochLength = _epochLength;\n        currentEpoch.endTime = block.timestamp + _firstEpochStartIn;\n        epoch[0].endTime = block.timestamp + _firstEpochStartIn;\n        currentEpoch.startTime = block.timestamp;\n        epoch[0].startTime = block.timestamp;\n        require(_pdt != address(0), \"Zero Addresss: PDT\");\n        pdt = _pdt;\n        require(_prime != address(0), \"Zero Addresss: PRIME\");\n        prime = _prime;\n        require(_owner != address(0), \"Zero Addresss: Owner\");\n        owner = _owner;\n    }\n\n    /// OWNER FUNCTION ///\n\n    /// @notice                 Push back epoch 0, used in case PRIME can not be transferred at current end time\n    /// @param _timeToPushBack  Amount of time to push epoch 0 back by\n    function pushBackEpoch0(uint256 _timeToPushBack) external {\n        if (msg.sender != owner) revert NotOwner();\n        if (epochId != 0) revert AfterEpoch0();\n\n        currentEpoch.endTime += _timeToPushBack;\n        epoch[0].endTime += _timeToPushBack;\n\n        emit Epoch0PushedBack(currentEpoch.endTime);\n    }\n\n    /// @notice              Update epoch length of contract\n    /// @param _epochLength  New epoch length\n    function updateEpochLength(uint256 _epochLength) external {\n        if (msg.sender != owner) revert NotOwner();\n        uint256 previousEpochLength_ = epochLength;\n        epochLength = _epochLength;\n\n        emit EpochLengthUpdated(previousEpochLength_, _epochLength);\n    }\n\n    /// @notice           Changing owner of contract to `newOwner_`\n    /// @param _newOwner  Address of who will be the new owner of contract\n    function transferOwnership(address _newOwner) external {\n        if (msg.sender != owner) revert NotOwner();\n        if (_newOwner == address(0)) revert ZeroAddress();\n        owner = _newOwner;\n    }\n\n    /// PUBLIC FUNCTIONS ///\n\n    /// @notice  Update epoch details if time\n    function distribute() external nonReentrant {\n        _distribute();\n    }\n\n    /// @notice         Stake PDT\n    /// @param _to      Address that will receive credit for stake\n    /// @param _amount  Amount of PDT to stake\n    function stake(address _to, uint256 _amount) external nonReentrant {\n        if (IERC20(pdt).balanceOf(msg.sender) < _amount) revert MoreThanBalance();\n        IERC20(pdt).safeTransferFrom(msg.sender, address(this), _amount);\n\n        _distribute();\n        _setUserWeightAtEpoch(_to);\n        _adjustContractWeight(true, _amount);\n\n        totalStaked += _amount;\n\n        Stake memory _stake = stakeDetails[_to];\n\n        if (_stake.amountStaked > 0) {\n            uint256 _additionalWeight = _weightIncreaseSinceInteraction(\n                block.timestamp,\n                _stake.lastInteraction,\n                _stake.amountStaked\n            );\n            _stake.weightAtLastInteraction += (_additionalWeight + _amount);\n        } else {\n            _stake.weightAtLastInteraction = _amount;\n        }\n\n        _stake.amountStaked += _amount;\n        _stake.lastInteraction = block.timestamp;\n\n        stakeDetails[_to] = _stake;\n\n        emit Staked(_to, _stake.amountStaked, _stake.weightAtLastInteraction);\n    }\n\n    /// @notice     Unstake PDT\n    /// @param _to  Address that will receive PDT unstaked\n    function unstake(address _to) external nonReentrant {\n        Stake memory _stake = stakeDetails[msg.sender];\n\n        uint256 _stakedAmount = _stake.amountStaked;\n\n        if (_stakedAmount == 0) revert NothingStaked();\n\n        _distribute();\n        _setUserWeightAtEpoch(msg.sender);\n        _adjustContractWeight(false, _stakedAmount);\n\n        totalStaked -= _stakedAmount;\n\n        _stake.amountStaked = 0;\n        _stake.lastInteraction = block.timestamp;\n        _stake.weightAtLastInteraction = 0;\n\n        stakeDetails[msg.sender] = _stake;\n\n        IERC20(pdt).safeTransfer(_to, _stakedAmount);\n\n        emit Unstaked(msg.sender, _stakedAmount);\n    }\n\n    /// @notice     Claims all pending rewards tokens for msg.sender\n    /// @param _to  Address to send rewards to\n    function claim(address _to) external nonReentrant {\n        _setUserWeightAtEpoch(msg.sender);\n\n        uint256 _pendingRewards;\n        uint256 _claimLeftOff = claimLeftOff[msg.sender];\n\n        if (_claimLeftOff == epochId) revert ClaimedUpToEpoch();\n\n        for (_claimLeftOff; _claimLeftOff < epochId; ++_claimLeftOff) {\n            if (!userClaimedEpoch[msg.sender][_claimLeftOff] && contractWeightAtEpoch(_claimLeftOff) > 0) {\n                userClaimedEpoch[msg.sender][_claimLeftOff] = true;\n                Epoch memory _epoch = epoch[_claimLeftOff];\n                uint256 _weightAtEpoch = _userWeightAtEpoch[msg.sender][_claimLeftOff];\n\n                uint256 _epochRewards = (_epoch.totalToDistribute * _weightAtEpoch) /\n                    contractWeightAtEpoch(_claimLeftOff);\n                if (_epoch.totalClaimed + _epochRewards > _epoch.totalToDistribute) {\n                    _epochRewards = _epoch.totalToDistribute - _epoch.totalClaimed;\n                }\n\n                _pendingRewards += _epochRewards;\n                epoch[_claimLeftOff].totalClaimed += _epochRewards;\n            }\n        }\n\n        claimLeftOff[msg.sender] = epochId;\n        unclaimedRewards -= _pendingRewards;\n        IERC20(prime).safeTransfer(_to, _pendingRewards);\n    }\n\n    /// VIEW FUNCTIONS ///\n\n    /// @notice                  Returns current pending rewards for next epoch\n    /// @return pendingRewards_  Current pending rewards for next epoch\n    function pendingRewards() external view returns (uint256 pendingRewards_) {\n        return IERC20(prime).balanceOf(address(this)) - unclaimedRewards;\n    }\n\n    /// @notice              Returns total weight `_user` has currently\n    /// @param _user         Address to calculate `userWeight_` of\n    /// @return userWeight_  Weight of `_user`\n    function userTotalWeight(address _user) public view returns (uint256 userWeight_) {\n        Stake memory _stake = stakeDetails[_user];\n        uint256 _additionalWeight = _weightIncreaseSinceInteraction(\n            block.timestamp,\n            _stake.lastInteraction,\n            _stake.amountStaked\n        );\n        userWeight_ = _additionalWeight + _stake.weightAtLastInteraction;\n    }\n\n    /// @notice                  Returns total weight of contract at `_epochId`\n    /// @param _epochId          Epoch to return total weight of contract for\n    /// @return contractWeight_  Weight of contract at end of `_epochId`\n    function contractWeightAtEpoch(uint256 _epochId) public view returns (uint256 contractWeight_) {\n        if (epochId <= _epochId) revert InvalidEpoch();\n        return epoch[_epochId].weightAtEnd;\n    }\n\n    /// @notice             Returns amount `_user` has claimable for `_epochId`\n    /// @param _user        Address to see `claimable_` for `_epochId`\n    /// @param _epochId     Id of epoch wanting to get `claimable_` for\n    /// @return claimable_  Amount claimable\n    function claimAmountForEpoch(address _user, uint256 _epochId) external view returns (uint256 claimable_) {\n        if (epochId <= _epochId) revert InvalidEpoch();\n        if (userClaimedEpoch[_user][_epochId] || contractWeightAtEpoch(_epochId) == 0) return 0;\n\n        Epoch memory _epoch = epoch[_epochId];\n\n        claimable_ = (_epoch.totalToDistribute * userWeightAtEpoch(_user, _epochId)) / contractWeightAtEpoch(_epochId);\n    }\n\n    /// @notice              Returns total weight of `_user` at `_epochId`\n    /// @param _user         Address to calculate `userWeight_` of for `_epochId`\n    /// @param _epochId      Epoch id to calculate weight of `_user`\n    /// @return userWeight_  Weight of `_user` for `_epochId`\n    function userWeightAtEpoch(address _user, uint256 _epochId) public view returns (uint256 userWeight_) {\n        if (epochId <= _epochId) revert InvalidEpoch();\n        uint256 _epochLeftOff = epochLeftOff[_user];\n        Stake memory _stake = stakeDetails[_user];\n\n        if (_epochLeftOff > _epochId) userWeight_ = _userWeightAtEpoch[_user][_epochId];\n        else {\n            Epoch memory _epoch = epoch[_epochId];\n            if (_stake.amountStaked > 0) {\n                uint256 _additionalWeight = _weightIncreaseSinceInteraction(\n                    _epoch.endTime,\n                    _stake.lastInteraction,\n                    _stake.amountStaked\n                );\n                userWeight_ = _additionalWeight + _stake.weightAtLastInteraction;\n            }\n        }\n    }\n\n    /// @notice                  Returns current total weight of contract\n    /// @return contractWeight_  Total current weight of contract\n    function contractWeight() external view returns (uint256 contractWeight_) {\n        uint256 _weightIncrease = _weightIncreaseSinceInteraction(block.timestamp, lastInteraction, totalStaked);\n        contractWeight_ = _weightIncrease + _contractWeight;\n    }\n\n    /// INTERNAL VIEW FUNCTION ///\n\n    /// @notice                    Returns additional weight since `_lastInteraction` at `_timestamp`\n    /// @param _timestamp          Timestamp calculating on\n    /// @param _lastInteraction    Last interaction time\n    /// @param _baseAmount         Base amount of PDT to account for\n    /// @return additionalWeight_  Additional weight since `_lastinteraction` at `_timestamp`\n    function _weightIncreaseSinceInteraction(\n        uint256 _timestamp,\n        uint256 _lastInteraction,\n        uint256 _baseAmount\n    ) internal view returns (uint256 additionalWeight_) {\n        uint256 _timePassed = _timestamp - _lastInteraction;\n        uint256 _multiplierReceived = (1e18 * _timePassed) / timeToDouble;\n        additionalWeight_ = (_baseAmount * _multiplierReceived) / 1e18;\n    }\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice         Adjust contract weight since last interaction\n    /// @param _stake   Bool if `_amount` is being staked or withdrawn\n    /// @param _amount  Amount of PDT being staked or withdrawn\n    function _adjustContractWeight(bool _stake, uint256 _amount) internal {\n        uint256 _weightReceivedSinceInteraction = _weightIncreaseSinceInteraction(\n            block.timestamp,\n            lastInteraction,\n            totalStaked\n        );\n        _contractWeight += _weightReceivedSinceInteraction;\n\n        if (_stake) {\n            _contractWeight += _amount;\n        } else {\n            if (userTotalWeight(msg.sender) > _contractWeight) _contractWeight = 0;\n            else _contractWeight -= userTotalWeight(msg.sender);\n        }\n\n        lastInteraction = block.timestamp;\n    }\n\n    /// @notice        Set epochs of `_user` that they left off on\n    /// @param _user   Address of user being updated\n    function _setUserWeightAtEpoch(address _user) internal {\n        uint256 _epochLeftOff = epochLeftOff[_user];\n\n        if (_epochLeftOff != epochId) {\n            Stake memory _stake = stakeDetails[_user];\n            if (_stake.amountStaked > 0) {\n                for (_epochLeftOff; _epochLeftOff < epochId; ++_epochLeftOff) {\n                    Epoch memory _epoch = epoch[_epochLeftOff];\n                    uint256 _additionalWeight = _weightIncreaseSinceInteraction(\n                        _epoch.endTime,\n                        _stake.lastInteraction,\n                        _stake.amountStaked\n                    );\n                    _userWeightAtEpoch[_user][_epochLeftOff] = _additionalWeight + _stake.weightAtLastInteraction;\n                }\n            }\n\n            epochLeftOff[_user] = epochId;\n        }\n    }\n\n    /// @notice  Update epoch details if time\n    function _distribute() internal {\n        if (block.timestamp >= currentEpoch.endTime) {\n            uint256 _additionalWeight = _weightIncreaseSinceInteraction(\n                currentEpoch.endTime,\n                lastInteraction,\n                totalStaked\n            );\n            epoch[epochId].weightAtEnd = _additionalWeight + _contractWeight;\n\n            ++epochId;\n\n            Epoch memory _epoch;\n            _epoch.totalToDistribute = IERC20(prime).balanceOf(address(this)) - unclaimedRewards;\n            _epoch.startTime = block.timestamp;\n            _epoch.endTime = block.timestamp + epochLength;\n\n            currentEpoch = _epoch;\n            epoch[epochId] = _epoch;\n\n            unclaimedRewards += _epoch.totalToDistribute;\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Address.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": false,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     },
37     "libraries": {}
38   }
39 }}