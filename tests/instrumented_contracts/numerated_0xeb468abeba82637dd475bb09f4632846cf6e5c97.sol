1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/CrazySassyExes.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n/*\n *\n *       d888888o.           .8.            d888888o.      d888888o.  `8.`8888.      ,8'\n *     .`8888:' `88.        .888.         .`8888:' `88.  .`8888:' `88. `8.`8888.    ,8'\n *     8.`8888.   Y8       :88888.        8.`8888.   Y8  8.`8888.   Y8  `8.`8888.  ,8'\n *     `8.`8888.          . `88888.       `8.`8888.      `8.`8888.       `8.`8888.,8'\n *      `8.`8888.        .8. `88888.       `8.`8888.      `8.`8888.       `8.`88888'\n *       `8.`8888.      .8`8. `88888.       `8.`8888.      `8.`8888.       `8. 8888\n *        `8.`8888.    .8' `8. `88888.       `8.`8888.      `8.`8888.       `8 8888\n *    8b   `8.`8888.  .8'   `8. `88888.  8b   `8.`8888. 8b   `8.`8888.       8 8888\n *    `8b.  ;8.`8888 .888888888. `88888. `8b.  ;8.`8888 `8b.  ;8.`8888       8 8888\n *     `Y8888P ,88P'.8'       `8. `88888. `Y8888P ,88P'  `Y8888P ,88P'       8 8888\n *\n * FOUNDER: @StudioIrida\n * ART: @StudioIrida\n * DEV: @ghooost0x2a\n **********************************\n * @title: Crazy Sassy Exes\n * @author: @ghooost0x2a\n **********************************\n * ERC721B2FA - Ultra Low Gas - 2 Factor Authentication\n *****************************************************************\n * ERC721B2FA is based on ERC721B low gas contract by @squuebo_nft\n * and the LockRegistry/Guardian contracts by @OwlOfMoistness\n *****************************************************************\n *      .-----.\n *    .' -   - '.\n *   /  .-. .-.  \\\n *   |  | | | |  |\n *    \\ \\o/ \\o/ /\n *   _/    ^    \\_\n *  | \\  '---'  / |\n *  / /`--. .--`\\ \\\n * / /'---` `---'\\ \\\n * '.__.       .__.'\n *     `|     |`\n *      |     \\\n *      \\      '--.\n *       '.        `\\\n *         `'---.   |\n *            ,__) /\n *             `..'\n */\n\nimport \"./ERC721B2FAEnumLitePausable.sol\";\nimport \"./GuardianLiteB2FA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract CrazySassyExes is ERC721B2FAEnumLitePausable, GuardianLiteB2FA {\n    using MerkleProof for bytes32[];\n    using Address for address;\n    using Strings for uint256;\n\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    uint256 public MAX_SUPPLY = 3333;\n\n    uint256 public publicPrice = 0.025 ether;\n    uint256 public publicPriceDiscounted = 0.02 ether;\n    uint256 public preSalePrice = 0.015 ether;\n    uint256 public preSalePriceDiscounted = 0.01 ether;\n\n    string internal baseURI = \"\";\n    string internal uriSuffix = \".json\";\n\n    address public paymentRecipient =\n        0xA94F799A34887582987eC8C050f080e252B70A21;\n\n    // dev: public mints\n    uint256 public maxPublicCSEMintsPerWallet = 3;\n    uint256 public maxPreSaleCSEMintsPerWallet = 3;\n\n    bytes32 private merkleRoot = 0;\n    mapping(address => uint256) public presaleMintedAddys;\n    mapping(address => uint256) public publicMintedAddys;\n\n    uint256 public mintPhase = 0;\n\n    //TODO STRUCT FOR STATUS            \n\n    constructor() ERC721B2FAEnumLitePausable(\"CrazySassyExes\", \"CSE\", 1) {}\n\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    function setMintPhase(uint256 newPhase) external onlyDelegates {\n        mintPhase = newPhase;\n    }\n\n    function tokenURI(uint256 tokenId)\n        external\n        view\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n        return\n            bytes(baseURI).length > 0\n                ? string(\n                    abi.encodePacked(baseURI, tokenId.toString(), uriSuffix)\n                )\n                : \"\";\n    }\n\n    //setter fns\n    function togglePause(uint256 pauseIt) external onlyDelegates {\n        if (pauseIt == 0) {\n            _unpause();\n        } else {\n            _pause();\n        }\n    }\n\n    function getMerkleRoot() public view returns (bytes32) {\n        return merkleRoot;\n    }\n\n    function setMerkleRoot(bytes32 mRoot) external onlyDelegates {\n        merkleRoot = mRoot;\n    }\n\n    function updateBlackListedApprovals(address[] calldata addys, bool[] calldata blacklisted) external onlyDelegates{\n        require(addys.length == blacklisted.length, \"Nb addys doesn't match nb bools.\");\n        for (uint256 i; i < addys.length; ++i) {\n            _updateBlackListedApprovals(addys[i], blacklisted[i]);\n        }\n    }    \n\n    function isvalidMerkleProof(bytes32[] memory proof)\n        public\n        view\n        returns (bool)\n    {\n        if (merkleRoot == 0) {\n            return false;\n        }\n        bool proof_valid = proof.verify(\n            merkleRoot,\n            keccak256(abi.encodePacked(msg.sender))\n        );\n        return proof_valid;\n    }    \n\n    function setPublicPrice(uint256 newPrice, uint256 newDiscountedPrice) external onlyDelegates {\n        publicPrice = newPrice;\n        publicPriceDiscounted = newDiscountedPrice;\n    }\n\n    function setPreSalePrice(uint256 newPrice, uint256 newDiscountedPrice) external onlyDelegates {\n        preSalePrice = newPrice;\n        preSalePriceDiscounted = newDiscountedPrice;\n    }\n\n    function setBaseSuffixURI(\n        string calldata newBaseURI,\n        string calldata newURISuffix\n    ) external onlyDelegates {\n        baseURI = newBaseURI;\n        uriSuffix = newURISuffix;\n    }\n\n    function setmaxCSEMintsPerWallet(uint256 maxPresaleMints, uint256 maxPublicMints) external onlyDelegates {\n        maxPublicCSEMintsPerWallet = maxPublicMints;\n        maxPreSaleCSEMintsPerWallet = maxPresaleMints;\n    }\n\n    function setPaymentRecipient(address addy) external onlyDelegates {\n        paymentRecipient = addy;\n    }\n\n    function setReducedMaxSupply(uint256 new_max_supply)\n        external\n        onlyDelegates\n    {\n        require(new_max_supply < MAX_SUPPLY, \"Can only set a lower size.\");\n        require(\n            new_max_supply >= totalSupply(),\n            \"New supply lower than current totalSupply\"\n        );\n        MAX_SUPPLY = new_max_supply;\n    }\n\n    // Mint fns\n    function freeTeamMints(uint256 quantity, address[] memory recipients)\n        external\n        onlyDelegates\n    {\n        if (recipients.length == 1) {\n            for (uint256 i = 0; i < quantity; i++) {\n                _minty(1, recipients[0]);\n            }\n        }\n        else {\n            require(quantity == recipients.length, \"Number of recipients doesn't match quantity.\");\n            for (uint256 i = 0; i < recipients.length; i++) {\n                _minty(1, recipients[i]);\n            }            \n        }\n    }\n\n    // Pre-sale mint\n    function sassyMint(uint256 quantity, bytes32[] memory proof) external payable {\n        uint256 total_mint_price = preSalePrice;\n        if (quantity > 1) {\n            total_mint_price = quantity * preSalePriceDiscounted;\n        }        \n        require(\n            mintPhase == 1 || _isDelegate(_msgSender()),\n            \"Pre-Sale mint not open\"\n        );\n        require(msg.value == total_mint_price, \"Wrong amount of ETH sent!\");\n        require(\n            presaleMintedAddys[_msgSender()] + quantity <= maxPreSaleCSEMintsPerWallet,\n            \"Already minted max during pre-sale.\"\n        );\n        require(\n            isvalidMerkleProof(proof),\n            \"You are not authorized for pre-sale.\"\n        );\n\n        presaleMintedAddys[_msgSender()] += quantity;\n        _minty(quantity, _msgSender());\n    }\n\n    // Public Mint\n    function publicMint(uint256 quantity) external payable {\n        uint256 total_mint_price = publicPrice;\n        if (quantity > 1) {\n            total_mint_price = quantity * publicPriceDiscounted;\n        }\n        require(\n            mintPhase == 2 || _isDelegate(_msgSender()),\n            \"Public mint is not open yet!\"\n        );\n        require(msg.value == total_mint_price, \"Wrong amount of ETH sent!\");\n        require(\n            publicMintedAddys[_msgSender()] + quantity <=\n                maxPublicCSEMintsPerWallet,\n            \"You have minted max during public phase.\"\n        );\n        publicMintedAddys[_msgSender()] += quantity;\n        _minty(quantity, _msgSender());\n    }\n\n    function _minty(uint256 quantity, address addy) internal {\n        require(quantity > 0, \"Can't mint 0 tokens!\");\n        require(quantity + totalSupply() <= MAX_SUPPLY, \"Max supply reached!\");\n        for (uint256 i = 0; i < quantity; i++) {\n            _safeMint(addy, next());\n        }\n    }    \n\n    //Just in case some ETH ends up in the contract so it doesn't remain stuck.\n    function withdraw() external onlyDelegates {\n        uint256 contract_balance = address(this).balance;\n\n        address payable w_addy = payable(paymentRecipient);\n\n        (bool success, ) = w_addy.call{value: (contract_balance)}(\"\");\n        require(success, \"Withdrawal failed!\");\n\n        emit Withdrawn(w_addy, contract_balance);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Strings.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Address.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
15     },
16     "contracts/GuardianLiteB2FA.sol": {
17       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ILockERC721.sol\";\n\ncontract GuardianLiteB2FA {\n    ILockERC721 public immutable LOCKABLE;\n\n    mapping(address => address) public guardians;\n    mapping(address => address) public pendingGuardians;\n\n    event GuardianSet(address indexed guardian, address indexed user);\n    event GuardianRenounce(address indexed guardian, address indexed user);\n    event PendingGuardianSet(\n        address indexed pendingGuardian,\n        address indexed user\n    );\n\n    /**\n     * using address(this) when the Guardian is deployed in the same contract as the ERC721B\n     */\n    constructor() {\n        LOCKABLE = ILockERC721(address(this));\n    }\n\n    function proposeGuardian(address _guardian) external {\n        require(guardians[msg.sender] == address(0), \"Guardian set\");\n        require(msg.sender != _guardian, \"Guardian must be a different wallet\");\n\n        pendingGuardians[msg.sender] = _guardian;\n        emit PendingGuardianSet(_guardian, msg.sender);\n    }\n\n    function acceptGuardianship(address _protege) external {\n        require(\n            pendingGuardians[_protege] == msg.sender,\n            \"Not the pending guardian\"\n        );\n\n        pendingGuardians[_protege] = address(0);\n        guardians[_protege] = msg.sender;\n        emit GuardianSet(msg.sender, _protege);\n    }\n\n    function renounce(address _tokenOwner) external {\n        require(guardians[_tokenOwner] == msg.sender, \"!guardian\");\n        guardians[_tokenOwner] = address(0);\n        emit GuardianRenounce(msg.sender, _tokenOwner);\n    }\n\n    function lockMany(uint256[] calldata _tokenIds) external {\n        address owner;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            owner = LOCKABLE.ownerOf(_tokenIds[i]);\n            require(guardians[owner] == msg.sender, \"!guardian\");\n            LOCKABLE.lockId(_tokenIds[i]);\n        }\n    }\n\n    function unlockMany(uint256[] calldata _tokenIds) external {\n        address owner;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            owner = LOCKABLE.ownerOf(_tokenIds[i]);\n            require(guardians[owner] == msg.sender, \"!guardian\");\n            LOCKABLE.unlockId(_tokenIds[i]);\n        }\n    }\n\n    /** Modified to grant temporary approval on the token,\n     *   to the guardian contract, before initiating transfer */\n    function unlockManyAndTransfer(\n        uint256[] calldata _tokenIds,\n        address _recipient\n    ) external {\n        address owner;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            owner = LOCKABLE.ownerOf(_tokenIds[i]);\n            require(guardians[owner] == msg.sender, \"!guardian\");\n            LOCKABLE.temporaryApproval(_tokenIds[i]);\n            LOCKABLE.unlockId(_tokenIds[i]);\n            LOCKABLE.safeTransferFrom(owner, _recipient, _tokenIds[i]);\n        }\n    }\n}"
18     },
19     "contracts/ERC721B2FAEnumLitePausable.sol": {
20       "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.14;\n/***\n *************************************************************************\n * ERC721B2FA - Ultra Low Gas - 2 Factor Authentication                  *\n * @author: @ghooost0x2a                                                 *\n *************************************************************************\n * ERC721B2FA is a modified version of EnumerableLite, by @squuebo_nft   *\n * and the LockRegistry/Guardian contracts by @OwlOfMoistness            *\n *************************************************************************\n *     :::::::              ::::::::      :::                            *\n *    :+:   :+: :+:    :+: :+:    :+:   :+: :+:                          *\n *    +:+  :+:+  +:+  +:+        +:+   +:+   +:+                         *\n *    +#+ + +:+   +#++:+       +#+    +#++:++#++:                        *\n *    +#+#  +#+  +#+  +#+    +#+      +#+     +#+                        *\n *    #+#   #+# #+#    #+#  #+#       #+#     #+#                        *\n *     #######             ########## ###     ###                        *\n *************************************************************************/\n\nimport \"./ERC721BLockRegistry.sol\";\nimport \"./IBatch.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nabstract contract ERC721B2FAEnumLitePausable is\n    ERC721BLockRegistry,\n    Pausable,\n    IBatch,\n    IERC721Enumerable\n{\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _offset\n    ) ERC721BLockRegistry(_name, _symbol, _offset) {}\n\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\n        external\n        onlyDelegates\n    {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    function deleteDefaultRoyalty() external onlyDelegates {\n        _deleteDefaultRoyalty();\n    }\n\n    function setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyDelegates {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    function resetTokenRoyalty(uint256 tokenId) external onlyDelegates {\n        _resetTokenRoyalty(tokenId);\n    }\n\n    function isOwnerOf(address account, uint256[] calldata tokenIds)\n        external\n        view\n        override\n        returns (bool)\n    {\n        for (uint256 i; i < tokenIds.length; ++i) {\n            if (_owners[tokenIds[i]] != account) return false;\n        }\n\n        return true;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721B)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        public\n        view\n        override\n        returns (uint256 tokenId)\n    {\n        uint256 count;\n        for (uint256 i; i < _owners.length; ++i) {\n            if (owner == _owners[i]) {\n                if (count == index) return i;\n                else ++count;\n            }\n        }\n\n        require(false, \"ERC721Enumerable: owner index out of bounds\");\n    }\n\n    function tokenByIndex(uint256 index)\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            index < totalSupply(),\n            \"ERC721Enumerable: global index out of bounds\"\n        );\n        return index;\n    }\n\n    function totalSupply()\n        public\n        view\n        override(ERC721B, IERC721Enumerable)\n        returns (uint256)\n    {\n        return _owners.length - _offset;\n    }\n\n    // Modified to call ERC721BLockRegistry's safeTransferFrom (to account for 2FA)\n    function transferBatch(\n        address from,\n        address to,\n        uint256[] calldata tokenIds,\n        bytes calldata data\n    ) external override {\n        for (uint256 i; i < tokenIds.length; ++i) {\n            ERC721BLockRegistry.safeTransferFrom(from, to, tokenIds[i], data);\n        }\n    }\n\n    function walletOfOwner(address account)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        uint256 quantity = balanceOf(account);\n        uint256[] memory wallet = new uint256[](quantity);\n        for (uint256 i; i < quantity; ++i) {\n            wallet[i] = tokenOfOwnerByIndex(account, i);\n        }\n        return wallet;\n    }\n}"
21     },
22     "contracts/ILockERC721.sol": {
23       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"./ERC721B.sol\";\n\n/**\n * Modified interface to add temporaryApproval for guardian contract\n */\ninterface ILockERC721 is IERC721 {\n    function lockId(uint256 _id) external;\n\n    function unlockId(uint256 _id) external;\n\n    function freeId(uint256 _id, address _contract) external;\n\n    function temporaryApproval(uint256 _id) external;\n}"
24     },
25     "@openzeppelin/contracts/security/Pausable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
30     },
31     "contracts/IBatch.sol": {
32       "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.13;\n\ninterface IBatch {\n    function isOwnerOf(address account, uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function transferBatch(\n        address from,\n        address to,\n        uint256[] calldata tokenIds,\n        bytes calldata data\n    ) external;\n\n    function walletOfOwner(address account)\n        external\n        view\n        returns (uint256[] memory);\n}"
33     },
34     "contracts/ERC721BLockRegistry.sol": {
35       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.2;\n\n/*\n *     ,_,\n *    (',')\n *    {/\"\\}\n *    -\"-\"-\n */\n\nimport \"./ERC721B.sol\";\nimport \"./LockRegistry.sol\";\nimport \"./ILockERC721.sol\";\n\nabstract contract ERC721BLockRegistry is ERC721B, LockRegistry, ILockERC721 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _offset\n    ) ERC721B(_name, _symbol, _offset) {}\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override(ERC721B, IERC721) {\n        require(isUnlocked(tokenId), \"Token is locked\");\n        ERC721B.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external override(ERC721B, IERC721) {\n        require(isUnlocked(tokenId), \"Token is locked\");\n        ERC721B.safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public override(ERC721B, IERC721) {\n        require(isUnlocked(tokenId), \"Token is locked\");\n        ERC721B.safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    /**\n     * Added this function to be called (from an approvedContract's unlockManyAndTransfer)\n     * so that the user doesn't need to provide authorization to the guardian contract, in advance\n     */\n    function temporaryApproval(uint256 tokenId) external {\n        require(_exists(tokenId), \"Token !exist\");\n        require(!isUnlocked(tokenId), \"Token !locked\");\n        require(\n            LockRegistry.approvedContract[_msgSender()],\n            \"Not approved contract\"\n        );\n        ERC721B._approve(_msgSender(), tokenId);\n    }\n\n    function lockId(uint256 _id) external override {\n        require(_exists(_id), \"Token !exist\");\n        _lockId(_id);\n    }\n\n    function unlockId(uint256 _id) external override {\n        require(_exists(_id), \"Token !exist\");\n        _unlockId(_id);\n    }\n\n    function freeId(uint256 _id, address _contract)\n        external\n        override\n        onlyDelegates\n    {\n        require(_exists(_id), \"Token !exist\");\n        _freeId(_id, _contract);\n    }\n}"
36     },
37     "contracts/ERC721B.sol": {
38       "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.15;\n\n/****************************************\n * @author: squeebo_nft                 *\n * @team:   GoldenX                     *\n ****************************************\n *   Blimpie-ERC721 provides low-gas    *\n *           mints + transfers          *\n ****************************************/\n//INTERFACES\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n//CONTRACTS\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\n\nabstract contract ERC721B is\n    Context,\n    ERC165,\n    ERC2981,\n    IERC721,\n    IERC721Metadata\n{\n    using Address for address;\n    event BlacklistUpdate(address indexed addy, bool is_blacklisted);\n\n    string private _name;\n    string private _symbol;\n\n    uint256 internal _offset;\n    address[] internal _owners;\n\n    mapping(uint256 => address) private _tokenApprovals;\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    mapping(address => bool) public blacklisted_approvals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 offset\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _offset = offset;\n        for (uint256 i; i < _offset; ++i) {\n            _owners.push(address(0));\n        }\n    }\n\n    //public\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n\n        uint256 count;\n        for (uint256 i; i < _owners.length; ++i) {\n            if (owner == _owners[i]) ++count;\n        }\n        return count;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function next() public view returns (uint256) {\n        return _owners.length;\n    }\n\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165, ERC2981)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _owners.length - _offset;\n    }\n\n    function approve(address to, uint256 tokenId) external virtual override {\n        address owner = ERC721B.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n        return _tokenApprovals[tokenId];\n    }\n\n    function _updateBlackListedApprovals(address addy, bool blacklisted) internal virtual {\n        blacklisted_approvals[addy]=blacklisted;\n        emit BlacklistUpdate(addy, blacklisted);\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        if (blacklisted_approvals[operator] == true) {\n            return false;\n        }\n\n        return _operatorApprovals[owner][operator];\n    }\n\n    function setApprovalForAll(address operator, bool approved)\n        external\n        virtual\n        override\n    {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n        require(!blacklisted_approvals[operator], \"This opperator is blacklisted.\");\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    //internal\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return tokenId < _owners.length && _owners[tokenId] != address(0);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721B.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n        _owners.push(to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721B.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n        _owners[tokenId] = address(0);\n        _resetTokenRoyalty(tokenId);\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721B.ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(address to, uint256 tokenId) internal virtual {\n        require(!blacklisted_approvals[to], \"This opperator is blacklisted.\");\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721B.ownerOf(tokenId), to, tokenId);\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}"
39     },
40     "contracts/LockRegistry.sol": {
41       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.2;\n\n/*\n *     ,_,\n *    (',')\n *    {/\"\\}\n *    -\"-\"-\n */\n\nimport \"./Delegated.sol\";\n\nabstract contract LockRegistry is Delegated {\n    mapping(address => bool) public approvedContract;\n    mapping(uint256 => uint256) public lockCount;\n    mapping(uint256 => mapping(uint256 => address)) public lockMap;\n    mapping(uint256 => mapping(address => uint256)) public lockMapIndex;\n\n    event TokenLocked(\n        uint256 indexed tokenId,\n        address indexed approvedContract\n    );\n    event TokenUnlocked(\n        uint256 indexed tokenId,\n        address indexed approvedContract\n    );\n\n    function isUnlocked(uint256 _id) public view returns (bool) {\n        return lockCount[_id] == 0;\n    }\n\n    function updateApprovedContracts(\n        address[] calldata _contracts,\n        bool[] calldata _values\n    ) external onlyDelegates {\n        require(_contracts.length == _values.length, \"!length\");\n        for (uint256 i = 0; i < _contracts.length; i++)\n            approvedContract[_contracts[i]] = _values[i];\n    }\n\n    function _lockId(uint256 _id) internal {\n        require(approvedContract[msg.sender], \"Cannot update map\");\n        require(\n            lockMapIndex[_id][msg.sender] == 0,\n            \"ID already locked by caller\"\n        );\n\n        uint256 count = lockCount[_id] + 1;\n        lockMap[_id][count] = msg.sender;\n        lockMapIndex[_id][msg.sender] = count;\n        lockCount[_id]++;\n        emit TokenLocked(_id, msg.sender);\n    }\n\n    function _unlockId(uint256 _id) internal {\n        require(approvedContract[msg.sender], \"Cannot update map\");\n        uint256 index = lockMapIndex[_id][msg.sender];\n        require(index != 0, \"ID not locked by caller\");\n\n        uint256 last = lockCount[_id];\n        if (index != last) {\n            address lastContract = lockMap[_id][last];\n            lockMap[_id][index] = lastContract;\n            lockMap[_id][last] = address(0);\n            lockMapIndex[_id][lastContract] = index;\n        } else lockMap[_id][index] = address(0);\n        lockMapIndex[_id][msg.sender] = 0;\n        lockCount[_id]--;\n        emit TokenUnlocked(_id, msg.sender);\n    }\n\n    function _freeId(uint256 _id, address _contract) internal {\n        require(!approvedContract[_contract], \"Cannot update map\");\n        uint256 index = lockMapIndex[_id][_contract];\n        require(index != 0, \"ID not locked\");\n\n        uint256 last = lockCount[_id];\n        if (index != last) {\n            address lastContract = lockMap[_id][last];\n            lockMap[_id][index] = lastContract;\n            lockMap[_id][last] = address(0);\n            lockMapIndex[_id][lastContract] = index;\n        } else lockMap[_id][index] = address(0);\n        lockMapIndex[_id][_contract] = 0;\n        lockCount[_id]--;\n        emit TokenUnlocked(_id, _contract);\n    }\n}"
42     },
43     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
45     },
46     "@openzeppelin/contracts/utils/Context.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
48     },
49     "contracts/Delegated.sol": {
50       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable {\n    mapping(address => bool) internal _delegates;\n\n    modifier onlyDelegates() {\n        require(_delegates[msg.sender], \"Invalid delegate\");\n        _;\n    }\n\n    constructor() Ownable() {\n        setDelegate(owner(), true);\n    }\n\n    //onlyOwner\n    function isDelegate(address addr) external view onlyOwner returns (bool) {\n        return _delegates[addr];\n    }\n\n    function _isDelegate(address addr) internal view returns (bool) {\n        return _delegates[addr];\n    }\n\n    function setDelegate(address addr, bool isDelegate_) public onlyOwner {\n        _delegates[addr] = isDelegate_;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        _delegates[newOwner] = true;\n        super.transferOwnership(newOwner);\n    }\n}"
51     },
52     "@openzeppelin/contracts/token/common/ERC2981.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
57     },
58     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
60     },
61     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
63     },
64     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
66     },
67     "@openzeppelin/contracts/access/Ownable.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
69     },
70     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
72     }
73   },
74   "settings": {
75     "optimizer": {
76       "enabled": true,
77       "runs": 200
78     },
79     "outputSelection": {
80       "*": {
81         "*": [
82           "evm.bytecode",
83           "evm.deployedBytecode",
84           "devdoc",
85           "userdoc",
86           "metadata",
87           "abi"
88         ]
89       }
90     }
91   }
92 }}