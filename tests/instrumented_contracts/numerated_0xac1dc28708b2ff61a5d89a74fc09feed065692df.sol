1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/AccessPassNFT.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.8.6;\n\n/**\n* @title NFTs for the AccessPass to Metaframes Maradona Club\n* @author MetaFrames\n* @notice This NFT Contract follows the ERC721 Standards and sets one of its properties (tier), on chain.\n* The three tiers are as follows: GOLD, SILVER, BRONZE. This contract is also connected to Metaframes' TicketNFT\n* which are used to join Metaframes' Ticket Competition for the World Cup Ticket.\n* @dev The flow of this contract is as follows:\n*    Deployment: Contract is deployed and configured\n*    -----------------------------------------------\n*    Additional Configuration\n*     -setWhitelistSigner()\n*     -setPrivateMintingTimestamp() if privateMintingTimestamp is 0\n*    -----------------------------------------------\n*    Private Minting: Allows accounts in the mint whitelist to mint\n*    -----------------------------------------------\n*    Public Minting: Allows all accounts to mint\n*     -setPublicMintingTimestamp() if publicMintingTimestamp is 0\n*    -----------------------------------------------\n*    Reveal: Revealing the tiers\n*     -randomizeTiers()\n*     -nftTiers() then builds the final token metadata\n*    -----------------------------------------------\n*    Airdrop: Minting TicketNFTs to 500 Random Users\n*     -randomizeTickets()\n*     -winners() then builds the 500 random users\n*     NOTE: the actual minting will happen in the TicketNFT contract\n*/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./WhitelistVerifier.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"./TicketNFT.sol\";\nimport \"./interfaces/IAccessPassNFT.sol\";\nimport \"./interfaces/ITicketNFT.sol\";\n\ncontract AccessPassNFT is Ownable, WhitelistVerifier, ERC721Royalty, VRFConsumerBaseV2, IAccessPassNFT {\n    using Counters for Counters.Counter;\n    using Strings for uint256;\n\n    /**\n    * @dev maxTotalSupply is the amount of NFTs that can be minted\n    */\n    uint16 public immutable maxTotalSupply;\n\n    /**\n    * @dev goldenTierSupply is the amount of GOLD NFTs\n    */\n    uint16 public immutable goldenTierSupply;\n\n    /**\n    * @dev silverTierSupply is the amount of SILVER NFTs\n    */\n    uint16 public immutable silverTierSupply;\n\n    /**\n    * @dev ticketSupply is the amount of TicketNFTs to be airdropped\n    */\n    uint16 public immutable ticketSupply;\n\n    /**\n    * @dev Mapping minter address to amount minted\n    */\n    struct Minted {\n        uint256 publicMinted;\n        uint256 privateMinted;\n    }\n    mapping(address => Minted) private minted;\n\n    /**\n    * @dev Keeps track of how many NFTs have been minted\n    */\n    Counters.Counter public tokenIdCounter;\n\n    /**\n    * @dev privateMintingTimestamp sets when privateMinting is enabled. When this is 0,\n    * it means all minting is disabled\n    */\n    uint256 public privateMintingTimestamp;\n\n    /**\n    * @dev publicMintingTimestamp sets when publicMinting is enabled. When this is 0, it means\n    * public minting is disabled. This value must be greater than the privateMintingTimestamp if this is not 0\n    */\n    uint256 public publicMintingTimestamp;\n\n    /**\n    * @dev price specifies how much eth an account pays for a mint. This is in wei\n    */\n    uint256 public price;\n\n    /**\n    * @dev maxPublicMintable is the maximum an account can publicMint\n    */\n    uint16 public maxPublicMintable;\n\n    /**\n    * @dev flag that tells if the final uri has been set\n    */\n    bool public tiersRevealed;\n\n    /**\n    * @dev unrevealedURI is the placeholder token metadata when the reveal has not happened yet\n    */\n    string unrevealedURI;\n\n    /**\n    * @dev baseURI is the base of the real token metadata after the reveal\n    */\n    string baseURI;\n\n    /**\n    * @dev contractURI is an OpenSea standard. This should point to a metadata that tells who will\n    * receive revenues from OpensSea. See https://docs.opensea.io/docs/contract-level-metadata\n    */\n    string public contractURI;\n\n    /**\n    * @dev receives the eth from accounts private and public minting and the royalties from selling the token.\n    * All revenues should be sent to this address\n    */\n    address payable public treasury;\n\n    /**\n    * @dev ticketNFT decides the trade freeze when the winners have been selected\n    */\n    TicketNFT public ticketNFT;\n\n    /**\n    * @dev The following variables are needed to request a random value from Chainlink\n    * see https://docs.chain.link/docs/vrf-contracts/\n    */\n    address public chainlinkCoordinator;  // Chainlink coordinator address\n    uint256 public tiersRequestId;        // Chainlink request id for tier randomization\n    uint256 public tiersRandomWord;       // Random value received from Chainlink VRF\n    uint256 public ticketsRequestId;      // Chainlink request id for ticket randomization\n    uint256 public ticketsRandomWord;     // Random value received from Chainlink VRF\n\n    /**\n    * @notice initializes the contract\n    * @param treasury_ is the recipient of eth from private and public minting as well as the recipient for token selling fees\n    * @param vrfCoordinator_ is the address of the VRF Contract for generating random number\n    * @param maxTotalSupply_ is the max number of tokens that can be minted\n    * @param goldenTierSupply_ is the max number of golden tiered tokens\n    * @param silverTierSupply_ is the max number of silver tiered tokens\n    * @param ticketSupply_ is the max number of tickets that will be airdropped\n    * @param privateMintingTimestamp_ is when the private minting will be enabled. NOTE: this could also be set later. 0 is an acceptable value\n    * @param royaltyFee is the fees taken from second-hand selling. This is expressed in _royaltyFee/10_000.\n    * So to do 5% means supplying 500 since 500/10_000 is 5% (see ERC2981 function _setDefaultRoyalty(address receiver, uint96 feeNumerator))\n    * @param price_ is the price of a public or private mint in wei\n    * @param contractURI_ is an OpenSeas standard and is necessary for getting revenues from OpenSeas\n    * @param unrevealedURI_ is the token metadata placeholder while the reveal has not happened yet.\n    */\n    constructor(\n        address payable treasury_,\n        address vrfCoordinator_,\n\n        uint16 maxTotalSupply_,\n        uint16 goldenTierSupply_,\n        uint16 silverTierSupply_,\n        uint16 ticketSupply_,\n\n        uint256 privateMintingTimestamp_,\n\n        uint96 royaltyFee,\n        uint256 price_,\n\n        string memory contractURI_,\n        string memory unrevealedURI_\n    )   ERC721(\"Maradona Official Access Pass\", \"OMFC\")\n        WhitelistVerifier()\n        VRFConsumerBaseV2(vrfCoordinator_) {\n\n        if (treasury_ == address(0)) revert ZeroAddress(\"treasury\");\n        treasury = treasury_;\n\n        if (vrfCoordinator_ == address(0)) revert ZeroAddress(\"vrfCoordinator\");\n        chainlinkCoordinator = vrfCoordinator_;\n\n        if (maxTotalSupply_ == 0) revert IsZero(\"maxTotalSupply\");\n        maxTotalSupply = maxTotalSupply_;\n\n        // The following is to ensure that there will be bronzeTierSupply\n        require(\n            goldenTierSupply_ + silverTierSupply_ < maxTotalSupply_,\n                \"Tier Supplies must be less than maxTotalSupply\"\n        );\n        if (goldenTierSupply_ == 0) revert IsZero(\"goldenTierSupply\");\n        goldenTierSupply = goldenTierSupply_;\n\n        if (silverTierSupply_ == 0) revert IsZero(\"silverTierSupply\");\n        silverTierSupply = silverTierSupply_;\n\n        if (ticketSupply_ > maxTotalSupply_) revert IncorrectValue(\"ticketSupply\");\n        ticketSupply = ticketSupply_;\n\n        // not checking for zero on purpose here\n        privateMintingTimestamp = privateMintingTimestamp_;\n\n        if (royaltyFee == 0) revert IsZero(\"royaltyFee\");\n        _setDefaultRoyalty(treasury_, royaltyFee);\n\n        if (price_ == 0) revert IsZero(\"price\");\n        price = price_;\n\n        bytes memory bytesUnrevealedURI = bytes(unrevealedURI_);\n        if (bytesUnrevealedURI[bytesUnrevealedURI.length - 1] != bytes(\"/\")[0]) revert IncorrectValue(\"unrevealedURI\");\n        unrevealedURI = unrevealedURI_;\n\n        if (bytes(contractURI_).length == 0) revert EmptyString(\"contractURI\");\n        contractURI = contractURI_;\n\n        maxPublicMintable = 10;\n\n        // mint one to deployer so the OpenSeas store front can be edited before private minting starts\n        uint256 tokenId = tokenIdCounter.current();\n        _safeMint(msg.sender, tokenId);\n        tokenIdCounter.increment();\n\n        // classifying this mint as a private mint\n        minted[msg.sender].privateMinted += 1;\n    }\n\n    /********************** EXTERNAL ********************************/\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function privateMint(\n        VerifiedSlot calldata verifiedSlot\n    ) external\n        override\n        payable\n        onlyDuring(ContractStatus.PRIVATE_MINTING)\n    {\n        validateVerifiedSlot(msg.sender, minted[msg.sender].privateMinted, verifiedSlot);\n        internalMint(msg.sender, msg.value, MintingType.PRIVATE_MINT);\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function publicMint() external override payable onlyDuring(ContractStatus.PUBLIC_MINTING) {\n        if (minted[msg.sender].publicMinted >= maxPublicMintable) revert ExceedMintingCapacity(minted[msg.sender].publicMinted);\n        internalMint(msg.sender, msg.value, MintingType.PUBLIC_MINT);\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function randomizeTiers(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external\n        override\n        onlyOwner\n        onlyOnOrAfter(ContractStatus.END_MINTING)\n    {\n        /// Only allow randomize if random word has not been set\n        if (tiersRandomWord != 0) revert CanNoLongerCall();\n\n        // making sure that the request has enough callbackGasLimit to execute\n        if (callbackGasLimit < 40_000) revert IncorrectValue(\"callbackGasLimit\");\n\n        /// Call Chainlink to receive a random word\n        /// Will revert if subscription is not funded.\n        VRFCoordinatorV2Interface coordinator = VRFCoordinatorV2Interface(chainlinkCoordinator);\n        /// Now Chainlink will call us back in a future transaction, see function fulfillRandomWords\n\n        tiersRequestId = coordinator.requestRandomWords(\n            gasLane,\n            subscriptionId,\n            3, /// Request confirmations\n            callbackGasLimit,\n            1 /// request 1 random number\n        );\n\n        emit TiersRandomWordRequested(tiersRequestId);\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function revealTiers(\n        string memory revealedURI\n    ) external\n        override\n        onlyOwner\n        onlyOnOrAfter(ContractStatus.TIERS_RANDOMIZED)\n    {\n        if (tiersRevealed) revert CallingMoreThanOnce();\n        bytes memory bytesRevealedURI = bytes(revealedURI);\n        if (bytesRevealedURI[bytesRevealedURI.length - 1] != bytes(\"/\")[0]) revert IncorrectValue(\"revealedURI\");\n        baseURI = revealedURI;\n        tiersRevealed = true;\n\n        emit TiersRevealed();\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function randomizeTickets(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external\n        override\n        onlyOwner\n        onlyOnOrAfter(ContractStatus.END_MINTING)\n    {\n        // Only allow randomize if random word has not been set\n        if (ticketsRandomWord != 0) revert CanNoLongerCall();\n\n        // making sure that the request has enough callbackGasLimit to execute\n        if (callbackGasLimit < 40_000) revert IncorrectValue(\"callbackGasLimit\");\n\n        /// Call Chainlink to receive a random word\n        /// Will revert if subscription is not funded.\n        VRFCoordinatorV2Interface coordinator = VRFCoordinatorV2Interface(chainlinkCoordinator);\n        ticketsRequestId = coordinator.requestRandomWords(\n            gasLane,\n            subscriptionId,\n            3, /// Request confirmations\n            callbackGasLimit,\n            1 /// request 1 random number\n        );\n\n        emit TicketsRandomWordRequested(ticketsRequestId);\n        /// Now Chainlink will call us back in a future transaction, see function fulfillRandomWords\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setWhitelistSigner(address whiteListSigner_) external override onlyOwner {\n        _setWhiteListSigner(whiteListSigner_);\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setTicketNFT(TicketNFT ticketNFT_) external override onlyOwner() {\n        bytes4 ticketNFTInterfaceId = type(ITicketNFT).interfaceId;\n        if (!ticketNFT_.supportsInterface(ticketNFTInterfaceId)) revert IncorrectValue(\"ticketNFT_\");\n\n        // should not be able to setTicketNFT if ticketNFTs have been airdropped\n        if (address(ticketNFT) != address(0)) {\n\n            // contractStatus 2 means that the tickets have been airdropped so any status before that should be good\n            if (uint(ticketNFT.contractStatus()) > 1) revert  CanNoLongerCall();\n        }\n        emit TicketNFTSet(ticketNFT, ticketNFT_);\n        ticketNFT = ticketNFT_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setTreasury(address payable treasury_) external override onlyOwner() {\n        if (treasury_ == address(0)) revert ZeroAddress(\"treasury\");\n        emit TreasurySet(treasury, treasury_);\n        treasury = treasury_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setRoyaltyFee(uint96 royaltyFee) external override onlyOwner() {\n        _setDefaultRoyalty(treasury, royaltyFee);\n\n        emit RoyaltyFeesSet(royaltyFee);\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setPrice(uint256 price_) external override onlyOwner {\n        if (price_ == 0) revert IsZero(\"price\");\n        emit PriceSet(price, price_);\n        price = price_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setContractURI(string memory contractURI_) external override onlyOwner() {\n        if (bytes(contractURI_).length == 0) revert EmptyString(\"contractURI\");\n        emit ContractURISet(contractURI, contractURI_);\n        contractURI = contractURI_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setUnrevealedURI(string memory unrevealedURI_) external override onlyOwner {\n        bytes memory bytesUnrevealedURI = bytes(unrevealedURI_);\n        if (bytesUnrevealedURI[bytesUnrevealedURI.length - 1] != bytes(\"/\")[0]) revert IncorrectValue(\"unrevealedURI\");\n        emit UnrevealedURISet(unrevealedURI, unrevealedURI_);\n        unrevealedURI = unrevealedURI_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setPrivateMintingTimestamp(\n        uint256 privateMintingTimestamp_\n    ) external\n        override\n        onlyOwner\n        onlyBefore(ContractStatus.PRIVATE_MINTING)\n    {\n        if (\n            privateMintingTimestamp_ >= publicMintingTimestamp &&\n            privateMintingTimestamp_ != 0 &&\n            publicMintingTimestamp != 0\n        ) revert IncorrectValue(\"privateMintingTimestamp\");\n        emit PrivateMintingTimestampSet(privateMintingTimestamp, privateMintingTimestamp_);\n        privateMintingTimestamp = privateMintingTimestamp_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setPublicMintingTimestamp(\n        uint256 publicMintingTimestamp_\n    ) external\n        override\n        onlyOwner\n        onlyBefore(ContractStatus.PUBLIC_MINTING)\n    {\n        if (\n            publicMintingTimestamp_ < privateMintingTimestamp &&\n            publicMintingTimestamp_ != 0\n        ) revert IncorrectValue(\"publicMintingTimestamp\");\n\n        emit PublicMintingTimestampSet(publicMintingTimestamp, publicMintingTimestamp_);\n        publicMintingTimestamp = publicMintingTimestamp_;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function setMaxPublicMintable(uint16 maxPublicMintable_) external override onlyOwner {\n        if (maxPublicMintable_ == 0) revert IsZero(\"maxPublicMintable\");\n        emit MaxPublicMintableSet(maxPublicMintable, maxPublicMintable_);\n        maxPublicMintable = maxPublicMintable_;\n    }\n\n    /********************** EXTERNAL VIEW ********************************/\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function mintedBy(address minter) external view override returns (uint256) {\n        if(minter == address(0)) revert ZeroAddressQuery();\n        return minted[minter].privateMinted + minted[minter].publicMinted;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function mintedBy(address minter, MintingType mintingType) external view override returns (uint256) {\n        if(minter == address(0)) revert ZeroAddressQuery();\n        if (mintingType == MintingType.PRIVATE_MINT) return minted[minter].privateMinted;\n        else return minted[minter].publicMinted;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function nftTier(\n        uint256 tokenId\n    ) external\n        view\n        override\n        onlyOnOrAfter(ContractStatus.TIERS_RANDOMIZED)\n        returns (uint16 tier)\n    {\n        if (!_exists(tokenId)) revert NonExistentToken();\n        return nftTiers()[tokenId];\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function ticketsRevealed() external view override returns(bool) {\n        return ticketsRandomWord != 0;\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function winners() external view override onlyOnOrAfter(ContractStatus.TICKETS_RANDOMIZED) returns (uint16[] memory) {\n\n        // Setup a pool with random values\n        uint256 randomPoolSize = 100;\n        uint256 batch = 0;\n        uint16[] memory randomPool = randArray(ticketsRandomWord, randomPoolSize, batch++);\n\n        /// Setup an array with nfts that will be returned\n        uint16[] memory nfts = new uint16[](maxTotalSupply);\n        uint256 counter;\n        uint256 randomId;\n\n        // Assign 500 winners\n        for(uint256 i = 0; i < ticketSupply; i++) {\n            randomId = randomPool[counter++];\n            if (counter == randomPoolSize) {\n                randomPool = randArray(ticketsRandomWord, randomPoolSize, batch++);\n                counter = 0;\n            }\n            while(nfts[randomId] != 0) {\n                randomId = randomPool[counter++];\n                if (counter == randomPoolSize) {\n                    randomPool = randArray(ticketsRandomWord, randomPoolSize, batch++);\n                    counter = 0;\n                }\n            }\n            nfts[randomId] = 1;     // Winner\n        }\n\n        return nfts;\n    }\n\n    /********************** PUBLIC ********************************/\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function totalSupply() public view override returns (uint256) {\n        return tokenIdCounter.current();\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function contractStatus() public view override returns (ContractStatus) {\n        if (ticketsRandomWord != 0) return ContractStatus.TICKETS_RANDOMIZED;\n        if (tiersRevealed) return ContractStatus.TIERS_REVEALED;\n        if (tiersRandomWord != 0) return ContractStatus.TIERS_RANDOMIZED;\n        if (maxTotalSupply == tokenIdCounter.current()) return ContractStatus.END_MINTING;\n        if (\n            block.timestamp >= privateMintingTimestamp &&\n            privateMintingTimestamp != 0 &&\n            (\n            block.timestamp < publicMintingTimestamp ||\n            publicMintingTimestamp == 0\n            )\n        ) return ContractStatus.PRIVATE_MINTING;\n        if (\n            block.timestamp >= publicMintingTimestamp &&\n            publicMintingTimestamp != 0 &&\n            privateMintingTimestamp != 0\n        ) return ContractStatus.PUBLIC_MINTING;\n        return ContractStatus.NO_MINTING;\n    }\n\n    /**\n    * @notice returns the unrevealed uri when the reveal hasn't happened yet and when it has, returns the real uri\n    * @param tokenId should be a minted tokenId owned by an account\n    */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        if (!_exists(tokenId)) revert NonExistentToken();\n\n        if (!tiersRevealed) return string(abi.encodePacked(unrevealedURI, tokenId.toString(), \".json\"));\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"));\n    }\n\n    /**\n    * @inheritdoc IAccessPassNFT\n    */\n    function nftTiers() public view override onlyOnOrAfter(ContractStatus.TIERS_RANDOMIZED) returns (uint16[] memory) {\n        /// Setup a pool with random values\n        uint256 randomPoolSize = 500;\n        uint256 batch = 0;\n        uint16[] memory randomPool = randArray(tiersRandomWord, randomPoolSize, batch++);\n\n        /// Setup an array with nfts that will be returned\n        uint16[] memory nfts = new uint16[](maxTotalSupply);\n        uint256 counter;    /// Loop counter to check when we exhaust our random pool and need to fill it again\n        uint256 randomId;   /// Random NFT id\n\n        /// Assign goldenTierSupply golden tier nfts\n        for(uint256 i = 0; i < goldenTierSupply; i++) {\n            randomId = randomPool[counter++];\n            if (counter == randomPoolSize) { /// If we exhaust the random pool, fill it again\n                randomPool = randArray(tiersRandomWord, randomPoolSize, batch++);\n                counter = 0;\n            }\n            while(nfts[randomId] != 0) { /// Loop while the NFT id already has a tier assigned\n                randomId = randomPool[counter++]; /// If we exhaust the random pool, fill it again\n                if (counter == randomPoolSize) {\n                    randomPool = randArray(tiersRandomWord, randomPoolSize, batch++);\n                    counter = 0;\n                }\n            }\n            nfts[randomId] = uint16(Tier.GOLD);\n        }\n\n        // Assign silverTierSupply silver tier nfts\n        for(uint256 i = 0; i < silverTierSupply; i++) {\n            randomId = randomPool[counter++];\n            if (counter == randomPoolSize) { /// If we exhaust the random pool, fill it again\n                randomPool = randArray(tiersRandomWord, randomPoolSize, batch++);\n                counter = 0;\n            }\n            while(nfts[randomId] != 0) { /// Loop while the NFT id already has a tier assigned\n                randomId = randomPool[counter++];\n                if (counter == randomPoolSize) { /// If we exhaust the random pool, fill it again\n                    randomPool = randArray(tiersRandomWord, randomPoolSize, batch++);\n                    counter = 0;\n                }\n            }\n            nfts[randomId] = uint16(Tier.SILVER);\n        }\n\n        // All remaining nfts are automatically bronze because they are already set to 0\n        return nfts;\n    }\n\n    /**\n    * @inheritdoc IERC165\n    */\n    function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    override(ERC721Royalty, IERC165)\n    returns (bool)\n    {\n        return\n            interfaceId == type(IAccessPassNFT).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /********************** INTERNAL ********************************/\n\n    /**\n    * @notice check if the owner has a winning ticket\n    * @inheritdoc ERC721\n    */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n\n        if (address(ticketNFT) != address(0)) {\n            uint256 frozenPeriod = ticketNFT.frozenPeriod();\n            // not allowing winners to transfer if they only have one AccessPassNFT\n            if (\n                block.timestamp < frozenPeriod &&\n                ticketNFT.isAccountWinner(from) &&\n                balanceOf(from) == 1\n            ) revert TransferringFrozenAccount(from, block.timestamp, frozenPeriod);\n        }\n    }\n\n    /**\n    * @notice pays treasury the amount\n    * @param account is the account that paid\n    * @param amount is how much the account has paid\n    */\n    function payTreasury(address account, uint256 amount) internal {\n        (bool success, ) = treasury.call{value: amount}(\"\");\n        require (success, \"Could not pay treasury\");\n        emit TreasuryPaid(account, amount);\n    }\n\n    /**\n    * @notice internal mint function\n    * @param to is the account receiving the NFT\n    * @param amountPaid is the amount that the account has paid for the mint\n    * @param mintingType could be PRIVATE_MINT or PUBLIC_MINT\n    */\n    function internalMint(\n        address to,\n        uint256 amountPaid,\n        MintingType mintingType\n    ) internal\n        onlyBefore(ContractStatus.END_MINTING)\n    {\n        if (amountPaid != price) revert IncorrectValue(\"amountPaid\");\n        uint256 tokenId = tokenIdCounter.current();\n\n        payTreasury(to, amountPaid);\n\n        tokenIdCounter.increment();\n        if (MintingType.PRIVATE_MINT == mintingType) {\n            minted[to].privateMinted += 1;\n        } else {\n            minted[to].publicMinted += 1;\n        }\n\n        _safeMint(to, tokenId);\n    }\n\n    /**\n    * @notice Chainlink calls us with a random value. (See VRFConsumerBaseV2's fulfillRandomWords function)\n    * @dev Note that this happens in a later transaction than the request.\n    * @param requestId is the id of the request from VRF's side\n    * @param randomWords is an array of random numbers generated by VRF\n    */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n        if (requestId == 0) revert IsZero(\"requestId\");\n        if (requestId == tiersRequestId) {\n            if (tiersRandomWord != 0) revert CallingMoreThanOnce();\n            tiersRandomWord = randomWords[0]; /// Set the random value received from Chainlink\n            emit TiersRandomized(tiersRandomWord);\n        } else if (requestId == ticketsRequestId) {\n            if (ticketsRandomWord != 0) revert CallingMoreThanOnce();\n            ticketsRandomWord = randomWords[0]; /// Set the random value received from Chainlink\n            emit TicketsRandomized(ticketsRandomWord);\n        }\n    }\n\n    /**\n    * @notice Returns a list of x random numbers, in increments of 16 numbers.\n    * So you may receive x random numbers or up to 15 more. The random numbers are between 0 and 499\n    * Each batch will be different, you can call multiple times with different batch numbers\n    * This routine is deterministic and will always return the same result if randomWord is the same\n    * @param randomWord can only be tiersRandomWord and ticketsRandomWord\n    * @param max is the max numbers needed in a batch\n    * @param batch represents the batch number\n    */\n    function randArray(uint256 randomWord, uint256 max, uint256 batch) internal view returns (uint16[] memory) {\n        // First make sure the random chainlinkVRF value is initialized\n        if (randomWord == 0) revert IsZero(\"randomWord\");\n        uint256 mask = 0xFFFF;   // 0xFFFF == [1111111111111111], masking the last 16 bits\n\n        uint256 mainCounterMax = max / 16;\n        if (max % 16 > 0) {\n            mainCounterMax +=1;\n        }\n        uint256 batchOffset = (batch * mainCounterMax * 16);\n        uint16[] memory randomValues = new uint16[](mainCounterMax * 16);\n        for (uint256 mainCounter = 0; mainCounter < mainCounterMax; mainCounter++) {\n            uint256 randomValue = uint256(keccak256(abi.encode(randomWord, mainCounter + batchOffset)));\n            for (uint256 subCounter = 0; subCounter < 16; subCounter++) {\n                randomValues[mainCounter * 16 + subCounter] = uint16(randomValue & mask) % maxTotalSupply;   // Mask 16 bits, value between 0 .. MAX_TOTAL_SUPPLY-1\n                randomValue = randomValue / 2 ** 16;     // Right shift 16 bits into oblivion\n            }\n        }\n        return randomValues;\n    }\n\n    /********************** MODIFIERS ********************************/\n\n    /**\n    * @notice functions like a less than to the supplied status\n    * @param status is a ContractStatus in which the function must happen before in. For example:\n    * setting the privateMintTimestamp should only happen before private minting starts to ensure that no one\n    * messes with the privateMint settings during ContractStatus.PrivateMinting. To do that add this modifier\n    * with the parameter: ContractStatus.PrivateMinting\n    */\n    modifier onlyBefore(ContractStatus status) {\n        // asserting here because there should be no state before NO_MINTING\n        assert(status != ContractStatus.NO_MINTING);\n        ContractStatus lastStatus = ContractStatus(uint(status) - 1);\n        if (contractStatus() >= status) revert IncorrectContractStatus(contractStatus(), lastStatus);\n        _;\n    }\n\n    /**\n    * @notice functions like a an equal to the supplied status\n    * @param status is the ContractStatus it must be in\n    */\n    modifier onlyDuring(ContractStatus status) {\n        if (contractStatus() != status) revert IncorrectContractStatus(contractStatus(), status);\n        _;\n    }\n\n    /**\n    * @notice functions like a greater than or equal to. The current status must be the same as or happened after the parameter.\n    * @param status that the contract must at least be in. For example:\n    * getting the nftTiers should only happen when TIERS_RANDOMIZED has already happened. so the parameter will be\n    * TIERS_RANDOMIZED, because the function can only work once the status is TIERS_RANDOMIZED or has passed that\n    */\n    modifier onlyOnOrAfter(ContractStatus status) {\n        if (contractStatus() < status) revert IncorrectContractStatus(contractStatus(), status);\n        _;\n    }\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Counters.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
12     },
13     "contracts/WhitelistVerifier.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n* @title An abstract contract that checks if the verified slot is valid\n* @author Oost & Voort, Inc\n* @notice This contract is to be used in conjunction with the AccessPassNFT contract\n*/\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./interfaces/IVerifiedSlot.sol\";\n\nabstract contract WhitelistVerifier is IVerifiedSlot {\n    using ECDSA for bytes32;\n\n    /**\n    * @dev The following struct follows the EIP712 Standard\n    */\n    struct EIP712Domain {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n\n    /**\n    * @dev The typehash for EIP712Domain\n    */\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n    );\n\n    /**\n    * @dev The typehash for the message being sent to the contract\n    */\n    bytes32 constant VERIFIED_SLOT_TYPEHASH =\n        keccak256(\"VerifiedSlot(address minter,uint256 mintingCapacity)\");\n\n    /**\n    * @dev The hashed Domain Message\n    */\n    bytes32 DOMAIN_SEPARATOR;\n\n    /**\n    * @dev the address of the whiteListSigner which is an EOA that signs a message that confirms who can mint how much\n    */\n    address public whiteListSigner;\n\n    /**\n    * @dev emitted when the whitelistSigner has been set\n    * @param oldSigner represents the old signer for the Contract\n    * @param newSigner represents the newly set signer for the Contract\n    */\n    event WhitelistSignerSet(address oldSigner, address newSigner);\n\n    /**\n    * @dev reverts with this message when the Zero Address is being used to set the Whitelist Signer\n    */\n    error WhitelistSignerIsZeroAddress();\n\n    /**\n    * @dev reverts with this message when the Caller of the mint is not the same as the one in the VerifiedSLot\n    * @param caller is the account that called for the mint\n    * @param minter is the address specified in the VerifiedSlot\n    */\n    error CallerIsNotMinter(address caller, address minter);\n\n    /**\n    * @dev reverts with this message when the message is not correct or if it is not signed by the WhitelistSigner\n    * @param unknownSigner is the signer that signed the message\n    * @param whitelistSigner is the signer who should have signed the message\n    */\n    error UnknownSigner(address unknownSigner, address whitelistSigner);\n\n    /**\n    * @dev reverts with this message when the caller is trying to mint more than allowed\n    * @param minted is the amount of tokens the caller has minted already\n    */\n    error ExceedMintingCapacity(uint256 minted);\n\n    /**\n    * @notice initializes the contract\n    */\n    constructor () {\n        DOMAIN_SEPARATOR = hash(EIP712Domain({\n            name: \"AccessPassNFT\",\n            version: '1',\n            chainId: block.chainid,\n            verifyingContract: address(this)\n        }));\n    }\n\n    /**\n    * @notice sets the whitelistSigner\n    * @param whitelistSigner_ is an EOA that signs verified slots\n    */\n    function _setWhiteListSigner(address whitelistSigner_) internal virtual {\n        if (whitelistSigner_ == address(0)) revert WhitelistSignerIsZeroAddress();\n\n        emit WhitelistSignerSet(whiteListSigner, whitelistSigner_);\n        whiteListSigner = whitelistSigner_;\n\n    }\n\n    /**\n    * @notice validates verified slot\n    * @param minter is msg.sender\n    * @param minted is the amount the minter has minted\n    * @param verifiedSlot is an object with the following:\n    * minter: address of the minter,\n    * mintingCapacity: amount Metaframes has decided to grant to the minter,\n    * r and s --- The x co-ordinate of r and the s value of the signature\n    * v: The parity of the y co-ordinate of r\n    */\n    function validateVerifiedSlot(\n        address minter,\n        uint256 minted,\n        VerifiedSlot memory verifiedSlot\n    ) internal view\n    {\n        if (whiteListSigner == address(0)) revert WhitelistSignerIsZeroAddress();\n        if (verifiedSlot.minter != minter) revert CallerIsNotMinter(minter, verifiedSlot.minter);\n        if(verifiedSlot.mintingCapacity <= minted) revert ExceedMintingCapacity(minted);\n\n        address wouldBeSigner = getSigner(verifiedSlot);\n        if (wouldBeSigner != whiteListSigner) revert UnknownSigner(wouldBeSigner, whiteListSigner);\n    }\n\n    /**\n    * @notice hashes the DOMAIN object using keccak256\n    * @param eip712Domain represents the EIP712 object to be hashed\n    */\n    function hash(EIP712Domain memory eip712Domain) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                EIP712DOMAIN_TYPEHASH,\n                keccak256(bytes(eip712Domain.name)),\n                keccak256(bytes(eip712Domain.version)),\n                eip712Domain.chainId,\n                eip712Domain.verifyingContract\n            ));\n    }\n\n    /**\n    * @notice hashes the verifiedslot object using keccak256\n    * @param verifiedSlot is an object with the following:\n    * minter: address of the minter,\n    * mintingCapacity: amount Metaframes has decided to grant to the minter,\n    * r and s --- The x co-ordinate of r and the s value of the signature\n    * v: The parity of the y co-ordinate of r\n    */\n    function hash(VerifiedSlot memory verifiedSlot) internal pure returns (bytes32) {\n        return\n        keccak256(abi.encode(\n            VERIFIED_SLOT_TYPEHASH,\n            verifiedSlot.minter,\n            verifiedSlot.mintingCapacity\n        ));\n    }\n\n    /**\n    * @notice returns the signer of a given verifiedSlot to be used to check who signed the message\n    * @param verifiedSlot is an object with the following:\n    * minter: address of the minter,\n    * mintingCapacity: amount Metaframes has decided to grant to the minter,\n    * r and s --- The x co-ordinate of r and the s value of the signature\n    * v: The parity of the y co-ordinate of r\n    */\n    function getSigner(VerifiedSlot memory verifiedSlot) internal view returns (address) {\n\n        // Note: we need to use `encodePacked` here instead of `encode`.\n        bytes32 digest = keccak256(abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                hash(verifiedSlot)\n            ));\n\n        return ecrecover(digest, verifiedSlot.v, verifiedSlot.r, verifiedSlot.s);\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Strings.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../common/ERC2981.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n        _resetTokenRoyalty(tokenId);\n    }\n}\n"
21     },
22     "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
24     },
25     "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
27     },
28     "contracts/TicketNFT.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.8.6;\n\n/**\n* @title NFTs for the TicketCompetition to the World Cup for Metaframes\n* @author MetaFrames\n* @notice This is the NFT contract used as basis to determine the winner of the World Cup Ticket. This is also\n* related to the AccessPassNFT\n* @dev The flow of the contract is as follows:\n* Deployment: Contract is deployed and configured\n* -----------------------------------------------\n* Airdrop: Minting TicketNFTs to 500 Random Users\n*  -airdrop()\n* -----------------------------------------------\n* Ticket Competition: Selection of the ticket winner\n*  -setRegistered() means registration was done off-chain\n*  -requestRandomWord() requests the random number from VRF\n*  -ticketWinners() then returns the winner\n* -----------------------------------------------\n* Winners Frozen: When winning tokens are barred from trading their tokens\n* -----------------------------------------------\n* Trading Enabled: When all trading has been enabled again\n*/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"./AccessPassNFT.sol\";\nimport \"./interfaces/IAccessPassNFT.sol\";\nimport \"./interfaces/ITicketNFT.sol\";\n\ncontract TicketNFT is Ownable, ERC721Royalty, VRFConsumerBaseV2, ITicketNFT {\n    using Strings for uint256;\n\n    uint16 public constant NUMBER_OF_WINNERS = 2;\n\n    /**\n    * @dev maxTotalSupply is the amount of NFTs that can be minted\n    */\n    uint16 public immutable maxTotalSupply;\n\n    /**\n    * @dev contractURI is an OpenSea standard. This should point to a metadata that tells who will receive revenues\n    * from OpensSea. See https://docs.opensea.io/docs/contract-level-metadata\n    */\n    string public contractURI;\n\n    /**\n    * @dev frozenPeriod is a timestamp for when the ticket winners can start trading again\n    */\n    uint256 public frozenPeriod;\n\n    /**\n    * @dev if set to true, that particular nft is a winner\n    */\n    mapping(uint256 => bool) public isWinner;\n\n    /**\n    * @dev array of winning ids\n    */\n    uint256[] public ticketWinners;\n\n    /**\n    * @dev baseURI is the base of the token metadata used in conjunction with the token id\n    */\n    string public baseURI;\n\n    /**\n    * @dev flag that tells if the tickets have been airdropped\n    */\n    bool public ticketsAirdropped;\n\n    /**\n    * @dev flag that tells if the registration has been set\n    */\n    bool public hasSetRegistration;\n\n    /**\n    * @dev Mapping of token id to if the owner of that token id has not registered off-chain.\n    * For example:\n    * 1. owner of token id 0 has registered, so 0 => false\n    * 2. owner of token id 2 has NOT registered, so 1 => true\n    * This was purposely made as hasNotRegistered so that we only write for values that have not registered.\n    * This is to save gas since there should be more people who have registered than those who have not.\n    * The registration comes from an off-chain database.\n    */\n    mapping(uint16 => bool) private _hasNotRegistered;\n\n    /**\n    * @dev the related AccessPassNFT to this contract\n    */\n    AccessPassNFT public accessPassNFT;\n\n    /**\n    * @dev The following variables are needed to request a random value from Chainlink.\n    * See https://docs.chain.link/docs/vrf-contracts/\n    */\n    address public chainlinkCoordinator; // Chainlink Coordinator address\n    uint256 public requestId;            // Chainlink request id for the selection of the ticket winner\n    uint256 public randomWord;           // Random value received from Chainlink VRF\n\n    /**\n    * @notice initializes the contract\n    * @param baseURI_ is the metadata's uri\n    * @param contractURI_ is for OpenSeas compatability\n    * @param royaltyAddress receives royalties fee from selling this token\n    * @param royaltyFee is the fees taken from second-hand selling. This is expressed in _royaltyFee/1000.\n    * So to do 5% means supplying 50 since 50/1000 is 5% (see ERC2981 function _setDefaultRoyalty(address receiver, uint96 feeNumerator))\n    * @param accessPassNFT_ is the address of the AccessPassNFT related to this token\n    * @param vrfCoordinator_ is the address of the VRF used for getting a random number\n    * @param nftHolder is the temporary holder of the NFTs before the airdrop\n    * @param frozenPeriod_ is a timestamp for when the ticket winners can start trading again\n    */\n    constructor(\n        string memory baseURI_,\n        string memory contractURI_,\n        address royaltyAddress,\n        uint96 royaltyFee,\n        AccessPassNFT accessPassNFT_,\n        address vrfCoordinator_,\n        address nftHolder,\n        uint256 frozenPeriod_\n    ) ERC721(\"Maradona Official World Cup Ticket\", \"OMWC\")\n      VRFConsumerBaseV2(vrfCoordinator_){\n\n        // crucial to check if there is a '/' in the end since this can no longer be changed once set\n        // must have a '/' in the end since the token id follows the '/'\n        bytes memory bytesBaseURI = bytes(baseURI_);\n        if (bytesBaseURI[bytesBaseURI.length - 1] != bytes(\"/\")[0]) revert IncorrectValue(\"baseURI\");\n        baseURI = baseURI_;\n\n        if (bytes(contractURI_).length == 0) revert EmptyString(\"contractURI\");\n        contractURI = contractURI_;\n\n        if(royaltyAddress == address(0)) revert ZeroAddress(\"royaltyAddress\");\n        // not checking royaltyFee on purpose here\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\n\n        uint16 maxTotalSupply_ = accessPassNFT_.ticketSupply();\n        maxTotalSupply = maxTotalSupply_;\n\n        bytes4 accessPassNFTInterfaceId = type(IAccessPassNFT).interfaceId;\n        if(!accessPassNFT_.supportsInterface(accessPassNFTInterfaceId)) revert IncorrectValue(\"accessPassNFT\");\n        accessPassNFT = accessPassNFT_;\n\n        if(address(vrfCoordinator_) == address(0)) revert ZeroAddress(\"vrfCoordinator\");\n        chainlinkCoordinator = vrfCoordinator_;\n\n        if(nftHolder == address(0)) revert ZeroAddress(\"nftHolder\");\n\n        // sending nfts to nftHolder which will be the eventual owner of the contract who will do the airdrop\n        for (uint256 i = 0; i < maxTotalSupply_; i++) {\n            _safeMint(nftHolder, i);\n        }\n\n        // not checking frozenPeriod_ on purpose here because there's a way to change it later\n        frozenPeriod = frozenPeriod_;\n\n    }\n\n    /********************** EXTERNAL ********************************/\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function airdrop(\n        uint16[] calldata winners\n    ) external\n        override\n        onlyOwner\n        onlyDuring(ContractStatus.TICKETS_REVEALED)\n    {\n        if (winners.length != maxTotalSupply) revert IncorrectValue(\"winners\");\n\n        for (uint256 i = 0; i < winners.length; i++) {\n            safeTransferFrom(msg.sender, accessPassNFT.ownerOf(winners[i]), i);\n        }\n\n        ticketsAirdropped = true;\n        emit TicketsAirdropped(winners);\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function requestRandomWord(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external\n        override\n        onlyOwner\n        onlyDuring(ContractStatus.SET_REGISTRATION)\n    {\n\n        // making sure that the request has enough callbackGasLimit to execute\n        if (callbackGasLimit < 150_000) revert IncorrectValue(\"callbackGasLimit\");\n\n        /// Call Chainlink to receive a random word\n        /// Will revert if subscription is not funded.\n        VRFCoordinatorV2Interface coordinator = VRFCoordinatorV2Interface(chainlinkCoordinator);\n        requestId = coordinator.requestRandomWords(\n            gasLane,\n            subscriptionId,\n            3, /// Request confirmations\n            callbackGasLimit,\n            1 /// request 1 random number\n        );\n        /// Now Chainlink will call us back in a future transaction, see function fulfillRandomWords\n\n        emit RandomWordRequested(requestId);\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function setContractURI(string memory uri) external override onlyOwner() {\n        if (bytes(uri).length == 0) revert EmptyString(\"contractURI\");\n        emit ContractURISet(contractURI, uri);\n        contractURI = uri;\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function setDefaultRoyalty(address royaltyAddress, uint96 royaltyFee) external override onlyOwner(){\n        if (address(0) == royaltyAddress) revert ZeroAddress(\"royaltyAddress\");\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\n        emit RoyaltiesSet(royaltyAddress, royaltyFee);\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function setRegistered(\n        bool[] calldata hasRegistered_\n    ) external\n        override\n        onlyOwner\n        onlyDuring(ContractStatus.AIRDROPPED_TICKETS)\n    {\n        // sending an empty array means all accounts have registered\n        if (hasRegistered_.length == 0) {\n            hasSetRegistration = true;\n        } else {\n            if (hasRegistered_.length != maxTotalSupply) revert IncorrectValue(\"hasRegistered\");\n            uint16 notRegisteredCounter = 0;\n\n            for (uint16 i = 0; i < hasRegistered_.length; i++) {\n                if (!hasRegistered_[i]) {\n                    // only writing for those who have not registered\n                    _hasNotRegistered[i] = true;\n                    // counting how many accounts have not registred\n                    notRegisteredCounter++;\n                }\n            }\n\n            // ensuring that there are enough registered to have enough winners\n            if (maxTotalSupply - notRegisteredCounter < NUMBER_OF_WINNERS) revert IncorrectValue(\"notRegisteredCounter\");\n            hasSetRegistration = true;\n        }\n        emit RegistrationSet(hasRegistered_);\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function setFrozenPeriod(uint256 frozenPeriod_) external override onlyOwner() onlyBefore(ContractStatus.WINNERS_FROZEN) {\n        if (frozenPeriod_ < block.timestamp && frozenPeriod_ != 0) revert IncorrectValue(\"frozenPeriod_\");\n        emit FrozenPeriodSet(frozenPeriod, frozenPeriod_);\n        frozenPeriod = frozenPeriod_;\n    }\n\n    /********************** PUBLIC VIEW ********************************/\n\n    /**\n    * @notice returns a token metadata's uri\n    * @param tokenId is the id of the token being queried\n    */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if(!_exists(tokenId)) revert NonExistentToken();\n\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"));\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function hasRegistered(\n        uint16 tokenId\n    ) public\n        view\n        override\n        onlyOnOrAfter(ContractStatus.SET_REGISTRATION)\n        returns (bool)\n    {\n        if(tokenId >= maxTotalSupply) revert NonExistentToken();\n        return !_hasNotRegistered[tokenId];\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function isAccountWinner(address account) public view override returns (bool){\n        for (uint16 i = 0; i < ticketWinners.length; i++) {\n            if (ownerOf(ticketWinners[i]) == account) return true;\n        }\n        return false;\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function contractStatus() public view override returns (ContractStatus) {\n        if(randomWord != 0) {\n            if(block.timestamp < frozenPeriod) return ContractStatus.WINNERS_FROZEN;\n            else return ContractStatus.TRADING_ENABLED;\n        }\n        if(hasSetRegistration) return ContractStatus.SET_REGISTRATION;\n        if(ticketsAirdropped) return ContractStatus.AIRDROPPED_TICKETS;\n        if(accessPassNFT.ticketsRevealed()) return ContractStatus.TICKETS_REVEALED;\n        return ContractStatus.PRE_AIRDROP;\n    }\n\n    /**\n    * @inheritdoc ITicketNFT\n    */\n    function totalSupply() public view override returns (uint256) {\n        return maxTotalSupply;\n    }\n\n    /**\n    * @inheritdoc IERC165\n    */\n    function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    override(ERC721Royalty, IERC165)\n    returns (bool)\n    {\n        return\n            interfaceId == type(ITicketNFT).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /********************** INTERNAL ********************************/\n\n    /**\n    * @notice check if token is frozen before transferring\n    * @inheritdoc ERC721\n    * @param from is the address that will give the token\n    * @param to is the address that will receive the token\n    * @param tokenId is the id being transferred\n    */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n\n        // not allowing winningIds to be transferred when in frozenPeriod\n        if (\n            block.timestamp < frozenPeriod &&\n            isWinner[tokenId]\n        ) revert TransferringFrozenToken(tokenId, block.timestamp, frozenPeriod);\n    }\n\n    /**\n    * @notice sets the winners\n    */\n    function setWinners() internal {\n        // Setup a pool with random values\n        uint256 randomPoolSize = 16;\n        uint256 batch = 0;\n        uint16[] memory randomPool = randArray(randomPoolSize, batch++);\n\n        uint256 counter = 0;\n        uint16 randomId;\n\n        for (uint16 i = 0; i < NUMBER_OF_WINNERS; i++) {\n            randomId = randomPool[counter++];\n            if (counter == randomPoolSize) {\n                randomPool = randArray(randomPoolSize, batch++);\n                counter = 0;\n            }\n\n            // only stays in the loop when the current id has not registered or if the current id already won\n            while(_hasNotRegistered[randomId] || isWinner[randomId]) {\n                randomId = randomPool[counter++];\n                if (counter == randomPoolSize) {\n                    randomPool = randArray(randomPoolSize, batch++);\n                    counter = 0;\n                }\n            }\n\n            ticketWinners.push(randomId);\n            isWinner[randomId] = true; // Using mapping to keep track for if the id was already chosen as a winner\n        }\n\n        emit TicketWinnersFrozen(frozenPeriod);\n    }\n\n    /**\n    * @notice Chainlink calls us with a random value. (See VRFConsumerBaseV2's fulfillRandomWords function)\n    * @dev Note that this happens in a later transaction than the request. This approximately costs 139_000 in gas\n    * @param requestId_ is the id of the request from VRF's side\n    * @param randomWords is an array of random numbers generated by VRF\n    */\n    function fulfillRandomWords(\n        uint256 requestId_,\n        uint256[] memory randomWords\n    ) internal override {\n        if(requestId != requestId_) revert IncorrectValue(\"requestId\");\n        if(randomWord != 0) revert CallingMoreThanOnce();\n        randomWord = randomWords[0];\n        emit TicketWinnersSelected(randomWords[0]);\n\n        setWinners();\n    }\n\n    /**\n    * @notice Returns a list of x random numbers, in increments of 16 numbers.\n    * So you may receive x random numbers or up to 15 more. The random numbers are between 0 and 499\n    * Each batch will be different, you can call multiple times with different batch numbers\n    * This routine is deterministic and will always return the same result if randomWord is the same\n    * @param max is the max numbers needed in a batch\n    * @param batch represents the batch number\n    */\n    function randArray(\n        uint256 max,\n        uint256 batch\n    ) internal\n        view\n        returns (uint16[] memory)\n    {\n        uint256 mask = 0xFFFF;   // 0xFFFF == [1111111111111111], masking the last 16 bits\n\n        uint256 mainCounterMax = max / 16;\n        if (max % 16 > 0) {\n            mainCounterMax +=1;\n        }\n        uint256 batchOffset = (batch * mainCounterMax * 16);\n        uint16[] memory randomValues = new uint16[](mainCounterMax * 16);\n        for (uint256 mainCounter = 0; mainCounter < mainCounterMax; mainCounter++) {\n            uint256 randomValue = uint256(keccak256(abi.encode(randomWord, mainCounter + batchOffset)));\n            for (uint256 subCounter = 0; subCounter < 16; subCounter++) {\n\n                // Mask 16 bits, value between 0 .. maxTotalSupply-1\n                randomValues[mainCounter * 16 + subCounter] = uint16(randomValue & mask) % maxTotalSupply;\n\n                // Right shift 16 bits into oblivion\n                randomValue = randomValue / 2 ** 16;\n            }\n        }\n        return randomValues;\n    }\n\n    /********************** MODIFIER ********************************/\n\n    /**\n    * @notice functions like a less than to the supplied status\n    * @param status is a ContractStatus in which the function must happen before in. For example:\n    * setting the frozenPeriod should only happen before the ticketWinners have been selected to ensure that no one\n    * messes with the trading period during ContractStatus.WINNERS_FROZEN. To do that add this modifier\n    * with the parameter: ContractStatus.WINNERS_FROZEN\n    */\n    modifier onlyBefore(ContractStatus status) {\n        // asserting here because there should be no state before PRE_AIRDROP\n        assert(status != ContractStatus.PRE_AIRDROP);\n        ContractStatus lastStatus = ContractStatus(uint(status) - 1);\n        if (contractStatus() >= status) revert IncorrectContractStatus(contractStatus(), lastStatus);\n        _;\n    }\n\n    /**\n    * @notice the current status must be equal to the status in the parameter\n    * @param status is the ContractStatus it must be in\n    */\n    modifier onlyDuring(ContractStatus status) {\n        if (status != contractStatus()) revert IncorrectContractStatus(contractStatus(), status);\n        _;\n    }\n\n\n    /**\n    * @notice the current status must be greater than or equal to the status in the parameter\n    * @param status that the contract must at least be in. For example:\n    * getting the nftTiers should only happen when TIERS_RANDOMIZED has already happened. so the parameter will be\n    * TIERS_RANDOMIZED, because the function can only work once the status is TIERS_RANDOMIZED or has passed that\n    */\n    modifier onlyOnOrAfter(ContractStatus status) {\n        if (contractStatus() < status) revert IncorrectContractStatus(contractStatus(), status);\n        _;\n    }\n}"
30     },
31     "contracts/interfaces/IAccessPassNFT.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.8.6;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"../TicketNFT.sol\";\nimport \"./IVerifiedSlot.sol\";\n\n/**\n* @title Required interface for an AccessPassNFT compliant contract\n* @author Oost & Voort, Inc\n*/\n\ninterface IAccessPassNFT is IERC165, IVerifiedSlot {\n    /**\n    * @dev The following are the stages of the contract in order:\n    * NO_MINTING: Minting is not yet allowed\n    * PRIVATE_MINTING: Only people in the mint whitelist can mint\n    * PUBLIC_MINTING: Everyone can mint\n    * END_MINTING: When everything's been minted already\n    * TIERS_RANDOMIZED: When a random number has been set for the tiers\n    * TIERS_REVEALED: When the final token metadata has been uploaded to IPFS\n    * TICKETS_RANDOMIZED: When a random number has been set for the tickets airdrop\n    */\n    enum ContractStatus {\n        NO_MINTING,\n        PRIVATE_MINTING,\n        PUBLIC_MINTING,\n        END_MINTING,\n        TIERS_RANDOMIZED,\n        TIERS_REVEALED,\n        TICKETS_RANDOMIZED\n    }\n\n    /**\n    * @dev Minting types are explained below:\n    * PRIVATE_MINT: minted using the private mint function\n    * PUBLIC_MINT: minted using the public mint function\n    */\n    enum MintingType {PRIVATE_MINT, PUBLIC_MINT}\n\n    /**\n    * @dev The on-chain property of the nft that is determined by a random number\n    */\n    enum Tier {BRONZE, SILVER, GOLD}\n\n    /**\n    * @dev emitted when the owner has set the private minting timestamp\n    * @param oldTimestamp is for what the timestamp used to be\n    * @param newTimestamp is the new value\n    */\n    event PrivateMintingTimestampSet(uint256 oldTimestamp, uint256 newTimestamp);\n\n\n    /**\n    * @dev emitted when the owner has set the public minting timestamp\n    * @param oldTimestamp is for what the timestamp used to be\n    * @param newTimestamp is the new value\n    */\n    event PublicMintingTimestampSet(uint256 oldTimestamp, uint256 newTimestamp);\n\n    /**\n    * @dev emitted when the owner has changed the max number of nfts a public user can mint\n    * @param oldMaxPublicMintable is the old value for the maximum a public account can mint\n    * @param newMaxPublicMintable is the new value for the maximum a public account can mint\n    */\n    event MaxPublicMintableSet(uint16 oldMaxPublicMintable, uint16 newMaxPublicMintable);\n\n\n    /**\n    * @dev emitted when the owner changes the treasury\n    * @param oldTreasury is the old value for the treasury\n    * @param newTreasury is the new value for the treasury\n    */\n    event TreasurySet(address oldTreasury, address newTreasury);\n\n    /**\n    * @dev emitted when the owner changes the minting price\n    * @param oldPrice is the price the minting was set as\n    * @param newPrice is the new price minting will cost as\n    */\n    event PriceSet(uint256 oldPrice, uint256 newPrice);\n\n    /**\n    * @dev emitted when the owner changes the royalties\n    * @param newRoyalties is the new royalties set by the owner\n    */\n    event RoyaltyFeesSet(uint96 newRoyalties);\n\n    /**\n    * @dev emitted when the owner has changed the contract uri\n    * @param oldURI is the uri it was set as before\n    * @param newURI is the uri it is now set in\n    */\n    event ContractURISet(string oldURI, string newURI);\n\n    /**\n    * @dev emitted when the owner has changed the unrevealed uri\n    * @param oldURI is the uri it was set as before\n    * @param newURI is the uri it is now set in\n    */\n    event UnrevealedURISet(string oldURI, string newURI);\n\n    /**\n    * @dev emitted when the TicketNFT has been set\n    * @param oldTicketNFT is the old TicketNFT it was pointing to\n    * @param newTicketNFT is the TicketNFT it is now pointing to\n    */\n    event TicketNFTSet(TicketNFT oldTicketNFT, TicketNFT newTicketNFT);\n\n    /**\n    * @dev emitted when the treasury has been paid in ETH\n    * @param account is the account that paid the treasury\n    * @param amount is how much ETH the account sent to the treasury\n    */\n    event TreasuryPaid(address indexed account, uint256 amount);\n\n    /**\n    * @dev the following events must be done in order\n    */\n\n    /**\n    * @dev emitted when the owner has requested a random word from VRF to set the tiers of each NFT\n    * @param requestId is the id set by VRF\n    */\n    event TiersRandomWordRequested(uint256 requestId);\n\n    /**\n    * @dev emitted when VRF has used fulfillRandomness to set the random number\n    * @param randomWord is the randomWord given back in a callback by VRF\n    */\n    event TiersRandomized(uint256 randomWord);\n\n    /**\n    * @dev emitted when the owner has put the final token metadata uri for the nfts\n    */\n    event TiersRevealed();\n\n    /**\n    * @dev emitted when the owner has requested a random word from VRF to set who will be airdropped TicketNFTs\n    * @param requestId is the id set by VRF\n    */\n    event TicketsRandomWordRequested(uint256 requestId);\n\n    /**\n    * @dev emitted when VRF has used fulfillRandomness to set the random number\n    * @param randomWord is the randomWord given back in a callback by VRF\n    */\n    event TicketsRandomized(uint256 randomWord);\n\n    /**\n    * @dev reverted with this error when the address being supplied is Zero Address\n    * @param addressName is for whom the Zero Address is being set for\n    */\n    error ZeroAddress(string addressName);\n\n    /**\n    * @dev reverted with this error when a view function is asking for a Zero Address' information\n    */\n    error ZeroAddressQuery();\n\n    /**\n    * @dev reverted with this error when a view function is being used to look for a nonExistent Token\n    */\n    error NonExistentToken();\n\n    /**\n    * @dev reverted with this error when a function is being called more than once\n    */\n    error CallingMoreThanOnce();\n\n    /**\n    * @dev reverted with this error when a function should no longer be called\n    */\n    error CanNoLongerCall();\n\n    /**\n    * @dev reverted with this error when a variable being supplied is valued 0\n    * @param variableName is the name of the variable being supplied with 0\n    */\n    error IsZero(string variableName);\n\n    /**\n    * @dev reverted with this error when a variable has an incorrect value\n    * @param variableName is the name of the variable with an incorrect value\n    */\n    error IncorrectValue(string variableName);\n\n    /**\n    * @dev reverted with this error when a string being supplied should not be empty\n    * @param stringName is the name of the string being supplied with an empty value\n    */\n    error EmptyString(string stringName);\n\n    /**\n    * @dev reverted with this error when a function being called should not be called with the current Contract Status\n    * @param currentStatus is the contract's current status\n    * @param requiredStatus is the status the current must be in for the function to not revert\n    */\n    error IncorrectContractStatus(ContractStatus currentStatus, ContractStatus requiredStatus);\n\n    /**\n    * @dev reverted with this error when an account that has won is trying to transfer his or her last AccessPassNFT\n    * during WINNERS_FROZEN in TicketNFT\n    * @param account is the address trying to transfer\n    * @param currentTimestamp is the current block's timestamp\n    * @param requiredTimestamp is the timestamp the block must at least be in\n    */\n    error TransferringFrozenAccount(address account, uint256 currentTimestamp, uint256 requiredTimestamp);\n\n    /********************** EXTERNAL ********************************/\n\n    /**\n    * @notice private mints for people in the whitelist\n    * @param verifiedSlot is a signed message by the whitelist signer that presents how many the minter can mint\n    */\n    function privateMint(VerifiedSlot calldata verifiedSlot) external payable;\n\n    /*\n    * @notice public mints for anyone\n    */\n    function publicMint() external payable;\n\n    /**\n    * @notice Randomize the NFT. This requests a random Chainlink value, which causes the tier of each nft id to be known.\n    * @dev See https://docs.chain.link/docs/vrf-contracts/#configurations for Chainlink VRF documentation\n    * @param subscriptionId The chainlink subscription id that pays for the call to Chainlink, needs to be setup with ChainLink beforehand\n    * @param gasLane The maximum gas price you are willing to pay for a Chainlink VRF request in wei\n    * @param callbackGasLimit How much gas to use for the callback request. Approximately 29_000 is used up solely by\n    * fulfillRandomWords\n    */\n    function randomizeTiers(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external;\n\n    /**\n    * @notice sets the base URI for the token metadata\n    * @dev This can only happen once after the generation of the token metadata in unison with the winners function.\n    * @param revealedURI must end in a '/' (slash), because the tokenURI expects it to end in a slash.\n    */\n    function revealTiers(string memory revealedURI) external;\n\n    /**\n    * @notice Randomize the tickets. This requests a random Chainlink value, which causes the winners to be known.\n    * @dev See https://docs.chain.link/docs/vrf-contracts/#configurations for Chainlink VRF documentation\n    * @param subscriptionId The chainlink subscription id that pays for the call to Chainlink, needs to be setup with ChainLink beforehand\n    * @param gasLane The maximum gas price you are willing to pay for a Chainlink VRF request in wei\n    * @param callbackGasLimit How much gas to use for the callback request. Approximately 31_000 gas is used up\n    * solely by fulfillRandomWords.\n    */\n    function randomizeTickets(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external;\n\n    /**\n    * @notice sets the whitelist signer\n    * @dev immediately do this after deploying the contract\n    * @param whiteListSigner_ is the signer address for verifying the minting slots\n    */\n    function setWhitelistSigner(address whiteListSigner_) external;\n\n    /**\n    * @notice sets the ticketNFT\n    * @dev set this before selecting the TicketWinners in TicketNFT\n    * @param ticketNFT_ is the TicketNFT that selects the ticketWinners\n    */\n    function setTicketNFT(TicketNFT ticketNFT_) external;\n\n    /**\n    * @notice sets the recipient of the eth from public and private minting and the royalty fees\n    * @dev setRoyaltyFee right after setting the treasury\n    * @param treasury_ could be an EOA or a gnosis contract that receives eth and royalty fees\n    */\n    function setTreasury(address payable treasury_) external;\n\n    /**\n    * @notice sets the royalty fee for the second hand market selling\n    * @param royaltyFee is the fees taken from second-hand selling. This is expressed in a _royaltyFee/10_000.\n    * So to do 5% means supplying 500 since 500/10_000 is 5% (see ERC2981 function _setDefaultRoyalty(address receiver, uint96 feeNumerator))\n    */\n    function setRoyaltyFee(uint96 royaltyFee) external;\n\n    /**\n    * @notice sets the price of minting. the amount is sent to the treasury right after the minting\n    * @param price_ is expressed in wei\n    */\n    function setPrice(uint256 price_) external;\n\n    /**\n    * @notice sets the contract uri\n    * @param contractURI_ points to a json file that follows OpenSeas standard (see https://docs.opensea.io/docs/contract-level-metadata)\n    */\n    function setContractURI(string memory contractURI_) external;\n\n    /**\n    * @notice sets the unrevealedURI\n    * @param unrevealedURI_ points to a json file with the placeholder image inside\n    */\n    function setUnrevealedURI(string memory unrevealedURI_) external;\n\n    /**\n    * @notice sets the private minting timestamp\n    * @param privateMintingTimestamp_ is when private minting is enabled. Setting this to zero disables all minting\n    */\n    function setPrivateMintingTimestamp(uint256 privateMintingTimestamp_) external;\n\n    /**\n    * @notice sets the public minting timestamp\n    * @param publicMintingTimestamp_ is when public minting will be enabled.\n    * Setting this to zero disables public minting.\n    * If set, public minting must happen after private minting\n    */\n    function setPublicMintingTimestamp(uint256 publicMintingTimestamp_) external;\n\n    /**\n    /* @notice sets how many a minter can public mint\n    /* @param maxPublicMintable_ is how many a public account can mint\n    */\n    function setMaxPublicMintable(uint16 maxPublicMintable_) external;\n\n    /********************** EXTERNAL VIEW ********************************/\n\n    /**\n    * @notice returns the count an account has minted\n    * @param minter is for the account being queried\n    */\n    function mintedBy(address minter) external view returns (uint256);\n\n    /**\n    * @notice returns the count an account has minted per type\n    * @param minter is for the account being queried\n    * @param mintingType is the type of minting expected\n    */\n    function mintedBy(address minter, MintingType mintingType) external view returns (uint256);\n\n    /**\n    * @notice Returns the tier for an nft id\n    * @param tokenId is the id of the token being queried\n    */\n    function nftTier(uint256 tokenId) external view returns (uint16 tier);\n\n    /**\n    * @notice Returns true if the ticketsRandomWord has been set in the VRF Callback\n    * @dev this is used by TicketNFT as a prerequisite for the airdrop. See TicketNFT for more info.\n    */\n    function ticketsRevealed() external view returns(bool);\n\n    /**\n    * @notice Returns an array of all NFT id's, with 500 winners, indicated by 1. The others are indicated by 0.\n    */\n    function winners() external view returns (uint16[] memory);\n\n    /**\n    * @notice returns the current supply of the NFT\n    */\n    function totalSupply() external view returns (uint256);\n\n    /**\n    * @notice returns the current contract status of the NFT\n    */\n    function contractStatus() external view returns (ContractStatus);\n\n    /**\n    * @notice Returns an array with all nft id's and their tier\n    * @dev This function works by filling a pool with random values. When we exhaust the pool,\n    * we refill the pool again with different values. We do it like this because we don't\n    * know in advance how many random values we need.\n    */\n    function nftTiers() external view returns (uint16[] memory);\n}\n"
33     },
34     "contracts/interfaces/ITicketNFT.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.8.6;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n* @title Required interface for a TicketNFT compliant contract\n* @author Oost & Voort, Inc\n*/\n\ninterface ITicketNFT is IERC165 {\n\n    /**\n    * @dev The following are the stages of the contract in order:\n    * PRE_AIRDROP: Before the airdrop has happened\n    * TICKETS_REVEALED: when accessPassNFT has already set who the TicketWinners will be\n    * AIRDROPPED_TICKETS: when the nfts have been airdropped\n    * SET_REGISTRATION: when the _hasNotRegistered have been filled up\n    * WINNERS_FROZEN: When the winners have been frozen from doing transfers\n    * TRADING_ENABLED: When all trading has been enabled again\n    */\n    enum ContractStatus {\n        PRE_AIRDROP,\n        TICKETS_REVEALED,\n        AIRDROPPED_TICKETS,\n        SET_REGISTRATION,\n        WINNERS_FROZEN,\n        TRADING_ENABLED\n    }\n\n    /**\n    * @dev emitted when the owner has changed the contract uri\n    * @param oldURI is the uri it was set as before\n    * @param newURI is the uri it is now set in\n    */\n    event ContractURISet(string oldURI, string newURI);\n\n    /**\n    * @dev emitted when the owner changes the royalties\n    * @param newRoyaltyAddress is the new royalty address that will receive the royalties.\n    * @param newRoyalties is the new royalties set by the owner\n    */\n    event RoyaltiesSet(address newRoyaltyAddress, uint96 newRoyalties);\n\n    /**\n    * @dev emitted when the frozenPeriod has been set\n    * @param oldTimestamp is the old timestamp for when the frozenPeriod was set\n    * @param newTimestamp is the timestamp for when the frozenPeriod will now correspond as\n    */\n    event FrozenPeriodSet(uint256 oldTimestamp, uint256 newTimestamp);\n\n    /**\n    * @dev the following events must be done in order\n    */\n\n    /**\n    * @dev emitted when the airdrop happens\n    * @param winners is the ids of winners from AccessPassNFT. See AccessPassNFT's winners function for more information.\n    */\n    event TicketsAirdropped(uint16[] winners);\n\n    /**\n    * @dev emitted when the registration has been set\n    * @param hasRegistered is an array boolean that represents if the onwer of that index has registered off-chain\n    */\n    event RegistrationSet(bool[] hasRegistered);\n\n    /**\n    * @dev emitted when a random number has been requested from VRF\n    * @param requestId is the id sent back by VRF to keep track of the request\n    */\n    event RandomWordRequested(uint256 requestId);\n\n    /**\n    * @dev emitted when a ticket winner has been selected\n    * @param randomWord is used to determine the TicketWinner\n    */\n    event TicketWinnersSelected(uint256 randomWord);\n\n    /**\n    * @dev emitted when the trading for winners have been frozen\n    * @param frozenTimestamp is until when trading for winning nfts have been frozen for\n    */\n    event TicketWinnersFrozen(uint256 frozenTimestamp);\n\n    /**\n    * @dev reverted with this error when the address being supplied is Zero Address\n    * @param addressName is for whom the Zero Address is being set for\n    */\n    error ZeroAddress(string addressName);\n\n    /**\n    * @dev reverted with this error when a view function is being used to look for a nonExistent Token\n    */\n    error NonExistentToken();\n\n    /**\n    * @dev reverted with this error when a function is being called more than once\n    */\n    error CallingMoreThanOnce();\n\n    /**\n    * @dev reverted with this error when a variable has an incorrect value\n    * @param variableName is the name of the variable with an incorrect value\n    */\n    error IncorrectValue(string variableName);\n\n    /**\n    * @dev reverted with this error when a string being supplied should not be empty\n    * @param stringName is the name of the string being supplied with an empty value\n    */\n    error EmptyString(string stringName);\n\n    /**\n    * @dev reverted with this error when a function being called should not be called with the current Contract Status\n    * @param currentStatus is the contract's current status\n    * @param requiredStatus is the status the current must be in for the function to not revert\n    */\n    error IncorrectContractStatus(ContractStatus currentStatus, ContractStatus requiredStatus);\n\n    /**\n    * @dev reverted with this error when transferring a winningId during frozenPeriod\n    * @param tokenId is the id being transferred\n    * @param currentTimestamp is the current block's timestamp\n    * @param requiredTimestamp is the timestamp the block must at least be in\n    */\n    error TransferringFrozenToken(uint256 tokenId, uint256 currentTimestamp, uint256 requiredTimestamp);\n\n    /**\n    * @notice airdrops to accessPassNFT winners\n    * @param winners are accessPassNFT winners taken off-chain\n    */\n    function airdrop(\n        uint16[] calldata winners\n    ) external;\n\n    /**\n    * @notice requests a random word from VRF to be used for selecting a ticket winner\n    * @dev See https://docs.chain.link/docs/vrf-contracts/#configurations for Chainlink VRF documentation\n    * @param subscriptionId The chainlink subscription id that pays for the call to Chainlink, needs to be setup with ChainLink beforehand\n    * @param gasLane The maximum gas price you are willing to pay for a Chainlink VRF request in wei\n    * @param callbackGasLimit How much gas to use for the callback request. Approximately 139_000 gas is used up solely\n    * by fulfillRandomWords.\n    */\n    function requestRandomWord(\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) external;\n\n    /**\n    * @notice sets the contract uri\n    * @param uri points to a json file that follows OpenSeas standard (see https://docs.opensea.io/docs/contract-level-metadata)\n    */\n    function setContractURI(string memory uri) external;\n\n    /**\n    * @notice sets the royalty fee for the second hand market selling\n    * @param royaltyAddress is the recepient of royalty fees from second hand market.\n    * @param royaltyFee is the fees taken from second-hand selling. This is expressed in a _royaltyFee/1000.\n    * So to do 5% means supplying 50 since 50/1000 is 5% (see ERC2981 function _setDefaultRoyalty(address receiver, uint96 feeNumerator))\n    */\n    function setDefaultRoyalty(address royaltyAddress, uint96 royaltyFee) external;\n\n    /**\n    * @notice sets the ids of the people who have not registered\n    * @dev It is important to do this before requesting a random word. To make it cheaper gas-wise, sending an empty\n    * array signifies that all token owners registered off-chain. An explanation of what the array of hasRegistered looks\n    * like will follow:\n    * if the owner of token id 0 has registered in the array it will show as true,\n    * so [true, ...]\n    * if the owner of token id 1 has not registered in the array it will show as false\n    * so [true, false, ...]\n    * and so on..\n    * @param hasRegistered_ is an array of boolean that tells if the owner of the id has registered off-chain\n    */\n    function setRegistered(bool[] calldata hasRegistered_) external;\n\n    /**\n    * @notice sets the frozenPeriod for when trading winning token ids is disabled\n    * @param frozenPeriod_ is a timestamp for when the ticket winners can start trading again\n    */\n    function setFrozenPeriod(uint256 frozenPeriod_) external;\n\n\n    /**\n    * @notice returns if the token id has registered or not\n    * @param tokenId is the id of the token being queried\n    */\n    function hasRegistered(\n        uint16 tokenId\n    ) external view returns (bool);\n\n    /**\n    * @notice Returns if the address owns a winning nft\n    * @param account is the queried address\n    */\n    function isAccountWinner(address account) external view returns (bool);\n\n    /**\n    * @notice returns the current contract status of the NFT\n    */\n    function contractStatus() external view returns (ContractStatus);\n\n    /**\n    * @notice returns the current supply of the NFT\n    */\n    function totalSupply() external view returns (uint256);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
42     },
43     "contracts/interfaces/IVerifiedSlot.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVerifiedSlot {\n    struct VerifiedSlot {\n        address minter;\n        uint16 mintingCapacity;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
48     },
49     "@openzeppelin/contracts/token/common/ERC2981.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
57     },
58     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
60     },
61     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
63     },
64     "@openzeppelin/contracts/utils/Address.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
66     },
67     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
69     },
70     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
72     }
73   },
74   "settings": {
75     "optimizer": {
76       "enabled": true,
77       "runs": 1000
78     },
79     "outputSelection": {
80       "*": {
81         "*": [
82           "evm.bytecode",
83           "evm.deployedBytecode",
84           "devdoc",
85           "userdoc",
86           "metadata",
87           "abi"
88         ]
89       }
90     },
91     "libraries": {}
92   }
93 }}