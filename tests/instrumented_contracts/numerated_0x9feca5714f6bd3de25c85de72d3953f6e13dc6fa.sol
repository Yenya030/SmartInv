1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/KompeteMarketplace.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\nimport \"./exchange/ExchangeCore.sol\";\r\n\r\ncontract KompeteMarketplace is ExchangeCore, Ownable, Pausable {\r\n    string public constant NAME = \"Kompete Marketplace\";\r\n    string public constant VERSION = \"1.0\";\r\n    string public constant CODENAME = \"Late rabbit\";\r\n\r\n    event ProtocolFeeRecipientChanged(address indexed recipient);\r\n    event MintFeeRecipientChanged(address indexed collection, address indexed recipient);\r\n\r\n    event CollectionAdded(address indexed collection);\r\n    event CollectionRemoved(address indexed collection);\r\n\r\n    constructor(IERC20 tokenAddress, address protocolFeeAddress) EIP712(NAME, VERSION) {\r\n        exchangeToken = tokenAddress;\r\n        protocolFeeRecipient = protocolFeeAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the protocol fee recipient (admins only)\r\n     * @param recipient New protocol fee recipient address\r\n     */\r\n    function setProtocolFeeRecipient(address recipient) external onlyOwner {\r\n        protocolFeeRecipient = recipient;\r\n        emit ProtocolFeeRecipientChanged(recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the mint fee recipient for a collection (admins only)\r\n     * @param recipient New protocol fee recipient address (set collection address(0) for default value)\r\n     */\r\n    function setMintFeeRecipient(address collection, address recipient) external onlyOwner {\r\n        mintFeeRecipient[collection] = recipient;\r\n        emit MintFeeRecipientChanged(collection, recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow/Disallow a collection to be traded in the marketplace (admins only)\r\n     */\r\n    function toggleCollection(address collection, bool allowed) external onlyOwner {\r\n        if (collection == address(0)) revert InvalidCollection();\r\n\r\n        if (allowedCollections[collection] != allowed) {\r\n            allowedCollections[collection] = allowed;\r\n            if (allowed) emit CollectionAdded(collection);\r\n            else emit CollectionRemoved(collection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Call hashOrder\r\n     */\r\n    function hashOrder_(Order memory order) public view returns (bytes32) {\r\n        return hashOrder(order, nonces[order.maker]);\r\n    }\r\n\r\n    /**\r\n     * @dev Call hashToSign\r\n     */\r\n    function hashToSign_(Order memory order) public view returns (bytes32) {\r\n        return hashToSign(order, nonces[order.maker]);\r\n    }\r\n\r\n    /**\r\n     * @dev Call validateOrderParameters\r\n     */\r\n    function validateOrderParameters_(Order memory order) public view returns (bool) {\r\n        return validateOrderParameters(order);\r\n    }\r\n\r\n    /**\r\n     * @dev Call validateOrder\r\n     */\r\n    function validateOrder_(Order memory order, bytes memory signature) public view returns (bool) {\r\n        return validateOrder(hashToSign(order, nonces[order.maker]), order, signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Call approveOrder\r\n     */\r\n    function approveOrder_(Order memory order, bool orderbookInclusionDesired) external whenNotPaused {\r\n        return approveOrder(order, orderbookInclusionDesired);\r\n    }\r\n\r\n    /**\r\n     * @dev Call cancelOrder\r\n     */\r\n    function cancelOrder_(Order memory order, bytes memory signature) external whenNotPaused {\r\n        return cancelOrder(order, signature, nonces[order.maker]);\r\n    }\r\n\r\n    /**\r\n     * @dev Call cancelOrder, supplying a specific nonce â€” enables cancelling orders\r\n     that were signed with nonces greater than the current nonce.\r\n     */\r\n    function cancelOrderWithNonce_(\r\n        Order memory order,\r\n        bytes memory signature,\r\n        uint256 nonce\r\n    ) external {\r\n        return cancelOrder(order, signature, nonce);\r\n    }\r\n\r\n    /**\r\n     * @dev Call ordersCanMatch\r\n     */\r\n    function ordersCanMatch_(Order memory buy, Order memory sell) public view returns (bool) {\r\n        return ordersCanMatch(buy, sell);\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically match two orders\r\n     * @param buy Buy-side order\r\n     * @param buySig Buy-side order signature\r\n     * @param sell Sell-side order\r\n     * @param sellSig Sell-side order signature\r\n     */\r\n    function atomicMatch_(\r\n        Order memory buy,\r\n        bytes memory buySig,\r\n        Order memory sell,\r\n        bytes memory sellSig,\r\n        bytes32 metadata\r\n    ) external payable whenNotPaused {\r\n        atomicMatch(buy, buySig, sell, sellSig, metadata);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the marketplace\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses the marketplace\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/security/Pausable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n Ã· 2 + 1, and for v in (302): v âˆˆ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
24     },
25     "contracts/exchange/ExchangeCore.sol": {
26       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./interfaces/IFactory.sol\";\r\n\r\nabstract contract ExchangeCore is ReentrancyGuard, EIP712 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error InvalidOrder();\r\n    error InvalidTarget();\r\n    error InvalidOrderParameters();\r\n    error NonMatchableOrders();\r\n    error NotAuthorized();\r\n    error InvalidCollection();\r\n    error InvalidSender();\r\n    error AlreadyApproved();\r\n\r\n    bytes32 private immutable _ORDER_TYPEHASH;\r\n\r\n    /* Inverse basis point. */\r\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\r\n\r\n    /* The token used to pay exchange fees. */\r\n    IERC20 public exchangeToken;\r\n\r\n    /* Cancelled / finalized orders, by hash. */\r\n    mapping(bytes32 => bool) public cancelledOrFinalized;\r\n\r\n    /* Orders verified by on-chain approval (alternative to ECDSA signatures so that smart contracts can place orders directly). */\r\n    /* Note that the maker's nonce at the time of approval **plus one** is stored in the mapping. */\r\n    mapping(bytes32 => uint256) private _approvedOrdersByNonce;\r\n\r\n    /* Track per-maker nonces that can be incremented by the maker to cancel orders in bulk. */\r\n    // The current nonce for the maker represents the only valid nonce that can be signed by the maker\r\n    // If a signature was signed with a nonce that's different from the one stored in nonces, it\r\n    // will fail validation.\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /* List of allowed collections */\r\n    mapping(address => bool) public allowedCollections;\r\n\r\n    /* Recipient of protocol fees. */\r\n    address public protocolFeeRecipient;\r\n    /* Recipient of mint fees. */\r\n    mapping(address => address) internal mintFeeRecipient;\r\n\r\n    enum OrderSide {\r\n        Buy,\r\n        Sell\r\n    }\r\n\r\n    enum CollectionType {\r\n        ERC721,\r\n        ERC1155\r\n    }\r\n\r\n    /* An order on the exchange. */\r\n    struct Order {\r\n        /* Order maker address. */\r\n        address maker;\r\n        /* Order taker address, if specified. */\r\n        address taker;\r\n        /* Maker protocol fee of the order, unused for taker order. */\r\n        uint256 makerProtocolFee;\r\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\r\n        uint256 takerProtocolFee;\r\n        /* Order fee recipient or zero address for taker order. */\r\n        address feeRecipient;\r\n        /* Side (buy/sell). */\r\n        OrderSide side;\r\n        /* Target collection type. */\r\n        CollectionType collectionType;\r\n        /* Factory for mint. */\r\n        address mintFactory;\r\n        /* Target collection. */\r\n        address collection;\r\n        /* TokenIds to transfer. */\r\n        uint256[] tokenIds;\r\n        /* Amount of tokenIds to transfer (ERC1155). */\r\n        uint256[] amounts;\r\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\r\n        address paymentToken;\r\n        /* Base price of the order (in paymentTokens). */\r\n        uint256 basePrice;\r\n        /* Extra parameter - reserved */\r\n        uint256 extra;\r\n        /* Listing timestamp. */\r\n        uint256 listingTime;\r\n        /* Expiration timestamp - 0 for no expiry. */\r\n        uint256 expirationTime;\r\n        /* Order salt, used to prevent duplicate hashes. */\r\n        uint256 salt;\r\n        /* NOTE: uint nonce is an additional component of the order but is read from storage */\r\n    }\r\n\r\n    event OrderApproved(bytes32 indexed hash, Order order, bool orderbookInclusionDesired);\r\n\r\n    event OrderCancelled(bytes32 indexed hash);\r\n    event OrdersMatched(\r\n        bytes32 buyHash,\r\n        bytes32 sellHash,\r\n        address indexed maker,\r\n        address indexed taker,\r\n        uint256 price,\r\n        bytes32 indexed metadata\r\n    );\r\n    event NonceIncremented(address indexed maker, uint256 newNonce);\r\n\r\n    constructor() {\r\n        bytes32 typeHash = keccak256(\r\n            \"Order(address maker,address taker,uint256 makerProtocolFee,uint256 takerProtocolFee,address feeRecipient,uint8 side,uint8 collectionType,address mintFactory,address collection,uint256[] tokenIds,uint256[] amounts,address paymentToken,uint256 basePrice,uint256 extra,uint256 listingTime,uint256 expirationTime,uint256 salt,uint256 nonce)\"\r\n        );\r\n        _ORDER_TYPEHASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * Increment a particular maker's nonce, thereby invalidating all orders that were not signed\r\n     * with the original nonce.\r\n     */\r\n    function incrementNonce() external {\r\n        uint256 newNonce = ++nonces[msg.sender];\r\n        emit NonceIncremented(msg.sender, newNonce);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens\r\n     * @param token Token to transfer\r\n     * @param from Address to charge fees\r\n     * @param to Address to receive fees\r\n     * @param amount Amount of protocol tokens to charge\r\n     */\r\n    function transferTokens(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            IERC20(token).safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the canonical EIP-712 order hash without the domain separator\r\n     * @param order Order to hash\r\n     * @param nonce maker nonce to hash\r\n     * @return hash Hash of order\r\n     */\r\n    function hashOrder(Order memory order, uint256 nonce) internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                bytes.concat(\r\n                    abi.encode(_ORDER_TYPEHASH),\r\n                    abi.encode(\r\n                        order.maker,\r\n                        order.taker,\r\n                        order.makerProtocolFee,\r\n                        order.takerProtocolFee,\r\n                        order.feeRecipient,\r\n                        order.side\r\n                    ),\r\n                    abi.encode(order.collectionType, order.mintFactory, order.collection),\r\n                    keccak256(abi.encodePacked(order.tokenIds)),\r\n                    keccak256(abi.encodePacked(order.amounts)),\r\n                    abi.encode(\r\n                        order.paymentToken,\r\n                        order.basePrice,\r\n                        order.extra,\r\n                        order.listingTime,\r\n                        order.expirationTime,\r\n                        order.salt\r\n                    ),\r\n                    abi.encode(nonce)\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign via EIP-712 including the message prefix\r\n     * @param order Order to hash\r\n     * @param nonce Nonce to hash\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function hashToSign(Order memory order, uint256 nonce) internal view returns (bytes32) {\r\n        return _hashTypedDataV4(hashOrder(order, nonce));\r\n    }\r\n\r\n    /**\r\n     * @dev Assert an order is valid and return its hash\r\n     * @param order Order to validate\r\n     * @param nonce Nonce to validate\r\n     * @param signature ECDSA signature\r\n     */\r\n    function requireValidOrder(\r\n        Order memory order,\r\n        bytes memory signature,\r\n        uint256 nonce\r\n    ) internal view returns (bytes32) {\r\n        bytes32 hash = hashToSign(order, nonce);\r\n        if (!validateOrder(hash, order, signature)) revert InvalidOrder();\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * @dev Validate order parameters (does *not* check signature validity)\r\n     * @param order Order to validate\r\n     */\r\n    function validateOrderParameters(Order memory order) internal view returns (bool) {\r\n        /* Order must have a maker. */\r\n        if (order.maker == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (order.tokenIds.length == 0 || order.tokenIds.length != order.amounts.length) {\r\n            return false;\r\n        }\r\n\r\n        if (order.mintFactory != address(0) && !allowedCollections[order.mintFactory]) {\r\n            return false;\r\n        }\r\n\r\n        if (order.collection == address(0) || !allowedCollections[order.collection]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Validate a provided previously approved / signed order, hash, and signature.\r\n     * @param hash Order hash (already calculated, passed to avoid recalculation)\r\n     * @param order Order to validate\r\n     * @param signature ECDSA signature\r\n     */\r\n    function validateOrder(\r\n        bytes32 hash,\r\n        Order memory order,\r\n        bytes memory signature\r\n    ) internal view returns (bool) {\r\n        /* Not done in an if-conditional to prevent unnecessary ecrecover evaluation, which seems to happen even though it should short-circuit. */\r\n\r\n        /* Order must have valid parameters. */\r\n        if (!validateOrderParameters(order)) {\r\n            return false;\r\n        }\r\n\r\n        /* Order must have not been canceled or already filled. */\r\n        if (cancelledOrFinalized[hash]) {\r\n            return false;\r\n        }\r\n\r\n        /* Return true if order has been previously approved with the current nonce */\r\n        uint256 approvedOrderNoncePlusOne = _approvedOrdersByNonce[hash];\r\n        if (approvedOrderNoncePlusOne != 0) {\r\n            return approvedOrderNoncePlusOne == nonces[order.maker] + 1;\r\n        }\r\n        /* validate signature. */\r\n        return SignatureChecker.isValidSignatureNow(order.maker, hash, signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Return whether or not an order can be settled\r\n     * @dev Precondition: parameters have passed validateParameters\r\n     * @param listingTime Order listing time\r\n     * @param expirationTime Order expiration time\r\n     */\r\n    function canSettleOrder(uint256 listingTime, uint256 expirationTime) internal view returns (bool) {\r\n        return (listingTime < block.timestamp) && (expirationTime == 0 || block.timestamp < expirationTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Determine if an order has been approved. Note that the order may not still\r\n     * be valid in cases where the maker's nonce has been incremented.\r\n     * @param hash Hash of the order\r\n     * @return approved whether or not the order was approved.\r\n     */\r\n    function approvedOrders(bytes32 hash) public view returns (bool approved) {\r\n        return _approvedOrdersByNonce[hash] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an order and optionally mark it for orderbook inclusion. Must be called by the maker of the order\r\n     * @param order Order to approve\r\n     * @param orderbookInclusionDesired Whether orderbook providers should include the order in their orderbooks\r\n     */\r\n    function approveOrder(Order memory order, bool orderbookInclusionDesired) internal {\r\n        /* CHECKS */\r\n\r\n        /* Assert sender is authorized to approve order. */\r\n        if (msg.sender != order.maker) revert InvalidSender();\r\n\r\n        /* Calculate order hash. */\r\n        bytes32 hash = hashToSign(order, nonces[order.maker]);\r\n\r\n        /* Assert order has not already been approved. */\r\n        if (_approvedOrdersByNonce[hash] != 0) revert AlreadyApproved();\r\n\r\n        /* EFFECTS */\r\n\r\n        /* Mark order as approved. */\r\n        _approvedOrdersByNonce[hash] = nonces[order.maker] + 1;\r\n\r\n        emit OrderApproved(hash, order, orderbookInclusionDesired);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an order, preventing it from being matched. Must be called by the maker of the order\r\n     * @param order Order to cancel\r\n     * @param nonce Nonce to cancel\r\n     * @param signature ECDSA signature\r\n     */\r\n    function cancelOrder(\r\n        Order memory order,\r\n        bytes memory signature,\r\n        uint256 nonce\r\n    ) internal {\r\n        /* CHECKS */\r\n\r\n        /* Calculate order hash. */\r\n        bytes32 hash = requireValidOrder(order, signature, nonce);\r\n\r\n        /* Assert sender is authorized to cancel order. */\r\n        if (msg.sender != order.maker) revert NotAuthorized();\r\n\r\n        /* EFFECTS */\r\n\r\n        /* Mark order as cancelled, preventing it from being matched. */\r\n        cancelledOrFinalized[hash] = true;\r\n\r\n        /* Log cancel event. */\r\n        emit OrderCancelled(hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the price two orders would match at, if in fact they would match (otherwise fail)\r\n     * @param buy Buy-side order\r\n     * @param sell Sell-side order\r\n     * @return Match price\r\n     */\r\n    function calculateMatchPrice(Order memory buy, Order memory sell) internal pure returns (uint256) {\r\n        /* Calculate sell price. */\r\n        uint256 sellPrice = sell.basePrice;\r\n\r\n        /* Calculate buy price. */\r\n        uint256 buyPrice = buy.basePrice;\r\n\r\n        /* Require price cross. */\r\n        require(buyPrice >= sellPrice);\r\n\r\n        /* Maker/taker priority. */\r\n        return sell.feeRecipient != address(0) ? sellPrice : buyPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute all ERC20 token / Ether transfers associated with an order match (fees and buyer => seller transfer)\r\n     * @param buy Buy-side order\r\n     * @param sell Sell-side order\r\n     */\r\n    function executeFundsTransfer(Order memory buy, Order memory sell) internal returns (uint256) {\r\n        /* Only payable in the special case of unwrapped Ether. */\r\n        if (sell.paymentToken != address(0)) {\r\n            require(msg.value == 0);\r\n        }\r\n\r\n        /* Calculate match price. */\r\n        uint256 price = calculateMatchPrice(buy, sell);\r\n\r\n        address paymentRecipient = sell.mintFactory != address(0) ? getMintRecipient(sell.collection) : sell.maker;\r\n\r\n        /* If paying using a token (not Ether), transfer tokens. This is done prior to fee payments to that a seller will have tokens before being charged fees. */\r\n        if (price > 0 && sell.paymentToken != address(0)) {\r\n            transferTokens(sell.paymentToken, buy.maker, paymentRecipient, price);\r\n        }\r\n\r\n        /* Amount that will be received by seller (for Ether). */\r\n        uint256 receiveAmount = price;\r\n\r\n        /* Amount that must be sent by buyer (for Ether). */\r\n        uint256 requiredAmount = price;\r\n\r\n        uint256 makerProtocolFee;\r\n        uint256 takerProtocolFee;\r\n\r\n        /* Determine maker/taker and charge fees accordingly. */\r\n        if (sell.feeRecipient != address(0)) {\r\n            /* Sell-side order is maker. */\r\n\r\n            /* Assert taker fee is less than or equal to maximum fee specified by buyer. */\r\n            require(sell.takerProtocolFee <= buy.takerProtocolFee);\r\n\r\n            /* Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker. */\r\n\r\n            if (sell.makerProtocolFee > 0) {\r\n                makerProtocolFee = SafeMath.div(SafeMath.mul(sell.makerProtocolFee, price), INVERSE_BASIS_POINT);\r\n                if (sell.paymentToken == address(0)) {\r\n                    receiveAmount = SafeMath.sub(receiveAmount, makerProtocolFee);\r\n                    payable(protocolFeeRecipient).transfer(makerProtocolFee);\r\n                } else {\r\n                    transferTokens(sell.paymentToken, sell.maker, protocolFeeRecipient, makerProtocolFee);\r\n                }\r\n            }\r\n\r\n            if (sell.takerProtocolFee > 0) {\r\n                takerProtocolFee = SafeMath.div(SafeMath.mul(sell.takerProtocolFee, price), INVERSE_BASIS_POINT);\r\n                if (sell.paymentToken == address(0)) {\r\n                    requiredAmount = SafeMath.add(requiredAmount, takerProtocolFee);\r\n                    payable(protocolFeeRecipient).transfer(takerProtocolFee);\r\n                } else {\r\n                    transferTokens(sell.paymentToken, buy.maker, protocolFeeRecipient, takerProtocolFee);\r\n                }\r\n            }\r\n        } else {\r\n            /* Buy-side order is maker. */\r\n\r\n            /* The Exchange does not escrow Ether, so direct Ether can only be used to with sell-side maker / buy-side taker orders. */\r\n            require(sell.paymentToken != address(0));\r\n\r\n            /* Assert taker fee is less than or equal to maximum fee specified by seller. */\r\n            require(buy.takerProtocolFee <= sell.takerProtocolFee);\r\n\r\n            if (buy.makerProtocolFee > 0) {\r\n                makerProtocolFee = SafeMath.div(SafeMath.mul(buy.makerProtocolFee, price), INVERSE_BASIS_POINT);\r\n                transferTokens(sell.paymentToken, buy.maker, protocolFeeRecipient, makerProtocolFee);\r\n            }\r\n\r\n            if (buy.takerProtocolFee > 0) {\r\n                takerProtocolFee = SafeMath.div(SafeMath.mul(buy.takerProtocolFee, price), INVERSE_BASIS_POINT);\r\n                transferTokens(sell.paymentToken, sell.maker, protocolFeeRecipient, takerProtocolFee);\r\n            }\r\n        }\r\n\r\n        if (sell.paymentToken == address(0)) {\r\n            /* Special-case Ether, order must be matched by buyer. */\r\n            require(msg.value >= requiredAmount);\r\n            payable(paymentRecipient).transfer(receiveAmount);\r\n            /* Allow overshoot for variable-price auctions, refund difference. */\r\n            uint256 diff = SafeMath.sub(msg.value, requiredAmount);\r\n            if (diff > 0) {\r\n                payable(buy.maker).transfer(diff);\r\n            }\r\n        }\r\n\r\n        /* This contract should never hold Ether, however, we cannot assert this, since it is impossible to prevent anyone from sending Ether e.g. with selfdestruct. */\r\n\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute all ERC721/ERC1155 token transfers associated with an order match\r\n     * @param buy Buy-side order\r\n     * @param sell Sell-side order\r\n     */\r\n    function executeTokensTransfer(Order memory buy, Order memory sell) internal {\r\n        if (sell.collectionType == CollectionType.ERC721) {\r\n            if (sell.mintFactory != address(0)) {\r\n                if (sell.tokenIds.length == 1) {\r\n                    IERC721Factory(sell.mintFactory).mint(buy.maker, sell.tokenIds[0], \"\");\r\n                } else {\r\n                    IERC721Factory(sell.mintFactory).mintBatch(buy.maker, sell.tokenIds, \"\");\r\n                }\r\n            } else {\r\n                for (uint256 i = 0; i < sell.tokenIds.length; i++) {\r\n                    require(sell.amounts[i] == 1, \"Invalid amount\");\r\n                    IERC721(sell.collection).safeTransferFrom(sell.maker, buy.maker, sell.tokenIds[i], \"\");\r\n                }\r\n            }\r\n        } else if (sell.collectionType == CollectionType.ERC1155) {\r\n            if (sell.mintFactory != address(0)) {\r\n                if (sell.tokenIds.length == 1) {\r\n                    IERC1155Factory(sell.mintFactory).mint(buy.maker, sell.tokenIds[0], sell.amounts[0], \"\");\r\n                } else {\r\n                    IERC1155Factory(sell.mintFactory).mintBatch(buy.maker, sell.tokenIds, sell.amounts, \"\");\r\n                }\r\n            } else {\r\n                if (sell.tokenIds.length == 1) {\r\n                    IERC1155(sell.collection).safeTransferFrom(\r\n                        sell.maker,\r\n                        buy.maker,\r\n                        sell.tokenIds[0],\r\n                        sell.amounts[0],\r\n                        \"\"\r\n                    );\r\n                } else {\r\n                    IERC1155(sell.collection).safeBatchTransferFrom(\r\n                        sell.maker,\r\n                        buy.maker,\r\n                        sell.tokenIds,\r\n                        sell.amounts,\r\n                        \"\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function uintArrayMatch(uint256[] memory a, uint256[] memory b) internal pure returns (bool) {\r\n        if (a.length != b.length) return false;\r\n        for (uint256 i = 0; i < a.length; i++) {\r\n            if (a[i] != b[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Return whether or not two orders can be matched with each other by basic parameters (does not check order signatures / calldata or perform static calls)\r\n     * @param buy Buy-side order\r\n     * @param sell Sell-side order\r\n     * @return Whether or not the two orders can be matched\r\n     */\r\n    function ordersCanMatch(Order memory buy, Order memory sell) internal view returns (bool) {\r\n        return (/* Must be opposite-side. */\r\n        (buy.side == OrderSide.Buy && sell.side == OrderSide.Sell) &&\r\n            /* Must match tokens. */\r\n            (buy.tokenIds.length > 0 && uintArrayMatch(buy.tokenIds, sell.tokenIds)) &&\r\n            /* Must match amounts. */\r\n            (sell.amounts.length == 0 || uintArrayMatch(buy.amounts, sell.amounts)) &&\r\n            /* Must use same payment token. */\r\n            (buy.paymentToken == sell.paymentToken) &&\r\n            /* Must match maker/taker addresses. */\r\n            (sell.taker == address(0) || sell.taker == buy.maker) &&\r\n            (buy.taker == address(0) || buy.taker == sell.maker) &&\r\n            /* One must be maker and the other must be taker (no bool XOR in Solidity). */\r\n            ((sell.feeRecipient == address(0) && buy.feeRecipient != address(0)) ||\r\n                (sell.feeRecipient != address(0) && buy.feeRecipient == address(0))) &&\r\n            /* Must match mint factory. */\r\n            (buy.mintFactory == sell.mintFactory) &&\r\n            /* Must match target. */\r\n            (buy.collection == sell.collection) &&\r\n            /* Buy-side order must be settleable. */\r\n            canSettleOrder(buy.listingTime, buy.expirationTime) &&\r\n            /* Sell-side order must be settleable. */\r\n            canSettleOrder(sell.listingTime, sell.expirationTime));\r\n    }\r\n\r\n    function canMint(\r\n        address minter,\r\n        address factory,\r\n        address collection\r\n    ) internal view returns (bool) {\r\n        bool allowed = IFactory(factory).canMint(collection, minter);\r\n        return allowed;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\r\n     * @param buy Buy-side order\r\n     * @param buySig Buy-side order signature\r\n     * @param sell Sell-side order\r\n     * @param sellSig Sell-side order signature\r\n     */\r\n    function atomicMatch(\r\n        Order memory buy,\r\n        bytes memory buySig,\r\n        Order memory sell,\r\n        bytes memory sellSig,\r\n        bytes32 metadata\r\n    ) internal nonReentrant {\r\n        /* CHECKS */\r\n\r\n        /* Ensure buy order validity and calculate hash if necessary. */\r\n        bytes32 buyHash;\r\n        if (buy.maker == msg.sender) {\r\n            if (!validateOrderParameters(buy)) revert InvalidOrderParameters();\r\n        } else {\r\n            buyHash = _requireValidOrderWithNonce(buy, buySig);\r\n        }\r\n\r\n        /* Ensure sell order validity and calculate hash if necessary. */\r\n        bytes32 sellHash;\r\n        if (sell.maker == msg.sender) {\r\n            if (!validateOrderParameters(sell)) revert InvalidOrderParameters();\r\n        } else {\r\n            sellHash = _requireValidOrderWithNonce(sell, sellSig);\r\n        }\r\n\r\n        /* Must be matchable. */\r\n        if (!ordersCanMatch(buy, sell)) revert NonMatchableOrders();\r\n\r\n        address target = sell.mintFactory;\r\n        if (target != address(0)) {\r\n            /* Minter must be allowed */\r\n            if (!canMint(sell.maker, sell.mintFactory, sell.collection)) revert NotAuthorized();\r\n        } else {\r\n            target = sell.collection;\r\n        }\r\n\r\n        /* Target must exist (prevent malicious selfdestructs just prior to order settlement). */\r\n        if (!Address.isContract(target)) revert InvalidTarget();\r\n\r\n        /* EFFECTS */\r\n\r\n        /* Mark previously signed or approved orders as finalized. */\r\n        if (msg.sender != buy.maker) {\r\n            cancelledOrFinalized[buyHash] = true;\r\n        }\r\n        if (msg.sender != sell.maker) {\r\n            cancelledOrFinalized[sellHash] = true;\r\n        }\r\n\r\n        /* INTERACTIONS */\r\n\r\n        /* Execute funds transfer and pay fees. */\r\n        uint256 price = executeFundsTransfer(buy, sell);\r\n\r\n        /* Execute tokens transfers. */\r\n        executeTokensTransfer(buy, sell);\r\n\r\n        /* Log match event. */\r\n        emit OrdersMatched(\r\n            buyHash,\r\n            sellHash,\r\n            sell.feeRecipient != address(0) ? sell.maker : buy.maker,\r\n            sell.feeRecipient != address(0) ? buy.maker : sell.maker,\r\n            price,\r\n            metadata\r\n        );\r\n    }\r\n\r\n    function _requireValidOrderWithNonce(Order memory order, bytes memory signature) internal view returns (bytes32) {\r\n        return requireValidOrder(order, signature, nonces[order.maker]);\r\n    }\r\n\r\n    function getMintRecipient(address collection) public view returns (address) {\r\n        address recipient = mintFeeRecipient[collection];\r\n        if (recipient != address(0)) return recipient;\r\n\r\n        recipient = mintFeeRecipient[address(0)];\r\n        if (recipient != address(0)) return recipient;\r\n\r\n        return protocolFeeRecipient;\r\n    }\r\n}\r\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Address.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Strings.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
39     },
40     "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
42     },
43     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
51     },
52     "contracts/exchange/interfaces/IFactory.sol": {
53       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFactory {\r\n    function canMint(address collection, address account) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Factory {\r\n    function mint(\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\ninterface IERC1155Factory {\r\n    function mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n"
54     },
55     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
57     },
58     "@openzeppelin/contracts/interfaces/IERC1271.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
60     }
61   },
62   "settings": {
63     "optimizer": {
64       "enabled": true,
65       "runs": 200
66     },
67     "outputSelection": {
68       "*": {
69         "*": [
70           "evm.bytecode",
71           "evm.deployedBytecode",
72           "devdoc",
73           "userdoc",
74           "metadata",
75           "abi"
76         ]
77       }
78     },
79     "metadata": {
80       "useLiteralContent": true
81     },
82     "libraries": {}
83   }
84 }}