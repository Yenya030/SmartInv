1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/BubblesAirdrop.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n/// @title Interface to interact with Bubbles contract.\r\ninterface IBubbles {\r\n    function mint(address recipient, uint256 amount) external;\r\n}\r\n\r\n/// @author The Axolittles Team\r\n/// @title Contract for claiming Bubbles airdrops\r\ncontract BubblesAirdrop is Ownable {\r\n    address public TOKEN;\r\n    bytes32 public merkleRoot;\r\n    uint256 public version;\r\n\r\n    struct recipient {\r\n        address user;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => bool)) internal claimed;\r\n\r\n    constructor(address _tokenAddress) {\r\n        TOKEN = _tokenAddress;\r\n    }\r\n\r\n    event ClaimAirdrop(\r\n        address indexed owner,\r\n        uint256 rewardAmount,\r\n        uint256 version\r\n    );\r\n    event SendAirdrop(address indexed owner, uint256 rewardAmount);\r\n\r\n    /**\r\n    todo: claim migration rewards function\r\n    pass in data via merkle root in format of addreess/$BUBBLE owed\r\n    keep mapping(address => bool) rewardsTracker to track who has claimed already\r\n  */\r\n    function claimAirdrop(uint256 _amount, bytes32[] calldata merkleProof)\r\n        external\r\n    {\r\n        require(!claimed[version][msg.sender], \"Already claimed!\");\r\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, _amount)); //check both address and amount\r\n        require(\r\n            MerkleProof.verify(merkleProof, merkleRoot, node),\r\n            \"Verification failed!\"\r\n        );\r\n        claimed[version][msg.sender] = true;\r\n        IBubbles(TOKEN).mint(msg.sender, _amount);\r\n        emit ClaimAirdrop(msg.sender, _amount, version);\r\n    }\r\n\r\n    //for admin to airdrop $BUBBLE to recipients\r\n    function sendAirdrop(recipient[] memory _recipients) external onlyOwner {\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            IBubbles(TOKEN).mint(_recipients[i].user, _recipients[i].amount);\r\n            emit SendAirdrop(_recipients[i].user, _recipients[i].amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Function to change address of reward token\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\r\n        TOKEN = _tokenAddress;\r\n    }\r\n\r\n    /// @notice Function to set new merkle root\r\n    function setMerkleRoot(bytes32 _root) external onlyOwner {\r\n        merkleRoot = _root;\r\n        version = version + 1;\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": true,
20       "runs": 1000
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}