1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/Amplifi.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IAmplifi.sol\";\nimport \"./interfaces/IUniswap.sol\";\nimport \"./AmplifiNode.sol\";\nimport \"./Types.sol\";\n\n/**\n * Amplifi\n * Website: https://perpetualyield.io/\n * Telegram: https://t.me/Amplifi_ERC\n * Twitter: https://twitter.com/amplifidefi\n */\ncontract Amplifi is IERC20, IAmplifi, Ownable {\n    string public constant name = \"Amplifi\";\n    string public constant symbol = \"AMPLIFI\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply = 121_373e18;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    IERC20 public immutable WETH;\n    IERC20 public immutable USDC;\n\n    IUniswapV2Router02 public immutable router;\n    address public immutable pair;\n\n    AmplifiNode public amplifiNode;\n    address private amplifiNodeAddress;\n\n    uint256 public maxWallet = type(uint256).max;\n\n    mapping(address => bool) public isDisabledExempt;\n    mapping(address => bool) public isFeeExempt;\n    mapping(address => bool) public isMaxExempt;\n    mapping(address => bool) public isUniswapPair;\n\n    // Fees are charged on swaps\n    Types.FeeRecipients public feeRecipients;\n    Types.Fees public fees;\n    uint16 public feeTotal = 900;\n\n    // Taxes are charged on transfers and burned\n    uint16 public tax = 300;\n\n    // Basis for all fee and tax values\n    uint16 public constant bps = 10_000;\n\n    bool public contractSellEnabled = true;\n    uint256 public contractSellThreshold = 65e18;\n    uint256 public minSwapAmountToTriggerContractSell = 0;\n\n    bool public mintingEnabled = true;\n    bool public burningEnabled = true;\n    bool public tradingEnabled = false;\n    bool public isContractSelling = false;\n\n    modifier contractSelling() {\n        isContractSelling = true;\n        _;\n        isContractSelling = false;\n    }\n\n    constructor(\n        address _router,\n        address _usdc,\n        address _gampVault\n    ) {\n        router = IUniswapV2Router02(_router);\n        USDC = IERC20(_usdc);\n\n        pair = IUniswapV2Factory(router.factory()).createPair(address(USDC), address(this));\n\n        WETH = IERC20(router.WETH());\n\n        amplifiNode = new AmplifiNode(this, router, USDC, msg.sender);\n        amplifiNodeAddress = address(amplifiNode);\n\n        isDisabledExempt[msg.sender] = true;\n        isFeeExempt[msg.sender] = true;\n        isMaxExempt[msg.sender] = true;\n        isDisabledExempt[amplifiNodeAddress] = true;\n        isFeeExempt[amplifiNodeAddress] = true;\n        isMaxExempt[amplifiNodeAddress] = true;\n        isDisabledExempt[address(0)] = true;\n        isFeeExempt[address(0)] = true;\n        isMaxExempt[address(0)] = true;\n        isMaxExempt[address(this)] = true;\n        isUniswapPair[pair] = true;\n\n        allowance[address(this)][address(router)] = type(uint256).max;\n\n        feeRecipients = Types.FeeRecipients(\n            0xc766B8c9741BC804FCc378FdE75560229CA3AB1E,\n            0x682Ce32507D2825A540Ad31dC4C2B18432E0e5Bd,\n            0x146f0Af003d2eB9B06a1900F5de9d01708072c3f,\n            0x394110aceF86D93b20705d2Df00bE1629ce741De,\n            0x8C3F0b1Bd87965bE0dc01A9b7fc3003abec1A3CB,\n            0xbE328EAAe2199409a447c4121C7979fFfAaCd4d5,\n            _gampVault,\n            0x74B605FD7cfC830A862Ee6F2F2e1007608B4b2fF,\n            0x5A23C387112e8e213B0755191e7d1cdC26b0C1b2,\n            0x6f967da9c0E1764159408988fDcF6c3B7Bf0F9F7,\n            0x454cD1e89df17cDB61D868C6D3dBC02bC2c38a17\n        );\n\n        fees = Types.Fees(175, 87, 87, 87, 44, 44, 44, 44, 44, 44, 200);\n\n        uint256 toEmissions = 39_000e18;\n        uint256 toDeployer = totalSupply - toEmissions;\n\n        balanceOf[msg.sender] = toDeployer;\n        emit Transfer(address(0), msg.sender, toDeployer);\n\n        balanceOf[amplifiNodeAddress] = toEmissions;\n        emit Transfer(address(0), amplifiNodeAddress, toEmissions);\n    }\n\n    function mint(uint256 _amount) external onlyOwner {\n        require(mintingEnabled, \"Minting is disabled\");\n\n        totalSupply += _amount;\n        unchecked {\n            balanceOf[msg.sender] += _amount;\n        }\n        emit Transfer(address(0), msg.sender, _amount);\n    }\n\n    function burn(address _burnee, uint256 _amount) external onlyOwner returns (bool) {\n        require(burningEnabled, \"Burning is disabled\");\n        require(balanceOf[_burnee] >= _amount, \"Cannot burn more than an account has\");\n\n        totalSupply -= _amount;\n\n        balanceOf[_burnee] -= _amount;\n        emit Transfer(_burnee, address(0), _amount);\n        return true;\n    }\n\n    function burnForAmplifier(address _burnee, uint256 _amount) external returns (bool) {\n        require(msg.sender == address(amplifiNode), \"Only the Amplifier Node contract can burn\");\n        require(balanceOf[_burnee] >= _amount, \"Cannot burn more than an account has\");\n\n        uint256 allowed = allowance[_burnee][msg.sender];\n        if (allowed != type(uint256).max) {\n            allowance[_burnee][msg.sender] = allowed - _amount;\n        }\n\n        totalSupply -= _amount;\n\n        balanceOf[_burnee] -= _amount;\n        emit Transfer(_burnee, address(0), _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\n        allowance[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\n        return _transferFrom(msg.sender, _recipient, _amount);\n    }\n\n    function transferFrom(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) external override returns (bool) {\n        uint256 allowed = allowance[_sender][msg.sender];\n        if (allowed != type(uint256).max) {\n            allowance[_sender][msg.sender] = allowed - _amount;\n        }\n\n        return _transferFrom(_sender, _recipient, _amount);\n    }\n\n    function _transferFrom(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) private returns (bool) {\n        if (isContractSelling) {\n            return _simpleTransfer(_sender, _recipient, _amount);\n        }\n\n        require(tradingEnabled || isDisabledExempt[_sender], \"Trading is currently disabled\");\n\n        bool sell = isUniswapPair[_recipient] || _recipient == address(router);\n\n        if (!sell && !isMaxExempt[_recipient]) {\n            require((balanceOf[_recipient] + _amount) <= maxWallet, \"Max wallet has been triggered\");\n        }\n\n        if (\n            sell &&\n            _amount >= minSwapAmountToTriggerContractSell &&\n            !isUniswapPair[msg.sender] &&\n            !isContractSelling &&\n            contractSellEnabled &&\n            balanceOf[address(this)] >= contractSellThreshold\n        ) {\n            _contractSell();\n        }\n\n        balanceOf[_sender] -= _amount;\n\n        uint256 amountAfter = _amount;\n        if (\n            ((isUniswapPair[_sender] || _sender == address(router)) ||\n                (isUniswapPair[_recipient] || _recipient == address(router)))\n                ? !isFeeExempt[_sender] && !isFeeExempt[_recipient]\n                : false\n        ) {\n            amountAfter = _collectFee(_sender, _amount);\n        } else if (!isFeeExempt[_sender] && !isFeeExempt[_recipient]) {\n            amountAfter = _collectTax(_sender, _amount);\n        }\n\n        unchecked {\n            balanceOf[_recipient] += amountAfter;\n        }\n        emit Transfer(_sender, _recipient, amountAfter);\n\n        return true;\n    }\n\n    function _simpleTransfer(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) private returns (bool) {\n        balanceOf[_sender] -= _amount;\n        unchecked {\n            balanceOf[_recipient] += _amount;\n        }\n        return true;\n    }\n\n    function _contractSell() private contractSelling {\n        uint256 ethBefore = address(this).balance;\n\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = address(USDC);\n        path[2] = address(WETH);\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            balanceOf[address(this)],\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 ethAfter = address(this).balance - ethBefore;\n\n        if (ethAfter > bps) {\n            bool success;\n            (success, ) = feeRecipients.operations.call{value: (ethAfter * fees.operations) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.validatorAcquisition.call{value: (ethAfter * fees.validatorAcquisition) / bps}(\n                \"\"\n            );\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.PCR.call{value: (ethAfter * fees.PCR) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.yield.call{value: (ethAfter * fees.yield) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.xChainValidatorAcquisition.call{\n                value: (ethAfter * fees.xChainValidatorAcquisition) / bps\n            }(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.indexFundPools.call{value: (ethAfter * fees.indexFundPools) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.gAMPRewardsPool.call{value: (ethAfter * fees.gAMPRewardsPool) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.OTCSwap.call{value: (ethAfter * fees.OTCSwap) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.rescueFund.call{value: (ethAfter * fees.rescueFund) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.protocolImprovement.call{value: (ethAfter * fees.protocolImprovement) / bps}(\n                \"\"\n            );\n            require(success, \"Could not send ETH\");\n            (success, ) = feeRecipients.developers.call{value: (ethAfter * fees.developers) / bps}(\"\");\n            require(success, \"Could not send ETH\");\n        }\n    }\n\n    function _collectFee(address _sender, uint256 _amount) private returns (uint256) {\n        uint256 feeAmount = (_amount * feeTotal) / bps;\n\n        unchecked {\n            balanceOf[address(this)] += feeAmount;\n        }\n        emit Transfer(_sender, address(this), feeAmount);\n\n        return _amount - feeAmount;\n    }\n\n    function _collectTax(address _sender, uint256 _amount) private returns (uint256) {\n        uint256 taxAmount = (_amount * tax) / bps;\n\n        totalSupply -= taxAmount;\n\n        emit Transfer(_sender, address(0), _amount);\n\n        return _amount - taxAmount;\n    }\n\n    function setMaxWallet(uint256 _maxWallet) external onlyOwner {\n        maxWallet = _maxWallet;\n    }\n\n    function setIsDisabledExempt(address _holder, bool _exempt) external onlyOwner {\n        isDisabledExempt[_holder] = _exempt;\n    }\n\n    function setIsFeeExempt(address _holder, bool _exempt) external onlyOwner {\n        isFeeExempt[_holder] = _exempt;\n    }\n\n    function setIsMaxExempt(address _holder, bool _exempt) external onlyOwner {\n        isMaxExempt[_holder] = _exempt;\n    }\n\n    function setIsUniswapPair(address _pair, bool _isPair) external onlyOwner {\n        isUniswapPair[_pair] = _isPair;\n    }\n\n    function setContractSelling(\n        bool _contractSellEnabled,\n        uint256 _contractSellThreshold,\n        uint256 _minSwapAmountToTriggerContractSell\n    ) external onlyOwner {\n        contractSellEnabled = _contractSellEnabled;\n        contractSellThreshold = _contractSellThreshold;\n        minSwapAmountToTriggerContractSell = _minSwapAmountToTriggerContractSell;\n    }\n\n    function setFees(Types.Fees calldata _fees) external onlyOwner {\n        fees = _fees;\n\n        feeTotal =\n            _fees.operations +\n            _fees.validatorAcquisition +\n            _fees.PCR +\n            _fees.yield +\n            _fees.xChainValidatorAcquisition +\n            _fees.indexFundPools +\n            _fees.gAMPRewardsPool +\n            _fees.OTCSwap +\n            _fees.rescueFund +\n            _fees.protocolImprovement +\n            _fees.developers;\n    }\n\n    function setFeeRecipients(Types.FeeRecipients calldata _feeRecipients) external onlyOwner {\n        feeRecipients = _feeRecipients;\n    }\n\n    function setTax(uint16 _tax) external onlyOwner {\n        tax = _tax;\n    }\n\n    function setTradingEnabled(bool _enabled) external onlyOwner {\n        tradingEnabled = _enabled;\n    }\n\n    function setAmplifiNode(AmplifiNode _amplifiNode) external onlyOwner {\n        amplifiNode = _amplifiNode;\n        amplifiNodeAddress = address(amplifiNode);\n\n        isDisabledExempt[amplifiNodeAddress] = true;\n        isFeeExempt[amplifiNodeAddress] = true;\n        isMaxExempt[amplifiNodeAddress] = true;\n    }\n\n    function permanentlyDisableMinting() external onlyOwner {\n        mintingEnabled = false;\n    }\n\n    function permanentlyDisableBurning() external onlyOwner {\n        burningEnabled = false;\n    }\n\n    function withdrawETH(address _recipient) external onlyOwner {\n        (bool success, ) = _recipient.call{value: address(this).balance}(\"\");\n        require(success, \"Could not send ETH\");\n    }\n\n    function withdrawToken(IERC20 _token, address _recipient) external onlyOwner {\n        _token.transfer(_recipient, _token.balanceOf(address(this)));\n    }\n\n    receive() external payable {}\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
12     },
13     "src/interfaces/IAmplifi.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\n\ninterface IAmplifi is IERC20 {\n    function burnForAmplifier(address _burnee, uint256 _amount) external returns (bool);\n}\n"
15     },
16     "src/interfaces/IUniswap.sol": {
17       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner, address indexed spender, uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n        external\n        returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    )\n        external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0, address indexed token1, address pair, uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    \n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (uint256 amountETH);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external;\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable;\n}\n"
18     },
19     "src/AmplifiNode.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/security/ReentrancyGuard.sol\";\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IAmplifi.sol\";\nimport \"./interfaces/IUniswap.sol\";\nimport \"./FusePool.sol\";\nimport \"./Types.sol\";\n\ncontract AmplifiNode is Ownable, ReentrancyGuard {\n    uint16 public maxMonths = 6;\n    uint16 public maxAmplifiersPerMinter = 96;\n    uint256 public gracePeriod = 30 days;\n    uint256 public gammaPeriod = 72 days;\n    uint256 public fuseWaitPeriod = 90 days;\n\n    uint256 public totalAmplifiers = 0;\n    mapping(uint256 => Types.Amplifier) public amplifiers;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(uint256 => uint256)) public ownedAmplifiers;\n    mapping(uint256 => uint256) public ownedAmplifiersIndex;\n\n    mapping(Types.FuseProduct => uint256) public fuseLockDurations;\n    mapping(Types.FuseProduct => FusePool) public fusePools;\n    mapping(Types.FuseProduct => uint256) public boosts;\n\n    uint256 public creationFee = 0;\n    uint256 public renewalFee = 0.006 ether;\n    uint256 public fuseFee = 0.007 ether;\n    uint256 public mintPrice = 20e18;\n\n    uint256[20] public rates = [\n        700000000000,\n        595000000000,\n        505750000000,\n        429887500000,\n        365404375000,\n        310593718750,\n        264004660937,\n        224403961797,\n        190743367527,\n        162131862398,\n        137812083039,\n        117140270583,\n        99569229995,\n        84633845496,\n        71938768672,\n        61147953371,\n        51975760365,\n        44179396311,\n        37552486864,\n        31919613834\n    ];\n\n    IAmplifi public immutable amplifi;\n    IUniswapV2Router02 public immutable router;\n    IERC20 public immutable USDC;\n\n    Types.AmplifierFeeRecipients public feeRecipients;\n\n    uint16 public claimFee = 600;\n    // Basis for above fee values\n    uint16 public constant bps = 10_000;\n\n    constructor(\n        IAmplifi _amplifi,\n        IUniswapV2Router02 _router,\n        IERC20 _usdc,\n        address _owner\n    ) {\n        transferOwnership(_owner);\n        amplifi = _amplifi;\n        router = _router;\n        USDC = _usdc;\n\n        feeRecipients = Types.AmplifierFeeRecipients(\n            0xc766B8c9741BC804FCc378FdE75560229CA3AB1E,\n            0x682Ce32507D2825A540Ad31dC4C2B18432E0e5Bd,\n            0x454cD1e89df17cDB61D868C6D3dBC02bC2c38a17\n        );\n\n        fuseLockDurations[Types.FuseProduct.OneYear] = 365 days;\n        fuseLockDurations[Types.FuseProduct.ThreeYears] = 365 days * 3;\n        fuseLockDurations[Types.FuseProduct.FiveYears] = 365 days * 5;\n\n        fusePools[Types.FuseProduct.OneYear] = new FusePool(_owner, 365 days);\n        fusePools[Types.FuseProduct.ThreeYears] = new FusePool(_owner, 365 days * 3);\n        fusePools[Types.FuseProduct.FiveYears] = new FusePool(_owner, 365 days * 5);\n\n        boosts[Types.FuseProduct.OneYear] = 2e18;\n        boosts[Types.FuseProduct.ThreeYears] = 12e18;\n        boosts[Types.FuseProduct.FiveYears] = 36e18;\n    }\n\n    function createAmplifier(uint256 _months) external payable nonReentrant returns (uint256) {\n        require(msg.value == getRenewalFeeForMonths(_months) + creationFee, \"Invalid Ether value provided\");\n        return _createAmplifier(_months);\n    }\n\n    function createAmplifierBatch(uint256 _amount, uint256 _months)\n        external\n        payable\n        nonReentrant\n        returns (uint256[] memory ids)\n    {\n        require(msg.value == (getRenewalFeeForMonths(_months) + creationFee) * _amount, \"Invalid Ether value provided\");\n        ids = new uint256[](_amount);\n        for (uint256 i = 0; i < _amount; ) {\n            ids[i] = _createAmplifier(_months);\n            unchecked {\n                ++i;\n            }\n        }\n        return ids;\n    }\n\n    function _createAmplifier(uint256 _months) internal returns (uint256) {\n        require(balanceOf[msg.sender] < maxAmplifiersPerMinter, \"Too many amplifiers\");\n        require(_months > 0 && _months <= maxMonths, \"Must be 1-6 months\");\n\n        require(amplifi.burnForAmplifier(msg.sender, mintPrice), \"Not able to burn\");\n\n        (bool success, ) = feeRecipients.validatorAcquisition.call{\n            value: getRenewalFeeForMonths(_months) + creationFee\n        }(\"\");\n        require(success, \"Could not send ETH\");\n\n        uint256 id;\n        uint256 length;\n        unchecked {\n            id = totalAmplifiers++;\n            length = balanceOf[msg.sender]++;\n        }\n\n        amplifiers[id] = Types.Amplifier(\n            Types.FuseProduct.None,\n            msg.sender,\n            block.timestamp,\n            block.timestamp + 30 days * _months,\n            0,\n            0,\n            0,\n            0,\n            0\n        );\n        ownedAmplifiers[msg.sender][length] = id;\n        ownedAmplifiersIndex[id] = length;\n\n        return id;\n    }\n\n    function renewAmplifier(uint256 _id, uint256 _months) external payable nonReentrant {\n        require(msg.value == getRenewalFeeForMonths(_months), \"Invalid Ether value provided\");\n        _renewAmplifier(_id, _months);\n    }\n\n    function renewAmplifierBatch(uint256[] calldata _ids, uint256 _months) external payable nonReentrant {\n        uint256 length = _ids.length;\n        require(msg.value == (getRenewalFeeForMonths(_months)) * length, \"Invalid Ether value provided\");\n        for (uint256 i = 0; i < length; ) {\n            _renewAmplifier(_ids[i], _months);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _renewAmplifier(uint256 _id, uint256 _months) internal {\n        Types.Amplifier storage amplifier = amplifiers[_id];\n\n        require(amplifier.minter == msg.sender, \"Invalid ownership\");\n        require(amplifier.expires + gracePeriod >= block.timestamp, \"Grace period expired\");\n\n        uint256 monthsLeft = 0;\n        if (block.timestamp > amplifier.expires) {\n            monthsLeft = (block.timestamp - amplifier.created) / 30 days;\n        }\n        require(_months + monthsLeft <= maxMonths, \"Too many months\");\n\n        (bool success, ) = feeRecipients.validatorAcquisition.call{value: getRenewalFeeForMonths(_months)}(\"\");\n        require(success, \"Could not send ETH\");\n\n        amplifier.expires += 30 days * _months;\n    }\n\n    function fuseAmplifier(uint256 _id, Types.FuseProduct fuseProduct) external payable nonReentrant {\n        Types.Amplifier storage amplifier = amplifiers[_id];\n\n        require(amplifier.minter == msg.sender, \"Invalid ownership\");\n        require(amplifier.fuseProduct == Types.FuseProduct.None, \"Already fused\");\n        require(amplifier.expires > block.timestamp, \"Amplifier expired\");\n\n        require(msg.value == fuseFee, \"Invalid Ether value provided\");\n\n        (bool success, ) = feeRecipients.validatorAcquisition.call{value: msg.value}(\"\");\n        require(success, \"Could not send ETH\");\n\n        INetwork network = fusePools[fuseProduct];\n        network.increaseShare(msg.sender, block.timestamp + fuseLockDurations[fuseProduct]);\n\n        amplifier.fuseProduct = fuseProduct;\n        amplifier.fused = block.timestamp;\n        amplifier.unlocks = block.timestamp + fuseLockDurations[fuseProduct];\n    }\n\n    function claimAMPLIFI(uint256 _id) external nonReentrant {\n        _claimAMPLIFI(_id);\n    }\n\n    function claimAMPLIFIBatch(uint256[] calldata _ids) external nonReentrant {\n        uint256 length = _ids.length;\n        for (uint256 i = 0; i < length; ) {\n            _claimAMPLIFI(_ids[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _claimAMPLIFI(uint256 _id) internal {\n        Types.Amplifier storage amplifier = amplifiers[_id];\n        require(amplifier.minter == msg.sender, \"Invalid ownership\");\n        require(amplifier.fuseProduct == Types.FuseProduct.None, \"Must be unfused\");\n        require(amplifier.expires > block.timestamp, \"Amplifier expired\");\n\n        uint256 amount = getPendingAMPLIFI(_id);\n        amount = takeClaimFee(amount);\n        amplifi.transfer(msg.sender, amount);\n\n        amplifier.numClaims++;\n        amplifier.lastClaimed = block.timestamp;\n    }\n\n    function claimETH(uint256 _id) external nonReentrant {\n        _claimETH(_id);\n    }\n\n    function claimETHBatch(uint256[] calldata _ids) external nonReentrant {\n        uint256 length = _ids.length;\n        for (uint256 i = 0; i < length; ) {\n            _claimETH(_ids[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _claimETH(uint256 _id) internal {\n        Types.Amplifier storage amplifier = amplifiers[_id];\n        require(amplifier.minter == msg.sender, \"Invalid ownership\");\n        require(amplifier.fuseProduct != Types.FuseProduct.None, \"Must be fused\");\n        require(amplifier.expires > block.timestamp, \"Amplifier expired\");\n        require(block.timestamp - amplifier.fused > fuseWaitPeriod, \"Cannot claim ETH yet\");\n\n        fusePools[amplifier.fuseProduct].distributeDividend(msg.sender);\n\n        if (amplifier.unlocks <= block.timestamp) {\n            require(amplifi.transfer(msg.sender, boosts[amplifier.fuseProduct]));\n\n            fusePools[amplifier.fuseProduct].decreaseShare(amplifier.minter);\n            amplifier.fuseProduct = Types.FuseProduct.None;\n            amplifier.fused = 0;\n            amplifier.unlocks = 0;\n        }\n    }\n\n    function getPendingAMPLIFI(uint256 _id) public view returns (uint256) {\n        Types.Amplifier memory amplifier = amplifiers[_id];\n\n        uint256 rate = amplifier.numClaims >= rates.length ? rates[rates.length - 1] : rates[amplifier.numClaims];\n        uint256 amount = (block.timestamp - (amplifier.numClaims > 0 ? amplifier.lastClaimed : amplifier.created)) *\n            (rate);\n        if (amplifier.created < block.timestamp + gammaPeriod) {\n            uint256 _seconds = (block.timestamp + gammaPeriod) - amplifier.created;\n            uint256 _percent = 100;\n            if (_seconds >= 4838400) {\n                _percent = 900;\n            } else if (_seconds >= 4233600) {\n                _percent = 800;\n            } else if (_seconds >= 3628800) {\n                _percent = 700;\n            } else if (_seconds >= 3024000) {\n                _percent = 600;\n            } else if (_seconds >= 2419200) {\n                _percent = 500;\n            } else if (_seconds >= 1814400) {\n                _percent = 400;\n            } else if (_seconds >= 1209600) {\n                _percent = 300;\n            } else if (_seconds >= 604800) {\n                _percent = 200;\n            }\n            uint256 _divisor = amount * _percent;\n            (, uint256 result) = tryDiv(_divisor, 10000);\n            amount -= result;\n        }\n\n        return amount;\n    }\n\n    function takeClaimFee(uint256 amount) internal returns (uint256) {\n        uint256 fee = (amount * claimFee) / bps;\n\n        address[] memory path = new address[](2);\n        path[0] = address(amplifi);\n        path[1] = address(USDC);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(fee, 0, path, address(this), block.timestamp);\n\n        uint256 usdcToSend = USDC.balanceOf(address(this)) / 2;\n\n        USDC.transfer(feeRecipients.operations, usdcToSend);\n        USDC.transfer(feeRecipients.developers, usdcToSend);\n\n        return amount - fee;\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) {\n                return (false, 0);\n            }\n            return (true, a / b);\n        }\n    }\n\n    function getRenewalFeeForMonths(uint256 _months) public view returns (uint256) {\n        return renewalFee * _months;\n    }\n\n    function airdropAmplifiers(\n        address[] calldata _users,\n        uint256[] calldata _months,\n        Types.FuseProduct[] calldata _fuseProducts\n    ) external onlyOwner returns (uint256[] memory ids) {\n        require(_users.length == _months.length && _months.length == _fuseProducts.length, \"Lengths not aligned\");\n\n        uint256 length = _users.length;\n        ids = new uint256[](length);\n        for (uint256 i = 0; i < length; ) {\n            ids[i] = _airdropAmplifier(_users[i], _months[i], _fuseProducts[i]);\n            unchecked {\n                ++i;\n            }\n        }\n\n        return ids;\n    }\n\n    function _airdropAmplifier(\n        address _user,\n        uint256 _months,\n        Types.FuseProduct _fuseProduct\n    ) internal returns (uint256) {\n        require(_months <= maxMonths, \"Too many months\");\n\n        uint256 id;\n        uint256 length;\n        unchecked {\n            id = totalAmplifiers++;\n            length = balanceOf[_user]++;\n        }\n\n        uint256 fused;\n        uint256 unlocks;\n\n        if (_fuseProduct != Types.FuseProduct.None) {\n            fused = block.timestamp;\n            unlocks = block.timestamp + fuseLockDurations[_fuseProduct];\n        }\n\n        amplifiers[id] = Types.Amplifier(\n            _fuseProduct,\n            _user,\n            block.timestamp,\n            block.timestamp + 30 days * _months,\n            0,\n            0,\n            fused,\n            unlocks,\n            0\n        );\n        ownedAmplifiers[_user][length] = id;\n        ownedAmplifiersIndex[id] = length;\n\n        return id;\n    }\n\n    function removeAmplifier(uint256 _id) external onlyOwner {\n        uint256 lastAmplifierIndex = balanceOf[amplifiers[_id].minter];\n        uint256 amplifierIndex = ownedAmplifiersIndex[_id];\n\n        if (amplifierIndex != lastAmplifierIndex) {\n            uint256 lastAmplifierId = ownedAmplifiers[amplifiers[_id].minter][lastAmplifierIndex];\n\n            ownedAmplifiers[amplifiers[_id].minter][amplifierIndex] = lastAmplifierId; // Move the last amplifier to the slot of the to-delete token\n            ownedAmplifiersIndex[lastAmplifierId] = amplifierIndex; // Update the moved amplifier's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete ownedAmplifiersIndex[_id];\n        delete ownedAmplifiers[amplifiers[_id].minter][lastAmplifierIndex];\n\n        balanceOf[amplifiers[_id].minter]--;\n        totalAmplifiers--;\n\n        delete amplifiers[_id];\n    }\n\n    function setRates(uint256[] calldata _rates) external onlyOwner {\n        require(_rates.length == rates.length, \"Invalid length\");\n\n        uint256 length = _rates.length;\n        for (uint256 i = 0; i < length; ) {\n            rates[i] = _rates[i];\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function setMintPrice(uint256 _mintPrice) external onlyOwner {\n        mintPrice = _mintPrice;\n    }\n\n    function setMaxMonths(uint16 _maxMonths) external onlyOwner {\n        maxMonths = _maxMonths;\n    }\n\n    function setFees(\n        uint256 _creationFee,\n        uint256 _renewalFee,\n        uint256 _fuseFee,\n        uint16 _claimFee\n    ) external onlyOwner {\n        creationFee = _creationFee;\n        renewalFee = _renewalFee;\n        fuseFee = _fuseFee;\n        claimFee = _claimFee;\n    }\n\n    function setFuseLockDurations(Types.FuseProduct _fuseProduct, uint256 _duration) external onlyOwner {\n        fuseLockDurations[_fuseProduct] = _duration;\n    }\n\n    function setFusePool(Types.FuseProduct _fuseProduct, FusePool _fusePool) external onlyOwner {\n        fusePools[_fuseProduct] = _fusePool;\n    }\n\n    function setBoosts(Types.FuseProduct _fuseProduct, uint256 _boost) external onlyOwner {\n        boosts[_fuseProduct] = _boost;\n    }\n\n    function setFeeRecipients(Types.AmplifierFeeRecipients calldata _feeRecipients) external onlyOwner {\n        feeRecipients = _feeRecipients;\n    }\n\n    function setPeriods(\n        uint256 _gracePeriod,\n        uint256 _gammaPeriod,\n        uint256 _fuseWaitPeriod\n    ) external onlyOwner {\n        gracePeriod = _gracePeriod;\n        gammaPeriod = _gammaPeriod;\n        fuseWaitPeriod = _fuseWaitPeriod;\n    }\n\n    function approveRouter() external onlyOwner {\n        amplifi.approve(address(router), type(uint256).max);\n    }\n\n    function withdrawETH(address _recipient) external onlyOwner {\n        (bool success, ) = _recipient.call{value: address(this).balance}(\"\");\n        require(success, \"Could not send ETH\");\n    }\n\n    function withdrawToken(IERC20 _token, address _recipient) external onlyOwner {\n        _token.transfer(_recipient, _token.balanceOf(address(this)));\n    }\n\n    receive() external payable {}\n}\n"
21     },
22     "src/Types.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nlibrary Types {\n    struct FeeRecipients {\n        address operations;\n        address validatorAcquisition;\n        address PCR;\n        address yield;\n        address xChainValidatorAcquisition;\n        address indexFundPools;\n        address gAMPRewardsPool;\n        address OTCSwap;\n        address rescueFund;\n        address protocolImprovement;\n        address developers;\n    }\n\n    struct Fees {\n        uint16 operations;\n        uint16 validatorAcquisition;\n        uint16 PCR;\n        uint16 yield;\n        uint16 xChainValidatorAcquisition;\n        uint16 indexFundPools;\n        uint16 gAMPRewardsPool;\n        uint16 OTCSwap;\n        uint16 rescueFund;\n        uint16 protocolImprovement;\n        uint16 developers;\n    }\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n        uint256 started;\n        uint256 unlocks;\n    }\n\n    enum FuseProduct {\n        None,\n        OneYear,\n        ThreeYears,\n        FiveYears\n    }\n\n    struct Amplifier {\n        FuseProduct fuseProduct;\n        address minter;\n        uint256 created;\n        uint256 expires;\n        uint256 numClaims;\n        uint256 lastClaimed;\n        uint256 fused;\n        uint256 unlocks;\n        uint256 lastFuseClaimed;\n    }\n\n    struct AmplifierFeeRecipients {\n        address operations;\n        address validatorAcquisition;\n        address developers;\n    }\n}\n"
24     },
25     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     },
28     "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
30     },
31     "src/FusePool.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"openzeppelin-contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IUniswap.sol\";\nimport \"./interfaces/INetwork.sol\";\nimport \"./Types.sol\";\n\ncontract FusePool is INetwork, Ownable {\n    address immutable token;\n    uint256 immutable duration;\n\n    address[] shareholders;\n    mapping(address => uint256) shareholderIndexes;\n    mapping(address => uint256) shareholderClaims;\n    mapping(address => uint256) public totalRewardsToUser;\n    mapping(address => Types.Share) public shares;\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalDistributed;\n    uint256 public dividendsPerShare;\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\n\n    modifier onlyToken() {\n        require(msg.sender == token);\n        _;\n    }\n\n    constructor(address _owner, uint256 _duration) {\n        _transferOwnership(_owner);\n\n        token = msg.sender;\n        duration = _duration;\n    }\n\n    function increaseShare(address _shareholder, uint256 _unlocks) external override onlyToken {\n        if (shares[_shareholder].amount == 0) {\n            addShareholder(_shareholder);\n        }\n\n        totalShares++;\n        shares[_shareholder].amount++;\n        shares[_shareholder].unlocks = _unlocks;\n        shares[_shareholder].started = block.timestamp;\n        shares[_shareholder].totalExcluded = getCumulativeDividends(\n            shares[_shareholder].amount,\n            shares[_shareholder].started,\n            shares[_shareholder].unlocks\n        );\n        assert(shares[_shareholder].totalExcluded == 0);\n    }\n\n    function decreaseShare(address _shareholder) external override onlyToken {\n        if (shares[_shareholder].amount == 1) {\n            removeShareholder(_shareholder);\n        }\n\n        totalShares--;\n        shares[_shareholder].totalExcluded = getCumulativeDividends(\n            shares[_shareholder].amount,\n            shares[_shareholder].started,\n            shares[_shareholder].started\n        );\n        shares[_shareholder].amount--;\n        shares[_shareholder].started = 0;\n        shares[_shareholder].unlocks = 0;\n    }\n\n    function deposit() external payable override onlyOwner {\n        uint256 amount = msg.value;\n        totalDividends += amount;\n        dividendsPerShare += (dividendsPerShareAccuracyFactor * amount) / totalShares;\n    }\n\n    function distributeDividend(address _shareholder) external onlyToken {\n        uint256 amount = getPendingDividend(_shareholder);\n\n        if (amount > 0) {\n            shares[_shareholder].totalExcluded = getCumulativeDividends(\n                shares[_shareholder].amount,\n                shares[_shareholder].started,\n                shares[_shareholder].unlocks\n            );\n            shares[_shareholder].totalRealised += amount;\n            totalDistributed += amount;\n\n            (bool success, ) = _shareholder.call{value: amount}(\"\");\n            require(success, \"Could not send ETH\");\n\n            totalRewardsToUser[_shareholder] = totalRewardsToUser[_shareholder] + amount;\n        }\n    }\n\n    function getPendingDividend(address _shareholder) public view returns (uint256) {\n        if (shares[_shareholder].amount == 0) {\n            return 0;\n        }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(\n            shares[_shareholder].amount,\n            shares[_shareholder].started,\n            shares[_shareholder].unlocks\n        );\n        uint256 shareholderTotalExcluded = shares[_shareholder].totalExcluded;\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\n            return 0;\n        }\n\n        return shareholderTotalDividends - shareholderTotalExcluded;\n    }\n\n    function getCumulativeDividends(\n        uint256 share,\n        uint256 started,\n        uint256 unlocks\n    ) internal view returns (uint256) {\n        if (unlocks > block.timestamp) {\n            unlocks = block.timestamp;\n        }\n\n        uint256 total = (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\n\n        uint256 end = started + duration;\n        uint256 endAbs = end - started;\n        uint256 nowAbs = unlocks - started;\n\n        return (total * nowAbs) / endAbs;\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n\n    function withdrawETH(address _recipient) external onlyOwner {\n        (bool success, ) = _recipient.call{value: address(this).balance}(\"\");\n        require(success, \"Could not send ETH\");\n    }\n\n    function withdrawToken(IERC20 _token, address _recipient) external onlyOwner {\n        _token.transfer(_recipient, _token.balanceOf(address(this)));\n    }\n}\n"
33     },
34     "src/interfaces/INetwork.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface INetwork {\n    function increaseShare(address _shareholder, uint256 _unlocks) external;\n    function decreaseShare(address _shareholder) external;\n\n    function deposit() external payable;\n\n    function distributeDividend(address _shareholder) external;\n}\n"
36     }
37   },
38   "settings": {
39     "remappings": [
40       "ds-test/=lib/forge-std/lib/ds-test/src/",
41       "forge-std/=lib/forge-std/src/",
42       "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
43       "solenv/=lib/solenv/src/",
44       "solidity-stringutils/=lib/solenv/lib/solidity-stringutils/src/",
45       "src/=src/",
46       "test/=test/",
47       "script/=script/"
48     ],
49     "optimizer": {
50       "enabled": true,
51       "runs": 200
52     },
53     "metadata": {
54       "bytecodeHash": "ipfs"
55     },
56     "outputSelection": {
57       "*": {
58         "*": [
59           "evm.bytecode",
60           "evm.deployedBytecode",
61           "devdoc",
62           "userdoc",
63           "metadata",
64           "abi"
65         ]
66       }
67     },
68     "evmVersion": "london",
69     "libraries": {}
70   }
71 }}