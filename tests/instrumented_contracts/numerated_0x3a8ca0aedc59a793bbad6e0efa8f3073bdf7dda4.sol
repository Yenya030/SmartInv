1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Dynamic.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"./interfaces/ITreasury.sol\";\r\nimport \"./interfaces/IDynamic.sol\";\r\nimport \"./interfaces/INft.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract DynamicNft is AccessControl, IDynamic {\r\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\r\n    bytes32 public constant NFT_ROLE = keccak256(\"NFT_ROLE\");\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public merkleRoot = 0xa0fd9888b738d87f115429a3520fdbd602fbe89c095c2a6f2f1f5af661dfc43d;\r\n    bytes32 public constant ZEROSTATE = 0x0000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    address public immutable treasuryAddress;\r\n    address private cap3Wallet;\r\n    address public genesisContractAddress;\r\n    address public subsContractAddress;\r\n\r\n    uint256 public genesisPrice = 2 ether;\r\n    uint256 private projectId = 1;\r\n    uint256 public genesisSupply = 2000;\r\n    uint256 public subscriptionSupply = 7000;\r\n    uint256 private genesisVotingPower = 2;\r\n    uint256 private subscriptionVotingPower = 1;\r\n    uint256 private treasuryLimit = 1e6;\r\n    uint256 public projectFund = 1e5;\r\n\r\n    bool public genesisStatus;\r\n    bool public subscriptionStatus;\r\n    SubscriptionStage public subsStage;\r\n    SubscriptionTierDetails public subscriptionDetails;\r\n    bool public distributeFlag;\r\n    bool public refundFlag;\r\n\r\n    struct Genesis {\r\n        uint256 tokenId;\r\n        address owner;\r\n        bool claimed;\r\n    }\r\n\r\n    struct Subscription {\r\n        uint256 tokenId;\r\n        uint256 renewalExpire;\r\n        uint256 price;\r\n        address owner;\r\n        bool expired;\r\n        bool renewed;\r\n    }\r\n\r\n    struct Project {\r\n        string id;\r\n        string description;\r\n        address author;\r\n        bool funded;\r\n    }\r\n\r\n    struct SubscriptionTierDetails {\r\n        uint256 tierOnePrice;\r\n        uint256 tierTwoPrice;\r\n        uint256 tierThreePrice;\r\n        uint256 tierFourPrice;\r\n        uint256 tierOneQuantities;\r\n        uint256 tierTwoQuantities;\r\n        uint256 tierThreeQuantities;\r\n        uint256 tierFourQuantities;\r\n    }\r\n\r\n    enum TOKEN {\r\n        GENESIS,\r\n        SUBSCRIPTION\r\n    }\r\n\r\n    enum SubscriptionStage {\r\n        TIER_ONE,\r\n        TIER_TWO,\r\n        TIER_THREE,\r\n        TIER_FOUR\r\n    }\r\n\r\n    /*------ Events -------*/\r\n\r\n    event SubscriptionMintStateUpdated(bool state);\r\n    event GenesisMintStateUpdated(bool state);\r\n    event GenesisMinted(address to, uint256 id, uint16 quantity);\r\n    event SubscriptionMinted(address to, uint256 id, uint16 quantity);\r\n    event SubscriptionRenewed(address holder, uint256 tokenId);\r\n    event ExpiredSubscription(address holder, uint256 renewalExpire, uint256 tokenId);\r\n    event MerkleRootSet(bytes32 _merkleRoot);\r\n    event TreasuryLimitSet(uint256 newLimit, uint256 oldLimit);\r\n    event SubscriptionBalanceUpdated(uint256 TokenSupply, uint256 tokenId);\r\n    event ProposalApproved(string id, string _title, address author, uint256 amount);\r\n    event ProposalFunded(string id, uint256 amount);\r\n    event UpdatedBackendAddress(address backendAddress, string Role);\r\n    event DistributionActive();\r\n    event NftTransfered(address to, uint256 tokenId, bool isGenesis);\r\n    event SubscriptionStageUpdated(uint256 newStage);\r\n    event SubscriptionPriceUpdated(uint256 stage, uint256 newPrice);\r\n    event SubscriptionQuantitesUpdated(uint256 stage, uint256 newQuantity);\r\n    event Refunded(address sender, uint256[] tokenIds, uint256 amount);\r\n\r\n    mapping(string => Project) private proposals;\r\n    mapping(uint256 => Genesis) public genesisHolder;\r\n    mapping(uint256 => Subscription) public subsHolder;\r\n    mapping(address => uint256) public referralCodes;\r\n    mapping(uint256 => address) public codeToAddress;\r\n    mapping(address => uint8) public toRefund;\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor(\r\n        address _genesis,\r\n        address _subscription,\r\n        address _treasury,\r\n        address _cap3Wallet,\r\n        address _priceFeedAggregator,\r\n        address[] memory _admins\r\n    ) {\r\n        require(_genesis != address(0), \"ADDRESS ZERO\");\r\n        require(_subscription != address(0), \"ADDRESS ZERO\");\r\n        require(_treasury != address(0), \"ADDRESS ZERO\");\r\n        require(_cap3Wallet != address(0), \"ADDRESS ZERO\");\r\n        require(_priceFeedAggregator != address(0), \"ADDRESS ZER0\");\r\n\r\n        subsContractAddress = _subscription;\r\n        genesisContractAddress = _genesis;\r\n        treasuryAddress = _treasury;\r\n        cap3Wallet = _cap3Wallet;\r\n\r\n        priceFeed = AggregatorV3Interface(_priceFeedAggregator);\r\n\r\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\r\n        _setRoleAdmin(EXECUTOR_ROLE, ADMIN_ROLE);\r\n        _setupRole(ADMIN_ROLE, _msgSender());\r\n        _setupRole(ADMIN_ROLE, _admins[0]);\r\n        _setupRole(ADMIN_ROLE, _admins[1]);\r\n        _setupRole(ADMIN_ROLE, address(this));\r\n        _setupRole(NFT_ROLE, _genesis);\r\n        _setupRole(NFT_ROLE, _subscription);\r\n\r\n        subscriptionDetails.tierOnePrice = 0.2 ether;\r\n        subscriptionDetails.tierTwoPrice = 0.22 ether;\r\n        subscriptionDetails.tierThreePrice = 0.24 ether;\r\n        subscriptionDetails.tierFourPrice = 0.26 ether;\r\n        subscriptionDetails.tierOneQuantities = 1750;\r\n        subscriptionDetails.tierTwoQuantities = 1750;\r\n        subscriptionDetails.tierThreeQuantities = 1750;\r\n        subscriptionDetails.tierFourQuantities = 1750;\r\n    }\r\n\r\n    /*------- State Changing Functions ------*/\r\n\r\n    function mintGenesis(\r\n        address _to,\r\n        bytes32[] calldata _merkleProof,\r\n        uint256 _quantity\r\n    ) public payable {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        require((GenesisNft.totalSupply() + _quantity) <= (genesisSupply / 4), \"MAX QUANTITY REACHED\");\r\n        require(msg.value >= (genesisPrice * _quantity), \"INSUFFICIENT MINTING VALUE\");\r\n        require(genesisStatus, \"GENESIS MINT CURRENTLY INACTIVE\");\r\n        require(GenesisNft.totalSupply() < 500, \"INSUFICIENT GENESIS STOCK\");\r\n\r\n        if (merkleRoot != ZEROSTATE) {\r\n            require(verifyMerkleProof(_to, _merkleProof), \"INVALID MERKLE PROOF\");\r\n        }\r\n\r\n        uint256 _id = GenesisNft.currentIndex();\r\n\r\n        for (uint256 x = _id; x < (_quantity + _id); x++) {\r\n            genesisHolder[x] = Genesis({tokenId: _id, owner: _to, claimed: false});\r\n        }\r\n\r\n        GenesisNft.mint(_to, _quantity);\r\n\r\n        (bool success, ) = cap3Wallet.call{value: msg.value}(\"\");\r\n        require(success, \"MINT:ETH TRANSFER FAILED\");\r\n\r\n        if (GenesisNft.totalSupply() == (genesisSupply / 4)) {\r\n            genesisStatus = false;\r\n        }\r\n        emit GenesisMinted(_to, _id, uint16(_quantity));\r\n    }\r\n\r\n    function mintGiftGenesis(address _to) public onlyRole(ADMIN_ROLE) {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        require(genesisStatus, \"GENESIS MINT CURRENTLY INACTIVE\");\r\n        require(GenesisNft.totalSupply() < 500, \"INSUFICIENT GENESIS STOCK\");\r\n\r\n        uint256 _id = GenesisNft.currentIndex();\r\n        genesisHolder[_id] = Genesis({tokenId: _id, owner: _to, claimed: false});\r\n\r\n        GenesisNft.mint(_to, 1);\r\n\r\n        if (GenesisNft.totalSupply() == 500) {\r\n            genesisStatus = false;\r\n        }\r\n\r\n        emit GenesisMinted(_to, _id, 1);\r\n    }\r\n\r\n    function mintSubscription(\r\n        address _to,\r\n        uint256 _quantity,\r\n        uint256 _referralCode\r\n    ) public payable {\r\n        INft SubscriptionNft = INft(subsContractAddress);\r\n        uint256 amountPaidPerNFT;\r\n\r\n        require(subscriptionStatus, \"SUBS MINT CURRENTLY INACTIVE\");\r\n        require(SubscriptionNft.totalSupply() + _quantity <= subscriptionSupply, \"INSUFICIENT SUBSCRIPTION STOCK\");\r\n\r\n        if (subsStage == SubscriptionStage.TIER_ONE) {\r\n            if (_quantity + SubscriptionNft.totalSupply() <= subscriptionDetails.tierOneQuantities) {\r\n                require(msg.value >= (subscriptionDetails.tierOnePrice * _quantity), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierOnePrice;\r\n            } else {\r\n                uint256 amountLeftOfTierOne = subscriptionDetails.tierOneQuantities - SubscriptionNft.totalSupply();\r\n                uint256 amountToPayTierOne = amountLeftOfTierOne * subscriptionDetails.tierOnePrice;\r\n                uint256 amountOfTierTwoMinted = _quantity - amountLeftOfTierOne;\r\n                uint256 amountToPayTierTwo = amountOfTierTwoMinted * subscriptionDetails.tierTwoPrice;\r\n                require(msg.value == (amountToPayTierOne + amountToPayTierTwo), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierOnePrice;\r\n            }\r\n        } else if (subsStage == SubscriptionStage.TIER_TWO) {\r\n            if (\r\n                _quantity + SubscriptionNft.totalSupply() <=\r\n                subscriptionDetails.tierTwoQuantities + subscriptionDetails.tierOneQuantities\r\n            ) {\r\n                require(msg.value == (subscriptionDetails.tierTwoPrice * _quantity), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierTwoPrice;\r\n            } else {\r\n                uint256 amountLeftOfTierTwo = (subscriptionDetails.tierTwoQuantities +\r\n                    subscriptionDetails.tierOneQuantities) - SubscriptionNft.totalSupply();\r\n                uint256 amountToPayTierTwo = amountLeftOfTierTwo * subscriptionDetails.tierTwoPrice;\r\n                uint256 amountOfTierThreeMinted = _quantity - amountLeftOfTierTwo;\r\n                uint256 amountToPayTierThree = amountOfTierThreeMinted * subscriptionDetails.tierThreePrice;\r\n                require(msg.value == (amountToPayTierTwo + amountToPayTierThree), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierTwoPrice;\r\n            }\r\n        } else if (subsStage == SubscriptionStage.TIER_THREE) {\r\n            if (\r\n                _quantity + SubscriptionNft.totalSupply() <=\r\n                subscriptionDetails.tierThreeQuantities +\r\n                    subscriptionDetails.tierTwoQuantities +\r\n                    subscriptionDetails.tierOneQuantities\r\n            ) {\r\n                require(msg.value == (subscriptionDetails.tierThreePrice * _quantity), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierThreePrice;\r\n            } else {\r\n                uint256 amountLeftOfTierThree = (subscriptionDetails.tierTwoQuantities +\r\n                    subscriptionDetails.tierOneQuantities +\r\n                    subscriptionDetails.tierThreeQuantities) - SubscriptionNft.totalSupply();\r\n                uint256 amountToPayTierThree = amountLeftOfTierThree * subscriptionDetails.tierThreePrice;\r\n                uint256 amountOfTierFourMinted = _quantity - amountLeftOfTierThree;\r\n                uint256 amountToPayTierFour = amountOfTierFourMinted * subscriptionDetails.tierFourPrice;\r\n                require(msg.value == (amountToPayTierThree + amountToPayTierFour), \"INSUFFICIENT MINTING VALUE\");\r\n                amountPaidPerNFT = subscriptionDetails.tierThreePrice;\r\n            }\r\n        } else if (subsStage == SubscriptionStage.TIER_FOUR) {\r\n            require(msg.value == (subscriptionDetails.tierFourPrice * _quantity), \"INSUFFICIENT MINTING VALUE\");\r\n            amountPaidPerNFT = subscriptionDetails.tierFourPrice;\r\n        }\r\n\r\n        uint256 _id = SubscriptionNft.currentIndex();\r\n\r\n        do {\r\n            subsHolder[_id] = Subscription({\r\n                tokenId: _id,\r\n                owner: _to,\r\n                price: amountPaidPerNFT,\r\n                expired: false,\r\n                renewed: false,\r\n                renewalExpire: 0\r\n            });\r\n\r\n            unchecked {\r\n                ++_id;\r\n            }\r\n        } while (_id < (_quantity + SubscriptionNft.currentIndex()));\r\n\r\n        SubscriptionNft.mint(_to, _quantity);\r\n\r\n        if (\r\n            SubscriptionNft.totalSupply() >=\r\n            (subscriptionDetails.tierThreeQuantities +\r\n                subscriptionDetails.tierTwoQuantities +\r\n                subscriptionDetails.tierOneQuantities)\r\n        ) {\r\n            subsStage = SubscriptionStage.TIER_FOUR;\r\n        } else if (\r\n            SubscriptionNft.totalSupply() >=\r\n            (subscriptionDetails.tierTwoQuantities + subscriptionDetails.tierOneQuantities)\r\n        ) {\r\n            subsStage = SubscriptionStage.TIER_THREE;\r\n        } else if (SubscriptionNft.totalSupply() >= subscriptionDetails.tierOneQuantities) {\r\n            subsStage = SubscriptionStage.TIER_TWO;\r\n        }\r\n\r\n        if (referralCodes[msg.sender] == 0) {\r\n            uint256 referralCode = _generateReferralCode(msg.sender, _quantity);\r\n            referralCodes[msg.sender] = referralCode;\r\n            codeToAddress[referralCode] = msg.sender;\r\n        }\r\n\r\n        if (_referralCode != 0) {\r\n            require(isCodeValid(_referralCode), \"INVALID REFERRAL CODE\");\r\n            address referee = codeToAddress[_referralCode];\r\n            ITreasury treasury = ITreasury(payable(treasuryAddress));\r\n            treasury.payReward(referee);\r\n        }\r\n\r\n        cap3TreasuryFundShare(msg.value);\r\n\r\n        emit SubscriptionMinted(_to, _id, uint16(_quantity));\r\n\r\n    }\r\n\r\n    function refund(bool _state) public onlyRole(ADMIN_ROLE) {\r\n        require(genesisStatus == false, \"GENESIS MINT STILL OPEN\");\r\n        string memory boolString = _state == true ? \"true\" : \"false\";\r\n        require(refundFlag != _state, string(abi.encodePacked(\"Refund Flag already \", boolString)));\r\n        refundFlag = _state;\r\n    }\r\n\r\n    function claimRefund(uint256[] calldata tokenIds) public {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        ITreasury treasury = ITreasury(treasuryAddress);\r\n        require(genesisStatus == false, \"GENESIS MINT STILL OPEN\");\r\n        require(refundFlag == true, \"REFUND NOT OPEN\");\r\n        uint256 arrayLength = tokenIds.length;\r\n        uint256[] memory refundedTokens = new uint256[](arrayLength);\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if (GenesisNft.ownerOf(tokenId) == msg.sender) {\r\n                uint256 refundAmount = genesisPrice;\r\n                GenesisNft.burn(tokenId);\r\n                delete (genesisHolder[tokenId]);\r\n                treasury.payRefund(msg.sender, refundAmount);\r\n                refundedTokens[i] = tokenId;\r\n            }\r\n        }\r\n\r\n        emit Refunded(msg.sender, refundedTokens, genesisPrice);\r\n    }\r\n\r\n    function isCodeValid(uint256 _code) public view returns (bool) {\r\n        address referee = codeToAddress[_code];\r\n        if (referee == address(0)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function setDistibuteGenesisTokensActive() public onlyRole(ADMIN_ROLE) {\r\n        require(genesisStatus == false, \"GENESIS MINT STILL OPEN\");\r\n        require(distributeFlag != true, \"PHASE ALREADY ACTIVE\");\r\n        distributeFlag = true;\r\n        emit DistributionActive();\r\n    }\r\n\r\n    function claimDistributedTokens(uint256 _tokenID) public {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n\r\n        require(distributeFlag == true, \"DISTRIBUTION NOT OPEN\");\r\n        require(!genesisHolder[_tokenID].claimed, \"ALREADY CLAIMED\");\r\n        require(msg.sender == genesisHolder[_tokenID].owner, \"NOT NFT OWNER\");\r\n\r\n        uint256 _id = GenesisNft.currentIndex();\r\n\r\n        do {\r\n            genesisHolder[_id] = Genesis({tokenId: _id, owner: msg.sender, claimed: true});\r\n            unchecked {\r\n                ++_id;\r\n            }\r\n        } while (_id < (3 + GenesisNft.currentIndex()));\r\n\r\n        genesisHolder[_tokenID].claimed = true;\r\n        GenesisNft.mint(msg.sender, 3);\r\n\r\n        emit GenesisMinted(msg.sender, _id, 3);\r\n\r\n    }\r\n\r\n    function burnToken(uint256 _tokenId) public {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n\r\n        require(GenesisNft.totalSupply() < 500, \"TOKENS SOLDOUT\");\r\n        require(GenesisNft.ownerOf(_tokenId) == msg.sender, \"NOT TOKEN HOLDER\");\r\n        GenesisNft.burn(_tokenId);\r\n        delete (genesisHolder[_tokenId]);\r\n\r\n        unchecked {\r\n            toRefund[msg.sender] += 1;\r\n        }\r\n    }\r\n\r\n    function transferNft(address _to, uint256 _tokenId) public onlyRole(NFT_ROLE) {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        INft SubscriptionNft = INft(subsContractAddress);\r\n\r\n        if (msg.sender == genesisContractAddress) {\r\n            require(_tokenId <= GenesisNft.totalSupply(), \"INVALID ID\");\r\n            Genesis storage token = genesisHolder[_tokenId];\r\n            token.owner = _to;\r\n            emit NftTransfered(_to, _tokenId, true);\r\n        } else if (msg.sender == subsContractAddress) {\r\n            require(_tokenId <= SubscriptionNft.totalSupply(), \"INVALID ID\");\r\n            Subscription storage token = subsHolder[_tokenId];\r\n            token.owner = _to;\r\n            emit NftTransfered(_to, _tokenId, false);\r\n        }\r\n    }\r\n\r\n    function subscriptionExpiry(uint256 _tokenId) external onlyRole(EXECUTOR_ROLE) {\r\n        INft SubscriptionNft = INft(subsContractAddress);\r\n        require(_tokenId <= SubscriptionNft.currentIndex(), \"INVALID ID\");\r\n        Subscription storage token = subsHolder[_tokenId];\r\n        require(token.expired == false, \"TOKEN ALREADY EXPIRED\");\r\n        token.expired = true;\r\n        if (token.renewed == true) {\r\n            _updateSubscriptionMintBalance(_tokenId);\r\n            token.renewalExpire = 0;\r\n        } else token.renewalExpire = block.timestamp + 7 days;\r\n\r\n        emit ExpiredSubscription(token.owner, token.renewalExpire, token.tokenId);\r\n    }\r\n\r\n    function renewSubscription(uint256 _tokenId) public payable {\r\n        Subscription storage token = subsHolder[_tokenId];\r\n\r\n        require(msg.value == (token.price), \"INSUFFICIENT AMOUNT SENT\");\r\n        require(token.renewalExpire > 0, \"SUBSCRIPTION NOT EXPIRED\");\r\n        require(block.timestamp <= token.renewalExpire, \"RENEWAL DATE HAS EXPIRED\");\r\n        require(token.renewed == false, \"ALREADY RENEWED\");\r\n\r\n        cap3TreasuryFundShare(msg.value);\r\n        token.renewed = true;\r\n        token.expired = false;\r\n        emit SubscriptionRenewed(msg.sender, token.tokenId);\r\n    }\r\n\r\n    function updateSubscriptionMintBalance(uint256 _tokenId) public onlyRole(EXECUTOR_ROLE) {\r\n        _updateSubscriptionMintBalance(_tokenId);\r\n    }\r\n\r\n    function _updateSubscriptionMintBalance(uint256 _tokenId) internal {\r\n        Subscription storage token = subsHolder[_tokenId];\r\n        require(token.expired == true, \"NON EXPIRED TOKEN\");\r\n        require(block.timestamp >= token.renewalExpire, \"RENEWAL DATELINE NOT PASSED\");\r\n        unchecked {\r\n            subscriptionSupply++;\r\n        }\r\n        emit SubscriptionBalanceUpdated(subscriptionSupply, _tokenId);\r\n    }\r\n\r\n    function addApprovedProposal(\r\n        string memory _id,\r\n        string memory _title,\r\n        address _author\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        proposals[_id] = Project({id: _id, description: _title, author: _author, funded: false});\r\n        ITreasury treasury = ITreasury(payable(treasuryAddress));\r\n\r\n        uint256 dollarValueOfEth = getLatestPrice();\r\n        uint256 _funds = (projectFund * 10**18) / dollarValueOfEth;\r\n\r\n        treasury.setProjectBalance(_author, _funds);\r\n        emit ProposalApproved(_id, _title, _author, _funds);\r\n    }\r\n\r\n    function fundProposal(string memory _id, uint256 _amount) public onlyRole(ADMIN_ROLE) {\r\n        Project memory proposal = proposals[_id];\r\n        require(proposal.funded == false, \"PROJECT HAS BEEN FUNDED\");\r\n        ITreasury treasury = ITreasury(treasuryAddress);\r\n\r\n        treasury.withdrawToProjectWallet(proposal.author, _amount);\r\n\r\n        if (treasury.getProjectBalance(proposal.author) == 0) {\r\n            proposal.funded = true;\r\n        }\r\n        emit ProposalFunded(_id, _amount);\r\n    }\r\n\r\n    function cap3TreasuryFundShare(uint256 _amount) internal {\r\n        uint256 dollarValueOfEth = getLatestPrice();\r\n        uint256 limitInEth = (treasuryLimit * 10**18) / dollarValueOfEth;\r\n\r\n        if (address(treasuryAddress).balance > limitInEth) {\r\n            uint256 extraBalance = address(treasuryAddress).balance - limitInEth;\r\n\r\n            ITreasury treasury = ITreasury(payable(treasuryAddress));\r\n            treasury.payRefund(cap3Wallet, extraBalance);\r\n\r\n            (bool success, ) = cap3Wallet.call{value: _amount}(\"\");\r\n            require(success, \"MINT:ETH TRANSFER FAILED\");\r\n        } else if (address(treasuryAddress).balance == limitInEth) {\r\n            (bool success, ) = cap3Wallet.call{value: _amount}(\"\");\r\n            require(success, \"MINT:ETH TRANSFER FAILED\");\r\n        } else if ((address(treasuryAddress).balance + _amount) > limitInEth) {\r\n            uint256 treasuryAmount = limitInEth - address(treasuryAddress).balance;\r\n            uint256 cap3amount = _amount - treasuryAmount;\r\n\r\n            (bool success, ) = treasuryAddress.call{value: treasuryAmount}(\"\");\r\n            require(success, \"MINT:ETH TRANSFER FAILED\");\r\n\r\n            (success, ) = cap3Wallet.call{value: cap3amount}(\"\");\r\n            require(success, \"MINT:ETH TRANSFER FAILED\");\r\n        } else if ((address(treasuryAddress).balance + _amount) <= limitInEth) {\r\n            (bool success, ) = treasuryAddress.call{value: _amount}(\"\");\r\n            require(success, \"MINT:ETH TRANSFER FAILED\");\r\n        }\r\n    }\r\n\r\n    function setTreasuryLimit(uint256 _newLimit) public onlyRole(ADMIN_ROLE) {\r\n        _setTreasuryLimit(_newLimit);\r\n    }\r\n\r\n    function switchGenesisMint(bool _state) public onlyRole(ADMIN_ROLE) {\r\n        string memory boolString = _state == true ? \"true\" : \"false\";\r\n        require(genesisStatus != _state, string(abi.encodePacked(\"Genesis Flag already \", boolString)));\r\n        genesisStatus = _state;\r\n        emit GenesisMintStateUpdated(_state);\r\n    }\r\n\r\n    function switchSubscriptionMint(bool _state) public onlyRole(ADMIN_ROLE) {\r\n        string memory boolString = _state == true ? \"true\" : \"false\";\r\n        require(subscriptionStatus != _state, string(abi.encodePacked(\"Subscription Flag already \", boolString)));\r\n        subscriptionStatus = _state;\r\n        emit SubscriptionMintStateUpdated(_state);\r\n    }\r\n\r\n    function switchSubscriptionStage(uint256 _stage) public onlyRole(ADMIN_ROLE) {\r\n        require(_stage <= 4, \"Invalid stage\");\r\n        require(_stage > 0, \"Invalid stage\");\r\n\r\n        if (_stage == 1) {\r\n            subsStage = SubscriptionStage.TIER_ONE;\r\n        } else if (_stage == 2) {\r\n            subsStage = SubscriptionStage.TIER_TWO;\r\n        } else if (_stage == 3) {\r\n            subsStage = SubscriptionStage.TIER_THREE;\r\n        } else {\r\n            subsStage = SubscriptionStage.TIER_FOUR;\r\n        }\r\n\r\n        emit SubscriptionStageUpdated(_stage);\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(ADMIN_ROLE) {\r\n        merkleRoot = _merkleRoot;\r\n        emit MerkleRootSet(_merkleRoot);\r\n    }\r\n\r\n    function setBackendAdress(address _backendAddress) public onlyRole(ADMIN_ROLE) {\r\n        require(_backendAddress != address(0), \"ADDRESS ZERO\");\r\n        _setupRole(EXECUTOR_ROLE, _backendAddress);\r\n        emit UpdatedBackendAddress(_backendAddress, \"EXECUTOR_ROLE\");\r\n    }\r\n\r\n    function setGenesisVotingPower(uint256 newVotingPower) public onlyRole(ADMIN_ROLE) {\r\n        genesisVotingPower = newVotingPower;\r\n    }\r\n\r\n    function setAdminRole(address _adminAddress) public onlyRole(ADMIN_ROLE) {\r\n        _setupRole(ADMIN_ROLE, _adminAddress);\r\n    }\r\n\r\n    function setGenesisPrice(uint256 price) public onlyRole(ADMIN_ROLE) {\r\n        genesisPrice = price;\r\n    }\r\n\r\n    function setSubscriptionPrice(uint256 price, uint256 tier) public onlyRole(ADMIN_ROLE) {\r\n        if (tier == 1) {\r\n            subscriptionDetails.tierOnePrice = price;\r\n        } else if (tier == 2) {\r\n            subscriptionDetails.tierTwoPrice = price;\r\n        } else if (tier == 3) {\r\n            subscriptionDetails.tierThreePrice = price;\r\n        } else if (tier == 4) {\r\n            subscriptionDetails.tierFourPrice = price;\r\n        }\r\n\r\n        emit SubscriptionPriceUpdated(tier, price);\r\n    }\r\n\r\n    function setSubscriptionQuantities(uint256 quantity, uint256 tier) public onlyRole(ADMIN_ROLE) {\r\n        if (tier == 1) {\r\n            subscriptionDetails.tierOneQuantities = quantity;\r\n        } else if (tier == 2) {\r\n            subscriptionDetails.tierTwoQuantities = quantity;\r\n        } else if (tier == 3) {\r\n            subscriptionDetails.tierThreeQuantities = quantity;\r\n        } else if (tier == 4) {\r\n            subscriptionDetails.tierFourQuantities = quantity;\r\n        }\r\n\r\n        emit SubscriptionQuantitesUpdated(tier, quantity);\r\n    }\r\n\r\n    function setProjectFundDollars(uint256 price) public onlyRole(ADMIN_ROLE) {\r\n        projectFund = price;\r\n    }\r\n\r\n    function setSubscriptionVotingPower(uint256 newVotingPower) public onlyRole(ADMIN_ROLE) {\r\n        subscriptionVotingPower = newVotingPower;\r\n    }\r\n\r\n    function setCap3Wallet(address _wallet) public onlyRole(ADMIN_ROLE) {\r\n        cap3Wallet = _wallet;\r\n    }\r\n\r\n    function setGenesisSupply(uint256 _newGenesisSupply) public onlyRole(ADMIN_ROLE) {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        require(_newGenesisSupply >= GenesisNft.totalSupply());\r\n        genesisSupply = _newGenesisSupply;\r\n    }\r\n\r\n    function setGenesisMintPublic() public onlyRole(ADMIN_ROLE) {\r\n        merkleRoot = ZEROSTATE;\r\n        emit MerkleRootSet(merkleRoot);\r\n    }\r\n\r\n    function setSubscriptionSupply(uint256 _newSubscriptionSupply) public onlyRole(ADMIN_ROLE) {\r\n        INft SubscriptionNft = INft(subsContractAddress);\r\n        require(_newSubscriptionSupply >= SubscriptionNft.totalSupply());\r\n        subscriptionSupply = _newSubscriptionSupply;\r\n    }\r\n\r\n    /*------ View Functions -------*/\r\n\r\n    function verifyMerkleProof(address _user, bytes32[] calldata _merkleProof) public view returns (bool) {\r\n        return MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_user)));\r\n    }\r\n\r\n    function getGenesisSupply() public view returns (uint256) {\r\n        return genesisSupply;\r\n    }\r\n\r\n    function getSubscriptionSupply() public view returns (uint256) {\r\n        return subscriptionSupply;\r\n    }\r\n\r\n    function getProposal(string memory _tokenId) public view returns (Project memory) {\r\n        return proposals[_tokenId];\r\n    }\r\n\r\n    function getGenesisHolder(uint256 _tokenId) public view returns (Genesis memory) {\r\n        return genesisHolder[_tokenId];\r\n    }\r\n\r\n    function getSubscriptionHolder(uint256 _tokenId) public view returns (Subscription memory) {\r\n        return subsHolder[_tokenId];\r\n    }\r\n\r\n    function getTreasuryLimit() public view returns (uint256) {\r\n        return treasuryLimit;\r\n    }\r\n\r\n    function getCap3WalletAddress() public view returns (address) {\r\n        return cap3Wallet;\r\n    }\r\n\r\n    function subscriptionHasExpired(uint256 _tokenId) public view returns (bool) {\r\n        Subscription storage token = subsHolder[_tokenId];\r\n        return token.expired;\r\n    }\r\n\r\n    function userVotingPower(address _holder) public view returns (uint256) {\r\n        INft GenesisNft = INft(genesisContractAddress);\r\n        uint256 votingPower = 0;\r\n        votingPower += getValidSubscriptions(_holder) * subscriptionVotingPower;\r\n        votingPower += GenesisNft.balanceOf(_holder) * genesisVotingPower;\r\n        return votingPower;\r\n    }\r\n\r\n    function getValidSubscriptions(address _holder) public view returns (uint256) {\r\n        INft SubscriptionNft = INft(subsContractAddress);\r\n        uint256 subscriptionsValid = 0;\r\n        uint256 subscriptionsIndex = 1;\r\n        uint256 subscriptionsChecked = 0;\r\n\r\n        while (subscriptionsChecked < SubscriptionNft.balanceOf(_holder)) {\r\n            if (SubscriptionNft.ownerOf(subscriptionsIndex) == _holder) {\r\n                if (!subscriptionHasExpired(subscriptionsIndex)) {\r\n                    subscriptionsValid++;\r\n                }\r\n                subscriptionsChecked++;\r\n            }\r\n            subscriptionsIndex++;\r\n        }\r\n\r\n        return subscriptionsValid;\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (\r\n            ,\r\n            /*uint80 roundID*/\r\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\r\n            ,\r\n            ,\r\n\r\n        ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(price / 10**8);\r\n    }\r\n\r\n    function getReferralCode(address _referee) public view returns (uint256) {\r\n        return referralCodes[_referee];\r\n    }\r\n\r\n    /*------ Internal Functions -------*/\r\n\r\n    function _setTreasuryLimit(uint256 _newLimit) internal {\r\n        uint256 oldLimit = treasuryLimit;\r\n        treasuryLimit = _newLimit;\r\n        emit TreasuryLimitSet(_newLimit, oldLimit);\r\n    }\r\n\r\n    function _generateReferralCode(address _sender, uint256 _numberOfTokensMinted) internal view returns (uint256) {\r\n        uint256 randomHash = uint256(keccak256(abi.encode(_sender, _numberOfTokensMinted, block.timestamp)));\r\n        uint256 code = randomHash % 10000000;\r\n        return code;\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/AccessControl.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
12     },
13     "contracts/interfaces/ITreasury.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface ITreasury {\r\n    function withdrawToProjectWallet(address projectWallet, uint256 amount) external;\r\n\r\n    function shutdown(bool _isShutdown) external;\r\n\r\n    function viewFundsInTreasury() external view returns (uint256);\r\n\r\n    function payRefund(address _to, uint256 _amount) external;\r\n\r\n    function setProjectBalance(address _projectWallet, uint256 _balance) external;\r\n\r\n    function getProjectBalance(address _projectWallet) external view returns (uint256);\r\n\r\n    function moveFundsOutOfTreasury() external;\r\n\r\n    function setAdminRole(address _adminAddress) external;\r\n\r\n    function payReward(address _to) external;\r\n}\r\n"
15     },
16     "contracts/interfaces/IDynamic.sol": {
17       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IDynamic {\r\n    function renewSubscription(uint256 tokenid) external payable;\r\n\r\n    function mintGenesis(\r\n        address to,\r\n        bytes32[] calldata _merkleProof,\r\n        uint256 amount\r\n    ) external payable;\r\n\r\n    function mintGiftGenesis(address _to) external;\r\n\r\n    function mintSubscription(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 code\r\n    ) external payable;\r\n\r\n    function setDistibuteGenesisTokensActive() external;\r\n\r\n    function claimDistributedTokens(uint256 tokenId) external;\r\n\r\n    function subscriptionExpiry(uint256 tokenId) external;\r\n\r\n    function updateSubscriptionMintBalance(uint256 tokenId) external;\r\n\r\n    function addApprovedProposal(\r\n        string memory id,\r\n        string memory title,\r\n        address author\r\n    ) external;\r\n\r\n    function transferNft(address _to, uint256 _tokenId) external;\r\n\r\n    function fundProposal(string memory id, uint256 amount) external;\r\n\r\n    function getReferralCode(address referree) external view returns (uint256);\r\n}\r\n"
18     },
19     "contracts/interfaces/INft.sol": {
20       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\nimport \"erc721a/contracts/IERC721A.sol\";\r\n\r\ninterface INft is IERC721A {\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function currentIndex() external returns (uint256);\r\n}\r\n"
21     },
22     "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
24     },
25     "@openzeppelin/contracts/access/IAccessControl.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/Strings.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
39     },
40     "erc721a/contracts/IERC721A.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
42     }
43   },
44   "settings": {
45     "optimizer": {
46       "enabled": true,
47       "runs": 200
48     },
49     "outputSelection": {
50       "*": {
51         "*": [
52           "evm.bytecode",
53           "evm.deployedBytecode",
54           "devdoc",
55           "userdoc",
56           "metadata",
57           "abi"
58         ]
59       }
60     },
61     "libraries": {}
62   }
63 }}