1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/BlooLoopsRevival.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n                                      ..                                                            \r\n                                    #@@@@=                                                          \r\n                               +%@%#@@++@@:                                                         \r\n                              *@@=+%@@* @@@%%%@@@@@%%%##*+=-:                                       \r\n                              -@@@#-.:  -**+=========++*#%@@@@%*=.                                  \r\n                             .+%@@#-                        .-+%@@%=                                \r\n                            +@@%=                               .=%@@+                              \r\n                          .%@@-                                    =@@%:                            \r\n                         .@@%.                                      .#@@:                           \r\n                         %@%                                         .%@@                           \r\n                        +@@:                             :-           :@@+                          \r\n                        @@%                             .@@%.          #@@                          \r\n                       :@@=      .                      .@@@@:         =@@:                         \r\n                       -@@-    -%@@+                    .@@@@@=        -@@-                         \r\n                       =@@@@@@@@@*%@@@@@@@@@@@@@@@@@@@@@@@@++@@@@@@@@@@@@@=                         \r\n                        --*@@+--   ---=++---------------=+=  :----==*@@*--                          \r\n                          -@@-      .#@@@%-           .#@@@%:       -@@=                            \r\n                          -@@-      %@@@@@@:          %@@@@@@.      -@@=                            \r\n                          -@@-     :@@@@@@@*         -@@@@@@@+      -@@=                            \r\n                         -*@@-     :@@@@@@@*         -@@@@@@@+      =@@*-                           \r\n                       +@@@@@=      @@@@@@@-          @@@@@@@:      =@@@@@+                         \r\n                      +@@=.@@+     #@*=--+%@.        %@*=--+%@.     +@@.=@@+                        \r\n                      *@@  @@#             .                 .      #@@  @@*                        \r\n  =*#%%%%%#+:         .::. :::                                     .=-: :=-.     @@@@@%#=           \r\n  :*@@@%-*@@@.  +@@@@@=   =******+:  :+******=       #@@@@@:  :#%@@@@# :@@@@%#+  @@@%*%@@% :-=+++=  \r\n   .@@@%.:%@@.  =%@@@@=  =@@@@%@@@%  @@@@%@@@@-      +@@@@@:  #@@*+@@@ =@@@-@@@- @@@+ .@@@-@@@=%@@. \r\n    @@@@@@@@-    *@@@@-  #@@@= @@@@.-@@@% *@@@+       #@@@@:  @@@=-@@@.*@@% %@@+ @@@%%@@@% %@@**+=: \r\n    #@@@@@@@@%+. +@@@@-  %@@@- %@@@:=@@@# =@@@*       #@@@@. .@@@=+@@@:*@@@.%@@* %@@@@@@+  :#%%@@@# \r\n    *@@@*.-*@@@@.=@@@@-  *@@@+=@@@@ :@@@%-#@@@=       *@@@@. .@@@@@@@@:*@@@@@@@* %@@%+-    -*+=:@@# \r\n    +@@@% .+@@@@.-@@@@=:.:@@@@@@@@*  #@@@@@@@%.       +@@@@--.=+*####*.=#####*+: %@@*      =@@@%%#= \r\n    =@@@@@@@@@*: :+++***:   ...        ....           -+++***.                   +**=       .       \r\n    .====--:.                                                                                                                              \r\n                                                                                                                                                   \r\n*/\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"./BlooLoopsInterface.sol\";\r\n\r\ncontract BlooLoopsRevival is Ownable, ReentrancyGuard {\r\n  using Strings for uint256;\r\n\r\n  address public blooLoopsAddress;\r\n  uint256 public maxSupply = 2900;\r\n  uint256 public currentSupply = 2801;\r\n  bool public sleepMachine = false;\r\n  bool public revivalMachine = false;\r\n  bool public publicRevival = false;\r\n  uint256 public publicRevivalPrice = 0.02 ether;\r\n\r\n  address public vault;\r\n  address public beneficiary;\r\n\r\n  mapping(address => uint256) public sleepDonuts;\r\n  mapping(address => uint256) public revivalDonuts;\r\n\r\n  constructor (address _blooLoopsAddress, address _beneficiary, address _vault) {\r\n    blooLoopsAddress = _blooLoopsAddress;\r\n    beneficiary =_beneficiary;\r\n    vault = _vault;\r\n  }\r\n\r\n  function setBlooLoopsAddress(address _blooLoopsAddress) public onlyOwner {\r\n    blooLoopsAddress = _blooLoopsAddress;\r\n  }\r\n\r\n  function setbeneficiary(address _beneficiary) public onlyOwner {\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  function setVault(address _vault) public onlyOwner {\r\n    vault = _vault;\r\n  }\r\n\r\n  function setMaxSupply(uint256 _maxSupply) public onlyOwner {\r\n    maxSupply = _maxSupply;\r\n  }\r\n\r\n  function setCurrentSupply(uint256 _currentSupply) public onlyOwner {\r\n    currentSupply = _currentSupply;\r\n  }\r\n\r\n  function setPublicRevivalPrice(uint256 _price) public onlyOwner {\r\n    publicRevivalPrice = _price;\r\n  }\r\n\r\n  function setSleepMachine(bool _sleepMachine) public onlyOwner {\r\n    sleepMachine = _sleepMachine;\r\n  }\r\n\r\n  function setRevivalMachine(bool _revivalMachine) public onlyOwner {\r\n    revivalMachine = _revivalMachine;\r\n  }\r\n\r\n  function setPublicRevival(bool _publicRevival) public onlyOwner {\r\n    publicRevival = _publicRevival;\r\n  }\r\n\r\n  function getSleepDounts(address _address) public view returns (uint256) {\r\n      return sleepDonuts[_address];\r\n  }\r\n\r\n  function addSleepDonuts(address[] memory addresses, uint256 _donuts) public onlyOwner {\r\n    for (uint256 i; i < addresses.length; i++) {\r\n      sleepDonuts[addresses[i]] = _donuts;\r\n    }\r\n  }\r\n\r\n  function getRevivalDounts(address _address) public view returns (uint256) {\r\n      return revivalDonuts[_address];\r\n  }\r\n\r\n  function addRevivalDonuts(address[] memory addresses, uint256 _donuts) public onlyOwner {\r\n    for (uint256 i; i < addresses.length; i++) {\r\n      revivalDonuts[addresses[i]] = _donuts;\r\n    }\r\n  }\r\n\r\n  function sleepBloo(uint256 tokenId) public {\r\n    uint256 donuts = sleepDonuts[msg.sender];\r\n\r\n    require(sleepMachine == true, \"Sleeping Machine is off\");\r\n    require(donuts > 0, \"Not enough Sleep Donuts\");\r\n    require(currentSupply < maxSupply, \"All bloos have been revived\");\r\n    sleepDonuts[msg.sender]--;\r\n    BlooLoopsInterface(blooLoopsAddress).transferFrom(msg.sender, vault, tokenId);\r\n    revivalDonuts[msg.sender]++;\r\n  }\r\n\r\n  function reviveBloo() public {\r\n    uint256 donuts = revivalDonuts[msg.sender];\r\n\r\n    require(revivalMachine == true, \"Revival Machine is off\");\r\n    require(donuts > 0, \"Not enough Revival Donuts\");\r\n    require(currentSupply < maxSupply, \"All bloos have been revived\");\r\n\r\n    revivalDonuts[msg.sender]--;\r\n    BlooLoopsInterface(blooLoopsAddress).transferFrom(vault, msg.sender, currentSupply);\r\n    currentSupply++;\r\n  }\r\n\r\n  function revivePublicBloo(uint256 count) public payable {\r\n    require(publicRevival == true, \"Revival is finished/paused\");\r\n    require(currentSupply + count <= maxSupply, \"All bloos have been revived\");\r\n    require(msg.value == publicRevivalPrice * count, \"Insufficient amount\");\r\n\r\n    for (uint256 i = 1; i <= count; i++) {\r\n      BlooLoopsInterface(blooLoopsAddress).transferFrom(vault, msg.sender, currentSupply);\r\n      currentSupply++;\r\n    }\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    payable(beneficiary).transfer(address(this).balance);\r\n  }\r\n}"
6     },
7     "contracts/BlooLoopsInterface.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface BlooLoopsInterface {\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n}"
9     },
10     "@openzeppelin/contracts/utils/Strings.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/access/Ownable.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     }
43   }
44 }}