1 {{
2   "language": "Solidity",
3   "sources": {
4     "PckrDronesOrchestrator.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./PckrDronesInterface.sol\";\r\nimport \"./HpprsInterface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PckrDronesOrchestrator is Ownable {\r\n    uint256 public dronesMintPrice = 0.05 ether;\r\n    uint256 public dronesPreMintPrice = 0.04 ether;\r\n    uint256 public tradeStart = 1677596400;\r\n    uint256 public premintStart = 1677682800;\r\n    uint256 public premintEnd = 1677769140;\r\n    uint256 public mintStart = 1677769200;\r\n\r\n    uint256 public maxPreMintsPerWallet = 2;\r\n    uint256 public maxMintsPerTransaction = 10;\r\n\r\n    address public secret = 0x9C17E0f19f6480747436876Cee672150d39426A5;\r\n\r\n    PckrDronesInterface public drones = PckrDronesInterface(0x25720B5936043ed7A322ac63459e65eCf4cDF501);\r\n    HpprsInterface public hpprs = HpprsInterface(0xE2609354791Bf57E54B3f7F9A26b2dacBed61DA1);\r\n\r\n    mapping(address => uint) public walletsPreMints;\r\n\r\n    event Mint(address owner, uint256 tokenAmount);\r\n    event Trade(address owner, uint256 tokenAmount);\r\n\r\n    function setSettings(\r\n        address _drones,\r\n        address _hpprs,\r\n        address _secret,\r\n        uint256 _dronesPreMintPrice,\r\n        uint256 _dronesMintPrice,\r\n        uint256 _maxPreMintsPerWallet,\r\n        uint256 _maxMintsPerTransaction,\r\n        uint256 _tradeStart,\r\n        uint256 _premintStart,\r\n        uint256 _premintEnd,\r\n        uint256 _mintStart\r\n    ) external onlyOwner {\r\n        hpprs = HpprsInterface(_hpprs);\r\n        drones = PckrDronesInterface(_drones);\r\n        secret = _secret;\r\n        dronesMintPrice = _dronesMintPrice;\r\n        dronesPreMintPrice = _dronesPreMintPrice;\r\n        maxPreMintsPerWallet = _maxPreMintsPerWallet;\r\n        maxMintsPerTransaction = _maxMintsPerTransaction;\r\n        tradeStart = _tradeStart;\r\n        premintStart = _premintStart;\r\n        premintEnd = _premintEnd;\r\n        mintStart = _mintStart;\r\n    }\r\n\r\n    function setTimers(\r\n        uint256 _tradeStart,\r\n        uint256 _premintStart,\r\n        uint256 _premintEnd,\r\n        uint256 _mintStart) external onlyOwner {\r\n        tradeStart = _tradeStart;\r\n        premintStart = _premintStart;\r\n        premintEnd = _premintEnd;\r\n        mintStart = _mintStart;\r\n    }\r\n\r\n    function setSalePrices(uint256 _dronesPreMintPrice, uint256 _dronesMintPrice) external onlyOwner {\r\n        dronesPreMintPrice = _dronesPreMintPrice;\r\n        dronesMintPrice = _dronesMintPrice;\r\n    }\r\n\r\n    function preMintDrone(uint256 tokenAmount, bytes calldata signature) external payable {\r\n        require(block.timestamp >= premintStart && block.timestamp <= premintEnd, \"Presale is closed\");\r\n        require(tokenAmount + walletsPreMints[msg.sender] <= maxPreMintsPerWallet, \"Cannot exceed max premint\");\r\n        require(msg.value == tokenAmount * dronesPreMintPrice, \"Wrong ETH amount\");\r\n        require(\r\n            _verifyHashSignature(keccak256(abi.encode(msg.sender)), signature),\r\n            \"Signature is invalid\"\r\n        );\r\n\r\n        walletsPreMints[msg.sender] += tokenAmount;\r\n        emit Mint(msg.sender, tokenAmount);\r\n        drones.airdrop(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function mintDrone(uint256 tokenAmount) external payable {\r\n        require(block.timestamp >= mintStart, \"Mint is closed\");\r\n        require(msg.value == tokenAmount * dronesMintPrice, \"Wrong ETH amount\");\r\n        require(tokenAmount <= maxMintsPerTransaction, \"Limit per transaction\");\r\n\r\n        emit Mint(msg.sender, tokenAmount);\r\n        drones.airdrop(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function tradeDrone(uint256[] calldata hpprsIds) external {\r\n        require(block.timestamp >= tradeStart, \"Trade is closed\");\r\n\r\n        for (uint256 i = 0; i < hpprsIds.length; i++) {\r\n            require(hpprs.ownerOf(hpprsIds[i]) == msg.sender, \"Not HPPR owner\");\r\n            hpprs.burn(hpprsIds[i]);\r\n        }\r\n\r\n        emit Trade(msg.sender, hpprsIds.length * 2);\r\n        drones.airdrop(msg.sender, hpprsIds.length * 2);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(0xB3b3C662B547eBc3cDE4C481d9fB63f03a8d90Eb).transfer(address(this).balance);\r\n    }\r\n\r\n    function _verifyHashSignature(bytes32 freshHash, bytes memory signature) internal view returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", freshHash)\r\n        );\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (signature.length != 65) {\r\n            return false;\r\n        }\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        address signer = address(0);\r\n        if (v == 27 || v == 28) {\r\n            signer = ecrecover(hash, v, r, s);\r\n        }\r\n        return secret == signer;\r\n    }\r\n}\r\n"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "HpprsInterface.sol": {
11       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface HpprsInterface {\r\n    function burn(uint256) external;\r\n    function ownerOf(uint256) external returns (address);\r\n}\r\n"
12     },
13     "PckrDronesInterface.sol": {
14       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface PckrDronesInterface {\r\n    function airdrop(address receiver, uint256 amount) external;\r\n}"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "optimizer": {
22       "enabled": false,
23       "runs": 200
24     },
25     "outputSelection": {
26       "*": {
27         "*": [
28           "evm.bytecode",
29           "evm.deployedBytecode",
30           "devdoc",
31           "userdoc",
32           "metadata",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}