1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/RedlionStudiosMinter.sol": {
5       "content": "pragma solidity ^0.8.0;\n\nimport \"./IRedlionStudios.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n\ninterface ERC1155 {\n    function burn(address _owner, uint256 _id, uint256 _value) external;\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n}\n\ncontract RedlionStudiosMinter is Ownable {\n\n    using BitMaps for BitMaps.BitMap;\n\n    struct Sale {\n        uint128 onSale;\n        uint128 price;\n        bytes32 merkleRoot;\n    }\n\n    IRedlionStudios public studios;\n\n    uint public limitPerBuy = 5;\n\n    mapping (uint => Sale) public sales; // publication => sale mapping\n    mapping (address => BitMaps.BitMap) private _claimedAirdrop;\n\n    constructor(address _studios) {\n        studios = IRedlionStudios(_studios);\n    }\n\n    function withdraw(address recipient) onlyOwner public {\n        uint amount = address(this).balance;\n        payable(recipient).transfer(amount);\n    }\n\n    function setOnSale(uint256 publication, uint128 onSale) onlyOwner public {\n        sales[publication].onSale = onSale;\n    }\n\n    function setMintingPrice(uint256 publication, uint128 price) onlyOwner public {\n        sales[publication].price = price;\n    }\n\n    function setMerkleAirdrop(uint256 publication, bytes32 root) onlyOwner public {\n        sales[publication].merkleRoot = root;\n    }\n\n    function createNewSale(uint256 publication, uint128 onSale, uint128 price, bytes32 root) onlyOwner public {\n        sales[publication] = Sale(onSale, price, root);\n    }\n\n    function setLimitPerBuy(uint limit) onlyOwner public {\n        limitPerBuy = limit;\n    }\n\n    function claim(uint256 publication, bytes32[] calldata proof, uint256 amount) public {\n        require(!_claimedAirdrop[msg.sender].get(publication), \"ALREADY CLAIMED FOR PUBLICATION\");\n        _claimedAirdrop[msg.sender].set(publication);\n        require(MerkleProof.verify(proof, sales[publication].merkleRoot, keccak256(abi.encodePacked(msg.sender, amount))), \"INVALID PROOF\");\n        studios.mint(publication, uint128(amount), msg.sender);\n    }\n    \n    function purchase(uint publication, uint128 amount) public payable {\n        require(msg.value == sales[publication].price * amount, \"INCORRECT MSG.VALUE\");\n        require(amount <= limitPerBuy, \"OVER LIMIT\");\n        sales[publication].onSale -= amount;\n        studios.mint(publication, amount, msg.sender);\n    }\n\n    function mintGenesis() public {\n        ERC1155 rewards = ERC1155(0x0Aa3850C4e084402D68F47b0209f222041093915);\n        uint256 balance0 = rewards.balanceOf(msg.sender, 10003);\n        uint256 balance1 = rewards.balanceOf(msg.sender, 10002);\n        require(balance0 > 0 || balance1 > 0, \"Nothing to burn\");\n        //burn token in user's stead\n        if (balance0 > 0) rewards.burn(msg.sender, 10003, balance0);\n        if (balance1 > 0) rewards.burn(msg.sender, 10002, balance1);\n        studios.mint(0, uint128(balance0+balance1), msg.sender);\n\n    }\n\n    function isAirdropClaimed(address user, uint publication) public view returns (bool) {\n        return _claimedAirdrop[user].get(publication);\n    }\n}"
6     },
7     "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/access/Ownable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
15     },
16     "contracts/IRedlionStudios.sol": {
17       "content": "pragma solidity ^0.8.0;\n\ninterface IRedlionStudios {\n    function mint(uint publication, uint128 amount, address to) external;\n}"
18     },
19     "@openzeppelin/contracts/utils/Context.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
21     }
22   },
23   "settings": {
24     "optimizer": {
25       "enabled": false,
26       "runs": 200
27     },
28     "outputSelection": {
29       "*": {
30         "*": [
31           "evm.bytecode",
32           "evm.deployedBytecode",
33           "abi"
34         ]
35       }
36     }
37   }
38 }}