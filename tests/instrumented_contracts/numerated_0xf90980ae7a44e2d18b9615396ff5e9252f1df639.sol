1 /*
2 * Generated by @Thrasher66099
3 * Email thrasher66099@gmail.com for your NFT launch needs
4 */
5 
6 pragma solidity ^0.8.0;
7 
8 interface IByteContract {
9     function burn(address _from, uint256 _amount) external;
10 }
11 
12 /**
13  * @dev Interface of the ERC165 standard, as defined in the
14  * https://eips.ethereum.org/EIPS/eip-165[EIP].
15  *
16  * Implementers can declare support of contract interfaces, which can then be
17  * queried by others ({ERC165Checker}).
18  *
19  * For an implementation, see {ERC165}.
20  */
21 interface IERC165 {
22     /**
23      * @dev Returns true if this contract implements the interface defined by
24      * `interfaceId`. See the corresponding
25      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
26      * to learn more about how these ids are created.
27      *
28      * This function call must use less than 30 000 gas.
29      */
30     function supportsInterface(bytes4 interfaceId) external view returns (bool);
31 }
32 
33 /**
34  * @dev Required interface of an ERC721 compliant contract.
35  */
36 interface IERC721 is IERC165 {
37     /**
38      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
39      */
40     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
41 
42     /**
43      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
44      */
45     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
46 
47     /**
48      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
49      */
50     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
51 
52     /**
53      * @dev Returns the number of tokens in ``owner``'s account.
54      */
55     function balanceOf(address owner) external view returns (uint256 balance);
56 
57     /**
58      * @dev Returns the owner of the `tokenId` token.
59      *
60      * Requirements:
61      *
62      * - `tokenId` must exist.
63      */
64     function ownerOf(uint256 tokenId) external view returns (address owner);
65 
66     /**
67      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
68      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
69      *
70      * Requirements:
71      *
72      * - `from` cannot be the zero address.
73      * - `to` cannot be the zero address.
74      * - `tokenId` token must exist and be owned by `from`.
75      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
76      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
77      *
78      * Emits a {Transfer} event.
79      */
80     function safeTransferFrom(
81         address from,
82         address to,
83         uint256 tokenId
84     ) external;
85 
86     /**
87      * @dev Transfers `tokenId` token from `from` to `to`.
88      *
89      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
90      *
91      * Requirements:
92      *
93      * - `from` cannot be the zero address.
94      * - `to` cannot be the zero address.
95      * - `tokenId` token must be owned by `from`.
96      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
97      *
98      * Emits a {Transfer} event.
99      */
100     function transferFrom(
101         address from,
102         address to,
103         uint256 tokenId
104     ) external;
105 
106     /**
107      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
108      * The approval is cleared when the token is transferred.
109      *
110      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
111      *
112      * Requirements:
113      *
114      * - The caller must own the token or be an approved operator.
115      * - `tokenId` must exist.
116      *
117      * Emits an {Approval} event.
118      */
119     function approve(address to, uint256 tokenId) external;
120 
121     /**
122      * @dev Returns the account approved for `tokenId` token.
123      *
124      * Requirements:
125      *
126      * - `tokenId` must exist.
127      */
128     function getApproved(uint256 tokenId) external view returns (address operator);
129 
130     /**
131      * @dev Approve or remove `operator` as an operator for the caller.
132      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
133      *
134      * Requirements:
135      *
136      * - The `operator` cannot be the caller.
137      *
138      * Emits an {ApprovalForAll} event.
139      */
140     function setApprovalForAll(address operator, bool _approved) external;
141 
142     /**
143      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
144      *
145      * See {setApprovalForAll}
146      */
147     function isApprovedForAll(address owner, address operator) external view returns (bool);
148 
149     /**
150      * @dev Safely transfers `tokenId` token from `from` to `to`.
151      *
152      * Requirements:
153      *
154      * - `from` cannot be the zero address.
155      * - `to` cannot be the zero address.
156      * - `tokenId` token must exist and be owned by `from`.
157      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
158      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
159      *
160      * Emits a {Transfer} event.
161      */
162     function safeTransferFrom(
163         address from,
164         address to,
165         uint256 tokenId,
166         bytes calldata data
167     ) external;
168 }
169 
170 
171 
172 /**
173  * @dev String operations.
174  */
175 library Strings {
176     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
177 
178     /**
179      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
180      */
181     function toString(uint256 value) internal pure returns (string memory) {
182         // Inspired by OraclizeAPI's implementation - MIT licence
183         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
184 
185         if (value == 0) {
186             return "0";
187         }
188         uint256 temp = value;
189         uint256 digits;
190         while (temp != 0) {
191             digits++;
192             temp /= 10;
193         }
194         bytes memory buffer = new bytes(digits);
195         while (value != 0) {
196             digits -= 1;
197             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
198             value /= 10;
199         }
200         return string(buffer);
201     }
202 
203 
204     /**
205      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation. 
206      */
207     function toHexString(uint256 value) internal pure returns (string memory) {
208         if (value == 0) {
209             return "0x00";
210         }
211         uint256 temp = value;
212         uint256 length = 0;
213         while (temp != 0) {
214             length++;
215             temp >>= 8;
216         }
217         return toHexString(value, length);
218     }
219 
220     /**
221      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
222      */
223     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
224         bytes memory buffer = new bytes(2 * length + 2);
225         buffer[0] = "0";
226         buffer[1] = "x";
227         for (uint256 i = 2 * length + 1; i > 1; --i) {
228             buffer[i] = _HEX_SYMBOLS[value & 0xf];
229             value >>= 4;
230         }
231         require(value == 0, "Strings: hex length insufficient");
232         return string(buffer);
233     }
234 }
235 
236 
237 /*
238  * @dev Provides information about the current execution context, including the
239  * sender of the transaction and its data. While these are generally available
240  * via msg.sender and msg.data, they should not be accessed in such a direct
241  * manner, since when dealing with meta-transactions the account sending and
242  * paying for execution may not be the actual sender (as far as an application
243  * is concerned).
244  *
245  * This contract is only required for intermediate, library-like contracts.
246  */
247 abstract contract Context {
248     function _msgSender() internal view virtual returns (address) {
249         return msg.sender;
250     }
251 
252     function _msgData() internal view virtual returns (bytes calldata) {
253         return msg.data;
254     }
255 }
256 
257 
258 /**
259  * @dev Contract module which provides a basic access control mechanism, where
260  * there is an account (an owner) that can be granted exclusive access to
261  * specific functions.
262  *
263  * By default, the owner account will be the one that deploys the contract. This
264  * can later be changed with {transferOwnership}.
265  *
266  * This module is used through inheritance. It will make available the modifier
267  * `onlyOwner`, which can be applied to your functions to restrict their use to
268  * the owner.
269  */
270 abstract contract Ownable is Context {
271     address private _owner;
272 
273     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
274 
275     /**
276      * @dev Initializes the contract setting the deployer as the initial owner.
277      */
278     constructor() {
279         _setOwner(_msgSender());
280     }
281 
282     /**
283      * @dev Returns the address of the current owner.
284      */
285     function owner() public view virtual returns (address) {
286         return _owner;
287     }
288 
289     /**
290      * @dev Throws if called by any account other than the owner.
291      */
292     modifier onlyOwner() {
293         require(owner() == _msgSender(), "Ownable: caller is not the owner");
294         _;
295     }
296 
297     /**
298      * @dev Leaves the contract without owner. It will not be possible to call
299      * `onlyOwner` functions anymore. Can only be called by the current owner.
300      *
301      * NOTE: Renouncing ownership will leave the contract without an owner,
302      * thereby removing any functionality that is only available to the owner.
303      */
304     function renounceOwnership() public virtual onlyOwner {
305         _setOwner(address(0));
306     }
307 
308     /**
309      * @dev Transfers ownership of the contract to a new account (`newOwner`).
310      * Can only be called by the current owner.
311      */
312     function transferOwnership(address newOwner) public virtual onlyOwner {
313         require(newOwner != address(0), "Ownable: new owner is the zero address");
314         _setOwner(newOwner);
315     }
316 
317     function _setOwner(address newOwner) private {
318         address oldOwner = _owner;
319         _owner = newOwner;
320         emit OwnershipTransferred(oldOwner, newOwner);
321     }
322 }
323 
324 
325 /**
326  * @dev Contract module that helps prevent reentrant calls to a function.
327  *
328  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
329  * available, which can be applied to functions to make sure there are no nested
330  * (reentrant) calls to them.
331  *
332  * Note that because there is a single `nonReentrant` guard, functions marked as
333  * `nonReentrant` may not call one another. This can be worked around by making
334  * those functions `private`, and then adding `external` `nonReentrant` entry
335  * points to them.
336  *
337  * TIP: If you would like to learn more about reentrancy and alternative ways
338  * to protect against it, check out our blog post
339  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
340  */
341 abstract contract ReentrancyGuard {
342     // Booleans are more expensive than uint256 or any type that takes up a full
343     // word because each write operation emits an extra SLOAD to first read the
344     // slot's contents, replace the bits taken up by the boolean, and then write
345     // back. This is the compiler's defense against contract upgrades and
346     // pointer aliasing, and it cannot be disabled.
347 
348     // The values being non-zero value makes deployment a bit more expensive,
349     // but in exchange the refund on every call to nonReentrant will be lower in
350     // amount. Since refunds are capped to a percentage of the total
351     // transaction's gas, it is best to keep them low in cases like this one, to
352     // increase the likelihood of the full refund coming into effect.
353     uint256 private constant _NOT_ENTERED = 1;
354     uint256 private constant _ENTERED = 2;
355 
356     uint256 private _status;
357 
358     constructor() {
359         _status = _NOT_ENTERED;
360     }
361 
362     /**
363      * @dev Prevents a contract from calling itself, directly or indirectly.
364      * Calling a `nonReentrant` function from another `nonReentrant`
365      * function is not supported. It is possible to prevent this from happening
366      * by making the `nonReentrant` function external, and make it call a
367      * `private` function that does the actual work.
368      */
369     modifier nonReentrant() {
370         // On the first call to nonReentrant, _notEntered will be true
371         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
372 
373         // Any calls to nonReentrant after this point will fail
374         _status = _ENTERED;
375 
376         _;
377 
378         // By storing the original value once again, a refund is triggered (see
379         // https://eips.ethereum.org/EIPS/eip-2200)
380         _status = _NOT_ENTERED;
381     }
382 }
383 
384 
385 
386 /**
387  * @title ERC721 token receiver interface
388  * @dev Interface for any contract that wants to support safeTransfers
389  * from ERC721 asset contracts.
390  */
391 interface IERC721Receiver {
392     /**
393      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
394      * by `operator` from `from`, this function is called.
395      *
396      * It must return its Solidity selector to confirm the token transfer.
397      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
398      *
399      * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
400      */
401     function onERC721Received(
402         address operator,
403         address from,
404         uint256 tokenId,
405         bytes calldata data
406     ) external returns (bytes4);
407 }
408 
409 
410 /**
411  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
412  * @dev See https://eips.ethereum.org/EIPS/eip-721
413  */
414 interface IERC721Metadata is IERC721 {
415     /**
416      * @dev Returns the token collection name.
417      */
418     function name() external view returns (string memory);
419 
420     /**
421      * @dev Returns the token collection symbol.
422      */
423     function symbol() external view returns (string memory);
424 
425     /**
426      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
427      */
428     function tokenURI(uint256 tokenId) external view returns (string memory);
429 }
430 
431 
432 /**
433  * @dev Collection of functions related to the address type
434  */
435 library Address {
436     /**
437      * @dev Returns true if `account` is a contract.
438      *
439      * [IMPORTANT]
440      * ====
441      * It is unsafe to assume that an address for which this function returns
442      * false is an externally-owned account (EOA) and not a contract.
443      *
444      * Among others, `isContract` will return false for the following
445      * types of addresses:
446      *
447      *  - an externally-owned account
448      *  - a contract in construction
449      *  - an address where a contract will be created
450      *  - an address where a contract lived, but was destroyed
451      * ====
452      */
453     function isContract(address account) internal view returns (bool) {
454         // This method relies on extcodesize, which returns 0 for contracts in
455         // construction, since the code is only stored at the end of the
456         // constructor execution.
457 
458         uint256 size;
459         assembly {
460             size := extcodesize(account)
461         }
462         return size > 0;
463     }
464 
465     /**
466      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
467      * `recipient`, forwarding all available gas and reverting on errors.
468      *
469      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
470      * of certain opcodes, possibly making contracts go over the 2300 gas limit
471      * imposed by `transfer`, making them unable to receive funds via
472      * `transfer`. {sendValue} removes this limitation.
473      *
474      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
475      *
476      * IMPORTANT: because control is transferred to `recipient`, care must be
477      * taken to not create reentrancy vulnerabilities. Consider using
478      * {ReentrancyGuard} or the
479      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
480      */
481     function sendValue(address payable recipient, uint256 amount) internal {
482         require(address(this).balance >= amount, "Address: insufficient balance");
483 
484         (bool success, ) = recipient.call{value: amount}("");
485         require(success, "Address: unable to send value, recipient may have reverted");
486     }
487 
488     /**
489      * @dev Performs a Solidity function call using a low level `call`. A
490      * plain `call` is an unsafe replacement for a function call: use this
491      * function instead.
492      *
493      * If `target` reverts with a revert reason, it is bubbled up by this
494      * function (like regular Solidity function calls).
495      *
496      * Returns the raw returned data. To convert to the expected return value,
497      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
498      *
499      * Requirements:
500      *
501      * - `target` must be a contract.
502      * - calling `target` with `data` must not revert.
503      *
504      * _Available since v3.1._
505      */
506     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
507         return functionCall(target, data, "Address: low-level call failed");
508     }
509 
510     /**
511      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
512      * `errorMessage` as a fallback revert reason when `target` reverts.
513      *
514      * _Available since v3.1._
515      */
516     function functionCall(
517         address target,
518         bytes memory data,
519         string memory errorMessage
520     ) internal returns (bytes memory) {
521         return functionCallWithValue(target, data, 0, errorMessage);
522     }
523 
524     /**
525      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
526      * but also transferring `value` wei to `target`.
527      *
528      * Requirements:
529      *
530      * - the calling contract must have an ETH balance of at least `value`.
531      * - the called Solidity function must be `payable`.
532      *
533      * _Available since v3.1._
534      */
535     function functionCallWithValue(
536         address target,
537         bytes memory data,
538         uint256 value
539     ) internal returns (bytes memory) {
540         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
541     }
542 
543     /**
544      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
545      * with `errorMessage` as a fallback revert reason when `target` reverts.
546      *
547      * _Available since v3.1._
548      */
549     function functionCallWithValue(
550         address target,
551         bytes memory data,
552         uint256 value,
553         string memory errorMessage
554     ) internal returns (bytes memory) {
555         require(address(this).balance >= value, "Address: insufficient balance for call");
556         require(isContract(target), "Address: call to non-contract");
557 
558         (bool success, bytes memory returndata) = target.call{value: value}(data);
559         return _verifyCallResult(success, returndata, errorMessage);
560     }
561 
562     /**
563      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
564      * but performing a static call.
565      *
566      * _Available since v3.3._
567      */
568     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
569         return functionStaticCall(target, data, "Address: low-level static call failed");
570     }
571 
572     /**
573      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
574      * but performing a static call.
575      *
576      * _Available since v3.3._
577      */
578     function functionStaticCall(
579         address target,
580         bytes memory data,
581         string memory errorMessage
582     ) internal view returns (bytes memory) {
583         require(isContract(target), "Address: static call to non-contract");
584 
585         (bool success, bytes memory returndata) = target.staticcall(data);
586         return _verifyCallResult(success, returndata, errorMessage);
587     }
588 
589     /**
590      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
591      * but performing a delegate call.
592      *
593      * _Available since v3.4._
594      */
595     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
596         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
597     }
598 
599     /**
600      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
601      * but performing a delegate call.
602      *
603      * _Available since v3.4._
604      */
605     function functionDelegateCall(
606         address target,
607         bytes memory data,
608         string memory errorMessage
609     ) internal returns (bytes memory) {
610         require(isContract(target), "Address: delegate call to non-contract");
611 
612         (bool success, bytes memory returndata) = target.delegatecall(data);
613         return _verifyCallResult(success, returndata, errorMessage);
614     }
615 
616     function _verifyCallResult(
617         bool success,
618         bytes memory returndata,
619         string memory errorMessage
620     ) private pure returns (bytes memory) {
621         if (success) {
622             return returndata;
623         } else {
624             // Look for revert reason and bubble it up if present
625             if (returndata.length > 0) {
626                 // The easiest way to bubble the revert reason is using memory via assembly
627 
628                 assembly {
629                     let returndata_size := mload(returndata)
630                     revert(add(32, returndata), returndata_size)
631                 }
632             } else {
633                 revert(errorMessage);
634             }
635         }
636     }
637 }
638 
639 
640 
641 
642 /**
643  * @dev Implementation of the {IERC165} interface.
644  *
645  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
646  * for the additional interface id that will be supported. For example:
647  *
648  * ```solidity
649  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
650  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
651  * }
652  * ```
653  *
654  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
655  */
656 abstract contract ERC165 is IERC165 {
657     /**
658      * @dev See {IERC165-supportsInterface}.
659      */
660     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
661         return interfaceId == type(IERC165).interfaceId;
662     }
663 }
664 
665 
666 /**
667  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
668  * the Metadata extension, but not including the Enumerable extension, which is available separately as
669  * {ERC721Enumerable}.
670  */
671 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
672     using Address for address;
673     using Strings for uint256;
674 
675     // Token name
676     string private _name;
677 
678     // Token symbol
679     string private _symbol;
680 
681     // Mapping from token ID to owner address
682     mapping(uint256 => address) private _owners;
683 
684     // Mapping owner address to token count
685     mapping(address => uint256) private _balances;
686 
687     // Mapping from token ID to approved address
688     mapping(uint256 => address) private _tokenApprovals;
689 
690     // Mapping from owner to operator approvals
691     mapping(address => mapping(address => bool)) private _operatorApprovals;
692 
693     /**
694      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
695      */
696     constructor(string memory name_, string memory symbol_) {
697         _name = name_;
698         _symbol = symbol_;
699     }
700 
701     /**
702      * @dev See {IERC165-supportsInterface}.
703      */
704     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
705         return
706             interfaceId == type(IERC721).interfaceId ||
707             interfaceId == type(IERC721Metadata).interfaceId ||
708             super.supportsInterface(interfaceId);
709     }
710 
711     /**
712      * @dev See {IERC721-balanceOf}.
713      */
714     function balanceOf(address owner) public view virtual override returns (uint256) {
715         require(owner != address(0), "ERC721: balance query for the zero address");
716         return _balances[owner];
717     }
718 
719     /**
720      * @dev See {IERC721-ownerOf}.
721      */
722     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
723         address owner = _owners[tokenId];
724         require(owner != address(0), "ERC721: owner query for nonexistent token");
725         return owner;
726     }
727 
728     /**
729      * @dev See {IERC721Metadata-name}.
730      */
731     function name() public view virtual override returns (string memory) {
732         return _name;
733     }
734 
735     /**
736      * @dev See {IERC721Metadata-symbol}.
737      */
738     function symbol() public view virtual override returns (string memory) {
739         return _symbol;
740     }
741 
742     /**
743      * @dev See {IERC721Metadata-tokenURI}.
744      */
745     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
746         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
747 
748         string memory baseURI = _baseURI();
749         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
750     }
751 
752     /**
753      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
754      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
755      * by default, can be overriden in child contracts.
756      */
757     function _baseURI() internal view virtual returns (string memory) {
758         return "";
759     }
760 
761     /**
762      * @dev See {IERC721-approve}.
763      */
764     function approve(address to, uint256 tokenId) public virtual override {
765         address owner = ERC721.ownerOf(tokenId);
766         require(to != owner, "ERC721: approval to current owner");
767 
768         require(
769             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
770             "ERC721: approve caller is not owner nor approved for all"
771         );
772 
773         _approve(to, tokenId);
774     }
775 
776     /**
777      * @dev See {IERC721-getApproved}.
778      */
779     function getApproved(uint256 tokenId) public view virtual override returns (address) {
780         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
781 
782         return _tokenApprovals[tokenId];
783     }
784 
785     /**
786      * @dev See {IERC721-setApprovalForAll}.
787      */
788     function setApprovalForAll(address operator, bool approved) public virtual override {
789         require(operator != _msgSender(), "ERC721: approve to caller");
790 
791         _operatorApprovals[_msgSender()][operator] = approved;
792         emit ApprovalForAll(_msgSender(), operator, approved);
793     }
794 
795     /**
796      * @dev See {IERC721-isApprovedForAll}.
797      */
798     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
799         return _operatorApprovals[owner][operator];
800     }
801 
802     /**
803      * @dev See {IERC721-transferFrom}.
804      */
805     function transferFrom(
806         address from,
807         address to,
808         uint256 tokenId
809     ) public virtual override {
810         //solhint-disable-next-line max-line-length
811         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
812 
813         _transfer(from, to, tokenId);
814     }
815 
816     /**
817      * @dev See {IERC721-safeTransferFrom}.
818      */
819     function safeTransferFrom(
820         address from,
821         address to,
822         uint256 tokenId
823     ) public virtual override {
824         safeTransferFrom(from, to, tokenId, "");
825     }
826 
827     /**
828      * @dev See {IERC721-safeTransferFrom}.
829      */
830     function safeTransferFrom(
831         address from,
832         address to,
833         uint256 tokenId,
834         bytes memory _data
835     ) public virtual override {
836         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
837         _safeTransfer(from, to, tokenId, _data);
838     }
839 
840     /**
841      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
842      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
843      *
844      * `_data` is additional data, it has no specified format and it is sent in call to `to`.
845      *
846      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
847      * implement alternative mechanisms to perform token transfer, such as signature-based.
848      *
849      * Requirements:
850      *
851      * - `from` cannot be the zero address.
852      * - `to` cannot be the zero address.
853      * - `tokenId` token must exist and be owned by `from`.
854      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
855      *
856      * Emits a {Transfer} event.
857      */
858     function _safeTransfer(
859         address from,
860         address to,
861         uint256 tokenId,
862         bytes memory _data
863     ) internal virtual {
864         _transfer(from, to, tokenId);
865         require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
866     }
867 
868     /**
869      * @dev Returns whether `tokenId` exists.
870      *
871      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
872      *
873      * Tokens start existing when they are minted (`_mint`),
874      * and stop existing when they are burned (`_burn`).
875      */
876     function _exists(uint256 tokenId) internal view virtual returns (bool) {
877         return _owners[tokenId] != address(0);
878     }
879 
880     /**
881      * @dev Returns whether `spender` is allowed to manage `tokenId`.
882      *
883      * Requirements:
884      *
885      * - `tokenId` must exist.
886      */
887     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
888         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
889         address owner = ERC721.ownerOf(tokenId);
890         return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
891     }
892 
893     /**
894      * @dev Safely mints `tokenId` and transfers it to `to`.
895      *
896      * Requirements:
897      *
898      * - `tokenId` must not exist.
899      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
900      *
901      * Emits a {Transfer} event.
902      */
903     function _safeMint(address to, uint256 tokenId) internal virtual {
904         _safeMint(to, tokenId, "");
905     }
906 
907     /**
908      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
909      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
910      */
911     function _safeMint(
912         address to,
913         uint256 tokenId,
914         bytes memory _data
915     ) internal virtual {
916         _mint(to, tokenId);
917         require(
918             _checkOnERC721Received(address(0), to, tokenId, _data),
919             "ERC721: transfer to non ERC721Receiver implementer"
920         );
921     }
922 
923     /**
924      * @dev Mints `tokenId` and transfers it to `to`.
925      *
926      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
927      *
928      * Requirements:
929      *
930      * - `tokenId` must not exist.
931      * - `to` cannot be the zero address.
932      *
933      * Emits a {Transfer} event.
934      */
935     function _mint(address to, uint256 tokenId) internal virtual {
936         require(to != address(0), "ERC721: mint to the zero address");
937         require(!_exists(tokenId), "ERC721: token already minted");
938 
939         _beforeTokenTransfer(address(0), to, tokenId);
940 
941         _balances[to] += 1;
942         _owners[tokenId] = to;
943 
944         emit Transfer(address(0), to, tokenId);
945     }
946 
947     /**
948      * @dev Destroys `tokenId`.
949      * The approval is cleared when the token is burned.
950      *
951      * Requirements:
952      *
953      * - `tokenId` must exist.
954      *
955      * Emits a {Transfer} event.
956      */
957     function _burn(uint256 tokenId) internal virtual {
958         address owner = ERC721.ownerOf(tokenId);
959 
960         _beforeTokenTransfer(owner, address(0), tokenId);
961 
962         // Clear approvals
963         _approve(address(0), tokenId);
964 
965         _balances[owner] -= 1;
966         delete _owners[tokenId];
967 
968         emit Transfer(owner, address(0), tokenId);
969     }
970 
971     /**
972      * @dev Transfers `tokenId` from `from` to `to`.
973      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
974      *
975      * Requirements:
976      *
977      * - `to` cannot be the zero address.
978      * - `tokenId` token must be owned by `from`.
979      *
980      * Emits a {Transfer} event.
981      */
982     function _transfer(
983         address from,
984         address to,
985         uint256 tokenId
986     ) internal virtual {
987         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
988         require(to != address(0), "ERC721: transfer to the zero address");
989 
990         _beforeTokenTransfer(from, to, tokenId);
991 
992         // Clear approvals from the previous owner
993         _approve(address(0), tokenId);
994 
995         _balances[from] -= 1;
996         _balances[to] += 1;
997         _owners[tokenId] = to;
998 
999         emit Transfer(from, to, tokenId);
1000     }
1001 
1002     /**
1003      * @dev Approve `to` to operate on `tokenId`
1004      *
1005      * Emits a {Approval} event.
1006      */
1007     function _approve(address to, uint256 tokenId) internal virtual {
1008         _tokenApprovals[tokenId] = to;
1009         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
1010     }
1011 
1012     /**
1013      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
1014      * The call is not executed if the target address is not a contract.
1015      *
1016      * @param from address representing the previous owner of the given token ID
1017      * @param to target address that will receive the tokens
1018      * @param tokenId uint256 ID of the token to be transferred
1019      * @param _data bytes optional data to send along with the call
1020      * @return bool whether the call correctly returned the expected magic value
1021      */
1022     function _checkOnERC721Received(
1023         address from,
1024         address to,
1025         uint256 tokenId,
1026         bytes memory _data
1027     ) private returns (bool) {
1028         if (to.isContract()) {
1029             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
1030                 return retval == IERC721Receiver(to).onERC721Received.selector;
1031             } catch (bytes memory reason) {
1032                 if (reason.length == 0) {
1033                     revert("ERC721: transfer to non ERC721Receiver implementer");
1034                 } else {
1035                     assembly {
1036                         revert(add(32, reason), mload(reason))
1037                     }
1038                 }
1039             }
1040         } else {
1041             return true;
1042         }
1043     }
1044 
1045     /**
1046      * @dev Hook that is called before any token transfer. This includes minting
1047      * and burning.
1048      *
1049      * Calling conditions:
1050      *
1051      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1052      * transferred to `to`.
1053      * - When `from` is zero, `tokenId` will be minted for `to`.
1054      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1055      * - `from` and `to` are never both zero.
1056      *
1057      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1058      */
1059     function _beforeTokenTransfer(
1060         address from,
1061         address to,
1062         uint256 tokenId
1063     ) internal virtual {}
1064 }
1065 
1066 
1067 
1068 /**
1069  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
1070  * @dev See https://eips.ethereum.org/EIPS/eip-721
1071  */
1072 interface IERC721Enumerable is IERC721 {
1073     /**
1074      * @dev Returns the total amount of tokens stored by the contract.
1075      */
1076     function totalSupply() external view returns (uint256);
1077 
1078     /**
1079      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
1080      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
1081      */
1082     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
1083 
1084     /**
1085      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
1086      * Use along with {totalSupply} to enumerate all tokens.
1087      */
1088     function tokenByIndex(uint256 index) external view returns (uint256);
1089 }
1090 
1091 
1092 /**
1093  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
1094  * enumerability of all the token ids in the contract as well as all token ids owned by each
1095  * account.
1096  */
1097 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
1098     // Mapping from owner to list of owned token IDs
1099     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
1100 
1101     // Mapping from token ID to index of the owner tokens list
1102     mapping(uint256 => uint256) private _ownedTokensIndex;
1103 
1104     // Array with all token ids, used for enumeration
1105     uint256[] private _allTokens;
1106 
1107     // Mapping from token id to position in the allTokens array
1108     mapping(uint256 => uint256) private _allTokensIndex;
1109 
1110     /**
1111      * @dev See {IERC165-supportsInterface}.
1112      */
1113     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
1114         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
1115     }
1116 
1117     /**
1118      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
1119      */
1120     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
1121         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
1122         return _ownedTokens[owner][index];
1123     }
1124 
1125     /**
1126      * @dev See {IERC721Enumerable-totalSupply}.
1127      */
1128     function totalSupply() public view virtual override returns (uint256) {
1129         return _allTokens.length;
1130     }
1131 
1132     /**
1133      * @dev See {IERC721Enumerable-tokenByIndex}.
1134      */
1135     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
1136         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
1137         return _allTokens[index];
1138     }
1139 
1140     /**
1141      * @dev Hook that is called before any token transfer. This includes minting
1142      * and burning.
1143      *
1144      * Calling conditions:
1145      *
1146      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
1147      * transferred to `to`.
1148      * - When `from` is zero, `tokenId` will be minted for `to`.
1149      * - When `to` is zero, ``from``'s `tokenId` will be burned.
1150      * - `from` cannot be the zero address.
1151      * - `to` cannot be the zero address.
1152      *
1153      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
1154      */
1155     function _beforeTokenTransfer(
1156         address from,
1157         address to,
1158         uint256 tokenId
1159     ) internal virtual override {
1160         super._beforeTokenTransfer(from, to, tokenId);
1161 
1162         if (from == address(0)) {
1163             _addTokenToAllTokensEnumeration(tokenId);
1164         } else if (from != to) {
1165             _removeTokenFromOwnerEnumeration(from, tokenId);
1166         }
1167         if (to == address(0)) {
1168             _removeTokenFromAllTokensEnumeration(tokenId);
1169         } else if (to != from) {
1170             _addTokenToOwnerEnumeration(to, tokenId);
1171         }
1172     }
1173 
1174     /**
1175      * @dev Private function to add a token to this extension's ownership-tracking data structures.
1176      * @param to address representing the new owner of the given token ID
1177      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
1178      */
1179     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
1180         uint256 length = ERC721.balanceOf(to);
1181         _ownedTokens[to][length] = tokenId;
1182         _ownedTokensIndex[tokenId] = length;
1183     }
1184 
1185     /**
1186      * @dev Private function to add a token to this extension's token tracking data structures.
1187      * @param tokenId uint256 ID of the token to be added to the tokens list
1188      */
1189     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
1190         _allTokensIndex[tokenId] = _allTokens.length;
1191         _allTokens.push(tokenId);
1192     }
1193 
1194     /**
1195      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
1196      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
1197      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
1198      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
1199      * @param from address representing the previous owner of the given token ID
1200      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
1201      */
1202     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
1203         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
1204         // then delete the last slot (swap and pop).
1205 
1206         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
1207         uint256 tokenIndex = _ownedTokensIndex[tokenId];
1208 
1209         // When the token to delete is the last token, the swap operation is unnecessary
1210         if (tokenIndex != lastTokenIndex) {
1211             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
1212 
1213             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1214             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1215         }
1216 
1217         // This also deletes the contents at the last position of the array
1218         delete _ownedTokensIndex[tokenId];
1219         delete _ownedTokens[from][lastTokenIndex];
1220     }
1221 
1222     /**
1223      * @dev Private function to remove a token from this extension's token tracking data structures.
1224      * This has O(1) time complexity, but alters the order of the _allTokens array.
1225      * @param tokenId uint256 ID of the token to be removed from the tokens list
1226      */
1227     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
1228         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
1229         // then delete the last slot (swap and pop).
1230 
1231         uint256 lastTokenIndex = _allTokens.length - 1;
1232         uint256 tokenIndex = _allTokensIndex[tokenId];
1233 
1234         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
1235         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
1236         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
1237         uint256 lastTokenId = _allTokens[lastTokenIndex];
1238 
1239         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
1240         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
1241 
1242         // This also deletes the contents at the last position of the array
1243         delete _allTokensIndex[tokenId];
1244         _allTokens.pop();
1245     }
1246 }
1247 
1248 contract NTS2LandDeploy is ERC721Enumerable, ReentrancyGuard, Ownable {
1249 
1250     bool landMintActive;
1251     address landMint;
1252     address identityContract;
1253     address bytesContract;
1254     uint256 boughtLandCount;
1255     uint256 landCost = 500 ether;
1256 
1257     bytes32[] _rootHash;
1258 
1259 
1260     // Mapping for identity tokenIds that have previously claimed
1261     mapping(uint256 => uint256) private _identityClaims;
1262 
1263     // Mapping to look up what identity minted a specific token
1264     mapping(uint256 => uint256) private _tokenMintedByIdentity;
1265 
1266     string[] private location = [
1267         "Outer Forest",
1268         "Outer Camp Grounds",
1269         "Chipland Spring Apartments",
1270         "Middlish Ooterberg",
1271         "Fritata",
1272         "Naracuga Suburbs",
1273         "Upper Ooterberg",
1274         "Pacifc Byte Hills",
1275         "Ocean Edge Park",
1276         "Ocean Edge Beachfront",
1277         "Omnipresent"
1278     ];
1279 
1280     function getLocation(uint256 tokenId) public view returns (string memory)
1281     {
1282         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1283         string memory output;
1284 
1285         NTS2LandDeploy dataContract = NTS2LandDeploy(landMint);
1286         output = dataContract.getLocation(tokenId);
1287 
1288         return output;
1289     }
1290 
1291     function getTokenClaimedByIdentityTokenId(uint256 identityTokenId) public view returns (uint256) {
1292         return _identityClaims[identityTokenId];
1293     }
1294 
1295     function getClaimantIdentityIdByTokenId(uint256 tokenId) public view returns (uint256) {
1296         return _tokenMintedByIdentity[tokenId];
1297     }
1298 
1299     function tokenURI(uint256 tokenId) override public view returns (string memory) {
1300         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
1301         
1302         string memory output;
1303 
1304         NTS2LandDeploy dataContract = NTS2LandDeploy(landMint);
1305         output = dataContract.tokenURI(tokenId);
1306 
1307         return output;
1308     }
1309 
1310     function landClaim(uint256 identityTokenId, uint256 spotOnLeaderboard, uint256 spotInWhitelist, bytes32[] memory proof) public nonReentrant {
1311         require(landMintActive, "Minting is not currently active");
1312         require(whitelistValidated(identityTokenId, spotOnLeaderboard, spotInWhitelist, proof), "That identity cannot claim that land");
1313         require(identityValidated(identityTokenId), "You are not the owner of that identity");
1314 
1315         _safeMint(_msgSender(), spotOnLeaderboard);
1316 
1317         //Set the _identityClaims value to spotOnLeaderboard for this identity so the identity cannot mint again
1318         _identityClaims[identityTokenId] = spotOnLeaderboard;
1319 
1320         //Set the identity that minted this token for reverse lookup
1321         _tokenMintedByIdentity[spotOnLeaderboard] = identityTokenId;
1322     }
1323 
1324     function buyLand() public nonReentrant
1325     {
1326         require(address(bytesContract) != address(0), "Land cannot be bought yet");
1327         IByteContract iBytes = IByteContract(bytesContract);
1328         iBytes.burn(_msgSender(), landCost);
1329         _safeMint(_msgSender(), boughtLandCount + 4501);
1330         boughtLandCount++;
1331     }
1332 
1333     //Used only in cases where the identity owner does not or cannot claim an item
1334     function emergencyClaim(uint256 identityId, uint256 tokenId) public onlyOwner {
1335         require(tokenId > 0 && tokenId < 4501, "Token ID invalid");
1336         require(!_exists(tokenId), "That token already exists");
1337         require(_identityClaims[identityId] == 0, "That identity has already claimed");
1338 
1339         _safeMint(owner(), tokenId);
1340         _identityClaims[identityId] = tokenId;
1341     }
1342 
1343     function identityValidated(uint256 identityId) internal view returns (bool) {
1344         require(_identityClaims[identityId] == 0, "This identity has minted");
1345         ERC721Enumerable identityEnumerable = ERC721Enumerable(identityContract);
1346         return(identityEnumerable.ownerOf(identityId) == _msgSender());
1347     }
1348 
1349     function whitelistValidated(uint256 identityTokenId, uint256 leaderboardSpot,uint256 index, bytes32[] memory proof) internal view returns (bool) {
1350 
1351         // Compute the merkle root
1352         bytes32 node = keccak256(abi.encodePacked(index, identityTokenId, leaderboardSpot));
1353         uint256 path = index;
1354         for (uint16 i = 0; i < proof.length; i++) {
1355             if ((path & 0x01) == 1) {
1356                 node = keccak256(abi.encodePacked(proof[i], node));
1357             } else {
1358                 node = keccak256(abi.encodePacked(node, proof[i]));
1359             }
1360             path /= 2;
1361         }
1362 
1363         // Check the merkle proof against the root hash array
1364         for(uint i = 0; i < _rootHash.length; i++)
1365         {
1366             if (node == _rootHash[i])
1367             {
1368                 return true;
1369             }
1370         }
1371 
1372         return false;
1373     }
1374 
1375     function setLandMintActive() public onlyOwner {
1376         landMintActive = !landMintActive;
1377     }
1378 
1379     function setLandCost(uint256 _cost) public onlyOwner {
1380         landCost = _cost;
1381     }
1382 
1383     function setContract(address contractAddress) public onlyOwner {
1384         landMint = contractAddress;
1385     }
1386 
1387     function setIdentityContract(address contractAddress) public onlyOwner {
1388         identityContract = contractAddress;
1389     }
1390 
1391     function setBytesAddress(address contractAddress) public onlyOwner {
1392         bytesContract = contractAddress;
1393     }
1394     
1395     
1396     function toString(uint256 value) internal pure returns (string memory) {
1397     // Inspired by OraclizeAPI's implementation - MIT license
1398     // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
1399 
1400         if (value == 0) {
1401             return "0";
1402         }
1403         uint256 temp = value;
1404         uint256 digits;
1405         while (temp != 0) {
1406             digits++;
1407             temp /= 10;
1408         }
1409         bytes memory buffer = new bytes(digits);
1410         while (value != 0) {
1411             digits -= 1;
1412             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
1413             value /= 10;
1414         }
1415         return string(buffer);
1416     }
1417     
1418     constructor() ERC721("Neo Tokyo Part 4 Land Deeds", "NTLD") Ownable() {
1419         _rootHash = new bytes32[](3);
1420         _rootHash[0] = 0x9350561bc62b4dc91ac7cec52fbb737be1282e8fe89c01775501ab718fcc6ad1;
1421         _rootHash[1] = 0xfe6b43fa814be1abe290335212f6f701b4f0754178beaeae8261abc0ccad3cfc;
1422         _rootHash[2] = 0xd544ea3841a26c32ba81f8e467be825f5378bc7fd7ebb16501d5de0905a040de;
1423 
1424         bytesContract = 0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95;
1425         identityContract = 0x698FbAACA64944376e2CDC4CAD86eaa91362cF54;
1426     }
1427 }