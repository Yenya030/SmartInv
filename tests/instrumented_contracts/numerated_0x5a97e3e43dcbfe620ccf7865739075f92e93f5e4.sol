1 {{
2   "language": "Solidity",
3   "sources": {
4     "@gearbox-protocol/integrations-v2/contracts/adapters/lido/WstETHGateway.sol": {
5       "content": "// SPDX-License-Identifier: BUSL-1.1\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IAddressProvider } from \"@gearbox-protocol/core-v2/contracts/interfaces/IAddressProvider.sol\";\nimport { IContractsRegister } from \"@gearbox-protocol/core-v2/contracts/interfaces/IContractsRegister.sol\";\n\nimport { IPoolService } from \"@gearbox-protocol/core-v2/contracts/interfaces/IPoolService.sol\";\n\nimport { IwstETH } from \"../../integrations/lido/IwstETH.sol\";\nimport { IwstETHGateWay } from \"../../integrations/lido/IwstETHGateway.sol\";\nimport { ZeroAddressException } from \"@gearbox-protocol/core-v2/contracts/interfaces/IErrors.sol\";\n\n/// @title WstETHGateway\n/// @notice Used for converting stETH <> WstETH\ncontract WstETHGateway is IwstETHGateWay {\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    IwstETH public immutable wstETH;\n    address public immutable stETH;\n\n    address public immutable pool;\n\n    // Contract version\n    uint256 public constant version = 1;\n\n    //\n    // CONSTRUCTOR\n    //\n\n    /// @dev Constructor\n    /// @param _pool wstETH pool address\n    constructor(address _pool) {\n        if (_pool == address(0)) revert ZeroAddressException(); // F:[WSTGV1-2]\n\n        IContractsRegister contractsRegister = IContractsRegister(\n            IAddressProvider(IPoolService(_pool).addressProvider())\n                .getContractsRegister()\n        ); // F:[WSTGV1-2]\n\n        if (!contractsRegister.isPool(_pool)) revert NonRegisterPoolException(); // F:[WSTGV1-2]\n\n        pool = _pool; // F:[WSTGV1-1]\n\n        wstETH = IwstETH(IPoolService(_pool).underlyingToken()); // F:[WSTGV1-1]\n\n        stETH = wstETH.stETH(); // F:[WSTGV1-1]\n\n        IERC20(wstETH.stETH()).approve(address(wstETH), type(uint256).max); // F:[WSTGV1-1]\n    }\n\n    /**\n     * @dev Adds stETH liquidity to wstETH pool\n     * - transfers the underlying to the pool\n     * - mints Diesel (LP) tokens to onBehalfOf\n     * @param amount Amount of tokens to be deposited\n     * @param onBehalfOf The address that will receive the dToken\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without a facilitator.\n     */\n    function addLiquidity(\n        uint256 amount,\n        address onBehalfOf,\n        uint256 referralCode\n    ) external override {\n        IERC20(stETH).safeTransferFrom(msg.sender, address(this), amount); // F:[WSTGV1-3]\n\n        uint256 amountWstETH = wstETH.wrap(amount); // F:[WSTGV1-3]\n\n        _checkAllowance(address(wstETH), amountWstETH);\n        IPoolService(pool).addLiquidity(amountWstETH, onBehalfOf, referralCode); // F:[WSTGV1-3]\n    }\n\n    /// @dev Removes liquidity from pool\n    ///  - burns LP's Diesel (LP) tokens\n    ///  - returns the equivalent amount of underlying to 'to'\n    /// @param amount Amount of Diesel tokens to burn\n    /// @param to Address to transfer the underlying to\n    function removeLiquidity(uint256 amount, address to)\n        external\n        override\n        returns (uint256 amountGet)\n    {\n        address dieselToken = IPoolService(pool).dieselToken(); // F:[WSTGV1-3]\n        IERC20(dieselToken).safeTransferFrom(msg.sender, address(this), amount); // F:[WSTGV1-3]\n\n        _checkAllowance(dieselToken, amount); // F:[WSTGV1-3]\n        uint256 amountWstETH = IPoolService(pool).removeLiquidity(\n            amount,\n            address(this)\n        ); // F:[WSTGV1-3]\n\n        amountGet = wstETH.unwrap(amountWstETH); // F:[WSTGV1-3]\n        IERC20(stETH).safeTransfer(to, amountGet); // F:[WSTGV1-3]\n    }\n\n    /// @dev Checks that the allowance is sufficient before a transaction, and sets to max if not\n    /// @param token Token to approve for pool\n    /// @param amount Amount to compare allowance with\n    function _checkAllowance(address token, uint256 amount) internal {\n        if (IERC20(token).allowance(address(this), pool) < amount) {\n            IERC20(token).safeApprove(pool, type(uint256).max);\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Address.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
12     },
13     "@gearbox-protocol/core-v2/contracts/interfaces/IAddressProvider.sol": {
14       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\nimport { IVersion } from \"./IVersion.sol\";\n\ninterface IAddressProviderEvents {\n    /// @dev Emits when an address is set for a contract role\n    event AddressSet(bytes32 indexed service, address indexed newAddress);\n}\n\n/// @title Optimised for front-end Address Provider interface\ninterface IAddressProvider is IAddressProviderEvents, IVersion {\n    /// @return Address of ACL contract\n    function getACL() external view returns (address);\n\n    /// @return Address of ContractsRegister\n    function getContractsRegister() external view returns (address);\n\n    /// @return Address of AccountFactory\n    function getAccountFactory() external view returns (address);\n\n    /// @return Address of DataCompressor\n    function getDataCompressor() external view returns (address);\n\n    /// @return Address of GEAR token\n    function getGearToken() external view returns (address);\n\n    /// @return Address of WETH token\n    function getWethToken() external view returns (address);\n\n    /// @return Address of WETH Gateway\n    function getWETHGateway() external view returns (address);\n\n    /// @return Address of PriceOracle\n    function getPriceOracle() external view returns (address);\n\n    /// @return Address of DAO Treasury Multisig\n    function getTreasuryContract() external view returns (address);\n\n    /// @return Address of PathFinder\n    function getLeveragedActions() external view returns (address);\n}\n"
15     },
16     "@gearbox-protocol/core-v2/contracts/interfaces/IPoolService.sol": {
17       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\nimport \"../core/AddressProvider.sol\";\nimport { IVersion } from \"./IVersion.sol\";\n\ninterface IPoolServiceEvents {\n    /// @dev Emits on new liquidity being added to the pool\n    event AddLiquidity(\n        address indexed sender,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 referralCode\n    );\n\n    /// @dev Emits on liquidity being removed to the pool\n    event RemoveLiquidity(\n        address indexed sender,\n        address indexed to,\n        uint256 amount\n    );\n\n    /// @dev Emits on a Credit Manager borrowing funds for a Credit Account\n    event Borrow(\n        address indexed creditManager,\n        address indexed creditAccount,\n        uint256 amount\n    );\n\n    /// @dev Emits on repayment of a Credit Account's debt\n    event Repay(\n        address indexed creditManager,\n        uint256 borrowedAmount,\n        uint256 profit,\n        uint256 loss\n    );\n\n    /// @dev Emits on updating the interest rate model\n    event NewInterestRateModel(address indexed newInterestRateModel);\n\n    /// @dev Emits on connecting a new Credit Manager\n    event NewCreditManagerConnected(address indexed creditManager);\n\n    /// @dev Emits when a Credit Manager is forbidden to borrow\n    event BorrowForbidden(address indexed creditManager);\n\n    /// @dev Emitted when loss is incurred that can't be covered by treasury funds\n    event UncoveredLoss(address indexed creditManager, uint256 loss);\n\n    /// @dev Emits when the liquidity limit is changed\n    event NewExpectedLiquidityLimit(uint256 newLimit);\n\n    /// @dev Emits when the withdrawal fee is changed\n    event NewWithdrawFee(uint256 fee);\n}\n\n/// @title Pool Service Interface\n/// @notice Implements business logic:\n///   - Adding/removing pool liquidity\n///   - Managing diesel tokens & diesel rates\n///   - Taking/repaying Credit Manager debt\n/// More: https://dev.gearbox.fi/developers/pool/abstractpoolservice\ninterface IPoolService is IPoolServiceEvents, IVersion {\n    //\n    // LIQUIDITY MANAGEMENT\n    //\n\n    /**\n     * @dev Adds liquidity to pool\n     * - transfers the underlying to the pool\n     * - mints Diesel (LP) tokens to onBehalfOf\n     * @param amount Amount of tokens to be deposited\n     * @param onBehalfOf The address that will receive the dToken\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without a facilitator.\n     */\n    function addLiquidity(\n        uint256 amount,\n        address onBehalfOf,\n        uint256 referralCode\n    ) external;\n\n    /**\n     * @dev Removes liquidity from pool\n     * - burns LP's Diesel (LP) tokens\n     * - returns the equivalent amount of underlying to 'to'\n     * @param amount Amount of Diesel tokens to burn\n     * @param to Address to transfer the underlying to\n     */\n\n    function removeLiquidity(uint256 amount, address to)\n        external\n        returns (uint256);\n\n    /**\n     * @dev Lends pool funds to a Credit Account\n     * @param borrowedAmount Credit Account's debt principal\n     * @param creditAccount Credit Account's address\n     */\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount)\n        external;\n\n    /**\n     * @dev Repays the Credit Account's debt\n     * @param borrowedAmount Amount of principal ro repay\n     * @param profit The treasury profit from repayment\n     * @param loss Amount of underlying that the CA wan't able to repay\n     * @notice Assumes that the underlying (including principal + interest + fees)\n     *         was already transferred\n     */\n    function repayCreditAccount(\n        uint256 borrowedAmount,\n        uint256 profit,\n        uint256 loss\n    ) external;\n\n    //\n    // GETTERS\n    //\n\n    /**\n     * @dev Returns the total amount of liquidity in the pool, including borrowed and available funds\n     */\n    function expectedLiquidity() external view returns (uint256);\n\n    /**\n     * @dev Returns the limit on total liquidity\n     */\n    function expectedLiquidityLimit() external view returns (uint256);\n\n    /**\n     * @dev Returns the available liquidity, which is expectedLiquidity - totalBorrowed\n     */\n    function availableLiquidity() external view returns (uint256);\n\n    /**\n     * @dev Calculates the current interest index, RAY format\n     */\n    function calcLinearCumulative_RAY() external view returns (uint256);\n\n    /**\n     * @dev Calculates the current borrow rate, RAY format\n     */\n    function borrowAPY_RAY() external view returns (uint256);\n\n    /**\n     * @dev Returns the total borrowed amount (includes principal only)\n     */\n    function totalBorrowed() external view returns (uint256);\n\n    /**\n     * ç\n     **/\n\n    function getDieselRate_RAY() external view returns (uint256);\n\n    /**\n     * @dev Returns the address of the underlying\n     */\n    function underlyingToken() external view returns (address);\n\n    /**\n     * @dev Returns the address of the diesel token\n     */\n    function dieselToken() external view returns (address);\n\n    /**\n     * @dev Returns the address of a Credit Manager by its id\n     */\n    function creditManagers(uint256 id) external view returns (address);\n\n    /**\n     * @dev Returns the number of known Credit Managers\n     */\n    function creditManagersCount() external view returns (uint256);\n\n    /**\n     * @dev Maps Credit Manager addresses to their status as a borrower.\n     *      Returns false if borrowing is not allowed.\n     */\n    function creditManagersCanBorrow(address id) external view returns (bool);\n\n    /// @dev Converts a quantity of the underlying to Diesel tokens\n    function toDiesel(uint256 amount) external view returns (uint256);\n\n    /// @dev Converts a quantity of Diesel tokens to the underlying\n    function fromDiesel(uint256 amount) external view returns (uint256);\n\n    /// @dev Returns the withdrawal fee\n    function withdrawFee() external view returns (uint256);\n\n    /// @dev Returns the timestamp of the pool's last update\n    function _timestampLU() external view returns (uint256);\n\n    /// @dev Returns the interest index at the last pool update\n    function _cumulativeIndex_RAY() external view returns (uint256);\n\n    /// @dev Returns the address provider\n    function addressProvider() external view returns (AddressProvider);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
21     },
22     "@gearbox-protocol/core-v2/contracts/interfaces/IContractsRegister.sol": {
23       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\nimport { IVersion } from \"./IVersion.sol\";\n\ninterface IContractsRegisterEvents {\n    /// @dev Emits when a new pool is registered in the system\n    event NewPoolAdded(address indexed pool);\n\n    /// @dev Emits when a new Credit Manager is registered in the system\n    event NewCreditManagerAdded(address indexed creditManager);\n}\n\ninterface IContractsRegister is IContractsRegisterEvents, IVersion {\n    //\n    // POOLS\n    //\n\n    /// @dev Returns the array of registered pools\n    function getPools() external view returns (address[] memory);\n\n    /// @dev Returns a pool address from the list under the passed index\n    /// @param i Index of the pool to retrieve\n    function pools(uint256 i) external returns (address);\n\n    /// @return Returns the number of registered pools\n    function getPoolsCount() external view returns (uint256);\n\n    /// @dev Returns true if the passed address is a pool\n    function isPool(address) external view returns (bool);\n\n    //\n    // CREDIT MANAGERS\n    //\n\n    /// @dev Returns the array of registered Credit Managers\n    function getCreditManagers() external view returns (address[] memory);\n\n    /// @dev Returns a Credit Manager's address from the list under the passed index\n    /// @param i Index of the Credit Manager to retrieve\n    function creditManagers(uint256 i) external returns (address);\n\n    /// @return Returns the number of registered Credit Managers\n    function getCreditManagersCount() external view returns (uint256);\n\n    /// @dev Returns true if the passed address is a Credit Manager\n    function isCreditManager(address) external view returns (bool);\n}\n"
24     },
25     "@gearbox-protocol/core-v2/contracts/interfaces/IErrors.sol": {
26       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\n/// @dev Common contract exceptions\n\n/// @dev Thrown on attempting to set an important address to zero address\nerror ZeroAddressException();\n\n/// @dev Thrown on attempting to call a non-implemented function\nerror NotImplementedException();\n\n/// @dev Thrown on attempting to set an EOA as an important contract in the system\nerror AddressIsNotContractException(address);\n\n/// @dev Thrown on attempting to use a non-ERC20 contract or an EOA as a token\nerror IncorrectTokenContractException();\n\n/// @dev Thrown on attempting to set a token price feed to an address that is not a\n///      correct price feed\nerror IncorrectPriceFeedException();\n\n/// @dev Thrown on attempting to call an access restricted function as a non-Configurator\nerror CallerNotConfiguratorException();\n\n/// @dev Thrown on attempting to pause a contract as a non-Pausable admin\nerror CallerNotPausableAdminException();\n\n/// @dev Thrown on attempting to pause a contract as a non-Unpausable admin\nerror CallerNotUnPausableAdminException();\n\nerror TokenIsNotAddedToCreditManagerException(address token);\n"
27     },
28     "@gearbox-protocol/integrations-v2/contracts/integrations/lido/IwstETH.sol": {
29       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IwstETHGetters is IERC20Metadata {\n    function stETH() external view returns (address);\n\n    /**\n     * @notice Get amount of wstETH for a given amount of stETH\n     * @param _stETHAmount amount of stETH\n     * @return Amount of wstETH for a given stETH amount\n     */\n    function getWstETHByStETH(uint256 _stETHAmount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get amount of stETH for a given amount of wstETH\n     * @param _wstETHAmount amount of wstETH\n     * @return Amount of stETH for a given wstETH amount\n     */\n    function getStETHByWstETH(uint256 _wstETHAmount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get amount of stETH for a one wstETH\n     * @return Amount of stETH for 1 wstETH\n     */\n    function stEthPerToken() external view returns (uint256);\n\n    /**\n     * @notice Get amount of wstETH for a one stETH\n     * @return Amount of wstETH for a 1 stETH\n     */\n    function tokensPerStEth() external view returns (uint256);\n}\n\ninterface IwstETH is IwstETHGetters {\n    /**\n     * @notice Exchanges stETH to wstETH\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\n     * @dev Requirements:\n     *  - `_stETHAmount` must be non-zero\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\n     *    contract.\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\n     * User should first approve _stETHAmount to the WstETH contract\n     * @return Amount of wstETH user receives after wrap\n     */\n    function wrap(uint256 _stETHAmount) external returns (uint256);\n\n    /**\n     * @notice Exchanges wstETH to stETH\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\n     * @dev Requirements:\n     *  - `_wstETHAmount` must be non-zero\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\n     * @return Amount of stETH user receives after unwrap\n     */\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\n}\n"
30     },
31     "@gearbox-protocol/integrations-v2/contracts/integrations/lido/IwstETHGateway.sol": {
32       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IwstETHGateWay {\n    error NonRegisterPoolException();\n\n    /**\n     * @dev Adds stETH liquidity to wstETH pool\n     * - transfers the underlying to the pool\n     * - mints Diesel (LP) tokens to onBehalfOf\n     * @param amount Amount of tokens to be deposited\n     * @param onBehalfOf The address that will receive the dToken\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without a facilitator.\n     */\n    function addLiquidity(\n        uint256 amount,\n        address onBehalfOf,\n        uint256 referralCode\n    ) external;\n\n    /// @dev Removes liquidity from pool\n    ///  - burns LP's Diesel (LP) tokens\n    ///  - returns the equivalent amount of underlying to 'to'\n    /// @param amount Amount of Diesel tokens to burn\n    /// @param to Address to transfer the underlying to\n    function removeLiquidity(uint256 amount, address to)\n        external\n        returns (uint256 amountGet);\n}\n"
33     },
34     "@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol": {
35       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\n/// @title IVersion\n/// @dev Declares a version function which returns the contract's version\ninterface IVersion {\n    /// @dev Returns contract version\n    function version() external view returns (uint256);\n}\n"
36     },
37     "@gearbox-protocol/core-v2/contracts/core/AddressProvider.sol": {
38       "content": "// SPDX-License-Identifier: BUSL-1.1\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\nimport { IAddressProvider } from \"../interfaces/IAddressProvider.sol\";\nimport { Claimable } from \"./access/Claimable.sol\";\nimport { Errors } from \"../libraries/Errors.sol\";\n\n// Repositories & services\nbytes32 constant CONTRACTS_REGISTER = \"CONTRACTS_REGISTER\";\nbytes32 constant ACL = \"ACL\";\nbytes32 constant PRICE_ORACLE = \"PRICE_ORACLE\";\nbytes32 constant ACCOUNT_FACTORY = \"ACCOUNT_FACTORY\";\nbytes32 constant DATA_COMPRESSOR = \"DATA_COMPRESSOR\";\nbytes32 constant TREASURY_CONTRACT = \"TREASURY_CONTRACT\";\nbytes32 constant GEAR_TOKEN = \"GEAR_TOKEN\";\nbytes32 constant WETH_TOKEN = \"WETH_TOKEN\";\nbytes32 constant WETH_GATEWAY = \"WETH_GATEWAY\";\nbytes32 constant LEVERAGED_ACTIONS = \"LEVERAGED_ACTIONS\";\n\n/// @title AddressRepository\n/// @notice Stores addresses of deployed contracts\ncontract AddressProvider is Claimable, IAddressProvider {\n    // Mapping from contract keys to respective addresses\n    mapping(bytes32 => address) public addresses;\n\n    // Contract version\n    uint256 public constant version = 2;\n\n    constructor() {\n        // @dev Emits first event for contract discovery\n        emit AddressSet(\"ADDRESS_PROVIDER\", address(this));\n    }\n\n    /// @return Address of ACL contract\n    function getACL() external view returns (address) {\n        return _getAddress(ACL); // F:[AP-3]\n    }\n\n    /// @dev Sets address of ACL contract\n    /// @param _address Address of ACL contract\n    function setACL(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(ACL, _address); // F:[AP-3]\n    }\n\n    /// @return Address of ContractsRegister\n    function getContractsRegister() external view returns (address) {\n        return _getAddress(CONTRACTS_REGISTER); // F:[AP-4]\n    }\n\n    /// @dev Sets address of ContractsRegister\n    /// @param _address Address of ContractsRegister\n    function setContractsRegister(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(CONTRACTS_REGISTER, _address); // F:[AP-4]\n    }\n\n    /// @return Address of PriceOracle\n    function getPriceOracle() external view override returns (address) {\n        return _getAddress(PRICE_ORACLE); // F:[AP-5]\n    }\n\n    /// @dev Sets address of PriceOracle\n    /// @param _address Address of PriceOracle\n    function setPriceOracle(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(PRICE_ORACLE, _address); // F:[AP-5]\n    }\n\n    /// @return Address of AccountFactory\n    function getAccountFactory() external view returns (address) {\n        return _getAddress(ACCOUNT_FACTORY); // F:[AP-6]\n    }\n\n    /// @dev Sets address of AccountFactory\n    /// @param _address Address of AccountFactory\n    function setAccountFactory(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(ACCOUNT_FACTORY, _address); // F:[AP-6]\n    }\n\n    /// @return Address of DataCompressor\n    function getDataCompressor() external view override returns (address) {\n        return _getAddress(DATA_COMPRESSOR); // F:[AP-7]\n    }\n\n    /// @dev Sets address of AccountFactory\n    /// @param _address Address of AccountFactory\n    function setDataCompressor(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(DATA_COMPRESSOR, _address); // F:[AP-7]\n    }\n\n    /// @return Address of Treasury contract\n    function getTreasuryContract() external view returns (address) {\n        return _getAddress(TREASURY_CONTRACT); // F:[AP-8]\n    }\n\n    /// @dev Sets address of Treasury Contract\n    /// @param _address Address of Treasury Contract\n    function setTreasuryContract(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(TREASURY_CONTRACT, _address); // F:[AP-8]\n    }\n\n    /// @return Address of GEAR token\n    function getGearToken() external view override returns (address) {\n        return _getAddress(GEAR_TOKEN); // F:[AP-9]\n    }\n\n    /// @dev Sets address of GEAR token\n    /// @param _address Address of GEAR token\n    function setGearToken(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(GEAR_TOKEN, _address); // F:[AP-9]\n    }\n\n    /// @return Address of WETH token\n    function getWethToken() external view override returns (address) {\n        return _getAddress(WETH_TOKEN); // F:[AP-10]\n    }\n\n    /// @dev Sets address of WETH token\n    /// @param _address Address of WETH token\n    function setWethToken(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(WETH_TOKEN, _address); // F:[AP-10]\n    }\n\n    /// @return Address of WETH token\n    function getWETHGateway() external view override returns (address) {\n        return _getAddress(WETH_GATEWAY); // F:[AP-11]\n    }\n\n    /// @dev Sets address of WETH token\n    /// @param _address Address of WETH token\n    function setWETHGateway(address _address)\n        external\n        onlyOwner // F:[AP-12]\n    {\n        _setAddress(WETH_GATEWAY, _address); // F:[AP-11]\n    }\n\n    /// @return Address of PathFinder\n    function getLeveragedActions() external view returns (address) {\n        return _getAddress(LEVERAGED_ACTIONS); // T:[AP-7]\n    }\n\n    /// @dev Sets address of  PathFinder\n    /// @param _address Address of  PathFinder\n    function setLeveragedActions(address _address)\n        external\n        onlyOwner // T:[AP-15]\n    {\n        _setAddress(LEVERAGED_ACTIONS, _address); // T:[AP-7]\n    }\n\n    /// @return Address of key, reverts if the key doesn't exist\n    function _getAddress(bytes32 key) internal view returns (address) {\n        address result = addresses[key];\n        require(result != address(0), Errors.AS_ADDRESS_NOT_FOUND); // F:[AP-1]\n        return result; // F:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11]\n    }\n\n    /// @dev Sets address to map by its key\n    /// @param key Key in string format\n    /// @param value Address\n    function _setAddress(bytes32 key, address value) internal {\n        addresses[key] = value; // F:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11]\n        emit AddressSet(key, value); // F:[AP-2]\n    }\n}\n"
39     },
40     "@gearbox-protocol/core-v2/contracts/libraries/Errors.sol": {
41       "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\n/// @title Errors library\nlibrary Errors {\n    //\n    // COMMON\n    //\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \"Z0\";\n    string public constant NOT_IMPLEMENTED = \"NI\";\n    string public constant INCORRECT_PATH_LENGTH = \"PL\";\n    string public constant INCORRECT_ARRAY_LENGTH = \"CR\";\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \"CP\";\n    string public constant REGISTERED_POOLS_ONLY = \"RP\";\n    string public constant INCORRECT_PARAMETER = \"IP\";\n\n    //\n    // MATH\n    //\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \"M1\";\n    string public constant MATH_ADDITION_OVERFLOW = \"M2\";\n    string public constant MATH_DIVISION_BY_ZERO = \"M3\";\n\n    //\n    // POOL\n    //\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \"PS0\";\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \"PS1\";\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \"PS2\";\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \"PS3\";\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \"PS4\";\n\n    //\n    // ACCOUNT FACTORY\n    //\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\n        \"AF1\";\n    string public constant AF_MINING_IS_FINISHED = \"AF2\";\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \"AF3\";\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \"AF4\";\n\n    //\n    // ADDRESS PROVIDER\n    //\n    string public constant AS_ADDRESS_NOT_FOUND = \"AP1\";\n\n    //\n    // CONTRACTS REGISTER\n    //\n    string public constant CR_POOL_ALREADY_ADDED = \"CR1\";\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \"CR2\";\n\n    //\n    // CREDIT ACCOUNT\n    //\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \"CA1\";\n    string public constant CA_FACTORY_ONLY = \"CA2\";\n\n    //\n    // ACL\n    //\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \"ACL1\";\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \"ACL2\";\n\n    //\n    // WETH GATEWAY\n    //\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \"WG1\";\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \"WG2\";\n    string public constant WG_NOT_ENOUGH_FUNDS = \"WG3\";\n\n    //\n    // TOKEN DISTRIBUTOR\n    //\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \"TD1\";\n    string public constant TD_INCORRECT_WEIGHTS = \"TD2\";\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \"TD3\";\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \"TD4\";\n}\n"
42     },
43     "@gearbox-protocol/core-v2/contracts/core/access/Claimable.sol": {
44       "content": "// SPDX-License-Identifier: BUSL-1.1\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.10;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title Claimable\n/// @dev Implements logic for a two-step ownership transfer on top of Ownable\ncontract Claimable is Ownable {\n    /// @dev The new owner that has not claimed ownership yet\n    address public pendingOwner;\n\n    /// @dev A modifier that restricts the function to the pending owner only\n    modifier onlyPendingOwner() {\n        if (msg.sender != pendingOwner) {\n            revert(\"Claimable: Sender is not pending owner\");\n        }\n        _;\n    }\n\n    /// @dev Sets pending owner to the new owner, but does not\n    /// transfer ownership yet\n    /// @param newOwner The address to become the future owner\n    function transferOwnership(address newOwner) public override onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Claimable: new owner is the zero address\"\n        );\n        pendingOwner = newOwner;\n    }\n\n    /// @dev Used by the pending owner to claim ownership after transferOwnership\n    function claimOwnership() external onlyPendingOwner {\n        _transferOwnership(pendingOwner);\n        pendingOwner = address(0);\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/access/Ownable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
48     },
49     "@openzeppelin/contracts/utils/Context.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
51     },
52     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
54     }
55   },
56   "settings": {
57     "optimizer": {
58       "enabled": true,
59       "runs": 1000000
60     },
61     "outputSelection": {
62       "*": {
63         "*": [
64           "evm.bytecode",
65           "evm.deployedBytecode",
66           "devdoc",
67           "userdoc",
68           "metadata",
69           "abi"
70         ]
71       }
72     },
73     "libraries": {}
74   }
75 }}