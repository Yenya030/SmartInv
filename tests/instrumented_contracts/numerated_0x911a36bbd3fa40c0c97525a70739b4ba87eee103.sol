1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Address.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Context.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
36     },
37     "@openzeppelin/contracts/utils/math/Math.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/utils/Strings.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
42     },
43     "contracts/Hexamillennia.sol": {
44       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './HexamillenniaAlgorithm.sol';\n\ncontract Hexamillennia is ERC721Enumerable, Ownable {\n    uint256 public constant MAX_SUPPLY = 1000;\n\n    bool public active;\n    mapping(uint256 => uint256) public randomSource;\n\n    constructor() ERC721('Hexamillennia', 'HXMLLNN') {}\n\n    function activate() external onlyOwner {\n        active = true;\n    }\n\n    function mintTiling() external {\n        require(active, 'Mint not active');\n        uint256 tokenId = totalSupply();\n        require(tokenId < MAX_SUPPLY, 'Max supply reached');\n        randomSource[tokenId] = uint256(keccak256(abi.encodePacked(msg.sender, blockhash(block.number - 1), tokenId)));\n        _mint(msg.sender, tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        _requireMinted(tokenId);\n        return HexamillenniaAlgorithm.tokenURI(tokenId, randomSource[tokenId]);\n    }\n\n    function tokenSVG(uint256 tokenId) public view returns (string memory) {\n        _requireMinted(tokenId);\n        return HexamillenniaAlgorithm.tokenSVG(tokenId, randomSource[tokenId]);\n    }\n}\n"
45     },
46     "contracts/HexamillenniaAlgorithm.sol": {
47       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nuint256 constant MASK_4 = 2 ** 4 - 1;\nuint256 constant MASK_6 = 2 ** 6 - 1;\nuint256 constant MASK_8 = 2 ** 8 - 1;\nuint256 constant MASK_12 = 2 ** 12 - 1;\nuint256 constant MASK_16 = 2 ** 16 - 1;\nuint256 constant MASK_32 = 2 ** 32 - 1;\n\nuint256 constant HEXAGON_PERP_WALK_MASK = 2 ** 6;\nuint256 constant HEXAGON_PERP_2_WALK_MASK = 2 ** 8;\nuint256 constant HEXAGON_PERP_3_WALK_MASK = 2 ** 9;\n\nuint256 constant HEXAGON_PAINT_OFFSET = 12;\nuint256 constant SQUARE_PAINT_OFFSET = 16;\nuint256 constant SQUARE_2_PAINT_OFFSET = 24;\nuint256 constant TRIANGLE_PAINT_OFFSET = 28;\nuint256 constant TRIANGLE_1_PAINT_OFFSET = 32;\nuint256 constant HEXAGON_PAINT_MASK = 0xf000;\nuint256 constant SQUARE_PAINT_MASK = 0xf0000;\nuint256 constant TRIANGLE_PAINT_MASK = 0xf0000000;\nuint256 constant TRIANGLE_1_PAINT_MASK = 0xf00000000;\nuint256 constant SQUARE_2_WALK_PAINT_MASK = 0xf000100;\n\nuint256 constant HEXAGON_EXPAND_OFFSET = 36;\nuint256 constant HEXAGON_PERP_EXPAND_OFFSET = 42;\nuint256 constant HEXAGON_EXPAND_MASK = 0x1000000000;\nuint256 constant HEXAGON_PERP_EXPAND_MASK = 0x40000000000;\nuint256 constant HEXAGON_FULL_BOUNDARY_MASK = 0x3f000000000;\nuint256 constant SQUARE_HALF_BOUNDARY_MASK = 0x41000000000;\nuint256 constant VERTEX_013_EXPAND_MASK = 0x82143021810c086043;\n\nuint256 constant EXPAND_ROOT_OFFSET = 48;\nuint256 constant SELF_OFFSET = 52;\nuint256 constant ROW_COL_OFFSET = 68;\nuint256 constant STATE_OFFSET = 84;\nuint256 constant STATE_1_OFFSET = 100;\nuint256 constant STATE_3_OFFSET = 132;\nuint256 constant STATE_5_OFFSET = 164;\n\nuint256 constant ANGLE_TO_HEXAGON = 0x0100010100017f007f7f007f;\nuint256 constant ANGLE_TO_HEXAGON_PLUS = 0x020102020102000100000100;\nuint256 constant ANGLE_TO_VERTEX_X = 0x000003e8000007d0000003e8fffffc18fffff830fffffc18;\nuint256 constant ANGLE_TO_VERTEX_Y = 0xfffff93c00000000000006c4000006c400000000fffff93c;\n\nuint256 constant POPCOUNT_6 = 0x6554544354434332544343324332322154434332433232214332322132212110;\n\n// These memory locations are above the area that Solidity allocates for the 3 string constants below, and this is the only area that Solidity\n// allocates when this library is used as intended.\nuint256 constant LOG2_DIM_M = 0x680;\nuint256 constant DIM_M = 0x6a0;\nuint256 constant UNROLLED_GRID_M = 0x6c0;\nuint256 constant OPEN_M = 0x6e0;\nuint256 constant MARGIN_M = 0x700;\nuint256 constant UNROLLED_GRID_ROWS_M = 0x720;\nuint256 constant UNROLLED_GRID_COLS_M = 0x740;\nuint256 constant STACK_M = 0x760;\nuint256 constant STACK_IDX_M = 0x780;\nuint256 constant CACHE_M = 0x7a0;\nuint256 constant CACHE_IDX_M = 0x7c0;\nuint256 constant OUTPUT_M = 0x7e0;\nuint256 constant OUTPUT_IDX_M = 0x800;\nuint256 constant STATE_M_M = 0x820;\nuint256 constant ANGLE_M = 0x840;\nuint256 constant STEPS_IDX_M = 0x860;\nuint256 constant STEPS_M = 0x880;\nuint256 constant PALETTE_IDX_M = 0x8a0;\nuint256 constant PALETTE_M = 0x8c0;\nuint256 constant NUM_COLORS_M = 0x8e0;\nuint256 constant COLOR_M = 0x900;\nuint256 constant EDGE_COUNT_M = 0x920;\nuint256 constant SVG_STRING_LOOKUP_M = 0x940;\nuint256 constant OPEN_VIEW_BOX_X_DECIMAL_M = 0x960;\nuint256 constant OPEN_VIEW_BOX_X_DECIMAL_LENGTH_M = 0x980;\nuint256 constant OPEN_VIEW_BOX_Y_DECIMAL_M = 0x9a0;\nuint256 constant OPEN_VIEW_BOX_Y_DECIMAL_LENGTH_M = 0x9c0;\nuint256 constant OPEN_VIEW_BOX_WIDTH_DECIMAL_M = 0x9e0;\nuint256 constant OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M = 0xa00;\nuint256 constant OPEN_VIEW_BOX_HEIGHT_DECIMAL_M = 0xa20;\nuint256 constant OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M = 0xa40;\nuint256 constant DOMAIN_WIDTH_DECIMAL_M = 0xa60;\nuint256 constant DOMAIN_WIDTH_DECIMAL_LENGTH_M = 0xa80;\nuint256 constant DOMAIN_HEIGHT_DECIMAL_M = 0xaa0;\nuint256 constant DOMAIN_HEIGHT_DECIMAL_LENGTH_M = 0xac0;\nuint256 constant SVG_START_M = 0xae0;\nuint256 constant SVG_END_M = 0xb00;\nuint256 constant JSON_STRING_LOOKUP_M = 0xb20;\nuint256 constant TOKEN_ID_M = 0xb40;\nuint256 constant TOKEN_ID_DECIMAL_M = 0xb60;\nuint256 constant TOKEN_ID_DECIMAL_LENGTH_M = 0xb80;\nuint256 constant DIM_DECIMAL_M = 0xba0;\nuint256 constant DIM_DECIMAL_LENGTH_M = 0xbc0;\nuint256 constant PALETTE_IDX_DECIMAL_M = 0xbe0;\nuint256 constant PALETTE_IDX_DECIMAL_LENGTH_M = 0xc00;\n\nuint256 constant ANGLE_EDGE_TO_VECTOR = 0xcc0;\nuint256 constant ANGLE_EDGE_TO_VECTOR_OFFSET = 0xece4dcd1c7bbb0a69b90867f7770695e52483d31261b0f0700;\nuint256 constant BASE64 = 0xda1;\nuint256 constant RANDOM_SOURCE = 0xe00;\nuint256 constant SHIFT_M = 0xe20;\nuint256 constant GRID = 0xe40;\n\nstring constant PALETTES = 'FF87CA7FAEFAB07676FCDED4F7ABD4CCA3A3B8D1FFA555ECC47AFFFDFF00FFF8BC38E54DCFFF8DFF731DF7A76CE5DFD6FBF8F4807E7D633E35A27B5C9FC088F4DFBAFFFEA9379237BA3A33D85C2BF1F582FB6B337D3D443F2828FEE1830280C0253978B6E6FFD3E0EFA1F7FF84A1C9EDF5FC540375FF7000FF4949FFFD8C824C96F2D0A3D0A369B46F37A70A0D800004BF040AB51212EFEFEFDFDEDEFFFFFFFEFF9F393E465D697AF3CCFFF9DEFCD3B5F5F6EBFA012106210101200D073412115F3D36F4E1BCE3C69DB5918852230E864123F2BD77';\nuint256 constant PALETTES_OFFSET = 0x473e3835312b261f18130d0700;\nuint256 constant NUM_PALETTES = 12;\nstring constant SVG_STRING_LOOKUP = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"\"><rect x=\"-2732\" y=\"-2732\" width=\"\" height=\"\" fill=\"white\"/><g stroke=\"black\" stroke-width=\"100\" stroke-linejoin=\"round\" stroke-linecap=\"round\" fill-rule=\"evenodd\"><path d=\"\" fill=\"#\"/></g></svg> 0 0 -2732 -2732 M-2732 -2732l0 ';\nstring constant JSON_STRING_LOOKUP = 'data:application/json,%7B%22name%22:%22Tiling%20%22,%22description%22:%22Hexamillennia%20is%20generated%20entirely%20on%20the%20EVM.%20Released%20under%20CC0.%22,%22attributes%22:%5B%7B%22trait_type%22:%22%22,%22value%22:%22%22%7D,%7B%22trait_type%22:%22%22,%22value%22:%22%22%7D%5D,%22image%22:%22data:image/svg+xml;base64,%22%7DSizeFormStepsPaletteClosedOpenLowMediumHigh';\n\nlibrary HexamillenniaAlgorithm {\n    function tokenURI(uint256 tokenId, uint256 randomSource) internal pure returns (string memory) {\n        generateSVG(tokenId, randomSource);\n        resetOutput();\n        writeJSON();\n        returnOutput();\n    }\n\n    function tokenSVG(uint256 tokenId, uint256 randomSource) internal pure returns (string memory) {\n        generateSVG(tokenId, randomSource);\n        returnOutput();\n    }\n\n    function generateSVG(uint256 tokenId, uint256 randomSource) internal pure {\n        initializeKnownData(tokenId, randomSource);\n        chooseAttributes();\n        initializeVariables();\n        prepareGrid();\n        walk();\n        paint();\n        prepareUnrolledGrid();\n        writeDecimalLookup();\n        resetOutput();\n        writePreExpand();\n        expand();\n        writePostExpand();\n    }\n\n    function initializeKnownData(uint256 tokenId, uint256 randomSource) internal pure {\n        string memory palettes = PALETTES;\n        string memory svgStringLookup = SVG_STRING_LOOKUP;\n        string memory jsonStringLookup = JSON_STRING_LOOKUP;\n        assembly {\n            mstore(TOKEN_ID_M, tokenId)\n            mstore(RANDOM_SOURCE, randomSource)\n            mstore(PALETTE_M, add(palettes, 0x20))\n            mstore(SVG_STRING_LOOKUP_M, add(svgStringLookup, 0x20))\n            mstore(JSON_STRING_LOOKUP_M, add(jsonStringLookup, 0x20))\n            mstore(0xcc0, ' 2000 0 0 -2000 -1732 -1000 -100')\n            mstore(0xce0, '0 1732 1000 -1732 -1732 -1000 -1')\n            mstore(0xd00, '732 1000 1000 1732 -1000 -1732 -')\n            mstore(0xd20, '1732 1000 0 2000 2000 0 -2000 0 ')\n            mstore(0xd40, '0 2000 1732 1000 1000 -1732 -100')\n            mstore(0xd60, '0 1732 1732 1000 1732 -1000 -100')\n            mstore(0xd80, '0 -1732 1000 1732 1732 -1000 0 -')\n            mstore(0xda0, '2000 -2000 0')\n            mstore(0xdc0, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef')\n            mstore(0xde0, 'ghijklmnopqrstuvwxyz0123456789+/')\n        }\n    }\n\n    function chooseAttributes() internal pure {\n        assembly {\n            function updateRandomSource() {\n                let shift := mload(SHIFT_M)\n                shift := add(shift, 8)\n                if eq(shift, 256) {\n                    mstore(RANDOM_SOURCE, keccak256(RANDOM_SOURCE, 0x20))\n                    shift := 0\n                }\n                mstore(SHIFT_M, shift)\n            }\n            // log2Dim can be at most 4 in this implementation\n            let log2Dim := add(shr(6, and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8)), 1)\n            let dim := shl(log2Dim, 1)\n            mstore(LOG2_DIM_M, log2Dim)\n            mstore(DIM_M, dim)\n            updateRandomSource()\n            mstore(OPEN_M, shr(7, and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8)))\n            updateRandomSource()\n            mstore(STATE_M_M, add(GRID, shl(5, shr(8, mul(mul(dim, dim), and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8))))))\n            updateRandomSource()\n            mstore(ANGLE_M, shr(8, mul(6, and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8))))\n            updateRandomSource()\n            let stepsIdx := shr(8, mul(3, and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8)))\n            mstore(STEPS_IDX_M, stepsIdx)\n            mstore(STEPS_M, shl(add(add(stepsIdx, 4), shl(1, log2Dim)), 1))\n            updateRandomSource()\n            let paletteIdx := shr(8, mul(NUM_PALETTES, and(shr(mload(SHIFT_M), mload(RANDOM_SOURCE)), MASK_8)))\n            mstore(PALETTE_IDX_M, paletteIdx)\n            let adjusted := shr(shl(3, paletteIdx), PALETTES_OFFSET)\n            let offset := and(adjusted, MASK_8)\n            mstore(PALETTE_M, add(mload(PALETTE_M), mul(offset, 0x6)))\n            mstore(NUM_COLORS_M, sub(and(shr(8, adjusted), MASK_8), offset))\n            updateRandomSource()\n        }\n    }\n\n    function initializeVariables() internal pure {\n        assembly {\n            let dim := mload(DIM_M)\n            let open := mload(OPEN_M)\n            let margin := mul(sub(mload(LOG2_DIM_M), 1), open)\n            let hexagonCount\n            switch open\n            case 0 {\n                hexagonCount := mul(shr(1, add(dim, 2)), add(shl(1, dim), 3))\n            }\n            case 1 {\n                hexagonCount := mul(dim, dim)\n            }\n            mstore(UNROLLED_GRID_M, add(GRID, shl(5, mul(dim, dim))))\n            mstore(MARGIN_M, margin)\n            mstore(UNROLLED_GRID_ROWS_M, add(add(add(dim, shr(1, dim)), 4), shl(1, margin)))\n            mstore(UNROLLED_GRID_COLS_M, add(add(dim, 4), shl(1, margin)))\n            mstore(STACK_M, add(mload(UNROLLED_GRID_M), shl(5, mul(mload(UNROLLED_GRID_ROWS_M), mload(UNROLLED_GRID_COLS_M)))))\n            mstore(STACK_IDX_M, mload(STACK_M))\n            mstore(CACHE_M, add(mload(STACK_M), add(mul(hexagonCount, 18), 0x20)))\n            mstore(CACHE_IDX_M, mload(CACHE_M))\n            mstore(OUTPUT_M, add(mload(CACHE_M), add(mul(hexagonCount, 39), 0x20)))\n            mstore(OUTPUT_IDX_M, mload(OUTPUT_M))\n        }\n    }\n\n    function prepareGrid() internal pure {\n        assembly {\n            let log2Dim := mload(LOG2_DIM_M)\n            let dim := mload(DIM_M)\n            let gridCount := mul(dim, dim)\n            for {\n                let gridIdx\n            } lt(gridIdx, gridCount) {\n                gridIdx := add(gridIdx, 1)\n            } {\n                let stateM := add(GRID, shl(5, gridIdx))\n                mstore(stateM, shl(SELF_OFFSET, stateM))\n                let row := shr(log2Dim, gridIdx)\n                let col := and(gridIdx, sub(dim, 1))\n                switch and(and(and(gt(row, 0), lt(row, sub(dim, 1))), gt(col, 0)), lt(col, sub(dim, 1)))\n                case 0 {\n                    for {\n                        let angle\n                    } lt(angle, 6) {\n                        angle := add(angle, 1)\n                    } {\n                        let hexagonR0 := add(or(shl(8, col), row), shr(shl(4, angle), ANGLE_TO_HEXAGON))\n                        let col0 := shr(8, hexagonR0)\n                        mstore(\n                            stateM,\n                            or(\n                                mload(stateM),\n                                shl(\n                                    add(shl(4, angle), STATE_OFFSET),\n                                    add(\n                                        add(GRID, shl(add(log2Dim, 5), and(sub(hexagonR0, mul(shr(log2Dim, col0), shr(1, dim))), sub(dim, 1)))),\n                                        shl(5, and(col0, sub(dim, 1)))\n                                    )\n                                )\n                            )\n                        )\n                    }\n                }\n                case 1 {\n                    mstore(\n                        stateM,\n                        or(\n                            mload(stateM),\n                            shl(\n                                STATE_OFFSET,\n                                or(\n                                    or(\n                                        or(\n                                            or(\n                                                or(\n                                                    shl(80, add(add(GRID, shl(add(log2Dim, 5), row)), shl(5, add(col, 1)))),\n                                                    shl(64, add(add(GRID, shl(add(log2Dim, 5), add(row, 1))), shl(5, add(col, 1))))\n                                                ),\n                                                shl(48, add(add(GRID, shl(add(log2Dim, 5), add(row, 1))), shl(5, col)))\n                                            ),\n                                            shl(32, add(add(GRID, shl(add(log2Dim, 5), row)), shl(5, sub(col, 1))))\n                                        ),\n                                        shl(16, add(add(GRID, shl(add(log2Dim, 5), sub(row, 1))), shl(5, sub(col, 1))))\n                                    ),\n                                    add(add(GRID, shl(add(log2Dim, 5), sub(row, 1))), shl(5, col))\n                                )\n                            )\n                        )\n                    )\n                }\n            }\n        }\n    }\n\n    function walk() internal pure {\n        assembly {\n            let stateM := mload(STATE_M_M)\n            let angle := mload(ANGLE_M)\n            let steps := mload(STEPS_M)\n            for {\n                let i\n            } lt(i, steps) {\n                i := add(i, 1)\n            } {\n                let shift := mload(add(RANDOM_SOURCE, 0x20))\n                switch shr(6, and(shr(shift, mload(RANDOM_SOURCE)), MASK_8))\n                case 0 {\n                    mstore(stateM, or(mload(stateM), shl(angle, 1)))\n                    angle := addmod(angle, 5, 6)\n                }\n                case 1 {\n                    mstore(stateM, or(mload(stateM), shl(angle, HEXAGON_PERP_WALK_MASK)))\n                    stateM := and(shr(add(shl(4, angle), STATE_OFFSET), mload(stateM)), MASK_16)\n                    angle := addmod(angle, 2, 6)\n                }\n                case 2 {\n                    stateM := and(shr(add(shl(4, addmod(angle, 1, 6)), STATE_OFFSET), mload(stateM)), MASK_16)\n                    angle := addmod(angle, 4, 6)\n                    mstore(stateM, or(mload(stateM), shl(angle, HEXAGON_PERP_WALK_MASK)))\n                }\n                case 3 {\n                    angle := addmod(angle, 1, 6)\n                    mstore(stateM, or(mload(stateM), shl(angle, 1)))\n                }\n                if eq(shift, 248) {\n                    mstore(RANDOM_SOURCE, keccak256(RANDOM_SOURCE, 0x20))\n                    mstore(SHIFT_M, 0)\n                    continue\n                }\n                mstore(SHIFT_M, add(shift, 8))\n            }\n        }\n    }\n\n    function paint() internal pure {\n        assembly {\n            function paintDF() {\n                for {\n\n                } gt(mload(STACK_IDX_M), mload(STACK_M)) {\n\n                } {\n                    mstore(STACK_IDX_M, sub(mload(STACK_IDX_M), 0x3))\n                    let top := shr(232, mload(mload(STACK_IDX_M)))\n                    switch shr(20, top)\n                    case 0 {\n                        for {\n                            let angle\n                        } lt(angle, 3) {\n                            angle := add(angle, 1)\n                        } {\n                            if iszero(and(mload(top), or(shl(angle, 1), shl(shl(2, angle), SQUARE_PAINT_MASK)))) {\n                                mstore(top, or(mload(top), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), top)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                            let stateR3M := and(shr(add(shl(4, add(angle, 3)), STATE_OFFSET), mload(top)), MASK_16)\n                            if iszero(or(and(mload(top), shl(add(angle, 3), 1)), and(mload(stateR3M), shl(shl(2, angle), SQUARE_PAINT_MASK)))) {\n                                mstore(stateR3M, or(mload(stateR3M), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateR3M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                    }\n                    case 1 {\n                        let angle := and(shr(16, top), MASK_4)\n                        let stateM := and(top, MASK_16)\n                        if iszero(and(mload(stateM), or(shl(angle, 1), HEXAGON_PAINT_MASK))) {\n                            mstore(stateM, or(mload(stateM), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, stateM))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        let stateR0M := and(shr(add(shl(4, angle), STATE_OFFSET), mload(stateM)), MASK_16)\n                        if iszero(and(mload(stateR0M), or(shl(add(angle, 3), 1), HEXAGON_PAINT_MASK))) {\n                            mstore(stateR0M, or(mload(stateR0M), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, stateR0M))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        switch eq(angle, 2)\n                        case 0 {\n                            if iszero(and(mload(stateM), or(shl(angle, HEXAGON_PERP_WALK_MASK), shl(shl(2, angle), TRIANGLE_PAINT_MASK)))) {\n                                mstore(stateM, or(mload(stateM), shl(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, angle)), stateM)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            let state3M := and(shr(STATE_3_OFFSET, mload(stateM)), MASK_16)\n                            if iszero(or(and(mload(stateM), HEXAGON_PERP_2_WALK_MASK), and(mload(state3M), TRIANGLE_PAINT_MASK))) {\n                                mstore(state3M, or(mload(state3M), shl(TRIANGLE_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x200000, state3M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        switch eq(angle, 0)\n                        case 0 {\n                            if iszero(\n                                or(\n                                    and(mload(stateR0M), shl(add(angle, 3), HEXAGON_PERP_WALK_MASK)),\n                                    and(mload(stateM), shl(shl(2, sub(angle, 1)), TRIANGLE_PAINT_MASK))\n                                )\n                            ) {\n                                mstore(stateM, or(mload(stateM), shl(add(shl(2, sub(angle, 1)), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, sub(angle, 1))), stateM)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            let state5M := and(shr(STATE_5_OFFSET, mload(stateM)), MASK_16)\n                            if iszero(or(and(mload(stateR0M), HEXAGON_PERP_3_WALK_MASK), and(mload(state5M), TRIANGLE_1_PAINT_MASK))) {\n                                mstore(state5M, or(mload(state5M), shl(TRIANGLE_1_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x210000, state5M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                    }\n                    case 2 {\n                        let angle := and(shr(16, top), MASK_4)\n                        let stateM := and(top, MASK_16)\n                        let stateR1M := and(shr(add(shl(4, add(angle, 1)), STATE_OFFSET), mload(stateM)), MASK_16)\n                        if iszero(and(mload(stateM), or(shl(angle, HEXAGON_PERP_WALK_MASK), shl(shl(2, angle), SQUARE_PAINT_MASK)))) {\n                            mstore(stateM, or(mload(stateM), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateM)))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        if iszero(\n                            or(\n                                and(mload(stateR1M), shl(add(angle, 4), HEXAGON_PERP_WALK_MASK)),\n                                and(mload(stateM), shl(shl(2, add(angle, 1)), SQUARE_PAINT_MASK))\n                            )\n                        ) {\n                            mstore(stateM, or(mload(stateM), shl(add(shl(2, add(angle, 1)), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, add(angle, 1))), stateM)))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        switch angle\n                        case 0 {\n                            let state0M := and(shr(STATE_OFFSET, mload(stateM)), MASK_16)\n                            if iszero(and(mload(state0M), SQUARE_2_WALK_PAINT_MASK)) {\n                                mstore(state0M, or(mload(state0M), shl(SQUARE_2_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x120000, state0M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            if iszero(\n                                or(\n                                    and(mload(and(shr(STATE_1_OFFSET, mload(stateM)), MASK_16)), HEXAGON_PERP_3_WALK_MASK),\n                                    and(mload(stateR1M), SQUARE_PAINT_MASK)\n                                )\n                            ) {\n                                mstore(stateR1M, or(mload(stateR1M), shl(SQUARE_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x100000, stateR1M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                    }\n                }\n            }\n            function chooseColor() {\n                let shift := mload(SHIFT_M)\n                mstore(COLOR_M, add(shr(8, mul(mload(NUM_COLORS_M), and(shr(shift, mload(RANDOM_SOURCE)), MASK_8))), 1))\n                shift := add(shift, 8)\n                if eq(shift, 256) {\n                    mstore(RANDOM_SOURCE, keccak256(RANDOM_SOURCE, 0x20))\n                    shift := 0\n                }\n                mstore(SHIFT_M, shift)\n            }\n            let gridEnd := mload(UNROLLED_GRID_M)\n            for {\n                let stateM := GRID\n            } lt(stateM, gridEnd) {\n                stateM := add(stateM, 0x20)\n            } {\n                if iszero(and(mload(stateM), HEXAGON_PAINT_MASK)) {\n                    chooseColor()\n                    mstore(stateM, or(mload(stateM), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                    mstore(mload(STACK_IDX_M), shl(232, stateM))\n                    mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                    paintDF()\n                }\n                for {\n                    let angle\n                } lt(angle, 3) {\n                    angle := add(angle, 1)\n                } {\n                    if iszero(and(mload(stateM), shl(shl(2, angle), SQUARE_PAINT_MASK))) {\n                        chooseColor()\n                        mstore(stateM, or(mload(stateM), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                        mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateM)))\n                        mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        paintDF()\n                    }\n                    if and(lt(angle, 2), iszero(and(mload(stateM), shl(shl(2, angle), TRIANGLE_PAINT_MASK)))) {\n                        chooseColor()\n                        mstore(stateM, or(mload(stateM), shl(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                        mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, angle)), stateM)))\n                        mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        paintDF()\n                    }\n                }\n            }\n        }\n    }\n\n    function prepareUnrolledGrid() internal pure {\n        assembly {\n            let dim := mload(DIM_M)\n            let unrolledGrid := mload(UNROLLED_GRID_M)\n            let margin := mload(MARGIN_M)\n            let cols := mload(UNROLLED_GRID_COLS_M)\n            let gridCount := mul(mload(UNROLLED_GRID_ROWS_M), cols)\n            for {\n                let gridIdx\n            } lt(gridIdx, gridCount) {\n                gridIdx := add(gridIdx, 1)\n            } {\n                let stateM := add(unrolledGrid, shl(5, gridIdx))\n                let row := div(gridIdx, cols)\n                let col := mod(gridIdx, cols)\n                if and(\n                    and(and(gt(col, 0), lt(col, add(add(shl(1, margin), 3), dim))), gt(add(shl(1, row), 1), col)),\n                    lt(shl(1, row), add(add(add(shl(1, margin), 3), shl(1, dim)), col))\n                ) {\n                    let colN := sub(col, add(margin, 2))\n                    mstore(\n                        stateM,\n                        or(\n                            and(\n                                mload(\n                                    add(\n                                        add(\n                                            GRID,\n                                            shl(\n                                                add(mload(LOG2_DIM_M), 5),\n                                                and(sub(sub(row, add(margin, 2)), mul(shr(mload(LOG2_DIM_M), colN), shr(1, dim))), sub(dim, 1))\n                                            )\n                                        ),\n                                        shl(5, and(colN, sub(dim, 1)))\n                                    )\n                                ),\n                                0xfffffffffffffffff\n                            ),\n                            shl(\n                                EXPAND_ROOT_OFFSET,\n                                or(\n                                    iszero(mload(OPEN_M)),\n                                    and(\n                                        and(\n                                            and(gt(col, add(margin, 1)), lt(col, add(add(margin, 2), dim))),\n                                            gt(shl(1, row), add(add(margin, 1), col))\n                                        ),\n                                        lt(shl(1, row), add(add(add(margin, 2), shl(1, dim)), col))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    if iszero(mload(OPEN_M)) {\n                        mstore(stateM, or(and(mload(stateM), 0xfffffffffffff), shl(SELF_OFFSET, stateM)))\n                    }\n                }\n                mstore(stateM, or(mload(stateM), shl(ROW_COL_OFFSET, or(shl(8, col), row))))\n                for {\n                    let angle\n                } lt(angle, 6) {\n                    angle := add(angle, 1)\n                } {\n                    let hexagonR0Plus := and(add(or(shl(8, col), row), shr(shl(4, angle), ANGLE_TO_HEXAGON_PLUS)), MASK_16)\n                    mstore(\n                        stateM,\n                        or(\n                            mload(stateM),\n                            shl(\n                                add(shl(4, angle), STATE_OFFSET),\n                                add(add(unrolledGrid, mul(cols, shl(5, sub(and(hexagonR0Plus, MASK_8), 1)))), shl(5, sub(shr(8, hexagonR0Plus), 1)))\n                            )\n                        )\n                    )\n                }\n            }\n        }\n    }\n\n    function expand() internal pure {\n        assembly {\n            function expandDF() {\n                for {\n\n                } gt(mload(STACK_IDX_M), mload(STACK_M)) {\n\n                } {\n                    mstore(STACK_IDX_M, sub(mload(STACK_IDX_M), 0x3))\n                    let top := shr(232, mload(mload(STACK_IDX_M)))\n                    switch shr(20, top)\n                    case 0 {\n                        let colorStateM := and(shr(SELF_OFFSET, mload(top)), MASK_16)\n                        for {\n                            let angle\n                        } lt(angle, 3) {\n                            angle := add(angle, 1)\n                        } {\n                            if eq(and(shr(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                                mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), top)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                            let stateR3M := and(shr(add(shl(4, add(angle, 3)), STATE_OFFSET), mload(top)), MASK_16)\n                            let colorStateR3M := and(shr(SELF_OFFSET, mload(stateR3M)), MASK_16)\n                            if and(\n                                gt(colorStateR3M, 0),\n                                eq(and(shr(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(colorStateR3M)), MASK_4), mload(COLOR_M))\n                            ) {\n                                mstore(colorStateR3M, xor(mload(colorStateR3M), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateR3M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        mstore(top, xor(mload(top), HEXAGON_FULL_BOUNDARY_MASK))\n                        mstore(\n                            EDGE_COUNT_M,\n                            sub(\n                                add(\n                                    mload(EDGE_COUNT_M),\n                                    shl(1, and(shr(shl(2, and(shr(HEXAGON_EXPAND_OFFSET, mload(top)), MASK_6)), POPCOUNT_6), MASK_4))\n                                ),\n                                6\n                            )\n                        )\n                        mstore(mload(CACHE_IDX_M), shl(232, top))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                        mstore(mload(CACHE_IDX_M), shl(232, or(0x20000, top)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                        mstore(mload(CACHE_IDX_M), shl(232, or(0x40000, top)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                    }\n                    case 1 {\n                        let angle := and(shr(16, top), MASK_4)\n                        let stateM := and(top, MASK_16)\n                        let colorStateM := and(shr(SELF_OFFSET, mload(stateM)), MASK_16)\n                        if eq(and(shr(HEXAGON_PAINT_OFFSET, mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                            mstore(colorStateM, xor(mload(colorStateM), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, stateM))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        let stateR0M := and(shr(add(shl(4, angle), STATE_OFFSET), mload(stateM)), MASK_16)\n                        let colorStateR0M := and(shr(SELF_OFFSET, mload(stateR0M)), MASK_16)\n                        if and(gt(colorStateR0M, 0), eq(and(shr(HEXAGON_PAINT_OFFSET, mload(colorStateR0M)), MASK_4), mload(COLOR_M))) {\n                            mstore(colorStateR0M, xor(mload(colorStateR0M), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, stateR0M))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        switch eq(angle, 2)\n                        case 0 {\n                            if eq(and(shr(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                                mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, angle)), stateM)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            let state3M := and(shr(STATE_3_OFFSET, mload(stateM)), MASK_16)\n                            let colorState3M := and(shr(SELF_OFFSET, mload(state3M)), MASK_16)\n                            if and(gt(colorState3M, 0), eq(and(shr(TRIANGLE_PAINT_OFFSET, mload(colorState3M)), MASK_4), mload(COLOR_M))) {\n                                mstore(colorState3M, xor(mload(colorState3M), shl(TRIANGLE_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x200000, state3M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        switch eq(angle, 0)\n                        case 0 {\n                            if eq(and(shr(add(shl(2, sub(angle, 1)), TRIANGLE_PAINT_OFFSET), mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                                mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, sub(angle, 1)), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, sub(angle, 1))), stateM)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            let state5M := and(shr(STATE_5_OFFSET, mload(stateM)), MASK_16)\n                            let colorState5M := and(shr(SELF_OFFSET, mload(state5M)), MASK_16)\n                            if and(gt(colorState5M, 0), eq(and(shr(TRIANGLE_1_PAINT_OFFSET, mload(colorState5M)), MASK_4), mload(COLOR_M))) {\n                                mstore(colorState5M, xor(mload(colorState5M), shl(TRIANGLE_1_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x210000, state5M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        let angle3 := add(angle, 3)\n                        mstore(stateM, xor(mload(stateM), shl(angle, SQUARE_HALF_BOUNDARY_MASK)))\n                        mstore(stateR0M, xor(mload(stateR0M), shl(angle3, SQUARE_HALF_BOUNDARY_MASK)))\n                        mstore(\n                            EDGE_COUNT_M,\n                            sub(\n                                add(\n                                    mload(EDGE_COUNT_M),\n                                    shl(\n                                        1,\n                                        add(\n                                            add(\n                                                add(\n                                                    and(shr(add(angle, HEXAGON_EXPAND_OFFSET), mload(stateM)), 1),\n                                                    and(shr(add(angle, HEXAGON_PERP_EXPAND_OFFSET), mload(stateM)), 1)\n                                                ),\n                                                and(shr(add(angle3, HEXAGON_EXPAND_OFFSET), mload(stateR0M)), 1)\n                                            ),\n                                            and(shr(add(angle3, HEXAGON_PERP_EXPAND_OFFSET), mload(stateR0M)), 1)\n                                        )\n                                    )\n                                ),\n                                4\n                            )\n                        )\n                        mstore(mload(CACHE_IDX_M), shl(232, or(shl(16, angle), stateM)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                        mstore(mload(CACHE_IDX_M), shl(232, or(shl(16, angle3), stateR0M)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                    }\n                    case 2 {\n                        let angle := and(shr(16, top), MASK_4)\n                        let stateM := and(top, MASK_16)\n                        let stateR0M := and(shr(add(shl(4, angle), STATE_OFFSET), mload(stateM)), MASK_16)\n                        let stateR1M := and(shr(add(shl(4, add(angle, 1)), STATE_OFFSET), mload(stateM)), MASK_16)\n                        let colorStateM := and(shr(SELF_OFFSET, mload(stateM)), MASK_16)\n                        if eq(and(shr(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                            mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateM)))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        if eq(and(shr(add(shl(2, add(angle, 1)), SQUARE_PAINT_OFFSET), mload(colorStateM)), MASK_4), mload(COLOR_M)) {\n                            mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, add(angle, 1)), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                            mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, add(angle, 1))), stateM)))\n                            mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        }\n                        switch angle\n                        case 0 {\n                            let colorStateR0M := and(shr(SELF_OFFSET, mload(stateR0M)), MASK_16)\n                            if and(gt(colorStateR0M, 0), eq(and(shr(SQUARE_2_PAINT_OFFSET, mload(colorStateR0M)), MASK_4), mload(COLOR_M))) {\n                                mstore(colorStateR0M, xor(mload(colorStateR0M), shl(SQUARE_2_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x120000, stateR0M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        case 1 {\n                            let colorStateR1M := and(shr(SELF_OFFSET, mload(stateR1M)), MASK_16)\n                            if and(gt(colorStateR1M, 0), eq(and(shr(SQUARE_PAINT_OFFSET, mload(colorStateR1M)), MASK_4), mload(COLOR_M))) {\n                                mstore(colorStateR1M, xor(mload(colorStateR1M), shl(SQUARE_PAINT_OFFSET, mload(COLOR_M))))\n                                mstore(mload(STACK_IDX_M), shl(232, or(0x100000, stateR1M)))\n                                mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                            }\n                        }\n                        let angle2 := add(angle, 2)\n                        let angle4 := add(angle, 4)\n                        mstore(stateM, xor(mload(stateM), shl(angle, HEXAGON_PERP_EXPAND_MASK)))\n                        mstore(stateR0M, xor(mload(stateR0M), shl(angle2, HEXAGON_PERP_EXPAND_MASK)))\n                        mstore(stateR1M, xor(mload(stateR1M), shl(angle4, HEXAGON_PERP_EXPAND_MASK)))\n                        mstore(\n                            EDGE_COUNT_M,\n                            sub(\n                                add(\n                                    mload(EDGE_COUNT_M),\n                                    shl(\n                                        1,\n                                        add(\n                                            add(\n                                                and(shr(add(angle, HEXAGON_PERP_EXPAND_OFFSET), mload(stateM)), 1),\n                                                and(shr(add(angle2, HEXAGON_PERP_EXPAND_OFFSET), mload(stateR0M)), 1)\n                                            ),\n                                            and(shr(add(angle4, HEXAGON_PERP_EXPAND_OFFSET), mload(stateR1M)), 1)\n                                        )\n                                    )\n                                ),\n                                3\n                            )\n                        )\n                        mstore(mload(CACHE_IDX_M), shl(232, or(shl(16, angle), stateM)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                        mstore(mload(CACHE_IDX_M), shl(232, or(shl(16, angle2), stateR0M)))\n                        mstore(CACHE_IDX_M, add(mload(CACHE_IDX_M), 0x3))\n                    }\n                }\n            }\n            function writeBoundary() {\n                let outputIdx := mload(OUTPUT_IDX_M)\n                mstore(outputIdx, '<path d=\"')\n                outputIdx := add(outputIdx, 0x9)\n                let cacheEnd := mload(CACHE_IDX_M)\n                for {\n                    let cacheIdx := mload(CACHE_M)\n                } lt(cacheIdx, cacheEnd) {\n                    cacheIdx := add(cacheIdx, 0x3)\n                } {\n                    let vertex := shr(232, mload(cacheIdx))\n                    let stateM := and(vertex, MASK_16)\n                    let angle := and(shr(16, vertex), MASK_4)\n                    if iszero(and(mload(stateM), shl(HEXAGON_EXPAND_OFFSET, and(shr(mul(angle, 12), VERTEX_013_EXPAND_MASK), MASK_12)))) {\n                        continue\n                    }\n                    mstore8(outputIdx, 0x4d)\n                    outputIdx := add(outputIdx, 0x1)\n                    let hexagon := and(shr(ROW_COL_OFFSET, mload(stateM)), MASK_16)\n                    {\n                        let vx := and(add(mul(sub(shr(8, hexagon), add(mload(MARGIN_M), 2)), 4732), shr(shl(5, angle), ANGLE_TO_VERTEX_X)), MASK_32)\n                        if shr(31, vx) {\n                            vx := and(add(not(vx), 1), MASK_32)\n                            mstore8(outputIdx, 0x2d)\n                            outputIdx := add(outputIdx, 0x1)\n                        }\n                        let length := 1\n                        let a := vx\n                        if gt(a, 9999) {\n                            length := add(length, 4)\n                            a := div(a, 10000)\n                        }\n                        if gt(a, 99) {\n                            length := add(length, 2)\n                            a := div(a, 100)\n                        }\n                        if gt(a, 9) {\n                            length := add(length, 1)\n                        }\n                        let p := add(outputIdx, length)\n                        for {\n\n                        } gt(p, outputIdx) {\n\n                        } {\n                            p := sub(p, 0x1)\n                            mstore8(p, add(mod(vx, 10), 48))\n                            vx := div(vx, 10)\n                        }\n                        outputIdx := add(outputIdx, length)\n                    }\n                    mstore8(outputIdx, 0x20)\n                    outputIdx := add(outputIdx, 0x1)\n                    {\n                        let vy := and(\n                            add(\n                                mul(sub(sub(shl(1, and(hexagon, MASK_8)), shr(8, hexagon)), add(mload(MARGIN_M), 2)), 2732),\n                                shr(shl(5, angle), ANGLE_TO_VERTEX_Y)\n                            ),\n                            MASK_32\n                        )\n                        if shr(31, vy) {\n                            vy := and(add(not(vy), 1), MASK_32)\n                            mstore8(outputIdx, 0x2d)\n                            outputIdx := add(outputIdx, 0x1)\n                        }\n                        let length := 1\n                        let a := vy\n                        if gt(a, 9999) {\n                            length := add(length, 4)\n                            a := div(a, 10000)\n                        }\n                        if gt(a, 99) {\n                            length := add(length, 2)\n                            a := div(a, 100)\n                        }\n                        if gt(a, 9) {\n                            length := add(length, 1)\n                        }\n                        let p := add(outputIdx, length)\n                        for {\n\n                        } gt(p, outputIdx) {\n\n                        } {\n                            p := sub(p, 0x1)\n                            mstore8(p, add(mod(vy, 10), 48))\n                            vy := div(vy, 10)\n                        }\n                        outputIdx := add(outputIdx, length)\n                    }\n                    mstore8(outputIdx, 0x6c)\n                    outputIdx := add(outputIdx, 0x1)\n                    let edgeCount := mload(EDGE_COUNT_M)\n                    for {\n\n                    } 1 {\n\n                    } {\n                        if and(mload(stateM), shl(angle, HEXAGON_EXPAND_MASK)) {\n                            let adjusted := shr(shl(5, angle), ANGLE_EDGE_TO_VECTOR_OFFSET)\n                            let offset := and(adjusted, MASK_8)\n                            mstore(outputIdx, mload(add(ANGLE_EDGE_TO_VECTOR, offset)))\n                            outputIdx := add(outputIdx, sub(and(shr(8, adjusted), MASK_8), offset))\n                            mstore(stateM, xor(mload(stateM), shl(angle, HEXAGON_EXPAND_MASK)))\n                            angle := addmod(angle, 5, 6)\n                            edgeCount := sub(edgeCount, 1)\n                            continue\n                        }\n                        if and(mload(stateM), shl(angle, HEXAGON_PERP_EXPAND_MASK)) {\n                            let adjusted := shr(add(shl(5, angle), 8), ANGLE_EDGE_TO_VECTOR_OFFSET)\n                            let offset := and(adjusted, MASK_8)\n                            mstore(outputIdx, mload(add(ANGLE_EDGE_TO_VECTOR, offset)))\n                            outputIdx := add(outputIdx, sub(and(shr(8, adjusted), MASK_8), offset))\n                            mstore(stateM, xor(mload(stateM), shl(angle, HEXAGON_PERP_EXPAND_MASK)))\n                            stateM := and(shr(add(shl(4, angle), STATE_OFFSET), mload(stateM)), MASK_16)\n                            angle := addmod(angle, 2, 6)\n                            edgeCount := sub(edgeCount, 1)\n                            continue\n                        }\n                        let stateR1M := and(shr(add(shl(4, addmod(angle, 1, 6)), STATE_OFFSET), mload(stateM)), MASK_16)\n                        if and(mload(stateR1M), shl(addmod(angle, 4, 6), HEXAGON_PERP_EXPAND_MASK)) {\n                            let adjusted := shr(add(shl(5, angle), 16), ANGLE_EDGE_TO_VECTOR_OFFSET)\n                            let offset := and(adjusted, MASK_8)\n                            mstore(outputIdx, mload(add(ANGLE_EDGE_TO_VECTOR, offset)))\n                            outputIdx := add(outputIdx, sub(and(shr(8, adjusted), MASK_8), offset))\n                            stateM := stateR1M\n                            angle := addmod(angle, 4, 6)\n                            mstore(stateM, xor(mload(stateM), shl(angle, HEXAGON_PERP_EXPAND_MASK)))\n                            edgeCount := sub(edgeCount, 1)\n                            continue\n                        }\n                        if and(mload(stateM), shl(addmod(angle, 1, 6), HEXAGON_EXPAND_MASK)) {\n                            let adjusted := shr(add(shl(5, angle), 24), ANGLE_EDGE_TO_VECTOR_OFFSET)\n                            let offset := and(adjusted, MASK_8)\n                            mstore(outputIdx, mload(add(ANGLE_EDGE_TO_VECTOR, offset)))\n                            outputIdx := add(outputIdx, sub(and(shr(8, adjusted), MASK_8), offset))\n                            angle := addmod(angle, 1, 6)\n                            mstore(stateM, xor(mload(stateM), shl(angle, HEXAGON_EXPAND_MASK)))\n                            edgeCount := sub(edgeCount, 1)\n                            continue\n                        }\n                        break\n                    }\n                    mstore(EDGE_COUNT_M, edgeCount)\n                    if iszero(edgeCount) {\n                        break\n                    }\n                }\n                mstore(outputIdx, '\" fill=\"#')\n                outputIdx := add(outputIdx, 0x9)\n                mstore(outputIdx, mload(add(mload(PALETTE_M), mul(sub(mload(COLOR_M), 1), 0x6))))\n                outputIdx := add(outputIdx, 0x6)\n                mstore(outputIdx, '\"/>')\n                outputIdx := add(outputIdx, 0x3)\n                mstore(OUTPUT_IDX_M, outputIdx)\n            }\n            if mload(OPEN_M) {\n                mstore(RANDOM_SOURCE, keccak256(RANDOM_SOURCE, 0x20))\n                mstore(SHIFT_M, 0)\n                let sampleCount := mul(mload(DIM_M), mload(DIM_M))\n                for {\n                    let i\n                } lt(i, sampleCount) {\n                    i := add(i, 1)\n                } {\n                    let shift := mload(SHIFT_M)\n                    let stateM := add(\n                        mload(UNROLLED_GRID_M),\n                        shl(\n                            5,\n                            shr(\n                                16,\n                                mul(mul(mload(UNROLLED_GRID_ROWS_M), mload(UNROLLED_GRID_COLS_M)), and(shr(shift, mload(RANDOM_SOURCE)), MASK_16))\n                            )\n                        )\n                    )\n                    shift := add(shift, 16)\n                    if eq(shift, 256) {\n                        mstore(RANDOM_SOURCE, keccak256(RANDOM_SOURCE, 0x20))\n                        shift := 0\n                    }\n                    mstore(SHIFT_M, shift)\n                    let colorStateM := and(shr(SELF_OFFSET, mload(stateM)), MASK_16)\n                    if and(gt(colorStateM, 0), gt(and(mload(colorStateM), HEXAGON_PAINT_MASK), 0)) {\n                        mstore(COLOR_M, and(shr(HEXAGON_PAINT_OFFSET, mload(colorStateM)), MASK_4))\n                        mstore(colorStateM, xor(mload(colorStateM), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                        mstore(mload(STACK_IDX_M), shl(232, stateM))\n                        mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        mstore(CACHE_IDX_M, mload(CACHE_M))\n                        expandDF()\n                        writeBoundary()\n                    }\n                }\n            }\n            let unrolledGridEnd := mload(STACK_M)\n            for {\n                let stateM := mload(UNROLLED_GRID_M)\n            } lt(stateM, unrolledGridEnd) {\n                stateM := add(stateM, 0x20)\n            } {\n                if iszero(and(mload(stateM), shl(EXPAND_ROOT_OFFSET, 1))) {\n                    continue\n                }\n                let colorStateM := and(shr(SELF_OFFSET, mload(stateM)), MASK_16)\n                if and(mload(colorStateM), HEXAGON_PAINT_MASK) {\n                    mstore(COLOR_M, and(shr(HEXAGON_PAINT_OFFSET, mload(colorStateM)), MASK_4))\n                    mstore(colorStateM, xor(mload(colorStateM), shl(HEXAGON_PAINT_OFFSET, mload(COLOR_M))))\n                    mstore(mload(STACK_IDX_M), shl(232, stateM))\n                    mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                    mstore(CACHE_IDX_M, mload(CACHE_M))\n                    expandDF()\n                    writeBoundary()\n                }\n                for {\n                    let angle\n                } lt(angle, 3) {\n                    angle := add(angle, 1)\n                } {\n                    if and(mload(colorStateM), shl(shl(2, angle), SQUARE_PAINT_MASK)) {\n                        mstore(COLOR_M, and(shr(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(colorStateM)), MASK_4))\n                        mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, angle), SQUARE_PAINT_OFFSET), mload(COLOR_M))))\n                        mstore(mload(STACK_IDX_M), shl(232, or(or(0x100000, shl(16, angle)), stateM)))\n                        mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        mstore(CACHE_IDX_M, mload(CACHE_M))\n                        expandDF()\n                        writeBoundary()\n                    }\n                    if and(lt(angle, 2), gt(and(mload(colorStateM), shl(shl(2, angle), TRIANGLE_PAINT_MASK)), 0)) {\n                        mstore(COLOR_M, and(shr(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(colorStateM)), MASK_4))\n                        mstore(colorStateM, xor(mload(colorStateM), shl(add(shl(2, angle), TRIANGLE_PAINT_OFFSET), mload(COLOR_M))))\n                        mstore(mload(STACK_IDX_M), shl(232, or(or(0x200000, shl(16, angle)), stateM)))\n                        mstore(STACK_IDX_M, add(mload(STACK_IDX_M), 0x3))\n                        mstore(CACHE_IDX_M, mload(CACHE_M))\n                        expandDF()\n                        writeBoundary()\n                    }\n                }\n            }\n        }\n    }\n\n    function writeDecimalLookup() internal pure {\n        assembly {\n            // Assume z is signed 32-bit and |z| < 10 ** 8\n            function writeDecimal(z, decimalM, decimalLengthM) {\n                let outputIdx := mload(OUTPUT_IDX_M)\n                mstore(decimalM, outputIdx)\n                if shr(31, z) {\n                    z := and(add(not(z), 1), MASK_32)\n                    mstore8(outputIdx, 0x2d)\n                    outputIdx := add(outputIdx, 0x1)\n                }\n                let length := 1\n                let a := z\n                if gt(a, 9999) {\n                    length := add(length, 4)\n                    a := div(a, 10000)\n                }\n                if gt(a, 99) {\n                    length := add(length, 2)\n                    a := div(a, 100)\n                }\n                if gt(a, 9) {\n                    length := add(length, 1)\n                }\n                let p := add(outputIdx, length)\n                for {\n\n                } gt(p, outputIdx) {\n\n                } {\n                    p := sub(p, 0x1)\n                    mstore8(p, add(mod(z, 10), 48))\n                    z := div(z, 10)\n                }\n                outputIdx := add(outputIdx, length)\n                mstore(decimalLengthM, sub(outputIdx, mload(decimalM)))\n                mstore(OUTPUT_IDX_M, outputIdx)\n            }\n            writeDecimal(mul(sub(0, add(mload(MARGIN_M), 2)), 4732), OPEN_VIEW_BOX_X_DECIMAL_M, OPEN_VIEW_BOX_X_DECIMAL_LENGTH_M)\n            writeDecimal(mul(sub(0, add(mload(MARGIN_M), 4)), 2732), OPEN_VIEW_BOX_Y_DECIMAL_M, OPEN_VIEW_BOX_Y_DECIMAL_LENGTH_M)\n            writeDecimal(\n                mul(add(add(mload(DIM_M), 3), shl(1, mload(MARGIN_M))), 4732),\n                OPEN_VIEW_BOX_WIDTH_DECIMAL_M,\n                OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M\n            )\n            writeDecimal(mul(add(add(mload(DIM_M), 3), mload(MARGIN_M)), 5464), OPEN_VIEW_BOX_HEIGHT_DECIMAL_M, OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M)\n            writeDecimal(mul(mload(DIM_M), 4732), DOMAIN_WIDTH_DECIMAL_M, DOMAIN_WIDTH_DECIMAL_LENGTH_M)\n            writeDecimal(mul(mload(DIM_M), 5464), DOMAIN_HEIGHT_DECIMAL_M, DOMAIN_HEIGHT_DECIMAL_LENGTH_M)\n            writeDecimal(mload(TOKEN_ID_M), TOKEN_ID_DECIMAL_M, TOKEN_ID_DECIMAL_LENGTH_M)\n            writeDecimal(mload(DIM_M), DIM_DECIMAL_M, DIM_DECIMAL_LENGTH_M)\n            writeDecimal(mload(PALETTE_IDX_M), PALETTE_IDX_DECIMAL_M, PALETTE_IDX_DECIMAL_LENGTH_M)\n        }\n    }\n\n    function writePreExpand() internal pure {\n        assembly {\n            let outputIdx := mload(OUTPUT_IDX_M)\n            // '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"'\n            mstore(outputIdx, mload(mload(SVG_STRING_LOOKUP_M)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x20)))\n            outputIdx := add(outputIdx, 0x11)\n            switch mload(OPEN_M)\n            case 0 {\n                // '-2732 -2732 '\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xfa)))\n                outputIdx := add(outputIdx, 0xc)\n                mstore(outputIdx, mload(mload(DOMAIN_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_WIDTH_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(DOMAIN_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_HEIGHT_DECIMAL_LENGTH_M))\n                // '\">'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x31)))\n                outputIdx := add(outputIdx, 0x2)\n            }\n            case 1 {\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_X_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_X_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_Y_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_Y_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M))\n                // '\"><rect x=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x31)))\n                outputIdx := add(outputIdx, 0xb)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_X_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_X_DECIMAL_LENGTH_M))\n                // '\" y=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x41)))\n                outputIdx := add(outputIdx, 0x5)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_Y_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_Y_DECIMAL_LENGTH_M))\n                // '\" width=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x4b)))\n                outputIdx := add(outputIdx, 0x9)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M))\n                // '\" height=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x54)))\n                outputIdx := add(outputIdx, 0xa)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M))\n                // '\" fill=\"white\"/>'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x5e)))\n                outputIdx := add(outputIdx, 0x10)\n                // '<rect x=\"-2732\" y=\"-2732\" width='\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x33)))\n                outputIdx := add(outputIdx, 0x20)\n                mstore8(outputIdx, 0x22)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(DOMAIN_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_WIDTH_DECIMAL_LENGTH_M))\n                // '\" height=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x54)))\n                outputIdx := add(outputIdx, 0xa)\n                mstore(outputIdx, mload(mload(DOMAIN_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_HEIGHT_DECIMAL_LENGTH_M))\n                // '\" '\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x5e)))\n                outputIdx := add(outputIdx, 0x2)\n                // 'stroke=\"black\" stroke-width=\"100'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x71)))\n                outputIdx := add(outputIdx, 0x20)\n                // '\" fill=\"white\"/>'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x5e)))\n                outputIdx := add(outputIdx, 0x10)\n            }\n            // '<g stroke=\"black\" stroke-width=\"100\" stroke-linejoin=\"round\" stroke-linecap=\"round\" fill-rule=\"evenodd\">'\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x6e)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x8e)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xae)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xce)))\n            outputIdx := add(outputIdx, 0x8)\n            mstore(OUTPUT_IDX_M, outputIdx)\n        }\n    }\n\n    function writePostExpand() internal pure {\n        assembly {\n            let outputIdx := mload(OUTPUT_IDX_M)\n            // '</g>'\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xeb)))\n            outputIdx := add(outputIdx, 0x4)\n            if iszero(mload(OPEN_M)) {\n                // '<path d=\"'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xd6)))\n                outputIdx := add(outputIdx, 0x9)\n                mstore8(outputIdx, 0x4d)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_X_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_X_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_Y_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_Y_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x6c)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M))\n                // ' 0 0 '\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf5)))\n                outputIdx := add(outputIdx, 0x5)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M))\n                // ' -'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf9)))\n                outputIdx := add(outputIdx, 0x2)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_WIDTH_DECIMAL_LENGTH_M))\n                // ' 0 0 -'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf5)))\n                outputIdx := add(outputIdx, 0x6)\n                mstore(outputIdx, mload(mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(OPEN_VIEW_BOX_HEIGHT_DECIMAL_LENGTH_M))\n                // 'M-2732 -2732l0 '\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x106)))\n                outputIdx := add(outputIdx, 0xf)\n                mstore(outputIdx, mload(mload(DOMAIN_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_HEIGHT_DECIMAL_LENGTH_M))\n                mstore8(outputIdx, 0x20)\n                outputIdx := add(outputIdx, 0x1)\n                mstore(outputIdx, mload(mload(DOMAIN_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_WIDTH_DECIMAL_LENGTH_M))\n                // ' 0 0 -'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf5)))\n                outputIdx := add(outputIdx, 0x6)\n                mstore(outputIdx, mload(mload(DOMAIN_HEIGHT_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_HEIGHT_DECIMAL_LENGTH_M))\n                // ' -'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf9)))\n                outputIdx := add(outputIdx, 0x2)\n                mstore(outputIdx, mload(mload(DOMAIN_WIDTH_DECIMAL_M)))\n                outputIdx := add(outputIdx, mload(DOMAIN_WIDTH_DECIMAL_LENGTH_M))\n                // ' 0'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xf5)))\n                outputIdx := add(outputIdx, 0x2)\n                // '\" fill=\"white\"/>'\n                mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0x5e)))\n                outputIdx := add(outputIdx, 0x10)\n            }\n            // '</svg>'\n            mstore(outputIdx, mload(add(mload(SVG_STRING_LOOKUP_M), 0xef)))\n            outputIdx := add(outputIdx, 0x6)\n            mstore(outputIdx, 0)\n            mstore(OUTPUT_IDX_M, outputIdx)\n            mstore(SVG_START_M, mload(OUTPUT_M))\n            mstore(SVG_END_M, outputIdx)\n        }\n    }\n\n    function writeJSON() internal pure {\n        assembly {\n            let outputIdx := mload(OUTPUT_IDX_M)\n            // 'data:application/json,%7B%22name%22:%22Tiling%20'\n            mstore(outputIdx, mload(mload(JSON_STRING_LOOKUP_M)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x20)))\n            outputIdx := add(outputIdx, 0x10)\n            mstore(outputIdx, mload(mload(TOKEN_ID_DECIMAL_M)))\n            outputIdx := add(outputIdx, mload(TOKEN_ID_DECIMAL_LENGTH_M))\n            // '%22,%22description%22:%22Hexamillennia%20is%20generated%20entirely%20on%20the%20EVM.%20Released%20under%20CC0.%22,%22attributes%22:%5B%7B%22trait_type%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x30)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x50)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x70)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x90)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xb0)))\n            outputIdx := add(outputIdx, 0x1d)\n            // 'Size'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x14a)))\n            outputIdx := add(outputIdx, 0x4)\n            // '%22,%22value%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xcd)))\n            outputIdx := add(outputIdx, 0x13)\n            mstore(outputIdx, mload(mload(DIM_DECIMAL_M)))\n            outputIdx := add(outputIdx, mload(DIM_DECIMAL_LENGTH_M))\n            // '%22%7D,%7B%22trait_type%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xe0)))\n            outputIdx := add(outputIdx, 0x1e)\n            // 'Form'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x14e)))\n            outputIdx := add(outputIdx, 0x4)\n            // '%22,%22value%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xcd)))\n            outputIdx := add(outputIdx, 0x13)\n            switch mload(OPEN_M)\n            case 0 {\n                // 'Closed'\n                mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x15e)))\n                outputIdx := add(outputIdx, 0x6)\n            }\n            case 1 {\n                // 'Open'\n                mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x164)))\n                outputIdx := add(outputIdx, 0x4)\n            }\n            // '%22%7D,%7B%22trait_type%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xe0)))\n            outputIdx := add(outputIdx, 0x1e)\n            // 'Steps'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x152)))\n            outputIdx := add(outputIdx, 0x5)\n            // '%22,%22value%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xcd)))\n            outputIdx := add(outputIdx, 0x13)\n            switch mload(STEPS_IDX_M)\n            case 0 {\n                // 'Low'\n                mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x168)))\n                outputIdx := add(outputIdx, 0x3)\n            }\n            case 1 {\n                // 'Medium'\n                mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x16b)))\n                outputIdx := add(outputIdx, 0x6)\n            }\n            case 2 {\n                // 'High'\n                mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x171)))\n                outputIdx := add(outputIdx, 0x4)\n            }\n            // '%22%7D,%7B%22trait_type%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xe0)))\n            outputIdx := add(outputIdx, 0x1e)\n            // 'Palette'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x157)))\n            outputIdx := add(outputIdx, 0x7)\n            // '%22,%22value%22:%22'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0xcd)))\n            outputIdx := add(outputIdx, 0x13)\n            mstore(outputIdx, mload(mload(PALETTE_IDX_DECIMAL_M)))\n            outputIdx := add(outputIdx, mload(PALETTE_IDX_DECIMAL_LENGTH_M))\n            // '%22%7D%5D,%22image%22:%22data:image/svg+xml;base64,'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x111)))\n            outputIdx := add(outputIdx, 0x20)\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x131)))\n            outputIdx := add(outputIdx, 0x13)\n            // Base64 encode\n            //\n            // Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Base64.sol\n            let end := sub(mload(SVG_END_M), 0x20)\n            for {\n                let svgIdx := sub(mload(SVG_START_M), 0x20)\n            } lt(svgIdx, end) {\n\n            } {\n                svgIdx := add(svgIdx, 0x3)\n                let input := mload(svgIdx)\n                mstore8(outputIdx, mload(add(BASE64, and(shr(18, input), MASK_6))))\n                mstore8(add(outputIdx, 0x1), mload(add(BASE64, and(shr(12, input), MASK_6))))\n                mstore8(add(outputIdx, 0x2), mload(add(BASE64, and(shr(6, input), MASK_6))))\n                mstore8(add(outputIdx, 0x3), mload(add(BASE64, and(input, MASK_6))))\n                outputIdx := add(outputIdx, 0x4)\n            }\n            switch mod(sub(mload(SVG_END_M), mload(SVG_START_M)), 3)\n            case 1 {\n                mstore8(sub(outputIdx, 0x1), 0x3d)\n                mstore8(sub(outputIdx, 0x2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(outputIdx, 0x1), 0x3d)\n            }\n            // '%22%7D'\n            mstore(outputIdx, mload(add(mload(JSON_STRING_LOOKUP_M), 0x144)))\n            outputIdx := add(outputIdx, 0x6)\n            mstore(outputIdx, 0)\n            mstore(OUTPUT_IDX_M, outputIdx)\n        }\n    }\n\n    function resetOutput() internal pure {\n        assembly {\n            mstore(OUTPUT_M, add(mload(OUTPUT_IDX_M), 0x40))\n            mstore(OUTPUT_IDX_M, mload(OUTPUT_M))\n        }\n    }\n\n    function returnOutput() internal pure {\n        assembly {\n            let output := mload(OUTPUT_M)\n            let length := sub(mload(OUTPUT_IDX_M), output)\n            mstore(sub(output, 0x40), 0x20)\n            mstore(sub(output, 0x20), length)\n            return(sub(output, 0x40), add(shl(5, shr(5, add(length, 31))), 0x40))\n        }\n    }\n}\n"
48     }
49   },
50   "settings": {
51     "optimizer": {
52       "enabled": true,
53       "runs": 1000
54     },
55     "outputSelection": {
56       "*": {
57         "*": [
58           "evm.bytecode",
59           "evm.deployedBytecode",
60           "devdoc",
61           "userdoc",
62           "metadata",
63           "abi"
64         ]
65       }
66     },
67     "libraries": {}
68   }
69 }}