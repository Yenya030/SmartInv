1 {{
2   "language": "Solidity",
3   "sources": {
4     "src/PirexBtrfly.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ReentrancyGuard} from \"solmate/utils/ReentrancyGuard.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {Bytes32AddressLib} from \"solmate/utils/Bytes32AddressLib.sol\";\nimport {PirexBtrflyBase} from \"src/PirexBtrflyBase.sol\";\nimport {PxBtrfly} from \"src/PxBtrfly.sol\";\nimport {PirexFees} from \"src/PirexFees.sol\";\nimport {UnionPirexVault} from \"src/vault/UnionPirexVault.sol\";\nimport {ERC1155Solmate} from \"src/tokens/ERC1155Solmate.sol\";\nimport {ERC1155PresetMinterSupply} from \"src/tokens/ERC1155PresetMinterSupply.sol\";\nimport {IRewardDistributor} from \"src/interfaces/IRewardDistributor.sol\";\nimport {IRLBTRFLY} from \"src/interfaces/IRLBTRFLY.sol\";\n\n/**\n    @notice\n    Based on PirexCvx, updated and optimized using the latest guidelines\n    Notable modifications:\n        - Adapt main internal dependencies to use BTRFLYV2's contract suite\n        - Remove vote delegation related functionalities\n        - Add internal mapping structure to allow reward forwarding for specific accounts (ie. LPs)\n        - Add methods to manage the reward forwarding above\n        - Update snapshot reward redemption method to take into account reward forwarding\n*/\ncontract PirexBtrfly is ReentrancyGuard, PirexBtrflyBase {\n    using SafeTransferLib for ERC20;\n    using Bytes32AddressLib for address;\n\n    /**\n        @notice Data pertaining to an emergency migration\n        @param  recipient  address    Recipient of the tokens (e.g. new PirexBtrfly contract)\n        @param  tokens     address[]  Token addresses\n     */\n    struct EmergencyMigration {\n        address recipient;\n        address[] tokens;\n    }\n\n    // Users can choose between the two futures tokens when staking or initiating a redemption\n    enum Futures {\n        Vote,\n        Reward\n    }\n\n    // Configurable contracts\n    enum Contract {\n        PxBtrfly,\n        PirexFees,\n        RewardDistributor,\n        UpxBtrfly,\n        SpxBtrfly,\n        VpxBtrfly,\n        RpxBtrfly,\n        UnionPirexVault\n    }\n\n    // Configurable fees\n    enum Fees {\n        Reward,\n        RedemptionMax,\n        RedemptionMin,\n        Developers\n    }\n\n    // Duration for each reward distribution (1,209,600 seconds)\n    uint32 public constant EPOCH_DURATION = 2 weeks;\n\n    // Fee denominator\n    uint32 public constant FEE_DENOMINATOR = 1_000_000;\n\n    // Fee maximum\n    uint32 public constant FEE_MAX = 100_000;\n\n    // Maximum wait time for a BTRFLYV2 redemption (10,281,600 seconds)\n    uint32 public constant MAX_REDEMPTION_TIME = 17 weeks;\n\n    // Unused ERC1155 `data` param value\n    bytes private constant UNUSED_1155_DATA = \"\";\n\n    PxBtrfly public pxBtrfly;\n    PirexFees public pirexFees;\n    IRewardDistributor public rewardDistributor;\n    ERC1155Solmate public upxBtrfly;\n    ERC1155Solmate public spxBtrfly;\n    ERC1155PresetMinterSupply public vpxBtrfly;\n    ERC1155PresetMinterSupply public rpxBtrfly;\n    UnionPirexVault public unionPirex;\n\n    // Fees (e.g. 5000 / 1000000 = 0.5%)\n    mapping(Fees => uint32) public fees;\n\n    // BTRFLYV2 unlock timestamps mapped to amount being redeemed\n    mapping(uint256 => uint256) public redemptions;\n\n    // Reward forwarding mapping for the LPs\n    mapping(address => address) public rewardForwarding;\n\n    // Developers who are eligible for incentives as part of the new initiative\n    // to enable builders to sustainably build apps for the Pirex ecosystem\n    mapping(address => bool) public developers;\n\n    // Emergency migration data\n    EmergencyMigration public emergencyMigration;\n\n    // Non-Pirex multisig which has authority to fulfill emergency procedures\n    address public emergencyExecutor;\n\n    // In the case of a mass unlock (ie. migration), the current upxBtrfly would be deprecated\n    // and should allow holders to immediately redeem their BTRFLYV2 by burning upxBtrfly\n    bool public upxBtrflyDeprecated;\n\n    event SetContract(Contract indexed c, address contractAddress);\n    event SetFee(Fees indexed f, uint32 fee);\n    event AddDeveloper(address developer);\n    event RemoveDeveloper(address developer);\n    event MintFutures(\n        uint256 rounds,\n        Futures indexed f,\n        uint256 assets,\n        address indexed receiver\n    );\n    event Deposit(\n        uint256 assets,\n        address indexed receiver,\n        bool indexed shouldCompound,\n        address indexed developer\n    );\n    event InitiateRedemptions(\n        uint256[] lockIndexes,\n        Futures indexed f,\n        uint256[] assets,\n        address indexed receiver\n    );\n    event Redeem(\n        uint256[] unlockTimes,\n        uint256[] assets,\n        address indexed receiver,\n        bool legacy\n    );\n    event Stake(\n        uint256 rounds,\n        Futures indexed f,\n        uint256 assets,\n        address indexed receiver\n    );\n    event Unstake(uint256 id, uint256 assets, address indexed receiver);\n    event ClaimReward(address indexed token, uint256 amount);\n    event RedeemSnapshotRewards(\n        uint256 indexed epoch,\n        uint256[] rewardIndexes,\n        address indexed receiver,\n        uint256 snapshotBalance,\n        uint256 snapshotSupply\n    );\n    event RedeemFuturesRewards(\n        uint256 indexed epoch,\n        address indexed receiver,\n        bytes32[] rewards\n    );\n    event ExchangeFutures(\n        uint256 indexed epoch,\n        uint256 amount,\n        address indexed receiver,\n        Futures f\n    );\n    event SetRewardForwarding(address account, address to);\n    event UnsetRewardForwarding(address account);\n    event InitializeEmergencyExecutor(address _emergencyExecutor);\n    event SetEmergencyMigration(EmergencyMigration _emergencyMigration);\n    event SetUpxBtrflyDeprecated(bool state);\n    event ExecuteEmergencyMigration(address recipient, address[] tokens);\n\n    error ZeroAmount();\n    error BeforeUnlock();\n    error InsufficientBalance();\n    error AlreadyRedeemed();\n    error InsufficientRedemptionAllowance();\n    error PastExchangePeriod();\n    error InvalidFee();\n    error BeforeStakingExpiry();\n    error InvalidEpoch();\n    error EmptyArray();\n    error MismatchedArrayLengths();\n    error NoRewards();\n    error RedeemClosed();\n    error AlreadyInitialized();\n    error NoEmergencyExecutor();\n    error InvalidEmergencyMigration();\n    error NotAuthorized();\n    error NotContract();\n    error ForwardingNotSet();\n\n    /**\n        @param  _btrflyV2           address  BTRFLYV2 address    \n        @param  _rlBtrfly           address  rlBTRFLY address\n        @param  _pxBtrfly           address  PxBtrfly address\n        @param  _upxBtrfly          address  UpxBtrfly address\n        @param  _spxBtrfly          address  SpxBtrfly address\n        @param  _vpxBtrfly          address  VpxBtrfly address\n        @param  _rpxBtrfly          address  RpxBtrfly address\n        @param  _pirexFees          address  PirexFees address\n        @param  _rewardDistributor  address  RewardDistributor address\n     */\n    constructor(\n        address _btrflyV2,\n        address _rlBtrfly,\n        address _pxBtrfly,\n        address _upxBtrfly,\n        address _spxBtrfly,\n        address _vpxBtrfly,\n        address _rpxBtrfly,\n        address _pirexFees,\n        address _rewardDistributor\n    ) PirexBtrflyBase(_btrflyV2, _rlBtrfly) {\n        // Init with paused state, should only unpause after fully perform the full setup\n        _pause();\n\n        if (_pxBtrfly == address(0)) revert ZeroAddress();\n        if (_pirexFees == address(0)) revert ZeroAddress();\n        if (_upxBtrfly == address(0)) revert ZeroAddress();\n        if (_spxBtrfly == address(0)) revert ZeroAddress();\n        if (_vpxBtrfly == address(0)) revert ZeroAddress();\n        if (_rpxBtrfly == address(0)) revert ZeroAddress();\n        if (_rewardDistributor == address(0)) revert ZeroAddress();\n\n        pxBtrfly = PxBtrfly(_pxBtrfly);\n        pirexFees = PirexFees(_pirexFees);\n        upxBtrfly = ERC1155Solmate(_upxBtrfly);\n        spxBtrfly = ERC1155Solmate(_spxBtrfly);\n        vpxBtrfly = ERC1155PresetMinterSupply(_vpxBtrfly);\n        rpxBtrfly = ERC1155PresetMinterSupply(_rpxBtrfly);\n        rewardDistributor = IRewardDistributor(_rewardDistributor);\n    }\n\n    /** \n        @notice Set a contract address\n        @param  c                enum     Contract\n        @param  contractAddress  address  Contract address    \n     */\n    function setContract(Contract c, address contractAddress)\n        external\n        onlyOwner\n    {\n        if (contractAddress == address(0)) revert ZeroAddress();\n\n        emit SetContract(c, contractAddress);\n\n        if (c == Contract.PxBtrfly) {\n            pxBtrfly = PxBtrfly(contractAddress);\n            return;\n        }\n\n        if (c == Contract.PirexFees) {\n            pirexFees = PirexFees(contractAddress);\n            return;\n        }\n\n        if (c == Contract.RewardDistributor) {\n            rewardDistributor = IRewardDistributor(contractAddress);\n            return;\n        }\n\n        if (c == Contract.UpxBtrfly) {\n            upxBtrfly = ERC1155Solmate(contractAddress);\n            return;\n        }\n\n        if (c == Contract.SpxBtrfly) {\n            spxBtrfly = ERC1155Solmate(contractAddress);\n            return;\n        }\n\n        if (c == Contract.VpxBtrfly) {\n            vpxBtrfly = ERC1155PresetMinterSupply(contractAddress);\n            return;\n        }\n\n        if (c == Contract.RpxBtrfly) {\n            rpxBtrfly = ERC1155PresetMinterSupply(contractAddress);\n            return;\n        }\n\n        ERC20 pxBtrflyERC20 = ERC20(address(pxBtrfly));\n        address oldUnionPirex = address(unionPirex);\n\n        if (oldUnionPirex != address(0)) {\n            pxBtrflyERC20.safeApprove(oldUnionPirex, 0);\n        }\n\n        unionPirex = UnionPirexVault(contractAddress);\n        pxBtrflyERC20.safeApprove(address(unionPirex), type(uint256).max);\n    }\n\n    /** \n        @notice Set fee\n        @param  f    enum    Fee\n        @param  fee  uint32  Fee amount\n     */\n    function setFee(Fees f, uint32 fee) external onlyOwner {\n        if (fee > FEE_MAX) revert InvalidFee();\n        if (f == Fees.RedemptionMax && fee < fees[Fees.RedemptionMin])\n            revert InvalidFee();\n        if (f == Fees.RedemptionMin && fee > fees[Fees.RedemptionMax])\n            revert InvalidFee();\n\n        fees[f] = fee;\n\n        emit SetFee(f, fee);\n    }\n\n    /** \n        @notice Add developer to whitelist mapping\n        @param  developer  address  Developer\n     */\n    function addDeveloper(address developer) external onlyOwner {\n        if (developer == address(0)) revert ZeroAddress();\n\n        developers[developer] = true;\n\n        emit AddDeveloper(developer);\n    }\n\n    /** \n        @notice Remove developer from whitelist mapping\n        @param  developer  address  Developer\n     */\n    function removeDeveloper(address developer) external onlyOwner {\n        if (developer == address(0)) revert ZeroAddress();\n\n        developers[developer] = false;\n\n        emit RemoveDeveloper(developer);\n    }\n\n    /**\n        @notice Get current epoch\n        @return uint256  Current epoch\n     */\n    function getCurrentEpoch() public view returns (uint256) {\n        return (block.timestamp / EPOCH_DURATION) * EPOCH_DURATION;\n    }\n\n    /**\n        @notice Mint futures tokens\n        @param  rounds    uint256  Rounds (i.e. Reward distribution rounds)\n        @param  f         enum     Futures enum\n        @param  assets    uint256  Futures amount\n        @param  receiver  address  Receives futures\n    */\n    function _mintFutures(\n        uint256 rounds,\n        Futures f,\n        uint256 assets,\n        address receiver\n    ) internal {\n        emit MintFutures(rounds, f, assets, receiver);\n\n        ERC1155PresetMinterSupply token = f == Futures.Vote\n            ? vpxBtrfly\n            : rpxBtrfly;\n        uint256 startingEpoch = getCurrentEpoch() + EPOCH_DURATION;\n        uint256[] memory tokenIds = new uint256[](rounds);\n        uint256[] memory amounts = new uint256[](rounds);\n\n        for (uint256 i; i < rounds; ++i) {\n            tokenIds[i] = startingEpoch + i * EPOCH_DURATION;\n            amounts[i] = assets;\n        }\n\n        token.mintBatch(receiver, tokenIds, amounts, UNUSED_1155_DATA);\n    }\n\n    /**\n        @notice Redeem BTRFLYV2 for specified unlock times\n        @param  unlockTimes  uint256[]  rlBTRFLY unlock timestamps\n        @param  assets       uint256[]  upxBTRFLY amounts\n        @param  receiver     address    Receives BTRFLYV2\n        @param  legacy       bool       Whether current upxBtrfly contract has been deprecated\n     */\n    function _redeem(\n        uint256[] calldata unlockTimes,\n        uint256[] calldata assets,\n        address receiver,\n        bool legacy\n    ) internal {\n        uint256 unlockLen = unlockTimes.length;\n\n        if (unlockLen == 0) revert EmptyArray();\n        if (unlockLen != assets.length) revert MismatchedArrayLengths();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        emit Redeem(unlockTimes, assets, receiver, legacy);\n\n        uint256 totalAssets;\n\n        for (uint256 i; i < unlockLen; ++i) {\n            uint256 asset = assets[i];\n\n            if (!legacy && unlockTimes[i] > block.timestamp)\n                revert BeforeUnlock();\n            if (asset == 0) revert ZeroAmount();\n\n            totalAssets += asset;\n        }\n\n        // Perform unlocking and locking procedure to ensure enough BTRFLYV2 is available\n        if (!legacy) {\n            _lock();\n        }\n\n        // Subtract redemption amount from outstanding BTRFLYV2 amount\n        outstandingRedemptions -= totalAssets;\n\n        // Reverts if sender has an insufficient upxBTRFLY balance for any `unlockTime` id\n        upxBtrfly.burnBatch(msg.sender, unlockTimes, assets);\n\n        // Validates `to`\n        btrflyV2.safeTransfer(receiver, totalAssets);\n    }\n\n    /**\n        @notice Redeem multiple snapshot rewards as a pxBTRFLY holder for an epoch\n        @param  epoch          uint256    Epoch\n        @param  rewardIndexes  uint256[]  Reward token indexes\n        @param  account        address    pxBTRFLY holder\n        @param  receiver       address    Reward receiver\n    */\n    function _redeemSnapshotRewards(\n        uint256 epoch,\n        uint256[] memory rewardIndexes,\n        address account,\n        address receiver\n    ) internal {\n        uint256 rewardLen = rewardIndexes.length;\n\n        if (epoch == 0) revert InvalidEpoch();\n        if (rewardLen == 0) revert EmptyArray();\n\n        (\n            uint256 snapshotId,\n            bytes32[] memory rewards,\n            uint256[] memory snapshotRewards,\n\n        ) = pxBtrfly.getEpoch(epoch);\n\n        // Used to update the redeemed flag locally before updating to the storage all at once for gas efficiency\n        uint256 redeemed = pxBtrfly.getEpochRedeemedSnapshotRewards(\n            account,\n            epoch\n        );\n\n        // Check whether the holder maintained a positive balance before the snapshot\n        uint256 snapshotBalance = pxBtrfly.balanceOfAt(account, snapshotId);\n        uint256 snapshotSupply = pxBtrfly.totalSupplyAt(snapshotId);\n\n        if (snapshotBalance == 0) revert InsufficientBalance();\n\n        emit RedeemSnapshotRewards(\n            epoch,\n            rewardIndexes,\n            receiver,\n            snapshotBalance,\n            snapshotSupply\n        );\n\n        for (uint256 i; i < rewardLen; ++i) {\n            uint256 index = rewardIndexes[i];\n            uint256 indexRedeemed = (1 << index);\n            address token = address(uint160(bytes20(rewards[index])));\n            uint256 rewardAmount = (snapshotRewards[index] * snapshotBalance) /\n                snapshotSupply;\n\n            if ((redeemed & indexRedeemed) != 0) revert AlreadyRedeemed();\n\n            if (rewardAmount != 0) {\n                redeemed |= indexRedeemed;\n\n                ERC20(token).safeTransfer(receiver, rewardAmount);\n\n                // Update pendingBaseRewards based on the claimed reward amount for BTRFLYV2\n                if (token == address(btrflyV2)) {\n                    pendingBaseRewards -= rewardAmount;\n                }\n            }\n        }\n\n        // Update the redeemed rewards flag in storage to prevent double claimings\n        pxBtrfly.setEpochRedeemedSnapshotRewards(account, epoch, redeemed);\n    }\n\n    /**\n        @notice Redeem futures rewards for rpxBTRFLY holders for an epoch\n        @param  epoch     uint256  Epoch (ERC1155 token id)\n        @param  receiver  address  Receives futures rewards\n    */\n    function _redeemFuturesRewards(uint256 epoch, address receiver) internal {\n        if (epoch == 0) revert InvalidEpoch();\n        if (epoch > getCurrentEpoch()) revert InvalidEpoch();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        // Prevent users from burning their futures notes before rewards are claimed\n        (\n            ,\n            bytes32[] memory rewards,\n            ,\n            uint256[] memory futuresRewards\n        ) = pxBtrfly.getEpoch(epoch);\n\n        if (rewards.length == 0) revert NoRewards();\n\n        emit RedeemFuturesRewards(epoch, receiver, rewards);\n\n        // Check sender rpxBTRFLY balance\n        uint256 rpxBtrflyBalance = rpxBtrfly.balanceOf(msg.sender, epoch);\n\n        if (rpxBtrflyBalance == 0) revert InsufficientBalance();\n\n        // Store rpxBTRFLY total supply before burning\n        uint256 rpxBtrflyTotalSupply = rpxBtrfly.totalSupply(epoch);\n\n        // Burn rpxBTRFLY tokens\n        rpxBtrfly.burn(msg.sender, epoch, rpxBtrflyBalance);\n\n        uint256 rLen = rewards.length;\n\n        // Loop over rewards and transfer the amount entitled to the rpxBTRFLY token holder\n        for (uint256 i; i < rLen; ++i) {\n            address token = address(uint160(bytes20(rewards[i])));\n            uint256 rewardAmount = (futuresRewards[i] * rpxBtrflyBalance) /\n                rpxBtrflyTotalSupply;\n\n            // Update reward amount by deducting the amount transferred to the receiver\n            futuresRewards[i] -= rewardAmount;\n\n            // Proportionate to the % of rpxBTRFLY owned out of the rpxBTRFLY total supply\n            ERC20(token).safeTransfer(receiver, rewardAmount);\n\n            // Update pendingBaseRewards based on the claimed reward amount for BTRFLYV2 rewards\n            if (token == address(btrflyV2)) {\n                pendingBaseRewards -= rewardAmount;\n            }\n        }\n\n        // Update future rewards to reflect the amounts remaining post-redemption\n        pxBtrfly.updateEpochFuturesRewards(epoch, futuresRewards);\n    }\n\n    /**\n        @notice  Get reward indexes for the specified epoch\n        @param   epoch          uint256    Epoch\n        @return  rewardIndexes  uint256[]  Reward token indexes\n    */\n    function _getRewardIndexes(uint256 epoch)\n        internal\n        view\n        returns (uint256[] memory rewardIndexes)\n    {\n        (, bytes32[] memory rewards, , ) = pxBtrfly.getEpoch(epoch);\n\n        uint256 tLen = rewards.length;\n        rewardIndexes = new uint256[](tLen);\n\n        for (uint256 i; i < tLen; ++i) {\n            rewardIndexes[i] = i;\n        }\n    }\n\n    /**\n        @notice Calculate rewards\n        @param  feePercent       uint32   Reward fee percent\n        @param  snapshotSupply   uint256  pxBTRFLY supply for the current snapshot id\n        @param  rpxBtrflySupply  uint256  rpxBTRFLY supply for the current epoch\n        @param  received         uint256  Received amount\n        @return rewardFee        uint256  Fee for protocol\n        @return snapshotRewards  uint256  Rewards for pxBTRFLY token holders\n        @return futuresRewards   uint256  Rewards for futures token holders\n    */\n    function _calculateRewards(\n        uint32 feePercent,\n        uint256 snapshotSupply,\n        uint256 rpxBtrflySupply,\n        uint256 received\n    )\n        internal\n        pure\n        returns (\n            uint256 rewardFee,\n            uint256 snapshotRewards,\n            uint256 futuresRewards\n        )\n    {\n        // Rewards paid to the protocol\n        rewardFee = (received * feePercent) / FEE_DENOMINATOR;\n\n        // Rewards distributed amongst snapshot and futures tokenholders\n        uint256 rewards = received - rewardFee;\n\n        // Rewards distributed to snapshotted tokenholders\n        snapshotRewards =\n            (rewards * snapshotSupply) /\n            (snapshotSupply + rpxBtrflySupply);\n\n        // Rewards distributed to rpxBTRFLY token holders\n        futuresRewards = rewards - snapshotRewards;\n    }\n\n    /**\n        @notice Deposit BTRFLYV2\n        @param  assets          uint256  BTRFLYV2 amount\n        @param  receiver        address  Receives pxBTRFLY\n        @param  shouldCompound  bool     Whether to auto-compound\n        @param  developer       address  Developer incentive receiver\n     */\n    function deposit(\n        uint256 assets,\n        address receiver,\n        bool shouldCompound,\n        address developer\n    ) external whenNotPaused nonReentrant {\n        if (assets == 0) revert ZeroAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        emit Deposit(assets, receiver, shouldCompound, developer);\n\n        // Track amount of BTRFLYV2 waiting to be locked before `assets` is modified\n        pendingLocks += assets;\n\n        // Calculate the dev incentive, which will come out of the minted pxBTRFLY\n        uint256 developerIncentive = developer != address(0) &&\n            developers[developer]\n            ? (assets * fees[Fees.Developers]) / FEE_DENOMINATOR\n            : 0;\n\n        // Take snapshot if necessary\n        pxBtrfly.takeEpochSnapshot();\n\n        // Mint pxBTRFLY sans developer incentive - recipient depends on shouldCompound\n        pxBtrfly.mint(\n            shouldCompound ? address(this) : receiver,\n            assets - developerIncentive\n        );\n\n        // Transfer BTRFLYV2 to self in preparation for lock\n        btrflyV2.safeTransferFrom(msg.sender, address(this), assets);\n\n        if (developerIncentive != 0) {\n            // Mint pxBTRFLY for the developer\n            pxBtrfly.mint(developer, developerIncentive);\n        }\n\n        if (shouldCompound) {\n            // Update assets to ensure only the appropriate amount is deposited in vault\n            assets -= developerIncentive;\n\n            // Deposit pxBTRFLY into Union vault - user receives shares\n            unionPirex.deposit(assets, receiver);\n        }\n    }\n\n    /**\n        @notice Initiate BTRFLYV2 redemption\n        @param  lockData   IRLBTRFLY.LockedBalance  Locked balance index\n        @param  f          enum                     Futures enum\n        @param  assets     uint256                  pxBTRFLY amount\n        @param  receiver   address                  Receives upxBTRFLY\n        @param  feeMin     uint256                  Initiate redemption fee min\n        @param  feeMax     uint256                  Initiate redemption fee max\n        @return feeAmount  uint256                  Fee amount\n     */\n    function _initiateRedemption(\n        IRLBTRFLY.LockedBalance memory lockData,\n        Futures f,\n        uint256 assets,\n        address receiver,\n        uint256 feeMin,\n        uint256 feeMax\n    ) internal returns (uint256 feeAmount) {\n        if (assets == 0) revert ZeroAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        uint256 unlockTime = lockData.unlockTime;\n\n        // Used for calculating the fee and conditionally adding a round\n        uint256 waitTime = unlockTime - block.timestamp;\n\n        if (feeMax != 0) {\n            uint256 feePercent = feeMax -\n                (((feeMax - feeMin) * waitTime) / MAX_REDEMPTION_TIME);\n\n            feeAmount = (assets * feePercent) / FEE_DENOMINATOR;\n        }\n\n        uint256 postFeeAmount = assets - feeAmount;\n\n        // Increment redemptions for this unlockTime to prevent over-redeeming\n        redemptions[unlockTime] += postFeeAmount;\n\n        // Check if there is any sufficient allowance after factoring in redemptions by others\n        if (redemptions[unlockTime] > lockData.amount)\n            revert InsufficientRedemptionAllowance();\n\n        // Track assets that needs to remain unlocked for redemptions\n        outstandingRedemptions += postFeeAmount;\n\n        // Mint upxBTRFLY with unlockTime as the id - validates `to`\n        upxBtrfly.mint(receiver, unlockTime, postFeeAmount, UNUSED_1155_DATA);\n\n        // Determine how many futures notes rounds to mint\n        uint256 rounds = waitTime / EPOCH_DURATION;\n\n        // Check if the lock was in the first week/half of an epoch\n        // Handle case where remaining time is between 1 and 2 weeks\n        if (\n            rounds == 0 &&\n            unlockTime % EPOCH_DURATION != 0 &&\n            waitTime > (EPOCH_DURATION / 2)\n        ) {\n            // Rounds is 0 if waitTime is between 1 and 2 weeks\n            // Increment by 1 since user should receive 1 round of rewards\n            unchecked {\n                ++rounds;\n            }\n        }\n\n        // Mint vpxBTRFLY or rpxBTRFLY (using assets as we do not take a fee from this)\n        _mintFutures(rounds, f, assets, receiver);\n\n        return feeAmount;\n    }\n\n    /**\n        @notice Initiate BTRFLYV2 redemptions\n        @param  lockIndexes  uint256[]  Locked balance index\n        @param  f            enum       Futures enum\n        @param  assets       uint256[]  pxBTRFLY amounts\n        @param  receiver     address    Receives upxBTRFLY\n     */\n    function initiateRedemptions(\n        uint256[] calldata lockIndexes,\n        Futures f,\n        uint256[] calldata assets,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        uint256 lockLen = lockIndexes.length;\n\n        if (lockLen == 0) revert EmptyArray();\n        if (lockLen != assets.length) revert MismatchedArrayLengths();\n\n        emit InitiateRedemptions(lockIndexes, f, assets, receiver);\n\n        (, , , IRLBTRFLY.LockedBalance[] memory lockData) = rlBtrfly\n            .lockedBalances(address(this));\n        uint256 totalAssets;\n        uint256 feeAmount;\n        uint256 feeMin = fees[Fees.RedemptionMin];\n        uint256 feeMax = fees[Fees.RedemptionMax];\n\n        for (uint256 i; i < lockLen; ++i) {\n            totalAssets += assets[i];\n            feeAmount += _initiateRedemption(\n                lockData[lockIndexes[i]],\n                f,\n                assets[i],\n                receiver,\n                feeMin,\n                feeMax\n            );\n        }\n\n        // Burn pxBTRFLY - reverts if sender balance is insufficient\n        pxBtrfly.burn(msg.sender, totalAssets - feeAmount);\n\n        if (feeAmount != 0) {\n            // Allow PirexFees to distribute fees directly from sender\n            pxBtrfly.operatorApprove(msg.sender, address(pirexFees), feeAmount);\n\n            // Distribute fees\n            pirexFees.distributeFees(msg.sender, address(pxBtrfly), feeAmount);\n        }\n    }\n\n    /**\n        @notice Redeem BTRFLYV2 for specified unlock times\n        @param  unlockTimes  uint256[]  BTRFLYV2 unlock timestamps\n        @param  assets       uint256[]  upxBTRFLY amounts\n        @param  receiver     address    Receives BTRFLYV2\n     */\n    function redeem(\n        uint256[] calldata unlockTimes,\n        uint256[] calldata assets,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        if (upxBtrflyDeprecated) revert RedeemClosed();\n\n        _redeem(unlockTimes, assets, receiver, false);\n    }\n\n    /**\n        @notice Redeem BTRFLYV2 for deprecated upxBTRFLY holders if enabled\n        @param  unlockTimes  uint256[]  BTRFLYV2 unlock timestamps\n        @param  assets       uint256[]  upxBTRFLY amounts\n        @param  receiver     address    Receives BTRFLYV2\n     */\n    function redeemLegacy(\n        uint256[] calldata unlockTimes,\n        uint256[] calldata assets,\n        address receiver\n    ) external whenPaused nonReentrant {\n        if (!upxBtrflyDeprecated) revert RedeemClosed();\n\n        _redeem(unlockTimes, assets, receiver, true);\n    }\n\n    /**\n        @notice Stake pxBTRFLY\n        @param  rounds    uint256  Rounds (i.e. Reward distribution rounds)\n        @param  f         enum     Futures enum\n        @param  assets    uint256  pxBTRFLY amount\n        @param  receiver  address  Receives spxBTRFLY\n    */\n    function stake(\n        uint256 rounds,\n        Futures f,\n        uint256 assets,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        if (rounds == 0) revert ZeroAmount();\n        if (assets == 0) revert ZeroAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        // Burn pxBTRFLY\n        pxBtrfly.burn(msg.sender, assets);\n\n        emit Stake(rounds, f, assets, receiver);\n\n        // Mint spxBTRFLY with the stake expiry timestamp as the id\n        spxBtrfly.mint(\n            receiver,\n            getCurrentEpoch() + EPOCH_DURATION * rounds,\n            assets,\n            UNUSED_1155_DATA\n        );\n\n        _mintFutures(rounds, f, assets, receiver);\n    }\n\n    /**\n        @notice Unstake pxBTRFLY\n        @param  id        uint256  spxBTRFLY id (an epoch timestamp)\n        @param  assets    uint256  spxBTRFLY amount\n        @param  receiver  address  Receives pxBTRFLY\n    */\n    function unstake(\n        uint256 id,\n        uint256 assets,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        if (id > block.timestamp) revert BeforeStakingExpiry();\n        if (assets == 0) revert ZeroAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        // Mint pxBTRFLY for receiver\n        pxBtrfly.mint(receiver, assets);\n\n        emit Unstake(id, assets, receiver);\n\n        // Burn spxBTRFLY from sender\n        spxBtrfly.burn(msg.sender, id, assets);\n    }\n\n    /**\n        @notice Claim multiple rewards from the RewardDistributor\n        @param  claims  Claim[]  Rewards metadata\n    */\n    function claimRewards(IRewardDistributor.Claim[] calldata claims)\n        external\n        whenNotPaused\n        nonReentrant\n    {\n        uint256 tLen = claims.length;\n\n        if (tLen == 0) revert EmptyArray();\n\n        // Take snapshot before claiming rewards, if necessary\n        pxBtrfly.takeEpochSnapshot();\n\n        uint256 epoch = getCurrentEpoch();\n        (uint256 snapshotId, , , ) = pxBtrfly.getEpoch(epoch);\n        uint256 rpxBtrflySupply = rpxBtrfly.totalSupply(epoch);\n\n        for (uint256 i; i < tLen; ++i) {\n            address token = claims[i].token;\n            uint256 amount = claims[i].amount;\n            bytes32[] memory merkleProof = claims[i].merkleProof;\n            ERC20 t = ERC20(token);\n\n            if (token == address(0)) revert ZeroAddress();\n\n            // Calculate actual claimable amount here\n            // as the `amount` param is a cumulative amount since the first reward\n            uint256 claimable = amount -\n                pxBtrfly.cumulativeRewardsByToken(token);\n\n            if (claimable == 0) revert ZeroAmount();\n\n            // Perform claim only when needed\n            if (rewardDistributor.claimed(token, address(this)) < amount) {\n                IRewardDistributor.Claim[]\n                    memory params = new IRewardDistributor.Claim[](1);\n                params[0].token = token;\n                params[0].account = address(this);\n                params[0].amount = amount;\n                params[0].merkleProof = merkleProof;\n\n                // Validates `token`, `amount`, and `merkleProof`\n                rewardDistributor.claim(params);\n            }\n\n            // Keep track of the last claimed amount for each reward token\n            pxBtrfly.updateCumulativeRewardsByToken(token, amount);\n\n            emit ClaimReward(token, amount);\n\n            (\n                uint256 rewardFee,\n                uint256 snapshotRewards,\n                uint256 futuresRewards\n            ) = _calculateRewards(\n                    fees[Fees.Reward],\n                    pxBtrfly.totalSupplyAt(snapshotId),\n                    rpxBtrflySupply,\n                    claimable\n                );\n\n            // Update pendingBaseReward to exclude claimed BTRFLYV2 from being locked\n            if (token == address(btrflyV2)) {\n                pendingBaseRewards += snapshotRewards + futuresRewards;\n            }\n\n            // Add reward token address and snapshot/futuresRewards amounts (same index for all)\n            pxBtrfly.addEpochRewardMetadata(\n                epoch,\n                token.fillLast12Bytes(),\n                snapshotRewards,\n                futuresRewards\n            );\n\n            // Distribute fees\n            t.safeApprove(address(pirexFees), rewardFee);\n            pirexFees.distributeFees(address(this), token, rewardFee);\n        }\n    }\n\n    /**\n        @notice Redeem multiple snapshot rewards as a pxBTRFLY holder for an epoch\n        @param  epoch          uint256    Epoch\n        @param  rewardIndexes  uint256[]  Reward token indexes\n        @param  receiver        address   Reward receiver\n    */\n    function redeemSnapshotRewards(\n        uint256 epoch,\n        uint256[] calldata rewardIndexes,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        if (receiver == address(0)) revert ZeroAddress();\n\n        _redeemSnapshotRewards(epoch, rewardIndexes, msg.sender, receiver);\n    }\n\n    /**\n        @notice Restricted method to redeem snapshot rewards on behalf of an LP contract for an epoch\n        @param  epoch          uint256    Epoch\n        @param  rewardIndexes  uint256[]  Reward token indexes\n        @param  lpContract     address    LP contract address\n    */\n    function redeemSnapshotRewardsPrivileged(\n        uint256 epoch,\n        uint256[] calldata rewardIndexes,\n        address lpContract\n    ) external whenNotPaused nonReentrant onlyOwner {\n        address receiver = rewardForwarding[lpContract];\n\n        if (receiver == address(0)) revert ForwardingNotSet();\n\n        _redeemSnapshotRewards(epoch, rewardIndexes, lpContract, receiver);\n    }\n\n    /**\n        @notice Bulk redeem snapshot rewards as a pxBTRFLY holder for multiple epochs\n        @param  epochs    uint256[]  Epochs\n        @param  receiver  address   Reward receiver\n    */\n    function bulkRedeemSnapshotRewards(\n        uint256[] calldata epochs,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        uint256 eLen = epochs.length;\n\n        if (eLen == 0) revert EmptyArray();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        for (uint256 i; i < eLen; ++i) {\n            uint256 epoch = epochs[i];\n\n            _redeemSnapshotRewards(\n                epoch,\n                _getRewardIndexes(epoch),\n                msg.sender,\n                receiver\n            );\n        }\n    }\n\n    /**\n        @notice Restricted method to bulk redeem snapshot rewards on behalf of an LP contract for multiple epochs\n        @param  epochs      uint256[]  Epochs\n        @param  lpContract  address    LP contract address\n    */\n    function bulkRedeemSnapshotRewardsPrivileged(\n        uint256[] calldata epochs,\n        address lpContract\n    ) external whenNotPaused nonReentrant onlyOwner {\n        uint256 eLen = epochs.length;\n        address receiver = rewardForwarding[lpContract];\n\n        if (eLen == 0) revert EmptyArray();\n        if (receiver == address(0)) revert ForwardingNotSet();\n\n        for (uint256 i; i < eLen; ++i) {\n            uint256 epoch = epochs[i];\n\n            _redeemSnapshotRewards(\n                epoch,\n                _getRewardIndexes(epoch),\n                lpContract,\n                receiver\n            );\n        }\n    }\n\n    /**\n        @notice Redeem futures rewards for rpxBTRFLY holders for an epoch\n        @param  epoch     uint256  Epoch (ERC1155 token id)\n        @param  receiver  address  Receives futures rewards\n    */\n    function redeemFuturesRewards(uint256 epoch, address receiver)\n        external\n        whenNotPaused\n        nonReentrant\n    {\n        _redeemFuturesRewards(epoch, receiver);\n    }\n\n    /**\n        @notice Bulk redeem futures rewards for rpxBTRFLY holders for multiple epochs\n        @param  epochs    uint256[]  Epochs (ERC1155 token ids)\n        @param  receiver  address    Receives futures rewards\n    */\n    function bulkRedeemFuturesRewards(\n        uint256[] calldata epochs,\n        address receiver\n    ) external whenNotPaused nonReentrant {\n        uint256 eLen = epochs.length;\n\n        if (eLen == 0) revert EmptyArray();\n\n        for (uint256 i; i < eLen; ++i) {\n            _redeemFuturesRewards(epochs[i], receiver);\n        }\n    }\n\n    /**\n        @notice Exchange one futures token for another\n        @param  epoch     uint256  Epoch (ERC1155 token id)\n        @param  amount    uint256  Exchange amount\n        @param  receiver  address  Receives futures token\n        @param  f         enum     Futures enum\n    */\n    function exchangeFutures(\n        uint256 epoch,\n        uint256 amount,\n        address receiver,\n        Futures f\n    ) external whenNotPaused {\n        // Users can only exchange futures tokens for future epochs\n        if (epoch <= getCurrentEpoch()) revert PastExchangePeriod();\n        if (amount == 0) revert ZeroAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n\n        ERC1155PresetMinterSupply futuresIn = f == Futures.Vote\n            ? vpxBtrfly\n            : rpxBtrfly;\n        ERC1155PresetMinterSupply futuresOut = f == Futures.Vote\n            ? rpxBtrfly\n            : vpxBtrfly;\n\n        emit ExchangeFutures(epoch, amount, receiver, f);\n\n        // Validates `amount` (balance)\n        futuresIn.burn(msg.sender, epoch, amount);\n\n        // Validates `to`\n        futuresOut.mint(receiver, epoch, amount, UNUSED_1155_DATA);\n    }\n\n    /**\n        @notice Restricted method to set reward forwarding for LPs\n        @param  lpContract  address  LP contract address\n        @param  to          address  Account that rewards will be sent to\n     */\n    function setRewardForwarding(address lpContract, address to)\n        external\n        onlyOwner\n    {\n        if (lpContract.code.length == 0) revert NotContract();\n        if (to == address(0)) revert ZeroAddress();\n\n        rewardForwarding[lpContract] = to;\n\n        emit SetRewardForwarding(lpContract, to);\n    }\n\n    /**\n        @notice Restricted method to unset reward forwarding for LPs\n        @param  lpContract  address  LP contract address\n     */\n    function unsetRewardForwarding(address lpContract) external onlyOwner {\n        if (lpContract.code.length == 0) revert NotContract();\n\n        delete rewardForwarding[lpContract];\n\n        emit UnsetRewardForwarding(lpContract);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EMERGENCY/MIGRATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n        @notice Initialize the emergency executor address\n        @param  _emergencyExecutor  address  Non-Pirex multisig\n     */\n    function initializeEmergencyExecutor(address _emergencyExecutor)\n        external\n        onlyOwner\n        whenPaused\n    {\n        if (_emergencyExecutor == address(0)) revert ZeroAddress();\n        if (emergencyExecutor != address(0)) revert AlreadyInitialized();\n\n        emergencyExecutor = _emergencyExecutor;\n\n        emit InitializeEmergencyExecutor(_emergencyExecutor);\n    }\n\n    /** \n        @notice Set the emergency migration data\n        @param  _emergencyMigration  EmergencyMigration  Emergency migration data\n     */\n    function setEmergencyMigration(\n        EmergencyMigration calldata _emergencyMigration\n    ) external onlyOwner whenPaused {\n        if (emergencyExecutor == address(0)) revert NoEmergencyExecutor();\n        if (_emergencyMigration.recipient == address(0))\n            revert InvalidEmergencyMigration();\n        if (_emergencyMigration.tokens.length == 0)\n            revert InvalidEmergencyMigration();\n\n        emergencyMigration = _emergencyMigration;\n\n        emit SetEmergencyMigration(_emergencyMigration);\n    }\n\n    /** \n        @notice Execute the emergency migration\n     */\n    function executeEmergencyMigration() external whenPaused {\n        if (msg.sender != emergencyExecutor) revert NotAuthorized();\n\n        address migrationRecipient = emergencyMigration.recipient;\n\n        if (migrationRecipient == address(0))\n            revert InvalidEmergencyMigration();\n\n        address[] memory migrationTokens = emergencyMigration.tokens;\n        uint256 tLen = migrationTokens.length;\n\n        if (tLen == 0) revert InvalidEmergencyMigration();\n\n        uint256 o = outstandingRedemptions;\n\n        for (uint256 i; i < tLen; ++i) {\n            ERC20 token = ERC20(migrationTokens[i]);\n            uint256 balance = token.balanceOf(address(this));\n\n            if (token == btrflyV2) {\n                // Transfer the diff between BTRFLYV2 balance and outstandingRedemptions\n                balance = balance > o ? balance - o : 0;\n            }\n\n            token.safeTransfer(migrationRecipient, balance);\n        }\n\n        emit ExecuteEmergencyMigration(migrationRecipient, migrationTokens);\n    }\n\n    /**\n        @notice Set whether the currently set upxBtrfly contract is deprecated or not\n        @param  state  bool  Deprecation state\n     */\n    function setUpxBtrflyDeprecated(bool state) external onlyOwner whenPaused {\n        upxBtrflyDeprecated = state;\n\n        emit SetUpxBtrflyDeprecated(state);\n    }\n}\n"
6     },
7     "lib/solmate/src/utils/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"
9     },
10     "lib/solmate/src/tokens/ERC20.sol": {
11       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
12     },
13     "lib/solmate/src/utils/SafeTransferLib.sol": {
14       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
15     },
16     "lib/solmate/src/utils/Bytes32AddressLib.sol": {
17       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"
18     },
19     "src/PirexBtrflyBase.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {Pausable} from \"openzeppelin-contracts/contracts/security/Pausable.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {IRLBTRFLY} from \"./interfaces/IRLBTRFLY.sol\";\n\ncontract PirexBtrflyBase is Ownable, Pausable {\n    using SafeTransferLib for ERC20;\n\n    ERC20 public immutable btrflyV2;\n\n    // Address of the BTRFLYV2 locker (rlBTRFLY)\n    IRLBTRFLY public rlBtrfly;\n\n    // The amount of BTRFLYV2 that needs to remain unlocked for redemptions\n    uint256 public outstandingRedemptions;\n\n    // The amount of BTRFLYV2 (claimed as rewards) that should not be locked\n    uint256 public pendingBaseRewards;\n\n    // The amount of new BTRFLYV2 deposits that is awaiting lock\n    uint256 public pendingLocks;\n\n    event SetLocker(address _rlBtrfly);\n\n    error ZeroAddress();\n    error EmptyString();\n\n    /**\n        @param  _btrflyV2  address  BTRFLYV2 address\n        @param  _rlBtrfly  address  rlBTRFLY address\n     */\n    constructor(address _btrflyV2, address _rlBtrfly) {\n        if (_btrflyV2 == address(0)) revert ZeroAddress();\n        if (_rlBtrfly == address(0)) revert ZeroAddress();\n\n        btrflyV2 = ERC20(_btrflyV2);\n        rlBtrfly = IRLBTRFLY(_rlBtrfly);\n\n        // Max allowance for rlBTRFLY\n        btrflyV2.safeApprove(address(rlBtrfly), type(uint256).max);\n    }\n\n    /** \n        @notice Set the locker (rlBTRFLY) address\n        @param  _rlBtrfly  address  rlBTRFLY address\n     */\n    function setLocker(address _rlBtrfly) external onlyOwner {\n        if (_rlBtrfly == address(0)) revert ZeroAddress();\n\n        emit SetLocker(_rlBtrfly);\n\n        btrflyV2.safeApprove(address(rlBtrfly), 0);\n\n        rlBtrfly = IRLBTRFLY(_rlBtrfly);\n\n        btrflyV2.safeApprove(_rlBtrfly, type(uint256).max);\n    }\n\n    /**\n        @notice Unlock BTRFLYV2\n     */\n    function _unlock() internal {\n        (, uint256 unlockable, , ) = rlBtrfly.lockedBalances(address(this));\n\n        if (unlockable != 0) rlBtrfly.processExpiredLocks(false);\n    }\n\n    /**\n        @notice Unlock BTRFLYV2 and relock excess\n     */\n    function _lock() internal {\n        _unlock();\n\n        // Should not include pendingBaseRewards\n        uint256 balance = btrflyV2.balanceOf(address(this)) - pendingBaseRewards;\n        bool balanceGreaterThanRedemptions = balance > outstandingRedemptions;\n\n        // Lock BTRFLYV2 if the balance is greater than outstanding redemptions or if there are pending locks\n        if (balanceGreaterThanRedemptions || pendingLocks != 0) {\n            uint256 balanceRedemptionsDifference = balanceGreaterThanRedemptions\n                ? balance - outstandingRedemptions\n                : 0;\n\n            // Lock amount is the greater of the two: balanceRedemptionsDifference or pendingLocks\n            // balanceRedemptionsDifference is greater if there is unlocked BTRFLYV2 that isn't reserved for redemptions + deposits\n            // pendingLocks is greater if there are more new deposits than unlocked BTRFLYV2 that is reserved for redemptions\n            rlBtrfly.lock(\n                address(this),\n                balanceRedemptionsDifference > pendingLocks\n                    ? balanceRedemptionsDifference\n                    : pendingLocks\n            );\n\n            pendingLocks = 0;\n        }\n    }\n\n    /**\n        @notice Non-permissioned relock method\n     */\n    function lock() external whenNotPaused {\n        _lock();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        EMERGENCY/MIGRATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n        @notice Set the contract's pause state\n        @param state  bool  Pause state\n    */\n    function setPauseState(bool state) external onlyOwner {\n        if (state) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /**\n        @notice Manually unlock BTRFLYV2 in the case of a mass unlock\n     */\n    function unlock() external whenPaused onlyOwner {\n        rlBtrfly.processExpiredLocks(false);\n    }\n\n    /**\n        @notice Manually relock BTRFLYV2 with a new rlBTRFLY contract\n     */\n    function pausedRelock() external whenPaused onlyOwner {\n        _lock();\n    }\n}\n"
21     },
22     "src/PxBtrfly.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {Pausable} from \"openzeppelin-contracts/contracts/security/Pausable.sol\";\nimport {ERC20SnapshotSolmate} from \"src/tokens/ERC20SnapshotSolmate.sol\";\n\ncontract PxBtrfly is\n    ERC20SnapshotSolmate(\"Pirex BTRFLY\", \"pxBTRFLY\", 18),\n    Ownable\n{\n    /**\n        @notice Epoch details\n                Reward/snapshotRewards/futuresRewards indexes are associated with 1 reward\n        @param  snapshotId               uint256    Snapshot id\n        @param  rewards                  bytes32[]  Rewards\n        @param  snapshotRewards          uint256[]  Snapshot reward amounts\n        @param  futuresRewards           uint256[]  Futures reward amounts\n        @param  redeemedSnapshotRewards  mapping    Redeemed snapshot rewards\n     */\n    struct Epoch {\n        uint256 snapshotId;\n        bytes32[] rewards;\n        uint256[] snapshotRewards;\n        uint256[] futuresRewards;\n        mapping(address => uint256) redeemedSnapshotRewards;\n    }\n\n    // Address of currently assigned operator\n    address public operator;\n\n    // Epochs mapped to epoch details\n    mapping(uint256 => Epoch) private epochs;\n\n    // Tracks cumulative total amount of rewards per token\n    mapping(address => uint256) public cumulativeRewardsByToken;\n\n    event SetOperator(address operator);\n    event UpdateEpochFuturesRewards(\n        uint256 indexed epoch,\n        uint256[] futuresRewards\n    );\n\n    error NotAuthorized();\n    error NoOperator();\n    error Paused();\n    error ZeroAddress();\n    error ZeroAmount();\n    error InvalidEpoch();\n    error InvalidFuturesRewards();\n    error MismatchedFuturesRewards();\n\n    modifier onlyOperator() {\n        if (msg.sender != operator) revert NotAuthorized();\n        _;\n    }\n\n    modifier onlyOperatorOrNotPaused() {\n        address _operator = operator;\n\n        // Ensure an operator is set\n        if (_operator == address(0)) revert NoOperator();\n\n        // This contract shares the same pause state as the operator\n        if (msg.sender != _operator && Pausable(_operator).paused())\n            revert Paused();\n        _;\n    }\n\n    /** \n        @notice Set a new operator address\n        @param  _operator  address  New operator address    \n     */\n    function setOperator(address _operator) external onlyOwner {\n        if (_operator == address(0)) revert ZeroAddress();\n\n        emit SetOperator(_operator);\n\n        // If it's the first operator, also set up 1st epoch with snapshot id 1\n        // and prevent reward claims until subsequent epochs\n        if (operator == address(0)) {\n            uint256 currentEpoch = getCurrentEpoch();\n            epochs[currentEpoch].snapshotId = _snapshot();\n        }\n\n        operator = _operator;\n    }\n\n    /** \n        @notice Return the current snapshotId\n        @return uint256  Current snapshot id\n     */\n    function getCurrentSnapshotId() external view returns (uint256) {\n        return _getCurrentSnapshotId();\n    }\n\n    /**\n        @notice Get current epoch\n        @return uint256  Current epoch\n     */\n    function getCurrentEpoch() public view returns (uint256) {\n        return (block.timestamp / 1209600) * 1209600;\n    }\n\n    /**\n        @notice Get epoch\n        @param  epoch            uint256    Epoch\n        @return snapshotId       uint256    Snapshot id\n        @return rewards          address[]  Reward tokens\n        @return snapshotRewards  uint256[]  Snapshot reward amounts\n        @return futuresRewards   uint256[]  Futures reward amounts\n     */\n    function getEpoch(uint256 epoch)\n        external\n        view\n        returns (\n            uint256 snapshotId,\n            bytes32[] memory rewards,\n            uint256[] memory snapshotRewards,\n            uint256[] memory futuresRewards\n        )\n    {\n        Epoch storage e = epochs[epoch];\n\n        return (e.snapshotId, e.rewards, e.snapshotRewards, e.futuresRewards);\n    }\n\n    /**\n        @notice Get redeemed snapshot rewards bitmap\n        @param  account  address   Account\n        @param  epoch    uint256   Epoch\n        @return uint256  Redeemed snapshot bitmap\n     */\n    function getEpochRedeemedSnapshotRewards(address account, uint256 epoch)\n        external\n        view\n        returns (uint256)\n    {\n        return epochs[epoch].redeemedSnapshotRewards[account];\n    }\n\n    /**\n        @notice Add new epoch reward metadata\n        @param  epoch           uint256  Epoch\n        @param  token           address  Token address\n        @param  snapshotReward  uint256  Snapshot reward amount\n        @param  futuresReward   uint256  Futures reward amount\n     */\n    function addEpochRewardMetadata(\n        uint256 epoch,\n        bytes32 token,\n        uint256 snapshotReward,\n        uint256 futuresReward\n    ) external onlyOperator {\n        Epoch storage e = epochs[epoch];\n\n        e.rewards.push(token);\n        e.snapshotRewards.push(snapshotReward);\n        e.futuresRewards.push(futuresReward);\n    }\n\n    /**\n        @notice Set redeemed snapshot rewards bitmap\n        @param  account   address  Account\n        @param  epoch     uint256  Epoch\n        @param  redeemed  uint256  Redeemed bitmap\n     */\n    function setEpochRedeemedSnapshotRewards(\n        address account,\n        uint256 epoch,\n        uint256 redeemed\n    ) external onlyOperator {\n        epochs[epoch].redeemedSnapshotRewards[account] = redeemed;\n    }\n\n    /**\n        @notice Update epoch futures rewards to reflect amounts remaining after redemptions\n        @param  epoch           uint256    Epoch\n        @param  futuresRewards  uint256[]  Futures rewards\n     */\n    function updateEpochFuturesRewards(\n        uint256 epoch,\n        uint256[] memory futuresRewards\n    ) external onlyOperator {\n        if (epoch == 0) revert InvalidEpoch();\n\n        uint256 fLen = epochs[epoch].futuresRewards.length;\n\n        if (fLen == 0) revert InvalidEpoch();\n        if (futuresRewards.length == 0) revert InvalidFuturesRewards();\n        if (futuresRewards.length != fLen) revert MismatchedFuturesRewards();\n\n        epochs[epoch].futuresRewards = futuresRewards;\n\n        emit UpdateEpochFuturesRewards(epoch, futuresRewards);\n    }\n\n    /**\n        @notice Update amount of cumulative rewards for the specified reward token\n        @param  token   address  Reward token address\n        @param  amount  uint256  Amount of reward\n     */\n    function updateCumulativeRewardsByToken(address token, uint256 amount)\n        external\n        onlyOperator\n    {\n        cumulativeRewardsByToken[token] = amount;\n    }\n\n    /** \n        @notice Mint the specified amount of tokens to the specified account\n        @param  account  address  Receiver of the tokens\n        @param  amount   uint256  Amount to be minted\n     */\n    function mint(address account, uint256 amount) external onlyOperator {\n        if (account == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ZeroAmount();\n\n        _mint(account, amount);\n    }\n\n    /** \n        @notice Burn the specified amount of tokens from the specified account\n        @param  account  address  Owner of the tokens\n        @param  amount   uint256  Amount to be burned\n     */\n    function burn(address account, uint256 amount) external onlyOperator {\n        if (account == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ZeroAmount();\n\n        _burn(account, amount);\n    }\n\n    /** \n        @notice Approve allowances by operator with specified accounts and amount\n        @param  from    address  Owner of the tokens\n        @param  to      address  Account to be approved\n        @param  amount  uint256  Amount to be approved\n     */\n    function operatorApprove(\n        address from,\n        address to,\n        uint256 amount\n    ) external onlyOperator {\n        if (from == address(0)) revert ZeroAddress();\n        if (to == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ZeroAmount();\n\n        _approve(from, to, amount);\n    }\n\n    /**\n        @notice Snapshot token balances for the current epoch\n     */\n    function takeEpochSnapshot() external onlyOperatorOrNotPaused {\n        uint256 currentEpoch = getCurrentEpoch();\n\n        // If snapshot has not been set for current epoch, take snapshot\n        if (epochs[currentEpoch].snapshotId == 0) {\n            epochs[currentEpoch].snapshotId = _snapshot();\n        }\n    }\n}\n"
24     },
25     "src/PirexFees.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\n\ncontract PirexFees is Ownable {\n    using SafeTransferLib for ERC20;\n\n    // Types of fee recipients\n    enum FeeRecipient {\n        Treasury,\n        Contributors\n    }\n\n    uint8 public constant PERCENT_DENOMINATOR = 100;\n    uint8 public constant MAX_TREASURY_FEE_PERCENT = 75;\n\n    // Configurable fee recipient percent-share\n    uint8 public treasuryPercent = MAX_TREASURY_FEE_PERCENT;\n\n    // Configurable fee recipient addresses\n    address public treasury;\n    address public contributors;\n\n    event SetFeeRecipient(FeeRecipient f, address recipient);\n    event SetTreasuryPercent(uint8 _treasuryPercent);\n    event DistributeFees(address token, uint256 amount);\n\n    error ZeroAddress();\n    error InvalidFeePercent();\n\n    /**\n        @param  _treasury      address  Redacted treasury\n        @param  _contributors  address  Pirex contributor multisig\n     */\n    constructor(address _treasury, address _contributors) {\n        if (_treasury == address(0)) revert ZeroAddress();\n        if (_contributors == address(0)) revert ZeroAddress();\n\n        treasury = _treasury;\n        contributors = _contributors;\n    }\n\n    /** \n        @notice Set a fee recipient address\n        @param  f          enum     FeeRecipient enum\n        @param  recipient  address  Fee recipient address\n     */\n    function setFeeRecipient(FeeRecipient f, address recipient)\n        external\n        onlyOwner\n    {\n        if (recipient == address(0)) revert ZeroAddress();\n\n        emit SetFeeRecipient(f, recipient);\n\n        if (f == FeeRecipient.Treasury) {\n            treasury = recipient;\n            return;\n        }\n\n        contributors = recipient;\n    }\n\n    /** \n        @notice Set treasury fee percent\n        @param  _treasuryPercent  uint8  Treasury fee percent\n     */\n    function setTreasuryPercent(uint8 _treasuryPercent) external onlyOwner {\n        // Treasury fee percent should never exceed the pre-configured max value\n        if (_treasuryPercent > MAX_TREASURY_FEE_PERCENT)\n            revert InvalidFeePercent();\n\n        treasuryPercent = _treasuryPercent;\n\n        emit SetTreasuryPercent(_treasuryPercent);\n    }\n\n    /** \n        @notice Distribute fees\n        @param  from    address  Fee source\n        @param  token   address  Fee token\n        @param  amount  uint256  Fee token amount\n     */\n    function distributeFees(\n        address from,\n        address token,\n        uint256 amount\n    ) external {\n        emit DistributeFees(token, amount);\n\n        ERC20 t = ERC20(token);\n        uint256 treasuryDistribution = (amount * treasuryPercent) /\n            PERCENT_DENOMINATOR;\n\n        // Favoring push over pull to reduce accounting complexity for different tokens\n        t.safeTransferFrom(from, treasury, treasuryDistribution);\n        t.safeTransferFrom(from, contributors, amount - treasuryDistribution);\n    }\n}\n"
27     },
28     "src/vault/UnionPirexVault.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {ERC4626} from \"solmate/mixins/ERC4626.sol\";\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {FixedPointMathLib} from \"solmate/utils/FixedPointMathLib.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {UnionPirexStaking} from \"src/vault/UnionPirexStaking.sol\";\n\ncontract UnionPirexVault is Ownable, ERC4626 {\n    using SafeTransferLib for ERC20;\n    using FixedPointMathLib for uint256;\n\n    UnionPirexStaking public strategy;\n\n    uint256 public constant MAX_WITHDRAWAL_PENALTY = 500;\n    uint256 public constant MAX_PLATFORM_FEE = 2000;\n    uint256 public constant FEE_DENOMINATOR = 10000;\n\n    uint256 public withdrawalPenalty = 300;\n    uint256 public platformFee = 1000;\n    address public platform;\n\n    event Harvest(address indexed caller, uint256 value);\n    event WithdrawalPenaltyUpdated(uint256 penalty);\n    event PlatformFeeUpdated(uint256 fee);\n    event PlatformUpdated(address _platform);\n    event StrategySet(address _strategy);\n\n    error ZeroAddress();\n    error ExceedsMax();\n    error AlreadySet();\n\n    constructor(address pxBtrfly) ERC4626(ERC20(pxBtrfly), \"Autocompounding pxBTRFLY\", \"apxBTRFLY\") {}\n\n    /**\n        @notice Set the withdrawal penalty\n        @param  penalty  uint256  Withdrawal penalty\n     */\n    function setWithdrawalPenalty(uint256 penalty) external onlyOwner {\n        if (penalty > MAX_WITHDRAWAL_PENALTY) revert ExceedsMax();\n\n        withdrawalPenalty = penalty;\n\n        emit WithdrawalPenaltyUpdated(penalty);\n    }\n\n    /**\n        @notice Set the platform fee\n        @param  fee  uint256  Platform fee\n     */\n    function setPlatformFee(uint256 fee) external onlyOwner {\n        if (fee > MAX_PLATFORM_FEE) revert ExceedsMax();\n\n        platformFee = fee;\n\n        emit PlatformFeeUpdated(fee);\n    }\n\n    /**\n        @notice Set the platform\n        @param  _platform  address  Platform\n     */\n    function setPlatform(address _platform) external onlyOwner {\n        if (_platform == address(0)) revert ZeroAddress();\n\n        platform = _platform;\n\n        emit PlatformUpdated(_platform);\n    }\n\n    /**\n        @notice Set the strategy\n        @param  _strategy  address  Strategy\n     */\n    function setStrategy(address _strategy) external onlyOwner {\n        if (_strategy == address(0)) revert ZeroAddress();\n        if (address(strategy) != address(0)) revert AlreadySet();\n\n        // Set new strategy contract and approve max allowance\n        strategy = UnionPirexStaking(_strategy);\n\n        asset.safeApprove(_strategy, type(uint256).max);\n\n        emit StrategySet(_strategy);\n    }\n\n    /**\n        @notice Get the pxBTRFLY custodied by the UnionPirex contracts\n        @return uint256  Assets\n     */\n    function totalAssets() public view override returns (uint256) {\n        // Vault assets + rewards should always be stored in strategy until withdrawal-time\n        (uint256 _totalSupply, uint256 rewards) = strategy\n            .totalSupplyWithRewards();\n\n        // Deduct the exact reward amount staked (after fees are deducted when calling `harvest`)\n        return\n            _totalSupply +\n            (\n                rewards == 0\n                    ? 0\n                    : (rewards - ((rewards * platformFee) / FEE_DENOMINATOR))\n            );\n    }\n\n    /**\n        @notice Withdraw assets from the staking contract to prepare for transfer to user\n        @param  assets  uint256  Assets\n     */\n    function beforeWithdraw(uint256 assets, uint256) internal override {\n        // Harvest rewards in the event where there is not enough staked assets to cover the withdrawal\n        if (assets > strategy.totalSupply()) harvest();\n\n        strategy.withdraw(assets);\n    }\n\n    /**\n        @notice Stake assets so that rewards can be properly distributed\n        @param  assets  uint256  Assets\n     */\n    function afterDeposit(uint256 assets, uint256) internal override {\n        strategy.stake(assets);\n    }\n\n    /**\n        @notice Preview the amount of assets a user would receive from redeeming shares\n        @param  shares  uint256  Shares\n        @return uint256  Assets\n     */\n    function previewRedeem(uint256 shares)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        // Calculate assets based on a user's % ownership of vault shares\n        uint256 assets = convertToAssets(shares);\n\n        uint256 _totalSupply = totalSupply;\n\n        // Calculate a penalty - zero if user is the last to withdraw\n        uint256 penalty = (_totalSupply == 0 || _totalSupply - shares == 0)\n            ? 0\n            : assets.mulDivDown(withdrawalPenalty, FEE_DENOMINATOR);\n\n        // Redeemable amount is the post-penalty amount\n        return assets - penalty;\n    }\n\n    /**\n        @notice Preview the amount of shares a user would need to redeem the specified asset amount\n        @notice This modified version takes into consideration the withdrawal fee\n        @param  assets  uint256  Assets\n        @return uint256  Shares\n     */\n    function previewWithdraw(uint256 assets)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        // Calculate shares based on the specified assets' proportion of the pool\n        uint256 shares = convertToShares(assets);\n\n        // Save 1 SLOAD\n        uint256 _totalSupply = totalSupply;\n\n        // Factor in additional shares to fulfill withdrawal if user is not the last to withdraw\n        return\n            (_totalSupply == 0 || _totalSupply - shares == 0)\n                ? shares\n                : (shares * FEE_DENOMINATOR) /\n                    (FEE_DENOMINATOR - withdrawalPenalty);\n    }\n\n    /**\n        @notice Harvest rewards\n     */\n    function harvest() public {\n        // Claim rewards\n        strategy.getReward();\n\n        // Since we don't normally store pxBTRFLY within the vault, a non-zero balance equals rewards\n        uint256 rewards = asset.balanceOf(address(this));\n\n        emit Harvest(msg.sender, rewards);\n\n        if (rewards != 0) {\n            // Fee for platform\n            uint256 feeAmount = (rewards * platformFee) / FEE_DENOMINATOR;\n\n            // Deduct fee from reward balance\n            rewards -= feeAmount;\n\n            // Claimed rewards should be in pxBTRFLY\n            asset.safeTransfer(platform, feeAmount);\n\n            // Stake rewards sans fee\n            strategy.stake(rewards);\n        }\n    }\n}\n"
30     },
31     "src/tokens/ERC1155Solmate.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/presets/ERC1155PresetMinterPauser.sol)\n\npragma solidity 0.8.17;\n\nimport {ERC1155} from \"solmate/tokens/ERC1155.sol\";\nimport {AccessControl} from \"openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport {Context} from \"openzeppelin-contracts/contracts/utils/Context.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability to check the total supply for a token id\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC1155Solmate is AccessControl, ERC1155 {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    event GrantMinterRole(address minter);\n    event RevokeMinterRole(address minter);\n\n    error ZeroAddress();\n    error NotMinter();\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n        @notice Grant the minter role to an address\n        @param  minter  address  Address to grant the minter role\n     */\n    function grantMinterRole(address minter)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        if (minter == address(0)) revert ZeroAddress();\n\n        _grantRole(MINTER_ROLE, minter);\n\n        emit GrantMinterRole(minter);\n    }\n\n    /**\n     @notice Revoke the minter role from an address\n     @param  minter  address  Address to revoke the minter role\n  */\n    function revokeMinterRole(address minter)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        if (hasRole(MINTER_ROLE, minter) == false) revert NotMinter();\n\n        _revokeRole(MINTER_ROLE, minter);\n\n        emit RevokeMinterRole(minter);\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external onlyRole(MINTER_ROLE) {\n        _mint(to, id, amount, data);\n    }\n\n    function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external onlyRole(MINTER_ROLE) {\n        _batchMint(to, ids, amounts, data);\n    }\n\n    function burnBatch(\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) external onlyRole(MINTER_ROLE) {\n        _batchBurn(from, ids, amounts);\n    }\n\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external onlyRole(MINTER_ROLE) {\n        _burn(from, id, amount);\n    }\n\n    function uri(uint256 id) public view override returns (string memory) {}\n\n    // Necessary override due to AccessControl having the same method\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        override(AccessControl, ERC1155)\n        returns (bool)\n    {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\n    }\n}\n"
33     },
34     "src/tokens/ERC1155PresetMinterSupply.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {ERC1155} from \"openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\";\nimport {ERC1155Supply} from \"openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport {ERC1155Burnable} from \"openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport {AccessControl} from \"openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport {Context} from \"openzeppelin-contracts/contracts/utils/Context.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability to check the total supply for a token id\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter role as well\n * as the default admin role, which will let it grant the minter role to other accounts.\n */\ncontract ERC1155PresetMinterSupply is\n    Context,\n    AccessControl,\n    ERC1155Supply,\n    ERC1155Burnable\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE` and `MINTER_ROLE` to the account that\n     * deploys the contract.\n     */\n    constructor(string memory uri) ERC1155(uri) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have minter role to mint\"\n        );\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have minter role to mint\"\n        );\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControl, ERC1155)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Supply) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
36     },
37     "src/interfaces/IRewardDistributor.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IRewardDistributor {\n    struct Distribution {\n        address token;\n        bytes32 merkleRoot;\n        bytes32 proof;\n    }\n\n    struct Claim {\n        address token;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n\n    function claim(Claim[] calldata claims) external;\n\n    function updateRewardsMetadata(Distribution[] calldata distributions)\n        external;\n\n    function claimed(address token, address account)\n        external\n        view\n        returns (uint256 amount);\n}\n"
39     },
40     "src/interfaces/IRLBTRFLY.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IRLBTRFLY {\n    struct LockedBalance {\n        uint224 amount;\n        uint32 unlockTime;\n    }\n\n    function lock(address account, uint256 amount) external;\n\n    function lockedBalances(address account)\n        external\n        view\n        returns (\n            uint256 total,\n            uint256 unlockable,\n            uint256 locked,\n            LockedBalance[] memory lockData\n        );\n\n    function lockedBalanceOf(address account)\n        external\n        view\n        returns (uint256 amount);\n\n    function processExpiredLocks(bool relock) external;\n\n    function shutdown() external;\n}\n"
42     },
43     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
45     },
46     "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
48     },
49     "src/tokens/ERC20SnapshotSolmate.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport {Arrays} from \"openzeppelin-contracts/contracts/utils/Arrays.sol\";\nimport {Counters} from \"openzeppelin-contracts/contracts/utils/Counters.sol\";\nimport {ECDSA} from \"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        allowance[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        _beforeTokenTransfer(msg.sender, to, amount);\n\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max)\n            allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ECDSA.recover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(\n                recoveredAddress != address(0) && recoveredAddress == owner,\n                \"INVALID_SIGNER\"\n            );\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return\n            block.chainid == INITIAL_CHAIN_ID\n                ? INITIAL_DOMAIN_SEPARATOR\n                : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _beforeTokenTransfer(address(0), to, amount);\n\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _beforeTokenTransfer(from, address(0), amount);\n\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\ncontract ERC20SnapshotSolmate is ERC20 {\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol, _decimals) {}\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        (bool snapshotted, uint256 value) = _valueAt(\n            snapshotId,\n            _accountBalanceSnapshots[account]\n        );\n\n        return snapshotted ? value : balanceOf[account];\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        (bool snapshotted, uint256 value) = _valueAt(\n            snapshotId,\n            _totalSupplySnapshots\n        );\n\n        return snapshotted ? value : totalSupply;\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n        private\n        view\n        returns (bool, uint256)\n    {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(\n            snapshotId <= _getCurrentSnapshotId(),\n            \"ERC20Snapshot: nonexistent id\"\n        );\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf[account]);\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply);\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue)\n        private\n    {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 idsLen = ids.length;\n\n        if (idsLen == 0) {\n            return 0;\n        } else {\n            return ids[idsLen - 1];\n        }\n    }\n}\n"
51     },
52     "lib/solmate/src/mixins/ERC4626.sol": {
53       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"../utils/SafeTransferLib.sol\";\nimport {FixedPointMathLib} from \"../utils/FixedPointMathLib.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626 is ERC20 {\n    using SafeTransferLib for ERC20;\n    using FixedPointMathLib for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                               IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    ERC20 public immutable asset;\n\n    constructor(\n        ERC20 _asset,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol, _asset.decimals()) {\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf[owner]);\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\n\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\n}\n"
54     },
55     "lib/solmate/src/utils/FixedPointMathLib.sol": {
56       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // Divide x * y by the denominator.\n            z := div(mul(x, y), denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // If x * y modulo the denominator is strictly greater than 0,\n            // 1 is added to round up the division of x * y by the denominator.\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            let y := x // We start y at x, which will help us make our initial estimate.\n\n            z := 181 // The \"correct\" value is 1, but this saves a multiplication later.\n\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\n\n            // We check y >= 2^(k + 8) but shift right by k bits\n            // each branch to ensure that if x >= 256, then y >= 256.\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\n                y := shr(128, y)\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x1000000000000000000)) {\n                y := shr(64, y)\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x10000000000)) {\n                y := shr(32, y)\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x1000000)) {\n                y := shr(16, y)\n                z := shl(8, z)\n            }\n\n            // Goal was to get z*z*y within a small factor of x. More iterations could\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\n\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\n\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\n\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\n\n            // There is no overflow risk here since y < 2^136 after the first branch above.\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\n\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // If x+1 is a perfect square, the Babylonian method cycles between\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\n            z := sub(z, lt(div(x, z), z))\n        }\n    }\n\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            // Mod x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            z := mod(x, y)\n        }\n    }\n\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\n        assembly {\n            // Divide x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            r := div(x, y)\n        }\n    }\n\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            // Add 1 to x * y if x % y > 0. Note this will\n            // return 0 instead of reverting if y is zero.\n            z := add(gt(mod(x, y), 0), div(x, y))\n        }\n    }\n}\n"
57     },
58     "src/vault/UnionPirexStaking.sol": {
59       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport \"openzeppelin-contracts/contracts/access/Ownable.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\n// https://github.com/Synthetixio/synthetix/blob/v2.66.0/contracts/StakingRewards.sol\n/**\n  Modifications\n    - Pin pragma to 0.8.17\n    - Remove IStakingRewards, RewardsDistributionRecipient, and Pausable\n    - Add and inherit from Ownable\n    - Add `RewardsDistributionRecipient` logic to contract\n    - Add `vault` state variable and `onlyVault` modifier\n    - Add `onlyVault` modifier to `stake` method\n    - Change `rewardsDuration` to 14 days\n    - Update contract to support only the vault as a user\n    - Remove SafeMath since pragma 0.8.0 has those checks built-in\n    - Replace OpenZeppelin ERC20, ReentrancyGuard, and SafeERC20 with Solmate v6 (audited)\n    - Consolidate `rewardsToken` and `stakingToken` since they're the same\n    - Remove ReentrancyGuard as it is no longer needed\n    - Add `totalSupplyWithRewards` method to save gas as _totalSupply + rewards are accessed by vault\n    - Updated `notifyRewardsAmount`\n        - Remove the method parameter and compute the reward amount inside the function\n        - Remove the conditional logic since we will always distribute the rewards balance\n        - Remove overflow check since the caller cannot pass in the reward amount\n*/\ncontract UnionPirexStaking is Ownable {\n    using SafeTransferLib for ERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    address public immutable vault;\n    ERC20 public immutable token;\n\n    uint256 public constant rewardsDuration = 14 days;\n\n    address public distributor;\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public userRewardPerTokenPaid;\n    uint256 public rewards;\n\n    uint256 internal _totalSupply;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _token,\n        address _distributor,\n        address _vault\n    ) {\n        token = ERC20(_token);\n        distributor = _distributor;\n        vault = _vault;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalSupplyWithRewards() external view returns (uint256, uint256) {\n        uint256 t = _totalSupply;\n\n        return (\n            t,\n            ((t * (rewardPerToken() - userRewardPerTokenPaid)) / 1e18) + rewards\n        );\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return\n            rewardPerTokenStored +\n            ((((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate) *\n                1e18) / _totalSupply);\n    }\n\n    function earned() public view returns (uint256) {\n        return\n            ((_totalSupply * (rewardPerToken() - userRewardPerTokenPaid)) /\n                1e18) + rewards;\n    }\n\n    function getRewardForDuration() external view returns (uint256) {\n        return rewardRate * rewardsDuration;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) external onlyVault updateReward(vault) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply += amount;\n        token.safeTransferFrom(vault, address(this), amount);\n        emit Staked(amount);\n    }\n\n    function withdraw(uint256 amount) external onlyVault updateReward(vault) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalSupply -= amount;\n        token.safeTransfer(vault, amount);\n        emit Withdrawn(amount);\n    }\n\n    function getReward() external onlyVault updateReward(vault) {\n        uint256 reward = rewards;\n\n        if (reward > 0) {\n            rewards = 0;\n            token.safeTransfer(vault, reward);\n            emit RewardPaid(reward);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function notifyRewardAmount()\n        external\n        onlyDistributor\n        updateReward(address(0))\n    {\n        // Rewards transferred directly to this contract are not added to _totalSupply\n        // To get the rewards w/o relying on a potentially incorrect passed in arg,\n        // we can use the difference between the token balance and _totalSupply.\n        // Additionally, to avoid re-distributing rewards, deduct the output of `earned`\n        uint256 rewardBalance = token.balanceOf(address(this)) -\n            _totalSupply -\n            earned();\n\n        rewardRate = rewardBalance / rewardsDuration;\n        require(rewardRate != 0, \"No rewards\");\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDuration;\n\n        emit RewardAdded(rewardBalance);\n    }\n\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        external\n        onlyOwner\n    {\n        require(\n            tokenAddress != address(token),\n            \"Cannot withdraw the staking token\"\n        );\n        ERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    function setDistributor(address _distributor) external onlyOwner {\n        require(_distributor != address(0));\n        distributor = _distributor;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards = earned();\n            userRewardPerTokenPaid = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(uint256 amount);\n    event Withdrawn(uint256 amount);\n    event RewardPaid(uint256 reward);\n    event Recovered(address token, uint256 amount);\n\n    modifier onlyDistributor() {\n        require((msg.sender == distributor), \"Distributor only\");\n        _;\n    }\n\n    modifier onlyVault() {\n        require((msg.sender == vault), \"Vault only\");\n        _;\n    }\n}\n"
60     },
61     "lib/solmate/src/tokens/ERC1155.sol": {
62       "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 amount\n    );\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    event URI(string value, uint256 indexed id);\n\n    /*//////////////////////////////////////////////////////////////\n                             ERC1155 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                             METADATA LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function uri(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC1155 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        balanceOf[from][id] -= amount;\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual {\n        require(ids.length == amounts.length, \"LENGTH_MISMATCH\");\n\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        // Storing these outside the loop saves ~15 gas per iteration.\n        uint256 id;\n        uint256 amount;\n\n        for (uint256 i = 0; i < ids.length; ) {\n            id = ids[i];\n            amount = amounts[i];\n\n            balanceOf[from][id] -= amount;\n            balanceOf[to][id] += amount;\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory balances)\n    {\n        require(owners.length == ids.length, \"LENGTH_MISMATCH\");\n\n        balances = new uint256[](owners.length);\n\n        // Unchecked because the only math done is incrementing\n        // the array index counter which cannot possibly overflow.\n        unchecked {\n            for (uint256 i = 0; i < owners.length; ++i) {\n                balances[i] = balanceOf[owners[i]][ids[i]];\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[to][ids[i]] += amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchBurn(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[from][ids[i]] -= amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\n    }\n\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        balanceOf[from][id] -= amount;\n\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155TokenReceiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n}\n"
63     },
64     "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
66     },
67     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
69     },
70     "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
72     },
73     "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
74       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
75     },
76     "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
77       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
78     },
79     "lib/openzeppelin-contracts/contracts/utils/Arrays.sol": {
80       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./StorageSlot.sol\";\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n}\n"
81     },
82     "lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
84     },
85     "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
87     },
88     "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
90     },
91     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
92       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
93     },
94     "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
95       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
96     },
97     "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
98       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
99     },
100     "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
101       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
102     },
103     "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
104       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
105     },
106     "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
107       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
108     },
109     "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
110       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
111     },
112     "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
113       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
114     },
115     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
116       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
117     }
118   },
119   "settings": {
120     "remappings": [
121       "ds-test/=lib/forge-std/lib/ds-test/src/",
122       "forge-std/=lib/forge-std/src/",
123       "openzeppelin-contracts/=lib/openzeppelin-contracts/",
124       "solmate/=lib/solmate/src/"
125     ],
126     "optimizer": {
127       "enabled": true,
128       "runs": 200
129     },
130     "metadata": {
131       "bytecodeHash": "ipfs"
132     },
133     "outputSelection": {
134       "*": {
135         "*": [
136           "evm.bytecode",
137           "evm.deployedBytecode",
138           "devdoc",
139           "userdoc",
140           "metadata",
141           "abi"
142         ]
143       }
144     },
145     "evmVersion": "london",
146     "libraries": {}
147   }
148 }}