1 {{
2   "language": "Solidity",
3   "sources": {
4     "Teller.sol": {
5       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/IVault.sol\";\r\n\r\n/**\r\n * @title Teller Contract\r\n */\r\ncontract Teller is Ownable, ReentrancyGuard {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Event emitted on construction.\r\n    event TellerDeployed();\r\n\r\n    /// @notice Event emitted when teller status is toggled.\r\n    event TellerToggled(address teller, bool status);\r\n\r\n    /// @notice Event emitted when new commitment is added.\r\n    event NewCommitmentAdded(\r\n        uint256 bonus,\r\n        uint256 time,\r\n        uint256 penalty,\r\n        uint256 deciAdjustment\r\n    );\r\n\r\n    /// @notice Event emitted when commitment status is toggled.\r\n    event CommitmentToggled(uint256 index, bool status);\r\n\r\n    /// @notice Event emitted when owner sets the dev address to get the break commitment fees.\r\n    event PurposeSet(address devAddress, bool purposeStatus);\r\n\r\n    /// @notice Event emitted when a provider deposits lp tokens.\r\n    event LpDeposited(address indexed provider, uint256 indexed amount);\r\n\r\n    /// @notice Event emitted when a provider withdraws lp tokens.\r\n    event Withdrew(address indexed provider, uint256 indexed amount);\r\n\r\n    /// @notice Event emitted when a provider commits lp tokens.\r\n    event Commited(address indexed provider, uint256 indexed commitedAmount);\r\n\r\n    /// @notice Event emitted when a provider breaks the commitment.\r\n    event CommitmentBroke(address indexed provider, uint256 indexed tokenSentAmount);\r\n\r\n    /// @notice Event emitted when provider claimed rewards.\r\n    event Claimed(address indexed provider, bool indexed success);\r\n\r\n    struct Provider {\r\n        uint256 LPDepositedRatio;\r\n        uint256 userWeight;\r\n        uint256 lastClaimedTime;\r\n        uint256 commitmentIndex;\r\n        uint256 committedAmount;\r\n        uint256 commitmentEndTime;\r\n    }\r\n\r\n    struct Commitment {\r\n        uint256 bonus;\r\n        uint256 duration;\r\n        uint256 penalty;\r\n        uint256 deciAdjustment;\r\n        bool isActive;\r\n    }\r\n\r\n    IVault public Vault;\r\n    IERC20 public LpToken;\r\n\r\n    uint256 public totalLP;\r\n    uint256 public totalWeight;\r\n    uint256 public tellerClosedTime;\r\n\r\n    bool public tellerOpen;\r\n    bool public purpose;\r\n\r\n    address public devAddress;\r\n\r\n    Commitment[] public commitmentInfo;\r\n\r\n    mapping(address => Provider) public providerInfo;\r\n\r\n    modifier isTellerOpen() {\r\n        require(tellerOpen, \"Teller: Teller is not open.\");\r\n        _;\r\n    }\r\n\r\n    modifier isProvider() {\r\n        require(\r\n            providerInfo[msg.sender].LPDepositedRatio != 0,\r\n            \"Teller: Caller is not a provider.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isTellerClosed() {\r\n        require(!tellerOpen, \"Teller: Teller is still active.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     * @param _LpToken Interface of LP token\r\n     * @param _Vault Interface of Vault\r\n     */\r\n    constructor(IERC20 _LpToken, IVault _Vault) {\r\n        LpToken = _LpToken;\r\n        Vault = _Vault;\r\n        commitmentInfo.push();\r\n\r\n        emit TellerDeployed();\r\n    }\r\n\r\n    /**\r\n     * @dev External function to toggle the teller. This function can be called only by the owner.\r\n     */\r\n    function toggleTeller() external onlyOwner {\r\n        tellerOpen = !tellerOpen;\r\n        tellerClosedTime = block.timestamp;\r\n        emit TellerToggled(address(this), tellerOpen);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to add a commitment option. This function can be called only by the owner.\r\n     * @param _bonus Amount of bonus\r\n     * @param _days Commitment duration in days\r\n     * @param _penalty The penalty\r\n     * @param _deciAdjustment Decimal percentage\r\n     */\r\n    function addCommitment(\r\n        uint256 _bonus,\r\n        uint256 _days,\r\n        uint256 _penalty,\r\n        uint256 _deciAdjustment\r\n    ) external onlyOwner {\r\n        Commitment memory holder;\r\n\r\n        holder.bonus = _bonus;\r\n        holder.duration = _days * 1 days;\r\n        holder.penalty = _penalty;\r\n        holder.deciAdjustment = _deciAdjustment;\r\n        holder.isActive = true;\r\n\r\n        commitmentInfo.push(holder);\r\n\r\n        emit NewCommitmentAdded(_bonus, _days, _penalty, _deciAdjustment);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to toggle the commitment. This function can be called only by the owner.\r\n     * @param _index Commitment index\r\n     */\r\n    function toggleCommitment(uint256 _index) external onlyOwner {\r\n        require(\r\n            0 < _index && _index < commitmentInfo.length,\r\n            \"Teller: Current index is not listed in the commitment array.\"\r\n        );\r\n        commitmentInfo[_index].isActive = !commitmentInfo[_index].isActive;\r\n\r\n        emit CommitmentToggled(_index, commitmentInfo[_index].isActive);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to set the dev address to give that address the break commitment fees. This function can be called only by the owner.\r\n     * @param _address Dev address\r\n     * @param _status If purpose is active or not\r\n     */\r\n    function setPurpose(address _address, bool _status) external onlyOwner {\r\n        purpose = _status;\r\n        devAddress = _address;\r\n\r\n        emit PurposeSet(devAddress, purpose);\r\n    }\r\n\r\n    /**\r\n     * @dev External function for providers to deposit lp tokens. Teller must be open.\r\n     * @param _amount LP token amount\r\n     */\r\n    function depositLP(uint256 _amount) external isTellerOpen {\r\n        uint256 contractBalance = LpToken.balanceOf(address(this));\r\n        LpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        Provider storage user = providerInfo[msg.sender];\r\n        if (user.LPDepositedRatio != 0) {\r\n            commitmentFinished();\r\n            claim();\r\n        } else {\r\n            user.lastClaimedTime = block.timestamp;\r\n        }\r\n        if (contractBalance == totalLP || totalLP == 0) {\r\n            user.LPDepositedRatio += _amount;\r\n            totalLP += _amount;\r\n        } else {\r\n            uint256 _adjustedAmount = (_amount * totalLP) / contractBalance;\r\n            user.LPDepositedRatio += _adjustedAmount;\r\n            totalLP += _adjustedAmount;\r\n        }\r\n\r\n        user.userWeight += _amount;\r\n        totalWeight += _amount;\r\n\r\n        emit LpDeposited(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to withdraw lp token from the teller. This function can be called only by a provider.\r\n     * @param _amount LP token amount\r\n     */\r\n    function withdraw(uint256 _amount) external isProvider nonReentrant {\r\n        Provider storage user = providerInfo[msg.sender];\r\n        uint256 contractBalance = LpToken.balanceOf(address(this));\r\n        commitmentFinished();\r\n        uint256 userTokens = (user.LPDepositedRatio * contractBalance) /\r\n            totalLP;\r\n        require(\r\n            userTokens - user.committedAmount >= _amount,\r\n            \"Teller: Provider hasn't got enough deposited LP tokens to withdraw.\"\r\n        );\r\n\r\n        claim();\r\n\r\n        uint256 _weightChange = (_amount * user.userWeight) / userTokens;\r\n        user.userWeight -= _weightChange;\r\n        totalWeight -= _weightChange;\r\n\r\n        uint256 ratioChange = _amount * totalLP/contractBalance;\r\n        user.LPDepositedRatio -= ratioChange;\r\n        totalLP -= ratioChange;\r\n\r\n\r\n        LpToken.safeTransfer(msg.sender, _amount);\r\n\r\n        emit Withdrew(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to withdraw lp token when teller is closed. This function can be called only by a provider.\r\n     */\r\n    function tellerClosedWithdraw() external isTellerClosed isProvider {\r\n        uint256 contractBalance = LpToken.balanceOf(address(this));\r\n        require(contractBalance != 0, \"Teller: Contract balance is zero.\");\r\n\r\n        claim();\r\n\r\n        Provider memory user = providerInfo[msg.sender];\r\n\r\n        uint256 userTokens = (user.LPDepositedRatio * contractBalance) /\r\n            totalLP;\r\n        totalLP -= user.LPDepositedRatio;\r\n        totalWeight -= user.userWeight;\r\n\r\n        providerInfo[msg.sender] = Provider(0, 0, 0, 0, 0, 0);\r\n\r\n        LpToken.safeTransfer(msg.sender, userTokens);\r\n\r\n        emit Withdrew(msg.sender, userTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to commit lp token to gain a minor advantage for a selected period of time. This function can be called only by a provider.\r\n     * @param _amount LP token amount\r\n     * @param _commitmentIndex Index of commitment array\r\n     */\r\n    function commit(uint256 _amount, uint256 _commitmentIndex)\r\n        external\r\n        nonReentrant\r\n        isProvider\r\n    {\r\n        require(\r\n            commitmentInfo[_commitmentIndex].isActive,\r\n            \"Teller: Current commitment is not active.\"\r\n        );\r\n\r\n        Provider storage user = providerInfo[msg.sender];\r\n        commitmentFinished();\r\n        uint256 contractBalance = LpToken.balanceOf(address(this));\r\n        uint256 userTokens = (user.LPDepositedRatio * contractBalance) /\r\n            totalLP;\r\n\r\n        require(\r\n            userTokens - user.committedAmount >= _amount,\r\n            \"Teller: Provider hasn't got enough deposited LP tokens to commit.\"\r\n        );\r\n\r\n        if (user.committedAmount != 0) {\r\n            require(\r\n                _commitmentIndex == user.commitmentIndex,\r\n                \"Teller: Commitment index is not the same as providers'.\"\r\n            );\r\n        }\r\n\r\n        uint256 newEndTime;\r\n\r\n        if (\r\n            user.commitmentEndTime >= block.timestamp &&\r\n            user.committedAmount != 0\r\n        ) {\r\n            newEndTime = calculateNewEndTime(\r\n                user.committedAmount,\r\n                _amount,\r\n                user.commitmentEndTime,\r\n                _commitmentIndex\r\n            );\r\n        } else {\r\n            newEndTime =\r\n                block.timestamp +\r\n                commitmentInfo[_commitmentIndex].duration;\r\n        }\r\n\r\n        uint256 weightToGain = (_amount * user.userWeight) / userTokens;\r\n        uint256 bonusCredit = commitBonus(_commitmentIndex, weightToGain);\r\n\r\n        claim();\r\n\r\n        user.commitmentIndex = _commitmentIndex;\r\n        user.committedAmount += _amount;\r\n        user.commitmentEndTime = newEndTime;\r\n        user.userWeight += bonusCredit;\r\n        totalWeight += bonusCredit;\r\n\r\n        emit Commited(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev External function to break the commitment. This function can be called only by a provider.\r\n     */\r\n    function breakCommitment() external nonReentrant isProvider {\r\n        Provider memory user = providerInfo[msg.sender];\r\n\r\n        require(\r\n            user.commitmentEndTime > block.timestamp,\r\n            \"Teller: No commitment to break.\"\r\n        );\r\n\r\n        uint256 contractBalance = LpToken.balanceOf(address(this));\r\n\r\n        uint256 tokenToReceive = (user.LPDepositedRatio * contractBalance) /\r\n            totalLP;\r\n\r\n        Commitment memory currentCommit = commitmentInfo[user.commitmentIndex];\r\n        \r\n        //fee for breaking the commitment\r\n        uint256 fee = (user.committedAmount * currentCommit.penalty) /\r\n            currentCommit.deciAdjustment;\r\n            \r\n        //fee reduced from provider and left in teller\r\n        tokenToReceive -= fee;\r\n\r\n        totalLP -= user.LPDepositedRatio;\r\n\r\n        totalWeight -= user.userWeight;\r\n\r\n        providerInfo[msg.sender] = Provider(0, 0, 0, 0, 0, 0);\r\n        \r\n        //if a devloper purpose is set then transfer to address\r\n        if (purpose) {\r\n            LpToken.safeTransfer(devAddress, fee / 10);\r\n        }\r\n        \r\n        //Fee is not lost it is dispersed to remaining providers. \r\n        LpToken.safeTransfer(msg.sender, tokenToReceive);\r\n\r\n        emit CommitmentBroke(msg.sender, tokenToReceive);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to claim rewards.\r\n     */\r\n    function claim() internal {\r\n        Provider storage user = providerInfo[msg.sender];\r\n        uint256 timeGap = block.timestamp - user.lastClaimedTime;\r\n\r\n        if (!tellerOpen) {\r\n            timeGap = tellerClosedTime - user.lastClaimedTime;\r\n        }\r\n\r\n        if (timeGap > 365 * 1 days) {\r\n            timeGap = 365 * 1 days;\r\n        }\r\n\r\n        uint256 timeWeight = timeGap * user.userWeight;\r\n\r\n        user.lastClaimedTime = block.timestamp;\r\n\r\n        Vault.payProvider(msg.sender, timeWeight, totalWeight);\r\n\r\n        emit Claimed(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to return commit bonus.\r\n     * @param _commitmentIndex Index of commitment array\r\n     * @param _amount Commitment token amount\r\n     */\r\n    function commitBonus(uint256 _commitmentIndex, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (commitmentInfo[_commitmentIndex].isActive) {\r\n            return\r\n                (commitmentInfo[_commitmentIndex].bonus * _amount) /\r\n                commitmentInfo[_commitmentIndex].deciAdjustment;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate the new ending time when the current end time is overflown.\r\n     * @param _oldAmount Commitment lp token amount which provider has\r\n     * @param _extraAmount Lp token amount which user wants to commit\r\n     * @param _oldEndTime Previous commitment ending time\r\n     * @param _commitmentIndex Index of commitment array\r\n     */\r\n    function calculateNewEndTime(\r\n        uint256 _oldAmount,\r\n        uint256 _extraAmount,\r\n        uint256 _oldEndTime,\r\n        uint256 _commitmentIndex\r\n    ) internal view returns (uint256) {\r\n        uint256 extraEndTIme = commitmentInfo[_commitmentIndex].duration +\r\n            block.timestamp;\r\n        uint256 newEndTime = ((_oldAmount * _oldEndTime) +\r\n            (_extraAmount * extraEndTIme)) / (_oldAmount + _extraAmount);\r\n\r\n        return newEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to finish a commitment when it has ended.\r\n     */\r\n    function commitmentFinished() internal {\r\n        Provider storage user = providerInfo[msg.sender];\r\n        if (user.commitmentEndTime <= block.timestamp) {\r\n            user.committedAmount = 0;\r\n            user.commitmentIndex = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev External function to claim the reward token. This function can be called only by a provider and teller must be open.\r\n     */\r\n    function claimExternal() external isTellerOpen isProvider nonReentrant {\r\n        commitmentFinished();\r\n        claim();\r\n    }\r\n\r\n    /**\r\n     * @dev External function to get User info. This function can be called from a msg.sender with active deposits.\r\n     * @return Time of rest committed time\r\n     * @return Committed amount\r\n     * @return Committed Index\r\n     * @return Amount to Claim\r\n     * @return Total LP deposited\r\n     */\r\n    function getUserInfo(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        Provider memory user = providerInfo[_user];\r\n\r\n        if (user.LPDepositedRatio > 0) {\r\n            uint256 claimAmount = (Vault.vidyaRate() *\r\n                Vault.tellerPriority(address(this)) *\r\n                (block.timestamp - user.lastClaimedTime) *\r\n                user.userWeight) / (totalWeight * Vault.totalPriority());\r\n\r\n            uint256 totalLPDeposited = (providerInfo[msg.sender]\r\n                .LPDepositedRatio * LpToken.balanceOf(address(this))) / totalLP;\r\n\r\n            if (user.commitmentEndTime > block.timestamp) {\r\n                return (\r\n                    user.commitmentEndTime - block.timestamp,\r\n                    user.committedAmount,\r\n                    user.commitmentIndex,\r\n                    claimAmount,\r\n                    totalLPDeposited\r\n                );\r\n            } else {\r\n                return (0, 0, 0, claimAmount, totalLPDeposited);\r\n            }\r\n        } else {\r\n            return (0, 0, 0, 0, 0);\r\n        }\r\n    }\r\n}"
6     },
7     "interfaces/IVault.sol": {
8       "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @title Vault Interface\r\n */\r\ninterface IVault {\r\n    /**\r\n     * @dev External function to get vidya rate.\r\n     */\r\n    function vidyaRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev External function to get total priority.\r\n     */\r\n    function totalPriority() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev External function to get teller priority.\r\n     * @param tellerId Teller Id\r\n     */\r\n    function tellerPriority(address tellerId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev External function to add the teller. This function can be called by only owner.\r\n     * @param teller Address of teller\r\n     * @param priority Priority of teller\r\n     */\r\n    function addTeller(address teller, uint256 priority) external;\r\n\r\n    /**\r\n     * @dev External function to change the priority of teller. This function can be called by only owner.\r\n     * @param teller Address of teller\r\n     * @param newPriority New priority of teller\r\n     */\r\n    function changePriority(address teller, uint256 newPriority) external;\r\n\r\n    /**\r\n     * @dev External function to pay the Vidya token to investors. This function can be called by only teller.\r\n     * @param provider Address of provider\r\n     * @param providerTimeWeight Weight time of provider\r\n     * @param totalWeight Sum of provider weight\r\n     */\r\n    function payProvider(\r\n        address provider,\r\n        uint256 providerTimeWeight,\r\n        uint256 totalWeight\r\n    ) external;\r\n\r\n    /**\r\n     * @dev External function to calculate the Vidya Rate.\r\n     */\r\n    function calculateRateExternal() external;\r\n}"
9     },
10     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Address.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Context.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
27     }
28   },
29   "settings": {
30     "optimizer": {
31       "enabled": false,
32       "runs": 200
33     },
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     }
46   }
47 }}