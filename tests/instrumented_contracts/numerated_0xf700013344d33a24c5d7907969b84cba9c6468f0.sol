1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "london",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "enabled": true,
12       "runs": 200
13     },
14     "remappings": [],
15     "outputSelection": {
16       "*": {
17         "*": [
18           "evm.bytecode",
19           "evm.deployedBytecode",
20           "devdoc",
21           "userdoc",
22           "metadata",
23           "abi"
24         ]
25       }
26     }
27   },
28   "sources": {
29     "@openzeppelin/contracts/access/AccessControl.sol": {
30       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
31     },
32     "@openzeppelin/contracts/access/IAccessControl.sol": {
33       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
34     },
35     "@openzeppelin/contracts/security/Pausable.sol": {
36       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
37     },
38     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
40     },
41     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
43     },
44     "@openzeppelin/contracts/utils/Context.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
46     },
47     "@openzeppelin/contracts/utils/Strings.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
49     },
50     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
52     },
53     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
54       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
55     },
56     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
57       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
58     },
59     "contracts/MinterPro.sol": {
60       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./interfaces/IMinterPro.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./interfaces/ICharacter.sol\";\nimport \"./interfaces/IBag.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./helpers/Errors.sol\";\nimport \"./helpers/Permissions.sol\";\n\n/**\n * @dev ASM The Next Legends - Minter Pro contract\n * @notice\n */\ncontract MinterPro is IMinterPro, Errors, AccessControl, ReentrancyGuard, Pausable {\n    using ECDSA for bytes32;\n\n    address private _signer;\n    address private _manager; // ASM Owned multisig contract, used for maintenance\n    address private _multisig; // another ASM Owned multisig contract, used for withdrawing ETHs\n\n    ICharacter public char_;\n    IBag public bag_;\n\n    uint256 constant proMaxSupply = 5661;\n    uint256 public mintingEthCost;\n\n    event Minted(address indexed to, bytes32 hashId, uint256 charId, uint256 bagId);\n    event ContractUpgraded(uint256 timestamp, string indexed contractName, address oldAddress, address newAddress);\n    event SignerUpdated(address indexed manager, address newSigner);\n    event Withdraw(address indexed manager, address to, uint256 amount);\n\n    constructor(\n        address manager,\n        address multisig,\n        address signer,\n        address character,\n        address bag\n    ) {\n        if (manager == address(0)) revert InvalidInput(INVALID_MANAGER);\n        if (multisig == address(0)) revert InvalidInput(INVALID_MULTISIG);\n        if (signer == address(0)) revert InvalidInput(INVALID_SIGNER);\n        if (character == address(0)) revert InvalidInput(WRONG_CHARACTER_CONTRACT);\n\n        _manager = manager;\n        _multisig = multisig;\n        _signer = signer;\n\n        _grantRole(MANAGER_ROLE, manager);\n        _grantRole(MULTISIG_ROLE, multisig);\n\n        char_ = ICharacter(character);\n        bag_ = IBag(bag);\n\n        if (!char_.supportsInterface(type(ICharacter).interfaceId)) revert UpgradeError(WRONG_CHARACTER_CONTRACT);\n        if (!bag_.supportsInterface(type(IBag).interfaceId)) revert UpgradeError(WRONG_BAG_CONTRACT);\n\n        _pause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IMinterPro, AccessControl)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IMinterPro).interfaceId ||\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(AccessControl).interfaceId;\n    }\n\n    /** ----------------------------------\n     * ! Minting functions\n     * ----------------------------------- */\n\n    /**\n     * @notice Minting a new character or asset\n     * @dev This function can only be called inside the contract\n     * @param to to which address to mint a new token\n     * @param expiry timestamp (in seconds) when token expires (user can mint before that time only)\n     * @param hashId user identificator, used to match user's allowance to mint with minted token.\n     * @param signature Signed hash to prove the right to mint. Generated by ASM, stored in DDB, returned from Dapp. Can only be used once.\n     */\n    function mintPro(\n        address to,\n        bytes calldata signature,\n        bytes32 hashId,\n        uint256 expiry\n    ) external payable whenPaid(msg.value) whenNotExpired(expiry) nonZeroAddress(to) whenNotPaused {\n        // this check assumes that Pro Chars minted before normal characters,\n        // and thus first 5661 of chars will be Pros.\n        if ((char_.totalSupply() + 1) > proMaxSupply) revert MintingError(TOTAL_SUPPLY_EXCEEDED, 0);\n\n        if (!validateSignature(to, hashId, expiry, signature)) revert InvalidInput(INVALID_SIGNATURE);\n\n        uint256 charId = char_.mint(to, hashId);\n        uint256 bagId = bag_.mint(to);\n\n        emit Minted(to, hashId, charId, bagId);\n    }\n\n    /** ----------------------------------\n     * ! Signature validating functions\n     * ----------------------------------- */\n\n    /**\n     * @notice To validate the `signature` is signed by the _signer\n     * @param addr User wallet address\n     * @param nonce Character hashId\n     * @param expiry timestamp when token expires (user can mint before that time only)\n     * @param signature The signature passed from the caller\n     * @return Validation result\n     */\n    function validateSignature(\n        address addr,\n        bytes32 nonce,\n        uint256 expiry,\n        bytes calldata signature\n    ) public view returns (bool) {\n        bytes32 messageHash = _hash(addr, nonce, expiry);\n        bytes32 ethSignedMessageHash = _getEthSignedMessageHash(messageHash);\n        return _verify(ethSignedMessageHash, signature);\n    }\n\n    /**\n     * @notice Encode arguments to generate a hash, which will be used for validating signatures\n     * @dev This function can only be called inside the contract\n     * @param addr The user wallet address, to verify the signature can only be used by the wallet\n     * @param nonce Character hashId\n     * @param expiry timestamp when token expires\n     * @return Encoded hash\n     */\n    function _hash(\n        address addr,\n        bytes32 nonce,\n        uint256 expiry\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encode(addr, Strings.toHexString(uint256(nonce), 32), expiry));\n    }\n\n    /**\n     * @notice Prefixing a hash with \"\\x19Ethereum Signed Message\\n\", which required for recovering signer\n     * @dev This function can only be called inside the contract\n     * @param _messageHash hash that need to be prefixed\n     * @return Prefixed hash\n     */\n    function _getEthSignedMessageHash(bytes32 _messageHash) private pure returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n    }\n\n    /**\n     * @notice To verify the `token` is signed by the _signer\n     * @dev This function can only be called inside the contract\n     * @param ethSignedMessageHash The encoded hash used for signature\n     * @param signature The signature passed from the caller\n     * @return Verification result\n     */\n    function _verify(bytes32 ethSignedMessageHash, bytes memory signature) internal view returns (bool) {\n        address signer_ = _recoverSigner(ethSignedMessageHash, signature);\n        return (signer_ == _signer && signer_ != address(0));\n    }\n\n    /**\n     * @notice Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     * @dev This function can only be called inside the contract\n     * @param ethSignedMessageHash The encoded hash used for signature\n     * @param signature The signature passed from the caller\n     * @return The recovered address\n     */\n    function _recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature) private pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(signature);\n        return ecrecover(ethSignedMessageHash, v, r, s);\n    }\n\n    /**\n     * @notice Extracting R, S, V components from the signature\n     * @dev This function can only be called inside the contract\n     * @param sig The signature to extract r,s,v from\n     */\n    function _splitSignature(bytes memory sig)\n        private\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // implicitly return (r, s, v)\n    }\n\n    /** ----------------------------------\n     * ! Manager functions      | UPGRADES\n     * ----------------------------------- */\n\n    /**\n     * @notice Upgrade Unpacker contract address\n     * @dev This function can only be called from contracts or wallets with MANAGER_ROLE\n     * @param newContract Address of the new contract\n     */\n    function upgradeCharacterContract(address newContract) external onlyRole(MANAGER_ROLE) {\n        if (newContract == address(0)) revert InvalidInput(INVALID_ADDRESS);\n\n        address oldContract = address(char_);\n        char_ = ICharacter(newContract);\n        if (!char_.supportsInterface(type(ICharacter).interfaceId)) revert UpgradeError(WRONG_CHARACTER_CONTRACT);\n\n        emit ContractUpgraded(block.timestamp, \"Character.sol\", oldContract, newContract);\n    }\n\n    /**\n     * @notice Upgrade Bag contract address\n     * @dev This function can only be called from contracts or wallets with MANAGER_ROLE\n     * @param newContract Address of the new contract\n     */\n    function upgradeBagContract(address newContract) external onlyRole(MANAGER_ROLE) {\n        if (newContract == address(0)) revert InvalidInput(INVALID_ADDRESS);\n\n        address oldContract = address(bag_);\n        bag_ = IBag(newContract);\n        if (!bag_.supportsInterface(type(IBag).interfaceId)) revert UpgradeError(WRONG_BAG_CONTRACT);\n\n        emit ContractUpgraded(block.timestamp, \"Bag.sol\", oldContract, newContract);\n    }\n\n    /** ----------------------------------\n     * ! Admin functions\n     * ----------------------------------- */\n\n    /**\n     * @notice Set manager address (contract or wallet) to manage this contract\n     * @dev This function can only to called from contracts or wallets with MANAGER_ROLE\n     * @dev The old manager will be removed\n     * @param newManager The new manager address to be granted\n     */\n    function setManager(address newManager) external onlyRole(MANAGER_ROLE) {\n        if (newManager == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        _revokeRole(MANAGER_ROLE, _manager);\n        _grantRole(MANAGER_ROLE, newManager);\n        _manager = newManager;\n    }\n\n    /**\n     * @notice Set Multisig address (multisig wallet) to perform withdraw\n     * @dev This function can only to called from contracts with MULTISIG_ROLE\n     * @dev The old manager will be removed\n     * @param _newMultisig The new manager address to be granted\n     */\n    function setMultisig(address _newMultisig) external onlyRole(MULTISIG_ROLE) {\n        if (_newMultisig == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        _revokeRole(MULTISIG_ROLE, _multisig);\n        _grantRole(MULTISIG_ROLE, _newMultisig);\n        _multisig = _newMultisig;\n    }\n\n    /**\n     * @notice Update signer\n     * @dev This function can only to called from contracts or wallets with MANAGER_ROLE\n     * @param newSigner The new signer address to update\n     */\n    function setSigner(address newSigner) external onlyRole(MANAGER_ROLE) {\n        if (newSigner == address(0)) revert InvalidInput(INVALID_SIGNER);\n        _signer = newSigner;\n        emit SignerUpdated(msg.sender, newSigner);\n    }\n\n    function getSigner() public view returns (address) {\n        return _signer;\n    }\n\n    /**\n     * @notice Set the price to mint\n     * @dev only MANAGER_ROLE can call this function\n     * @param cost New price\n     */\n    function setMintingEthCost(uint256 cost) external onlyRole(MANAGER_ROLE) {\n        mintingEthCost = cost;\n    }\n\n    /**\n     * @notice Pause the minting process\n     */\n    function pause() external onlyRole(MANAGER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @notice Pause the minting process\n     */\n    function unpause() external onlyRole(MANAGER_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @notice Withdraw ETH from the contract to specified address\n     * @dev only MULTISIG_ROLE can call this function\n     * @param amount Token amount to withdraw\n     * @param to recipient of the transfer\n     */\n    function withdrawEth(uint256 amount, address payable to) external onlyRole(MULTISIG_ROLE) {\n        if (amount == 0) revert InvalidInput(INVALID_AMOUNT);\n        if (to == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        (bool sent, ) = to.call{value: amount}(\"\");\n        if (!sent) revert ManagementError(CANT_SEND);\n    }\n\n    /** ----------------------------------\n     * ! Modifiers\n     * ----------------------------------- */\n\n    modifier whenPaid(uint256 receivedAmount) {\n        uint256 requiredAmount = mintingEthCost;\n        if (receivedAmount < requiredAmount) revert PaymentError(NO_PAYMENT_RECEIVED, requiredAmount, receivedAmount);\n        else _;\n    }\n\n    modifier whenNotExpired(uint256 expiry) {\n        if (block.timestamp > expiry) revert MintingError(MINT_EXPIRED, expiry);\n        else _;\n    }\n\n    modifier nonZeroAddress(address addr) {\n        if (addr == address(0)) revert InvalidInput(INVALID_ADDRESS);\n        else _;\n    }\n}\n"
61     },
62     "contracts/helpers/Errors.sol": {
63       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/**\n * @dev ASM The Next Legends - Error definition contract\n */\ncontract Errors {\n    error InvalidInput(string errMsg);\n    string constant INVALID_MULTISIG = \"Invalid Multisig contract\";\n    string constant INVALID_MANAGER = \"Invalid Manager contract\";\n    string constant INVALID_SIGNER = \"Invalid signer address\";\n    string constant INVALID_MINTER = \"Invalid Minter contract\";\n    string constant INVALID_SIGNATURE = \"Invalid signature\";\n    string constant INVALID_CURRENCY = \"Invalid currency\";\n    string constant INVALID_ADDRESS = \"Invalid wallet address\";\n    string constant INVALID_AMOUNT = \"Invalid amount\";\n\n    error UpgradeError(string errMsg);\n    string constant WRONG_CHARACTER_CONTRACT = \"Wrong character contract\";\n    string constant WRONG_BAG_CONTRACT = \"Wrong bag contract\";\n    string constant WRONG_UNPACKER_CONTRACT = \"Wrong unpacker contract\";\n    string constant WRONG_MINTER_CONTRACT = \"Wrong minter contract\";\n    string constant WRONG_ASSET_CONTRACT = \"Wrong asset contract\";\n    string constant WRONG_PAYMENT_CONTRACT = \"Wrong payment contract\";\n    string constant WRONG_ASTO_CONTRACT = \"Wrong ASTO contract\";\n    string constant WRONG_LP_CONTRACT = \"Wrong LP contract\";\n\n    error AccessError(string errMsg);\n    string constant WRONG_TOKEN_ID = \"Wrong token ID\";\n    string constant WRONG_TOKEN_OWNER = \"Wrong token owner\";\n    string constant WRONG_HASH = \"Wrong hash\";\n    string constant NOT_ASSIGNED = \"Address not assigned\";\n\n    error PaymentError(string errMsg, uint256 requiredAmount, uint256 receivedAmount);\n    string constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    string constant NO_PAYMENT_RECEIVED = \"No payment received\";\n    string constant NO_PAYMENT_RECOGNIZED = \"MintType/Currency not recognized\";\n    string constant CURRENCY_DOES_NOT_SUIT_TYPE = \"Currency doesn't suit type\";\n    string constant MINT_TYPE_IS_NOT_SUPPORTED = \"MintType isn't supported\";\n\n    error MintingError(string errMsg, uint256 expiry);\n    error OpenError(string errMsg);\n    string constant MINT_EXPIRED = \"Mint hash has expired\";\n    string constant TOKEN_ALREADY_MINTED = \"Token has already minted\";\n    string constant NOT_ALLOWED = \"Currently is not allowed\";\n    string constant TOTAL_SUPPLY_EXCEEDED = \"Total supply exceeded\";\n\n    error ManagementError(string errMsg);\n    string constant CANT_SEND = \"Failed to send Ether\";\n}\n"
64     },
65     "contracts/helpers/Permissions.sol": {
66       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/**\n * @dev ASM The Next Legends - Roles\n */\n\nbytes32 constant MULTISIG_ROLE = keccak256(\"MULTISIG_ROLE\");\nbytes32 constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\nbytes32 constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n"
67     },
68     "contracts/interfaces/IBag.sol": {
69       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IBag {\n    function mint(address) external returns (uint256);\n\n    function open(uint256, address) external;\n\n    function allowToOpen(bool newState) external;\n\n    function burn(uint256) external;\n\n    function upgradeUnpackerContract(address) external;\n\n    function setBaseURI(string calldata) external;\n\n    function totalSupply() external returns (uint256);\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
70     },
71     "contracts/interfaces/ICharacter.sol": {
72       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface ICharacter {\n    function mint(address, bytes32) external returns (uint256);\n\n    function setBaseURI(string calldata) external;\n\n    function totalSupply() external returns (uint256);\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
73     },
74     "contracts/interfaces/IMinterPro.sol": {
75       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IMinterPro {\n    function mintPro(\n        address to,\n        bytes calldata signature,\n        bytes32 hashId,\n        uint256 expiry\n    ) external payable;\n\n    function setMintingEthCost(uint256 cost) external;\n\n    function withdrawEth(uint256 amount, address payable to) external;\n\n    function upgradeBagContract(address) external;\n\n    function upgradeCharacterContract(address) external;\n\n    function setManager(address) external;\n\n    function setMultisig(address) external;\n\n    function setSigner(address) external;\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
76     }
77   }
78 }}