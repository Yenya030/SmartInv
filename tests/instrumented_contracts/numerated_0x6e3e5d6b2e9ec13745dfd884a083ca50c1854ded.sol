1 {{
2   "language": "Solidity",
3   "sources": {
4     "batpepePresale.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (\r\n        uint amountToken,\r\n        uint amountETH,\r\n        uint liquidity\r\n    );\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isInit;\r\n    bool public isDeposit;\r\n    bool public isRefund;\r\n    bool public isFinish;\r\n    bool public burnTokens = true;\r\n    address public creatorWallet;\r\n    address public teamWallet;\r\n    address public weth;\r\n    uint8 public tokenDecimals = 18;\r\n    uint256 public ethRaised;\r\n    uint256 public percentageRaised;\r\n    uint256 public tokensSold;\r\n\r\n    struct Pool {\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint256 tokenDeposit;\r\n        uint256 tokensForSale;\r\n        uint256 tokensForLiquidity;\r\n        uint8 liquidityPortion;\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n        uint256 maxBuy;\r\n        uint256 minBuy;\r\n    }\r\n\r\n    IERC20 public tokenInstance;\r\n    IUniswapV2Factory public UniswapV2Factory;\r\n    IUniswapV2Router02 public UniswapV2Router02;\r\n    Pool public pool;\r\n\r\n    mapping(address => uint256) public ethContribution;\r\n\r\n    modifier onlyActive {\r\n        require(block.timestamp >= pool.startTime, \"Sale must be active.\");\r\n        require(block.timestamp <= pool.endTime, \"Sale must be active.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInactive {\r\n        require(\r\n            block.timestamp < pool.startTime ||\r\n            block.timestamp > pool.endTime ||\r\n            ethRaised >= pool.hardCap, \"Sale must be inactive.\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    modifier onlyRefund {\r\n        require(\r\n            isRefund == true ||\r\n            (block.timestamp > pool.endTime && ethRaised < pool.softCap), \"Refund unavailable.\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _tokenInstance,\r\n        address _uniswapv2Router,\r\n        address _uniswapv2Factory,\r\n        address _teamWallet,\r\n        address _weth\r\n    ) {\r\n\r\n        require(_uniswapv2Router != address(0), \"Invalid router address\");\r\n        require(_uniswapv2Factory != address(0), \"Invalid factory address\");\r\n\r\n        isInit = false;\r\n        isDeposit = false;\r\n        isFinish = false;\r\n        isRefund = false;\r\n        ethRaised = 0;\r\n\r\n        teamWallet = _teamWallet;\r\n        weth = _weth;\r\n        tokenInstance = _tokenInstance;\r\n        creatorWallet = address(payable(msg.sender));\r\n        UniswapV2Router02 = IUniswapV2Router02(_uniswapv2Router);\r\n        UniswapV2Factory = IUniswapV2Factory(_uniswapv2Factory);\r\n\r\n        require(UniswapV2Factory.getPair(address(tokenInstance), weth) == address(0), \"IUniswap: Pool exists.\");\r\n\r\n        tokenInstance.approve(_uniswapv2Router, tokenInstance.totalSupply());\r\n    }\r\n\r\n    event Liquified(\r\n        address indexed _token,\r\n        address indexed _router,\r\n        address indexed _pair\r\n        );\r\n\r\n    event Canceled(\r\n        address indexed _inititator,\r\n        address indexed _token,\r\n        address indexed _presale\r\n        );\r\n\r\n    event Bought(address indexed _buyer, uint256 _tokenAmount);\r\n\r\n    event Refunded(address indexed _refunder, uint256 _tokenAmount);\r\n\r\n    event Deposited(address indexed _initiator, uint256 _totalDeposit);\r\n\r\n    event Claimed(address indexed _participent, uint256 _tokenAmount);\r\n\r\n    event RefundedRemainder(address indexed _initiator, uint256 _amount);\r\n\r\n    event BurntRemainder(address indexed _initiator, uint256 _amount);\r\n\r\n    event Withdraw(address indexed _creator, uint256 _amount);\r\n\r\n    /*\r\n    * Reverts ethers sent to this address whenever requirements are not met\r\n    */\r\n    receive() external payable {\r\n        if(block.timestamp >= pool.startTime && block.timestamp <= pool.endTime){\r\n            buyTokens(_msgSender());\r\n        } else {\r\n            revert(\"Presale is closed\");\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Initiates the arguments of the sale\r\n    @dev arguments must be pa   ssed in wei (amount*10**18)\r\n    */\r\n    function initSale(\r\n        uint64 _startTime,\r\n        uint64 _endTime,\r\n        uint256 _tokenDeposit,\r\n        uint256 _tokensForSale,\r\n        uint256 _tokensForLiquidity,\r\n        uint8 _liquidityPortion,\r\n        uint256 _hardCap,\r\n        uint256 _softCap,\r\n        uint256 _maxBuy,\r\n        uint256 _minBuy\r\n        ) external onlyOwner onlyInactive {\r\n\r\n        require(isInit == false, \"Sale no initialized\");\r\n        require(_startTime >= block.timestamp, \"Invalid start time.\");\r\n        require(_endTime > block.timestamp, \"Invalid end time.\");\r\n        require(_tokenDeposit > 0, \"Invalid token deposit.\");\r\n        require(_tokensForSale < _tokenDeposit, \"Invalid tokens for sale.\");\r\n        require(_tokensForLiquidity < _tokenDeposit, \"Invalid tokens for liquidity.\");\r\n        require(_softCap >= _hardCap / 2, \"SC must be >= HC/2.\");\r\n        require(_liquidityPortion >= 50, \"Liquidity must be >=50.\");\r\n        require(_liquidityPortion <= 100, \"Invalid liquidity.\");\r\n        require(_minBuy < _maxBuy, \"Min buy must greater than max.\");\r\n        require(_minBuy > 0, \"Min buy must exceed 0.\");\r\n\r\n        Pool memory newPool = Pool(\r\n            _startTime,\r\n            _endTime,\r\n            _tokenDeposit,\r\n            _tokensForSale,\r\n            _tokensForLiquidity,\r\n            _liquidityPortion,\r\n            _hardCap,\r\n            _softCap,\r\n            _maxBuy,\r\n            _minBuy\r\n        );\r\n\r\n        pool = newPool;\r\n\r\n        isInit = true;\r\n    }\r\n\r\n    /*\r\n    * Once called the owner deposits tokens into pool\r\n    */\r\n    function deposit() external onlyOwner {\r\n        require(!isDeposit, \"Tokens already deposited.\");\r\n        require(isInit, \"Not initialized yet.\");\r\n\r\n        uint256 totalDeposit = _getTokenDeposit();\r\n\r\n        isDeposit = true;\r\n\r\n        require(tokenInstance.transferFrom(msg.sender, address(this), totalDeposit), \"Deposit failed.\");\r\n\r\n        emit Deposited(msg.sender, totalDeposit);\r\n    }\r\n\r\n    /*\r\n    * Finish the sale - Create Uniswap v2 pair, add liquidity, take fees, withrdawal funds, burn/refund unused tokens\r\n    */\r\n    function finishSale() external onlyOwner onlyInactive{\r\n        require(ethRaised >= pool.softCap, \"Soft Cap is not met.\");\r\n        require(block.timestamp > pool.startTime, \"Can not finish before start\");\r\n        require(!isFinish, \"Sale already launched.\");\r\n        require(!isRefund, \"Refund process.\");\r\n\r\n        percentageRaised = _getPercentageFromValue(ethRaised, pool.hardCap);\r\n        tokensSold = _getValueFromPercentage(percentageRaised, pool.tokensForSale);\r\n        uint256 tokensForLiquidity = _getValueFromPercentage(percentageRaised, pool.tokensForLiquidity);\r\n        isFinish = true;\r\n\r\n        //add liquidity\r\n        (uint amountToken, uint amountETH, ) = UniswapV2Router02.addLiquidityETH{value : _getLiquidityEth()}(\r\n            address(tokenInstance),\r\n            tokensForLiquidity,\r\n            tokensForLiquidity,\r\n            _getLiquidityEth(),\r\n            owner(),\r\n            block.timestamp + 600\r\n        );\r\n\r\n        require(amountToken == tokensForLiquidity && amountETH == _getLiquidityEth(), \"Providing liquidity failed.\");\r\n\r\n        emit Liquified(\r\n            address(tokenInstance),\r\n            address(UniswapV2Router02),\r\n            UniswapV2Factory.getPair(address(tokenInstance), weth)\r\n        );\r\n\r\n        //withrawal eth\r\n        uint256 ownerShareEth = _getOwnerEth();\r\n\r\n        if (ownerShareEth > 0) {\r\n            payable(creatorWallet).transfer(ownerShareEth);\r\n        }\r\n\r\n        //If HC is not reached, burn or refund the remainder\r\n        if (ethRaised < pool.hardCap) {\r\n            uint256 remainder = _getUserTokens(pool.hardCap - ethRaised) + (pool.tokensForLiquidity - tokensForLiquidity);\r\n            if(burnTokens == true){\r\n                require(tokenInstance.transfer(\r\n                    0x000000000000000000000000000000000000dEaD,\r\n                    remainder), \"Unable to burn.\"\r\n                );\r\n                emit BurntRemainder(msg.sender, remainder);\r\n            } else {\r\n                require(tokenInstance.transfer(creatorWallet, remainder), \"Refund failed.\");\r\n                emit RefundedRemainder(msg.sender, remainder);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * The owner can decide to close the sale if it is still active\r\n    NOTE: Creator may call this function even if the Hard Cap is reached, to prevent it use:\r\n     require(ethRaised < pool.hardCap)\r\n    */\r\n    function cancelSale() external onlyOwner onlyActive {\r\n        require(!isFinish, \"Sale finished.\");\r\n        pool.endTime = 0;\r\n        isRefund = true;\r\n\r\n        if (tokenInstance.balanceOf(address(this)) > 0) {\r\n            uint256 tokenDeposit = _getTokenDeposit();\r\n            tokenInstance.transfer(msg.sender, tokenDeposit);\r\n            emit Withdraw(msg.sender, tokenDeposit);\r\n        }\r\n        emit Canceled(msg.sender, address(tokenInstance), address(this));\r\n    }\r\n\r\n    /*\r\n    * Allows participents to claim the tokens they purchased\r\n    */\r\n    function claimTokens() external onlyInactive {\r\n        require(isFinish, \"Sale is still active.\");\r\n        require(!isRefund, \"Refund process.\");\r\n\r\n        uint256 tokensAmount = _getUserTokens(ethContribution[msg.sender]);\r\n        ethContribution[msg.sender] = 0;\r\n        require(tokenInstance.transfer(msg.sender, tokensAmount), \"Claim failed.\");\r\n        emit Claimed(msg.sender, tokensAmount);\r\n    }\r\n\r\n    /*\r\n    * Refunds the Eth to participents\r\n    */\r\n    function refund() external onlyInactive onlyRefund {\r\n        uint256 refundAmount = ethContribution[msg.sender];\r\n\r\n        require(refundAmount > 0, \"No refund amount\");\r\n        require(address(this).balance >= refundAmount, \"No amount available\");\r\n\r\n        ethContribution[msg.sender] = 0;\r\n        address payable refunder = payable(msg.sender);\r\n        refunder.transfer(refundAmount);\r\n        emit Refunded(refunder, refundAmount);\r\n    }\r\n\r\n    /*\r\n    * Withdrawal tokens on refund\r\n    */\r\n    function withrawTokens() external onlyOwner onlyInactive onlyRefund {\r\n        if (tokenInstance.balanceOf(address(this)) > 0) {\r\n            uint256 tokenDeposit = _getTokenDeposit();\r\n            require(tokenInstance.transfer(msg.sender, tokenDeposit), \"Withdraw failed.\");\r\n            emit Withdraw(msg.sender, tokenDeposit);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * If requirements are passed, updates user\"s token balance based on their eth contribution\r\n    */\r\n    function buyTokens(address _contributor) public payable onlyActive {\r\n        require(isDeposit, \"Tokens not deposited.\");\r\n        require(_contributor != address(0), \"Transfer to 0 address.\");\r\n        require(msg.value != 0, \"Wei Amount is 0\");\r\n        require(msg.value >= pool.minBuy, \"Min buy is not met.\");\r\n        require(msg.value + ethContribution[_contributor] <= pool.maxBuy, \"Max buy limit exceeded.\");\r\n        require(ethRaised + msg.value <= pool.hardCap, \"HC Reached.\");\r\n\r\n        ethRaised += msg.value;\r\n        ethContribution[msg.sender] += msg.value;\r\n    }\r\n\r\n    /*\r\n    * Internal functions, called when calculating balances\r\n    */\r\n    function _getUserTokens(uint256 _amount) internal view returns (uint256) {\r\n        return _amount.mul(tokensSold).div(ethRaised);\r\n    }\r\n\r\n    function _getLiquidityEth() internal view returns (uint256) {\r\n        return _getValueFromPercentage(pool.liquidityPortion, ethRaised);\r\n    }\r\n\r\n    function _getOwnerEth() internal view returns (uint256) {\r\n        uint256 liquidityEthFee = _getLiquidityEth();\r\n        return ethRaised - liquidityEthFee;\r\n    }\r\n\r\n    function _getTokenDeposit() internal view returns (uint256){\r\n        return pool.tokenDeposit;\r\n    }\r\n\r\n    function _getPercentageFromValue(uint256 currentValue, uint256 maxValue) private pure returns (uint256) {\r\n        require(currentValue <= maxValue, \"Number too high\");\r\n\r\n        return currentValue.mul(100).div(maxValue);\r\n    }\r\n\r\n    function _getValueFromPercentage(uint256 currentPercentage, uint256 maxValue) private pure returns (uint256) {\r\n        require(currentPercentage <= 100, \"Number too high\");\r\n\r\n        return maxValue.mul(currentPercentage).div(100);\r\n    }\r\n}"
6     },
7     "Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
9     },
10     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
12     }
13   },
14   "settings": {
15     "optimizer": {
16       "enabled": true,
17       "runs": 200
18     },
19     "outputSelection": {
20       "*": {
21         "*": [
22           "evm.bytecode",
23           "evm.deployedBytecode",
24           "devdoc",
25           "userdoc",
26           "metadata",
27           "abi"
28         ]
29       }
30     }
31   }
32 }}