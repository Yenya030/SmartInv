1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/GDH.sol": {
5       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title: GORODOKOHIRAKIPPERS\n/// @author: manifold.xyz\n\nimport \"./manifold/ERC1155Creator.sol\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                                                                                                                //\n//                                                                                                                                                                                                                //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH    //\n//    HH#HH#H#MH\"\"\"\"\"WMM#HMMHH#HMMMMMMMMMMMMMMMMMMMMMMHH#MMMMMMMMMMMMMMMMHH#HH#HHMMMMMMMMMMMMMMMMHH#HH#HH#HH#HH#HH#HH#HHMMMMMMMMMMMMMMMMMH#HH#HH#HHMMMMMMMMMMMMMMMMMMMMMMMMMHH#HH#HH#HHMY\"\"\"\"\"YWMH##MHH#HH#HH#    //\n//    H#H#HM\"`.gHH#HN&.    ,#HHHHH]       (HQmg-,    dHH#NHR       .HHHHM#HH#HHHHNHH        QHHHMHHH#HH#HH#HH#HH#HH#HH#HMMM!       WMNa.    ?UHHH#H]    .gH]       .HaJ.   ,HHH#HH##\"`  .(MHHHNJ.    H#HH#HH#H    //\n//    H#H#F  JHH#HHHHHHm.  ,HH#HHH]       JHHHHHHN,  J#HHHH#       .HHHH#HH#HH#HHHHH        HHHHH#HHH#HH#HH#HH#HH#HH#HH#HHH!       HHHHb       WHH#]  .MHHHF       ,HHHM,  ,#HHH#Y`    .H#HH#H#HHx   M#HHH#HHH    //\n//    HH#F   W#HH#H#HH#HM, ,H#HHHH]       JHHHH#H##L (H#H#H#       .HH#HH#HHH#H#HHHH        HHH#HH#HHH#HH#HH#HH#HH#HH#HH#H#!       HHHHN       .#HH\\ .HHH#HF       ,H#H#H, .#H#M^     .MHH#HH#HH##h  WHH#HH#HH    //\n//    H#H`    TMHH#HH#HH#Hp.#HH#HH]       J#H#HH#HH#L,HH#HH#       .H#HH#HH#HHHH##HH        HHH#HH#H#HH#HH#HH#HH#HH#HH#HH##!       HHH#N        #HH}.MHH#HHF       ,#HHH#N..H#M'      .#HH#HHHH#HHHh dH#HH#HH#    //\n//    H#M        ?\"WM#HHH#HHH#HH#H]   `   JH#HH#FJHH##HHH#H#       .HHH#HH#H#H#HHH#H        HHHH#HH#HH#HH#HH#HH#HH#HH#HHHH#!       HH#H#      `.H##:JH#HH#HF       ,HH#HHHb.#H]       dH#HH#H#HHHHHHNHHH#HH#HH    //\n//    HHH;             ?TMHH#HH#HH]       JHH#HF JHHHH#HHH##   `   .#HHH#HHHH#HH#HH#        HHH#HHHHH#HH#HH#HH#HH#HH#HH#HHH!       HHH#F     ..HHH#HH#HH#HHF       ,HHH#HHHHHM`       W#HH#HH#H##H#HH#HH#HHH#H    //\n//    H##N.  `            .THH#HH#]    `  ?MH\"'  JHH#HH#HHH#       .HH#HH#H#HHH#HHHH        HHHH#H#HHH#HHH#HH#HH#HH#HH#H#H#!       TY\"=  ..JH#HH#HH#HH#HH#HF       ,HH#HH##H##        M#HHHH#HHHH#HH#H#HH#HHHH    //\n//    HHH#Mx.  `  `         /HH#HH]  `    (gg..  JHH#HH#H#H#    `  .HHH#HH#HH#HH#H#H   `    HHH#HH#H#HH#HHH#HHH#HH#HH#HHH##!  `  ` HHMH,     ?TMHH#HH#HH#HHF  `    ,HH#HHHH#H#   `  ` M#H#H#HH#HHHH#HHH#HH#H#H    //\n//    H#HHH##NJ..            dHHHH]       JHHHH[ JHHH#HH#H##       .HH#HHHHH#HH#HHH#        HHHHH#HHH#HH#HHH#HHH#HHH#HH#HHH!       HHHH#b       THH#HH#HH#HF       ,HHH#HH#HHN        H#HH#HH#H#H#HH#HH#HHH#HH    //\n//    H#MMHHH#HH##NaJ,  `    -#H#H]       J#HHH#cJ#HH##HHHH#   `   .HHH#H#HH#HMU#HHH        HHH#HH#HH#M\"H#HH#H#HH#HHH#HH#H#!       HHH#HM        W#HH#HH#HHF       ,H#HH#HH#H#-       d#HHHH#HHH#HH#MM#HH#HH#H    //\n//    HHN T#HHHHHHH#H##m,  ` (#HHH]  ` `  JHH#HHNHHHHF,#H#H#       .HH#HH#HHHM!.HH#H    `   HHHH#HH#HM^.H#HHH#HH#H#HH#HHH##!       H#HHHH        JHH#HH#HH#F   `   ,HH#HH#HHHHb    `  J#H#H#HH#HHH#M\\,HH#HH#HH    //\n//    H#M  /MH#HHHHHHHHHN.  .HHHH#]       J#HH#HHHH#F ,HHH##       .H#HH#HH##` -H#HH        HHHHH#H#M^ .#H#HHHH#HHH#HH#HHHH!   `   HH#HHM       `dHHH#HHH#HF       ,HH#HHH#H#HH[      .MHH#HH#HH#HM\\ -#HH#HH#H    //\n//    H#H.   TH##H#H#HH#M` .dHHH#H]       JHH#HHH##^  ,#HHH#  `  ` .HHH#H#MY   JHH#H        HHH#HHH@`  .HHH#H#HH#HHH#HH#HH#!       H#HH#@   `   .HH#HH#HHHHF    `  ,HHH#HHH#HH##h.     (HHHH#HH#H#'  -HH#HH#HH    //\n//    HH#_     TM#HH#H##^ .MHHHH#H]   `   JH#HMH\"'    -#H###       .#HHH#\"`    d#H##    `   HHHHMY'    JH#HH#HH#HH#HH#HH#H#!       H#HH#!    ..HHH#HH#H#H#HF       ,H#HH#HHHH#HH##a,`   ,W#HH#HM\"    JHH#HHH#H    //\n//    H#HldNmgJ...(11+.(dHHHH#HH(.....................JH#h.....................MHh.....................dHH#HHH#HH#HH#HH#h...............JggM#HHHHHH#HHHHJ..............HH#H#HHHHHH##HNa....+z1(..&gMhd#HH#HHH#    //\n//    H#HHHHHH#HHHHHHHHHH#H#HH#HHHHH#HH#H#HHHHHHHHHH#HHHHHHH#H##H#HHHHHHHHH#H##HHHHHHH#HMMBYYBWMMMHHHHH#HH#HH#HH#HH#HHHHHHHH#H####HHHH#H##HH#HH#H#HH#H#HHHH#H##H#HHHHH#HHH#H#H#HHHHHHHHHHH#HHHHHH##H#HHHH#H#HH    //\n//    HH##H#HHH#HH#HH#HH#HH#HH#H#H#HH#HHHH#HH#HHH#HHH#H#H#HHHHHHHH#H#H#HH#HHHHH#HH#MBzY>>+???1?+1++?M#HH#HH#HH#HHH#HH#H#MMMMHHHHHH#H#HHHHHHHH#HH#HH#HHH#HH#HHHHHH#H#HH#H#HHHH#H##HH#HH#H#HH#H#HHHHHHH#H#HH#HHH    //\n//    H#HHH#H#HH#HH#HH#HHH#HH#HHH#HH#HH#HH#H#H#H#H#HHH#HH#H#H#HH#HH#HH#H#HMMMMBY7>11+???=1zrwwwwvzwwoJM#HH#H#MH#MMMYW8wvzwzzzzTMHHH#HH#H#H#HH#HHHH#HH#HH#HH#HH#HHH#HH#HHH#H#HHHHH#HH#HH#HH#HH#H##HH#HH#HHHH#H#    //\n//    H##HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#HH#HHHHH#HHH#HHHH#HHH#HH#HH#HHH#M61??=++<>?>>?+zzzwXXXXXHfVXWWWkMH#MHB1OtOwwvXwwZXWWkwwXdMHHHH#HHH#HH#HH#H#HH#HH#HH#HH#H#HHHH#HH#HH#HH#HH#HH#HH#HH#HH#HHHH#HH#HH#H#HH#H    //\n//    HH##HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#H#HHH#HH#H#H#HH#HHH#HH#HH#HB<>>?1===1+1zwXXXXXWWyyWHHWWkWpfWHozC+wrvXXXwdHHHqHWHkWyWHkXMHH#HH#HH#HH#HHH#HH#HH#HH#HHHH#H#HH#HH#HHH#H#HH#HH#HH#HHH#HH#HHH#HH#HH#HH#HH    //\n//    H#HHH#HH#HH#HH#HHHHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#HH#HHH#HH@+>++??+ztOzuXwXSXXUWWWkXHHWHHHWkWWkWywXrwdHrZXHNWM@Mg@HMHWHkI7HM#HH#HHH#HH#HH#HH#HH#HH#H#HH#HH#HH#HH#HHHH#HH#HH#HH#HHH#HH#H#HH#HHHHH#HHH    //\n//    H#H#H#HHH#HHH#HH##HHH#HHH#HH#HH#HH#HH#HHH#HH#HHH#HH#HH#HH#HH#HM><=?ztwzwvOz0dWXuXykZWWkvvH@MM@HHgHWkWyWXpHWwXW@HMMqH@MM@H@HROzwVMHHH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#HH#H#H#HH#HH#HH#HH#HH#HH#HH#HH#H#HHH#H#    //\n//    HH#HH#H#HH#HHH#HHH#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHHB>(zzzzwXXzrXXZOUwXdWXkdHWHedMHHMHMHH@HWkHVWWXWWHHHMWMWHMM@MH@HwyOdMHH#H#HH#HH#HHH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HH#HHHH#HH#H#HHH#H    //\n//    H#H#HH#HH#H#HHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HHH#HHH#HH#HH#HH#HMC1zwVwX0XWZOzI<Ofu0wwXZXXWHHHkHMH#M@HMMMMHHWHWMMHM@@HHHHWWMM@MHkkkWHHNHMH#HH#HH#HHH#HH#HH#HHH#HHH#HH#HH#HHH#HH#HH#HH#HH#HH#HH#HHH#HHHH#HHHH    //\n//    H#H#H#HH#HHH#HH#H#HH#HH#HH#H#HHH#HHH#HH#HH#HHH#HH#HH#HH#HHMB<+zzOOwXyXXkwvC<zw0ww0OXwU0XHWpXHMHHHHgmHMHHHMMHMH@MHWH0wW@HH@HWHHWMH##HNWM#HH#HH#HHH#HH#HH#HHH#HHH#HHH#HH#HH#HHH#HH#HH#HH#HH#H#HHH#H#HH#H#H    //\n//    HH#HH#HHH#HH#HHH#HH#HHHHH#HHH#HH#H#HH#HH#HH#HH#HHH#HH#HH#H@-<z==1rOwXwOX0O<1OOzwzOwXOvdWHHHyHHHHqHHHHWHMH@@HHHHMHXWQHHMMWHWMHHHWM#HHHHNHWM##HH#HHH#HH#HH#HH#H#HH#HHH#HH#HH#HHH#HHH#HH#HH#HHH#HHH#HH#HHH#    //\n//    H#H#HH#HH#HHH#HHHH#HH#H#HH#HH#HHH#HH#HH#HH#HH#HH#HH#HH#HHM31zv<<?zd0trwXv<++Ozzt=zv<jAwXWU0XWWWbpfWHkkXHHg@@@HHMHXMMHHMHHHHHMNMNHM#HH##HMMMkHMH#HHH#HH#HH#HH#HH#H#HH#HH#HH#H#HH#HHH#HHH#HH#HH#HHHH#HH#HH    //\n//    H#HH#HH#HH#HH#H#H#HH#HH#HH#HHH#HHHH#HH#HH#HH#HH#HH#HH#HHH@lz1>(+zzZzzwwr><1I1lz1+zv<<zWWHkyOOVwWXWWWWppWWgggg@@@HMHHMMHW@gHMNNNNNMM#HHHHHHHHHmZHM#HH#HH#HH#HHH#HHH#HH#HH#HH#HH#H#HHH#HHH#HH#HH#H#HH#HH#H    //\n//    HH#HH#HH#HH#HH#HHH#HHH#HH#HH#HH#H#HH#HHH#HH#HH#HH#HH#HHME-+OO><zZOOzZOOz<(11+l1z=zI;+1wOXUVI=<zwUyZyfppbbqmggg@@@HHM@HkWHHMNNNNNNNNMH#HHHHHNWkXWWMHHH#HH#HH#HHH#HHH#HH#HH#HHH#HHH#HH#H#HH#HH#HH#HH#HH#HH    //\n//    H#H#H#HH#HHH#HHH#HH#HH#HHH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HKOZ1v<+zzzz+OwVz<<<+zzOz1OOz1IzwO===1ztwZZZyVffbbqqmgg@@@H#@@@mWHHMNNNNNNNN##MMH##HHMHNXWM#HHH#HH#HH#HH#H#HH#HH#HH#HHH#HH#HHH#HH#HH#HHHHH#HH#HH#    //\n//    H#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HHHH#HH#HH#HH#HH#HHH#HH#HM6w0<1<z=<1zzzrv++<<zlt<;>zOz1zzXWwwzOOwZZZyyVfbkkqqmg@@@@H#MMHHWkMM####M#####HMMHH#HHHHHkW#H#HH#HH#HH#HH#HH#HH#HHH#H#HH#HH#HHHH#HH#HH##HHH#HHH#H    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#H#HH#HH#HH#HH#HH#HHH#HH#@=z1z+<+?zlOOlz+zz:~<z11?>+?1zOwUfSXUXOlwZZyVVppkqqmgg@@@HHHHMHqHWW@HM##MNNNNNMNNMMH#HHHMNMHHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#H#H#HH#HHH#HH#HHH#HHHH    //\n//    H#H#H#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#H#HHH#HHkOtzz+zz<<?zI1==1I<:(<<<1+1zwrvOvwXwXuuOzXXyyffpbqqqmg@@@@HHH@HWWWXHMMMNNNMMNNMMMMMMMMMMHHHH#HH#HH#HH#HH#HHH#HHH#HHHHH#HH#HHH#HH#HH#HHHH#H#HH#H#H    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHHH#HH#HH#HH#HH#HHH#HHH#HWHv1zOzzO+zzv<<?>><~+<++(+zXVrrttrvwXWXwlwZWfVppbkqqgg@@@@@@HHHHHXWgM#MNNNN#MNMNNNNMHWM@MMHHMMHH#HH#HH#HH#HHH#HH#H#H#HH#HH#HHHH#HH#H#H#HH#HH#HHH#    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#H#HH#HHH#HH#HH#HH#HH#HHH#MKW0?OwZz<<<;;+<;_(>1z<zzzzO=zOtttrvOzOXOwZXWbpbqqmgggg@@@@HH@@HWWWMMN##NNNMMMMMMMMMNMHMgmHHMHH#HH#HH#HH#H#HH#HHH#HH#HHH#HH#H#HH#HHHH#HHHHH#HH#HH    //\n//    H#H#H#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#H#HHH#MSI<?><<<<~~<<;<(<+l<_<1=zz==OrwrrvwOOwWkXVVWbWqmmmmmm@@@HH@H@HfH@MM#MMMN#NNMMMMMNMMNMHMH#HHH#HH#HH#HH#HHH#HH#HHHH#HH#HH#HH#HH#HH#HHH#H#HHH#HH#H    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHH#HHH##MHkI<(<~<<~~_(~<<(zv=v<<~(zzwOlzwOrvrvwXHWkWWWmmmmHqkqqqg@@@HHMMHMNNHH@MM####H#NNNMMMMMMMHHHHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HH#HHH#HH#H#HHH#H#HH#HHHH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHH#HHM8ZC1<<<<~__~:(~(+++zz+>~_<+zzOWAwvvvrwXWWHWHWWHkkkkbpWkqg@@HHHH#MMNN#NWHHMHMHM###NMMMMMMNNMM#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HHH#HHHH#HHHHH#HH#H#H    //\n//    H#H#H#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HHNzOzv<~?Iuz1=<+zzlzI<<<<_(~<z??OZWWWWXyWWHHHWWffpbbbppWHm@@HHHHHHNN###MHWWMMgHHMM##NMMMMNMMMMMHHH#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#H#HH#H#HH#HHH#HH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HNVOOlz<><<?=?<<<1rI<~<(;:_(1zOOwOtwOOvwXXWfWHyVffpppppHH@MHM##########MHW@@M@HHHHHHMMMMMMM#HMHH#HH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#H#HHH#HH#HH#HHH#HHH#H    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HHQgNm<zo+(__(_(1z<___(<<<zVOCz1+7TzzOVVOXHUUUUWUUUWWHHHMMMMMMMMMMMM##MHH@HMHH@HH###MMM#NMMHHHMHH#HH#HHH#HH#HHH#HHH#HHH#HH#HH#HHH#HHHH#HH#HH#HH#HHH#    //\n//    H#H#H#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HHHH#NOr>:(((l=<<<~~_``  ``````` ``` ` ` `` ` ` ` `  ` `` ` `` ` `.###M@HHHHH@MMHHNMNHHMMMkHMHH#HH#HH#HH#HH#HH#H#HH#HHH#HHH#HH#HH#H#HH#HH#HH#HH#HHH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HHHHHNItzOO1==<:~~~_` ``  `   ` `  ` `  ` ` `  `` `` ` ` ` ` ` ` .H#HMM@@HM@@MMMHNMMMHHQMHHH#HH#HHH#HH#HH#HH#HHH#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#H#HH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#H#HHHNvvOzz=1<:_~~_`  `.((((-.....  ``  ` ` `  ``.JJJJ..-...` ` .HHHH#NMNHHH@MMN#MMMHHH#H#HH#HH#HH#HHH#HH#HH#HH#HH#H#HH#HH#HHH#HHH#HH#HH#HH#HHH#H    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#H#HHHHRwVOzz<::~:_ `  .uuuuX==?=z ` `` ` ` `` ``JfVVfS????<` ``.HHHHHH###MHHMMMHHHHHHHH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HHH#HH#HH#HH#    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHHH##HHNmzOOzz::(:<` ``.zuzuw=?=?z `  `` ` ` `` `(fVVfS?>??<`  `.#HHHHHHHM#MHMM#HHH#H#HHHH#HH#HH#HH#HH#HH#HH#HH#HHHHH#HH#HH#HH#HH#HH#HHH#HHH#HHHH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#H#HHH#HHM3(1O>     ` `  =1==v`````  ` `(_+zd{  ``(1111>____``` ` _````````_WHM#H#H#HH#H#H#HH#HH#HH#HH#HH#HH#HH#HH#H#HH#HHH#HH#HH#HH#H#HHH#HHH#H#H    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#HHHHH8zzZ>`  `  ` ` ????> `````` ``(<zwW}` ``(?>>?<...``` `  ` ` `     dMHHHH#HH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HHH#HHH#HH#HHH#HH#H#HH#HH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#H#HNZ<<_     ` `  ++<<> `````  ``(<zwW} ` `(<<<<<``..`` `` ..........dMHH#HHH#HH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HHH#HH#HH#HHH#HH#HH#    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#N,(=<::~_ ` ` ``` ` ` `  ``  __1wX{ ` ` ``` ``   ` `  .MMHHHHMMHkHH#HH#HHH#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#H#HH#H#HH#HH#HH#HHHH#HH#H    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HH#HHHHHHMmJzz<:~~` ` `  ` `` ` ` ` ``(:1wX{` ` `  ` ` ``` ` ``.MHHHHHH@@HfMHHHH#HH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#H#H#HH#HHH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#H##HHHHNz?;;__....................(+zwWa(((((((((((---....-(@H@@H@HM@HKWH#HH#HHH#HH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HHH#HH#HH#H    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HH#H#HHR<>><<_((>>1Olv=??<<<++<:<<+zwXHM#H#H##NNN#H@@Hmgg@@HHHH@@H@MHWWMH#HH#HH#HHHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HH#HHH#HH#HH    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HH#HHHHH#HHH@:<?>?+>>>>=zI<>>>+1w0z<<:_(zwXHHH##NNNNN##HH@@@@@@H@H@@@H@@HqHWHHH#HH#HH#H#HH#HH#HHH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#H    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#H#HHH#H#@~;>+???>>>><;;>++zXKI<<;;~(zwWHM#####NNN##HH@@@@HHH@@@@@@H@gHHMHH#HH#HH#HH#HH#HHH#HHHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#H#HHH#Hn(<;>?==?>>;<<>+zwXHS<(+(<_(wXWHHH#HHHHNNN#HHH@@@HH@H@@@H@HHHHMHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HHHH    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HHHH#HHH#N<:<>>>><<;;+1zwXWm9OzwQmszzwWHHMMMMMMMNMNN#HHH@@@@@@@@@@H@@@HMHHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HHHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#H#HHHMI(<>>>>>;+1ztwXWWSI?zvUWHkXWHHMMNNNNNNNNNN##HH@@@@@@@@H@H@@@gMHH#HH#HH#HHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#H#HHH#HHH#HHH#HH#HH#H#H    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HHHH#HH#N!(???>>>?=lOwyWSz?=zwXXffWWHMMMMM#NNNNNNNN##HH@@@@@H@@@HH@MHMHH#HH#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HHHH#HHH#HH#H#HH#HHH#HHH#HHH#    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#H#HH#HHN<<><+????=twXU01+1zXkXXWXWHHqHHHHHMMNNNNMMNNHHH@@H@@HHH@@@HMHHHH#HH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#H#HHH#HH#HH#H    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH##~(;;1O===zOrvOtvwtzX0XWHHkHMHHHWWHHHM#MNNMNNNHHHH@HHHHHH@gMHH#HH#HH#HHH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HHHH#HHH#HH#HHH#HHH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HHH#HH#HN_~<<+1llzOOOIz1wXWkXwWHmHHMHkHHHHHHHHHMH#HMNN#HHHH@HHHH@@HHHHH#HH#HH#HHHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#H#HH#HH#HHH#HH#HH#    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HHH#HHHM,_(+<1tzzO???1wXWWkXWHHqqHHWMMMMMMMMHMMM#MMMNHHHHHHHHHM@HHH#HH#HH#HH#H#H#HH#HH#HH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HHH#HH#HHH#HH    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HHH#HHHm-_+1+zzlzzzzOXWW@MHUUUUWWWWHHMH#NNNNNNN#M#MMHH#HHH#HMMgMHHH#HH#HH#HH#HHH#HH#HH#HHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#HH#HH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#H#HHe-<jO=ltOOOzwWmHWVrrvzuuXWWWgM####NN##NN##NHMMMH@MHMHHHHH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HHH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH#HH#HH#HH#    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HHHH#H#@+vzl?zXOz1wXH0uvXyWyWWH@M@HHMHHHHHH##NN###M@@HgHHHHWMHHH#HH#HH#HH#HH#HH#HHH#HH#HH#HHH#HHHH#HHH#HH#H#HH#HHH#HHH#HH#HH#HH#HH#HH#H    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#H#HHHM8z1<zOtrO1=OXyXwvuXWWWpHkbHWW@HHHHHHHH#N#HMHMMgggmHHMH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#H#H#HH#HH#HH#HH#H#HHH#HHH#HHH#HH#HH#HH#HH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HM\"^_;__(<?zrvzOZOZOwVZZVUUXUWpWuXMM@MHHHHH#HHMMHH@gmmHHWHHH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH#HH#HHH#HHH#HH#H#HH#HHH#HHH#HH#HHH    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HHH#HH##b`__._~~(+OwOzzlOzzz<+zlztwXUXXWWHH@HHMHHMMMqHkHHWkkHWHH#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HHH#HH#HH#HH#HHH#HH#HHH#HH#H#HHH#HHH#HH#H#    //\n//    H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HHHR. . .._:;+z<=zrO<>>>+zrvwzrXXwyHmqHHMMHHMHHHWpppppVWWMHH#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HHH#HHHH#HHH#HH#H#HH#HHHH    //\n//    HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HHHMR.P`.~(;><<+llI<<<<zzvOwXXXXXdWpHHmHHWUUWXUXWbppWVWHH#HH#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHH#HH#HH#HH#H#H#HH#HH#HH#HH#HH#HH    //\n//    H#H#H#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HH#HHH#HH#HH#HH#HH#HHHHHM'  ~~::<<=z1v?>:>==zwwXXWVXwwXbHHUXvIzwvtwffVyyXXHH#H                                                                              //\n//                                                                                                                                                                                                                //\n//                                                                                                                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\ncontract GDH is ERC1155Creator {\n    constructor() ERC1155Creator(\"GORODOKOHIRAKIPPERS\", \"GDH\") {}\n}\n"
6     },
7     "contracts/manifold/ERC1155Creator.sol": {
8       "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract ERC1155Creator is Proxy {\n\n    constructor(string memory name, string memory symbol) {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x6bf5ed59dE0E19999d264746843FF931c0133090;\n        Address.functionDelegateCall(\n            0x6bf5ed59dE0E19999d264746843FF931c0133090,\n            abi.encodeWithSignature(\"initialize(string,string)\", name, symbol)\n        );\n    }\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n     function implementation() public view returns (address) {\n        return _implementation();\n    }\n\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }    \n\n}\n"
9     },
10     "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
12     },
13     "node_modules/@openzeppelin/contracts/utils/Address.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
15     },
16     "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
18     }
19   },
20   "settings": {
21     "remappings": [
22       "@openzeppelin/=node_modules/@openzeppelin/"
23     ],
24     "optimizer": {
25       "enabled": true,
26       "runs": 300
27     },
28     "metadata": {
29       "bytecodeHash": "ipfs"
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "evmVersion": "london",
44     "libraries": {}
45   }
46 }}